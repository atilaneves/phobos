[
	{
		"kind": "module",
		"file": "../druntime/src/core/vararg.d",
		"members": [],
		"name": "core.vararg",
		"comment": " The vararg module is intended to facilitate vararg manipulation in D.\n It should be interface compatible with the C module \"stdarg,\" and the\n two modules may share a common implementation if possible (as is done\n here).\n Copyright: Copyright Digital Mars 2000 - 2009.\n License:   $(LINK2 http://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n Authors:   Walter Bright, Hauke Duden\n Source:    $(DRUNTIMESRC core/_vararg.d)\n"
	},
	{
		"kind": "module",
		"file": "../druntime/src/core/checkedint.d",
		"members": [
			{
				"kind": "function",
				"line": 49,
				"deco": "FNaNbNiNfiiKbZi",
				"endchar": 1,
				"char": 5,
				"parameters": [
					{
						"deco": "i",
						"name": "x"
					},
					{
						"deco": "i",
						"name": "y"
					},
					{
						"deco": "b",
						"storageClass": [
							"ref"
						],
						"name": "overflow"
					}
				],
				"name": "adds",
				"comment": " Add two signed integers, checking for overflow.\n\n The overflow is sticky, meaning a sequence of operations can\n be done and overflow need only be checked at the end.\n Params:\n      x = left operand\n      y = right operand\n      overflow = set if an overflow occurs, is not affected otherwise\n Returns:\n      the sum\n",
				"endline": 55
			},
			{
				"kind": "function",
				"line": 76,
				"deco": "FNaNbNiNfllKbZl",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "l",
						"name": "x"
					},
					{
						"deco": "l",
						"name": "y"
					},
					{
						"deco": "b",
						"storageClass": [
							"ref"
						],
						"name": "overflow"
					}
				],
				"name": "adds",
				"comment": "ditto\n",
				"endline": 83
			},
			{
				"kind": "function",
				"line": 117,
				"deco": "FNaNbNiNfkkKbZk",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "k",
						"name": "x"
					},
					{
						"deco": "k",
						"name": "y"
					},
					{
						"deco": "b",
						"storageClass": [
							"ref"
						],
						"name": "overflow"
					}
				],
				"name": "addu",
				"comment": " Add two unsigned integers, checking for overflow (aka carry).\n\n The overflow is sticky, meaning a sequence of operations can\n be done and overflow need only be checked at the end.\n Params:\n      x = left operand\n      y = right operand\n      overflow = set if an overflow occurs, is not affected otherwise\n Returns:\n      the sum\n",
				"endline": 123
			},
			{
				"kind": "function",
				"line": 144,
				"deco": "FNaNbNiNfmmKbZm",
				"endchar": 1,
				"char": 7,
				"parameters": [
					{
						"deco": "m",
						"name": "x"
					},
					{
						"deco": "m",
						"name": "y"
					},
					{
						"deco": "b",
						"storageClass": [
							"ref"
						],
						"name": "overflow"
					}
				],
				"name": "addu",
				"comment": "ditto\n",
				"endline": 150
			},
			{
				"kind": "function",
				"line": 184,
				"deco": "FNaNbNiNfiiKbZi",
				"endchar": 1,
				"char": 5,
				"parameters": [
					{
						"deco": "i",
						"name": "x"
					},
					{
						"deco": "i",
						"name": "y"
					},
					{
						"deco": "b",
						"storageClass": [
							"ref"
						],
						"name": "overflow"
					}
				],
				"name": "subs",
				"comment": " Subtract two signed integers, checking for overflow.\n\n The overflow is sticky, meaning a sequence of operations can\n be done and overflow need only be checked at the end.\n Params:\n      x = left operand\n      y = right operand\n      overflow = set if an overflow occurs, is not affected otherwise\n Returns:\n      the sum\n",
				"endline": 190
			},
			{
				"kind": "function",
				"line": 211,
				"deco": "FNaNbNiNfllKbZl",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "l",
						"name": "x"
					},
					{
						"deco": "l",
						"name": "y"
					},
					{
						"deco": "b",
						"storageClass": [
							"ref"
						],
						"name": "overflow"
					}
				],
				"name": "subs",
				"comment": "ditto\n",
				"endline": 219
			},
			{
				"kind": "function",
				"line": 252,
				"deco": "FNaNbNiNfkkKbZk",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "k",
						"name": "x"
					},
					{
						"deco": "k",
						"name": "y"
					},
					{
						"deco": "b",
						"storageClass": [
							"ref"
						],
						"name": "overflow"
					}
				],
				"name": "subu",
				"comment": " Subtract two unsigned integers, checking for overflow (aka borrow).\n\n The overflow is sticky, meaning a sequence of operations can\n be done and overflow need only be checked at the end.\n Params:\n      x = left operand\n      y = right operand\n      overflow = set if an overflow occurs, is not affected otherwise\n Returns:\n      the sum\n",
				"endline": 257
			},
			{
				"kind": "function",
				"line": 279,
				"deco": "FNaNbNiNfmmKbZm",
				"endchar": 1,
				"char": 7,
				"parameters": [
					{
						"deco": "m",
						"name": "x"
					},
					{
						"deco": "m",
						"name": "y"
					},
					{
						"deco": "b",
						"storageClass": [
							"ref"
						],
						"name": "overflow"
					}
				],
				"name": "subu",
				"comment": "ditto\n",
				"endline": 284
			},
			{
				"kind": "function",
				"line": 315,
				"deco": "FNaNbNiNfiKbZi",
				"endchar": 1,
				"char": 5,
				"parameters": [
					{
						"deco": "i",
						"name": "x"
					},
					{
						"deco": "b",
						"storageClass": [
							"ref"
						],
						"name": "overflow"
					}
				],
				"name": "negs",
				"comment": " Negate an integer.\n\n Params:\n      x = operand\n      overflow = set if x cannot be negated, is not affected otherwise\n Returns:\n      the negation of x\n",
				"endline": 320
			},
			{
				"kind": "function",
				"line": 338,
				"deco": "FNaNbNiNflKbZl",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "l",
						"name": "x"
					},
					{
						"deco": "b",
						"storageClass": [
							"ref"
						],
						"name": "overflow"
					}
				],
				"name": "negs",
				"comment": "ditto\n",
				"endline": 343
			},
			{
				"kind": "function",
				"line": 374,
				"deco": "FNaNbNiNfiiKbZi",
				"endchar": 1,
				"char": 5,
				"parameters": [
					{
						"deco": "i",
						"name": "x"
					},
					{
						"deco": "i",
						"name": "y"
					},
					{
						"deco": "b",
						"storageClass": [
							"ref"
						],
						"name": "overflow"
					}
				],
				"name": "muls",
				"comment": " Multiply two signed integers, checking for overflow.\n\n The overflow is sticky, meaning a sequence of operations can\n be done and overflow need only be checked at the end.\n Params:\n      x = left operand\n      y = right operand\n      overflow = set if an overflow occurs, is not affected otherwise\n Returns:\n      the sum\n",
				"endline": 380
			},
			{
				"kind": "function",
				"line": 403,
				"deco": "FNaNbNiNfllKbZl",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "l",
						"name": "x"
					},
					{
						"deco": "l",
						"name": "y"
					},
					{
						"deco": "b",
						"storageClass": [
							"ref"
						],
						"name": "overflow"
					}
				],
				"name": "muls",
				"comment": "ditto\n",
				"endline": 409
			},
			{
				"kind": "function",
				"line": 445,
				"deco": "FNaNbNiNfkkKbZk",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "k",
						"name": "x"
					},
					{
						"deco": "k",
						"name": "y"
					},
					{
						"deco": "b",
						"storageClass": [
							"ref"
						],
						"name": "overflow"
					}
				],
				"name": "mulu",
				"comment": " Multiply two unsigned integers, checking for overflow (aka carry).\n\n The overflow is sticky, meaning a sequence of operations can\n be done and overflow need only be checked at the end.\n Params:\n      x = left operand\n      y = right operand\n      overflow = set if an overflow occurs, is not affected otherwise\n Returns:\n      the sum\n",
				"endline": 451
			},
			{
				"kind": "function",
				"line": 474,
				"deco": "FNaNbNiNfmmKbZm",
				"endchar": 1,
				"char": 7,
				"parameters": [
					{
						"deco": "m",
						"name": "x"
					},
					{
						"deco": "m",
						"name": "y"
					},
					{
						"deco": "b",
						"storageClass": [
							"ref"
						],
						"name": "overflow"
					}
				],
				"name": "mulu",
				"comment": "ditto\n",
				"endline": 480
			}
		],
		"name": "core.checkedint",
		"comment": " This module implements integral arithmetic primitives that check\n for out-of-range results.\n\n Integral arithmetic operators operate on fixed width types.\n Results that are not representable in those fixed widths are silently\n truncated to fit.\n This module offers integral arithmetic primitives that produce the\n same results, but set an 'overflow' flag when such truncation occurs.\n The setting is sticky, meaning that numerous operations can be cascaded\n and then the flag need only be checked at the end.\n Whether the operation is signed or unsigned is indicated by an 's' or 'u'\n suffix, respectively. While this could be achieved without such suffixes by\n using overloading on the signedness of the types, the suffix makes it clear\n which is happening without needing to examine the types.\n\n While the generic versions of these functions are computationally expensive\n relative to the cost of the operation itself, compiler implementations are free\n to recognize them and generate equivalent and faster code.\n\n References: $(LINK2 http://blog.regehr.org/archives/1139, Fast Integer Overflow Checks)\n Copyright: Copyright (c) Walter Bright 2014.\n License:   $(LINK2 http://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n Authors:   Walter Bright\n Source:    $(DRUNTIMESRC core/_checkedint.d)\n"
	},
	{
		"kind": "module",
		"file": "../druntime/src/core/sync/barrier.d",
		"members": [
			{
				"kind": "class",
				"line": 45,
				"members": [
					{
						"kind": "constructor",
						"line": 62,
						"deco": "FkZC4core4sync7barrier7Barrier",
						"endchar": 5,
						"char": 5,
						"parameters": [
							{
								"deco": "k",
								"name": "limit"
							}
						],
						"name": "this",
						"comment": "\n\n\n\n Initializes a barrier object which releases threads in groups of limit\n in size.\n\n Params:\n  limit = The number of waiting threads to release in unison.\n\n Throws:\n  SyncError on error.\n",
						"originalType": "(uint limit)",
						"endline": 74
					},
					{
						"kind": "function",
						"line": 88,
						"deco": "FZv",
						"endchar": 5,
						"char": 10,
						"name": "wait",
						"comment": "\n\n\n\n Wait for the pre-determined number of threads and then proceed.\n\n Throws:\n  SyncError on error.\n",
						"endline": 103
					}
				],
				"char": 1,
				"name": "Barrier",
				"comment": "\n\n\n\n This class represents a barrier across which threads may only travel in\n groups of a specific size.\n"
			}
		],
		"name": "core.sync.barrier",
		"comment": " The barrier module provides a primitive for synchronizing the progress of\n a group of threads.\n\n Copyright: Copyright Sean Kelly 2005 - 2009.\n License:   $(LINK2 http://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n Authors:   Sean Kelly\n Source:    $(DRUNTIMESRC core/sync/_barrier.d)\n"
	},
	{
		"kind": "module",
		"file": "../druntime/src/core/sync/rwmutex.d",
		"members": [
			{
				"kind": "class",
				"line": 55,
				"members": [
					{
						"kind": "enum",
						"line": 72,
						"members": [
							{
								"kind": "enum member",
								"line": 74,
								"value": "0",
								"char": 9,
								"name": "PREFER_READERS",
								"comment": "Readers get preference.  This may starve writers.\n"
							},
							{
								"kind": "enum member",
								"line": 75,
								"value": "1",
								"char": 9,
								"name": "PREFER_WRITERS",
								"comment": "Writers get preference.  This may starve readers.\n"
							}
						],
						"char": 5,
						"baseDeco": "i",
						"name": "Policy",
						"comment": " Defines the policy used by this mutex.  Currently, two policies are\n defined.\n\n The first will queue writers until no readers hold the mutex, then\n pass the writers through one at a time.  If a reader acquires the mutex\n while there are still writers queued, the reader will take precedence.\n\n The second will queue readers if there are any writers queued.  Writers\n are passed through one at a time, and once there are no writers present,\n all queued readers will be alerted.\n\n Future policies may offer a more even balance between reader and writer\n precedence.\n"
					},
					{
						"kind": "constructor",
						"line": 93,
						"deco": "FE4core4sync7rwmutex14ReadWriteMutex6PolicyZC4core4sync7rwmutex14ReadWriteMutex",
						"endchar": 5,
						"char": 5,
						"parameters": [
							{
								"deco": "E4core4sync7rwmutex14ReadWriteMutex6Policy",
								"default": "cast(Policy)1",
								"name": "policy"
							}
						],
						"name": "this",
						"comment": "\n\n\n\n Initializes a read/write mutex object with the supplied policy.\n\n Params:\n  policy = The policy to use.\n\n Throws:\n  SyncError on error.\n",
						"originalType": "(Policy policy = Policy.PREFER_WRITERS)",
						"endline": 110
					},
					{
						"kind": "function",
						"line": 123,
						"deco": "FNdZE4core4sync7rwmutex14ReadWriteMutex6Policy",
						"endchar": 5,
						"char": 22,
						"name": "policy",
						"comment": "\n\n\n\n Gets the policy used by this mutex.\n\n Returns:\n  The policy used by this mutex.\n",
						"endline": 126
					},
					{
						"kind": "function",
						"line": 140,
						"deco": "FNdZC4core4sync7rwmutex14ReadWriteMutex6Reader",
						"endchar": 5,
						"char": 22,
						"name": "reader",
						"comment": "\n\n\n\n Gets an object representing the reader lock for the associated mutex.\n\n Returns:\n  A reader sub-mutex.\n",
						"endline": 143
					},
					{
						"kind": "function",
						"line": 152,
						"deco": "FNdZC4core4sync7rwmutex14ReadWriteMutex6Writer",
						"endchar": 5,
						"char": 22,
						"name": "writer",
						"comment": " Gets an object representing the writer lock for the associated mutex.\n\n Returns:\n  A writer sub-mutex.\n",
						"endline": 155
					},
					{
						"kind": "class",
						"line": 167,
						"members": [
							{
								"kind": "constructor",
								"line": 173,
								"deco": "FZC4core4sync7rwmutex14ReadWriteMutex6Reader",
								"endchar": 9,
								"char": 9,
								"name": "this",
								"comment": " Initializes a read/write mutex reader proxy object.\n",
								"originalType": "()",
								"endline": 177
							},
							{
								"kind": "function",
								"line": 183,
								"deco": "FNeZv",
								"endchar": 9,
								"char": 23,
								"name": "lock",
								"comment": " Acquires a read lock on the enclosing mutex.\n",
								"endline": 194,
								"overrides": [
									"object.Object.Monitor.lock"
								]
							},
							{
								"kind": "function",
								"line": 200,
								"deco": "FNeZv",
								"endchar": 9,
								"char": 23,
								"name": "unlock",
								"comment": " Releases a read lock on the enclosing mutex.\n",
								"endline": 210,
								"overrides": [
									"object.Object.Monitor.unlock"
								]
							},
							{
								"kind": "function",
								"line": 221,
								"deco": "FZb",
								"endchar": 9,
								"char": 14,
								"name": "tryLock",
								"comment": " Attempts to acquire a read lock on the enclosing mutex.  If one can\n be obtained without blocking, the lock is acquired and true is\n returned.  If not, the lock is not acquired and false is returned.\n\n Returns:\n  true if the lock was acquired and false if not.\n",
								"endline": 230
							}
						],
						"char": 5,
						"interfaces": [
							"object.Object.Monitor"
						],
						"name": "Reader",
						"comment": "\n\n\n\n This class can be considered a mutex in its own right, and is used to\n negotiate a read lock for the enclosing mutex.\n"
					},
					{
						"kind": "class",
						"line": 270,
						"members": [
							{
								"kind": "constructor",
								"line": 276,
								"deco": "FZC4core4sync7rwmutex14ReadWriteMutex6Writer",
								"endchar": 9,
								"char": 9,
								"name": "this",
								"comment": " Initializes a read/write mutex writer proxy object.\n",
								"originalType": "()",
								"endline": 280
							},
							{
								"kind": "function",
								"line": 286,
								"deco": "FNeZv",
								"endchar": 9,
								"char": 23,
								"name": "lock",
								"comment": " Acquires a write lock on the enclosing mutex.\n",
								"endline": 297,
								"overrides": [
									"object.Object.Monitor.lock"
								]
							},
							{
								"kind": "function",
								"line": 303,
								"deco": "FNeZv",
								"endchar": 9,
								"char": 23,
								"name": "unlock",
								"comment": " Releases a write lock on the enclosing mutex.\n",
								"endline": 326,
								"overrides": [
									"object.Object.Monitor.unlock"
								]
							},
							{
								"kind": "function",
								"line": 337,
								"deco": "FZb",
								"endchar": 9,
								"char": 14,
								"name": "tryLock",
								"comment": " Attempts to acquire a write lock on the enclosing mutex.  If one can\n be obtained without blocking, the lock is acquired and true is\n returned.  If not, the lock is not acquired and false is returned.\n\n Returns:\n  true if the lock was acquired and false if not.\n",
								"endline": 346
							}
						],
						"char": 5,
						"interfaces": [
							"object.Object.Monitor"
						],
						"name": "Writer",
						"comment": "\n\n\n\n This class can be considered a mutex in its own right, and is used to\n negotiate a write lock for the enclosing mutex.\n"
					}
				],
				"char": 1,
				"name": "ReadWriteMutex",
				"comment": "\n\n\n\n This class represents a mutex that allows any number of readers to enter,\n but when a writer enters, all other readers and writers are blocked.\n\n Please note that this mutex is not recursive and is intended to guard access\n to data only.  Also, no deadlock checking is in place because doing so would\n require dynamic memory allocation, which would reduce performance by an\n unacceptable amount.  As a result, any attempt to recursively acquire this\n mutex may well deadlock the caller, particularly if a write lock is acquired\n while holding a read lock, or vice-versa.  In practice, this should not be\n an issue however, because it is uncommon to call deeply into unknown code\n while holding a lock that simply protects data.\nExample:\n\n---\nimport core.atomic, core.thread, core.sync.semaphore;\n\nstatic void runTest(ReadWriteMutex.Policy policy)\n{\n    scope mutex = new ReadWriteMutex(policy);\n    scope rdSemA = new Semaphore, rdSemB = new Semaphore,\n          wrSemA = new Semaphore, wrSemB = new Semaphore;\n    shared size_t numReaders, numWriters;\n\n    void readerFn()\n    {\n        synchronized (mutex.reader)\n        {\n            atomicOp!\"+=\"(numReaders, 1);\n            rdSemA.notify();\n            rdSemB.wait();\n            atomicOp!\"-=\"(numReaders, 1);\n        }\n    }\n\n    void writerFn()\n    {\n        synchronized (mutex.writer)\n        {\n            atomicOp!\"+=\"(numWriters, 1);\n            wrSemA.notify();\n            wrSemB.wait();\n            atomicOp!\"-=\"(numWriters, 1);\n        }\n    }\n\n    void waitQueued(size_t queuedReaders, size_t queuedWriters)\n    {\n        for (;;)\n        {\n            synchronized (mutex.m_commonMutex)\n            {\n                if (mutex.m_numQueuedReaders == queuedReaders &&\n                    mutex.m_numQueuedWriters == queuedWriters)\n                    break;\n            }\n            Thread.yield();\n        }\n    }\n\n    scope group = new ThreadGroup;\n\n    // 2 simultaneous readers\n    group.create(&readerFn); group.create(&readerFn);\n    rdSemA.wait(); rdSemA.wait();\n    assert(numReaders == 2);\n    rdSemB.notify(); rdSemB.notify();\n    group.joinAll();\n    assert(numReaders == 0);\n    foreach (t; group) group.remove(t);\n\n    // 1 writer at a time\n    group.create(&writerFn); group.create(&writerFn);\n    wrSemA.wait();\n    assert(!wrSemA.tryWait());\n    assert(numWriters == 1);\n    wrSemB.notify();\n    wrSemA.wait();\n    assert(numWriters == 1);\n    wrSemB.notify();\n    group.joinAll();\n    assert(numWriters == 0);\n    foreach (t; group) group.remove(t);\n\n    // reader and writer are mutually exclusive\n    group.create(&readerFn);\n    rdSemA.wait();\n    group.create(&writerFn);\n    waitQueued(0, 1);\n    assert(!wrSemA.tryWait());\n    assert(numReaders == 1 && numWriters == 0);\n    rdSemB.notify();\n    wrSemA.wait();\n    assert(numReaders == 0 && numWriters == 1);\n    wrSemB.notify();\n    group.joinAll();\n    assert(numReaders == 0 && numWriters == 0);\n    foreach (t; group) group.remove(t);\n\n    // writer and reader are mutually exclusive\n    group.create(&writerFn);\n    wrSemA.wait();\n    group.create(&readerFn);\n    waitQueued(1, 0);\n    assert(!rdSemA.tryWait());\n    assert(numReaders == 0 && numWriters == 1);\n    wrSemB.notify();\n    rdSemA.wait();\n    assert(numReaders == 1 && numWriters == 0);\n    rdSemB.notify();\n    group.joinAll();\n    assert(numReaders == 0 && numWriters == 0);\n    foreach (t; group) group.remove(t);\n\n    // policy determines whether queued reader or writers progress first\n    group.create(&writerFn);\n    wrSemA.wait();\n    group.create(&readerFn);\n    group.create(&writerFn);\n    waitQueued(1, 1);\n    assert(numReaders == 0 && numWriters == 1);\n    wrSemB.notify();\n\n    if (policy == ReadWriteMutex.Policy.PREFER_READERS)\n    {\n        rdSemA.wait();\n        assert(numReaders == 1 && numWriters == 0);\n        rdSemB.notify();\n        wrSemA.wait();\n        assert(numReaders == 0 && numWriters == 1);\n        wrSemB.notify();\n    }\n    else if (policy == ReadWriteMutex.Policy.PREFER_WRITERS)\n    {\n        wrSemA.wait();\n        assert(numReaders == 0 && numWriters == 1);\n        wrSemB.notify();\n        rdSemA.wait();\n        assert(numReaders == 1 && numWriters == 0);\n        rdSemB.notify();\n    }\n    group.joinAll();\n    assert(numReaders == 0 && numWriters == 0);\n    foreach (t; group) group.remove(t);\n}\nrunTest(ReadWriteMutex.Policy.PREFER_READERS);\nrunTest(ReadWriteMutex.Policy.PREFER_WRITERS);\n\n---\n"
			}
		],
		"name": "core.sync.rwmutex",
		"comment": " The read/write mutex module provides a primitive for maintaining shared read\n access and mutually exclusive write access.\n\n Copyright: Copyright Sean Kelly 2005 - 2009.\n License:   $(LINK2 http://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n Authors:   Sean Kelly\n Source:    $(DRUNTIMESRC core/sync/_rwmutex.d)\n"
	},
	{
		"kind": "module",
		"file": "../druntime/src/core/sync/condition.d",
		"members": [
			{
				"kind": "class",
				"line": 56,
				"members": [
					{
						"kind": "constructor",
						"line": 72,
						"deco": "FNbNfC4core4sync5mutex5MutexZC4core4sync9condition9Condition",
						"endchar": 5,
						"char": 5,
						"parameters": [
							{
								"deco": "C4core4sync5mutex5Mutex",
								"name": "m"
							}
						],
						"name": "this",
						"comment": "\n\n\n\n Initializes a condition object which is associated with the supplied\n mutex object.\n\n Params:\n  m = The mutex with which this condition will be associated.\n\n Throws:\n  SyncError on error.\n",
						"originalType": "nothrow @safe (Mutex m)",
						"endline": 96
					},
					{
						"kind": "function",
						"line": 128,
						"deco": "FNdZC4core4sync5mutex5Mutex",
						"endchar": 5,
						"char": 21,
						"name": "mutex",
						"comment": "\n\n\n\n Gets the mutex associated with this condition.\n\n Returns:\n  The mutex associated with this condition.\n",
						"endline": 131
					},
					{
						"kind": "function",
						"line": 151,
						"deco": "FZv",
						"endchar": 5,
						"char": 10,
						"name": "wait",
						"comment": "\n\n\n\n Wait until notified.\n\n Throws:\n  SyncError on error.\n",
						"endline": 163
					},
					{
						"kind": "function",
						"line": 182,
						"deco": "FS4core4time8DurationZb",
						"endchar": 5,
						"in": {
							"kind": "function",
							"line": 184,
							"deco": "FZv",
							"endchar": 5,
							"char": 5,
							"name": "__require",
							"endline": 184
						},
						"char": 10,
						"parameters": [
							{
								"deco": "S4core4time8Duration",
								"name": "val"
							}
						],
						"name": "wait",
						"comment": " Suspends the calling thread until a notification occurs or until the\n supplied time period has elapsed.\n\n Params:\n  val = The time to wait.\n\n In:\n  val must be non-negative.\n\n Throws:\n  SyncError on error.\n\n Returns:\n  true if notified before the timeout and false if not.\n",
						"endline": 216
					},
					{
						"kind": "function",
						"line": 225,
						"deco": "FZv",
						"endchar": 5,
						"char": 10,
						"name": "notify",
						"comment": " Notifies one waiter.\n\n Throws:\n  SyncError on error.\n",
						"endline": 237
					},
					{
						"kind": "function",
						"line": 246,
						"deco": "FZv",
						"endchar": 5,
						"char": 10,
						"name": "notifyAll",
						"comment": " Notifies all waiters.\n\n Throws:\n  SyncError on error.\n",
						"endline": 258
					}
				],
				"char": 1,
				"name": "Condition",
				"comment": "\n\n\n\n This class represents a condition variable as conceived by C.A.R. Hoare.  As\n per Mesa type monitors however, \"signal\" has been replaced with \"notify\" to\n indicate that control is not transferred to the waiter when a notification\n is sent.\n"
			}
		],
		"name": "core.sync.condition",
		"comment": " The condition module provides a primitive for synchronized condition\n checking.\n\n Copyright: Copyright Sean Kelly 2005 - 2009.\n License:   $(LINK2 http://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n Authors:   Sean Kelly\n Source:    $(DRUNTIMESRC core/sync/_condition.d)\n"
	},
	{
		"kind": "module",
		"file": "../druntime/src/core/sync/config.d",
		"members": [],
		"name": "core.sync.config",
		"comment": " The config module contains utility routines and configuration information\n specific to this package.\n\n Copyright: Copyright Sean Kelly 2005 - 2009.\n License:   $(WEB www.boost.org/LICENSE_1_0.txt, Boost License 1.0).\n Authors:   Sean Kelly\n Source:    $(DRUNTIMESRC core/sync/_config.d)\n"
	},
	{
		"kind": "module",
		"file": "../druntime/src/core/sync/exception.d",
		"members": [
			{
				"kind": "class",
				"line": 21,
				"base": "object.Error",
				"members": [],
				"char": 1,
				"name": "SyncError",
				"comment": " Base class for synchronization errors.\n"
			}
		],
		"name": "core.sync.exception",
		"comment": " Define base class for synchronization exceptions.\n\n Copyright: Copyright Sean Kelly 2005 - 2009.\n License:   $(LINK2 http://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n Authors:   Sean Kelly\n Source:    $(DRUNTIMESRC core/sync/_exception.d)\n"
	},
	{
		"kind": "module",
		"file": "../druntime/src/core/sync/mutex.d",
		"members": [
			{
				"kind": "class",
				"line": 47,
				"members": [
					{
						"kind": "constructor",
						"line": 61,
						"deco": "FNbNeZC4core4sync5mutex5Mutex",
						"endchar": 5,
						"char": 5,
						"name": "this",
						"comment": "\n\n\n\n Initializes a mutex object.\n\n Throws:\n  SyncError on error.\n",
						"originalType": "nothrow @trusted ()",
						"endline": 83
					},
					{
						"kind": "constructor",
						"line": 92,
						"deco": "FNbNeC6ObjectZC4core4sync5mutex5Mutex",
						"endchar": 5,
						"char": 5,
						"parameters": [
							{
								"deco": "C6Object",
								"name": "o"
							}
						],
						"name": "this",
						"comment": " Initializes a mutex object and sets it as the monitor for o.\n\n In:\n  o must not already have a monitor.\n",
						"originalType": "nothrow @trusted (Object o)",
						"endline": 101
					},
					{
						"kind": "function",
						"line": 131,
						"deco": "FNeZv",
						"endchar": 5,
						"char": 19,
						"name": "lock",
						"comment": "\n\n\n\n If this lock is not already held by the caller, the lock is acquired,\n then the internal counter is incremented by one.\n\n Throws:\n  SyncError on error.\n",
						"endline": 134,
						"overrides": [
							"object.Object.Monitor.lock"
						]
					},
					{
						"kind": "function",
						"line": 162,
						"deco": "FNeZv",
						"endchar": 5,
						"char": 19,
						"name": "unlock",
						"comment": " Decrements the internal lock count by one.  If this brings the count to\n zero, the lock is released.\n\n Throws:\n  SyncError on error.\n",
						"endline": 165,
						"overrides": [
							"object.Object.Monitor.unlock"
						]
					},
					{
						"kind": "function",
						"line": 197,
						"deco": "FZb",
						"endchar": 5,
						"char": 10,
						"name": "tryLock",
						"comment": " If the lock is held by another caller, the method returns.  Otherwise,\n the lock is acquired if it is not already held, and then the internal\n counter is incremented by one.\n\n Throws:\n  SyncError on error.\n\n Returns:\n  true if the lock was acquired and false if not.\n",
						"endline": 207
					}
				],
				"char": 1,
				"interfaces": [
					"object.Object.Monitor"
				],
				"name": "Mutex",
				"comment": "\n\n\n\n This class represents a general purpose, recursive mutex.\n"
			}
		],
		"name": "core.sync.mutex",
		"comment": " The mutex module provides a primitive for maintaining mutually exclusive\n access.\n\n Copyright: Copyright Sean Kelly 2005 - 2009.\n License:   $(LINK2 http://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n Authors:   Sean Kelly\n Source:    $(DRUNTIMESRC core/sync/_mutex.d)\n"
	},
	{
		"kind": "module",
		"file": "../druntime/src/core/sync/semaphore.d",
		"members": [
			{
				"kind": "class",
				"line": 60,
				"members": [
					{
						"kind": "constructor",
						"line": 76,
						"deco": "FkZC4core4sync9semaphore9Semaphore",
						"endchar": 5,
						"char": 5,
						"parameters": [
							{
								"deco": "k",
								"default": "0u",
								"name": "count"
							}
						],
						"name": "this",
						"comment": "\n\n\n\n Initializes a semaphore object with the specified initial count.\n\n Params:\n  count = The initial count for the semaphore.\n\n Throws:\n  SyncError on error.\n",
						"originalType": "(uint count = 0)",
						"endline": 96
					},
					{
						"kind": "function",
						"line": 131,
						"deco": "FZv",
						"endchar": 5,
						"char": 10,
						"name": "wait",
						"comment": "\n\n\n\n Wait until the current count is above zero, then atomically decrement\n the count by one and return.\n\n Throws:\n  SyncError on error.\n",
						"endline": 161
					},
					{
						"kind": "function",
						"line": 182,
						"deco": "FS4core4time8DurationZb",
						"endchar": 5,
						"in": {
							"kind": "function",
							"line": 184,
							"deco": "FZv",
							"endchar": 5,
							"char": 5,
							"name": "__require",
							"endline": 184
						},
						"char": 10,
						"parameters": [
							{
								"deco": "S4core4time8Duration",
								"name": "period"
							}
						],
						"name": "wait",
						"comment": " Suspends the calling thread until the current count moves above zero or\n until the supplied time period has elapsed.  If the count moves above\n zero in this interval, then atomically decrement the count by one and\n return true.  Otherwise, return false.\n\n Params:\n  period = The time to wait.\n\n In:\n  period must be non-negative.\n\n Throws:\n  SyncError on error.\n\n Returns:\n  true if notified before the timeout and false if not.\n",
						"endline": 256
					},
					{
						"kind": "function",
						"line": 266,
						"deco": "FZv",
						"endchar": 5,
						"char": 10,
						"name": "notify",
						"comment": " Atomically increment the current count by one.  This will notify one\n waiter, if there are any in the queue.\n\n Throws:\n  SyncError on error.\n",
						"endline": 285
					},
					{
						"kind": "function",
						"line": 298,
						"deco": "FZb",
						"endchar": 5,
						"char": 10,
						"name": "tryWait",
						"comment": " If the current count is equal to zero, return.  Otherwise, atomically\n decrement the count by one and return true.\n\n Throws:\n  SyncError on error.\n\n Returns:\n  true if the count was above zero and false if not.\n",
						"endline": 328
					}
				],
				"char": 1,
				"name": "Semaphore",
				"comment": "\n\n\n\n This class represents a general counting semaphore as concieved by Edsger\n Dijkstra.  As per Mesa type monitors however, \"signal\" has been replaced\n with \"notify\" to indicate that control is not transferred to the waiter when\n a notification is sent.\n"
			}
		],
		"name": "core.sync.semaphore",
		"comment": " The semaphore module provides a general use semaphore for synchronization.\n\n Copyright: Copyright Sean Kelly 2005 - 2009.\n License:   $(LINK2 http://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n Authors:   Sean Kelly\n Source:    $(DRUNTIMESRC core/sync/_semaphore.d)\n"
	},
	{
		"kind": "module",
		"file": "../druntime/src/core/cpuid.d",
		"members": [
			{
				"kind": "struct",
				"line": 101,
				"members": [
					{
						"kind": "variable",
						"line": 107,
						"storageClass": [
							"@trusted"
						],
						"deco": "m",
						"char": 12,
						"name": "size",
						"comment": "Size of the cache, in kilobytes, per CPU.\n\nFor L1 unified (data + code) caches, this size is half the physical size.\n\n(we don't halve it for larger sizes, since normally\n\ndata size is much greater than code size for critical loops).\n",
						"originalType": "size_t",
						"offset": 0
					},
					{
						"kind": "variable",
						"line": 113,
						"storageClass": [
							"@trusted"
						],
						"deco": "h",
						"char": 11,
						"name": "associativity",
						"comment": "Number of ways of associativity, eg:\n\n1 = direct mapped\n\n2 = 2-way set associative\n\n3 = 3-way set associative\n\nubyte.max = fully associative\n",
						"offset": 8
					},
					{
						"kind": "variable",
						"line": 115,
						"storageClass": [
							"@trusted"
						],
						"deco": "k",
						"char": 10,
						"name": "lineSize",
						"comment": "Number of bytes read into the cache when a cache miss occurs.\n",
						"offset": 12
					}
				],
				"char": 1,
				"name": "CacheInfo",
				"comment": "Cache size and behaviour\n"
			},
			{
				"kind": "variable",
				"line": 121,
				"storageClass": [
					"nothrow",
					"__gshared",
					"@nogc",
					"@trusted"
				],
				"deco": "G5S4core5cpuid9CacheInfo",
				"char": 28,
				"name": "datacache",
				"comment": "$(RED Scheduled for deprecation. Please use $(D dataCaches) instead.)\n"
			},
			{
				"kind": "function",
				"line": 126,
				"deco": "FNbNdNiNeZxG5S4core5cpuid9CacheInfo",
				"endchar": 58,
				"char": 25,
				"name": "dataCaches",
				"comment": "The data caches. If there are fewer than 5 physical caches levels,\n\nthe remaining levels are set to size_t.max (== entire memory space)\n",
				"originalType": "nothrow @nogc @property @trusted const(CacheInfo)[5]()",
				"endline": 126
			},
			{
				"kind": "function",
				"line": 131,
				"deco": "FNbNdNiNeZAya",
				"endchar": 54,
				"char": 12,
				"name": "vendor",
				"comment": "Returns vendor string, for display purposes only.\n\nDo NOT use this to determine features!\n\nNote that some CPUs have programmable vendorIDs.\n",
				"endline": 131
			},
			{
				"kind": "function",
				"line": 133,
				"deco": "FNbNdNiNeZAya",
				"endchar": 47,
				"char": 12,
				"name": "processor",
				"comment": "Returns processor string, for display purposes only\n",
				"endline": 133
			},
			{
				"kind": "function",
				"line": 136,
				"deco": "FNbNdNiNeZb",
				"endchar": 55,
				"char": 10,
				"name": "x87onChip",
				"comment": "Does it have an x87 FPU on-chip?\n",
				"endline": 136
			},
			{
				"kind": "function",
				"line": 138,
				"deco": "FNbNdNiNeZb",
				"endchar": 55,
				"char": 10,
				"name": "mmx",
				"comment": "Is MMX supported?\n",
				"endline": 138
			},
			{
				"kind": "function",
				"line": 140,
				"deco": "FNbNdNiNeZb",
				"endchar": 55,
				"char": 10,
				"name": "sse",
				"comment": "Is SSE supported?\n",
				"endline": 140
			},
			{
				"kind": "function",
				"line": 142,
				"deco": "FNbNdNiNeZb",
				"endchar": 56,
				"char": 10,
				"name": "sse2",
				"comment": "Is SSE2 supported?\n",
				"endline": 142
			},
			{
				"kind": "function",
				"line": 144,
				"deco": "FNbNdNiNeZb",
				"endchar": 60,
				"char": 10,
				"name": "sse3",
				"comment": "Is SSE3 supported?\n",
				"endline": 144
			},
			{
				"kind": "function",
				"line": 146,
				"deco": "FNbNdNiNeZb",
				"endchar": 61,
				"char": 10,
				"name": "ssse3",
				"comment": "Is SSSE3 supported?\n",
				"endline": 146
			},
			{
				"kind": "function",
				"line": 148,
				"deco": "FNbNdNiNeZb",
				"endchar": 61,
				"char": 10,
				"name": "sse41",
				"comment": "Is SSE4.1 supported?\n",
				"endline": 148
			},
			{
				"kind": "function",
				"line": 150,
				"deco": "FNbNdNiNeZb",
				"endchar": 61,
				"char": 10,
				"name": "sse42",
				"comment": "Is SSE4.2 supported?\n",
				"endline": 150
			},
			{
				"kind": "function",
				"line": 152,
				"deco": "FNbNdNiNeZb",
				"endchar": 64,
				"char": 10,
				"name": "sse4a",
				"comment": "Is SSE4a supported?\n",
				"endline": 152
			},
			{
				"kind": "function",
				"line": 154,
				"deco": "FNbNdNiNeZb",
				"endchar": 59,
				"char": 10,
				"name": "aes",
				"comment": "Is AES supported\n",
				"endline": 154
			},
			{
				"kind": "function",
				"line": 156,
				"deco": "FNbNdNiNeZb",
				"endchar": 65,
				"char": 10,
				"name": "hasPclmulqdq",
				"comment": "Is pclmulqdq supported\n",
				"endline": 156
			},
			{
				"kind": "function",
				"line": 158,
				"deco": "FNbNdNiNeZb",
				"endchar": 62,
				"char": 10,
				"name": "hasRdrand",
				"comment": "Is rdrand supported\n",
				"endline": 158
			},
			{
				"kind": "function",
				"line": 160,
				"deco": "FNbNdNiNeZb",
				"endchar": 5,
				"char": 10,
				"name": "avx",
				"comment": "Is AVX supported\n",
				"endline": 164
			},
			{
				"kind": "function",
				"line": 166,
				"deco": "FNbNdNiNeZb",
				"endchar": 44,
				"char": 10,
				"name": "vaes",
				"comment": "Is VEX-Encoded AES supported\n",
				"endline": 166
			},
			{
				"kind": "function",
				"line": 168,
				"deco": "FNbNdNiNeZb",
				"endchar": 54,
				"char": 10,
				"name": "hasVpclmulqdq",
				"comment": "Is vpclmulqdq supported\n",
				"endline": 168
			},
			{
				"kind": "function",
				"line": 170,
				"deco": "FNbNdNiNeZb",
				"endchar": 66,
				"char": 10,
				"name": "fma",
				"comment": "Is FMA supported\n",
				"endline": 170
			},
			{
				"kind": "function",
				"line": 172,
				"deco": "FNbNdNiNeZb",
				"endchar": 68,
				"char": 10,
				"name": "fp16c",
				"comment": "Is FP16C supported\n",
				"endline": 172
			},
			{
				"kind": "function",
				"line": 174,
				"deco": "FNbNdNiNeZb",
				"endchar": 70,
				"char": 10,
				"name": "avx2",
				"comment": "Is AVX2 supported\n",
				"endline": 174
			},
			{
				"kind": "function",
				"line": 176,
				"deco": "FNbNdNiNeZb",
				"endchar": 62,
				"char": 10,
				"name": "hle",
				"comment": "Is HLE (hardware lock elision) supported\n",
				"endline": 176
			},
			{
				"kind": "function",
				"line": 178,
				"deco": "FNbNdNiNeZb",
				"endchar": 62,
				"char": 10,
				"name": "rtm",
				"comment": "Is RTM (restricted transactional memory) supported\n",
				"endline": 178
			},
			{
				"kind": "function",
				"line": 180,
				"deco": "FNbNdNiNeZb",
				"endchar": 61,
				"char": 10,
				"name": "hasRdseed",
				"comment": "Is rdseed supported\n",
				"endline": 180
			},
			{
				"kind": "function",
				"line": 182,
				"deco": "FNbNdNiNeZb",
				"endchar": 58,
				"char": 10,
				"name": "hasSha",
				"comment": "Is SHA supported\n",
				"endline": 182
			},
			{
				"kind": "function",
				"line": 184,
				"deco": "FNbNdNiNeZb",
				"endchar": 64,
				"char": 10,
				"name": "amd3dnow",
				"comment": "Is AMD 3DNOW supported?\n",
				"endline": 184
			},
			{
				"kind": "function",
				"line": 186,
				"deco": "FNbNdNiNeZb",
				"endchar": 68,
				"char": 10,
				"name": "amd3dnowExt",
				"comment": "Is AMD 3DNOW Ext supported?\n",
				"endline": 186
			},
			{
				"kind": "function",
				"line": 188,
				"deco": "FNbNdNiNeZb",
				"endchar": 62,
				"char": 10,
				"name": "amdMmx",
				"comment": "Are AMD extensions to MMX supported?\n",
				"endline": 188
			},
			{
				"kind": "function",
				"line": 190,
				"deco": "FNbNdNiNeZb",
				"endchar": 60,
				"char": 10,
				"name": "hasFxsr",
				"comment": "Is fxsave/fxrstor supported?\n",
				"endline": 190
			},
			{
				"kind": "function",
				"line": 192,
				"deco": "FNbNdNiNeZb",
				"endchar": 60,
				"char": 10,
				"name": "hasCmov",
				"comment": "Is cmov supported?\n",
				"endline": 192
			},
			{
				"kind": "function",
				"line": 194,
				"deco": "FNbNdNiNeZb",
				"endchar": 65,
				"char": 10,
				"name": "hasRdtsc",
				"comment": "Is rdtsc supported?\n",
				"endline": 194
			},
			{
				"kind": "function",
				"line": 196,
				"deco": "FNbNdNiNeZb",
				"endchar": 65,
				"char": 10,
				"name": "hasCmpxchg8b",
				"comment": "Is cmpxchg8b supported?\n",
				"endline": 196
			},
			{
				"kind": "function",
				"line": 198,
				"deco": "FNbNdNiNeZb",
				"endchar": 70,
				"char": 10,
				"name": "hasCmpxchg16b",
				"comment": "Is cmpxchg8b supported?\n",
				"endline": 198
			},
			{
				"kind": "function",
				"line": 200,
				"deco": "FNbNdNiNeZb",
				"endchar": 5,
				"char": 10,
				"name": "hasSysEnterSysExit",
				"comment": "Is SYSENTER/SYSEXIT supported?\n",
				"endline": 206
			},
			{
				"kind": "function",
				"line": 210,
				"deco": "FNbNdNiNeZb",
				"endchar": 61,
				"char": 10,
				"name": "has3dnowPrefetch",
				"comment": "Is 3DNow prefetch supported?\n",
				"endline": 211
			},
			{
				"kind": "function",
				"line": 213,
				"deco": "FNbNdNiNeZb",
				"endchar": 75,
				"char": 10,
				"name": "hasLahfSahf",
				"comment": "Are LAHF and SAHF supported in 64-bit mode?\n",
				"endline": 213
			},
			{
				"kind": "function",
				"line": 215,
				"deco": "FNbNdNiNeZb",
				"endchar": 66,
				"char": 10,
				"name": "hasPopcnt",
				"comment": "Is POPCNT supported?\n",
				"endline": 215
			},
			{
				"kind": "function",
				"line": 217,
				"deco": "FNbNdNiNeZb",
				"endchar": 68,
				"char": 10,
				"name": "hasLzcnt",
				"comment": "Is LZCNT supported?\n",
				"endline": 217
			},
			{
				"kind": "function",
				"line": 219,
				"deco": "FNbNdNiNeZb",
				"endchar": 64,
				"char": 10,
				"name": "isX86_64",
				"comment": "Is this an Intel64 or AMD 64?\n",
				"endline": 219
			},
			{
				"kind": "function",
				"line": 222,
				"deco": "FNbNdNiNeZb",
				"endchar": 62,
				"char": 10,
				"name": "isItanium",
				"comment": "Is this an IA64 (Itanium) processor?\n",
				"endline": 222
			},
			{
				"kind": "function",
				"line": 225,
				"deco": "FNbNdNiNeZb",
				"endchar": 59,
				"char": 10,
				"name": "hyperThreading",
				"comment": "Is hyperthreading supported?\n",
				"endline": 225
			},
			{
				"kind": "function",
				"line": 227,
				"deco": "FNbNdNiNeZk",
				"endchar": 48,
				"char": 10,
				"name": "threadsPerCPU",
				"comment": "Returns number of threads per CPU\n",
				"endline": 227
			},
			{
				"kind": "function",
				"line": 229,
				"deco": "FNbNdNiNeZk",
				"endchar": 46,
				"char": 10,
				"name": "coresPerCPU",
				"comment": "Returns number of cores in CPU\n",
				"endline": 229
			},
			{
				"kind": "function",
				"line": 257,
				"deco": "FNbNdNiNeZb",
				"endchar": 61,
				"char": 10,
				"name": "preferAthlon",
				"comment": "Optimisation hints for assembly code.\n\n\n\nFor forward compatibility, the CPU is compared against different\n\nmicroarchitectures. For 32-bit x86, comparisons are made against\n\nthe Intel PPro/PII/PIII/PM family.\n\n\n\nThe major 32-bit x86 microarchitecture 'dynasties' have been:\n\n\n\n* Intel P6 (PentiumPro, PII, PIII, PM, Core, Core2).\n\n* AMD Athlon (K7, K8, K10).\n\n* Intel NetBurst (Pentium 4, Pentium D).\n\n* In-order Pentium (Pentium1, PMMX, Atom)\n\n\n\nOther early CPUs (Nx586, AMD K5, K6, Centaur C3, Transmeta,\n\nCyrix, Rise) were mostly in-order.\n\n\n\nSome new processors do not fit into the existing categories:\n\n\n\n* Intel Atom 230/330 (family 6, model 0x1C) is an in-order core.\n\n* Centaur Isiah = VIA Nano (family 6, model F) is an out-of-order core.\n\n\n\nWithin each dynasty, the optimisation techniques are largely\n\nidentical (eg, use instruction pairing for group 4). Major\n\ninstruction set improvements occur within each dynasty.\n\nDoes this CPU perform better on AMD K7 code than PentiumPro..Core2 code?\n",
				"endline": 257
			},
			{
				"kind": "function",
				"line": 259,
				"deco": "FNbNdNiNeZb",
				"endchar": 68,
				"char": 10,
				"name": "preferPentium4",
				"comment": "Does this CPU perform better on Pentium4 code than PentiumPro..Core2 code?\n",
				"endline": 259
			},
			{
				"kind": "function",
				"line": 261,
				"deco": "FNbNdNiNeZb",
				"endchar": 96,
				"char": 10,
				"name": "preferPentium1",
				"comment": "Does this CPU perform better on Pentium I code than Pentium Pro code?\n",
				"endline": 261
			},
			{
				"kind": "variable",
				"line": 271,
				"storageClass": [
					"nothrow",
					"__gshared",
					"@nogc",
					"@trusted"
				],
				"deco": "k",
				"char": 10,
				"name": "stepping",
				"comment": "$(RED Warning: This field will be turned into a property in a future release.)\n\n\n\nProcessor type (vendor-dependent).\n\nThis should be visible ONLY for display purposes.\n"
			},
			{
				"kind": "variable",
				"line": 271,
				"storageClass": [
					"nothrow",
					"__gshared",
					"@nogc",
					"@trusted"
				],
				"deco": "k",
				"char": 20,
				"name": "model",
				"comment": "$(RED Warning: This field will be turned into a property in a future release.)\n\n\n\nProcessor type (vendor-dependent).\n\nThis should be visible ONLY for display purposes.\n"
			},
			{
				"kind": "variable",
				"line": 271,
				"storageClass": [
					"nothrow",
					"__gshared",
					"@nogc",
					"@trusted"
				],
				"deco": "k",
				"char": 27,
				"name": "family",
				"comment": "$(RED Warning: This field will be turned into a property in a future release.)\n\n\n\nProcessor type (vendor-dependent).\n\nThis should be visible ONLY for display purposes.\n"
			},
			{
				"kind": "variable",
				"line": 273,
				"init": "1u",
				"storageClass": [
					"nothrow",
					"__gshared",
					"@nogc",
					"@trusted"
				],
				"deco": "k",
				"char": 10,
				"name": "numCacheLevels",
				"comment": "$(RED This field has been deprecated. Please use $(D cacheLevels) instead.)\n"
			},
			{
				"kind": "function",
				"line": 275,
				"storageClass": [
					"__gshared"
				],
				"deco": "FNbNdNiNeZk",
				"endchar": 59,
				"char": 20,
				"name": "cacheLevels",
				"comment": "The number of cache levels in the CPU.\n",
				"endline": 275
			}
		],
		"name": "core.cpuid",
		"comment": " Identify the characteristics of the host CPU, providing information\n about cache sizes and assembly optimisation hints. This module is\n provided primarily for assembly language programmers.\n\n References:\n Some of this information was extremely difficult to track down. Some of the\n documents below were found only in cached versions stored by search engines!\n This code relies on information found in:\n\n $(UL\n $(LI \"Intel(R) 64 and IA-32 Architectures Software Developers Manual,\n    Volume 2A: Instruction Set Reference, A-M\" (2007).\n )\n $(LI \"AMD CPUID Specification\", Advanced Micro Devices, Rev 2.28 (2008).\n )\n $(LI \"AMD Processor Recognition Application Note For Processors Prior to AMD\n    Family 0Fh Processors\", Advanced Micro Devices, Rev 3.13 (2005).\n )\n $(LI \"AMD Geode(TM) GX Processors Data Book\",\n    Advanced Micro Devices, Publication ID 31505E, (2005).\n )\n $(LI \"AMD K6 Processor Code Optimisation\", Advanced Micro Devices, Rev D (2000).\n )\n $(LI \"Application note 106: Software Customization for the 6x86 Family\",\n    Cyrix Corporation, Rev 1.5 (1998)\n )\n $(LI $(LINK http://www.datasheetcatalog.org/datasheet/nationalsemiconductor/GX1.pdf))\n $(LI \"Geode(TM) GX1 Processor Series Low Power Integrated X86 Solution\",\n   National Semiconductor, (2002)\n )\n $(LI \"The VIA Isaiah Architecture\", G. Glenn Henry, Centaur Technology, Inc (2008).\n )\n $(LI $(LINK http://www.sandpile.org/ia32/cpuid.htm))\n $(LI $(LINK http://www.akkadia.org/drepper/cpumemory.pdf))\n $(LI \"What every programmer should know about memory\",\n    Ulrich Depper, Red Hat, Inc., (2007).\n )\n $(LI \"CPU Identification by the Windows Kernel\", G. Chappell (2009).\n   $(LINK http://www.geoffchappell.com/viewer.htm?doc=studies/windows/km/cpu/cx8.htm)\n )\n $(LI \"Intel(R) Processor Identification and the CPUID Instruction, Application\n    Note 485\" (2009).\n )\n )\n\n Bugs: Currently only works on x86 and Itanium CPUs.\n      Many processors have bugs in their microcode for the CPUID instruction,\n      so sometimes the cache information may be incorrect.\n\n Copyright: Copyright Don Clugston 2007 - 2009.\n License:   $(LINK2 http://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n Authors:   Don Clugston, Tomas Lindquist Olsen &lt;tomas@famolsen.dk&gt;\n Source:    $(DRUNTIMESRC core/_cpuid.d)\n"
	},
	{
		"kind": "module",
		"file": "../druntime/src/core/demangle.d",
		"members": [
			{
				"kind": "function",
				"line": 1666,
				"deco": "FAxaAaZAa",
				"endchar": 1,
				"char": 8,
				"parameters": [
					{
						"deco": "Axa",
						"name": "buf"
					},
					{
						"deco": "Aa",
						"default": "null",
						"name": "dst"
					}
				],
				"name": "demangle",
				"comment": " Demangles D mangled names.  If it is not a D mangled name, it returns its\n argument name.\n\n Params:\n  buf = The string to demangle.\n  dst = An optional destination buffer.\n\n Returns:\n  The demangled name or the original string if the name is not a mangled D\n  name.\n",
				"endline": 1671
			},
			{
				"kind": "function",
				"line": 1685,
				"deco": "FAxaAaZAa",
				"endchar": 1,
				"char": 8,
				"parameters": [
					{
						"deco": "Axa",
						"name": "buf"
					},
					{
						"deco": "Aa",
						"default": "null",
						"name": "dst"
					}
				],
				"name": "demangleType",
				"comment": " Demangles a D mangled type.\n\n Params:\n  buf = The string to demangle.\n  dst = An optional destination buffer.\n\n Returns:\n  The demangled type name or the original string if the name is not a\n  mangled D type.\n",
				"endline": 1689
			},
			{
				"kind": "template",
				"line": 1704,
				"members": [
					{
						"kind": "function",
						"line": 1704,
						"endchar": 1,
						"char": 8,
						"type": "pure nothrow @safe char[](const(char)[] fqn, char[] dst = null)",
						"parameters": [
							{
								"type": "const(char)[]",
								"name": "fqn"
							},
							{
								"default": "null",
								"type": "char[]",
								"name": "dst"
							}
						],
						"name": "mangle",
						"endline": 1763
					}
				],
				"char": 8,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": " Mangles a D symbol.\n\n Params:\n  T = The type of the symbol.\n  fqn = The fully qualified name of the symbol.\n  dst = An optional destination buffer.\n\n Returns:\n  The mangled name for a symbols of type T and the given fully\n  qualified name.\nExample:\n\n---\nassert(mangle!int(\"a.b\") == \"_D1a1bi\");\nassert(mangle!(char[])(\"test.foo\") == \"_D4test3fooAa\");\nassert(mangle!(int function(int))(\"a.b\") == \"_D1a1bPFiZi\");\n\n---\n",
				"name": "mangle"
			},
			{
				"kind": "template",
				"line": 1800,
				"constraint": "is(FT == function)",
				"members": [
					{
						"kind": "function",
						"line": 1800,
						"endchar": 1,
						"char": 8,
						"type": "pure nothrow @safe char[](const(char)[] fqn, char[] dst = null)",
						"parameters": [
							{
								"type": "const(char)[]",
								"name": "fqn"
							},
							{
								"default": "null",
								"type": "char[]",
								"name": "dst"
							}
						],
						"name": "mangleFunc",
						"endline": 1820
					}
				],
				"char": 8,
				"parameters": [
					{
						"kind": "type",
						"type": "FT*",
						"name": "T"
					},
					{
						"kind": "type",
						"name": "FT"
					}
				],
				"comment": " Mangles a D function.\n\n Params:\n  T = function pointer type.\n  fqn = The fully qualified name of the symbol.\n  dst = An optional destination buffer.\n\n Returns:\n  The mangled name for a function with function pointer type T and\n  the given fully qualified name.\nExample:\n\n---\nassert(mangleFunc!(int function(int))(\"a.b\") == \"_D1a1bFiZi\");\nassert(mangleFunc!(int function(Object))(\"object.Object.opEquals\") == \"_D6object6Object8opEqualsFC6ObjectZi\");\n\n---\n",
				"name": "mangleFunc"
			},
			{
				"kind": "function",
				"line": 1891,
				"deco": "FAxaAaZAa",
				"endchar": 1,
				"char": 8,
				"parameters": [
					{
						"deco": "Axa",
						"name": "sym"
					},
					{
						"deco": "Aa",
						"default": "null",
						"name": "dst"
					}
				],
				"name": "mangleC",
				"comment": " Mangles a C function or variable.\n\n Params:\n  dst = An optional destination buffer.\n\n Returns:\n  The mangled name for a C function or variable, i.e.\n  an underscore is prepended or not, depending on the\n  compiler/linker tool chain\n",
				"endline": 1907
			}
		],
		"name": "core.demangle",
		"comment": " The demangle module converts mangled D symbols to a representation similar\n to what would have existed in code.\n\n Copyright: Copyright Sean Kelly 2010 - 2014.\n License: Distributed under the\n      $(LINK2 http://www.boost.org/LICENSE_1_0.txt, Boost Software License 1.0).\n    (See accompanying file LICENSE)\n Authors:   Sean Kelly\n Source:    $(DRUNTIMESRC core/_demangle.d)\n"
	},
	{
		"kind": "module",
		"file": "../druntime/src/core/simd.d",
		"members": [
			{
				"kind": "template",
				"line": 31,
				"members": [
					{
						"kind": "alias",
						"line": 36,
						"char": 23,
						"type": "__vector(T)",
						"name": "Vector"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": " Create a vector type.\n\n Parameters:\n      T = one of double[2], float[4], void[16], byte[16], ubyte[16],\n      short[8], ushort[8], int[4], uint[4], long[2], ulong[2].\n      For 256 bit vectors,\n      one of double[4], float[8], void[32], byte[32], ubyte[32],\n      short[16], ushort[16], int[8], uint[8], long[4], ulong[4]\n",
				"name": "Vector"
			},
			{
				"kind": "alias",
				"line": 41,
				"deco": "NhG16v",
				"char": 62,
				"name": "void16",
				"comment": "\n"
			},
			{
				"kind": "alias",
				"line": 42,
				"deco": "NhG2d",
				"char": 62,
				"name": "double2",
				"comment": "\n"
			},
			{
				"kind": "alias",
				"line": 43,
				"deco": "NhG4f",
				"char": 62,
				"name": "float4",
				"comment": "\n"
			},
			{
				"kind": "alias",
				"line": 44,
				"deco": "NhG16g",
				"char": 62,
				"name": "byte16",
				"comment": "\n"
			},
			{
				"kind": "alias",
				"line": 45,
				"deco": "NhG16h",
				"char": 62,
				"name": "ubyte16",
				"comment": "\n"
			},
			{
				"kind": "alias",
				"line": 46,
				"deco": "NhG8s",
				"char": 62,
				"name": "short8",
				"comment": "\n"
			},
			{
				"kind": "alias",
				"line": 47,
				"deco": "NhG8t",
				"char": 62,
				"name": "ushort8",
				"comment": "\n"
			},
			{
				"kind": "alias",
				"line": 48,
				"deco": "NhG4i",
				"char": 62,
				"name": "int4",
				"comment": "\n"
			},
			{
				"kind": "alias",
				"line": 49,
				"deco": "NhG4k",
				"char": 62,
				"name": "uint4",
				"comment": "\n"
			},
			{
				"kind": "alias",
				"line": 50,
				"deco": "NhG2l",
				"char": 62,
				"name": "long2",
				"comment": "\n"
			},
			{
				"kind": "alias",
				"line": 51,
				"deco": "NhG2m",
				"char": 62,
				"name": "ulong2",
				"comment": "\n"
			},
			{
				"kind": "alias",
				"line": 53,
				"deco": "NhG32v",
				"char": 63,
				"name": "void32",
				"comment": "\n"
			},
			{
				"kind": "alias",
				"line": 54,
				"deco": "NhG4d",
				"char": 63,
				"name": "double4",
				"comment": "\n"
			},
			{
				"kind": "alias",
				"line": 55,
				"deco": "NhG8f",
				"char": 63,
				"name": "float8",
				"comment": "\n"
			},
			{
				"kind": "alias",
				"line": 56,
				"deco": "NhG32g",
				"char": 63,
				"name": "byte32",
				"comment": "\n"
			},
			{
				"kind": "alias",
				"line": 57,
				"deco": "NhG32h",
				"char": 63,
				"name": "ubyte32",
				"comment": "\n"
			},
			{
				"kind": "alias",
				"line": 58,
				"deco": "NhG16s",
				"char": 63,
				"name": "short16",
				"comment": "\n"
			},
			{
				"kind": "alias",
				"line": 59,
				"deco": "NhG16t",
				"char": 63,
				"name": "ushort16",
				"comment": "\n"
			},
			{
				"kind": "alias",
				"line": 60,
				"deco": "NhG8i",
				"char": 63,
				"name": "int8",
				"comment": "\n"
			},
			{
				"kind": "alias",
				"line": 61,
				"deco": "NhG8k",
				"char": 63,
				"name": "uint8",
				"comment": "\n"
			},
			{
				"kind": "alias",
				"line": 62,
				"deco": "NhG4l",
				"char": 63,
				"name": "long4",
				"comment": "\n"
			},
			{
				"kind": "alias",
				"line": 63,
				"deco": "NhG4m",
				"char": 63,
				"name": "ulong4",
				"comment": "\n"
			},
			{
				"kind": "enum",
				"line": 73,
				"members": [],
				"char": 3,
				"baseDeco": "i",
				"name": "XMM",
				"comment": " XMM opcodes that conform to the following:\n\n  opcode xmm1,xmm2/mem\n\n and do not have side effects (i.e. do not write to memory).\n"
			}
		],
		"name": "core.simd",
		"comment": " Builtin SIMD intrinsics\n\n Source: $(DRUNTIMESRC core/_simd.d)\n\n Copyright: Copyright Digital Mars 2012.\n License:   $(WEB www.boost.org/LICENSE_1_0.txt, Boost License 1.0).\n Authors:   $(WEB digitalmars.com, Walter Bright),\n"
	},
	{
		"kind": "module",
		"file": "../druntime/src/core/atomic.d",
		"members": [
			{
				"kind": "template",
				"line": 74,
				"constraint": "__traits(compiles, mixin(\"*cast(T*)&val\" ~ op ~ \"mod\"))",
				"members": [
					{
						"kind": "function",
						"line": 74,
						"endchar": 5,
						"char": 22,
						"type": "pure nothrow @nogc HeadUnshared!T(ref shared T val, V1 mod)",
						"parameters": [
							{
								"storageClass": [
									"shared",
									"ref"
								],
								"type": "T",
								"name": "val"
							},
							{
								"type": "V1",
								"name": "mod"
							}
						],
						"name": "atomicOp",
						"endline": 78
					}
				],
				"char": 22,
				"parameters": [
					{
						"kind": "value",
						"deco": "Aya",
						"name": "op"
					},
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "type",
						"name": "V1"
					}
				],
				"comment": " Performs the binary operation 'op' on val using 'mod' as the modifier.\n\n Params:\n  val = The target variable.\n  mod = The modifier to apply.\n\n Returns:\n  The result of the operation.\n",
				"name": "atomicOp"
			},
			{
				"kind": "template",
				"line": 94,
				"constraint": "!is(T == class) && !is(T U : U*) && __traits(compiles, ()\n{\n*here = writeThis;\n}\n)",
				"members": [
					{
						"kind": "function",
						"line": 94,
						"char": 10,
						"type": "pure nothrow @nogc bool(shared(T)* here, const V1 ifThis, V2 writeThis)",
						"parameters": [
							{
								"type": "shared(T)*",
								"name": "here"
							},
							{
								"storageClass": [
									"const"
								],
								"type": "V1",
								"name": "ifThis"
							},
							{
								"type": "V2",
								"name": "writeThis"
							}
						],
						"name": "cas"
					}
				],
				"char": 10,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "type",
						"name": "V1"
					},
					{
						"kind": "type",
						"name": "V2"
					}
				],
				"comment": " Stores 'writeThis' to the memory referenced by 'here' if the value\n referenced by 'here' is equal to 'ifThis'.  This operation is both\n lock-free and atomic.\n\n Params:\n  here      = The address of the destination variable.\n  writeThis = The value to store.\n  ifThis    = The comparison value.\n\n Returns:\n  true if the store occurred, false if not.\n",
				"name": "cas"
			},
			{
				"kind": "template",
				"line": 98,
				"constraint": "is(T == class) && __traits(compiles, ()\n{\n*here = writeThis;\n}\n)",
				"members": [
					{
						"kind": "function",
						"line": 98,
						"char": 10,
						"type": "pure nothrow @nogc bool(shared(T)* here, const shared(V1) ifThis, shared(V2) writeThis)",
						"parameters": [
							{
								"type": "shared(T)*",
								"name": "here"
							},
							{
								"storageClass": [
									"const"
								],
								"type": "shared(V1)",
								"name": "ifThis"
							},
							{
								"type": "shared(V2)",
								"name": "writeThis"
							}
						],
						"name": "cas"
					}
				],
				"char": 10,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "type",
						"name": "V1"
					},
					{
						"kind": "type",
						"name": "V2"
					}
				],
				"comment": "Ditto\n",
				"name": "cas"
			},
			{
				"kind": "template",
				"line": 102,
				"constraint": "is(T U : U*) && __traits(compiles, ()\n{\n*here = writeThis;\n}\n)",
				"members": [
					{
						"kind": "function",
						"line": 102,
						"char": 10,
						"type": "pure nothrow @nogc bool(shared(T)* here, const shared(V1)* ifThis, shared(V2)* writeThis)",
						"parameters": [
							{
								"type": "shared(T)*",
								"name": "here"
							},
							{
								"storageClass": [
									"const"
								],
								"type": "shared(V1)*",
								"name": "ifThis"
							},
							{
								"type": "shared(V2)*",
								"name": "writeThis"
							}
						],
						"name": "cas"
					}
				],
				"char": 10,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "type",
						"name": "V1"
					},
					{
						"kind": "type",
						"name": "V2"
					}
				],
				"comment": "Ditto\n",
				"name": "cas"
			},
			{
				"kind": "template",
				"line": 116,
				"members": [
					{
						"kind": "function",
						"line": 116,
						"endchar": 5,
						"char": 22,
						"type": "pure nothrow @nogc HeadUnshared!T(ref const shared T val)",
						"parameters": [
							{
								"storageClass": [
									"const",
									"shared",
									"ref"
								],
								"type": "T",
								"name": "val"
							}
						],
						"name": "atomicLoad",
						"endline": 119
					}
				],
				"char": 22,
				"parameters": [
					{
						"kind": "value",
						"defaultValue": "MemoryOrder.seq",
						"deco": "E4core6atomic11MemoryOrder",
						"name": "ms"
					},
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": " Loads 'val' from memory and returns it.  The memory barrier specified\n by 'ms' is applied to the operation, which is fully sequenced by\n default.\n\n Params:\n  val = The target variable.\n\n Returns:\n  The value of 'val'.\n",
				"name": "atomicLoad"
			},
			{
				"kind": "template",
				"line": 130,
				"constraint": "__traits(compiles, ()\n{\nval = newval;\n}\n)",
				"members": [
					{
						"kind": "function",
						"line": 130,
						"endchar": 5,
						"char": 10,
						"type": "pure nothrow @nogc void(ref shared T val, V1 newval)",
						"parameters": [
							{
								"storageClass": [
									"shared",
									"ref"
								],
								"type": "T",
								"name": "val"
							},
							{
								"type": "V1",
								"name": "newval"
							}
						],
						"name": "atomicStore",
						"endline": 134
					}
				],
				"char": 10,
				"parameters": [
					{
						"kind": "value",
						"defaultValue": "MemoryOrder.seq",
						"deco": "E4core6atomic11MemoryOrder",
						"name": "ms"
					},
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "type",
						"name": "V1"
					}
				],
				"comment": " Writes 'newval' into 'val'.  The memory barrier specified by 'ms' is\n applied to the operation, which is fully sequenced by default.\n\n Params:\n  val    = The target variable.\n  newval = The value to store.\n",
				"name": "atomicStore"
			},
			{
				"kind": "enum",
				"line": 140,
				"members": [
					{
						"kind": "enum member",
						"line": 142,
						"value": "0",
						"char": 9,
						"name": "raw",
						"comment": "Not sequenced.\n"
					},
					{
						"kind": "enum member",
						"line": 143,
						"value": "1",
						"char": 9,
						"name": "acq",
						"comment": "Hoist-load + hoist-store barrier.\n"
					},
					{
						"kind": "enum member",
						"line": 144,
						"value": "2",
						"char": 9,
						"name": "rel",
						"comment": "Sink-load + sink-store barrier.\n"
					},
					{
						"kind": "enum member",
						"line": 145,
						"value": "3",
						"char": 9,
						"name": "seq",
						"comment": "Fully sequenced (acquire + release).\n"
					}
				],
				"char": 5,
				"baseDeco": "i",
				"name": "MemoryOrder",
				"comment": " Specifies the memory ordering semantics of an atomic operation.\n"
			},
			{
				"kind": "function",
				"line": 156,
				"deco": "FNbNiZv",
				"char": 10,
				"name": "atomicFence",
				"comment": " Inserts a full load/store memory fence (on platforms that need it). This ensures\n that all loads and stores before a call to this function are executed before any\n loads and stores after the call.\n"
			}
		],
		"name": "core.atomic",
		"comment": " The atomic module provides basic support for lock-free\n concurrent programming.\n\n Copyright: Copyright Sean Kelly 2005 - 2010.\n License:   $(LINK2 http://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n Authors:   Sean Kelly, Alex Rønne Petersen\n Source:    $(DRUNTIMESRC core/_atomic.d)\n"
	},
	{
		"kind": "module",
		"file": "../druntime/src/core/bitop.d",
		"members": [
			{
				"kind": "function",
				"line": 33,
				"deco": "FNaNbNiNfmZi",
				"char": 5,
				"parameters": [
					{
						"deco": "m",
						"name": "v"
					}
				],
				"name": "bsf",
				"comment": " Scans the bits in v starting with bit 0, looking\n for the first set bit.\n Returns:\n      The bit number of the first bit set.\n      The return value is undefined if v is zero.\nExample:\n\n---\nassert(bsf(0x21) == 0);\n\n---\n",
				"originalType": "pure nothrow @nogc @safe int(size_t v)"
			},
			{
				"kind": "function",
				"line": 49,
				"deco": "FNaNbNiNfmZi",
				"char": 5,
				"parameters": [
					{
						"deco": "m",
						"name": "v"
					}
				],
				"name": "bsr",
				"comment": " Scans the bits in v from the most significant bit\n to the least significant bit, looking\n for the first set bit.\n Returns:\n      The bit number of the first bit set.\n      The return value is undefined if v is zero.\nExample:\n\n---\nassert(bsr(0x21) == 5);\n\n---\n",
				"originalType": "pure nothrow @nogc @safe int(size_t v)"
			},
			{
				"kind": "function",
				"line": 62,
				"deco": "FNaNbNixPmmZi",
				"endchar": 1,
				"char": 5,
				"parameters": [
					{
						"deco": "xPm",
						"name": "p"
					},
					{
						"deco": "m",
						"name": "bitnum"
					}
				],
				"name": "bt",
				"comment": " Tests the bit.\n (No longer an intrisic - the compiler recognizes the patterns\n in the body.)\nExample:\n\n---\nsize_t[2] array;\n\narray[0] = 2;\narray[1] = 0x100;\n\nassert(bt(array.ptr, 1));\nassert(array[0] == 2);\nassert(array[1] == 0x100);\n\n---\n",
				"originalType": "pure nothrow @nogc @system int(in size_t* p, size_t bitnum)",
				"endline": 70
			},
			{
				"kind": "function",
				"line": 87,
				"deco": "FNaNbNiPmmZi",
				"char": 5,
				"parameters": [
					{
						"deco": "Pm",
						"name": "p"
					},
					{
						"deco": "m",
						"name": "bitnum"
					}
				],
				"name": "btc",
				"comment": " Tests and complements the bit.\n",
				"originalType": "pure nothrow @nogc @system int(size_t* p, size_t bitnum)"
			},
			{
				"kind": "function",
				"line": 93,
				"deco": "FNaNbNiPmmZi",
				"char": 5,
				"parameters": [
					{
						"deco": "Pm",
						"name": "p"
					},
					{
						"deco": "m",
						"name": "bitnum"
					}
				],
				"name": "btr",
				"comment": " Tests and resets (sets to 0) the bit.\n",
				"originalType": "pure nothrow @nogc @system int(size_t* p, size_t bitnum)"
			},
			{
				"kind": "function",
				"line": 109,
				"deco": "FNaNbNiPmmZi",
				"char": 5,
				"parameters": [
					{
						"deco": "Pm",
						"name": "p"
					},
					{
						"deco": "m",
						"name": "bitnum"
					}
				],
				"name": "bts",
				"comment": " Tests and sets the bit.\n Params:\n p = a non-NULL pointer to an array of size_ts.\n bitnum = a bit number, starting with bit 0 of p[0],\n and progressing. It addresses bits like the expression:\n---\np[index / (size_t.sizeof*8)] & (1 << (index & ((size_t.sizeof*8) - 1)))\n---\n Returns:\n      A non-zero value if the bit was set, and a zero\n      if it was clear.\nExample:\n\n---\nsize_t[2] array;\n\narray[0] = 2;\narray[1] = 0x100;\n\nassert(btc(array.ptr, 35) == 0);\nif (size_t.sizeof == 8)\n{\n    assert(array[0] == 0x8_0000_0002);\n    assert(array[1] == 0x100);\n}\nelse\n{\n    assert(array[0] == 2);\n    assert(array[1] == 0x108);\n}\n\nassert(btc(array.ptr, 35));\nassert(array[0] == 2);\nassert(array[1] == 0x100);\n\nassert(bts(array.ptr, 35) == 0);\nif (size_t.sizeof == 8)\n{\n    assert(array[0] == 0x8_0000_0002);\n    assert(array[1] == 0x100);\n}\nelse\n{\n    assert(array[0] == 2);\n    assert(array[1] == 0x108);\n}\n\nassert(btr(array.ptr, 35));\nassert(array[0] == 2);\nassert(array[1] == 0x100);\n\n---\n",
				"originalType": "pure nothrow @nogc @system int(size_t* p, size_t bitnum)"
			},
			{
				"kind": "function",
				"line": 157,
				"deco": "FNaNbNiNfkZk",
				"char": 6,
				"parameters": [
					{
						"deco": "k",
						"name": "v"
					}
				],
				"name": "bswap",
				"comment": " Swaps bytes in a 4 byte uint end-to-end, i.e. byte 0 becomes\n byte 3, byte 1 becomes byte 2, byte 2 becomes byte 1, byte 3\n becomes byte 0.\n"
			},
			{
				"kind": "function",
				"line": 164,
				"deco": "FNbNikZh",
				"char": 11,
				"parameters": [
					{
						"deco": "k",
						"name": "port_address"
					}
				],
				"name": "inp",
				"comment": " Reads I/O port at port_address.\n"
			},
			{
				"kind": "function",
				"line": 170,
				"deco": "FNbNikZt",
				"char": 12,
				"parameters": [
					{
						"deco": "k",
						"name": "port_address"
					}
				],
				"name": "inpw",
				"comment": " ditto\n"
			},
			{
				"kind": "function",
				"line": 176,
				"deco": "FNbNikZk",
				"char": 10,
				"parameters": [
					{
						"deco": "k",
						"name": "port_address"
					}
				],
				"name": "inpl",
				"comment": " ditto\n"
			},
			{
				"kind": "function",
				"line": 182,
				"deco": "FNbNikhZh",
				"char": 11,
				"parameters": [
					{
						"deco": "k",
						"name": "port_address"
					},
					{
						"deco": "h",
						"name": "value"
					}
				],
				"name": "outp",
				"comment": " Writes and returns value to I/O port at port_address.\n"
			},
			{
				"kind": "function",
				"line": 188,
				"deco": "FNbNiktZt",
				"char": 12,
				"parameters": [
					{
						"deco": "k",
						"name": "port_address"
					},
					{
						"deco": "t",
						"name": "value"
					}
				],
				"name": "outpw",
				"comment": " ditto\n"
			},
			{
				"kind": "function",
				"line": 194,
				"deco": "FNbNikkZk",
				"char": 10,
				"parameters": [
					{
						"deco": "k",
						"name": "port_address"
					},
					{
						"deco": "k",
						"name": "value"
					}
				],
				"name": "outpl",
				"comment": " ditto\n"
			},
			{
				"kind": "function",
				"line": 204,
				"deco": "FNaNbNiNftZt",
				"char": 12,
				"parameters": [
					{
						"deco": "t",
						"name": "x"
					}
				],
				"name": "_popcnt",
				"comment": " Calculates the number of set bits in a 32-bit integer\n using the X86 SSE4 POPCNT instruction.\n POPCNT is not available on all X86 CPUs.\n"
			},
			{
				"kind": "function",
				"line": 206,
				"deco": "FNaNbNiNfkZi",
				"char": 9,
				"parameters": [
					{
						"deco": "k",
						"name": "x"
					}
				],
				"name": "_popcnt",
				"comment": "ditto\n"
			},
			{
				"kind": "function",
				"line": 210,
				"deco": "FNaNbNiNfmZi",
				"char": 13,
				"parameters": [
					{
						"deco": "m",
						"name": "x"
					}
				],
				"name": "_popcnt",
				"comment": "ditto\n"
			},
			{
				"kind": "function",
				"line": 279,
				"deco": "FNbNiNfPhZh",
				"char": 8,
				"parameters": [
					{
						"deco": "Ph",
						"name": "ptr"
					}
				],
				"name": "volatileLoad",
				"comment": " Read/write value from/to the memory location indicated by ptr.\n\n These functions are recognized by the compiler, and calls to them are guaranteed\n to not be removed (as dead assignment elimination or presumed to have no effect)\n or reordered in the same thread.\n\n These reordering guarantees are only made with regards to other\n operations done through these functions; the compiler is free to reorder regular\n loads/stores with regards to loads/stores done through these functions.\n\n This is useful when dealing with memory-mapped I/O (MMIO) where a store can\n have an effect other than just writing a value, or where sequential loads\n with no intervening stores can retrieve\n different values from the same location due to external stores to the location.\n\n These functions will, when possible, do the load/store as a single operation. In\n general, this is possible when the size of the operation is less than or equal to\n $(D (void*).sizeof), although some targets may support larger operations. If the\n load/store cannot be done as a single operation, multiple smaller operations will be used.\n\n These are not to be conflated with atomic operations. They do not guarantee any\n atomicity. This may be provided by coincidence as a result of the instructions\n used on the target, but this should not be relied on for portable programs.\n Further, no memory fences are implied by these functions.\n They should not be used for communication between threads.\n They may be used to guarantee a write or read cycle occurs at a specified address.\n"
			},
			{
				"kind": "function",
				"line": 280,
				"deco": "FNbNiNfPtZt",
				"char": 8,
				"parameters": [
					{
						"deco": "Pt",
						"name": "ptr"
					}
				],
				"name": "volatileLoad",
				"comment": "ditto\n"
			},
			{
				"kind": "function",
				"line": 281,
				"deco": "FNbNiNfPkZk",
				"char": 8,
				"parameters": [
					{
						"deco": "Pk",
						"name": "ptr"
					}
				],
				"name": "volatileLoad",
				"comment": "ditto\n"
			},
			{
				"kind": "function",
				"line": 282,
				"deco": "FNbNiNfPmZm",
				"char": 8,
				"parameters": [
					{
						"deco": "Pm",
						"name": "ptr"
					}
				],
				"name": "volatileLoad",
				"comment": "ditto\n"
			},
			{
				"kind": "function",
				"line": 284,
				"deco": "FNbNiNfPhhZv",
				"char": 6,
				"parameters": [
					{
						"deco": "Ph",
						"name": "ptr"
					},
					{
						"deco": "h",
						"name": "value"
					}
				],
				"name": "volatileStore",
				"comment": "ditto\n"
			},
			{
				"kind": "function",
				"line": 285,
				"deco": "FNbNiNfPttZv",
				"char": 6,
				"parameters": [
					{
						"deco": "Pt",
						"name": "ptr"
					},
					{
						"deco": "t",
						"name": "value"
					}
				],
				"name": "volatileStore",
				"comment": "ditto\n"
			},
			{
				"kind": "function",
				"line": 286,
				"deco": "FNbNiNfPkkZv",
				"char": 6,
				"parameters": [
					{
						"deco": "Pk",
						"name": "ptr"
					},
					{
						"deco": "k",
						"name": "value"
					}
				],
				"name": "volatileStore",
				"comment": "ditto\n"
			},
			{
				"kind": "function",
				"line": 287,
				"deco": "FNbNiNfPmmZv",
				"char": 6,
				"parameters": [
					{
						"deco": "Pm",
						"name": "ptr"
					},
					{
						"deco": "m",
						"name": "value"
					}
				],
				"name": "volatileStore",
				"comment": "ditto\n"
			},
			{
				"kind": "function",
				"line": 307,
				"deco": "FNaNbNiNfkZi",
				"endchar": 1,
				"char": 5,
				"parameters": [
					{
						"deco": "k",
						"name": "x"
					}
				],
				"name": "popcnt",
				"comment": "  Calculates the number of set bits in a 32-bit integer.\n",
				"endline": 336
			},
			{
				"kind": "function",
				"line": 354,
				"deco": "FNaNbNiNekZk",
				"endchar": 1,
				"char": 15,
				"parameters": [
					{
						"deco": "k",
						"name": "x"
					}
				],
				"name": "bitswap",
				"comment": " Reverses the order of bits in a 32-bit integer.\n",
				"endline": 408
			}
		],
		"name": "core.bitop",
		"comment": " This module contains a collection of bit-level operations.\n\n Copyright: Copyright Don Clugston 2005 - 2013.\n License:   $(LINK2 http://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n Authors:   Don Clugston, Sean Kelly, Walter Bright, Alex Rønne Petersen\n Source:    $(DRUNTIMESRC core/_bitop.d)\n"
	},
	{
		"kind": "module",
		"file": "../druntime/src/core/runtime.d",
		"members": [
			{
				"kind": "function",
				"line": 21,
				"deco": "UxPaZPv",
				"char": 18,
				"parameters": [
					{
						"deco": "xPa",
						"name": "name"
					}
				],
				"name": "rt_loadLibrary",
				"comment": "C interface for Runtime.loadLibrary\n",
				"originalType": "extern (C) void*(const char* name)"
			},
			{
				"kind": "function",
				"line": 25,
				"deco": "UPvZi",
				"char": 16,
				"parameters": [
					{
						"deco": "Pv",
						"name": "ptr"
					}
				],
				"name": "rt_unloadLibrary",
				"comment": "C interface for Runtime.unloadLibrary, returns 1/0 instead of bool\n"
			},
			{
				"kind": "function",
				"line": 28,
				"deco": "UZi",
				"char": 15,
				"name": "rt_init",
				"comment": "C interface for Runtime.initialize, returns 1/0 instead of bool\n"
			},
			{
				"kind": "function",
				"line": 30,
				"deco": "UZi",
				"char": 15,
				"name": "rt_term",
				"comment": "C interface for Runtime.terminate, returns 1/0 instead of bool\n"
			},
			{
				"kind": "struct",
				"line": 72,
				"members": [
					{
						"kind": "variable",
						"line": 74,
						"deco": "i",
						"char": 9,
						"name": "argc",
						"comment": "The argument count.\n",
						"offset": 0
					},
					{
						"kind": "variable",
						"line": 75,
						"deco": "PPa",
						"char": 12,
						"name": "argv",
						"comment": "The arguments as a C array of strings.\n",
						"offset": 8
					}
				],
				"char": 1,
				"name": "CArgs",
				"comment": "\n\n\n\n Stores the unprocessed arguments supplied when the\n process was started.\n"
			},
			{
				"kind": "struct",
				"line": 82,
				"members": [
					{
						"kind": "function",
						"line": 94,
						"storageClass": [
							"static"
						],
						"deco": "FZb",
						"endchar": 5,
						"char": 17,
						"name": "initialize",
						"comment": " Initializes the runtime.  This call is to be used in instances where the\n standard program initialization process is not executed.  This is most\n often in shared libraries or in libraries linked to a C program.\n If the runtime was already successfully initialized this returns true.\n Each call to initialize must be paired by a call to $(LREF terminate).\n\n Returns:\n  true if initialization succeeded or false if initialization failed.\n",
						"endline": 97
					},
					{
						"kind": "function",
						"line": 115,
						"storageClass": [
							"static"
						],
						"deco": "FZb",
						"endchar": 5,
						"char": 17,
						"name": "terminate",
						"comment": " Terminates the runtime.  This call is to be used in instances where the\n standard program termination process will not be not executed.  This is\n most often in shared libraries or in libraries linked to a C program.\n If the runtime was not successfully initialized the function returns false.\n\n Returns:\n  true if termination succeeded or false if termination failed.\n",
						"endline": 118
					},
					{
						"kind": "function",
						"line": 133,
						"storageClass": [
							"static"
						],
						"deco": "FNdZAAya",
						"endchar": 5,
						"char": 31,
						"name": "args",
						"comment": " Returns the arguments supplied when the process was started.\n\n Returns:\n  The arguments supplied when this process was started.\n",
						"endline": 136
					},
					{
						"kind": "function",
						"line": 159,
						"storageClass": [
							"static"
						],
						"deco": "FNdZS4core7runtime5CArgs",
						"endchar": 5,
						"char": 28,
						"name": "cArgs",
						"comment": " Returns the unprocessed C arguments supplied when the process was started.\n Use this when you need to supply argc and argv to C libraries.\n\n Returns:\n  A $(LREF CArgs) struct with the arguments supplied when this process was started.\n\n Example:\n ---\n import core.runtime;\n\n // A C library function requiring char** arguments\n extern(C) void initLibFoo(int argc, char** argv);\n\n void main()\n {\n     auto args = Runtime.cArgs;\n     initLibFoo(args.argc, args.argv);\n }\n ---\n",
						"endline": 162
					},
					{
						"kind": "template",
						"line": 175,
						"members": [
							{
								"kind": "function",
								"line": 175,
								"endchar": 5,
								"char": 18,
								"type": "void*(in char[] name)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "char[]",
										"name": "name"
									}
								],
								"name": "loadLibrary",
								"endline": 216
							}
						],
						"char": 18,
						"parameters": [],
						"comment": " Locates a dynamic library with the supplied library name and dynamically\n loads it into the caller's address space.  If the library contains a D\n runtime it will be integrated with the current runtime.\n\n Params:\n  name = The name of the dynamic library to load.\n\n Returns:\n  A reference to the library or null on error.\n",
						"name": "loadLibrary"
					},
					{
						"kind": "template",
						"line": 227,
						"members": [
							{
								"kind": "function",
								"line": 227,
								"endchar": 5,
								"char": 17,
								"type": "bool(void* p)",
								"parameters": [
									{
										"type": "void*",
										"name": "p"
									}
								],
								"name": "unloadLibrary",
								"endline": 230
							}
						],
						"char": 17,
						"parameters": [],
						"comment": " Unloads the dynamic library referenced by p.  If this library contains a\n D runtime then any necessary finalization or cleanup of that runtime\n will be performed.\n\n Params:\n  p = A reference to the library to unload.\n",
						"name": "unloadLibrary"
					},
					{
						"kind": "function",
						"line": 244,
						"storageClass": [
							"static"
						],
						"deco": "FNdPFPvZC6object9Throwable9TraceInfoZv",
						"endchar": 5,
						"char": 27,
						"parameters": [
							{
								"deco": "PFPvZC6object9Throwable9TraceInfo",
								"name": "h"
							}
						],
						"name": "traceHandler",
						"comment": " Overrides the default trace mechanism with a user-supplied version.  A\n trace represents the context from which an exception was thrown, and the\n trace handler will be called when this occurs.  The pointer supplied to\n this routine indicates the base address from which tracing should occur.\n If the supplied pointer is null then the trace routine should determine\n an appropriate calling context from which to begin the trace.\n\n Params:\n  h = The new trace handler.  Set to null to use the default handler.\n",
						"originalType": "@property void(TraceHandler h)",
						"endline": 247
					},
					{
						"kind": "function",
						"line": 255,
						"storageClass": [
							"static"
						],
						"deco": "FNdZPFPvZC6object9Throwable9TraceInfo",
						"endchar": 5,
						"char": 35,
						"name": "traceHandler",
						"comment": " Gets the current trace handler.\n\n Returns:\n  The current trace handler or null if none has been set.\n",
						"originalType": "@property TraceHandler()",
						"endline": 258
					},
					{
						"kind": "function",
						"line": 271,
						"storageClass": [
							"static"
						],
						"deco": "FNdPFC6ObjectZbZv",
						"endchar": 5,
						"char": 27,
						"parameters": [
							{
								"deco": "PFC6ObjectZb",
								"name": "h"
							}
						],
						"name": "collectHandler",
						"comment": " Overrides the default collect hander with a user-supplied version.  This\n routine will be called for each resource object that is finalized in a\n non-deterministic manner--typically during a garbage collection cycle.\n If the supplied routine returns true then the object's dtor will called\n as normal, but if the routine returns false than the dtor will not be\n called.  The default behavior is for all object dtors to be called.\n\n Params:\n  h = The new collect handler.  Set to null to use the default handler.\n",
						"originalType": "@property void(CollectHandler h)",
						"endline": 274
					},
					{
						"kind": "function",
						"line": 283,
						"storageClass": [
							"static"
						],
						"deco": "FNdZPFC6ObjectZb",
						"endchar": 5,
						"char": 37,
						"name": "collectHandler",
						"comment": " Gets the current collect handler.\n\n Returns:\n  The current collect handler or null if none has been set.\n",
						"originalType": "@property CollectHandler()",
						"endline": 286
					},
					{
						"kind": "function",
						"line": 298,
						"storageClass": [
							"static"
						],
						"deco": "FNdPFZbZv",
						"endchar": 5,
						"char": 27,
						"parameters": [
							{
								"deco": "PFZb",
								"name": "h"
							}
						],
						"name": "moduleUnitTester",
						"comment": " Overrides the default module unit tester with a user-supplied version.\n This routine will be called once on program initialization.  The return\n value of this routine indicates to the runtime whether the tests ran\n without error.\n\n Params:\n  h = The new unit tester.  Set to null to use the default unit tester.\n",
						"originalType": "@property void(ModuleUnitTester h)",
						"endline": 301
					},
					{
						"kind": "function",
						"line": 310,
						"storageClass": [
							"static"
						],
						"deco": "FNdZPFZb",
						"endchar": 5,
						"char": 39,
						"name": "moduleUnitTester",
						"comment": " Gets the current module unit tester.\n\n Returns:\n  The current module unit tester handler or null if none has been set.\n",
						"originalType": "@property ModuleUnitTester()",
						"endline": 313
					}
				],
				"char": 1,
				"name": "Runtime",
				"comment": " This struct encapsulates all functionality related to the underlying runtime\n module for the calling context.\n"
			},
			{
				"kind": "function",
				"line": 337,
				"deco": "UZb",
				"endchar": 1,
				"char": 17,
				"name": "runModuleUnitTests",
				"comment": "\n\n\n\n This routine is called by the runtime to run module unit tests on startup.\n The user-supplied unit tester will be called if one has been supplied,\n otherwise all unit tests will be run in sequence.\n\n Returns:\n  true if execution should continue after testing is complete and false if\n  not.  Default behavior is to return true.\n",
				"endline": 408
			},
			{
				"kind": "function",
				"line": 419,
				"deco": "FPvZC6object9Throwable9TraceInfo",
				"endchar": 1,
				"char": 21,
				"parameters": [
					{
						"deco": "Pv",
						"default": "null",
						"name": "ptr"
					}
				],
				"name": "defaultTraceHandler",
				"comment": "\n\n\n\n\n",
				"originalType": "Throwable.TraceInfo(void* ptr = null)",
				"endline": 661
			}
		],
		"name": "core.runtime",
		"comment": " The runtime module exposes information specific to the D runtime code.\n\n Copyright: Copyright Sean Kelly 2005 - 2009.\n License:   $(LINK2 http://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n Authors:   Sean Kelly\n Source:    $(DRUNTIMESRC core/_runtime.d)\n"
	},
	{
		"kind": "module",
		"file": "../druntime/src/core/exception.d",
		"members": [
			{
				"kind": "class",
				"line": 17,
				"base": "object.Error",
				"members": [],
				"char": 1,
				"name": "RangeError",
				"comment": " Thrown on a range error.\n"
			},
			{
				"kind": "class",
				"line": 48,
				"base": "object.Error",
				"members": [],
				"char": 1,
				"name": "AssertError",
				"comment": " Thrown on an assert error.\n"
			},
			{
				"kind": "class",
				"line": 121,
				"base": "object.Error",
				"members": [],
				"char": 1,
				"name": "FinalizeError",
				"comment": " Thrown on finalize error.\n"
			},
			{
				"kind": "class",
				"line": 187,
				"base": "object.Error",
				"members": [],
				"char": 1,
				"name": "HiddenFuncError",
				"comment": " Thrown on hidden function error.\n"
			},
			{
				"kind": "class",
				"line": 211,
				"base": "object.Error",
				"members": [],
				"char": 1,
				"name": "OutOfMemoryError",
				"comment": " Thrown on an out of memory error.\n"
			},
			{
				"kind": "class",
				"line": 252,
				"base": "object.Error",
				"members": [],
				"char": 1,
				"name": "InvalidMemoryOperationError",
				"comment": " Thrown on an invalid memory operation.\n\n An invalid memory operation error occurs in circumstances when the garbage\n collector has detected an operation it cannot reliably handle. The default\n D GC is not re-entrant, so this can happen due to allocations done from\n within finalizers called during a garbage collection cycle.\n"
			},
			{
				"kind": "class",
				"line": 288,
				"base": "object.Error",
				"members": [],
				"char": 1,
				"name": "SwitchError",
				"comment": " Thrown on a switch error.\n"
			},
			{
				"kind": "class",
				"line": 319,
				"base": "object.Exception",
				"members": [],
				"char": 1,
				"name": "UnicodeException",
				"comment": " Thrown on a unicode conversion error.\n"
			},
			{
				"kind": "alias",
				"line": 367,
				"deco": "PFNbAyamAyaZv",
				"char": 1,
				"name": "AssertHandler",
				"comment": "Gets/sets assert hander. null means the default handler is used.\n"
			},
			{
				"kind": "function",
				"line": 370,
				"deco": "FNbNdNiNeZPFNbAyamAyaZv",
				"endchar": 1,
				"char": 25,
				"name": "assertHandler",
				"comment": "ditto\n",
				"originalType": "nothrow @nogc @property @trusted AssertHandler()",
				"endline": 373
			},
			{
				"kind": "function",
				"line": 376,
				"deco": "FNbNdNiNePFNbAyamAyaZvZv",
				"endchar": 1,
				"char": 16,
				"parameters": [
					{
						"deco": "PFNbAyamAyaZv",
						"name": "handler"
					}
				],
				"name": "assertHandler",
				"comment": "ditto\n",
				"originalType": "nothrow @nogc @property @trusted void(AssertHandler handler)",
				"endline": 379
			},
			{
				"kind": "function",
				"line": 389,
				"storageClass": [
					"deprecated"
				],
				"deco": "FNbNiNePFNbAyamAyaZvZv",
				"endchar": 1,
				"char": 17,
				"parameters": [
					{
						"deco": "PFNbAyamAyaZv",
						"name": "h"
					}
				],
				"name": "setAssertHandler",
				"comment": " Overrides the default assert hander with a user-supplied version.\n $(RED Deprecated.\n   Please use $(LREF assertHandler) instead.)\n\n Params:\n  h = The new assert handler.  Set to null to use the default handler.\n",
				"originalType": "nothrow @nogc @trusted void(AssertHandler h)",
				"endline": 392
			},
			{
				"kind": "function",
				"line": 409,
				"deco": "UNbAyamZv",
				"endchar": 1,
				"char": 17,
				"parameters": [
					{
						"deco": "Aya",
						"default": "__FILE__",
						"name": "file"
					},
					{
						"deco": "m",
						"default": "cast(ulong)__LINE__",
						"name": "line"
					}
				],
				"name": "onAssertError",
				"comment": "\n\n\n\n A callback for assert errors in D.  The user-supplied assert handler will\n be called if one has been supplied, otherwise an $(LREF AssertError) will be\n thrown.\n\n Params:\n  file = The name of the file that signaled this error.\n  line = The line number on which this error occurred.\n",
				"originalType": "nothrow extern (C) void(string file = __FILE__, size_t line = __LINE__)",
				"endline": 414
			},
			{
				"kind": "function",
				"line": 427,
				"deco": "UNbAyamAyaZv",
				"endchar": 1,
				"char": 17,
				"parameters": [
					{
						"deco": "Aya",
						"name": "file"
					},
					{
						"deco": "m",
						"name": "line"
					},
					{
						"deco": "Aya",
						"name": "msg"
					}
				],
				"name": "onAssertErrorMsg",
				"comment": " A callback for assert errors in D.  The user-supplied assert handler will\n be called if one has been supplied, otherwise an $(LREF AssertError) will be\n thrown.\n\n Params:\n  file = The name of the file that signaled this error.\n  line = The line number on which this error occurred.\n  msg  = An error message supplied by the user.\n",
				"originalType": "nothrow extern (C) void(string file, size_t line, string msg)",
				"endline": 432
			},
			{
				"kind": "function",
				"line": 445,
				"deco": "UNbAyamAyaZv",
				"endchar": 1,
				"char": 17,
				"parameters": [
					{
						"deco": "Aya",
						"name": "file"
					},
					{
						"deco": "m",
						"name": "line"
					},
					{
						"deco": "Aya",
						"name": "msg"
					}
				],
				"name": "onUnittestErrorMsg",
				"comment": " A callback for unittest errors in D.  The user-supplied unittest handler\n will be called if one has been supplied, otherwise the error will be\n written to stderr.\n\n Params:\n  file = The name of the file that signaled this error.\n  line = The line number on which this error occurred.\n  msg  = An error message supplied by the user.\n",
				"originalType": "nothrow extern (C) void(string file, size_t line, string msg)",
				"endline": 448
			},
			{
				"kind": "function",
				"line": 465,
				"deco": "UNaNbNfAyamZv",
				"endchar": 1,
				"char": 17,
				"parameters": [
					{
						"deco": "Aya",
						"default": "__FILE__",
						"name": "file"
					},
					{
						"deco": "m",
						"default": "cast(ulong)__LINE__",
						"name": "line"
					}
				],
				"name": "onRangeError",
				"comment": "\n\n\n\n A callback for array bounds errors in D.  A $(LREF RangeError) will be thrown.\n\n Params:\n  file = The name of the file that signaled this error.\n  line = The line number on which this error occurred.\n\n Throws:\n  $(LREF RangeError).\n",
				"originalType": "pure nothrow @safe extern (C) void(string file = __FILE__, size_t line = __LINE__)",
				"endline": 468
			},
			{
				"kind": "function",
				"line": 483,
				"deco": "UNbNeC8TypeInfoC6object9ThrowableAyamZv",
				"endchar": 1,
				"char": 17,
				"parameters": [
					{
						"deco": "C8TypeInfo",
						"name": "info"
					},
					{
						"deco": "C6object9Throwable",
						"name": "e"
					},
					{
						"deco": "Aya",
						"default": "__FILE__",
						"name": "file"
					},
					{
						"deco": "m",
						"default": "cast(ulong)__LINE__",
						"name": "line"
					}
				],
				"name": "onFinalizeError",
				"comment": " A callback for finalize errors in D.  A $(LREF FinalizeError) will be thrown.\n\n Params:\n  info = The TypeInfo instance for the object that failed finalization.\n  e = The exception thrown during finalization.\n  file = The name of the file that signaled this error.\n  line = The line number on which this error occurred.\n\n Throws:\n  $(LREF FinalizeError).\n",
				"originalType": "nothrow @trusted extern (C) void(TypeInfo info, Throwable e, string file = __FILE__, size_t line = __LINE__)",
				"endline": 493
			},
			{
				"kind": "function",
				"line": 503,
				"deco": "UNaNbNfC6ObjectZv",
				"endchar": 1,
				"char": 17,
				"parameters": [
					{
						"deco": "C6Object",
						"name": "o"
					}
				],
				"name": "onHiddenFuncError",
				"comment": " A callback for hidden function errors in D.  A $(LREF HiddenFuncError) will be\n thrown.\n\n Throws:\n  $(LREF HiddenFuncError).\n",
				"endline": 506
			},
			{
				"kind": "function",
				"line": 516,
				"deco": "UNaNbNiNePvZv",
				"endchar": 1,
				"char": 17,
				"parameters": [
					{
						"deco": "Pv",
						"default": "null",
						"name": "pretend_sideffect"
					}
				],
				"name": "onOutOfMemoryError",
				"comment": " A callback for out of memory errors in D.  An $(LREF OutOfMemoryError) will be\n thrown.\n\n Throws:\n  $(LREF OutOfMemoryError).\n",
				"endline": 521
			},
			{
				"kind": "function",
				"line": 531,
				"deco": "UNaNbNiNePvZv",
				"endchar": 1,
				"char": 17,
				"parameters": [
					{
						"deco": "Pv",
						"default": "null",
						"name": "pretend_sideffect"
					}
				],
				"name": "onInvalidMemoryOperationError",
				"comment": " A callback for invalid memory operations in D.  An\n $(LREF InvalidMemoryOperationError) will be thrown.\n\n Throws:\n  $(LREF InvalidMemoryOperationError).\n",
				"endline": 537
			},
			{
				"kind": "function",
				"line": 550,
				"deco": "UNaNbNfAyamZv",
				"endchar": 1,
				"char": 17,
				"parameters": [
					{
						"deco": "Aya",
						"default": "__FILE__",
						"name": "file"
					},
					{
						"deco": "m",
						"default": "cast(ulong)__LINE__",
						"name": "line"
					}
				],
				"name": "onSwitchError",
				"comment": " A callback for switch errors in D.  A $(LREF SwitchError) will be thrown.\n\n Params:\n  file = The name of the file that signaled this error.\n  line = The line number on which this error occurred.\n\n Throws:\n  $(LREF SwitchError).\n",
				"originalType": "pure nothrow @safe extern (C) void(string file = __FILE__, size_t line = __LINE__)",
				"endline": 553
			},
			{
				"kind": "function",
				"line": 568,
				"deco": "UNaNfAyamAyamZv",
				"endchar": 1,
				"char": 17,
				"parameters": [
					{
						"deco": "Aya",
						"name": "msg"
					},
					{
						"deco": "m",
						"name": "idx"
					},
					{
						"deco": "Aya",
						"default": "__FILE__",
						"name": "file"
					},
					{
						"deco": "m",
						"default": "cast(ulong)__LINE__",
						"name": "line"
					}
				],
				"name": "onUnicodeError",
				"comment": " A callback for unicode errors in D.  A $(LREF UnicodeException) will be thrown.\n\n Params:\n  msg = Information about the error.\n  idx = String index where this error was detected.\n  file = The name of the file that signaled this error.\n  line = The line number on which this error occurred.\n\n Throws:\n  $(LREF UnicodeException).\n",
				"originalType": "pure @safe extern (C) void(string msg, size_t idx, string file = __FILE__, size_t line = __LINE__)",
				"endline": 571
			},
			{
				"kind": "function",
				"line": 597,
				"deco": "UPyS6object10ModuleInfokZv",
				"endchar": 5,
				"char": 10,
				"parameters": [
					{
						"deco": "PyS6object10ModuleInfo",
						"name": "m"
					},
					{
						"deco": "k",
						"name": "line"
					}
				],
				"name": "_d_assertm",
				"comment": " These functions must be defined for any D program linked\n against this library.\n\n Function calls to these are generated by the compiler and inserted into\n the object code.\n",
				"endline": 600
			},
			{
				"kind": "function",
				"line": 602,
				"deco": "UAyaAyakZv",
				"endchar": 5,
				"char": 10,
				"parameters": [
					{
						"deco": "Aya",
						"name": "msg"
					},
					{
						"deco": "Aya",
						"name": "file"
					},
					{
						"deco": "k",
						"name": "line"
					}
				],
				"name": "_d_assert_msg",
				"comment": " These functions must be defined for any D program linked\n against this library.\n\n Function calls to these are generated by the compiler and inserted into\n the object code.\n",
				"endline": 605
			},
			{
				"kind": "function",
				"line": 607,
				"deco": "UAyakZv",
				"endchar": 5,
				"char": 10,
				"parameters": [
					{
						"deco": "Aya",
						"name": "file"
					},
					{
						"deco": "k",
						"name": "line"
					}
				],
				"name": "_d_assert",
				"comment": " These functions must be defined for any D program linked\n against this library.\n\n Function calls to these are generated by the compiler and inserted into\n the object code.\n",
				"endline": 610
			},
			{
				"kind": "function",
				"line": 614,
				"deco": "UPyS6object10ModuleInfokZv",
				"endchar": 5,
				"char": 10,
				"parameters": [
					{
						"deco": "PyS6object10ModuleInfo",
						"name": "m"
					},
					{
						"deco": "k",
						"name": "line"
					}
				],
				"name": "_d_unittestm",
				"comment": " These functions must be defined for any D program linked\n against this library.\n\n Function calls to these are generated by the compiler and inserted into\n the object code.\n",
				"endline": 617
			},
			{
				"kind": "function",
				"line": 619,
				"deco": "UAyaAyakZv",
				"endchar": 5,
				"char": 10,
				"parameters": [
					{
						"deco": "Aya",
						"name": "msg"
					},
					{
						"deco": "Aya",
						"name": "file"
					},
					{
						"deco": "k",
						"name": "line"
					}
				],
				"name": "_d_unittest_msg",
				"comment": " These functions must be defined for any D program linked\n against this library.\n\n Function calls to these are generated by the compiler and inserted into\n the object code.\n",
				"endline": 622
			},
			{
				"kind": "function",
				"line": 624,
				"deco": "UAyakZv",
				"endchar": 5,
				"char": 10,
				"parameters": [
					{
						"deco": "Aya",
						"name": "file"
					},
					{
						"deco": "k",
						"name": "line"
					}
				],
				"name": "_d_unittest",
				"comment": " These functions must be defined for any D program linked\n against this library.\n\n Function calls to these are generated by the compiler and inserted into\n the object code.\n",
				"endline": 627
			},
			{
				"kind": "function",
				"line": 631,
				"deco": "UPyS6object10ModuleInfokZv",
				"endchar": 5,
				"char": 10,
				"parameters": [
					{
						"deco": "PyS6object10ModuleInfo",
						"name": "m"
					},
					{
						"deco": "k",
						"name": "line"
					}
				],
				"name": "_d_array_bounds",
				"comment": " These functions must be defined for any D program linked\n against this library.\n\n Function calls to these are generated by the compiler and inserted into\n the object code.\n",
				"endline": 634
			},
			{
				"kind": "function",
				"line": 636,
				"deco": "UAyakZv",
				"endchar": 5,
				"char": 10,
				"parameters": [
					{
						"deco": "Aya",
						"name": "file"
					},
					{
						"deco": "k",
						"name": "line"
					}
				],
				"name": "_d_arraybounds",
				"comment": " These functions must be defined for any D program linked\n against this library.\n\n Function calls to these are generated by the compiler and inserted into\n the object code.\n",
				"endline": 639
			},
			{
				"kind": "function",
				"line": 643,
				"deco": "UPyS6object10ModuleInfokZv",
				"endchar": 5,
				"char": 10,
				"parameters": [
					{
						"deco": "PyS6object10ModuleInfo",
						"name": "m"
					},
					{
						"deco": "k",
						"name": "line"
					}
				],
				"name": "_d_switch_error",
				"comment": " These functions must be defined for any D program linked\n against this library.\n\n Function calls to these are generated by the compiler and inserted into\n the object code.\n",
				"endline": 646
			},
			{
				"kind": "function",
				"line": 648,
				"deco": "UZv",
				"endchar": 5,
				"char": 10,
				"name": "_d_hidden_func",
				"comment": " These functions must be defined for any D program linked\n against this library.\n\n Function calls to these are generated by the compiler and inserted into\n the object code.\n",
				"endline": 665
			}
		],
		"name": "core.exception",
		"comment": " The exception module defines all system-level exceptions and provides a\n mechanism to alter system-level error handling.\n\n Copyright: Copyright Sean Kelly 2005 - 2013.\n License: Distributed under the\n      $(LINK2 http://www.boost.org/LICENSE_1_0.txt, Boost Software License 1.0).\n    (See accompanying file LICENSE)\n Authors:   Sean Kelly and Jonathan M Davis\n Source:    $(DRUNTIMESRC core/_exception.d)\n"
	},
	{
		"kind": "module",
		"file": "../druntime/src/core/thread.d",
		"members": [
			{
				"kind": "alias",
				"line": 55,
				"char": 40,
				"name": "getpid",
				"comment": " Returns the process ID of the calling process, which is guaranteed to be\n unique on the system. This call is always successful.\n\n Example:\n ---\n writefln(\"Current process id: %s\", getpid());\n ---\n"
			},
			{
				"kind": "class",
				"line": 71,
				"base": "object.Exception",
				"members": [],
				"char": 1,
				"name": "ThreadException",
				"comment": "\n\n\n\n Base class for thread exceptions.\n"
			},
			{
				"kind": "class",
				"line": 88,
				"base": "object.Error",
				"members": [],
				"char": 1,
				"name": "ThreadError",
				"comment": " Base class for thread errors to be used for function inside GC when allocations are unavailable.\n"
			},
			{
				"kind": "class",
				"line": 489,
				"members": [
					{
						"kind": "constructor",
						"line": 507,
						"deco": "FPFZvmZC4core6thread6Thread",
						"endchar": 5,
						"char": 5,
						"parameters": [
							{
								"deco": "PFZv",
								"name": "fn"
							},
							{
								"deco": "m",
								"default": "0LU",
								"name": "sz"
							}
						],
						"name": "this",
						"comment": "\n\n\n\n Initializes a thread object which is associated with a static\n D function.\n\n Params:\n  fn = The thread function.\n  sz = The stack size for this thread.\n\n In:\n  fn must not be null.\n",
						"originalType": "(void function() fn, size_t sz = 0)",
						"endline": 518
					},
					{
						"kind": "constructor",
						"line": 532,
						"deco": "FDFZvmZC4core6thread6Thread",
						"endchar": 5,
						"char": 5,
						"parameters": [
							{
								"deco": "DFZv",
								"name": "dg"
							},
							{
								"deco": "m",
								"default": "0LU",
								"name": "sz"
							}
						],
						"name": "this",
						"comment": " Initializes a thread object which is associated with a dynamic\n D function.\n\n Params:\n  dg = The thread function.\n  sz = The stack size for this thread.\n\n In:\n  dg must not be null.\n",
						"originalType": "(void delegate() dg, size_t sz = 0)",
						"endline": 543
					},
					{
						"kind": "destructor",
						"line": 549,
						"deco": "FZv",
						"endchar": 5,
						"char": 5,
						"name": "~this",
						"comment": " Cleans up any remaining resources used by this object.\n",
						"endline": 573
					},
					{
						"kind": "function",
						"line": 591,
						"storageClass": [
							"final"
						],
						"deco": "FNbZC4core6thread6Thread",
						"endchar": 5,
						"in": {
							"kind": "function",
							"line": 593,
							"deco": "FNbZv",
							"endchar": 5,
							"char": 5,
							"name": "__require",
							"endline": 593
						},
						"char": 18,
						"name": "start",
						"comment": "\n\n\n\n Starts the thread and invokes the function or delegate passed upon\n construction.\n\n In:\n  This routine may only be called once per thread instance.\n\n Throws:\n  ThreadException if the thread fails to start.\n",
						"endline": 697
					},
					{
						"kind": "function",
						"line": 715,
						"storageClass": [
							"final"
						],
						"deco": "FbZC6object9Throwable",
						"endchar": 5,
						"char": 21,
						"parameters": [
							{
								"deco": "b",
								"default": "true",
								"name": "rethrow"
							}
						],
						"name": "join",
						"comment": " Waits for this thread to complete.  If the thread terminated as the\n result of an unhandled exception, this exception will be rethrown.\n\n Params:\n  rethrow = Rethrow any unhandled exception which may have caused this\n            thread to terminate.\n\n Throws:\n  ThreadException if the operation fails.\n  Any exception not handled by the joined thread.\n\n Returns:\n  Any exception not handled by this thread if rethrow = false, null\n  otherwise.\n",
						"endline": 745
					},
					{
						"kind": "function",
						"line": 759,
						"storageClass": [
							"final"
						],
						"deco": "FNdZAya",
						"endchar": 5,
						"char": 28,
						"name": "name",
						"comment": "\n\n\n\n Gets the user-readable label for this thread.\n\n Returns:\n  The name of this thread.\n",
						"endline": 765
					},
					{
						"kind": "function",
						"line": 774,
						"storageClass": [
							"final"
						],
						"deco": "FNdAyaZv",
						"endchar": 5,
						"char": 26,
						"parameters": [
							{
								"deco": "Aya",
								"name": "val"
							}
						],
						"name": "name",
						"comment": " Sets the user-readable label for this thread.\n\n Params:\n  val = The new name of this thread.\n",
						"endline": 780
					},
					{
						"kind": "function",
						"line": 793,
						"storageClass": [
							"final"
						],
						"deco": "FNdZb",
						"endchar": 5,
						"char": 26,
						"name": "isDaemon",
						"comment": " Gets the daemon status for this thread.  While the runtime will wait for\n all normal threads to complete before tearing down the process, daemon\n threads are effectively ignored and thus will not prevent the process\n from terminating.  In effect, daemon threads will be terminated\n automatically by the OS when the process exits.\n\n Returns:\n  true if this is a daemon thread.\n",
						"endline": 799
					},
					{
						"kind": "function",
						"line": 812,
						"storageClass": [
							"final"
						],
						"deco": "FNdbZv",
						"endchar": 5,
						"char": 26,
						"parameters": [
							{
								"deco": "b",
								"name": "val"
							}
						],
						"name": "isDaemon",
						"comment": " Sets the daemon status for this thread.  While the runtime will wait for\n all normal threads to complete before tearing down the process, daemon\n threads are effectively ignored and thus will not prevent the process\n from terminating.  In effect, daemon threads will be terminated\n automatically by the OS when the process exits.\n\n Params:\n  val = The new daemon status for this thread.\n",
						"endline": 818
					},
					{
						"kind": "function",
						"line": 827,
						"storageClass": [
							"final"
						],
						"deco": "FNbNdZb",
						"endchar": 5,
						"char": 26,
						"name": "isRunning",
						"comment": " Tests whether this thread is running.\n\n Returns:\n  true if the thread is running, false if not.\n",
						"endline": 844
					},
					{
						"kind": "variable",
						"line": 858,
						"storageClass": [
							"const",
							"__gshared"
						],
						"deco": "xi",
						"char": 25,
						"name": "PRIORITY_MIN",
						"comment": "\n\n\n\n The minimum scheduling priority that may be set for a thread.  On\n systems where multiple scheduling policies are defined, this value\n represents the minimum valid priority for the scheduling policy of\n the process.\n",
						"originalType": "int"
					},
					{
						"kind": "variable",
						"line": 867,
						"storageClass": [
							"const",
							"__gshared"
						],
						"deco": "xi",
						"char": 25,
						"name": "PRIORITY_MAX",
						"comment": " The maximum scheduling priority that may be set for a thread.  On\n systems where multiple scheduling policies are defined, this value\n represents the maximum valid priority for the scheduling policy of\n the process.\n",
						"originalType": "int"
					},
					{
						"kind": "variable",
						"line": 876,
						"storageClass": [
							"const",
							"__gshared"
						],
						"deco": "xi",
						"char": 25,
						"name": "PRIORITY_DEFAULT",
						"comment": " The default scheduling priority that is set for a thread.  On\n systems where multiple scheduling policies are defined, this value\n represents the default priority for the scheduling policy of\n the process.\n",
						"originalType": "int"
					},
					{
						"kind": "function",
						"line": 888,
						"storageClass": [
							"final"
						],
						"deco": "FNdZi",
						"endchar": 5,
						"char": 25,
						"name": "priority",
						"comment": " Gets the scheduling priority for the associated thread.\n\n Note: Getting the priority of a thread that already terminated\n might return the default priority.\n\n Returns:\n  The scheduling priority of this thread.\n",
						"endline": 907
					},
					{
						"kind": "function",
						"line": 919,
						"storageClass": [
							"final"
						],
						"deco": "FNdiZv",
						"endchar": 5,
						"in": {
							"kind": "function",
							"line": 921,
							"deco": "FZv",
							"endchar": 5,
							"char": 5,
							"name": "__require",
							"endline": 921
						},
						"char": 26,
						"parameters": [
							{
								"deco": "i",
								"name": "val"
							}
						],
						"name": "priority",
						"comment": " Sets the scheduling priority for the associated thread.\n\n Note: Setting the priority of a thread that already terminated\n might have no effect.\n\n Params:\n  val = The new scheduling priority of this thread.\n",
						"endline": 991
					},
					{
						"kind": "function",
						"line": 1044,
						"storageClass": [
							"static"
						],
						"deco": "FNbS4core4time8DurationZv",
						"endchar": 5,
						"char": 17,
						"parameters": [
							{
								"deco": "S4core4time8Duration",
								"name": "val"
							}
						],
						"name": "sleep",
						"comment": "\n\n\n\n Suspends the calling thread for at least the supplied period.  This may\n result in multiple OS calls if period is greater than the maximum sleep\n duration supported by the operating system.\n\n Params:\n  val = The minimum duration the calling thread should be suspended.\n\n In:\n  period must be non-negative.\n\n Example:\n ------------------------------------------------------------------------\n\n Thread.sleep( dur!(\"msecs\")( 50 ) );  // sleep for 50 milliseconds\n Thread.sleep( dur!(\"seconds\")( 5 ) ); // sleep for 5 seconds\n\n ------------------------------------------------------------------------\n",
						"endline": 1091
					},
					{
						"kind": "function",
						"line": 1097,
						"storageClass": [
							"static"
						],
						"deco": "FNbZv",
						"endchar": 5,
						"char": 17,
						"name": "yield",
						"comment": " Forces a context switch to occur away from the calling thread.\n",
						"endline": 1103
					},
					{
						"kind": "function",
						"line": 1118,
						"storageClass": [
							"static"
						],
						"deco": "FNbZC4core6thread6Thread",
						"endchar": 5,
						"char": 19,
						"name": "getThis",
						"comment": "\n\n\n\n Provides a reference to the calling thread.\n\n Returns:\n  The thread object representing the calling thread.  The result of\n  deleting this object is undefined.  If the current thread is not\n  attached to the runtime, a null reference is returned.\n",
						"endline": 1136
					},
					{
						"kind": "function",
						"line": 1147,
						"storageClass": [
							"static"
						],
						"deco": "FZAC4core6thread6Thread",
						"endchar": 5,
						"char": 21,
						"name": "getAll",
						"comment": " Provides a list of all threads currently being tracked by the system.\n\n Returns:\n  An array containing references to all threads currently being\n  tracked by the system.  The result of deleting any contained\n  objects is undefined.\n",
						"endline": 1160
					},
					{
						"kind": "function",
						"line": 1173,
						"storageClass": [
							"static"
						],
						"deco": "FMDFKC4core6thread6ThreadZiZi",
						"endchar": 5,
						"char": 16,
						"parameters": [
							{
								"deco": "DFKC4core6thread6ThreadZi",
								"storageClass": [
									"scope"
								],
								"name": "dg"
							}
						],
						"name": "opApply",
						"comment": " Operates on all threads currently being tracked by the system.  The\n result of deleting any Thread object is undefined.\n\n Params:\n  dg = The supplied code as a delegate.\n\n Returns:\n  Zero if all elemented are visited, nonzero if not.\n",
						"endline": 1187
					}
				],
				"char": 1,
				"name": "Thread",
				"comment": "\n\n\n\n This class encapsulates all threading functionality for the D\n programming language.  As thread manipulation is a required facility\n for garbage collection, all user threads should derive from this\n class, and instances of this class should never be explicitly deleted.\n A new thread may be created using either derivation or composition, as\n in the following example.\nExample:\n\n---\nclass DerivedThread : Thread\n{\n    this()\n    {\n        super(&run);\n    }\n\nprivate:\n    void run()\n    {\n        // Derived thread running.\n    }\n}\n\nvoid threadFunc()\n{\n    // Composed thread running.\n}\n\n// create and start instances of each type\nauto derived = new DerivedThread().start();\nauto composed = new Thread(&threadFunc).start();\n\n---\n"
			},
			{
				"kind": "function",
				"line": 1866,
				"deco": "UiiZv",
				"endchar": 5,
				"char": 21,
				"parameters": [
					{
						"deco": "i",
						"name": "suspendSignalNo"
					},
					{
						"deco": "i",
						"name": "resumeSignalNo"
					}
				],
				"name": "thread_setGCSignals",
				"comment": " Instruct the thread module, when initialized, to use a different set of\n signals besides SIGUSR1 and SIGUSR2 for suspension and resumption of threads.\n This function should be called at most once, prior to thread_init().\n This function is Posix-only.\n\n\n\n\n",
				"endline": 1868
			},
			{
				"kind": "function",
				"line": 1903,
				"deco": "UZv",
				"endchar": 1,
				"char": 17,
				"name": "thread_init",
				"comment": " Initializes the thread module.  This function must be called by the\n garbage collector on startup and before any other thread routines\n are called.\n",
				"endline": 1973
			},
			{
				"kind": "function",
				"line": 1980,
				"deco": "UZv",
				"endchar": 1,
				"char": 17,
				"name": "thread_term",
				"comment": " Terminates the thread module. No other thread routine may be called\n afterwards.\n",
				"endline": 1991
			},
			{
				"kind": "function",
				"line": 1997,
				"deco": "UZb",
				"endchar": 1,
				"char": 17,
				"name": "thread_isMainThread",
				"comment": "\n",
				"endline": 2000
			},
			{
				"kind": "function",
				"line": 2013,
				"deco": "UZC4core6thread6Thread",
				"endchar": 1,
				"char": 19,
				"name": "thread_attachThis",
				"comment": " Registers the calling thread for use with the D Runtime.  If this routine\n is called for a thread which is already registered, no action is performed.\n\n NOTE: This routine does not run thread-local static constructors when called.\n       If full functionality as a D thread is desired, the following function\n       must be called after thread_attachThis:\n\n       extern (C) void rt_moduleTlsCtor();\n",
				"endline": 2054
			},
			{
				"kind": "function",
				"line": 2130,
				"deco": "UNbZv",
				"endchar": 1,
				"char": 17,
				"name": "thread_detachThis",
				"comment": " Deregisters the calling thread from use with the runtime.  If this routine\n is called for a thread which is not registered, the result is undefined.\n\n NOTE: This routine does not run thread-local static destructors when called.\n       If full functionality as a D thread is desired, the following function\n       must be called after thread_detachThis, particularly if the thread is\n       being detached at some indeterminate time before program termination:\n\n       $(D extern(C) void rt_moduleTlsDtor();)\n",
				"endline": 2134
			},
			{
				"kind": "function",
				"line": 2148,
				"deco": "UmZv",
				"endchar": 1,
				"char": 17,
				"parameters": [
					{
						"deco": "m",
						"name": "addr"
					}
				],
				"name": "thread_detachByAddr",
				"comment": " Deregisters the given thread from use with the runtime.  If this routine\n is called for a thread which is not registered, the result is undefined.\n\n NOTE: This routine does not run thread-local static destructors when called.\n       If full functionality as a D thread is desired, the following function\n       must be called by the detached thread, particularly if the thread is\n       being detached at some indeterminate time before program termination:\n\n       $(D extern(C) void rt_moduleTlsDtor();)\n",
				"originalType": "extern (C) void(Thread.ThreadAddr addr)",
				"endline": 2152
			},
			{
				"kind": "function",
				"line": 2156,
				"deco": "UC4core6thread6ThreadZv",
				"endchar": 1,
				"char": 17,
				"parameters": [
					{
						"deco": "C4core6thread6Thread",
						"name": "t"
					}
				],
				"name": "thread_detachInstance",
				"comment": "ditto\n",
				"endline": 2159
			},
			{
				"kind": "function",
				"line": 2189,
				"storageClass": [
					"static"
				],
				"deco": "FmZC4core6thread6Thread",
				"endchar": 1,
				"char": 15,
				"parameters": [
					{
						"deco": "m",
						"name": "addr"
					}
				],
				"name": "thread_findByAddr",
				"comment": " Search the list of all threads for a thread with the given thread identifier.\n\n Params:\n  addr = The thread identifier to search for.\n Returns:\n  The thread object associated with the thread identifier, null if not found.\n",
				"originalType": "Thread(Thread.ThreadAddr addr)",
				"endline": 2201
			},
			{
				"kind": "function",
				"line": 2214,
				"deco": "UC4core6thread6ThreadZv",
				"endchar": 1,
				"char": 17,
				"parameters": [
					{
						"deco": "C4core6thread6Thread",
						"name": "t"
					}
				],
				"name": "thread_setThis",
				"comment": " Sets the current thread to a specific reference. Only to be used\n when dealing with externally-created threads (in e.g. C code).\n The primary use of this function is when Thread.getThis() must\n return a sensible value in, for example, TLS destructors. In\n other words, don't touch this unless you know what you're doing.\n\n Params:\n  t = A reference to the current thread. May be null.\n",
				"endline": 2217
			},
			{
				"kind": "function",
				"line": 2225,
				"deco": "UZv",
				"endchar": 1,
				"char": 17,
				"name": "thread_joinAll",
				"comment": " Joins all non-daemon threads that are currently running.  This is done by\n performing successive scans through the thread list until a scan consists\n of only daemon threads.\n",
				"endline": 2249
			},
			{
				"kind": "function",
				"line": 2545,
				"deco": "UNbZv",
				"endchar": 1,
				"char": 17,
				"name": "thread_suspendAll",
				"comment": " Suspend all threads but the calling thread for \"stop the world\" garbage\n collection runs.  This function may be called multiple times, and must\n be followed by a matching number of calls to thread_resumeAll before\n processing is resumed.\n\n Throws:\n  ThreadError if the suspend operation fails for a running thread.\n",
				"endline": 2605
			},
			{
				"kind": "function",
				"line": 2687,
				"deco": "UNbZv",
				"endchar": 1,
				"char": 17,
				"name": "thread_resumeAll",
				"comment": " Resume all threads but the calling thread for \"stop the world\" garbage\n collection runs.  This function must be called once for each preceding\n call to thread_suspendAll before the threads are actually resumed.\n\n In:\n  This routine must be preceded by a call to thread_suspendAll.\n\n Throws:\n  ThreadError if the resume operation fails for a running thread.\n",
				"endline": 2714
			},
			{
				"kind": "enum",
				"line": 2719,
				"members": [
					{
						"kind": "enum member",
						"line": 2721,
						"value": "0",
						"char": 5,
						"name": "stack",
						"comment": "The stack and/or registers are being scanned.\n"
					},
					{
						"kind": "enum member",
						"line": 2722,
						"value": "1",
						"char": 5,
						"name": "tls",
						"comment": "TLS data is being scanned.\n"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "ScanType",
				"comment": " Indicates the kind of scan being performed by $(D thread_scanAllType).\n"
			},
			{
				"kind": "alias",
				"line": 2725,
				"deco": "DFNbPvPvZv",
				"char": 43,
				"name": "ScanAllThreadsFn",
				"comment": "The scanning function.\n"
			},
			{
				"kind": "alias",
				"line": 2726,
				"deco": "DFNbE4core6thread8ScanTypePvPvZv",
				"char": 53,
				"name": "ScanAllThreadsTypeFn",
				"comment": "ditto\n"
			},
			{
				"kind": "function",
				"line": 2738,
				"deco": "UNbMDFNbE4core6thread8ScanTypePvPvZvZv",
				"endchar": 1,
				"char": 17,
				"parameters": [
					{
						"deco": "DFNbE4core6thread8ScanTypePvPvZv",
						"storageClass": [
							"scope"
						],
						"name": "scan"
					}
				],
				"name": "thread_scanAllType",
				"comment": " The main entry point for garbage collection.  The supplied delegate\n will be passed ranges representing both stack and register values.\n\n Params:\n  scan        = The scanner function.  It should scan from p1 through p2 - 1.\n\n In:\n  This routine must be preceded by a call to thread_suspendAll.\n",
				"originalType": "nothrow extern (C) void(scope ScanAllThreadsTypeFn scan)",
				"endline": 2746
			},
			{
				"kind": "function",
				"line": 2818,
				"deco": "UNbMDFNbPvPvZvZv",
				"endchar": 1,
				"char": 17,
				"parameters": [
					{
						"deco": "DFNbPvPvZv",
						"storageClass": [
							"scope"
						],
						"name": "scan"
					}
				],
				"name": "thread_scanAll",
				"comment": " The main entry point for garbage collection.  The supplied delegate\n will be passed ranges representing both stack and register values.\n\n Params:\n  scan        = The scanner function.  It should scan from p1 through p2 - 1.\n\n In:\n  This routine must be preceded by a call to thread_suspendAll.\n",
				"originalType": "nothrow extern (C) void(scope ScanAllThreadsFn scan)",
				"endline": 2821
			},
			{
				"kind": "function",
				"line": 2845,
				"deco": "UZv",
				"endchar": 1,
				"char": 17,
				"name": "thread_enterCriticalRegion",
				"comment": " Signals that the code following this call is a critical region. Any code in\n this region must finish running before the calling thread can be suspended\n by a call to thread_suspendAll.\n\n This function is, in particular, meant to help maintain garbage collector\n invariants when a lock is not used.\n\n A critical region is exited with thread_exitCriticalRegion.\n\n $(RED Warning):\n Using critical regions is extremely error-prone. For instance, using locks\n inside a critical region can easily result in a deadlock when another thread\n holding the lock already got suspended.\n\n The term and concept of a 'critical region' comes from\n $(LINK2 https://github.com/mono/mono/blob/521f4a198e442573c400835ef19bbb36b60b0ebb/mono/metadata/sgen-gc.h#L925 Mono's SGen garbage collector).\n\n In:\n  The calling thread must be attached to the runtime.\n",
				"endline": 2854
			},
			{
				"kind": "function",
				"line": 2864,
				"deco": "UZv",
				"endchar": 1,
				"char": 17,
				"name": "thread_exitCriticalRegion",
				"comment": " Signals that the calling thread is no longer in a critical region. Following\n a call to this function, the thread can once again be suspended.\n\n In:\n  The calling thread must be attached to the runtime.\n",
				"endline": 2873
			},
			{
				"kind": "function",
				"line": 2882,
				"deco": "UZb",
				"endchar": 1,
				"char": 17,
				"name": "thread_inCriticalRegion",
				"comment": " Returns true if the current thread is in a critical region; otherwise, false.\n\n In:\n  The calling thread must be attached to the runtime.\n",
				"endline": 2891
			},
			{
				"kind": "enum",
				"line": 3005,
				"members": [
					{
						"kind": "enum member",
						"line": 3007,
						"value": "0",
						"char": 10,
						"name": "no",
						"comment": "Address is not marked.\n"
					},
					{
						"kind": "enum member",
						"line": 3008,
						"value": "1",
						"char": 9,
						"name": "yes",
						"comment": "Address is marked.\n"
					},
					{
						"kind": "enum member",
						"line": 3009,
						"value": "2",
						"char": 5,
						"name": "unknown",
						"comment": "Address is not managed by the GC.\n"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "IsMarked",
				"comment": " Indicates whether an address has been marked by the GC.\n"
			},
			{
				"kind": "alias",
				"line": 3012,
				"deco": "DFNbPvZi",
				"char": 42,
				"name": "IsMarkedDg",
				"comment": "The isMarked callback function.\n"
			},
			{
				"kind": "function",
				"line": 3026,
				"deco": "UNbMDFNbPvZiZv",
				"endchar": 1,
				"char": 16,
				"parameters": [
					{
						"deco": "DFNbPvZi",
						"storageClass": [
							"scope"
						],
						"name": "isMarked"
					}
				],
				"name": "thread_processGCMarks",
				"comment": " This routine allows the runtime to process any special per-thread handling\n for the GC.  This is needed for taking into account any memory that is\n referenced by non-scanned pointers but is about to be freed.  That currently\n means the array append cache.\n\n Params:\n  isMarked = The function used to check if $(D addr) is marked.\n\n In:\n  This routine must be called just prior to resuming all threads.\n",
				"originalType": "nothrow extern (C) void(scope IsMarkedDg isMarked)",
				"endline": 3036
			},
			{
				"kind": "function",
				"line": 3136,
				"deco": "UNbZPv",
				"endchar": 1,
				"char": 18,
				"name": "thread_stackTop",
				"comment": " Returns the stack top of the currently active stack within the calling\n thread.\n\n In:\n  The calling thread must be attached to the runtime.\n\n Returns:\n  The address of the stack top.\n",
				"endline": 3145
			},
			{
				"kind": "function",
				"line": 3158,
				"deco": "UNbZPv",
				"endchar": 1,
				"char": 18,
				"name": "thread_stackBottom",
				"comment": " Returns the stack bottom of the currently active stack within the calling\n thread.\n\n In:\n  The calling thread must be attached to the runtime.\n\n Returns:\n  The address of the stack bottom.\n",
				"endline": 3166
			},
			{
				"kind": "class",
				"line": 3177,
				"members": [
					{
						"kind": "function",
						"line": 3189,
						"storageClass": [
							"final"
						],
						"deco": "FPFZvZC4core6thread6Thread",
						"endchar": 5,
						"char": 18,
						"parameters": [
							{
								"deco": "PFZv",
								"name": "fn"
							}
						],
						"name": "create",
						"comment": " Creates and starts a new Thread object that executes fn and adds it to\n the list of tracked threads.\n\n Params:\n  fn = The thread function.\n\n Returns:\n  A reference to the newly created thread.\n",
						"endline": 3198
					},
					{
						"kind": "function",
						"line": 3211,
						"storageClass": [
							"final"
						],
						"deco": "FDFZvZC4core6thread6Thread",
						"endchar": 5,
						"char": 18,
						"parameters": [
							{
								"deco": "DFZv",
								"name": "dg"
							}
						],
						"name": "create",
						"comment": " Creates and starts a new Thread object that executes dg and adds it to\n the list of tracked threads.\n\n Params:\n  dg = The thread function.\n\n Returns:\n  A reference to the newly created thread.\n",
						"endline": 3220
					},
					{
						"kind": "function",
						"line": 3232,
						"storageClass": [
							"final"
						],
						"deco": "FC4core6thread6ThreadZv",
						"endchar": 5,
						"in": {
							"kind": "function",
							"line": 3234,
							"deco": "FZv",
							"endchar": 5,
							"char": 5,
							"name": "__require",
							"endline": 3234
						},
						"char": 16,
						"parameters": [
							{
								"deco": "C4core6thread6Thread",
								"name": "t"
							}
						],
						"name": "add",
						"comment": " Add t to the list of tracked threads if it is not already being tracked.\n\n Params:\n  t = The thread to add.\n\n In:\n  t must not be null.\n",
						"endline": 3243
					},
					{
						"kind": "function",
						"line": 3256,
						"storageClass": [
							"final"
						],
						"deco": "FC4core6thread6ThreadZv",
						"endchar": 5,
						"in": {
							"kind": "function",
							"line": 3258,
							"deco": "FZv",
							"endchar": 5,
							"char": 5,
							"name": "__require",
							"endline": 3258
						},
						"char": 16,
						"parameters": [
							{
								"deco": "C4core6thread6Thread",
								"name": "t"
							}
						],
						"name": "remove",
						"comment": " Removes t from the list of tracked threads.  No operation will be\n performed if t is not currently being tracked by this object.\n\n Params:\n  t = The thread to remove.\n\n In:\n  t must not be null.\n",
						"endline": 3267
					},
					{
						"kind": "function",
						"line": 3273,
						"storageClass": [
							"final"
						],
						"deco": "FMDFKC4core6thread6ThreadZiZi",
						"endchar": 5,
						"char": 15,
						"parameters": [
							{
								"deco": "DFKC4core6thread6ThreadZi",
								"storageClass": [
									"scope"
								],
								"name": "dg"
							}
						],
						"name": "opApply",
						"comment": " Operates on all threads currently tracked by this object.\n",
						"endline": 3289
					},
					{
						"kind": "function",
						"line": 3303,
						"storageClass": [
							"final"
						],
						"deco": "FbZv",
						"endchar": 5,
						"char": 16,
						"parameters": [
							{
								"deco": "b",
								"default": "true",
								"name": "rethrow"
							}
						],
						"name": "joinAll",
						"comment": " Iteratively joins all tracked threads.  This function will block add,\n remove, and opApply until it completes.\n\n Params:\n  rethrow = Rethrow any unhandled exception which may have caused the\n            current thread to terminate.\n\n Throws:\n  Any exception not handled by the joined threads.\n",
						"endline": 3314
					}
				],
				"char": 1,
				"name": "ThreadGroup",
				"comment": "\n\n\n\n This class is intended to simplify certain common programming techniques.\n"
			},
			{
				"kind": "class",
				"line": 3853,
				"members": [
					{
						"kind": "constructor",
						"line": 3871,
						"deco": "FNbPFZvmZC4core6thread5Fiber",
						"endchar": 5,
						"char": 5,
						"parameters": [
							{
								"deco": "PFZv",
								"name": "fn"
							},
							{
								"deco": "m",
								"default": "PAGESIZE * 4LU",
								"name": "sz"
							}
						],
						"name": "this",
						"comment": "\n\n\n\n Initializes a fiber object which is associated with a static\n D function.\n\n Params:\n  fn = The fiber function.\n  sz = The stack size for this fiber.\n\n In:\n  fn must not be null.\n",
						"originalType": "nothrow (void function() fn, size_t sz = PAGESIZE * 4)",
						"endline": 3880
					},
					{
						"kind": "constructor",
						"line": 3894,
						"deco": "FNbDFZvmZC4core6thread5Fiber",
						"endchar": 5,
						"char": 5,
						"parameters": [
							{
								"deco": "DFZv",
								"name": "dg"
							},
							{
								"deco": "m",
								"default": "PAGESIZE * 4LU",
								"name": "sz"
							}
						],
						"name": "this",
						"comment": " Initializes a fiber object which is associated with a dynamic\n D function.\n\n Params:\n  dg = The fiber function.\n  sz = The stack size for this fiber.\n\n In:\n  dg must not be null.\n",
						"originalType": "nothrow (void delegate() dg, size_t sz = PAGESIZE * 4)",
						"endline": 3903
					},
					{
						"kind": "destructor",
						"line": 3909,
						"deco": "FNbZv",
						"endchar": 5,
						"char": 5,
						"name": "~this",
						"comment": " Cleans up any remaining resources used by this object.\n",
						"endline": 3924
					},
					{
						"kind": "function",
						"line": 3951,
						"storageClass": [
							"final"
						],
						"deco": "FE4core6thread5Fiber7RethrowZC6object9Throwable",
						"endchar": 5,
						"char": 21,
						"parameters": [
							{
								"deco": "E4core6thread5Fiber7Rethrow",
								"default": "cast(Rethrow)true",
								"name": "rethrow"
							}
						],
						"name": "call",
						"comment": "\n\n\n\n Transfers execution to this fiber object.  The calling context will be\n suspended until the fiber calls Fiber.yield() or until it terminates\n via an unhandled exception.\n\n Params:\n  rethrow = Rethrow any unhandled exception which may have caused this\n            fiber to terminate.\n\n In:\n  This fiber must be in state HOLD.\n\n Throws:\n  Any exception not handled by the joined thread.\n\n Returns:\n  Any exception not handled by this fiber if rethrow = false, null\n  otherwise.\n",
						"originalType": "Throwable(Rethrow rethrow = Rethrow.yes)",
						"endline": 3954
					},
					{
						"kind": "template",
						"line": 3957,
						"members": [
							{
								"kind": "function",
								"line": 3957,
								"storageClass": [
									"final"
								],
								"endchar": 5,
								"char": 21,
								"type": "Throwable()",
								"name": "call",
								"endline": 3970
							}
						],
						"char": 21,
						"parameters": [
							{
								"kind": "value",
								"deco": "E4core6thread5Fiber7Rethrow",
								"name": "rethrow"
							}
						],
						"comment": "ditto\n",
						"name": "call"
					},
					{
						"kind": "function",
						"line": 3974,
						"storageClass": [
							"final",
							"deprecated"
						],
						"deco": "FbZC6object9Throwable",
						"endchar": 5,
						"char": 21,
						"parameters": [
							{
								"deco": "b",
								"name": "rethrow"
							}
						],
						"name": "call",
						"comment": "ditto\n",
						"endline": 3977
					},
					{
						"kind": "enum",
						"line": 4012,
						"members": [],
						"char": 5,
						"baseDeco": "b",
						"name": "Rethrow",
						"comment": "Flag to control rethrow behavior of $(D $(LREF call))\n"
					},
					{
						"kind": "function",
						"line": 4025,
						"storageClass": [
							"final"
						],
						"deco": "FNbZv",
						"endchar": 5,
						"in": {
							"kind": "function",
							"line": 4027,
							"deco": "FNbZv",
							"endchar": 5,
							"char": 5,
							"name": "__require",
							"endline": 4027
						},
						"char": 16,
						"name": "reset",
						"comment": " Resets this fiber so that it may be re-used, optionally with a\n new function/delegate.  This routine may only be called for\n fibers that have terminated, as doing otherwise could result in\n scope-dependent functionality that is not executed.\n Stack-based classes, for example, may not be cleaned up\n properly if a fiber is reset before it has terminated.\n\n In:\n  This fiber must be in state TERM.\n",
						"endline": 4036
					},
					{
						"kind": "function",
						"line": 4039,
						"storageClass": [
							"final"
						],
						"deco": "FNbPFZvZv",
						"endchar": 5,
						"char": 16,
						"parameters": [
							{
								"deco": "PFZv",
								"name": "fn"
							}
						],
						"name": "reset",
						"comment": "ditto\n",
						"endline": 4044
					},
					{
						"kind": "function",
						"line": 4047,
						"storageClass": [
							"final"
						],
						"deco": "FNbDFZvZv",
						"endchar": 5,
						"char": 16,
						"parameters": [
							{
								"deco": "DFZv",
								"name": "dg"
							}
						],
						"name": "reset",
						"comment": "ditto\n",
						"endline": 4052
					},
					{
						"kind": "enum",
						"line": 4066,
						"members": [
							{
								"kind": "enum member",
								"line": 4068,
								"value": "0",
								"char": 9,
								"name": "HOLD",
								"comment": "\n"
							},
							{
								"kind": "enum member",
								"line": 4069,
								"value": "1",
								"char": 9,
								"name": "EXEC",
								"comment": "\n"
							},
							{
								"kind": "enum member",
								"line": 4070,
								"value": "2",
								"char": 9,
								"name": "TERM",
								"comment": "\n"
							}
						],
						"char": 5,
						"baseDeco": "i",
						"name": "State",
						"comment": "\n\n\n\n A fiber may occupy one of three states: HOLD, EXEC, and TERM.  The HOLD\n state applies to any fiber that is suspended and ready to be called.\n The EXEC state will be set for any fiber that is currently executing.\n And the TERM state is set when a fiber terminates.  Once a fiber\n terminates, it must be reset before it may be called again.\n"
					},
					{
						"kind": "function",
						"line": 4080,
						"storageClass": [
							"final"
						],
						"deco": "xFNbNdZE4core6thread5Fiber5State",
						"endchar": 5,
						"char": 27,
						"name": "state",
						"comment": " Gets the current state of this fiber.\n\n Returns:\n  The state of this fiber as an enumerated value.\n",
						"endline": 4083
					},
					{
						"kind": "function",
						"line": 4094,
						"storageClass": [
							"static"
						],
						"deco": "FNbZv",
						"endchar": 5,
						"char": 17,
						"name": "yield",
						"comment": "\n\n\n\n Forces a context switch to occur away from the calling fiber.\n",
						"endline": 4106
					},
					{
						"kind": "function",
						"line": 4119,
						"storageClass": [
							"static"
						],
						"deco": "FNbC6object9ThrowableZv",
						"endchar": 5,
						"char": 17,
						"parameters": [
							{
								"deco": "C6object9Throwable",
								"name": "t"
							}
						],
						"name": "yieldAndThrow",
						"comment": " Forces a context switch to occur away from the calling fiber and then\n throws obj in the calling fiber.\n\n Params:\n  t = The object to throw.\n\n In:\n  t must not be null.\n",
						"endline": 4137
					},
					{
						"kind": "function",
						"line": 4153,
						"storageClass": [
							"static"
						],
						"deco": "FNbZC4core6thread5Fiber",
						"endchar": 5,
						"char": 18,
						"name": "getThis",
						"comment": "\n\n\n\n Provides a reference to the calling fiber or null if no fiber is\n currently active.\n\n Returns:\n  The fiber object representing the calling fiber or null if no fiber\n  is currently active within this thread. The result of deleting this object is undefined.\n",
						"endline": 4156
					}
				],
				"char": 1,
				"name": "Fiber",
				"comment": "\n\n\n\n This class provides a cooperative concurrency mechanism integrated with the\n threading and garbage collection functionality.  Calling a fiber may be\n considered a blocking operation that returns when the fiber yields (via\n Fiber.yield()).  Execution occurs within the context of the calling thread\n so synchronization is not necessary to guarantee memory visibility so long\n as the same thread calls the fiber each time.  Please note that there is no\n requirement that a fiber be bound to one specific thread.  Rather, fibers\n may be freely passed between threads so long as they are not currently\n executing.  Like threads, a new fiber thread may be created using either\n derivation or composition, as in the following example.\n\n Warning:\n Status registers are not saved by the current implementations. This means\n floating point exception status bits (overflow, divide by 0), rounding mode\n and similar stuff is set per-thread, not per Fiber!\n\n Warning:\n On ARM FPU registers are not saved if druntime was compiled as ARM_SoftFloat.\n If such a build is used on a ARM_SoftFP system which actually has got a FPU\n and other libraries are using the FPU registers (other code is compiled\n as ARM_SoftFP) this can cause problems. Druntime must be compiled as\n ARM_SoftFP in this case.\n\n Example:\n ----------------------------------------------------------------------\n\n class DerivedFiber : Fiber\n {\n     this()\n     {\n         super( &run );\n     }\n\n private :\n     void run()\n     {\n         printf( \"Derived fiber running.\\n\" );\n     }\n }\n\n void fiberFunc()\n {\n     printf( \"Composed fiber running.\\n\" );\n     Fiber.yield();\n     printf( \"Composed fiber running.\\n\" );\n }\n\n // create instances of each type\n Fiber derived = new DerivedFiber();\n Fiber composed = new Fiber( &fiberFunc );\n\n // call both fibers once\n derived.call();\n composed.call();\n printf( \"Execution returned to calling context.\\n\" );\n composed.call();\n\n // since each fiber has run to completion, each should have state TERM\n assert( derived.state == Fiber.State.TERM );\n assert( composed.state == Fiber.State.TERM );\n\n ----------------------------------------------------------------------\n\n Authors: Based on a design by Mikola Lysenko.\n"
			}
		],
		"name": "core.thread",
		"comment": " The thread module provides support for thread creation and management.\n\n Copyright: Copyright Sean Kelly 2005 - 2012.\n License: Distributed under the\n      $(LINK2 http://www.boost.org/LICENSE_1_0.txt, Boost Software License 1.0).\n    (See accompanying file LICENSE)\n Authors:   Sean Kelly, Walter Bright, Alex Rønne Petersen, Martin Nowak\n Source:    $(DRUNTIMESRC core/_thread.d)\n"
	},
	{
		"kind": "module",
		"file": "../druntime/src/core/math.d",
		"members": [
			{
				"kind": "function",
				"line": 43,
				"deco": "FNaNbNiNfeZe",
				"char": 6,
				"parameters": [
					{
						"deco": "e",
						"name": "x"
					}
				],
				"name": "cos",
				"comment": " Returns cosine of x. x is in radians.\n\n      $(TABLE_SV\n      $(TR $(TH x)                 $(TH cos(x)) $(TH invalid?))\n      $(TR $(TD $(NAN))            $(TD $(NAN)) $(TD yes)     )\n      $(TR $(TD $(PLUSMN)$(INFIN)) $(TD $(NAN)) $(TD yes)     )\n      )\n Bugs:\n      Results are undefined if |x| >= $(POWER 2,64).\n"
			},
			{
				"kind": "function",
				"line": 58,
				"deco": "FNaNbNiNfeZe",
				"char": 6,
				"parameters": [
					{
						"deco": "e",
						"name": "x"
					}
				],
				"name": "sin",
				"comment": " Returns sine of x. x is in radians.\n\n      $(TABLE_SV\n      $(TR $(TH x)               $(TH sin(x))      $(TH invalid?))\n      $(TR $(TD $(NAN))          $(TD $(NAN))      $(TD yes))\n      $(TR $(TD $(PLUSMN)0.0)    $(TD $(PLUSMN)0.0) $(TD no))\n      $(TR $(TD $(PLUSMNINF))    $(TD $(NAN))      $(TD yes))\n      )\n Bugs:\n      Results are undefined if |x| >= $(POWER 2,64).\n"
			},
			{
				"kind": "function",
				"line": 66,
				"deco": "FNaNbNiNfeZl",
				"char": 6,
				"parameters": [
					{
						"deco": "e",
						"name": "x"
					}
				],
				"name": "rndtol",
				"comment": " Returns x rounded to a long value using the current rounding mode.\n If the integer value of x is\n greater than long.max, the result is\n indeterminate.\n"
			},
			{
				"kind": "function",
				"line": 75,
				"deco": "UNieZe",
				"char": 17,
				"parameters": [
					{
						"deco": "e",
						"name": "x"
					}
				],
				"name": "rndtonl",
				"comment": " Returns x rounded to a long value using the FE_TONEAREST rounding mode.\n If the integer value of x is\n greater than long.max, the result is\n indeterminate.\n"
			},
			{
				"kind": "function",
				"line": 90,
				"deco": "FNaNbNiNffZf",
				"char": 11,
				"parameters": [
					{
						"deco": "f",
						"name": "x"
					}
				],
				"name": "sqrt",
				"comment": " Compute square root of x.\n\n      $(TABLE_SV\n      $(TR $(TH x)         $(TH sqrt(x))   $(TH invalid?))\n      $(TR $(TD -0.0)      $(TD -0.0)      $(TD no))\n      $(TR $(TD $(LT)0.0)  $(TD $(NAN))    $(TD yes))\n      $(TR $(TD +$(INFIN)) $(TD +$(INFIN)) $(TD no))\n      )\n"
			},
			{
				"kind": "function",
				"line": 91,
				"deco": "FNaNbNiNfdZd",
				"char": 12,
				"parameters": [
					{
						"deco": "d",
						"name": "x"
					}
				],
				"name": "sqrt",
				"comment": "ditto\n\n Compute square root of x.\n\n      $(TABLE_SV\n      $(TR $(TH x)         $(TH sqrt(x))   $(TH invalid?))\n      $(TR $(TD -0.0)      $(TD -0.0)      $(TD no))\n      $(TR $(TD $(LT)0.0)  $(TD $(NAN))    $(TD yes))\n      $(TR $(TD +$(INFIN)) $(TD +$(INFIN)) $(TD no))\n      )\n"
			},
			{
				"kind": "function",
				"line": 92,
				"deco": "FNaNbNiNfeZe",
				"char": 10,
				"parameters": [
					{
						"deco": "e",
						"name": "x"
					}
				],
				"name": "sqrt",
				"comment": "ditto\n\n Compute square root of x.\n\n      $(TABLE_SV\n      $(TR $(TH x)         $(TH sqrt(x))   $(TH invalid?))\n      $(TR $(TD -0.0)      $(TD -0.0)      $(TD no))\n      $(TR $(TD $(LT)0.0)  $(TD $(NAN))    $(TD yes))\n      $(TR $(TD +$(INFIN)) $(TD +$(INFIN)) $(TD no))\n      )\n"
			},
			{
				"kind": "function",
				"line": 100,
				"deco": "FNaNbNiNfeiZe",
				"char": 6,
				"parameters": [
					{
						"deco": "e",
						"name": "n"
					},
					{
						"deco": "i",
						"name": "exp"
					}
				],
				"name": "ldexp",
				"comment": " Compute n * 2$(SUPERSCRIPT exp)\n References: frexp\n"
			},
			{
				"kind": "function",
				"line": 127,
				"deco": "FNaNbNiNfeZe",
				"char": 6,
				"parameters": [
					{
						"deco": "e",
						"name": "x"
					}
				],
				"name": "fabs",
				"comment": " Returns |x|\n\n      $(TABLE_SV\n      $(TR $(TH x)                 $(TH fabs(x)))\n      $(TR $(TD $(PLUSMN)0.0)      $(TD +0.0) )\n      $(TR $(TD $(PLUSMN)$(INFIN)) $(TD +$(INFIN)) )\n      )\n"
			},
			{
				"kind": "function",
				"line": 137,
				"deco": "FNaNbNiNfeZe",
				"char": 6,
				"parameters": [
					{
						"deco": "e",
						"name": "x"
					}
				],
				"name": "rint",
				"comment": " Rounds x to the nearest integer value, using the current rounding\n mode.\n If the return value is not equal to x, the FE_INEXACT\n exception is raised.\n $(B nearbyint) performs\n the same operation, but does not set the FE_INEXACT exception.\n"
			},
			{
				"kind": "function",
				"line": 144,
				"deco": "FNaNbNiNfeeZe",
				"char": 6,
				"parameters": [
					{
						"deco": "e",
						"name": "x"
					},
					{
						"deco": "e",
						"name": "y"
					}
				],
				"name": "yl2x",
				"comment": " Building block functions, they\n translate to a single x87 instruction.\n"
			}
		],
		"name": "core.math",
		"comment": " Builtin mathematical intrinsics\n\n Source: $(DRUNTIMESRC core/_math.d)\n Macros:\n      TABLE_SV = <table border=1 cellpadding=4 cellspacing=0>\n              <caption>Special Values</caption>\n              $0</table>\n\n      NAN = $(RED NAN)\n      SUP = <span style=\"vertical-align:super;font-size:smaller\">$0</span>\n      POWER = $1<sup>$2</sup>\n      PLUSMN = &plusmn;\n      INFIN = &infin;\n      PLUSMNINF = &plusmn;&infin;\n      LT = &lt;\n      GT = &gt;\n\n Copyright: Copyright Digital Mars 2000 - 2011.\n License:   $(WEB www.boost.org/LICENSE_1_0.txt, Boost License 1.0).\n Authors:   $(WEB digitalmars.com, Walter Bright),\n                        Don Clugston\n"
	},
	{
		"kind": "module",
		"file": "../druntime/src/core/time.d",
		"members": [
			{
				"kind": "struct",
				"line": 165,
				"members": [
					{
						"kind": "function",
						"line": 175,
						"storageClass": [
							"static"
						],
						"deco": "FNaNbNdNiNfZS4core4time8Duration",
						"endchar": 74,
						"char": 45,
						"name": "zero",
						"comment": "        A $(D Duration) of $(D 0). It's shorter than doing something like\n        $(D dur!\"seconds\"(0)) and more explicit than $(D Duration.init).\n",
						"endline": 175
					},
					{
						"kind": "function",
						"line": 180,
						"storageClass": [
							"static"
						],
						"deco": "FNaNbNdNiNfZS4core4time8Duration",
						"endchar": 80,
						"char": 45,
						"name": "max",
						"comment": "        Largest $(D Duration) possible.\n",
						"endline": 180
					},
					{
						"kind": "function",
						"line": 185,
						"storageClass": [
							"static"
						],
						"deco": "FNaNbNdNiNfZS4core4time8Duration",
						"endchar": 80,
						"char": 45,
						"name": "min",
						"comment": "        Most negative $(D Duration) possible.\n",
						"endline": 185
					},
					{
						"kind": "function",
						"line": 210,
						"deco": "xFNaNbNiNfS4core4time8DurationZi",
						"endchar": 5,
						"char": 9,
						"parameters": [
							{
								"deco": "S4core4time8Duration",
								"name": "rhs"
							}
						],
						"name": "opCmp",
						"comment": "        Compares this $(D Duration) with the given $(D Duration).\n\n        Returns:\n            $(TABLE\n            $(TR $(TD this &lt; rhs) $(TD &lt; 0))\n            $(TR $(TD this == rhs) $(TD 0))\n            $(TR $(TD this &gt; rhs) $(TD &gt; 0))\n            )\n",
						"endline": 218
					},
					{
						"kind": "template",
						"line": 284,
						"constraint": "(op == \"+\" || op == \"-\") && (is(_Unqual!D == Duration) || is(_Unqual!D == TickDuration))",
						"members": [
							{
								"kind": "function",
								"line": 284,
								"endchar": 5,
								"char": 14,
								"type": "const nothrow @nogc Duration(D rhs)",
								"parameters": [
									{
										"type": "D",
										"name": "rhs"
									}
								],
								"name": "opBinary",
								"endline": 293
							}
						],
						"char": 14,
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "op"
							},
							{
								"kind": "type",
								"name": "D"
							}
						],
						"comment": "        Adds or subtracts two durations.\n\n        The legal types of arithmetic for $(D Duration) using this operator are\n\n        $(TABLE\n        $(TR $(TD Duration) $(TD +) $(TD Duration) $(TD -->) $(TD Duration))\n        $(TR $(TD Duration) $(TD -) $(TD Duration) $(TD -->) $(TD Duration))\n        $(TR $(TD Duration) $(TD +) $(TD TickDuration) $(TD -->) $(TD Duration))\n        $(TR $(TD Duration) $(TD -) $(TD TickDuration) $(TD -->) $(TD Duration))\n        )\n\n        Params:\n            rhs = The duration to add to or subtract from this $(D Duration).\n",
						"name": "opBinary"
					},
					{
						"kind": "template",
						"line": 362,
						"constraint": "(op == \"+\" || op == \"-\") && is(_Unqual!D == TickDuration)",
						"members": [
							{
								"kind": "function",
								"line": 362,
								"endchar": 5,
								"char": 14,
								"type": "const nothrow @nogc Duration(D lhs)",
								"parameters": [
									{
										"type": "D",
										"name": "lhs"
									}
								],
								"name": "opBinaryRight",
								"endline": 367
							}
						],
						"char": 14,
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "op"
							},
							{
								"kind": "type",
								"name": "D"
							}
						],
						"comment": "        Adds or subtracts two durations.\n\n        The legal types of arithmetic for $(D Duration) using this operator are\n\n        $(TABLE\n        $(TR $(TD TickDuration) $(TD +) $(TD Duration) $(TD -->) $(TD Duration))\n        $(TR $(TD TickDuration) $(TD -) $(TD Duration) $(TD -->) $(TD Duration))\n        )\n\n        Params:\n            lhs = The $(D TickDuration) to add to this $(D Duration) or to\n                  subtract this $(D Duration) from.\n",
						"name": "opBinaryRight"
					},
					{
						"kind": "template",
						"line": 415,
						"constraint": "(op == \"+\" || op == \"-\") && (is(_Unqual!D == Duration) || is(_Unqual!D == TickDuration))",
						"members": [
							{
								"kind": "function",
								"line": 415,
								"endchar": 5,
								"char": 18,
								"type": "nothrow @nogc ref Duration(in D rhs)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "D",
										"name": "rhs"
									}
								],
								"name": "opOpAssign",
								"endline": 426
							}
						],
						"char": 18,
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "op"
							},
							{
								"kind": "type",
								"name": "D"
							}
						],
						"comment": "        Adds or subtracts two durations as well as assigning the result to this\n        $(D Duration).\n\n        The legal types of arithmetic for $(D Duration) using this operator are\n\n        $(TABLE\n        $(TR $(TD Duration) $(TD +) $(TD Duration) $(TD -->) $(TD Duration))\n        $(TR $(TD Duration) $(TD -) $(TD Duration) $(TD -->) $(TD Duration))\n        $(TR $(TD Duration) $(TD +) $(TD TickDuration) $(TD -->) $(TD Duration))\n        $(TR $(TD Duration) $(TD -) $(TD TickDuration) $(TD -->) $(TD Duration))\n        )\n\n        Params:\n            rhs = The duration to add to or subtract from this $(D Duration).\n",
						"name": "opOpAssign"
					},
					{
						"kind": "template",
						"line": 516,
						"constraint": "op == \"*\"",
						"members": [
							{
								"kind": "function",
								"line": 516,
								"endchar": 5,
								"char": 14,
								"type": "const nothrow @nogc Duration(long value)",
								"parameters": [
									{
										"deco": "l",
										"name": "value"
									}
								],
								"name": "opBinary",
								"endline": 520
							}
						],
						"char": 14,
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "op"
							}
						],
						"comment": "        The legal types of arithmetic for $(D Duration) using this operator\n        overload are\n\n        $(TABLE\n        $(TR $(TD Duration) $(TD *) $(TD long) $(TD -->) $(TD Duration))\n        )\n\n        Params:\n            value = The value to multiply this $(D Duration) by.\n",
						"name": "opBinary"
					},
					{
						"kind": "template",
						"line": 555,
						"constraint": "op == \"*\"",
						"members": [
							{
								"kind": "function",
								"line": 555,
								"endchar": 5,
								"char": 18,
								"type": "nothrow @nogc ref Duration(long value)",
								"parameters": [
									{
										"deco": "l",
										"name": "value"
									}
								],
								"name": "opOpAssign",
								"endline": 561
							}
						],
						"char": 18,
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "op"
							}
						],
						"comment": "        The legal types of arithmetic for $(D Duration) using this operator\n        overload are\n\n        $(TABLE\n        $(TR $(TD Duration) $(TD *) $(TD long) $(TD -->) $(TD Duration))\n        )\n\n        Params:\n            value = The value to multiply this $(D Duration) by.\n",
						"name": "opOpAssign"
					},
					{
						"kind": "template",
						"line": 610,
						"constraint": "op == \"/\"",
						"members": [
							{
								"kind": "function",
								"line": 610,
								"endchar": 5,
								"char": 14,
								"type": "const Duration(long value)",
								"parameters": [
									{
										"deco": "l",
										"name": "value"
									}
								],
								"name": "opBinary",
								"endline": 617
							}
						],
						"char": 14,
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "op"
							}
						],
						"comment": "        The legal types of arithmetic for $(D Duration) using this operator\n        overload are\n\n        $(TABLE\n        $(TR $(TD Duration) $(TD /) $(TD long) $(TD -->) $(TD Duration))\n        )\n\n        Params:\n            value = The value to divide from this duration.\n\n        Throws:\n            $(D TimeException) if an attempt to divide by $(D 0) is made.\n",
						"name": "opBinary"
					},
					{
						"kind": "template",
						"line": 661,
						"constraint": "op == \"/\"",
						"members": [
							{
								"kind": "function",
								"line": 661,
								"endchar": 5,
								"char": 18,
								"type": "ref Duration(long value)",
								"parameters": [
									{
										"deco": "l",
										"name": "value"
									}
								],
								"name": "opOpAssign",
								"endline": 670
							}
						],
						"char": 18,
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "op"
							}
						],
						"comment": "        The legal types of arithmetic for $(D Duration) using this operator\n        overload are\n\n        $(TABLE\n        $(TR $(TD Duration) $(TD /) $(TD long) $(TD -->) $(TD Duration))\n        )\n\n        Params:\n            value = The value to divide from this $(D Duration).\n\n        Throws:\n            $(D TimeException) if an attempt to divide by $(D 0) is made.\n",
						"name": "opOpAssign"
					},
					{
						"kind": "template",
						"line": 718,
						"constraint": "op == \"*\"",
						"members": [
							{
								"kind": "function",
								"line": 718,
								"endchar": 5,
								"char": 14,
								"type": "const nothrow @nogc Duration(long value)",
								"parameters": [
									{
										"deco": "l",
										"name": "value"
									}
								],
								"name": "opBinaryRight",
								"endline": 722
							}
						],
						"char": 14,
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "op"
							}
						],
						"comment": "        Multiplies an integral value and a $(D Duration).\n\n        The legal types of arithmetic for $(D Duration) using this operator\n        overload are\n\n        $(TABLE\n        $(TR $(TD long) $(TD *) $(TD Duration) $(TD -->) $(TD Duration))\n        )\n\n        Params:\n            value = The number of units to multiply this $(D Duration) by.\n",
						"name": "opBinaryRight"
					},
					{
						"kind": "template",
						"line": 749,
						"constraint": "op == \"-\"",
						"members": [
							{
								"kind": "function",
								"line": 749,
								"endchar": 5,
								"char": 14,
								"type": "const nothrow @nogc Duration()",
								"name": "opUnary",
								"endline": 753
							}
						],
						"char": 14,
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "op"
							}
						],
						"comment": "        Returns the negation of this $(D Duration).\n",
						"name": "opUnary"
					},
					{
						"kind": "template",
						"line": 775,
						"constraint": "is(_Unqual!T == TickDuration)",
						"members": [
							{
								"kind": "function",
								"line": 775,
								"endchar": 5,
								"char": 18,
								"type": "const nothrow @nogc TickDuration()",
								"name": "opCast",
								"endline": 779
							}
						],
						"char": 18,
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"comment": "        Returns a $(LREF TickDuration) with the same number of hnsecs as this\n        $(D Duration).\n        Note that the conventional way to convert between $(D Duration) and\n        $(D TickDuration) is using $(XREF conv, to), e.g.:\n        $(D duration.to!TickDuration())\n",
						"name": "opCast"
					},
					{
						"kind": "template",
						"line": 852,
						"constraint": "allAreAcceptedUnits!(\"weeks\", \"days\", \"hours\", \"minutes\", \"seconds\", \"msecs\", \"usecs\", \"hnsecs\", \"nsecs\")(units) && unitsAreInDescendingOrder(units)",
						"members": [
							{
								"kind": "template",
								"line": 858,
								"constraint": "units.length != 0 && args.length == units.length && allAreMutableIntegralTypes!Args",
								"members": [
									{
										"kind": "function",
										"line": 858,
										"endchar": 9,
										"char": 14,
										"type": "const nothrow @nogc void(out Args args)",
										"parameters": [
											{
												"storageClass": [
													"out"
												],
												"type": "Args",
												"name": "args"
											}
										],
										"name": "split",
										"endline": 869
									}
								],
								"char": 14,
								"parameters": [
									{
										"kind": "tuple",
										"name": "Args"
									}
								],
								"comment": " Ditto\n",
								"name": "split"
							},
							{
								"kind": "function",
								"line": 872,
								"storageClass": [
									"auto"
								],
								"endchar": 9,
								"char": 14,
								"type": "const nothrow @nogc ()",
								"name": "split",
								"comment": " Ditto\n",
								"endline": 914
							}
						],
						"char": 5,
						"parameters": [
							{
								"kind": "tuple",
								"name": "units"
							}
						],
						"comment": "        Splits out the Duration into the given units.\n\n        split takes the list of time units to split out as template arguments.\n        The time unit strings must be given in decreasing order. How it returns\n        the values for those units depends on the overload used.\n\n        The overload which accepts function arguments takes integral types in\n        the order that the time unit strings were given, and those integers are\n        passed by $(D ref). split assigns the values for the units to each\n        corresponding integer. Any integral type may be used, but no attempt is\n        made to prevent integer overflow, so don't use small integral types in\n        circumstances where the values for those units aren't likely to fit in\n        an integral type that small.\n\n        The overload with no arguments returns the values for the units in a\n        struct with members whose names are the same as the given time unit\n        strings. The members are all $(D long)s. This overload will also work\n        with no time strings being given, in which case $(I all) of the time\n        units from weeks through hnsecs will be provided (but no nsecs, since it\n        would always be $(D 0)).\n\n        For both overloads, the entire value of the Duration is split among the\n        units (rather than splitting the Duration across all units and then only\n        providing the values for the requested units), so if only one unit is\n        given, the result is equivalent to $(LREF total).\n\n        $(D \"nsecs\") is accepted by split, but $(D \"years\") and $(D \"months\")\n        are not.\n\n        For negative durations, all of the split values will be negative.\nExample:\n\n---\n{\n    auto d = dur!\"days\"(12) + dur!\"minutes\"(7) + dur!\"usecs\"(501223);\n    long days;\n    int seconds;\n    short msecs;\n    d.split!(\"days\", \"seconds\", \"msecs\")(days, seconds, msecs);\n    assert(days == 12);\n    assert(seconds == 7 * 60);\n    assert(msecs == 501);\n\n    auto splitStruct = d.split!(\"days\", \"seconds\", \"msecs\")();\n    assert(splitStruct.days == 12);\n    assert(splitStruct.seconds == 7 * 60);\n    assert(splitStruct.msecs == 501);\n\n    auto fullSplitStruct = d.split();\n    assert(fullSplitStruct.weeks == 1);\n    assert(fullSplitStruct.days == 5);\n    assert(fullSplitStruct.hours == 0);\n    assert(fullSplitStruct.minutes == 7);\n    assert(fullSplitStruct.seconds == 0);\n    assert(fullSplitStruct.msecs == 501);\n    assert(fullSplitStruct.usecs == 223);\n    assert(fullSplitStruct.hnsecs == 0);\n\n    assert(d.split!\"minutes\"().minutes == d.total!\"minutes\");\n}\n\n{\n    auto d = dur!\"days\"(12);\n    assert(d.split!\"weeks\"().weeks == 1);\n    assert(d.split!\"days\"().days == 12);\n\n    assert(d.split().weeks == 1);\n    assert(d.split().days == 5);\n}\n\n{\n    auto d = dur!\"days\"(7) + dur!\"hnsecs\"(42);\n    assert(d.split!(\"seconds\", \"nsecs\")().nsecs == 4200);\n}\n\n{\n    auto d = dur!\"days\"(-7) + dur!\"hours\"(-9);\n    auto result = d.split!(\"days\", \"hours\")();\n    assert(result.days == -7);\n    assert(result.hours == -9);\n}\n\n\n---\n",
						"name": "split"
					},
					{
						"kind": "template",
						"line": 1158,
						"constraint": "units == \"weeks\" || units == \"days\" || units == \"hours\" || units == \"minutes\" || units == \"seconds\"",
						"members": [
							{
								"kind": "function",
								"line": 1158,
								"endchar": 5,
								"char": 10,
								"type": "const nothrow @nogc long()",
								"name": "get",
								"endline": 1172
							}
						],
						"char": 10,
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "units"
							}
						],
						"comment": "        $(RED Deprecated. Please use $(LREF split) instead. Too frequently,\n              get or one of the individual unit getters is used when the\n              function that gave the desired behavior was $(LREF total). This\n              should make it more explicit and help prevent bugs. This function\n              will be removed in June 2015.)\n\n        Returns the number of the given units in this $(D Duration)\n        (minus the larger units).\n\n        $(D d.get!\"minutes\"()) is equivalent to $(D d.split().minutes).\nExample:\n\n---\nassert(dur!\"weeks\"(12).get!\"weeks\" == 12);\nassert(dur!\"weeks\"(12).get!\"days\" == 0);\n\nassert(dur!\"days\"(13).get!\"weeks\" == 1);\nassert(dur!\"days\"(13).get!\"days\" == 6);\n\nassert(dur!\"hours\"(49).get!\"days\" == 2);\nassert(dur!\"hours\"(49).get!\"hours\" == 1);\n\n\n---\n",
						"name": "get"
					},
					{
						"kind": "function",
						"line": 1214,
						"storageClass": [
							"deprecated"
						],
						"deco": "xFNaNbNdNiNfZl",
						"endchar": 5,
						"char": 20,
						"name": "weeks",
						"comment": "        $(RED Deprecated. Please use $(LREF split) instead. Too frequently,\n              $(LREF get) or one of the individual unit getters is used when the\n              function that gave the desired behavior was $(LREF total). This\n              should make it more explicit and help prevent bugs. This function\n              will be removed in June 2015.)\n\n        Returns the number of weeks in this $(D Duration)\n        (minus the larger units).\nExample:\n\n---\nassert(dur!\"weeks\"(12).weeks == 12);\nassert(dur!\"days\"(13).weeks == 1);\n\n\n---\n",
						"endline": 1217
					},
					{
						"kind": "function",
						"line": 1247,
						"storageClass": [
							"deprecated"
						],
						"deco": "xFNaNbNdNiNfZl",
						"endchar": 5,
						"char": 20,
						"name": "days",
						"comment": "        $(RED Deprecated. Please use $(LREF split) instead. Too frequently,\n              $(LREF get) or one of the individual unit getters is used when the\n              function that gave the desired behavior was $(LREF total). This\n              should make it more explicit and help prevent bugs. This function\n              will be removed in June 2015.)\n\n        Returns the number of days in this $(D Duration)\n        (minus the larger units).\nExample:\n\n---\nassert(dur!\"weeks\"(12).days == 0);\nassert(dur!\"days\"(13).days == 6);\nassert(dur!\"hours\"(49).days == 2);\n\n\n---\n",
						"endline": 1250
					},
					{
						"kind": "function",
						"line": 1282,
						"storageClass": [
							"deprecated"
						],
						"deco": "xFNaNbNdNiNfZl",
						"endchar": 5,
						"char": 20,
						"name": "hours",
						"comment": "        $(RED Deprecated. Please use $(LREF split) instead. Too frequently,\n              $(LREF get) or one of the individual unit getters is used when the\n              function that gave the desired behavior was $(LREF total). This\n              should make it more explicit and help prevent bugs. This function\n              will be removed in June 2015.)\n\n        Returns the number of hours in this $(D Duration)\n        (minus the larger units).\nExample:\n\n---\nassert(dur!\"days\"(8).hours == 0);\nassert(dur!\"hours\"(49).hours == 1);\nassert(dur!\"minutes\"(121).hours == 2);\n\n\n---\n",
						"endline": 1285
					},
					{
						"kind": "function",
						"line": 1317,
						"storageClass": [
							"deprecated"
						],
						"deco": "xFNaNbNdNiNfZl",
						"endchar": 5,
						"char": 20,
						"name": "minutes",
						"comment": "        $(RED Deprecated. Please use $(LREF split) instead. Too frequently,\n              $(LREF get) or one of the individual unit getters is used when the\n              function that gave the desired behavior was $(LREF total). This\n              should make it more explicit and help prevent bugs. This function\n              will be removed in June 2015.)\n\n        Returns the number of minutes in this $(D Duration)\n        (minus the larger units).\nExample:\n\n---\nassert(dur!\"hours\"(47).minutes == 0);\nassert(dur!\"minutes\"(127).minutes == 7);\nassert(dur!\"seconds\"(121).minutes == 2);\n\n\n---\n",
						"endline": 1320
					},
					{
						"kind": "function",
						"line": 1352,
						"storageClass": [
							"deprecated"
						],
						"deco": "xFNaNbNdNiNfZl",
						"endchar": 5,
						"char": 20,
						"name": "seconds",
						"comment": "        $(RED Deprecated. Please use $(LREF split) instead. Too frequently,\n              $(LREF get) or one of the individual unit getters is used when the\n              function that gave the desired behavior was $(LREF total). This\n              should make it more explicit and help prevent bugs. This function\n              will be removed in June 2015.)\n\n        Returns the number of seconds in this $(D Duration)\n        (minus the larger units).\nExample:\n\n---\nassert(dur!\"minutes\"(47).seconds == 0);\nassert(dur!\"seconds\"(127).seconds == 7);\nassert(dur!\"msecs\"(1217).seconds == 1);\n\n\n---\n",
						"endline": 1355
					},
					{
						"kind": "function",
						"line": 1386,
						"storageClass": [
							"deprecated"
						],
						"deco": "xFNaNbNdNfZS4core4time7FracSec",
						"endchar": 5,
						"char": 23,
						"name": "fracSec",
						"comment": "        $(RED Deprecated. Please use $(LREF split) instead. Too frequently,\n              $(LREF get) or one of the individual unit getters is used when the\n              function that gave the desired behavior was $(LREF total). This\n              should make it more explicit and help prevent bugs. This function\n              will be removed in June 2015.)\n\n        Returns the fractional seconds past the second in this $(D Duration).\nExample:\n\n---\nassert(dur!\"msecs\"(1000).fracSec == FracSec.from!\"msecs\"(0));\nassert(dur!\"msecs\"(1217).fracSec == FracSec.from!\"msecs\"(217));\nassert(dur!\"usecs\"(43).fracSec == FracSec.from!\"usecs\"(43));\nassert(dur!\"hnsecs\"(50_007).fracSec == FracSec.from!\"hnsecs\"(50_007));\nassert(dur!\"nsecs\"(62_127).fracSec == FracSec.from!\"nsecs\"(62_100));\n\nassert(dur!\"msecs\"(-1000).fracSec == FracSec.from!\"msecs\"(-0));\nassert(dur!\"msecs\"(-1217).fracSec == FracSec.from!\"msecs\"(-217));\nassert(dur!\"usecs\"(-43).fracSec == FracSec.from!\"usecs\"(-43));\nassert(dur!\"hnsecs\"(-50_007).fracSec == FracSec.from!\"hnsecs\"(-50_007));\nassert(dur!\"nsecs\"(-62_127).fracSec == FracSec.from!\"nsecs\"(-62_100));\n\n\n---\n",
						"endline": 1396
					},
					{
						"kind": "template",
						"line": 1437,
						"constraint": "units == \"weeks\" || units == \"days\" || units == \"hours\" || units == \"minutes\" || units == \"seconds\" || units == \"msecs\" || units == \"usecs\" || units == \"hnsecs\" || units == \"nsecs\"",
						"members": [
							{
								"kind": "function",
								"line": 1437,
								"endchar": 5,
								"char": 20,
								"type": "const nothrow @nogc @property long()",
								"name": "total",
								"endline": 1452
							}
						],
						"char": 20,
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "units"
							}
						],
						"comment": "        Returns the total number of the given units in this $(D Duration).\n        So, unlike $(D split), it does not strip out the larger units.\nExample:\n\n---\nassert(dur!\"weeks\"(12).total!\"weeks\" == 12);\nassert(dur!\"weeks\"(12).total!\"days\" == 84);\n\nassert(dur!\"days\"(13).total!\"weeks\" == 1);\nassert(dur!\"days\"(13).total!\"days\" == 13);\n\nassert(dur!\"hours\"(49).total!\"days\" == 2);\nassert(dur!\"hours\"(49).total!\"hours\" == 49);\n\nassert(dur!\"nsecs\"(2007).total!\"hnsecs\" == 20);\nassert(dur!\"nsecs\"(2007).total!\"nsecs\" == 2000);\n\n\n---\n",
						"name": "total"
					},
					{
						"kind": "function",
						"line": 1507,
						"deco": "xFNaNbNfZAya",
						"endchar": 5,
						"char": 12,
						"name": "toString",
						"comment": "        Converts this $(D Duration) to a $(D string).\n",
						"endline": 1510
					},
					{
						"kind": "function",
						"line": 1565,
						"deco": "xFNaNbNdNiNfZb",
						"endchar": 5,
						"char": 20,
						"name": "isNegative",
						"comment": "        Returns whether this $(D Duration) is negative.\n",
						"endline": 1568
					}
				],
				"char": 1,
				"name": "Duration",
				"comment": "    Represents a duration of time of weeks or less (kept internally as hnsecs).\n    (e.g. 22 days or 700 seconds).\n\n    It is used when representing a duration of time - such as how long to\n    sleep with $(CXREF Thread, sleep).\n\n    In std.datetime, it is also used as the result of various arithmetic\n    operations on time points.\n\n    Use the $(LREF dur) function or one of its non-generic aliases to create\n    $(D Duration)s.\n\n    It's not possible to create a Duration of months or years, because the\n    variable number of days in a month or year makes it impossible to convert\n    between months or years and smaller units without a specific date. So,\n    nothing uses $(D Duration)s when dealing with months or years. Rather,\n    functions specific to months and years are defined. For instance,\n    $(XREF datetime, Date) has $(D add!\"years\") and $(D add!\"months\") for adding\n    years and months rather than creating a Duration of years or months and\n    adding that to a $(XREF datetime, Date). But Duration is used when dealing\n    with weeks or smaller.\n\n    Examples:\n--------------------\nassert(dur!\"days\"(12) == dur!\"hnsecs\"(10_368_000_000_000L));\nassert(dur!\"hnsecs\"(27) == dur!\"hnsecs\"(27));\nassert(std.datetime.Date(2010, 9, 7) + dur!\"days\"(5) ==\n       std.datetime.Date(2010, 9, 12));\n\nassert(days(-12) == dur!\"hnsecs\"(-10_368_000_000_000L));\nassert(hnsecs(-27) == dur!\"hnsecs\"(-27));\nassert(std.datetime.Date(2010, 9, 7) - std.datetime.Date(2010, 10, 3) ==\n       days(-26));\n--------------------\nExample:\n\n---\nimport core.time;\n\n// using the dur template\nauto numDays = dur!\"days\"(12);\n\n// using the days function\nnumDays = days(12);\n\n// alternatively using UFCS syntax\nnumDays = 12.days;\n\nauto myTime = 100.msecs + 20_000.usecs + 30_000.hnsecs;\nassert(myTime == 123.msecs);\n\n---\n"
			},
			{
				"kind": "template",
				"line": 1683,
				"constraint": "is(_Unqual!D == TickDuration) && (units == \"seconds\" || units == \"msecs\" || units == \"usecs\" || units == \"hnsecs\" || units == \"nsecs\") && (__traits(isIntegral, T) && T.sizeof >= 4 || __traits(isFloating, T))",
				"members": [
					{
						"kind": "function",
						"line": 1683,
						"endchar": 1,
						"char": 3,
						"type": "pure nothrow @nogc @safe T(D td)",
						"parameters": [
							{
								"type": "D",
								"name": "td"
							}
						],
						"name": "to",
						"endline": 1711
					}
				],
				"char": 3,
				"parameters": [
					{
						"kind": "value",
						"deco": "Aya",
						"name": "units"
					},
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "type",
						"name": "D"
					}
				],
				"comment": "    Converts a $(D TickDuration) to the given units as either an integral\n    value or a floating point value.\n\n    Params:\n        units = The units to convert to. Accepts $(D \"seconds\") and smaller\n                only.\n        T     = The type to convert to (either an integral type or a\n                floating point type).\n\n        td    = The TickDuration to convert\nExample:\n\n---\nauto t = TickDuration.from!\"seconds\"(1000);\n\nlong tl = to!(\"seconds\",long)(t);\nassert(tl == 1000);\n\ndouble td = to!(\"seconds\",double)(t);\nassert(_abs(td - 1000) < 0.001);\n\n---\n",
				"name": "to"
			},
			{
				"kind": "template",
				"line": 1774,
				"constraint": "units == \"weeks\" || units == \"days\" || units == \"hours\" || units == \"minutes\" || units == \"seconds\" || units == \"msecs\" || units == \"usecs\" || units == \"hnsecs\" || units == \"nsecs\"",
				"members": [
					{
						"kind": "function",
						"line": 1774,
						"endchar": 1,
						"char": 10,
						"type": "pure nothrow @nogc @safe Duration(long length)",
						"parameters": [
							{
								"deco": "l",
								"name": "length"
							}
						],
						"name": "dur",
						"endline": 1786
					}
				],
				"char": 10,
				"parameters": [
					{
						"kind": "value",
						"deco": "Aya",
						"name": "units"
					}
				],
				"comment": "    These allow you to construct a $(D Duration) from the given time units\n    with the given length.\n\n    You can either use the generic function $(D dur) and give it the units as\n    a $(D string) or use the named aliases.\n\n    The possible values for units are $(D \"weeks\"), $(D \"days\"), $(D \"hours\"),\n    $(D \"minutes\"), $(D \"seconds\"), $(D \"msecs\") (milliseconds), $(D \"usecs\"),\n    (microseconds), $(D \"hnsecs\") (hecto-nanoseconds, i.e. 100 ns), and\n    $(D \"nsecs\").\n\n    Params:\n        units  = The time units of the $(D Duration) (e.g. $(D \"days\")).\n        length = The number of units in the $(D Duration).\nExample:\n\n---\n// Generic\nassert(dur!\"weeks\"(142).total!\"weeks\" == 142);\nassert(dur!\"days\"(142).total!\"days\" == 142);\nassert(dur!\"hours\"(142).total!\"hours\" == 142);\nassert(dur!\"minutes\"(142).total!\"minutes\" == 142);\nassert(dur!\"seconds\"(142).total!\"seconds\" == 142);\nassert(dur!\"msecs\"(142).total!\"msecs\" == 142);\nassert(dur!\"usecs\"(142).total!\"usecs\" == 142);\nassert(dur!\"hnsecs\"(142).total!\"hnsecs\" == 142);\nassert(dur!\"nsecs\"(142).total!\"nsecs\" == 100);\n\n// Non-generic\nassert(weeks(142).total!\"weeks\" == 142);\nassert(days(142).total!\"days\" == 142);\nassert(hours(142).total!\"hours\" == 142);\nassert(minutes(142).total!\"minutes\" == 142);\nassert(seconds(142).total!\"seconds\" == 142);\nassert(msecs(142).total!\"msecs\" == 142);\nassert(usecs(142).total!\"usecs\" == 142);\nassert(hnsecs(142).total!\"hnsecs\" == 142);\nassert(nsecs(142).total!\"nsecs\" == 100);\n\n---\n",
				"name": "dur"
			},
			{
				"kind": "alias",
				"line": 1788,
				"char": 1,
				"name": "weeks",
				"comment": "Ditto\n"
			},
			{
				"kind": "alias",
				"line": 1789,
				"char": 1,
				"name": "days",
				"comment": "Ditto\n"
			},
			{
				"kind": "alias",
				"line": 1790,
				"char": 1,
				"name": "hours",
				"comment": "Ditto\n"
			},
			{
				"kind": "alias",
				"line": 1791,
				"char": 1,
				"name": "minutes",
				"comment": "Ditto\n"
			},
			{
				"kind": "alias",
				"line": 1792,
				"char": 1,
				"name": "seconds",
				"comment": "Ditto\n"
			},
			{
				"kind": "alias",
				"line": 1793,
				"char": 1,
				"name": "msecs",
				"comment": "Ditto\n"
			},
			{
				"kind": "alias",
				"line": 1794,
				"char": 1,
				"name": "usecs",
				"comment": "Ditto\n"
			},
			{
				"kind": "alias",
				"line": 1795,
				"char": 1,
				"name": "hnsecs",
				"comment": "Ditto\n"
			},
			{
				"kind": "alias",
				"line": 1796,
				"char": 1,
				"name": "nsecs",
				"comment": "Ditto\n"
			},
			{
				"kind": "struct",
				"line": 1889,
				"members": [
					{
						"kind": "function",
						"line": 1910,
						"storageClass": [
							"static"
						],
						"deco": "FNbNdNiNeZS4core4time8MonoTime",
						"endchar": 5,
						"char": 31,
						"name": "currTime",
						"comment": "        The current time of the system's monotonic clock. This has no relation\n        to the wall clock time, as the wall clock time can be adjusted (e.g.\n        by NTP), whereas the monotonic clock always moves forward. The source\n        of the monotonic time is system-specific.\n\n        On Windows, $(D QueryPerformanceCounter) is used. On Mac OS X,\n        $(D mach_absolute_time) is used, while on other POSIX systems,\n        $(D clock_gettime) is used.\n\n        $(RED Warning): On some systems, the monotonic clock may stop counting\n                        when the computer goes to sleep or hibernates. So, the\n                        monotonic clock may indicate less time than has actually\n                        passed if that occurs. This is known to happen on\n                        Mac OS X. It has not been tested whether it occurs on\n                        either Windows or on Linux.\n",
						"endline": 1937
					},
					{
						"kind": "function",
						"line": 1946,
						"storageClass": [
							"static"
						],
						"deco": "FNaNbNdNiNfZS4core4time8MonoTime",
						"endchar": 43,
						"char": 14,
						"name": "zero",
						"comment": "        A $(D MonoTime) of $(D 0) ticks. It's provided to be consistent with\n        $(D Duration.zero), and it's more explicit than $(D MonoTime.init).\n",
						"endline": 1946
					},
					{
						"kind": "function",
						"line": 1951,
						"storageClass": [
							"static"
						],
						"deco": "FNaNbNdNiNfZS4core4time8MonoTime",
						"endchar": 49,
						"char": 14,
						"name": "max",
						"comment": "        Largest $(D MonoTime) possible.\n",
						"endline": 1951
					},
					{
						"kind": "function",
						"line": 1956,
						"storageClass": [
							"static"
						],
						"deco": "FNaNbNdNiNfZS4core4time8MonoTime",
						"endchar": 49,
						"char": 14,
						"name": "min",
						"comment": "        Most negative $(D MonoTime) possible.\n",
						"endline": 1956
					},
					{
						"kind": "function",
						"line": 1980,
						"deco": "xFNaNbNiNfS4core4time8MonoTimeZi",
						"endchar": 5,
						"char": 9,
						"parameters": [
							{
								"deco": "S4core4time8MonoTime",
								"name": "rhs"
							}
						],
						"name": "opCmp",
						"comment": "        Compares this MonoTime with the given MonoTime.\n\n        Returns:\n            $(BOOKTABLE,\n                $(TR $(TD this &lt; rhs) $(TD &lt; 0))\n                $(TR $(TD this == rhs) $(TD 0))\n                $(TR $(TD this &gt; rhs) $(TD &gt; 0))\n            )\n",
						"endline": 1985
					},
					{
						"kind": "template",
						"line": 2069,
						"constraint": "op == \"-\"",
						"members": [
							{
								"kind": "function",
								"line": 2069,
								"endchar": 5,
								"char": 14,
								"type": "const pure nothrow @nogc Duration(MonoTime rhs)",
								"parameters": [
									{
										"type": "MonoTime",
										"name": "rhs"
									}
								],
								"name": "opBinary",
								"endline": 2074
							}
						],
						"char": 14,
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "op"
							}
						],
						"comment": "        Subtracting two MonoTimes results in a $(LREF Duration) representing the\n        amount of time which elapsed between them.\n\n        The primary way that programs should time how long something takes is to\n        do\n--------------------\nMonoTime before = MonoTime.currTime;\n// do stuff\nMonoTime after = MonoTime.currTime;\n\n// How long it took.\nDuration timeElapsed = after - before;\n--------------------\n        or to use a wrapper (such as a stop watch type) which does that.\n\n        $(RED Warning):\n            Because $(LREF Duration) is in hnsecs, whereas MonoTime is in system\n            ticks, it's usually the case that this assertion will fail\n--------------------\nauto before = MonoTime.currTime;\n// do stuff\nauto after = MonoTime.currTime;\nauto timeElapsed = after - before;\nassert(before + timeElapsed == after).\n--------------------\n\n            This is generally fine, and by its very nature, converting from\n            system ticks to any type of seconds (hnsecs, nsecs, etc.) will\n            introduce rounding errors, but if code needs to avoid any of the\n            small rounding errors introduced by conversion, then it needs to use\n            MonoTime's $(D ticks) property and keep all calculations in ticks\n            rather than using $(LREF Duration).\n",
						"name": "opBinary"
					},
					{
						"kind": "template",
						"line": 2125,
						"constraint": "op == \"+\" || op == \"-\"",
						"members": [
							{
								"kind": "function",
								"line": 2125,
								"endchar": 5,
								"char": 14,
								"type": "const pure nothrow @nogc MonoTime(Duration rhs)",
								"parameters": [
									{
										"type": "Duration",
										"name": "rhs"
									}
								],
								"name": "opBinary",
								"endline": 2130
							}
						],
						"char": 14,
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "op"
							}
						],
						"comment": "        Adding or subtracting a $(LREF Duration) to/from a MonoTime results in\n        a MonoTime which is adjusted by that amount.\n",
						"name": "opBinary"
					},
					{
						"kind": "template",
						"line": 2171,
						"constraint": "op == \"+\" || op == \"-\"",
						"members": [
							{
								"kind": "function",
								"line": 2171,
								"endchar": 5,
								"char": 18,
								"type": "pure nothrow @nogc ref MonoTime(Duration rhs)",
								"parameters": [
									{
										"type": "Duration",
										"name": "rhs"
									}
								],
								"name": "opOpAssign",
								"endline": 2177
							}
						],
						"char": 18,
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "op"
							}
						],
						"comment": " Ditto\n",
						"name": "opOpAssign"
					},
					{
						"kind": "function",
						"line": 2225,
						"deco": "xFNaNbNdNiNfZl",
						"endchar": 5,
						"char": 20,
						"name": "ticks",
						"comment": "        The number of ticks in the monotonic time.\n\n        Most programs should not use this directly, but it's exposed for those\n        few programs that need it.\n\n        The main reasons that a program might need to use ticks directly is if\n        the system clock has higher precision than hnsecs, and the program needs\n        that higher precision, or if the program needs to avoid the rounding\n        errors caused by converting to hnsecs.\n",
						"endline": 2228
					},
					{
						"kind": "function",
						"line": 2244,
						"storageClass": [
							"static"
						],
						"deco": "FNaNbNdNiNfZl",
						"endchar": 5,
						"char": 27,
						"name": "ticksPerSecond",
						"comment": "        The number of ticks that MonoTime has per second - i.e. the resolution\n        or frequency of the system's monotonic clock.\n\n        e.g. if the system clock had a resolution of microseconds, then\n        ticksPerSecond would be $(D 1_000_000).\n",
						"endline": 2247
					},
					{
						"kind": "function",
						"line": 2256,
						"deco": "xFNaNbNfZAya",
						"endchar": 5,
						"char": 12,
						"name": "toString",
						"comment": "\n",
						"endline": 2259
					}
				],
				"char": 1,
				"name": "MonoTime",
				"comment": "    Represents a timestamp of the system's monotonic clock.\n\n    A monotonic clock is one which always goes forward and never moves\n    backwards, unlike the system's wall clock time (as represented by\n    $(XREF datetime, SysTime)). The system's wall clock time can be adjusted\n    by the user or by the system itself via services such as NTP, so it is\n    unreliable to use the wall clock time for timing. Timers which use the wall\n    clock time could easily end up never going off due changes made to the wall\n    clock time or otherwise waiting for a different period of time than that\n    specified by the programmer. However, because the monotonic clock always\n    increases at a fixed rate and is not affected by adjustments to the wall\n    clock time, it is ideal for use with timers or anything which requires high\n    precision timing.\n\n    So, MonoTime should be used for anything involving timers and timing,\n    whereas $(XREF datetime, SysTime) should be used when the wall clock time\n    is required.\n\n    The monotonic clock has no relation to wall clock time. Rather, it holds\n    its time as the number of ticks of the clock which have occurred since the\n    clock started (typically when the system booted up). So, to determine how\n    much time has passed between two points in time, one monotonic time is\n    subtracted from the other to determine the number of ticks which occurred\n    between the two points of time, and those ticks are divided by the number of\n    ticks that occur every second (as represented by MonoTime.ticksPerSecond)\n    to get a meaningful duration of time. Normally, MonoTime does these\n    calculations for the programmer, but the $(D ticks) and $(D ticksPerSecond)\n    properties are provided for those who require direct access to the system\n    ticks. However, the normal way that MonoTime would be used is\n\n--------------------\n        MonoTime before = MonoTime.currTime;\n        // do stuff...\n        MonoTime after = MonoTime.currTime;\n        Duration timeElapsed = after - before;\n--------------------\n"
			},
			{
				"kind": "function",
				"line": 2340,
				"deco": "FNaNbNiNflllZl",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "l",
						"name": "ticks"
					},
					{
						"deco": "l",
						"name": "srcTicksPerSecond"
					},
					{
						"deco": "l",
						"name": "dstTicksPerSecond"
					}
				],
				"name": "convClockFreq",
				"comment": "    Converts the given time from one clock frequency/resolution to another.\n\n    See_Also:\n        $(LREF ticksToNSecs)\nExample:\n\n---\n// one tick is one second -> one tick is a hecto-nanosecond\nassert(convClockFreq(45, 1, 10_000_000) == 450_000_000);\n\n// one tick is one microsecond -> one tick is a millisecond\nassert(convClockFreq(9029, 1_000_000, 1_000) == 9);\n\n// one tick is 1/3_515_654 of a second -> 1/1_001_010 of a second\nassert(convClockFreq(912_319, 3_515_654, 1_001_010) == 259_764);\n\n// one tick is 1/MonoTime.ticksPerSecond -> one tick is a nanosecond\n// Equivalent to ticksToNSecs\nauto nsecs = convClockFreq(1982, MonoTime.ticksPerSecond, 1_000_000_000);\n\n---\n",
				"endline": 2349
			},
			{
				"kind": "function",
				"line": 2438,
				"deco": "FNaNbNiNflZl",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "l",
						"name": "ticks"
					}
				],
				"name": "ticksToNSecs",
				"comment": "    Convenience wrapper around $(LREF convClockFreq) which converts ticks at\n    a clock frequency of $(D MonoTime.ticksPerSecond) to nanoseconds.\n\n    It's primarily of use when $(D MonoTime.ticksPerSecond) is greater than\n    hecto-nanosecond resolution, and an application needs a higher precision\n    than hecto-nanoceconds.\n\n    See_Also:\n        $(LREF convClockFreq)\nExample:\n\n---\nauto before = MonoTime.currTime;\n// do stuff\nauto after = MonoTime.currTime;\nauto diffInTicks = after.ticks - before.ticks;\nauto diffInNSecs = ticksToNSecs(diffInTicks);\nassert(diffInNSecs == convClockFreq(diffInTicks, MonoTime.ticksPerSecond, 1_000_000_000));\n\n---\n",
				"endline": 2441
			},
			{
				"kind": "function",
				"line": 2458,
				"deco": "FNaNbNiNflZl",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "l",
						"name": "ticks"
					}
				],
				"name": "nsecsToTicks",
				"comment": "    The reverse of $(LREF ticksToNSecs).\n",
				"endline": 2461
			},
			{
				"kind": "struct",
				"line": 2488,
				"members": [
					{
						"kind": "variable",
						"line": 2498,
						"storageClass": [
							"static",
							"immutable"
						],
						"deco": "yl",
						"char": 27,
						"name": "ticksPerSec",
						"comment": "       The number of ticks that the system clock has in one second.\n\n       If $(D ticksPerSec) is $(D 0), then then $(D TickDuration) failed to\n       get the value of $(D ticksPerSec) on the current system, and\n       $(D TickDuration) is not going to work. That would be highly abnormal\n       though.\n",
						"originalType": "long"
					},
					{
						"kind": "variable",
						"line": 2505,
						"storageClass": [
							"static",
							"immutable"
						],
						"deco": "yS4core4time12TickDuration",
						"char": 35,
						"name": "appOrigin",
						"comment": "        The tick of the system clock (as a $(D TickDuration)) when the\n        application started.\n",
						"originalType": "TickDuration"
					},
					{
						"kind": "function",
						"line": 2515,
						"storageClass": [
							"static"
						],
						"deco": "FNaNbNdNiNfZS4core4time12TickDuration",
						"endchar": 51,
						"char": 18,
						"name": "zero",
						"comment": "        It's the same as $(D TickDuration(0)), but it's provided to be\n        consistent with $(D Duration) and $(D FracSec), which provide $(D zero)\n        properties.\n",
						"endline": 2515
					},
					{
						"kind": "function",
						"line": 2520,
						"storageClass": [
							"static"
						],
						"deco": "FNaNbNdNiNfZS4core4time12TickDuration",
						"endchar": 57,
						"char": 18,
						"name": "max",
						"comment": "        Largest $(D TickDuration) possible.\n",
						"endline": 2520
					},
					{
						"kind": "function",
						"line": 2525,
						"storageClass": [
							"static"
						],
						"deco": "FNaNbNdNiNfZS4core4time12TickDuration",
						"endchar": 57,
						"char": 18,
						"name": "min",
						"comment": "        Most negative $(D TickDuration) possible.\n",
						"endline": 2525
					},
					{
						"kind": "variable",
						"line": 2602,
						"deco": "l",
						"char": 10,
						"name": "length",
						"comment": "       The number of system ticks in this $(D TickDuration).\n\n       You can convert this $(D length) into the number of seconds by dividing\n       it by $(D ticksPerSec) (or using one the appropriate property function\n       to do it).\n",
						"offset": 0
					},
					{
						"kind": "function",
						"line": 2607,
						"deco": "xFNaNbNdNiNfZl",
						"endchar": 5,
						"char": 20,
						"name": "seconds",
						"comment": "        Returns the total number of seconds in this $(D TickDuration).\n",
						"endline": 2610
					},
					{
						"kind": "function",
						"line": 2630,
						"deco": "xFNaNbNdNiNfZl",
						"endchar": 5,
						"char": 20,
						"name": "msecs",
						"comment": "        Returns the total number of milliseconds in this $(D TickDuration).\n",
						"endline": 2633
					},
					{
						"kind": "function",
						"line": 2639,
						"deco": "xFNaNbNdNiNfZl",
						"endchar": 5,
						"char": 20,
						"name": "usecs",
						"comment": "        Returns the total number of microseconds in this $(D TickDuration).\n",
						"endline": 2642
					},
					{
						"kind": "function",
						"line": 2648,
						"deco": "xFNaNbNdNiNfZl",
						"endchar": 5,
						"char": 20,
						"name": "hnsecs",
						"comment": "        Returns the total number of hecto-nanoseconds in this $(D TickDuration).\n",
						"endline": 2651
					},
					{
						"kind": "function",
						"line": 2657,
						"deco": "xFNaNbNdNiNfZl",
						"endchar": 5,
						"char": 20,
						"name": "nsecs",
						"comment": "        Returns the total number of nanoseconds in this $(D TickDuration).\n",
						"endline": 2660
					},
					{
						"kind": "template",
						"line": 2671,
						"constraint": "units == \"seconds\" || units == \"msecs\" || units == \"usecs\" || units == \"hnsecs\" || units == \"nsecs\"",
						"members": [
							{
								"kind": "function",
								"line": 2671,
								"endchar": 5,
								"char": 25,
								"type": "pure nothrow @nogc @safe TickDuration(long length)",
								"parameters": [
									{
										"deco": "l",
										"name": "length"
									}
								],
								"name": "from",
								"endline": 2681
							}
						],
						"char": 25,
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "units"
							}
						],
						"comment": "        This allows you to construct a $(D TickDuration) from the given time\n        units with the given length.\n\n        Params:\n            units  = The time units of the $(D TickDuration) (e.g. $(D \"msecs\")).\n            length = The number of units in the $(D TickDuration).\n",
						"name": "from"
					},
					{
						"kind": "template",
						"line": 2707,
						"constraint": "is(_Unqual!T == Duration)",
						"members": [
							{
								"kind": "function",
								"line": 2707,
								"endchar": 5,
								"char": 14,
								"type": "const pure nothrow @nogc @safe Duration()",
								"name": "opCast",
								"endline": 2711
							}
						],
						"char": 14,
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"comment": "        Returns a $(LREF Duration) with the same number of hnsecs as this\n        $(D TickDuration).\n        Note that the conventional way to convert between $(D TickDuration)\n        and $(D Duration) is using $(XREF conv, to), e.g.:\n        $(D tickDuration.to!Duration())\n",
						"name": "opCast"
					},
					{
						"kind": "template",
						"line": 2756,
						"constraint": "op == \"+\" || op == \"-\"",
						"members": [
							{
								"kind": "function",
								"line": 2756,
								"endchar": 5,
								"char": 22,
								"type": "pure nothrow @nogc ref @safe TickDuration(TickDuration rhs)",
								"parameters": [
									{
										"type": "TickDuration",
										"name": "rhs"
									}
								],
								"name": "opOpAssign",
								"endline": 2761
							}
						],
						"char": 22,
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "op"
							}
						],
						"comment": "        Adds or subtracts two $(D TickDuration)s as well as assigning the result\n        to this $(D TickDuration).\n\n        The legal types of arithmetic for $(D TickDuration) using this operator\n        are\n\n        $(TABLE\n        $(TR $(TD TickDuration) $(TD +=) $(TD TickDuration) $(TD -->) $(TD TickDuration))\n        $(TR $(TD TickDuration) $(TD -=) $(TD TickDuration) $(TD -->) $(TD TickDuration))\n        )\n\n        Params:\n            rhs = The $(D TickDuration) to add to or subtract from this\n                  $(D $(D TickDuration)).\n",
						"name": "opOpAssign"
					},
					{
						"kind": "template",
						"line": 2802,
						"constraint": "op == \"+\" || op == \"-\"",
						"members": [
							{
								"kind": "function",
								"line": 2802,
								"endchar": 5,
								"char": 18,
								"type": "const pure nothrow @nogc @safe TickDuration(TickDuration rhs)",
								"parameters": [
									{
										"type": "TickDuration",
										"name": "rhs"
									}
								],
								"name": "opBinary",
								"endline": 2806
							}
						],
						"char": 18,
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "op"
							}
						],
						"comment": "        Adds or subtracts two $(D TickDuration)s.\n\n        The legal types of arithmetic for $(D TickDuration) using this operator\n        are\n\n        $(TABLE\n        $(TR $(TD TickDuration) $(TD +) $(TD TickDuration) $(TD -->) $(TD TickDuration))\n        $(TR $(TD TickDuration) $(TD -) $(TD TickDuration) $(TD -->) $(TD TickDuration))\n        )\n\n        Params:\n            rhs = The $(D TickDuration) to add to or subtract from this\n                  $(D TickDuration).\n",
						"name": "opBinary"
					},
					{
						"kind": "template",
						"line": 2823,
						"constraint": "op == \"-\"",
						"members": [
							{
								"kind": "function",
								"line": 2823,
								"endchar": 5,
								"char": 18,
								"type": "const pure nothrow @nogc @safe TickDuration()",
								"name": "opUnary",
								"endline": 2827
							}
						],
						"char": 18,
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "op"
							}
						],
						"comment": "        Returns the negation of this $(D TickDuration).\n",
						"name": "opUnary"
					},
					{
						"kind": "function",
						"line": 2845,
						"deco": "xFNaNbNiNfS4core4time12TickDurationZi",
						"endchar": 5,
						"char": 9,
						"parameters": [
							{
								"deco": "S4core4time12TickDuration",
								"name": "rhs"
							}
						],
						"name": "opCmp",
						"comment": "       operator overloading \"<, >, <=, >=\"\n",
						"endline": 2848
					},
					{
						"kind": "template",
						"line": 2901,
						"constraint": "op == \"*\" && (__traits(isIntegral, T) || __traits(isFloating, T))",
						"members": [
							{
								"kind": "function",
								"line": 2901,
								"endchar": 5,
								"char": 10,
								"type": "pure nothrow @nogc @safe void(T value)",
								"parameters": [
									{
										"type": "T",
										"name": "value"
									}
								],
								"name": "opOpAssign",
								"endline": 2906
							}
						],
						"char": 10,
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "op"
							},
							{
								"kind": "type",
								"name": "T"
							}
						],
						"comment": "        The legal types of arithmetic for $(D TickDuration) using this operator\n        overload are\n\n        $(TABLE\n        $(TR $(TD TickDuration) $(TD *) $(TD long) $(TD -->) $(TD TickDuration))\n        $(TR $(TD TickDuration) $(TD *) $(TD floating point) $(TD -->) $(TD TickDuration))\n        )\n\n        Params:\n            value = The value to divide from this duration.\n",
						"name": "opOpAssign"
					},
					{
						"kind": "template",
						"line": 2949,
						"constraint": "op == \"/\" && (__traits(isIntegral, T) || __traits(isFloating, T))",
						"members": [
							{
								"kind": "function",
								"line": 2949,
								"endchar": 5,
								"char": 10,
								"type": "pure @safe void(T value)",
								"parameters": [
									{
										"type": "T",
										"name": "value"
									}
								],
								"name": "opOpAssign",
								"endline": 2957
							}
						],
						"char": 10,
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "op"
							},
							{
								"kind": "type",
								"name": "T"
							}
						],
						"comment": "        The legal types of arithmetic for $(D TickDuration) using this operator\n        overload are\n\n        $(TABLE\n        $(TR $(TD TickDuration) $(TD /) $(TD long) $(TD -->) $(TD TickDuration))\n        $(TR $(TD TickDuration) $(TD /) $(TD floating point) $(TD -->) $(TD TickDuration))\n        )\n\n        Params:\n            value = The value to divide from this $(D TickDuration).\n\n        Throws:\n            $(D TimeException) if an attempt to divide by $(D 0) is made.\n",
						"name": "opOpAssign"
					},
					{
						"kind": "template",
						"line": 2999,
						"constraint": "op == \"*\" && (__traits(isIntegral, T) || __traits(isFloating, T))",
						"members": [
							{
								"kind": "function",
								"line": 2999,
								"endchar": 5,
								"char": 18,
								"type": "const pure nothrow @nogc @safe TickDuration(T value)",
								"parameters": [
									{
										"type": "T",
										"name": "value"
									}
								],
								"name": "opBinary",
								"endline": 3004
							}
						],
						"char": 18,
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "op"
							},
							{
								"kind": "type",
								"name": "T"
							}
						],
						"comment": "        The legal types of arithmetic for $(D TickDuration) using this operator\n        overload are\n\n        $(TABLE\n        $(TR $(TD TickDuration) $(TD *) $(TD long) $(TD -->) $(TD TickDuration))\n        $(TR $(TD TickDuration) $(TD *) $(TD floating point) $(TD -->) $(TD TickDuration))\n        )\n\n        Params:\n            value = The value to divide from this $(D TickDuration).\n",
						"name": "opBinary"
					},
					{
						"kind": "template",
						"line": 3035,
						"constraint": "op == \"/\" && (__traits(isIntegral, T) || __traits(isFloating, T))",
						"members": [
							{
								"kind": "function",
								"line": 3035,
								"endchar": 5,
								"char": 18,
								"type": "const pure @safe TickDuration(T value)",
								"parameters": [
									{
										"type": "T",
										"name": "value"
									}
								],
								"name": "opBinary",
								"endline": 3043
							}
						],
						"char": 18,
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "op"
							},
							{
								"kind": "type",
								"name": "T"
							}
						],
						"comment": "        The legal types of arithmetic for $(D TickDuration) using this operator\n        overload are\n\n        $(TABLE\n        $(TR $(TD TickDuration) $(TD /) $(TD long) $(TD -->) $(TD TickDuration))\n        $(TR $(TD TickDuration) $(TD /) $(TD floating point) $(TD -->) $(TD TickDuration))\n        )\n\n        Params:\n            value = The value to divide from this $(D TickDuration).\n\n        Throws:\n            $(D TimeException) if an attempt to divide by $(D 0) is made.\n",
						"name": "opBinary"
					},
					{
						"kind": "constructor",
						"line": 3065,
						"deco": "FNaNbNcNiNflZS4core4time12TickDuration",
						"endchar": 5,
						"char": 30,
						"parameters": [
							{
								"deco": "l",
								"name": "ticks"
							}
						],
						"name": "this",
						"comment": "        Params:\n            ticks = The number of ticks in the TickDuration.\n",
						"originalType": "pure nothrow @nogc ref @safe (long ticks)",
						"endline": 3068
					},
					{
						"kind": "function",
						"line": 3102,
						"storageClass": [
							"static"
						],
						"deco": "FNbNdNiNeZS4core4time12TickDuration",
						"endchar": 5,
						"char": 35,
						"name": "currSystemTick",
						"comment": "        The current system tick. The number of ticks per second varies from\n        system to system. $(D currSystemTick) uses a monotonic clock, so it's\n        intended for precision timing by comparing relative time values, not for\n        getting the current system time.\n\n        On Windows, $(D QueryPerformanceCounter) is used. On Mac OS X,\n        $(D mach_absolute_time) is used, while on other Posix systems,\n        $(D clock_gettime) is used. If $(D mach_absolute_time) or\n        $(D clock_gettime) is unavailable, then Posix systems use\n        $(D gettimeofday) (the decision is made when $(D TickDuration) is\n        compiled), which unfortunately, is not monotonic, but if\n        $(D mach_absolute_time) and $(D clock_gettime) aren't available, then\n        $(D gettimeofday) is the the best that there is.\n\n        $(RED Warning):\n            On some systems, the monotonic clock may stop counting when\n            the computer goes to sleep or hibernates. So, the monotonic\n            clock could be off if that occurs. This is known to happen\n            on Mac OS X. It has not been tested whether it occurs on\n            either Windows or on Linux.\n\n        Throws:\n            $(D TimeException) if it fails to get the time.\n",
						"endline": 3147
					}
				],
				"char": 1,
				"name": "TickDuration",
				"comment": "    $(RED Warning: TickDuration will be deprecated in the near future (once all\n          uses of it in Phobos have been deprecated). Please use\n          $(LREF MonoTime) for the cases where a monotonic timestamp is needed\n          and $(LREF Duration) when a duration is needed, rather than using\n          TickDuration. It has been decided that TickDuration is too confusing\n          (e.g. it conflates a monotonic timestamp and a duration in monotonic\n           clock ticks) and that having multiple duration types is too awkward\n          and confusing.)\n\n   Represents a duration of time in system clock ticks.\n\n   The system clock ticks are the ticks of the system clock at the highest\n   precision that the system provides.\n"
			},
			{
				"kind": "template",
				"line": 3168,
				"constraint": "(from == \"weeks\" || from == \"days\" || from == \"hours\" || from == \"minutes\" || from == \"seconds\" || from == \"msecs\" || from == \"usecs\" || from == \"hnsecs\" || from == \"nsecs\") && (to == \"weeks\" || to == \"days\" || to == \"hours\" || to == \"minutes\" || to == \"seconds\" || to == \"msecs\" || to == \"usecs\" || to == \"hnsecs\" || to == \"nsecs\") || (from == \"years\" || from == \"months\") && (to == \"years\" || to == \"months\")",
				"members": [
					{
						"kind": "function",
						"line": 3168,
						"endchar": 1,
						"char": 6,
						"type": "pure nothrow @nogc @safe long(long value)",
						"parameters": [
							{
								"deco": "l",
								"name": "value"
							}
						],
						"name": "convert",
						"endline": 3215
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "value",
						"deco": "Aya",
						"name": "from"
					},
					{
						"kind": "value",
						"deco": "Aya",
						"name": "to"
					}
				],
				"comment": "    Generic way of converting between two time units. Conversions to smaller\n    units use truncating division. Years and months can be converted to each\n    other, small units can be converted to each other, but years and months\n    cannot be converted to or from smaller units (due to the varying number\n    of days in a month or year).\n\n    Params:\n        from  = The units of time to convert from.\n        to    = The units of time to convert to.\n        value = The value to convert.\nExample:\n\n---\nassert(convert!(\"years\", \"months\")(1) == 12);\nassert(convert!(\"months\", \"years\")(12) == 1);\n\nassert(convert!(\"weeks\", \"days\")(1) == 7);\nassert(convert!(\"hours\", \"seconds\")(1) == 3600);\nassert(convert!(\"seconds\", \"days\")(1) == 0);\nassert(convert!(\"seconds\", \"days\")(86_400) == 1);\n\nassert(convert!(\"nsecs\", \"nsecs\")(1) == 1);\nassert(convert!(\"nsecs\", \"hnsecs\")(1) == 0);\nassert(convert!(\"hnsecs\", \"nsecs\")(1) == 100);\nassert(convert!(\"nsecs\", \"seconds\")(1) == 0);\nassert(convert!(\"seconds\", \"nsecs\")(1) == 1_000_000_000);\n\n---\n",
				"name": "convert"
			},
			{
				"kind": "struct",
				"line": 3326,
				"members": [
					{
						"kind": "function",
						"line": 3336,
						"storageClass": [
							"static"
						],
						"deco": "FNaNbNdNiNfZS4core4time7FracSec",
						"endchar": 72,
						"char": 44,
						"name": "zero",
						"comment": "        A $(D FracSec) of $(D 0). It's shorter than doing something like\n        $(D FracSec.from!\"msecs\"(0)) and more explicit than $(D FracSec.init).\n",
						"endline": 3336
					},
					{
						"kind": "template",
						"line": 3357,
						"constraint": "units == \"msecs\" || units == \"usecs\" || units == \"hnsecs\" || units == \"nsecs\"",
						"members": [
							{
								"kind": "function",
								"line": 3357,
								"endchar": 5,
								"char": 20,
								"type": "FracSec(long value)",
								"parameters": [
									{
										"deco": "l",
										"name": "value"
									}
								],
								"name": "from",
								"endline": 3366
							}
						],
						"char": 20,
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "units"
							}
						],
						"comment": "        Create a $(D FracSec) from the given units ($(D \"msecs\"), $(D \"usecs\"),\n        or $(D \"hnsecs\")).\n\n        Params:\n            units = The units to create a FracSec from.\n            value = The number of the given units passed the second.\n\n        Throws:\n            $(D TimeException) if the given value would result in a $(D FracSec)\n            greater than or equal to $(D 1) second or less than or equal to\n            $(D -1) seconds.\n",
						"name": "from"
					},
					{
						"kind": "template",
						"line": 3408,
						"constraint": "op == \"-\"",
						"members": [
							{
								"kind": "function",
								"line": 3408,
								"endchar": 5,
								"char": 13,
								"type": "const nothrow @nogc FracSec()",
								"name": "opUnary",
								"endline": 3412
							}
						],
						"char": 13,
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "op"
							}
						],
						"comment": "        Returns the negation of this $(D FracSec).\n",
						"name": "opUnary"
					},
					{
						"kind": "function",
						"line": 3430,
						"deco": "xFNaNbNdNiNfZi",
						"endchar": 5,
						"char": 19,
						"name": "msecs",
						"comment": "        The value of this $(D FracSec) as milliseconds.\n",
						"endline": 3433
					},
					{
						"kind": "function",
						"line": 3462,
						"deco": "FNaNdNfiZv",
						"endchar": 5,
						"char": 20,
						"parameters": [
							{
								"deco": "i",
								"name": "milliseconds"
							}
						],
						"name": "msecs",
						"comment": "        The value of this $(D FracSec) as milliseconds.\n\n        Params:\n            milliseconds = The number of milliseconds passed the second.\n\n        Throws:\n            $(D TimeException) if the given value is not less than $(D 1) second\n            and greater than a $(D -1) seconds.\n",
						"endline": 3467
					},
					{
						"kind": "function",
						"line": 3502,
						"deco": "xFNaNbNdNiNfZi",
						"endchar": 5,
						"char": 19,
						"name": "usecs",
						"comment": "        The value of this $(D FracSec) as microseconds.\n",
						"endline": 3505
					},
					{
						"kind": "function",
						"line": 3534,
						"deco": "FNaNdNfiZv",
						"endchar": 5,
						"char": 20,
						"parameters": [
							{
								"deco": "i",
								"name": "microseconds"
							}
						],
						"name": "usecs",
						"comment": "        The value of this $(D FracSec) as microseconds.\n\n        Params:\n            microseconds = The number of microseconds passed the second.\n\n        Throws:\n            $(D TimeException) if the given value is not less than $(D 1) second\n            and greater than a $(D -1) seconds.\n",
						"endline": 3539
					},
					{
						"kind": "function",
						"line": 3575,
						"deco": "xFNaNbNdNiNfZi",
						"endchar": 5,
						"char": 19,
						"name": "hnsecs",
						"comment": "        The value of this $(D FracSec) as hnsecs.\n",
						"endline": 3578
					},
					{
						"kind": "function",
						"line": 3607,
						"deco": "FNaNdNfiZv",
						"endchar": 5,
						"char": 20,
						"parameters": [
							{
								"deco": "i",
								"name": "hnsecs"
							}
						],
						"name": "hnsecs",
						"comment": "        The value of this $(D FracSec) as hnsecs.\n\n        Params:\n            hnsecs = The number of hnsecs passed the second.\n\n        Throws:\n            $(D TimeException) if the given value is not less than $(D 1) second\n            and greater than a $(D -1) seconds.\n",
						"endline": 3611
					},
					{
						"kind": "function",
						"line": 3651,
						"deco": "xFNaNbNdNiNfZi",
						"endchar": 5,
						"char": 19,
						"name": "nsecs",
						"comment": "        The value of this $(D FracSec) as nsecs.\n\n        Note that this does not give you any greater precision\n        than getting the value of this $(D FracSec) as hnsecs.\n",
						"endline": 3654
					},
					{
						"kind": "function",
						"line": 3686,
						"deco": "FNaNdNflZv",
						"endchar": 5,
						"char": 20,
						"parameters": [
							{
								"deco": "l",
								"name": "nsecs"
							}
						],
						"name": "nsecs",
						"comment": "        The value of this $(D FracSec) as nsecs.\n\n        Note that this does not give you any greater precision\n        than setting the value of this $(D FracSec) as hnsecs.\n\n        Params:\n            nsecs = The number of nsecs passed the second.\n\n        Throws:\n            $(D TimeException) if the given value is not less than $(D 1) second\n            and greater than a $(D -1) seconds.\n",
						"endline": 3691
					},
					{
						"kind": "function",
						"line": 3745,
						"deco": "xFNaNbNfZAya",
						"endchar": 5,
						"char": 12,
						"name": "toString",
						"comment": "        Converts this $(D TickDuration) to a string.\n",
						"endline": 3748
					}
				],
				"char": 1,
				"name": "FracSec",
				"comment": "    Represents fractional seconds.\n\n    This is the portion of the time which is smaller than a second and it cannot\n    hold values which would be greater than or equal to a second (or less than\n    or equal to a negative second).\n\n    It holds hnsecs internally, but you can create it using either milliseconds,\n    microseconds, or hnsecs. What it does is allow for a simple way to set or\n    adjust the fractional seconds portion of a $(D Duration) or a\n    $(XREF datetime, SysTime) without having to worry about whether you're\n    dealing with milliseconds, microseconds, or hnsecs.\n\n    $(D FracSec)'s functions which take time unit strings do accept\n    $(D \"nsecs\"), but because the resolution of $(D Duration) and\n    $(XREF datetime, SysTime) is hnsecs, you don't actually get precision higher\n    than hnsecs. $(D \"nsecs\") is accepted merely for convenience. Any values\n    given as nsecs will be converted to hnsecs using $(D convert) (which uses\n    truncating division when converting to smaller units).\n"
			},
			{
				"kind": "class",
				"line": 3907,
				"base": "object.Exception",
				"members": [
					{
						"kind": "constructor",
						"line": 3916,
						"deco": "FNaNbNfAyaAyamC6object9ThrowableZC4core4time13TimeException",
						"endchar": 5,
						"char": 5,
						"parameters": [
							{
								"deco": "Aya",
								"name": "msg"
							},
							{
								"deco": "Aya",
								"default": "__FILE__",
								"name": "file"
							},
							{
								"deco": "m",
								"default": "cast(ulong)__LINE__",
								"name": "line"
							},
							{
								"deco": "C6object9Throwable",
								"default": "null",
								"name": "next"
							}
						],
						"name": "this",
						"comment": "        Params:\n            msg  = The message for the exception.\n            file = The file where the exception occurred.\n            line = The line number where the exception occurred.\n            next = The previous exception in the chain of exceptions, if any.\n",
						"originalType": "pure nothrow @safe (string msg, string file = __FILE__, size_t line = __LINE__, Throwable next = null)",
						"endline": 3919
					},
					{
						"kind": "constructor",
						"line": 3928,
						"deco": "FNaNbNfAyaC6object9ThrowableAyamZC4core4time13TimeException",
						"endchar": 5,
						"char": 5,
						"parameters": [
							{
								"deco": "Aya",
								"name": "msg"
							},
							{
								"deco": "C6object9Throwable",
								"name": "next"
							},
							{
								"deco": "Aya",
								"default": "__FILE__",
								"name": "file"
							},
							{
								"deco": "m",
								"default": "cast(ulong)__LINE__",
								"name": "line"
							}
						],
						"name": "this",
						"comment": "        Params:\n            msg  = The message for the exception.\n            next = The previous exception in the chain of exceptions.\n            file = The file where the exception occurred.\n            line = The line number where the exception occurred.\n",
						"originalType": "pure nothrow @safe (string msg, Throwable next, string file = __FILE__, size_t line = __LINE__)",
						"endline": 3931
					}
				],
				"char": 1,
				"name": "TimeException",
				"comment": "    Exception type used by core.time.\n"
			},
			{
				"kind": "function",
				"line": 3959,
				"deco": "FNaNbNiNfS4core4time8DurationZS4core4time8Duration",
				"endchar": 1,
				"char": 10,
				"parameters": [
					{
						"deco": "S4core4time8Duration",
						"name": "duration"
					}
				],
				"name": "abs",
				"comment": "    Returns the absolute value of a duration.\n",
				"endline": 3962
			},
			{
				"kind": "function",
				"line": 3965,
				"deco": "FNaNbNiNfS4core4time12TickDurationZS4core4time12TickDuration",
				"endchar": 1,
				"char": 14,
				"parameters": [
					{
						"deco": "S4core4time12TickDuration",
						"name": "duration"
					}
				],
				"name": "abs",
				"comment": " Ditto\n",
				"endline": 3968
			}
		],
		"name": "core.time",
		"comment": "    Module containing core time functionality, such as $(LREF Duration) (which\n    represents a duration of time) or $(LREF MonoTime) (which represents a\n    timestamp of the system's monotonic clock).\n\n    Various functions take a string (or strings) to represent a unit of time\n    (e.g. $(D convert!(\"days\", \"hours\")(numDays))). The valid strings to use\n    with such functions are \"years\", \"months\", \"weeks\", \"days\", \"hours\",\n    \"minutes\", \"seconds\", \"msecs\" (milliseconds), \"usecs\" (microseconds),\n    \"hnsecs\" (hecto-nanoseconds - i.e. 100 ns) or some subset thereof. There\n    are a few functions that also allow \"nsecs\", but very little actually\n    has precision greater than hnsecs.\n\n    $(BOOKTABLE Cheat Sheet,\n    $(TR $(TH Symbol) $(TH Description))\n    $(LEADINGROW Types)\n    $(TR $(TDNW $(LREF Duration)) $(TD Represents a duration of time of weeks\n    or less (kept internally as hnsecs). (e.g. 22 days or 700 seconds).))\n    $(TR $(TDNW $(LREF TickDuration)) $(TD Represents a duration of time in\n    system clock ticks, using the highest precision that the system provides.))\n    $(TR $(TDNW $(LREF MonoTime)) $(TD Represents a monotonic timestamp in\n    system clock ticks, using the highest precision that the system provides.))\n    $(TR $(TDNW $(LREF FracSec)) $(TD Represents fractional seconds\n    (portions of time smaller than a second).))\n    $(LEADINGROW Functions)\n    $(TR $(TDNW $(LREF convert)) $(TD Generic way of converting between two time\n    units.))\n    $(TR $(TDNW $(LREF dur)) $(TD Allows constructing a $(LREF Duration) from\n    the given time units with the given length.))\n    $(TR $(TDNW $(LREF weeks)$(NBSP)$(LREF days)$(NBSP)$(LREF hours)$(BR)\n    $(LREF minutes)$(NBSP)$(LREF seconds)$(NBSP)$(LREF msecs)$(BR)\n    $(LREF usecs)$(NBSP)$(LREF hnsecs)$(NBSP)$(LREF nsecs))\n    $(TD Convenience aliases for $(LREF dur).))\n    $(TR $(TDNW $(LREF abs)) $(TD Returns the absolute value of a duration.))\n    )\n\n    $(BOOKTABLE Conversions,\n    $(TR $(TH )\n     $(TH From $(LREF Duration))\n     $(TH From $(LREF TickDuration))\n     $(TH From $(LREF FracSec))\n     $(TH From units)\n    )\n    $(TR $(TD $(B To $(LREF Duration)))\n     $(TD -)\n     $(TD $(D tickDuration.)$(SXREF conv, to)$(D !Duration()))\n     $(TD -)\n     $(TD $(D dur!\"msecs\"(5)) or $(D 5.msecs()))\n    )\n    $(TR $(TD $(B To $(LREF TickDuration)))\n     $(TD $(D duration.)$(SXREF conv, to)$(D !TickDuration()))\n     $(TD -)\n     $(TD -)\n     $(TD $(D TickDuration.from!\"msecs\"(msecs)))\n    )\n    $(TR $(TD $(B To $(LREF FracSec)))\n     $(TD $(D duration.fracSec))\n     $(TD -)\n     $(TD -)\n     $(TD $(D FracSec.from!\"msecs\"(msecs)))\n    )\n    $(TR $(TD $(B To units))\n     $(TD $(D duration.total!\"days\"))\n     $(TD $(D tickDuration.msecs))\n     $(TD $(D fracSec.msecs))\n     $(TD $(D convert!(\"days\", \"msecs\")(msecs)))\n    ))\n\n    Copyright: Copyright 2010 - 2012\n    License:   $(WEB www.boost.org/LICENSE_1_0.txt, Boost License 1.0).\n    Authors:   Jonathan M Davis and Kato Shoichi\n    Source:    $(DRUNTIMESRC core/_time.d)\n    Macros:\n    NBSP=&nbsp;\n    SXREF=<a href=\"std_$1.html#$2\">$(D $2)</a>\n"
	},
	{
		"kind": "module",
		"file": "../druntime/src/core/memory.d",
		"members": [
			{
				"kind": "struct",
				"line": 131,
				"members": [
					{
						"kind": "function",
						"line": 141,
						"storageClass": [
							"static"
						],
						"deco": "FNbZv",
						"endchar": 5,
						"char": 17,
						"name": "enable",
						"comment": " Enables automatic garbage collection behavior if collections have\n previously been suspended by a call to disable.  This function is\n reentrant, and must be called once for every call to disable before\n automatic collections are enabled.\n",
						"endline": 144
					},
					{
						"kind": "function",
						"line": 154,
						"storageClass": [
							"static"
						],
						"deco": "FNbZv",
						"endchar": 5,
						"char": 17,
						"name": "disable",
						"comment": " Disables automatic garbage collections performed to minimize the\n process footprint.  Collections may continue to occur in instances\n where the implementation deems necessary for correct program behavior,\n such as during an out of memory condition.  This function is reentrant,\n but enable must be called once for each call to disable.\n",
						"endline": 157
					},
					{
						"kind": "function",
						"line": 167,
						"storageClass": [
							"static"
						],
						"deco": "FNbZv",
						"endchar": 5,
						"char": 17,
						"name": "collect",
						"comment": " Begins a full collection.  While the meaning of this may change based\n on the garbage collector implementation, typical behavior is to scan\n all stack segments for roots, mark accessible memory blocks as alive,\n and then to reclaim free space.  This action may need to suspend all\n running threads for at least part of the collection process.\n",
						"endline": 170
					},
					{
						"kind": "function",
						"line": 177,
						"storageClass": [
							"static"
						],
						"deco": "FNbZv",
						"endchar": 5,
						"char": 17,
						"name": "minimize",
						"comment": " Indicates that the managed memory space be minimized by returning free\n physical memory to the operating system.  The amount of free memory\n returned depends on the allocator design and on program behavior.\n",
						"endline": 180
					},
					{
						"kind": "enum",
						"line": 187,
						"members": [
							{
								"kind": "enum member",
								"line": 189,
								"value": "0u",
								"char": 9,
								"name": "NONE",
								"comment": "No attributes set.\n"
							},
							{
								"kind": "enum member",
								"line": 190,
								"value": "1u",
								"char": 9,
								"name": "FINALIZE",
								"comment": "Finalize the data in this block on collect.\n"
							},
							{
								"kind": "enum member",
								"line": 191,
								"value": "2u",
								"char": 9,
								"name": "NO_SCAN",
								"comment": "Do not scan through this block on collect.\n"
							},
							{
								"kind": "enum member",
								"line": 192,
								"value": "4u",
								"char": 9,
								"name": "NO_MOVE",
								"comment": "Do not move this memory block on collect.\n"
							},
							{
								"kind": "enum member",
								"line": 214,
								"value": "8u",
								"char": 9,
								"name": "APPENDABLE",
								"comment": "        This block contains the info to allow appending.\n\n        This can be used to manually allocate arrays. Initial slice size is 0.\n\n        Note: The slice's useable size will not match the block size. Use\n        $(LREF capacity) to retrieve actual useable capacity.\n\n        Example:\n        ----\n        // Allocate the underlying array.\n        int*  pToArray = cast(int*)GC.malloc(10 * int.sizeof, GC.BlkAttr.NO_SCAN | GC.BlkAttr.APPENDABLE);\n        // Bind a slice. Check the slice has capacity information.\n        int[] slice = pToArray[0 .. 0];\n        assert(capacity(slice) > 0);\n        // Appending to the slice will not relocate it.\n        slice.length = 5;\n        slice ~= 1;\n        assert(slice.ptr == p);\n        ----\n"
							},
							{
								"kind": "enum member",
								"line": 222,
								"value": "16u",
								"char": 9,
								"name": "NO_INTERIOR",
								"comment": "        This block is guaranteed to have a pointer to its base while it is\n        alive.  Interior pointers can be safely ignored.  This attribute is\n        useful for eliminating false pointers in very large data structures\n        and is only implemented for data structures at least a page in size.\n"
							}
						],
						"char": 5,
						"baseDeco": "k",
						"name": "BlkAttr",
						"comment": " Elements for a bit field representing memory block attributes.  These\n are manipulated via the getAttr, setAttr, clrAttr functions.\n"
					},
					{
						"kind": "alias",
						"line": 237,
						"deco": "S4core6memory8BlkInfo_",
						"char": 20,
						"name": "BlkInfo",
						"comment": " Contains aggregate information about a block of managed memory.  The\n purpose of this struct is to support a more efficient query style in\n instances where detailed information is needed.\n\n base = A pointer to the base of the block in question.\n size = The size of the block, calculated from base.\n attr = Attribute bits set on the memory block.\n"
					},
					{
						"kind": "function",
						"line": 253,
						"storageClass": [
							"static"
						],
						"deco": "FNbxPvZk",
						"endchar": 5,
						"char": 17,
						"parameters": [
							{
								"deco": "xPv",
								"name": "p"
							}
						],
						"name": "getAttr",
						"comment": " Returns a bit field representing all block attributes set for the memory\n referenced by p.  If p references memory not originally allocated by\n this garbage collector, points to the interior of a memory block, or if\n p is null, zero will be returned.\n\n Params:\n  p = A pointer to the root of a valid memory block or to null.\n\n Returns:\n  A bit field containing any bits set for the memory block referenced by\n  p or zero on error.\n",
						"originalType": "nothrow uint(in void* p)",
						"endline": 256
					},
					{
						"kind": "function",
						"line": 260,
						"storageClass": [
							"static"
						],
						"deco": "FNaNbPvZk",
						"endchar": 5,
						"char": 17,
						"parameters": [
							{
								"deco": "Pv",
								"name": "p"
							}
						],
						"name": "getAttr",
						"comment": "ditto\n",
						"endline": 263
					},
					{
						"kind": "function",
						"line": 280,
						"storageClass": [
							"static"
						],
						"deco": "FNbxPvkZk",
						"endchar": 5,
						"char": 17,
						"parameters": [
							{
								"deco": "xPv",
								"name": "p"
							},
							{
								"deco": "k",
								"name": "a"
							}
						],
						"name": "setAttr",
						"comment": " Sets the specified bits for the memory references by p.  If p references\n memory not originally allocated by this garbage collector, points to the\n interior of a memory block, or if p is null, no action will be\n performed.\n\n Params:\n  p = A pointer to the root of a valid memory block or to null.\n  a = A bit field containing any bits to set for this memory block.\n\n Returns:\n  The result of a call to getAttr after the specified bits have been\n  set.\n",
						"originalType": "nothrow uint(in void* p, uint a)",
						"endline": 283
					},
					{
						"kind": "function",
						"line": 287,
						"storageClass": [
							"static"
						],
						"deco": "FNaNbPvkZk",
						"endchar": 5,
						"char": 17,
						"parameters": [
							{
								"deco": "Pv",
								"name": "p"
							},
							{
								"deco": "k",
								"name": "a"
							}
						],
						"name": "setAttr",
						"comment": "ditto\n",
						"endline": 290
					},
					{
						"kind": "function",
						"line": 307,
						"storageClass": [
							"static"
						],
						"deco": "FNbxPvkZk",
						"endchar": 5,
						"char": 17,
						"parameters": [
							{
								"deco": "xPv",
								"name": "p"
							},
							{
								"deco": "k",
								"name": "a"
							}
						],
						"name": "clrAttr",
						"comment": " Clears the specified bits for the memory references by p.  If p\n references memory not originally allocated by this garbage collector,\n points to the interior of a memory block, or if p is null, no action\n will be performed.\n\n Params:\n  p = A pointer to the root of a valid memory block or to null.\n  a = A bit field containing any bits to clear for this memory block.\n\n Returns:\n  The result of a call to getAttr after the specified bits have been\n  cleared.\n",
						"originalType": "nothrow uint(in void* p, uint a)",
						"endline": 310
					},
					{
						"kind": "function",
						"line": 314,
						"storageClass": [
							"static"
						],
						"deco": "FNaNbPvkZk",
						"endchar": 5,
						"char": 17,
						"parameters": [
							{
								"deco": "Pv",
								"name": "p"
							},
							{
								"deco": "k",
								"name": "a"
							}
						],
						"name": "clrAttr",
						"comment": "ditto\n",
						"endline": 317
					},
					{
						"kind": "function",
						"line": 340,
						"storageClass": [
							"static"
						],
						"deco": "FNaNbmkxC8TypeInfoZPv",
						"endchar": 5,
						"char": 18,
						"parameters": [
							{
								"deco": "m",
								"name": "sz"
							},
							{
								"deco": "k",
								"default": "0u",
								"name": "ba"
							},
							{
								"deco": "xC8TypeInfo",
								"default": "null",
								"name": "ti"
							}
						],
						"name": "malloc",
						"comment": " Requests an aligned block of managed memory from the garbage collector.\n This memory may be deleted at will with a call to free, or it may be\n discarded and cleaned up automatically during a collection run.  If\n allocation fails, this function will call onOutOfMemory which is\n expected to throw an OutOfMemoryError.\n\n Params:\n  sz = The desired allocation size in bytes.\n  ba = A bitmask of the attributes to set on this block.\n  ti = TypeInfo to describe the memory. The GC might use this information\n       to improve scanning for pointers or to call finalizers.\n\n Returns:\n  A reference to the allocated memory or null if insufficient memory\n  is available.\n\n Throws:\n  OutOfMemoryError on allocation failure.\n",
						"originalType": "pure nothrow void*(size_t sz, uint ba = 0, const TypeInfo ti = null)",
						"endline": 343
					},
					{
						"kind": "function",
						"line": 366,
						"storageClass": [
							"static"
						],
						"deco": "FNaNbmkxC8TypeInfoZS4core6memory8BlkInfo_",
						"endchar": 5,
						"char": 20,
						"parameters": [
							{
								"deco": "m",
								"name": "sz"
							},
							{
								"deco": "k",
								"default": "0u",
								"name": "ba"
							},
							{
								"deco": "xC8TypeInfo",
								"default": "null",
								"name": "ti"
							}
						],
						"name": "qalloc",
						"comment": " Requests an aligned block of managed memory from the garbage collector.\n This memory may be deleted at will with a call to free, or it may be\n discarded and cleaned up automatically during a collection run.  If\n allocation fails, this function will call onOutOfMemory which is\n expected to throw an OutOfMemoryError.\n\n Params:\n  sz = The desired allocation size in bytes.\n  ba = A bitmask of the attributes to set on this block.\n  ti = TypeInfo to describe the memory. The GC might use this information\n       to improve scanning for pointers or to call finalizers.\n\n Returns:\n  Information regarding the allocated memory block or BlkInfo.init on\n  error.\n\n Throws:\n  OutOfMemoryError on allocation failure.\n",
						"originalType": "pure nothrow BlkInfo(size_t sz, uint ba = 0, const TypeInfo ti = null)",
						"endline": 369
					},
					{
						"kind": "function",
						"line": 393,
						"storageClass": [
							"static"
						],
						"deco": "FNaNbmkxC8TypeInfoZPv",
						"endchar": 5,
						"char": 18,
						"parameters": [
							{
								"deco": "m",
								"name": "sz"
							},
							{
								"deco": "k",
								"default": "0u",
								"name": "ba"
							},
							{
								"deco": "xC8TypeInfo",
								"default": "null",
								"name": "ti"
							}
						],
						"name": "calloc",
						"comment": " Requests an aligned block of managed memory from the garbage collector,\n which is initialized with all bits set to zero.  This memory may be\n deleted at will with a call to free, or it may be discarded and cleaned\n up automatically during a collection run.  If allocation fails, this\n function will call onOutOfMemory which is expected to throw an\n OutOfMemoryError.\n\n Params:\n  sz = The desired allocation size in bytes.\n  ba = A bitmask of the attributes to set on this block.\n  ti = TypeInfo to describe the memory. The GC might use this information\n       to improve scanning for pointers or to call finalizers.\n\n Returns:\n  A reference to the allocated memory or null if insufficient memory\n  is available.\n\n Throws:\n  OutOfMemoryError on allocation failure.\n",
						"originalType": "pure nothrow void*(size_t sz, uint ba = 0, const TypeInfo ti = null)",
						"endline": 396
					},
					{
						"kind": "function",
						"line": 433,
						"storageClass": [
							"static"
						],
						"deco": "FNaNbPvmkxC8TypeInfoZPv",
						"endchar": 5,
						"char": 18,
						"parameters": [
							{
								"deco": "Pv",
								"name": "p"
							},
							{
								"deco": "m",
								"name": "sz"
							},
							{
								"deco": "k",
								"default": "0u",
								"name": "ba"
							},
							{
								"deco": "xC8TypeInfo",
								"default": "null",
								"name": "ti"
							}
						],
						"name": "realloc",
						"comment": " If sz is zero, the memory referenced by p will be deallocated as if\n by a call to free.  A new memory block of size sz will then be\n allocated as if by a call to malloc, or the implementation may instead\n resize the memory block in place.  The contents of the new memory block\n will be the same as the contents of the old memory block, up to the\n lesser of the new and old sizes.  Note that existing memory will only\n be freed by realloc if sz is equal to zero.  The garbage collector is\n otherwise expected to later reclaim the memory block if it is unused.\n If allocation fails, this function will call onOutOfMemory which is\n expected to throw an OutOfMemoryError.  If p references memory not\n originally allocated by this garbage collector, or if it points to the\n interior of a memory block, no action will be taken.  If ba is zero\n (the default) and p references the head of a valid, known memory block\n then any bits set on the current block will be set on the new block if a\n reallocation is required.  If ba is not zero and p references the head\n of a valid, known memory block then the bits in ba will replace those on\n the current memory block and will also be set on the new block if a\n reallocation is required.\n\n Params:\n  p  = A pointer to the root of a valid memory block or to null.\n  sz = The desired allocation size in bytes.\n  ba = A bitmask of the attributes to set on this block.\n  ti = TypeInfo to describe the memory. The GC might use this information\n       to improve scanning for pointers or to call finalizers.\n\n Returns:\n  A reference to the allocated memory on success or null if sz is\n  zero.  On failure, the original value of p is returned.\n\n Throws:\n  OutOfMemoryError on allocation failure.\nExample:\nIssue 13111\n---\nenum size1 = 1 << 11 + 1; // page in large object pool\nenum size2 = 1 << 22 + 1; // larger than large object pool size\n\nauto data1 = cast(ubyte*)GC.calloc(size1);\nauto data2 = cast(ubyte*)GC.realloc(data1, size2);\n\nBlkInfo info = query(data2);\nassert(info.size >= size2);\n\n\n---\n",
						"originalType": "pure nothrow void*(void* p, size_t sz, uint ba = 0, const TypeInfo ti = null)",
						"endline": 436
					},
					{
						"kind": "function",
						"line": 477,
						"storageClass": [
							"static"
						],
						"deco": "FNaNbPvmmxC8TypeInfoZm",
						"endchar": 5,
						"char": 19,
						"parameters": [
							{
								"deco": "Pv",
								"name": "p"
							},
							{
								"deco": "m",
								"name": "mx"
							},
							{
								"deco": "m",
								"name": "sz"
							},
							{
								"deco": "xC8TypeInfo",
								"default": "null",
								"name": "ti"
							}
						],
						"name": "extend",
						"comment": " Requests that the managed memory block referenced by p be extended in\n place by at least mx bytes, with a desired extension of sz bytes.  If an\n extension of the required size is not possible or if p references memory\n not originally allocated by this garbage collector, no action will be\n taken.\n\n Params:\n  p  = A pointer to the root of a valid memory block or to null.\n  mx = The minimum extension size in bytes.\n  sz = The desired extension size in bytes.\n  ti = TypeInfo to describe the full memory block. The GC might use\n       this information to improve scanning for pointers or to\n       call finalizers.\n\n Returns:\n  The size in bytes of the extended memory block referenced by p or zero\n  if no extension occurred.\n\n Note:\n  Extend may also be used to extend slices (or memory blocks with\n  $(LREF APPENDABLE) info). However, use the return value only\n  as an indicator of success. $(LREF capacity) should be used to\n  retrieve actual useable slice capacity.\nExample:\nStandard extending\n---\nsize_t size = 1000;\nint* p = cast(int*)GC.malloc(size * int.sizeof, GC.BlkAttr.NO_SCAN);\n\n//Try to extend the allocated data by 1000 elements, preferred 2000.\nsize_t u = GC.extend(p, 1000 * int.sizeof, 2000 * int.sizeof);\nif (u != 0)\n    size = u / int.sizeof;\n\n\n---\nExample:\nslice extending\n---\nint[] slice = new int[](1000);\nint*  p     = slice.ptr;\n\n//Check we have access to capacity before attempting the extend\nif (slice.capacity)\n{\n    //Try to extend slice by 1000 elements, preferred 2000.\n    size_t u = GC.extend(p, 1000 * int.sizeof, 2000 * int.sizeof);\n    if (u != 0)\n    {\n        slice.length = slice.capacity;\n        assert(slice.length >= 2000);\n    }\n}\n\n\n---\n",
						"originalType": "pure nothrow size_t(void* p, size_t mx, size_t sz, const TypeInfo ti = null)",
						"endline": 480
					},
					{
						"kind": "function",
						"line": 522,
						"storageClass": [
							"static"
						],
						"deco": "FNbmZm",
						"endchar": 5,
						"char": 19,
						"parameters": [
							{
								"deco": "m",
								"name": "sz"
							}
						],
						"name": "reserve",
						"comment": " Requests that at least sz bytes of memory be obtained from the operating\n system and marked as free.\n\n Params:\n  sz = The desired size in bytes.\n\n Returns:\n  The actual number of bytes reserved or zero on error.\n",
						"originalType": "nothrow size_t(size_t sz)",
						"endline": 525
					},
					{
						"kind": "function",
						"line": 539,
						"storageClass": [
							"static"
						],
						"deco": "FNaNbPvZv",
						"endchar": 5,
						"char": 17,
						"parameters": [
							{
								"deco": "Pv",
								"name": "p"
							}
						],
						"name": "free",
						"comment": " Deallocates the memory referenced by p.  If p is null, no action\n occurs.  If p references memory not originally allocated by this\n garbage collector, or if it points to the interior of a memory block,\n no action will be taken.  The block will not be finalized regardless\n of whether the FINALIZE attribute is set.  If finalization is desired,\n use delete instead.\n\n Params:\n  p = A pointer to the root of a valid memory block or to null.\n",
						"endline": 542
					},
					{
						"kind": "function",
						"line": 560,
						"storageClass": [
							"static"
						],
						"deco": "FNbPNgvZPNgv",
						"endchar": 5,
						"char": 25,
						"parameters": [
							{
								"deco": "PNgv",
								"name": "p"
							}
						],
						"name": "addrOf",
						"comment": " Returns the base address of the memory block containing p.  This value\n is useful to determine whether p is an interior pointer, and the result\n may be passed to routines such as sizeOf which may otherwise fail.  If p\n references memory not originally allocated by this garbage collector, if\n p is null, or if the garbage collector does not support this operation,\n null will be returned.\n\n Params:\n  p = A pointer to the root or the interior of a valid memory block or to\n      null.\n\n Returns:\n  The base address of the memory block referenced by p or null on error.\n",
						"endline": 563
					},
					{
						"kind": "function",
						"line": 567,
						"storageClass": [
							"static"
						],
						"deco": "FNaNbPvZPv",
						"endchar": 5,
						"char": 18,
						"parameters": [
							{
								"deco": "Pv",
								"name": "p"
							}
						],
						"name": "addrOf",
						"comment": "ditto\n",
						"endline": 570
					},
					{
						"kind": "function",
						"line": 586,
						"storageClass": [
							"static"
						],
						"deco": "FNbxPvZm",
						"endchar": 5,
						"char": 19,
						"parameters": [
							{
								"deco": "xPv",
								"name": "p"
							}
						],
						"name": "sizeOf",
						"comment": " Returns the true size of the memory block referenced by p.  This value\n represents the maximum number of bytes for which a call to realloc may\n resize the existing block in place.  If p references memory not\n originally allocated by this garbage collector, points to the interior\n of a memory block, or if p is null, zero will be returned.\n\n Params:\n  p = A pointer to the root of a valid memory block or to null.\n\n Returns:\n  The size in bytes of the memory block referenced by p or zero on error.\n",
						"originalType": "nothrow size_t(in void* p)",
						"endline": 589
					},
					{
						"kind": "function",
						"line": 593,
						"storageClass": [
							"static"
						],
						"deco": "FNaNbPvZm",
						"endchar": 5,
						"char": 19,
						"parameters": [
							{
								"deco": "Pv",
								"name": "p"
							}
						],
						"name": "sizeOf",
						"comment": "ditto\n",
						"originalType": "pure nothrow size_t(void* p)",
						"endline": 596
					},
					{
						"kind": "function",
						"line": 624,
						"storageClass": [
							"static"
						],
						"deco": "FNbxPvZS4core6memory8BlkInfo_",
						"endchar": 5,
						"char": 20,
						"parameters": [
							{
								"deco": "xPv",
								"name": "p"
							}
						],
						"name": "query",
						"comment": " Returns aggregate information about the memory block containing p.  If p\n references memory not originally allocated by this garbage collector, if\n p is null, or if the garbage collector does not support this operation,\n BlkInfo.init will be returned.  Typically, support for this operation\n is dependent on support for addrOf.\n\n Params:\n  p = A pointer to the root or the interior of a valid memory block or to\n      null.\n\n Returns:\n  Information regarding the memory block referenced by p or BlkInfo.init\n  on error.\n",
						"originalType": "nothrow BlkInfo(in void* p)",
						"endline": 627
					},
					{
						"kind": "function",
						"line": 631,
						"storageClass": [
							"static"
						],
						"deco": "FNaNbPvZS4core6memory8BlkInfo_",
						"endchar": 5,
						"char": 20,
						"parameters": [
							{
								"deco": "Pv",
								"name": "p"
							}
						],
						"name": "query",
						"comment": "ditto\n",
						"originalType": "pure nothrow BlkInfo(void* p)",
						"endline": 634
					},
					{
						"kind": "function",
						"line": 682,
						"storageClass": [
							"static"
						],
						"deco": "FNbxPvZv",
						"endchar": 5,
						"char": 17,
						"parameters": [
							{
								"deco": "xPv",
								"name": "p"
							}
						],
						"name": "addRoot",
						"comment": " Adds an internal root pointing to the GC memory block referenced by p.\n As a result, the block referenced by p itself and any blocks accessible\n via it will be considered live until the root is removed again.\n\n If p is null, no operation is performed.\n\n Params:\n  p = A pointer into a GC-managed memory block or null.\n\n Example:\n ---\n // Typical C-style callback mechanism; the passed function\n // is invoked with the user-supplied context pointer at a\n // later point.\n extern(C) void addCallback(void function(void*), void*);\n\n // Allocate an object on the GC heap (this would usually be\n // some application-specific context data).\n auto context = new Object;\n\n // Make sure that it is not collected even if it is no\n // longer referenced from D code (stack, GC heap, …).\n GC.addRoot(cast(void*)context);\n\n // Also ensure that a moving collector does not relocate\n // the object.\n GC.setAttr(cast(void*)context, GC.BlkAttr.NO_MOVE);\n\n // Now context can be safely passed to the C library.\n addCallback(&myHandler, cast(void*)context);\n\n extern(C) void myHandler(void* ctx)\n {\n     // Assuming that the callback is invoked only once, the\n     // added root can be removed again now to allow the GC\n     // to collect it later.\n     GC.removeRoot(ctx);\n     GC.clrAttr(ctx, GC.BlkAttr.NO_MOVE);\n\n     auto context = cast(Object)ctx;\n     // Use context here…\n }\n ---\n",
						"originalType": "nothrow void(in void* p)",
						"endline": 685
					},
					{
						"kind": "function",
						"line": 696,
						"storageClass": [
							"static"
						],
						"deco": "FNbxPvZv",
						"endchar": 5,
						"char": 17,
						"parameters": [
							{
								"deco": "xPv",
								"name": "p"
							}
						],
						"name": "removeRoot",
						"comment": " Removes the memory block referenced by p from an internal list of roots\n to be scanned during a collection.  If p is null or is not a value\n previously passed to addRoot() then no operation is performed.\n\n Params:\n  p = A pointer into a GC-managed memory block or null.\n",
						"originalType": "nothrow void(in void* p)",
						"endline": 699
					},
					{
						"kind": "function",
						"line": 730,
						"storageClass": [
							"static"
						],
						"deco": "FNbNixPvmxC8TypeInfoZv",
						"endchar": 5,
						"char": 17,
						"parameters": [
							{
								"deco": "xPv",
								"name": "p"
							},
							{
								"deco": "m",
								"name": "sz"
							},
							{
								"deco": "xC8TypeInfo",
								"default": "null",
								"name": "ti"
							}
						],
						"name": "addRange",
						"comment": " Adds $(D p[0 .. sz]) to the list of memory ranges to be scanned for\n pointers during a collection. If p is null, no operation is performed.\n\n Note that $(D p[0 .. sz]) is treated as an opaque range of memory assumed\n to be suitably managed by the caller. In particular, if p points into a\n GC-managed memory block, addRange does $(I not) mark this block as live.\n\n Params:\n  p  = A pointer to a valid memory address or to null.\n  sz = The size in bytes of the block to add. If sz is zero then the\n       no operation will occur. If p is null then sz must be zero.\n  ti = TypeInfo to describe the memory. The GC might use this information\n       to improve scanning for pointers or to call finalizers\n\n Example:\n ---\n // Allocate a piece of memory on the C heap.\n enum size = 1_000;\n auto rawMemory = core.stdc.stdlib.malloc(size);\n\n // Add it as a GC range.\n GC.addRange(rawMemory, size);\n\n // Now, pointers to GC-managed memory stored in\n // rawMemory will be recognized on collection.\n ---\n",
						"originalType": "nothrow @nogc void(in void* p, size_t sz, const TypeInfo ti = null)",
						"endline": 733
					},
					{
						"kind": "function",
						"line": 745,
						"storageClass": [
							"static"
						],
						"deco": "FNbNixPvZv",
						"endchar": 5,
						"char": 17,
						"parameters": [
							{
								"deco": "xPv",
								"name": "p"
							}
						],
						"name": "removeRange",
						"comment": " Removes the memory range starting at p from an internal list of ranges\n to be scanned during a collection. If p is null or does not represent\n a value previously passed to addRange() then no operation is\n performed.\n\n Params:\n  p  = A pointer to a valid memory address or to null.\n",
						"originalType": "nothrow @nogc void(in void* p)",
						"endline": 748
					},
					{
						"kind": "function",
						"line": 761,
						"storageClass": [
							"static"
						],
						"deco": "FxAvZv",
						"endchar": 5,
						"char": 17,
						"parameters": [
							{
								"deco": "xAv",
								"name": "segment"
							}
						],
						"name": "runFinalizers",
						"comment": " Runs any finalizer that is located in address range of the\n given code segment.  This is used before unloading shared\n libraries.  All matching objects which have a finalizer in this\n code segment are assumed to be dead, using them while or after\n calling this method has undefined behavior.\n\n Params:\n  segment = address range of a code segment.\n",
						"originalType": "void(in void[] segment)",
						"endline": 764
					}
				],
				"char": 1,
				"name": "GC",
				"comment": " This struct encapsulates all garbage collection functionality for the D\n programming language.\n"
			}
		],
		"name": "core.memory",
		"comment": " This module provides an interface to the garbage collector used by\n applications written in the D programming language. It allows the\n garbage collector in the runtime to be swapped without affecting\n binary compatibility of applications.\n\n Using this module is not necessary in typical D code. It is mostly\n useful when doing low-level _memory management.\n\n Notes_to_implementors:\n $(UL\n $(LI On POSIX systems, the signals SIGUSR1 and SIGUSR2 are reserved\n   by this module for use in the garbage collector implementation.\n   Typically, they will be used to stop and resume other threads\n   when performing a collection, but an implementation may choose\n   not to use this mechanism (or not stop the world at all, in the\n   case of concurrent garbage collectors).)\n\n $(LI Registers, the stack, and any other _memory locations added through\n   the $(D GC.$(LREF addRange)) function are always scanned conservatively.\n   This means that even if a variable is e.g. of type $(D float),\n   it will still be scanned for possible GC pointers. And, if the\n   word-interpreted representation of the variable matches a GC-managed\n   _memory block's address, that _memory block is considered live.)\n\n $(LI Implementations are free to scan the non-root heap in a precise\n   manner, so that fields of types like $(D float) will not be considered\n   relevant when scanning the heap. Thus, casting a GC pointer to an\n   integral type (e.g. $(D size_t)) and storing it in a field of that\n   type inside the GC heap may mean that it will not be recognized\n   if the _memory block was allocated with precise type info or with\n   the $(D GC.BlkAttr.$(LREF NO_SCAN)) attribute.)\n\n $(LI Destructors will always be executed while other threads are\n   active; that is, an implementation that stops the world must not\n   execute destructors until the world has been resumed.)\n\n $(LI A destructor of an object must not access object references\n   within the object. This means that an implementation is free to\n   optimize based on this rule.)\n\n $(LI An implementation is free to perform heap compaction and copying\n   so long as no valid GC pointers are invalidated in the process.\n   However, _memory allocated with $(D GC.BlkAttr.$(LREF NO_MOVE)) must\n   not be moved/copied.)\n\n $(LI Implementations must support interior pointers. That is, if the\n   only reference to a GC-managed _memory block points into the\n   middle of the block rather than the beginning (for example), the\n   GC must consider the _memory block live. The exception to this\n   rule is when a _memory block is allocated with the\n   $(D GC.BlkAttr.$(LREF NO_INTERIOR)) attribute; it is the user's\n   responsibility to make sure such _memory blocks have a proper pointer\n   to them when they should be considered live.)\n\n $(LI It is acceptable for an implementation to store bit flags into\n   pointer values and GC-managed _memory blocks, so long as such a\n   trick is not visible to the application. In practice, this means\n   that only a stop-the-world collector can do this.)\n\n $(LI Implementations are free to assume that GC pointers are only\n   stored on word boundaries. Unaligned pointers may be ignored\n   entirely.)\n\n $(LI Implementations are free to run collections at any point. It is,\n   however, recommendable to only do so when an allocation attempt\n   happens and there is insufficient _memory available.)\n )\n\n Copyright: Copyright Sean Kelly 2005 - 2009.\n License:   $(LINK2 http://www.boost.org/LICENSE_1_0.txt, Boost License 1.0)\n Authors:   Sean Kelly, Alex Rønne Petersen\n Source:    $(DRUNTIMESRC core/_memory.d)\n"
	},
	{
		"kind": "module",
		"file": "../druntime/src/object_.d",
		"members": [
			{
				"kind": "class",
				"line": 67,
				"members": [
					{
						"kind": "function",
						"line": 72,
						"deco": "FZAya",
						"endchar": 5,
						"char": 12,
						"name": "toString",
						"comment": " Convert Object to a human readable string.\n",
						"endline": 75
					},
					{
						"kind": "function",
						"line": 80,
						"deco": "FNbNeZm",
						"endchar": 5,
						"char": 12,
						"name": "toHash",
						"comment": " Compute hash function for Object.\n",
						"originalType": "nothrow @trusted size_t()",
						"endline": 84
					},
					{
						"kind": "function",
						"line": 95,
						"deco": "FC6ObjectZi",
						"endchar": 5,
						"char": 9,
						"parameters": [
							{
								"deco": "C6Object",
								"name": "o"
							}
						],
						"name": "opCmp",
						"comment": " Compare with another Object obj.\n Returns:\n  $(TABLE\n  $(TR $(TD this &lt; obj) $(TD &lt; 0))\n  $(TR $(TD this == obj) $(TD 0))\n  $(TR $(TD this &gt; obj) $(TD &gt; 0))\n  )\n",
						"endline": 102
					},
					{
						"kind": "function",
						"line": 107,
						"deco": "FC6ObjectZb",
						"endchar": 5,
						"char": 10,
						"parameters": [
							{
								"deco": "C6Object",
								"name": "o"
							}
						],
						"name": "opEquals",
						"comment": " Returns !=0 if this object does have the same contents as obj.\n",
						"endline": 110
					},
					{
						"kind": "function",
						"line": 142,
						"storageClass": [
							"static"
						],
						"deco": "FAyaZC6Object",
						"endchar": 5,
						"char": 19,
						"parameters": [
							{
								"deco": "Aya",
								"name": "classname"
							}
						],
						"name": "factory",
						"comment": " Create instance of class specified by the fully qualified name\n classname.\n The class must either have no constructors or have\n a default constructor.\n Returns:\n   null if failed\n Example:\n ---\n module foo.bar;\n\n class C\n {\n     this() { x = 10; }\n     int x;\n }\n\n void main()\n {\n     auto c = cast(C)Object.factory(\"foo.bar.C\");\n     assert(c !is null && c.x == 10);\n }\n ---\n",
						"endline": 150
					}
				],
				"char": 1,
				"name": "Object",
				"comment": " All D class objects inherit from Object.\n"
			},
			{
				"kind": "function",
				"line": 156,
				"deco": "FxC6ObjectxC6ObjectZb",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "xC6Object",
						"name": "lhs"
					},
					{
						"deco": "xC6Object",
						"name": "rhs"
					}
				],
				"name": "opEquals",
				"comment": " Returns true if lhs and rhs are equal.\n",
				"originalType": "bool(const Object lhs, const Object rhs)",
				"endline": 160
			},
			{
				"kind": "struct",
				"line": 189,
				"members": [
					{
						"kind": "variable",
						"line": 191,
						"deco": "C14TypeInfo_Class",
						"char": 22,
						"name": "classinfo",
						"comment": ".classinfo for this interface (not for containing class)\n",
						"originalType": "TypeInfo_Class",
						"offset": 0
					},
					{
						"kind": "variable",
						"line": 193,
						"deco": "m",
						"char": 17,
						"name": "offset",
						"comment": "offset to Interface 'this' from Object 'this'\n",
						"originalType": "size_t",
						"offset": 24
					}
				],
				"char": 1,
				"name": "Interface",
				"comment": " Information about an interface.\n When an object is accessed via an interface, an Interface* appears as the\n first entry in its vtbl.\n"
			},
			{
				"kind": "alias",
				"line": 201,
				"deco": "C14TypeInfo_Class",
				"char": 22,
				"name": "Classinfo",
				"comment": " Runtime type information about a class. Can be retrieved for any class type\n or instance by using the .classinfo property.\n A pointer to this appears as the first entry in the class's vtbl[].\n"
			},
			{
				"kind": "struct",
				"line": 207,
				"members": [
					{
						"kind": "variable",
						"line": 209,
						"deco": "m",
						"char": 14,
						"name": "offset",
						"comment": "Offset of member from start of object\n",
						"originalType": "size_t",
						"offset": 0
					},
					{
						"kind": "variable",
						"line": 210,
						"deco": "C8TypeInfo",
						"char": 14,
						"name": "ti",
						"comment": "TypeInfo for this member\n",
						"originalType": "TypeInfo",
						"offset": 8
					}
				],
				"char": 1,
				"name": "OffsetTypeInfo",
				"comment": " Array of pairs giving the offset and type information for each\n member in an aggregate.\n"
			},
			{
				"kind": "class",
				"line": 218,
				"members": [
					{
						"kind": "function",
						"line": 264,
						"deco": "xFNbNexPvZm",
						"endchar": 79,
						"char": 12,
						"parameters": [
							{
								"deco": "xPv",
								"name": "p"
							}
						],
						"name": "getHash",
						"comment": "Returns a hash of the instance of a type.\n",
						"originalType": "const nothrow @trusted size_t(in void* p)",
						"endline": 264
					},
					{
						"kind": "function",
						"line": 267,
						"deco": "xFxPvxPvZb",
						"endchar": 68,
						"char": 10,
						"parameters": [
							{
								"deco": "xPv",
								"name": "p1"
							},
							{
								"deco": "xPv",
								"name": "p2"
							}
						],
						"name": "equals",
						"comment": "Compares two instances for equality.\n",
						"originalType": "const bool(in void* p1, in void* p2)",
						"endline": 267
					},
					{
						"kind": "function",
						"line": 270,
						"deco": "xFxPvxPvZi",
						"endchar": 75,
						"char": 9,
						"parameters": [
							{
								"deco": "xPv",
								"name": "p1"
							},
							{
								"deco": "xPv",
								"name": "p2"
							}
						],
						"name": "compare",
						"comment": "Compares two instances for &lt;, ==, or &gt;.\n",
						"originalType": "const int(in void* p1, in void* p2)",
						"endline": 270
					},
					{
						"kind": "function",
						"line": 273,
						"deco": "xFNaNbNdNiNfZm",
						"endchar": 73,
						"char": 22,
						"name": "tsize",
						"comment": "Returns size of the type.\n",
						"originalType": "const pure nothrow @nogc @property @safe size_t()",
						"endline": 273
					},
					{
						"kind": "function",
						"line": 276,
						"deco": "xFPvPvZv",
						"endchar": 5,
						"char": 10,
						"parameters": [
							{
								"deco": "Pv",
								"name": "p1"
							},
							{
								"deco": "Pv",
								"name": "p2"
							}
						],
						"name": "swap",
						"comment": "Swaps two instances of the type.\n",
						"endline": 285
					},
					{
						"kind": "function",
						"line": 289,
						"deco": "NgFNaNbNdNiZNgC8TypeInfo",
						"endchar": 78,
						"char": 31,
						"name": "next",
						"comment": "Get TypeInfo for 'next' type, as defined by what kind of type this is,\n\nnull if none.\n",
						"endline": 289
					},
					{
						"kind": "function",
						"line": 294,
						"deco": "xFNaNbNiNfZAxv",
						"endchar": 72,
						"char": 19,
						"name": "init",
						"comment": "Return default initializer.  If the type should be initialized to all zeros,\n\nan array with a null ptr and a length equal to the type size will be returned.\n",
						"endline": 294
					},
					{
						"kind": "function",
						"line": 298,
						"deco": "xFNaNbNdNiNfZk",
						"endchar": 71,
						"char": 20,
						"name": "flags",
						"comment": "Get flags for type: 1 means GC should scan for pointers,\n\n2 means arg of this type is passed in XMM register\n",
						"endline": 298
					},
					{
						"kind": "function",
						"line": 301,
						"deco": "xFZAxS6object14OffsetTypeInfo",
						"endchar": 58,
						"char": 29,
						"name": "offTi",
						"comment": "Get type information on the contents of the type; null if not available\n",
						"endline": 301
					},
					{
						"kind": "function",
						"line": 303,
						"deco": "xFPvZv",
						"endchar": 34,
						"char": 10,
						"parameters": [
							{
								"deco": "Pv",
								"name": "p"
							}
						],
						"name": "destroy",
						"comment": "Run the destructor on the object and all its sub-objects\n",
						"endline": 303
					},
					{
						"kind": "function",
						"line": 305,
						"deco": "xFPvZv",
						"endchar": 35,
						"char": 10,
						"parameters": [
							{
								"deco": "Pv",
								"name": "p"
							}
						],
						"name": "postblit",
						"comment": "Run the postblit on the object and all its sub-objects\n",
						"endline": 305
					},
					{
						"kind": "function",
						"line": 309,
						"deco": "xFNaNbNdNiNfZm",
						"endchar": 78,
						"char": 22,
						"name": "talign",
						"comment": "Return alignment of type\n",
						"originalType": "const pure nothrow @nogc @property @safe size_t()",
						"endline": 309
					},
					{
						"kind": "function",
						"line": 314,
						"deco": "FNbNfJC8TypeInfoJC8TypeInfoZi",
						"endchar": 5,
						"char": 26,
						"parameters": [
							{
								"deco": "C8TypeInfo",
								"storageClass": [
									"out"
								],
								"name": "arg1"
							},
							{
								"deco": "C8TypeInfo",
								"storageClass": [
									"out"
								],
								"name": "arg2"
							}
						],
						"name": "argTypes",
						"comment": " Return internal info on arguments fitting into 8byte.\n See X86-64 ABI 3.2.3\n",
						"endline": 318
					},
					{
						"kind": "function",
						"line": 322,
						"deco": "xFNaNbNdNiNfZPyv",
						"endchar": 87,
						"char": 32,
						"name": "rtInfo",
						"comment": " Return info used by the garbage collector to do precise collection.\n",
						"endline": 322
					}
				],
				"char": 1,
				"name": "TypeInfo",
				"comment": " Runtime type information about a type.\n Can be retrieved for any type using a\n <a href=\"../expression.html#typeidexpression\">TypeidExpression</a>.\n"
			},
			{
				"kind": "class",
				"line": 774,
				"base": "object.TypeInfo",
				"members": [
					{
						"kind": "variable",
						"line": 839,
						"deco": "Ag",
						"char": 17,
						"name": "m_init",
						"comment": " class static initializer\n (init.length gives size in bytes of class)\n",
						"offset": 16
					},
					{
						"kind": "variable",
						"line": 842,
						"deco": "Aya",
						"char": 17,
						"name": "name",
						"comment": "class name\n",
						"offset": 32
					},
					{
						"kind": "variable",
						"line": 843,
						"deco": "APv",
						"char": 17,
						"name": "vtbl",
						"comment": "virtual function pointer table\n",
						"offset": 48
					},
					{
						"kind": "variable",
						"line": 844,
						"deco": "AS6object9Interface",
						"char": 17,
						"name": "interfaces",
						"comment": "interfaces this class implements\n",
						"offset": 64
					},
					{
						"kind": "variable",
						"line": 845,
						"deco": "C14TypeInfo_Class",
						"char": 22,
						"name": "base",
						"comment": "base class\n",
						"originalType": "TypeInfo_Class",
						"offset": 80
					},
					{
						"kind": "function",
						"line": 872,
						"storageClass": [
							"static"
						],
						"deco": "FxAaZxC14TypeInfo_Class",
						"endchar": 5,
						"char": 34,
						"parameters": [
							{
								"deco": "xAa",
								"name": "classname"
							}
						],
						"name": "find",
						"comment": " Search all modules for TypeInfo_Class corresponding to classname.\n Returns: null if not found\n",
						"originalType": "const(TypeInfo_Class)(in char[] classname)",
						"endline": 886
					},
					{
						"kind": "function",
						"line": 891,
						"deco": "xFZC6Object",
						"endchar": 5,
						"char": 12,
						"name": "create",
						"comment": " Create instance of Object represented by 'this'.\n",
						"endline": 903
					}
				],
				"char": 1,
				"name": "TypeInfo_Class",
				"comment": " Runtime type information about a class.\n Can be retrieved from an object instance by using the\n $(LINK2 ../property.html#classinfo, .classinfo) property.\n"
			},
			{
				"kind": "class",
				"line": 1335,
				"members": [
					{
						"kind": "variable",
						"line": 1344,
						"deco": "Aya",
						"char": 17,
						"name": "msg",
						"comment": "A message describing the error.\n",
						"offset": 16
					},
					{
						"kind": "variable",
						"line": 1350,
						"deco": "Aya",
						"char": 17,
						"name": "file",
						"comment": " The _file name and line number of the D source code corresponding with\n where the error was thrown from.\n",
						"offset": 32
					},
					{
						"kind": "variable",
						"line": 1351,
						"deco": "m",
						"char": 17,
						"name": "line",
						"comment": "ditto\n",
						"originalType": "size_t",
						"offset": 48
					},
					{
						"kind": "variable",
						"line": 1358,
						"deco": "C6object9Throwable9TraceInfo",
						"char": 17,
						"name": "info",
						"comment": " The stack trace of where the error happened. This is an opaque object\n that can either be converted to $(D string), or iterated over with $(D\n foreach) to extract the items in the stack trace (as strings).\n",
						"originalType": "TraceInfo",
						"offset": 56
					},
					{
						"kind": "variable",
						"line": 1366,
						"deco": "C6object9Throwable",
						"char": 17,
						"name": "next",
						"comment": " A reference to the _next error in the list. This is used when a new\n $(D Throwable) is thrown from inside a $(D catch) block. The originally\n caught $(D Exception) will be chained to the new $(D Throwable) via this\n field.\n",
						"originalType": "Throwable",
						"offset": 64
					},
					{
						"kind": "function",
						"line": 1388,
						"storageClass": [
							"override"
						],
						"deco": "FZAya",
						"endchar": 5,
						"char": 21,
						"name": "toString",
						"comment": " Overrides $(D Object.toString) and returns the error message.\n Internally this forwards to the $(D toString) overload that\n takes a $(PARAM sink) delegate.\n",
						"endline": 1393,
						"overrides": [
							"object.Object.toString"
						]
					},
					{
						"kind": "function",
						"line": 1401,
						"deco": "xFMDFxAaZvZv",
						"endchar": 5,
						"char": 10,
						"parameters": [
							{
								"deco": "DFxAaZv",
								"storageClass": [
									"scope"
								],
								"name": "sink"
							}
						],
						"name": "toString",
						"comment": " The Throwable hierarchy uses a toString overload that takes a\n $(PARAM sink) delegate to avoid GC allocations, which cannot be\n performed in certain error situations.  Override this $(D\n toString) method to customize the error message.\n",
						"originalType": "const void(scope void delegate(in char[]) sink)",
						"endline": 1428
					}
				],
				"char": 1,
				"name": "Throwable",
				"comment": "\n\n\n\n The base class of all thrown objects.\n\n All thrown objects must inherit from Throwable. Class $(D Exception), which\n derives from this class, represents the category of thrown objects that are\n safe to catch and handle. In principle, one should not catch Throwable\n objects that are not derived from $(D Exception), as they represent\n unrecoverable runtime errors. Certain runtime guarantees may fail to hold\n when these errors are thrown, making it unsafe to continue execution after\n catching them.\n"
			},
			{
				"kind": "function",
				"line": 1442,
				"deco": "UPFPvZC6object9Throwable9TraceInfoZv",
				"endchar": 1,
				"char": 18,
				"parameters": [
					{
						"deco": "PFPvZC6object9Throwable9TraceInfo",
						"name": "h"
					}
				],
				"name": "rt_setTraceHandler",
				"comment": " Overrides the default trace hander with a user-supplied version.\n\n Params:\n  h = The new trace handler.  Set to null to use the default handler.\n",
				"originalType": "extern (C) void(TraceHandler h)",
				"endline": 1445
			},
			{
				"kind": "function",
				"line": 1450,
				"deco": "UZPFPvZC6object9Throwable9TraceInfo",
				"endchar": 1,
				"char": 25,
				"name": "rt_getTraceHandler",
				"comment": " Return the current trace handler\n",
				"originalType": "extern (C) TraceHandler()",
				"endline": 1453
			},
			{
				"kind": "function",
				"line": 1469,
				"deco": "UPvZC6object9Throwable9TraceInfo",
				"endchar": 1,
				"char": 32,
				"parameters": [
					{
						"deco": "Pv",
						"default": "null",
						"name": "ptr"
					}
				],
				"name": "_d_traceContext",
				"comment": " This function will be called when an exception is constructed.  The\n user-supplied trace handler will be called if one has been supplied,\n otherwise no trace will be generated.\n\n Params:\n  ptr = A pointer to the location from which to generate the trace, or null\n        if the trace should be generated from within the trace handler\n        itself.\n\n Returns:\n  An object describing the current calling context or null if no handler is\n  supplied.\n",
				"originalType": "extern (C) Throwable.TraceInfo(void* ptr = null)",
				"endline": 1474
			},
			{
				"kind": "class",
				"line": 1485,
				"base": "object.Throwable",
				"members": [
					{
						"kind": "constructor",
						"line": 1494,
						"deco": "FNaNbNiNfAyaAyamC6object9ThrowableZC9Exception",
						"endchar": 5,
						"char": 30,
						"parameters": [
							{
								"deco": "Aya",
								"name": "msg"
							},
							{
								"deco": "Aya",
								"default": "__FILE__",
								"name": "file"
							},
							{
								"deco": "m",
								"default": "cast(ulong)__LINE__",
								"name": "line"
							},
							{
								"deco": "C6object9Throwable",
								"default": "null",
								"name": "next"
							}
						],
						"name": "this",
						"comment": " Creates a new instance of Exception. The next parameter is used\n internally and should always be $(D null) when passed by user code.\n This constructor does not automatically throw the newly-created\n Exception; the $(D throw) statement should be used for that purpose.\n",
						"originalType": "pure nothrow @nogc @safe (string msg, string file = __FILE__, size_t line = __LINE__, Throwable next = null)",
						"endline": 1497
					}
				],
				"char": 1,
				"name": "Exception",
				"comment": " The base class of all errors that are safe to catch and handle.\n\n In principle, only thrown objects derived from this class are safe to catch\n inside a $(D catch) block. Thrown objects not derived from Exception\n represent runtime errors that should not be caught, as certain runtime\n guarantees may not hold, making it unsafe to continue program execution.\n"
			},
			{
				"kind": "class",
				"line": 1542,
				"base": "object.Throwable",
				"members": [
					{
						"kind": "constructor",
						"line": 1550,
						"deco": "FNaNbNiNfAyaC6object9ThrowableZC6object5Error",
						"endchar": 5,
						"char": 30,
						"parameters": [
							{
								"deco": "Aya",
								"name": "msg"
							},
							{
								"deco": "C6object9Throwable",
								"default": "null",
								"name": "next"
							}
						],
						"name": "this",
						"comment": " Creates a new instance of Error. The next parameter is used\n internally and should always be $(D null) when passed by user code.\n This constructor does not automatically throw the newly-created\n Error; the $(D throw) statement should be used for that purpose.\n",
						"originalType": "pure nothrow @nogc @safe (string msg, Throwable next = null)",
						"endline": 1554
					},
					{
						"kind": "variable",
						"line": 1564,
						"deco": "C6object9Throwable",
						"char": 17,
						"name": "bypassedException",
						"comment": "The first $(D Exception) which was bypassed when this Error was thrown,\n\nor $(D null) if no $(D Exception)s were pending.\n",
						"originalType": "Throwable",
						"offset": 72
					}
				],
				"char": 1,
				"name": "Error",
				"comment": " The base class of all unrecoverable runtime errors.\n\n This represents the category of $(D Throwable) objects that are $(B not)\n safe to catch and handle. In principle, one should not catch Error\n objects, as they represent unrecoverable runtime errors.\n Certain runtime guarantees may fail to hold when these errors are\n thrown, making it unsafe to continue execution after catching them.\n"
			},
			{
				"kind": "alias",
				"line": 1793,
				"deco": "C6object6Object7Monitor",
				"char": 29,
				"name": "IMonitor",
				"comment": "\n\n\n"
			},
			{
				"kind": "template",
				"line": 2472,
				"constraint": "is(T == class)",
				"members": [
					{
						"kind": "function",
						"line": 2472,
						"endchar": 1,
						"char": 6,
						"type": "void(T obj)",
						"parameters": [
							{
								"type": "T",
								"name": "obj"
							}
						],
						"name": "destroy",
						"endline": 2475
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": "    Destroys the given object and puts it in an invalid state. It's used to\n    destroy an object so that any cleanup which its destructor or finalizer\n    does is done and so that it no longer references any other objects. It does\n    $(I not) initiate a GC cycle or free any GC memory.\n",
				"name": "destroy"
			},
			{
				"kind": "template",
				"line": 2662,
				"members": [
					{
						"kind": "function",
						"line": 2662,
						"endchar": 1,
						"char": 18,
						"type": "pure nothrow @property size_t(T[] arr)",
						"parameters": [
							{
								"type": "T[]",
								"name": "arr"
							}
						],
						"name": "capacity",
						"endline": 2665
					}
				],
				"char": 18,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": " (Property) Get the current capacity of a slice. The capacity is the size\n that the slice can grow to before the underlying array must be\n reallocated or extended.\n\n If an append must reallocate a slice with no possibility of extension, then\n 0 is returned. This happens when the slice references a static array, or\n if another slice references elements past the end of the current slice.\n\n Note: The capacity of a slice may be impacted by operations on other slices.\nExample:\n\n---\n//Static array slice: no capacity\nint[4] sarray = [1, 2, 3, 4];\nint[]  slice  = sarray[];\nassert(sarray.capacity == 0);\n//Appending to slice will reallocate to a new array\nslice ~= 5;\nassert(slice.capacity >= 5);\n\n//Dynamic array slices\nint[] a = [1, 2, 3, 4];\nint[] b = a[1 .. $];\nint[] c = a[1 .. $ - 1];\ndebug(SENTINEL) {} else // non-zero capacity very much depends on the array and GC implementation\n{\n    assert(a.capacity != 0);\n    assert(a.capacity == b.capacity + 1); //both a and b share the same tail\n}\nassert(c.capacity == 0);              //an append to c must relocate c.\n\n---\n",
				"name": "capacity"
			},
			{
				"kind": "template",
				"line": 2697,
				"members": [
					{
						"kind": "function",
						"line": 2697,
						"endchar": 1,
						"char": 8,
						"type": "pure nothrow @trusted size_t(ref T[] arr, size_t newcapacity)",
						"parameters": [
							{
								"storageClass": [
									"ref"
								],
								"type": "T[]",
								"name": "arr"
							},
							{
								"type": "size_t",
								"name": "newcapacity"
							}
						],
						"name": "reserve",
						"endline": 2700
					}
				],
				"char": 8,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": " Reserves capacity for a slice. The capacity is the size\n that the slice can grow to before the underlying array must be\n reallocated or extended.\n\n The return value is the new capacity of the array (which may be larger than\n the requested capacity).\nExample:\n\n---\n//Static array slice: no capacity. Reserve relocates.\nint[4] sarray = [1, 2, 3, 4];\nint[]  slice  = sarray[];\nauto u = slice.reserve(8);\nassert(u >= 8);\nassert(sarray.ptr !is slice.ptr);\nassert(slice.capacity == u);\n\n//Dynamic array slices\nint[] a = [1, 2, 3, 4];\na.reserve(8); //prepare a for appending 4 more items\nauto p = a.ptr;\nu = a.capacity;\na ~= [5, 6, 7, 8];\nassert(p == a.ptr);      //a should not have been reallocated\nassert(u == a.capacity); //a should not have been extended\n\n---\n",
				"name": "reserve"
			},
			{
				"kind": "template",
				"line": 2744,
				"members": [
					{
						"kind": "function",
						"line": 2744,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 21,
						"type": "nothrow ref inout(T[])(auto ref inout(T[]) arr)",
						"parameters": [
							{
								"storageClass": [
									"auto",
									"ref"
								],
								"type": "inout(T[])",
								"name": "arr"
							}
						],
						"name": "assumeSafeAppend",
						"endline": 2748
					}
				],
				"char": 21,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": " Assume that it is safe to append to this array. Appends made to this array\n after calling this function may append in place, even if the array was a\n slice of a larger array to begin with.\n\n Use this only when it is certain there are no elements in use beyond the\n array in the memory block.  If there are, those elements will be\n overwritten by appending to this array.\n\n Calling this function, and then using references to data located after the\n given array results in undefined behavior.\n\n Returns:\n   The input is returned.\nExample:\n\n---\nint[] a = [1, 2, 3, 4];\n\n// Without assumeSafeAppend. Appending relocates.\nint[] b = a [0 .. 3];\nb ~= 5;\nassert(a.ptr != b.ptr);\n\ndebug(SENTINEL) {} else\n{\n    // With assumeSafeAppend. Appending overwrites.\n    int[] c = a [0 .. 3];\n    c.assumeSafeAppend() ~= 5;\n    assert(a.ptr == c.ptr);\n}\n\n---\n",
				"name": "assumeSafeAppend"
			},
			{
				"kind": "template",
				"line": 2851,
				"members": [
					{
						"kind": "function",
						"line": 2851,
						"endchar": 1,
						"char": 6,
						"type": "bool(T1[] a1, T2[] a2)",
						"parameters": [
							{
								"type": "T1[]",
								"name": "a1"
							},
							{
								"type": "T2[]",
								"name": "a2"
							}
						],
						"name": "_ArrayEq",
						"endline": 2861
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "T1"
					},
					{
						"kind": "type",
						"name": "T2"
					}
				],
				"comment": " Helper function used to see if two containers of different\n types have the same contents in the same sequence.\n",
				"name": "_ArrayEq"
			},
			{
				"kind": "template",
				"line": 2884,
				"members": [
					{
						"kind": "variable",
						"line": 2886,
						"init": "null",
						"storageClass": [
							"enum"
						],
						"char": 10,
						"name": "RTInfo"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": " Create RTInfo for type T\n",
				"name": "RTInfo"
			},
			{
				"kind": "template",
				"line": 2988,
				"constraint": "!is(const(T) : T)",
				"members": [
					{
						"kind": "function",
						"line": 2988,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 16,
						"type": "@property (T[] a)",
						"parameters": [
							{
								"type": "T[]",
								"name": "a"
							}
						],
						"name": "dup",
						"endline": 3000
					}
				],
				"char": 16,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": "Provide the .dup array property.\n",
				"name": "dup"
			},
			{
				"kind": "template",
				"line": 3004,
				"constraint": "is(const(T) : T)",
				"members": [
					{
						"kind": "function",
						"line": 3004,
						"endchar": 1,
						"char": 15,
						"type": "@property T[](const(T)[] a)",
						"parameters": [
							{
								"type": "const(T)[]",
								"name": "a"
							}
						],
						"name": "dup",
						"endline": 3012
					}
				],
				"char": 15,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": "ditto\n",
				"name": "dup"
			},
			{
				"kind": "template",
				"line": 3015,
				"members": [
					{
						"kind": "function",
						"line": 3015,
						"endchar": 1,
						"char": 15,
						"type": "@property @trusted T[](const(T)[] a)",
						"parameters": [
							{
								"type": "const(T)[]",
								"name": "a"
							}
						],
						"name": "dup",
						"endline": 3019
					}
				],
				"char": 15,
				"parameters": [
					{
						"kind": "type",
						"deco": "v",
						"name": "T"
					}
				],
				"comment": "ditto\n",
				"name": "dup"
			},
			{
				"kind": "template",
				"line": 3022,
				"members": [
					{
						"kind": "function",
						"line": 3022,
						"endchar": 1,
						"char": 26,
						"type": "@property immutable(T)[](T[] a)",
						"parameters": [
							{
								"type": "T[]",
								"name": "a"
							}
						],
						"name": "idup",
						"endline": 3032
					}
				],
				"char": 26,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": "Provide the .idup array property.\n",
				"name": "idup"
			},
			{
				"kind": "template",
				"line": 3035,
				"members": [
					{
						"kind": "function",
						"line": 3035,
						"endchar": 1,
						"char": 26,
						"type": "@property immutable(T)[](const(T)[] a)",
						"parameters": [
							{
								"type": "const(T)[]",
								"name": "a"
							}
						],
						"name": "idup",
						"endline": 3038
					}
				],
				"char": 26,
				"parameters": [
					{
						"kind": "type",
						"deco": "v",
						"name": "T"
					}
				],
				"comment": "ditto\n",
				"name": "idup"
			}
		],
		"name": "object",
		"comment": " Forms the symbols available to all D programs. Includes Object, which is\n the root of the class object hierarchy.  This module is implicitly\n imported.\n Macros:\n      WIKI = Object\n\n Copyright: Copyright Digital Mars 2000 - 2011.\n License:   $(WEB www.boost.org/LICENSE_1_0.txt, Boost License 1.0).\n Authors:   Walter Bright, Sean Kelly\n"
	},
	{
		"kind": "module",
		"file": "../phobos/std/csv.d",
		"members": [
			{
				"kind": "class",
				"line": 98,
				"base": "object.Exception",
				"members": [
					{
						"kind": "variable",
						"line": 101,
						"deco": "m",
						"char": 12,
						"name": "row",
						"comment": "\n",
						"originalType": "size_t",
						"offset": 72
					},
					{
						"kind": "variable",
						"line": 101,
						"deco": "m",
						"char": 17,
						"name": "col",
						"comment": "\n",
						"originalType": "size_t",
						"offset": 80
					}
				],
				"char": 1,
				"name": "CSVException",
				"comment": " Exception containing the row and column for when an exception was thrown.\n\n Numbering of both row and col start at one and corresponds to the location\n in the file rather than any specified header. Special consideration should\n be made when there is failure to match the header see $(LREF\n HeaderMismatchException) for details.\n\n When performing type conversions, $(XREF ConvException) is stored in the $(D\n next) field.\n"
			},
			{
				"kind": "class",
				"line": 154,
				"base": "std.csv.CSVException",
				"members": [
					{
						"kind": "variable",
						"line": 161,
						"deco": "Ayw",
						"char": 13,
						"name": "partialData",
						"comment": "Data pulled from input before finding a problem\n\n\n\nThis field is populated when using $(LREF csvReader)\n\nbut not by $(LREF csvNextToken) as this data will have\n\nalready been fed to the output range.\n",
						"offset": 88
					}
				],
				"char": 1,
				"name": "IncompleteCellException",
				"comment": " Exception thrown when a Token is identified to not be completed: a quote is\n found in an unquoted field, data continues after a closing quote, or the\n quoted field was not closed before data was empty.\n"
			},
			{
				"kind": "class",
				"line": 203,
				"base": "std.csv.CSVException",
				"members": [],
				"char": 1,
				"name": "HeaderMismatchException",
				"comment": " Exception thrown under different conditions based on the type of $(D\n Contents).\n\n Structure, Class, and Associative Array\n $(UL\n     $(LI When a header is provided but a matching column is not found)\n  )\n\n Other\n $(UL\n     $(LI When a header is provided but a matching column is not found)\n     $(LI Order did not match that found in the input)\n  )\n\n Since a row and column is not meaningful when a column specified by the\n header is not found in the data, both row and col will be zero. Otherwise\n row is always one and col is the first instance found in header that\n occurred before the previous starting at one.\n"
			},
			{
				"kind": "enum",
				"line": 241,
				"members": [
					{
						"kind": "enum member",
						"line": 244,
						"value": "0",
						"char": 5,
						"name": "ignore",
						"comment": "No exceptions are thrown due to incorrect CSV.\n"
					},
					{
						"kind": "enum member",
						"line": 246,
						"value": "1",
						"char": 5,
						"name": "throwException",
						"comment": "Use exceptions when input has incorrect CSV.\n"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "Malformed",
				"comment": " Determines the behavior for when an error is detected.\n\n Disabling exception will follow these rules:\n $(UL\n     $(LI A quote can appear in a field if the field was not quoted.)\n     $(LI If in a quoted field any quote by itself, not at the end of a\n     field, will end processing for that field.)\n     $(LI The field is ended when there is no input, even if the quote was\n     not closed.)\n     $(LI If the given header does not match the order in the input, the\n     content will return as it is found in the input.)\n     $(LI If the given header contains columns not found in the input they\n     will be ignored.)\n  )\n"
			},
			{
				"kind": "template",
				"line": 317,
				"constraint": "isInputRange!Range && is(Unqual!(ElementType!Range) == dchar) && isSomeChar!Separator && !is(Contents T : T[U], U : string)",
				"members": [
					{
						"kind": "function",
						"line": 317,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "(Range input, Separator delimiter = ',', Separator quote = '\"')",
						"parameters": [
							{
								"type": "Range",
								"name": "input"
							},
							{
								"default": "','",
								"type": "Separator",
								"name": "delimiter"
							},
							{
								"default": "'\"'",
								"type": "Separator",
								"name": "quote"
							}
						],
						"name": "csvReader",
						"endline": 326
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"default": "string",
						"name": "Contents"
					},
					{
						"kind": "value",
						"defaultValue": "Malformed.throwException",
						"deco": "E3std3csv9Malformed",
						"name": "ErrorLevel"
					},
					{
						"kind": "type",
						"name": "Range"
					},
					{
						"kind": "type",
						"defaultDeco": "a",
						"name": "Separator"
					}
				],
				"comment": " Returns an input range for iterating over records found in $(D\n input).\n\n The $(D Contents) of the input can be provided if all the records are the\n same type such as all integer data:\n\n -------\n string str = `76,26,22`;\n int[] ans = [76,26,22];\n auto records = csvReader!int(str);\n\n foreach(record; records)\n {\n     assert(equal(record, ans));\n }\n -------\n\n Example using a struct with modified delimiter:\n\n -------\n string str = \"Hello;65;63.63\\nWorld;123;3673.562\";\n struct Layout\n {\n     string name;\n     int value;\n     double other;\n }\n\n auto records = csvReader!Layout(str,';');\n\n foreach(record; records)\n {\n     writeln(record.name);\n     writeln(record.value);\n     writeln(record.other);\n }\n -------\n\n Specifying $(D ErrorLevel) as Malformed.ignore will lift restrictions\n on the format. This example shows that an exception is not thrown when\n finding a quote in a field not quoted.\n\n -------\n string str = \"A \\\" is now part of the data\";\n auto records = csvReader!(string,Malformed.ignore)(str);\n auto record = records.front;\n\n assert(record.front == str);\n -------\n\n Returns:\n        An input range R as defined by $(XREF range, isInputRange). When $(D\n        Contents) is a struct, class, or an associative array, the element\n        type of R is $(D Contents), otherwise the element type of R is itself\n        a range with element type $(D Contents).\n\n Throws:\n       $(LREF CSVException) When a quote is found in an unquoted field,\n       data continues after a closing quote, the quoted field was not\n       closed before data was empty, a conversion failed, or when the row's\n       length does not match the previous length.\n\n       $(LREF HeaderMismatchException)  when a header is provided but a\n       matching column is not found or the order did not match that found in\n       the input. Read the exception documentation for specific details of\n       when the exception is thrown for different types of $(D Contents).\n",
				"name": "csvReader"
			},
			{
				"kind": "template",
				"line": 401,
				"constraint": "isInputRange!Range && is(Unqual!(ElementType!Range) == dchar) && isSomeChar!Separator && isForwardRange!Header && isSomeString!(ElementType!Header)",
				"members": [
					{
						"kind": "function",
						"line": 401,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "(Range input, Header header, Separator delimiter = ',', Separator quote = '\"')",
						"parameters": [
							{
								"type": "Range",
								"name": "input"
							},
							{
								"type": "Header",
								"name": "header"
							},
							{
								"default": "','",
								"type": "Separator",
								"name": "delimiter"
							},
							{
								"default": "'\"'",
								"type": "Separator",
								"name": "quote"
							}
						],
						"name": "csvReader",
						"endline": 414
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"default": "string",
						"name": "Contents"
					},
					{
						"kind": "value",
						"defaultValue": "Malformed.throwException",
						"deco": "E3std3csv9Malformed",
						"name": "ErrorLevel"
					},
					{
						"kind": "type",
						"name": "Range"
					},
					{
						"kind": "type",
						"name": "Header"
					},
					{
						"kind": "type",
						"defaultDeco": "a",
						"name": "Separator"
					}
				],
				"comment": " An optional $(D header) can be provided. The first record will be read in\n as the header. If $(D Contents) is a struct then the header provided is\n expected to correspond to the fields in the struct. When $(D Contents) is\n not a type which can contain the entire record, the $(D header) must be\n provided in the same order as the input or an exception is thrown.\n\n Read only column \"b\":\n\n -------\n string str = \"a,b,c\\nHello,65,63.63\\nWorld,123,3673.562\";\n auto records = csvReader!int(str, [\"b\"]);\n\n auto ans = [[65],[123]];\n foreach(record; records)\n {\n     assert(equal(record, ans.front));\n     ans.popFront();\n }\n -------\n\n Read from header of different order:\n\n -------\n string str = \"a,b,c\\nHello,65,63.63\\nWorld,123,3673.562\";\n struct Layout\n {\n     int value;\n     double other;\n     string name;\n }\n\n auto records = csvReader!Layout(str, [\"b\",\"c\",\"a\"]);\n -------\n\n The header can also be left empty if the input contains a header but\n all columns should be iterated. The header from the input can always\n be accessed from the header field.\n\n -------\n string str = \"a,b,c\\nHello,65,63.63\\nWorld,123,3673.562\";\n auto records = csvReader(str, null);\n\n assert(records.header == [\"a\",\"b\",\"c\"]);\n -------\n\n Returns:\n        An input range R as defined by $(XREF range, isInputRange). When $(D\n        Contents) is a struct, class, or an associative array, the element\n        type of R is $(D Contents), otherwise the element type of R is itself\n        a range with element type $(D Contents).\n\n        The returned range provides a header field for accessing the header\n        from the input in array form.\n\n -------\n string str = \"a,b,c\\nHello,65,63.63\";\n auto records = csvReader(str, [\"a\"]);\n\n assert(records.header == [\"a\",\"b\",\"c\"]);\n -------\n\n Throws:\n       $(LREF CSVException) When a quote is found in an unquoted field,\n       data continues after a closing quote, the quoted field was not\n       closed before data was empty, a conversion failed, or when the row's\n       length does not match the previous length.\n\n       $(LREF HeaderMismatchException)  when a header is provided but a\n       matching column is not found or the order did not match that found in\n       the input. Read the exception documentation for specific details of\n       when the exception is thrown for different types of $(D Contents).\n",
				"name": "csvReader"
			},
			{
				"kind": "template",
				"line": 417,
				"constraint": "isInputRange!Range && is(Unqual!(ElementType!Range) == dchar) && isSomeChar!Separator && is(Header : typeof(null))",
				"members": [
					{
						"kind": "function",
						"line": 417,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "(Range input, Header header, Separator delimiter = ',', Separator quote = '\"')",
						"parameters": [
							{
								"type": "Range",
								"name": "input"
							},
							{
								"type": "Header",
								"name": "header"
							},
							{
								"default": "','",
								"type": "Separator",
								"name": "delimiter"
							},
							{
								"default": "'\"'",
								"type": "Separator",
								"name": "quote"
							}
						],
						"name": "csvReader",
						"endline": 429
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"default": "string",
						"name": "Contents"
					},
					{
						"kind": "value",
						"defaultValue": "Malformed.throwException",
						"deco": "E3std3csv9Malformed",
						"name": "ErrorLevel"
					},
					{
						"kind": "type",
						"name": "Range"
					},
					{
						"kind": "type",
						"name": "Header"
					},
					{
						"kind": "type",
						"defaultDeco": "a",
						"name": "Separator"
					}
				],
				"comment": "\nExample:\n\n---\nimport std.algorithm;\n\nstring str = `76;^26^;22`;\nint[] ans = [76,26,22];\nauto records = CsvReader!(int,Malformed.ignore,string,char,string[])\n      (str, ';', '^');\n\nforeach(record; records)\n{\n    assert(equal(record, ans));\n}\n\n---\n",
				"name": "csvReader"
			},
			{
				"kind": "template",
				"line": 1344,
				"constraint": "isSomeChar!Separator && isInputRange!Range && is(Unqual!(ElementType!Range) == dchar) && isOutputRange!(Output, dchar)",
				"members": [
					{
						"kind": "function",
						"line": 1344,
						"endchar": 1,
						"char": 6,
						"type": "void(ref Range input, ref Output ans, Separator sep, Separator quote, bool startQuoted = false)",
						"parameters": [
							{
								"storageClass": [
									"ref"
								],
								"type": "Range",
								"name": "input"
							},
							{
								"storageClass": [
									"ref"
								],
								"type": "Output",
								"name": "ans"
							},
							{
								"type": "Separator",
								"name": "sep"
							},
							{
								"type": "Separator",
								"name": "quote"
							},
							{
								"deco": "b",
								"default": "false",
								"name": "startQuoted"
							}
						],
						"name": "csvNextToken",
						"endline": 1444
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "Range"
					},
					{
						"kind": "value",
						"defaultValue": "Malformed.throwException",
						"deco": "E3std3csv9Malformed",
						"name": "ErrorLevel"
					},
					{
						"kind": "type",
						"name": "Separator"
					},
					{
						"kind": "type",
						"name": "Output"
					}
				],
				"comment": " Lower level control over parsing CSV\n\n This function consumes the input. After each call the input will\n start with either a delimiter or record break (\\n, \\r\\n, \\r) which\n must be removed for subsequent calls.\n\n params:\n       input = Any CSV input\n       ans   = The first field in the input\n       sep   = The character to represent a comma in the specification\n       quote = The character to represent a quote in the specification\n       startQuoted = Whether the input should be considered to already be in\n quotes\n\n Throws:\n       $(LREF IncompleteCellException) When a quote is found in an unquoted\n       field, data continues after a closing quote, or the quoted field was\n       not closed before data was empty.\nExample:\n\n---\nimport std.array : appender;\nstring str = \"65,63\\n123,3673\";\n\nauto a = appender!(char[])();\n\ncsvNextToken(str,a,',','\"');\nassert(a.data == \"65\");\nassert(str == \",63\\n123,3673\");\n\nstr.popFront();\na.shrinkTo(0);\ncsvNextToken(str,a,',','\"');\nassert(a.data == \"63\");\nassert(str == \"\\n123,3673\");\n\nstr.popFront();\na.shrinkTo(0);\ncsvNextToken(str,a,',','\"');\nassert(a.data == \"123\");\nassert(str == \",3673\");\n\n---\n",
				"name": "csvNextToken"
			}
		],
		"name": "std.csv",
		"comment": " Implements functionality to read Comma Separated Values and its variants\n from a input range of $(D dchar).\n\n Comma Separated Values provide a simple means to transfer and store\n tabular data. It has been common for programs to use their own\n variant of the CSV format. This parser will loosely follow the\n $(WEB tools.ietf.org/html/rfc4180, RFC-4180). CSV input should adhered\n to the following criteria, differences from RFC-4180 in parentheses.\n\n $(UL\n     $(LI A record is separated by a new line (CRLF,LF,CR))\n     $(LI A final record may end with a new line)\n     $(LI A header may be provided as the first record in input)\n     $(LI A record has fields separated by a comma (customizable))\n     $(LI A field containing new lines, commas, or double quotes\n          should be enclosed in double quotes (customizable))\n     $(LI Double quotes in a field are escaped with a double quote)\n     $(LI Each record should contain the same number of fields)\n   )\n\n Example:\n\n -------\n import std.algorithm;\n import std.array;\n import std.csv;\n import std.stdio;\n import std.typecons;\n\n void main()\n {\n     auto text = \"Joe,Carpenter,300000\\nFred,Blacksmith,400000\\r\\n\";\n\n     foreach(record; csvReader!(Tuple!(string,string,int))(text))\n     {\n         writefln(\"%s works as a %s and earns $%d per year\",\n                  record[0], record[1], record[2]);\n     }\n }\n -------\n\n When an input contains a header the $(D Contents) can be specified as an\n associative array. Passing null to signify that a header is present.\n\n -------\n auto text = \"Name,Occupation,Salary\\r\"\n     \"Joe,Carpenter,300000\\nFred,Blacksmith,400000\\r\\n\";\n\n foreach(record; csvReader!(string[string])\n         (text, null))\n {\n     writefln(\"%s works as a %s and earns $%s per year.\",\n              record[\"Name\"], record[\"Occupation\"],\n              record[\"Salary\"]);\n }\n -------\n\n This module allows content to be iterated by record stored in a struct,\n class, associative array, or as a range of fields. Upon detection of an\n error an CSVException is thrown (can be disabled). csvNextToken has been\n made public to allow for attempted recovery.\n\n Disabling exceptions will lift many restrictions specified above. A quote\n can appear in a field if the field was not quoted. If in a quoted field any\n quote by itself, not at the end of a field, will end processing for that\n field. The field is ended when there is no input, even if the quote was not\n closed.\n\n   See_Also:\n      $(WEB en.wikipedia.org/wiki/Comma-separated_values, Wikipedia\n      Comma-separated values)\n\n   Copyright: Copyright 2011\n   License:   $(WEB www.boost.org/LICENSE_1_0.txt, Boost License 1.0).\n   Authors:   Jesse Phillips\n   Source:    $(PHOBOSSRC std/_csv.d)\n"
	},
	{
		"kind": "module",
		"file": "../phobos/std/ascii.d",
		"members": [
			{
				"kind": "variable",
				"line": 37,
				"init": "\"0123456789ABCDEFabcdef\"",
				"storageClass": [
					"immutable"
				],
				"deco": "yAa",
				"char": 11,
				"name": "fullHexDigits",
				"comment": "0..9A..Fa..f\n",
				"originalType": "string"
			},
			{
				"kind": "variable",
				"line": 38,
				"init": "\"0123456789ABCDEF\"",
				"storageClass": [
					"immutable"
				],
				"deco": "yAa",
				"char": 11,
				"name": "hexDigits",
				"comment": "0..9A..F\n",
				"originalType": "string"
			},
			{
				"kind": "variable",
				"line": 39,
				"init": "\"0123456789abcdef\"",
				"storageClass": [
					"immutable"
				],
				"deco": "yAa",
				"char": 11,
				"name": "lowerHexDigits",
				"comment": "0..9a..f\n",
				"originalType": "string"
			},
			{
				"kind": "variable",
				"line": 40,
				"init": "\"0123456789\"",
				"storageClass": [
					"immutable"
				],
				"deco": "yAa",
				"char": 11,
				"name": "digits",
				"comment": "0..9\n",
				"originalType": "string"
			},
			{
				"kind": "variable",
				"line": 41,
				"init": "\"01234567\"",
				"storageClass": [
					"immutable"
				],
				"deco": "yAa",
				"char": 11,
				"name": "octalDigits",
				"comment": "0..7\n",
				"originalType": "string"
			},
			{
				"kind": "variable",
				"line": 42,
				"init": "\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"",
				"storageClass": [
					"immutable"
				],
				"deco": "yAa",
				"char": 11,
				"name": "letters",
				"comment": "A..Za..z\n",
				"originalType": "string"
			},
			{
				"kind": "variable",
				"line": 43,
				"init": "\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"",
				"storageClass": [
					"immutable"
				],
				"deco": "yAa",
				"char": 11,
				"name": "uppercase",
				"comment": "A..Z\n",
				"originalType": "string"
			},
			{
				"kind": "variable",
				"line": 44,
				"init": "\"abcdefghijklmnopqrstuvwxyz\"",
				"storageClass": [
					"immutable"
				],
				"deco": "yAa",
				"char": 11,
				"name": "lowercase",
				"comment": "a..z\n",
				"originalType": "string"
			},
			{
				"kind": "variable",
				"line": 45,
				"init": "\" \\x09\\x0b\\x0d\\x0a\\x0c\"",
				"storageClass": [
					"immutable"
				],
				"deco": "yAa",
				"char": 11,
				"name": "whitespace",
				"comment": "ASCII _whitespace\n",
				"originalType": "string"
			},
			{
				"kind": "enum",
				"line": 50,
				"members": [
					{
						"kind": "enum member",
						"line": 52,
						"value": "false",
						"char": 5,
						"name": "upper",
						"comment": "Upper case letters\n"
					},
					{
						"kind": "enum member",
						"line": 53,
						"value": "1",
						"char": 5,
						"name": "lower",
						"comment": "Lower case letters\n"
					}
				],
				"char": 1,
				"baseDeco": "b",
				"name": "LetterCase",
				"comment": "    Letter case specifier.\n"
			},
			{
				"kind": "variable",
				"line": 60,
				"init": "\"\\x0a\"",
				"storageClass": [
					"immutable"
				],
				"deco": "yAa",
				"char": 15,
				"name": "newline",
				"comment": "Newline sequence for this system.\n",
				"originalType": "string"
			},
			{
				"kind": "function",
				"line": 69,
				"deco": "FNaNbNiNfwZb",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "w",
						"name": "c"
					}
				],
				"name": "isAlphaNum",
				"comment": "    Params: c = The character to test.\n    Returns: Whether $(D c) is a letter or a number (0..9, a..z, A..Z).\nExample:\n\n---\nassert( isAlphaNum('A'));\nassert( isAlphaNum('1'));\nassert(!isAlphaNum('#'));\n\n// N.B.: does not return true for non-ASCII Unicode alphanumerics:\nassert(!isAlphaNum('á'));\n\n---\n",
				"endline": 72
			},
			{
				"kind": "function",
				"line": 99,
				"deco": "FNaNbNiNfwZb",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "w",
						"name": "c"
					}
				],
				"name": "isAlpha",
				"comment": "    Params: c = The character to test.\n    Returns: Whether $(D c) is an ASCII letter (A..Z, a..z).\nExample:\n\n---\nassert( isAlpha('A'));\nassert(!isAlpha('1'));\nassert(!isAlpha('#'));\n\n// N.B.: does not return true for non-ASCII Unicode alphabetic characters:\nassert(!isAlpha('á'));\n\n---\n",
				"endline": 103
			},
			{
				"kind": "function",
				"line": 130,
				"deco": "FNaNbNiNfwZb",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "w",
						"name": "c"
					}
				],
				"name": "isLower",
				"comment": "    Params: c = The character to test.\n    Returns: Whether $(D c) is a lowercase ASCII letter (a..z).\nExample:\n\n---\nassert( isLower('a'));\nassert(!isLower('A'));\nassert(!isLower('#'));\n\n// N.B.: does not return true for non-ASCII Unicode lowercase letters\nassert(!isLower('á'));\nassert(!isLower('Á'));\n\n---\n",
				"endline": 133
			},
			{
				"kind": "function",
				"line": 161,
				"deco": "FNaNbNiNfwZb",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "w",
						"name": "c"
					}
				],
				"name": "isUpper",
				"comment": "    Params: c = The character to test.\n    Returns: Whether $(D c) is an uppercase ASCII letter (A..Z).\nExample:\n\n---\nassert( isUpper('A'));\nassert(!isUpper('a'));\nassert(!isUpper('#'));\n\n// N.B.: does not return true for non-ASCII Unicode uppercase letters\nassert(!isUpper('á'));\nassert(!isUpper('Á'));\n\n---\n",
				"endline": 164
			},
			{
				"kind": "function",
				"line": 192,
				"deco": "FNaNbNiNfwZb",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "w",
						"name": "c"
					}
				],
				"name": "isDigit",
				"comment": "    Params: c = The character to test.\n    Returns: Whether $(D c) is a digit (0..9).\nExample:\n\n---\nassert( isDigit('3'));\nassert( isDigit('8'));\nassert(!isDigit('B'));\nassert(!isDigit('#'));\n\n// N.B.: does not return true for non-ASCII Unicode numbers\nassert(!isDigit('０')); // full-width digit zero (U+FF10)\nassert(!isDigit('４')); // full-width digit four (U+FF14)\n\n---\n",
				"endline": 195
			},
			{
				"kind": "function",
				"line": 224,
				"deco": "FNaNbNiNfwZb",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "w",
						"name": "c"
					}
				],
				"name": "isOctalDigit",
				"comment": "    Params: c = The character to test.\n    Returns: Whether $(D c) is a digit in base 8 (0..7).\nExample:\n\n---\nassert( isOctalDigit('0'));\nassert( isOctalDigit('7'));\nassert(!isOctalDigit('8'));\nassert(!isOctalDigit('A'));\nassert(!isOctalDigit('#'));\n\n---\n",
				"endline": 227
			},
			{
				"kind": "function",
				"line": 253,
				"deco": "FNaNbNiNfwZb",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "w",
						"name": "c"
					}
				],
				"name": "isHexDigit",
				"comment": "    Params: c = The character to test.\n    Returns: Whether $(D c) is a digit in base 16 (0..9, A..F, a..f).\nExample:\n\n---\nassert( isHexDigit('0'));\nassert( isHexDigit('A'));\nassert( isHexDigit('f')); // lowercase hex digits are accepted\nassert(!isHexDigit('g'));\nassert(!isHexDigit('G'));\nassert(!isHexDigit('#'));\n\n---\n",
				"endline": 256
			},
			{
				"kind": "function",
				"line": 285,
				"deco": "FNaNbNiNfwZb",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "w",
						"name": "c"
					}
				],
				"name": "isWhite",
				"comment": "    Params: c = The character to test.\n    Returns: Whether or not $(D c) is a whitespace character. That includes the\n    space, tab, vertical tab, form feed, carriage return, and linefeed\n    characters.\nExample:\n\n---\nassert( isWhite(' '));\nassert( isWhite('\\t'));\nassert( isWhite('\\n'));\nassert(!isWhite('1'));\nassert(!isWhite('a'));\nassert(!isWhite('#'));\n\n// N.B.: Does not return true for non-ASCII Unicode whitespace characters.\nstatic import std.uni;\nassert(std.uni.isWhite('\\u00A0'));\nassert(!isWhite('\\u00A0')); // std.ascii.isWhite\n\n---\n",
				"endline": 288
			},
			{
				"kind": "function",
				"line": 320,
				"deco": "FNaNbNiNfwZb",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "w",
						"name": "c"
					}
				],
				"name": "isControl",
				"comment": "    Params: c = The character to test.\n    Returns: Whether $(D c) is a control character.\nExample:\n\n---\nassert( isControl('\\0'));\nassert( isControl('\\022'));\nassert( isControl('\\n')); // newline is both whitespace and control\nassert(!isControl(' '));\nassert(!isControl('1'));\nassert(!isControl('a'));\nassert(!isControl('#'));\n\n// N.B.: non-ASCII Unicode control characters are not recognized:\nassert(!isControl('\\u0080'));\nassert(!isControl('\\u2028'));\nassert(!isControl('\\u2029'));\n\n---\n",
				"endline": 323
			},
			{
				"kind": "function",
				"line": 359,
				"deco": "FNaNbNiNfwZb",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "w",
						"name": "c"
					}
				],
				"name": "isPunctuation",
				"comment": "    Params: c = The character to test.\n    Returns: Whether or not $(D c) is a punctuation character. That includes\n    all ASCII characters which are not control characters, letters, digits, or\n    whitespace.\nExample:\n\n---\nassert( isPunctuation('.'));\nassert( isPunctuation(','));\nassert( isPunctuation(':'));\nassert( isPunctuation('!'));\nassert( isPunctuation('#'));\nassert( isPunctuation('~'));\nassert( isPunctuation('+'));\nassert( isPunctuation('_'));\n\nassert(!isPunctuation('1'));\nassert(!isPunctuation('a'));\nassert(!isPunctuation(' '));\nassert(!isPunctuation('\\n'));\nassert(!isPunctuation('\\0'));\n\n// N.B.: Non-ASCII Unicode punctuation characters are not recognized.\nassert(!isPunctuation('\\u2012')); // (U+2012 = en-dash)\n\n---\n",
				"endline": 362
			},
			{
				"kind": "function",
				"line": 403,
				"deco": "FNaNbNiNfwZb",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "w",
						"name": "c"
					}
				],
				"name": "isGraphical",
				"comment": "    Params: c = The character to test.\n    Returns: Whether or not $(D c) is a printable character other than the\n    space character.\nExample:\n\n---\nassert( isGraphical('1'));\nassert( isGraphical('a'));\nassert( isGraphical('#'));\nassert(!isGraphical(' ')); // whitespace is not graphical\nassert(!isGraphical('\\n'));\nassert(!isGraphical('\\0'));\n\n// N.B.: Unicode graphical characters are not regarded as such.\nassert(!isGraphical('á'));\n\n---\n",
				"endline": 406
			},
			{
				"kind": "function",
				"line": 439,
				"deco": "FNaNbNiNfwZb",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "w",
						"name": "c"
					}
				],
				"name": "isPrintable",
				"comment": "    Params: c = The character to test.\n    Returns: Whether or not $(D c) is a printable character - including the\n    space character.\nExample:\n\n---\nassert( isPrintable(' '));  // whitespace is printable\nassert( isPrintable('1'));\nassert( isPrintable('a'));\nassert( isPrintable('#'));\nassert(!isPrintable('\\0')); // control characters are not printable\n\n// N.B.: Printable non-ASCII Unicode characters are not recognized.\nassert(!isPrintable('á'));\n\n---\n",
				"endline": 442
			},
			{
				"kind": "function",
				"line": 474,
				"deco": "FNaNbNiNfwZb",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "w",
						"name": "c"
					}
				],
				"name": "isASCII",
				"comment": "    Params: c = The character to test.\n    Returns: Whether or not $(D c) is in the ASCII character set - i.e. in the\n    range 0..0x7F.\nExample:\n\n---\nassert( isASCII('a'));\nassert(!isASCII('á'));\n\n---\n",
				"endline": 477
			},
			{
				"kind": "template",
				"line": 506,
				"constraint": "is(C : dchar)",
				"members": [
					{
						"kind": "function",
						"line": 506,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "(C c)",
						"parameters": [
							{
								"type": "C",
								"name": "c"
							}
						],
						"name": "toLower",
						"endline": 518
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "C"
					}
				],
				"comment": "    Converts an ASCII letter to lowercase.\n\n    Params: c = A character of any type that implicitly converts to $(D dchar).\n    In the case where it's a built-in type, or an enum of a built-in type,\n    $(D Unqual!(OriginalType!C)) is returned, whereas if it's a user-defined\n    type, $(D dchar) is returned.\n\n    Returns: The corresponding lowercase letter, if $(D c) is an uppercase\n    ASCII character, otherwise $(D c) itself.\nExample:\n\n---\nassert(toLower('a') == 'a');\nassert(toLower('A') == 'a');\nassert(toLower('#') == '#');\n\n// N.B.: Non-ASCII Unicode uppercase letters are not converted.\nassert(toLower('Á') == 'Á');\n\n---\n",
				"name": "toLower"
			},
			{
				"kind": "template",
				"line": 568,
				"constraint": "is(C : dchar)",
				"members": [
					{
						"kind": "function",
						"line": 568,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "(C c)",
						"parameters": [
							{
								"type": "C",
								"name": "c"
							}
						],
						"name": "toUpper",
						"endline": 580
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "C"
					}
				],
				"comment": "    Converts an ASCII letter to uppercase.\n\n    Params: c = Any type which implicitly converts to $(D dchar). In the case\n    where it's a built-in type, or an enum of a built-in type,\n    $(D Unqual!(OriginalType!C)) is returned, whereas if it's a user-defined\n    type, $(D dchar) is returned.\n\n    Returns: The corresponding uppercase letter, if $(D c) is a lowercase ASCII\n    character, otherwise $(D c) itself.\nExample:\n\n---\nassert(toUpper('a') == 'A');\nassert(toUpper('A') == 'A');\nassert(toUpper('#') == '#');\n\n// N.B.: Non-ASCII Unicode lowercase letters are not converted.\nassert(toUpper('á') == 'á');\n\n---\n",
				"name": "toUpper"
			}
		],
		"name": "std.ascii",
		"comment": "    Functions which operate on ASCII characters.\n\n    All of the functions in std._ascii accept Unicode characters but\n    effectively ignore them if they're not ASCII. All $(D isX) functions return\n    $(D false) for non-ASCII characters, and all $(D toX) functions do nothing\n    to non-ASCII characters.\n\n    For functions which operate on Unicode characters, see\n    $(LINK2 std_uni.html, std.uni).\n\n    References:\n        $(LINK2 http://www.digitalmars.com/d/ascii-table.html, ASCII Table),\n        $(WEB en.wikipedia.org/wiki/Ascii, Wikipedia)\n\n    Macros:\n        WIKI=Phobos/StdASCII\n\n    Copyright: Copyright 2000 - 2013\n    License:   $(WEB www.boost.org/LICENSE_1_0.txt, Boost License 1.0).\n    Authors:   $(WEB digitalmars.com, Walter Bright) and Jonathan M Davis\n    Source:    $(PHOBOSSRC std/_ascii.d)\n"
	},
	{
		"kind": "module",
		"file": "../phobos/std/functional.d",
		"members": [
			{
				"kind": "template",
				"line": 107,
				"members": [],
				"char": 1,
				"parameters": [
					{
						"kind": "alias",
						"name": "fun"
					},
					{
						"kind": "value",
						"defaultValue": "\"a\"",
						"deco": "Aya",
						"name": "parmName"
					}
				],
				"comment": "Transforms a string representing an expression into a unary\nfunction. The string must either use symbol name $(D a) as\nthe parameter or provide the symbol via the $(D parmName) argument.\nIf $(D fun) is not a string, $(D unaryFun) aliases itself away to $(D fun).\nExample:\n\n---\n// Strings are compiled into functions:\nalias isEven = unaryFun!(\"(a & 1) == 0\");\nassert(isEven(2) && !isEven(1));\n\n---\n",
				"name": "unaryFun"
			},
			{
				"kind": "template",
				"line": 198,
				"members": [],
				"char": 1,
				"parameters": [
					{
						"kind": "alias",
						"name": "fun"
					},
					{
						"kind": "value",
						"defaultValue": "\"a\"",
						"deco": "Aya",
						"name": "parm1Name"
					},
					{
						"kind": "value",
						"defaultValue": "\"b\"",
						"deco": "Aya",
						"name": "parm2Name"
					}
				],
				"comment": "Transforms a string representing an expression into a binary function. The\nstring must either use symbol names $(D a) and $(D b) as the parameters or\nprovide the symbols via the $(D parm1Name) and $(D parm2Name) arguments.\nIf $(D fun) is not a string, $(D binaryFun) aliases itself away to\n$(D fun).\nExample:\n\n---\nalias less = binaryFun!(\"a < b\");\nassert(less(1, 2) && !less(2, 1));\nalias greater = binaryFun!(\"a > b\");\nassert(!greater(\"1\", \"2\") && greater(\"2\", \"1\"));\n\n---\n",
				"name": "binaryFun"
			},
			{
				"kind": "alias",
				"line": 491,
				"char": 1,
				"name": "lessThan",
				"comment": "   Predicate that returns $(D_PARAM a < b).\n   Correctly compares signed and unsigned integers, ie. -1 < 2U.\n"
			},
			{
				"kind": "alias",
				"line": 511,
				"char": 1,
				"name": "greaterThan",
				"comment": "   Predicate that returns $(D_PARAM a > b).\n   Correctly compares signed and unsigned integers, ie. 2U > -1.\n"
			},
			{
				"kind": "alias",
				"line": 531,
				"char": 1,
				"name": "equalTo",
				"comment": "   Predicate that returns $(D_PARAM a == b).\n   Correctly compares signed and unsigned integers, ie. !(-1 == ~0U).\n"
			},
			{
				"kind": "template",
				"line": 543,
				"members": [
					{
						"kind": "template",
						"line": 545,
						"constraint": "is(typeof(pred(Reverse!args)))",
						"members": [
							{
								"kind": "function",
								"line": 545,
								"storageClass": [
									"auto"
								],
								"endchar": 5,
								"char": 10,
								"type": "(auto ref Args args)",
								"parameters": [
									{
										"storageClass": [
											"auto",
											"ref"
										],
										"type": "Args",
										"name": "args"
									}
								],
								"name": "reverseArgs",
								"endline": 549
							}
						],
						"char": 10,
						"parameters": [
							{
								"kind": "tuple",
								"name": "Args"
							}
						],
						"name": "reverseArgs"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "alias",
						"name": "pred"
					}
				],
				"comment": "   N-ary predicate that reverses the order of arguments, e.g., given\n   $(D pred(a, b, c)), returns $(D pred(c, b, a)).\n",
				"name": "reverseArgs"
			},
			{
				"kind": "template",
				"line": 580,
				"members": [
					{
						"kind": "template",
						"line": 582,
						"members": [
							{
								"kind": "function",
								"line": 582,
								"storageClass": [
									"auto"
								],
								"endchar": 5,
								"char": 10,
								"type": "(auto ref ElementType1 a, auto ref ElementType2 b)",
								"parameters": [
									{
										"storageClass": [
											"auto",
											"ref"
										],
										"type": "ElementType1",
										"name": "a"
									},
									{
										"storageClass": [
											"auto",
											"ref"
										],
										"type": "ElementType2",
										"name": "b"
									}
								],
								"name": "binaryReverseArgs",
								"endline": 586
							}
						],
						"char": 10,
						"parameters": [
							{
								"kind": "type",
								"name": "ElementType1"
							},
							{
								"kind": "type",
								"name": "ElementType2"
							}
						],
						"name": "binaryReverseArgs"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "alias",
						"name": "pred"
					}
				],
				"comment": "   Binary predicate that reverses the order of arguments, e.g., given\n   $(D pred(a, b)), returns $(D pred(b, a)).\n",
				"name": "binaryReverseArgs"
			},
			{
				"kind": "template",
				"line": 604,
				"members": [
					{
						"kind": "template",
						"line": 606,
						"members": [
							{
								"kind": "function",
								"line": 606,
								"storageClass": [
									"auto"
								],
								"endchar": 5,
								"char": 10,
								"type": "(auto ref T args)",
								"parameters": [
									{
										"storageClass": [
											"auto",
											"ref"
										],
										"type": "T",
										"name": "args"
									}
								],
								"name": "not",
								"endline": 616
							}
						],
						"char": 10,
						"parameters": [
							{
								"kind": "tuple",
								"name": "T"
							}
						],
						"name": "not"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "alias",
						"name": "pred"
					}
				],
				"comment": "Negates predicate $(D pred).\nExample:\n\n---\nimport std.functional;\nimport std.algorithm : find;\nimport std.uni : isWhite;\nstring a = \"   Hello, world!\";\nassert(find!(not!isWhite)(a) == \"Hello, world!\");\n\n---\n",
				"name": "not"
			},
			{
				"kind": "template",
				"line": 656,
				"members": [],
				"char": 1,
				"parameters": [
					{
						"kind": "alias",
						"name": "fun"
					},
					{
						"kind": "alias",
						"name": "arg"
					}
				],
				"comment": "$(LINK2 http://en.wikipedia.org/wiki/Partial_application, Partially\napplies) $(D_PARAM fun) by tying its first argument to $(D_PARAM arg).\n\nExample:\n\n----\nint fun(int a, int b) { return a + b; }\nalias partial!(fun, 5) fun5;\nassert(fun5(6) == 11);\n----\n\nNote that in most cases you'd use an alias instead of a value\nassignment. Using an alias allows you to partially evaluate template\nfunctions without committing to a particular type of the function.\n",
				"name": "partial"
			},
			{
				"kind": "alias",
				"line": 695,
				"storageClass": [
					"deprecated"
				],
				"char": 1,
				"name": "curry",
				"comment": "Deprecated alias for $(D partial), kept for backwards compatibility\n"
			},
			{
				"kind": "template",
				"line": 799,
				"constraint": "F.length == 1",
				"members": [
					{
						"kind": "alias",
						"line": 801,
						"char": 5,
						"type": "F[0]",
						"name": "adjoin"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "tuple",
						"name": "F"
					}
				],
				"comment": "Takes multiple functions and adjoins them together. The result is a\n$(XREF typecons, Tuple) with one element per passed-in function. Upon\ninvocation, the returned tuple is the adjoined results of all\nfunctions.\n\nNote: In the special case where only a single function is provided\n($(D F.length == 1)), adjoin simply aliases to the single passed function\n($(D F[0])).\nExample:\n\n---\nimport std.functional, std.typecons;\nstatic bool f1(int a) { return a != 0; }\nstatic int f2(int a) { return a / 2; }\nauto x = adjoin!(f1, f2)(5);\nassert(is(typeof(x) == Tuple!(bool, int)));\nassert(x[0] == true && x[1] == 2);\n\n---\n",
				"name": "adjoin"
			},
			{
				"kind": "template",
				"line": 804,
				"constraint": "F.length > 1",
				"members": [
					{
						"kind": "template",
						"line": 806,
						"members": [
							{
								"kind": "function",
								"line": 806,
								"storageClass": [
									"auto"
								],
								"endchar": 5,
								"char": 10,
								"type": "(auto ref V a)",
								"parameters": [
									{
										"storageClass": [
											"auto",
											"ref"
										],
										"type": "V",
										"name": "a"
									}
								],
								"name": "adjoin",
								"endline": 823
							}
						],
						"char": 10,
						"parameters": [
							{
								"kind": "tuple",
								"name": "V"
							}
						],
						"name": "adjoin"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "tuple",
						"name": "F"
					}
				],
				"comment": "ditto\n",
				"name": "adjoin"
			},
			{
				"kind": "template",
				"line": 936,
				"members": [],
				"char": 1,
				"parameters": [
					{
						"kind": "tuple",
						"name": "fun"
					}
				],
				"comment": "   Composes passed-in functions $(D fun[0], fun[1], ...) returning a\n   function $(D f(x)) that in turn returns $(D\n   fun[0](fun[1](...(x)))...). Each function can be a regular\n   functions, a delegate, or a string.\n\n   Example:\n\n----\n// First split a string in whitespace-separated tokens and then\n// convert each token into an integer\nassert(compose!(map!(to!(int)), split)(\"1 2 3\") == [1, 2, 3]);\n----\n",
				"name": "compose"
			},
			{
				"kind": "template",
				"line": 976,
				"members": [
					{
						"kind": "alias",
						"line": 976,
						"char": 1,
						"type": "compose!(Reverse!fun)",
						"name": "pipe"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "tuple",
						"name": "fun"
					}
				],
				"comment": "   Pipes functions in sequence. Offers the same functionality as $(D\n   compose), but with functions specified in reverse order. This may\n   lead to more readable code in some situation because the order of\n   execution is the same as lexical order.\n\n   Example:\n\n----\n// Read an entire text file, split the resulting string in\n// whitespace-separated tokens, and then convert each token into an\n// integer\nint[] a = pipe!(readText, split, map!(to!(int)))(\"file.txt\");\n----\n",
				"name": "pipe"
			},
			{
				"kind": "template",
				"line": 1023,
				"members": [
					{
						"kind": "function",
						"line": 1027,
						"endchar": 5,
						"char": 20,
						"type": "ReturnType!fun(ParameterTypeTuple!fun args)",
						"parameters": [
							{
								"type": "ParameterTypeTuple!fun",
								"name": "args"
							}
						],
						"name": "memoize",
						"endline": 1037
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "alias",
						"name": "fun"
					}
				],
				"comment": " $(LUCKY Memoizes) a function so as to avoid repeated\n computation. The memoization structure is a hash table keyed by a\n tuple of the function's arguments. There is a speed gain if the\n function is repeatedly called with the same arguments and is more\n expensive than a hash table lookup. For more information on memoization, refer to $(WEB docs.google.com/viewer?url=http%3A%2F%2Fhop.perl.plover.com%2Fbook%2Fpdf%2F03CachingAndMemoization.pdf, this book chapter).\n\nExample:\n----\ndouble transmogrify(int a, string b)\n{\n   ... expensive computation ...\n}\nalias fastTransmogrify = memoize!transmogrify;\nunittest\n{\n    auto slow = transmogrify(2, \"hello\");\n    auto fast = fastTransmogrify(2, \"hello\");\n    assert(slow == fast);\n}\n----\n\nTechnically the memoized function should be pure because $(D memoize) assumes it will\nalways return the same result for a given tuple of arguments. However, $(D memoize) does not\nenforce that because sometimes it\nis useful to memoize an impure function, too.\nExample:\nTo _memoize a recursive function, simply insert the memoized call in lieu of the plain recursive call.\n For example, to transform the exponential-time Fibonacci implementation into a linear-time computation:\n---\nulong fib(ulong n)\n{\n    return n < 2 ? 1 : memoize!fib(n - 2) + memoize!fib(n - 1);\n}\nassert(fib(10) == 89);\n\n---\nExample:\nTo improve the speed of the factorial function,\n---\nulong fact(ulong n)\n{\n    return n < 2 ? 1 : n * memoize!fact(n - 1);\n}\nassert(fact(10) == 3628800);\n\n---\nExample:\nThis memoizes all values of $(D fact) up to the largest argument. To only cache the final\n result, move $(D memoize) outside the function as shown below.\n---\nulong factImpl(ulong n)\n{\n    return n < 2 ? 1 : n * factImpl(n - 1);\n}\nalias fact = memoize!factImpl;\nassert(fact(10) == 3628800);\n\n---\nExample:\nWhen the $(D maxSize) parameter is specified, memoize will used\n a fixed size hash table to limit the number of cached entries.\n---\nulong fact(ulong n)\n{\n    // Memoize no more than 8 values\n    return n < 2 ? 1 : n * memoize!(fact, 8)(n - 1);\n}\nassert(fact(8) == 40320);\n// using more entries than maxSize will overwrite existing entries\nassert(fact(10) == 3628800);\n\n---\n",
				"name": "memoize"
			},
			{
				"kind": "template",
				"line": 1041,
				"members": [
					{
						"kind": "function",
						"line": 1044,
						"endchar": 5,
						"char": 20,
						"type": "ReturnType!fun(ParameterTypeTuple!fun args)",
						"parameters": [
							{
								"type": "ParameterTypeTuple!fun",
								"name": "args"
							}
						],
						"name": "memoize",
						"endline": 1091
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "alias",
						"name": "fun"
					},
					{
						"kind": "value",
						"deco": "k",
						"name": "maxSize"
					}
				],
				"comment": "ditto\n",
				"name": "memoize"
			},
			{
				"kind": "template",
				"line": 1274,
				"constraint": "isCallable!F",
				"members": [
					{
						"kind": "function",
						"line": 1274,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "(auto ref F fp)",
						"parameters": [
							{
								"storageClass": [
									"auto",
									"ref"
								],
								"type": "F",
								"name": "fp"
							}
						],
						"name": "toDelegate",
						"endline": 1314
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "F"
					}
				],
				"comment": " Convert a callable to a delegate with the same parameter list and\n return type, avoiding heap allocations and use of auxiliary storage.\n\n Examples:\n ----\n void doStuff() {\n     writeln(\"Hello, world.\");\n }\n\n void runDelegate(void delegate() myDelegate) {\n     myDelegate();\n }\n\n auto delegateToPass = toDelegate(&doStuff);\n runDelegate(delegateToPass);  // Calls doStuff, prints \"Hello, world.\"\n ----\n\n BUGS:\n $(UL\n   $(LI Does not work with $(D @safe) functions.)\n   $(LI Ignores C-style / D-style variadic arguments.)\n )\n",
				"name": "toDelegate"
			},
			{
				"kind": "template",
				"line": 1411,
				"members": [],
				"char": 1,
				"parameters": [
					{
						"kind": "tuple",
						"name": "args"
					}
				],
				"comment": "Forwards function arguments with saving ref-ness.\nExample:\n\n---\nclass C\n{\n    static int foo(int n) { return 1; }\n    static int foo(ref int n) { return 2; }\n}\nint bar()(auto ref int x) { return C.foo(forward!x); }\n\nassert(bar(1) == 1);\nint i;\nassert(bar(i) == 2);\n\n---\nExample:\n\n---\nvoid foo(int n, ref string s) { s = null; foreach (i; 0..n) s ~= \"Hello\"; }\n\n// forwards all arguments which are bound to parameter tuple\nvoid bar(Args...)(auto ref Args args) { return foo(forward!args); }\n\n// forwards all arguments with swapping order\nvoid baz(Args...)(auto ref Args args) { return foo(forward!args[$/2..$], forward!args[0..$/2]); }\n\nstring s;\nbar(1, s);\nassert(s == \"Hello\");\nbaz(s, 2);\nassert(s == \"HelloHello\");\n\n---\n",
				"name": "forward"
			}
		],
		"name": "std.functional",
		"comment": "Functions that manipulate other functions.\n\nThis module provides functions for compile time function composition. These\nfunctions are helpful when constructing predicates for the algorithms in\n$(LINK2 std_algorithm.html, std.algorithm) or $(LINK2 std_range.html,\nstd.range).\n\n$(BOOKTABLE ,\n$(TR $(TH Function Name) $(TH Description)\n)\n    $(TR $(TD $(D $(LREF adjoin)))\n        $(TD Joins a couple of functions into one that executes the original\n        functions independently and returns a tuple with all the results.\n    ))\n    $(TR $(TD $(D $(LREF compose)), $(D $(LREF pipe)))\n        $(TD Join a couple of functions into one that executes the original\n        functions one after the other, using one function's result for the next\n        function's argument.\n    ))\n    $(TR $(TD $(D $(LREF forward)))\n        $(TD Forwards function arguments while saving ref-ness.\n    ))\n    $(TR $(TD $(D $(LREF lessThan)), $(D $(LREF greaterThan)), $(D $(LREF equalTo)))\n        $(TD Ready-made predicate functions to compare two values.\n    ))\n    $(TR $(TD $(D $(LREF memoize)))\n        $(TD Creates a function that caches its result for fast re-evalation.\n    ))\n    $(TR $(TD $(D $(LREF not)))\n        $(TD Creates a function that negates another.\n    ))\n    $(TR $(TD $(D $(LREF partial)))\n        $(TD Creates a function that binds the first argument of a given function\n        to a given value.\n    ))\n    $(TR $(TD $(D $(LREF reverseArgs)), $(D $(LREF binaryReverseArgs)))\n        $(TD Predicate that reverses the order of its arguments.\n    ))\n    $(TR $(TD $(D $(LREF toDelegate)))\n        $(TD Converts a callable to a delegate.\n    ))\n    $(TR $(TD $(D $(LREF unaryFun)), $(D $(LREF binaryFun)))\n        $(TD Create a unary or binary function from a string. Most often\n        used when defining algorithms on ranges.\n    ))\n)\n\nMacros:\n\nWIKI = Phobos/StdFunctional\n\nCopyright: Copyright Andrei Alexandrescu 2008 - 2009.\nLicense:   $(WEB boost.org/LICENSE_1_0.txt, Boost License 1.0).\nAuthors:   $(WEB erdani.org, Andrei Alexandrescu)\nSource:    $(PHOBOSSRC std/_functional.d)\n"
	},
	{
		"kind": "module",
		"file": "../phobos/std/complex.d",
		"members": [
			{
				"kind": "template",
				"line": 36,
				"constraint": "is(R : double)",
				"members": [
					{
						"kind": "function",
						"line": 36,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "pure nothrow @nogc @safe (R re)",
						"parameters": [
							{
								"type": "R",
								"name": "re"
							}
						],
						"name": "complex",
						"endline": 42
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"comment": " Helper function that returns a _complex number with the specified\n    real and imaginary parts.\n\n    Params:\n        R = (template parameter) type of real part of complex number\n        I = (template parameter) type of imaginary part of complex number\n\n        re = real part of complex number to be constructed\n        im = (optional) imaginary part of complex number\n\n    Returns:\n        $(D Complex) instance with real and imaginary parts set\n        to the values provided as input.  If neither $(D re) nor\n        $(D im) are floating-point numbers, the return type will\n        be $(D Complex!double).  Otherwise, the return type is\n        deduced using $(D std.traits.CommonType!(R, I)).\nExample:\n\n---\nauto a = complex(1.0);\nstatic assert (is(typeof(a) == Complex!double));\nassert (a.re == 1.0);\nassert (a.im == 0.0);\n\nauto b = complex(2.0L);\nstatic assert (is(typeof(b) == Complex!real));\nassert (b.re == 2.0L);\nassert (b.im == 0.0L);\n\nauto c = complex(1.0, 2.0);\nstatic assert (is(typeof(c) == Complex!double));\nassert (c.re == 1.0);\nassert (c.im == 2.0);\n\nauto d = complex(3.0, 4.0L);\nstatic assert (is(typeof(d) == Complex!real));\nassert (d.re == 3.0);\nassert (d.im == 4.0L);\n\nauto e = complex(1);\nstatic assert (is(typeof(e) == Complex!double));\nassert (e.re == 1);\nassert (e.im == 0);\n\nauto f = complex(1L, 2);\nstatic assert (is(typeof(f) == Complex!double));\nassert (f.re == 1L);\nassert (f.im == 2);\n\nauto g = complex(3, 4.0L);\nstatic assert (is(typeof(g) == Complex!real));\nassert (g.re == 3);\nassert (g.im == 4.0L);\n\n---\n",
				"name": "complex"
			},
			{
				"kind": "template",
				"line": 45,
				"constraint": "is(R : double) && is(I : double)",
				"members": [
					{
						"kind": "function",
						"line": 45,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "pure nothrow @nogc @safe (R re, I im)",
						"parameters": [
							{
								"type": "R",
								"name": "re"
							},
							{
								"type": "I",
								"name": "im"
							}
						],
						"name": "complex",
						"endline": 52
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					},
					{
						"kind": "type",
						"name": "I"
					}
				],
				"comment": "ditto\n",
				"name": "complex"
			},
			{
				"kind": "template",
				"line": 97,
				"constraint": "isFloatingPoint!T",
				"members": [
					{
						"kind": "struct",
						"line": 97,
						"members": [
							{
								"kind": "variable",
								"line": 102,
								"char": 7,
								"type": "T",
								"name": "re",
								"comment": " The real part of the number.\n"
							},
							{
								"kind": "variable",
								"line": 105,
								"char": 7,
								"type": "T",
								"name": "im",
								"comment": " The imaginary part of the number.\n"
							},
							{
								"kind": "function",
								"line": 116,
								"endchar": 5,
								"char": 12,
								"type": "const string()",
								"name": "toString",
								"comment": " Converts the complex number to a string representation.\n\n    The second form of this function is usually not called directly;\n    instead, it is used via $(XREF string,format), as shown in the examples\n    below.  Supported format characters are 'e', 'f', 'g', 'a', and 's'.\n\n    See the $(LINK2 std_format.html, std.format) and $(XREF string, format)\n    documentation for more information.\n",
								"endline": 124
							},
							{
								"kind": "template",
								"line": 144,
								"members": [
									{
										"kind": "function",
										"line": 144,
										"endchar": 5,
										"char": 10,
										"type": "const void(scope void delegate(const(Char)[]) sink, FormatSpec!Char formatSpec)",
										"parameters": [
											{
												"storageClass": [
													"scope"
												],
												"type": "void delegate(const(Char)[])",
												"name": "sink"
											},
											{
												"type": "FormatSpec!Char",
												"name": "formatSpec"
											}
										],
										"name": "toString",
										"endline": 153
									}
								],
								"char": 10,
								"parameters": [
									{
										"kind": "type",
										"name": "Char"
									}
								],
								"comment": "ditto\n",
								"name": "toString"
							}
						],
						"char": 1,
						"name": "Complex"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": " A complex number parametrised by a type $(D T), which must be either\n    $(D float), $(D double) or $(D real).\n",
				"name": "Complex"
			},
			{
				"kind": "template",
				"line": 653,
				"members": [
					{
						"kind": "function",
						"line": 653,
						"endchar": 1,
						"char": 3,
						"type": "pure nothrow @nogc @safe T(Complex!T z)",
						"parameters": [
							{
								"type": "Complex!T",
								"name": "z"
							}
						],
						"name": "abs",
						"endline": 657
					}
				],
				"char": 3,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": " Calculates the absolute value (or modulus) of a complex number.\n",
				"name": "abs"
			},
			{
				"kind": "template",
				"line": 671,
				"members": [
					{
						"kind": "function",
						"line": 671,
						"endchar": 1,
						"char": 3,
						"type": "pure nothrow @nogc @safe T(Complex!T z)",
						"parameters": [
							{
								"type": "Complex!T",
								"name": "z"
							}
						],
						"name": "sqAbs",
						"endline": 674
					}
				],
				"char": 3,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": "   Calculates the squared modulus of a complex number.\n   For genericity, if called on a real number, $(D sqAbs) returns its square.\n",
				"name": "sqAbs"
			},
			{
				"kind": "template",
				"line": 688,
				"constraint": "isFloatingPoint!T",
				"members": [
					{
						"kind": "function",
						"line": 688,
						"endchar": 1,
						"char": 3,
						"type": "pure nothrow @nogc @safe T(T x)",
						"parameters": [
							{
								"type": "T",
								"name": "x"
							}
						],
						"name": "sqAbs",
						"endline": 692
					}
				],
				"char": 3,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": "ditto\n",
				"name": "sqAbs"
			},
			{
				"kind": "template",
				"line": 705,
				"members": [
					{
						"kind": "function",
						"line": 705,
						"endchar": 1,
						"char": 3,
						"type": "pure nothrow @nogc @safe T(Complex!T z)",
						"parameters": [
							{
								"type": "Complex!T",
								"name": "z"
							}
						],
						"name": "arg",
						"endline": 709
					}
				],
				"char": 3,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": " Calculates the argument (or phase) of a complex number.\n",
				"name": "arg"
			},
			{
				"kind": "template",
				"line": 721,
				"members": [
					{
						"kind": "function",
						"line": 721,
						"endchar": 1,
						"char": 11,
						"type": "pure nothrow @nogc @safe Complex!T(Complex!T z)",
						"parameters": [
							{
								"type": "Complex!T",
								"name": "z"
							}
						],
						"name": "conj",
						"endline": 724
					}
				],
				"char": 11,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": " Returns the complex conjugate of a complex number.\n",
				"name": "conj"
			},
			{
				"kind": "template",
				"line": 734,
				"members": [
					{
						"kind": "function",
						"line": 734,
						"endchar": 1,
						"char": 29,
						"type": "pure nothrow @nogc @safe Complex!(CommonType!(T, U))(T modulus, U argument)",
						"parameters": [
							{
								"type": "T",
								"name": "modulus"
							},
							{
								"type": "U",
								"name": "argument"
							}
						],
						"name": "fromPolar",
						"endline": 739
					}
				],
				"char": 29,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "type",
						"name": "U"
					}
				],
				"comment": " Constructs a complex number given its absolute value and argument.\n",
				"name": "fromPolar"
			},
			{
				"kind": "template",
				"line": 751,
				"members": [
					{
						"kind": "function",
						"line": 751,
						"endchar": 1,
						"char": 11,
						"type": "pure nothrow @nogc @safe Complex!T(Complex!T z)",
						"parameters": [
							{
								"type": "Complex!T",
								"name": "z"
							}
						],
						"name": "sin",
						"endline": 757
					}
				],
				"char": 11,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": " Trigonometric functions.\n",
				"name": "sin"
			},
			{
				"kind": "template",
				"line": 767,
				"members": [
					{
						"kind": "function",
						"line": 767,
						"endchar": 1,
						"char": 11,
						"type": "pure nothrow @nogc @safe Complex!T(Complex!T z)",
						"parameters": [
							{
								"type": "Complex!T",
								"name": "z"
							}
						],
						"name": "cos",
						"endline": 773
					}
				],
				"char": 11,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": "ditto\n",
				"name": "cos"
			},
			{
				"kind": "function",
				"line": 792,
				"deco": "FNaNbNiNeeZS3std7complex14__T7ComplexTeZ7Complex",
				"endchar": 1,
				"char": 14,
				"parameters": [
					{
						"deco": "e",
						"name": "y"
					}
				],
				"name": "expi",
				"comment": " Calculates cos(y) + i sin(y).\n\n    Note:\n    $(D expi) is included here for convenience and for easy migration of code\n    that uses $(XREF math,_expi).  Unlike $(XREF math,_expi), which uses the\n    x87 $(I fsincos) instruction when possible, this function is no faster\n    than calculating cos(y) and sin(y) separately.\n",
				"endline": 796
			},
			{
				"kind": "template",
				"line": 809,
				"members": [
					{
						"kind": "function",
						"line": 809,
						"endchar": 1,
						"char": 11,
						"type": "pure nothrow @nogc @safe Complex!T(Complex!T z)",
						"parameters": [
							{
								"type": "Complex!T",
								"name": "z"
							}
						],
						"name": "sqrt",
						"endline": 851
					}
				],
				"char": 11,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": " Square root.\n",
				"name": "sqrt"
			}
		],
		"name": "std.complex",
		"comment": " This module contains the $(LREF Complex) type, which is used to represent\n    _complex numbers, along with related mathematical operations and functions.\n\n    $(LREF Complex) will eventually $(LINK2 ../deprecate.html, replace)\n    the built-in types $(D cfloat), $(D cdouble), $(D creal), $(D ifloat),\n    $(D idouble), and $(D ireal).\n\n    Authors:    Lars Tandle Kyllingstad, Don Clugston\n    Copyright:  Copyright (c) 2010, Lars T. Kyllingstad.\n    License:    $(WEB boost.org/LICENSE_1_0.txt, Boost License 1.0)\n    Source:     $(PHOBOSSRC std/_complex.d)\n"
	},
	{
		"kind": "module",
		"file": "../phobos/std/stdint.d",
		"members": [],
		"name": "std.stdint",
		"comment": "\n    D constrains integral types to specific sizes. But efficiency\n    of different sizes varies from machine to machine,\n    pointer sizes vary, and the maximum integer size varies.\n    <b>stdint</b> offers a portable way of trading off size\n    vs efficiency, in a manner compatible with the <tt>stdint.h</tt>\n    definitions in C.\n\n    The exact aliases are types of exactly the specified number of bits.\n    The at least aliases are at least the specified number of bits\n    large, and can be larger.\n    The fast aliases are the fastest integral type supported by the\n    processor that is at least as wide as the specified number of bits.\n\n    The aliases are:\n\n    <table border=1 cellspacing=0 cellpadding=5>\n    <th>Exact Alias\n    <th>Description\n    <th>At Least Alias\n    <th>Description\n    <th>Fast Alias\n    <th>Description\n    <tr>\n    <td>int8_t\n    <td>exactly 8 bits signed\n    <td>int_least8_t\n    <td>at least 8 bits signed\n    <td>int_fast8_t\n    <td>fast 8 bits signed\n    <tr>\n    <td>uint8_t\n    <td>exactly 8 bits unsigned\n    <td>uint_least8_t\n    <td>at least 8 bits unsigned\n    <td>uint_fast8_t\n    <td>fast 8 bits unsigned\n\n    <tr>\n    <td>int16_t\n    <td>exactly 16 bits signed\n    <td>int_least16_t\n    <td>at least 16 bits signed\n    <td>int_fast16_t\n    <td>fast 16 bits signed\n    <tr>\n    <td>uint16_t\n    <td>exactly 16 bits unsigned\n    <td>uint_least16_t\n    <td>at least 16 bits unsigned\n    <td>uint_fast16_t\n    <td>fast 16 bits unsigned\n\n    <tr>\n    <td>int32_t\n    <td>exactly 32 bits signed\n    <td>int_least32_t\n    <td>at least 32 bits signed\n    <td>int_fast32_t\n    <td>fast 32 bits signed\n    <tr>\n    <td>uint32_t\n    <td>exactly 32 bits unsigned\n    <td>uint_least32_t\n    <td>at least 32 bits unsigned\n    <td>uint_fast32_t\n    <td>fast 32 bits unsigned\n\n    <tr>\n    <td>int64_t\n    <td>exactly 64 bits signed\n    <td>int_least64_t\n    <td>at least 64 bits signed\n    <td>int_fast64_t\n    <td>fast 64 bits signed\n    <tr>\n    <td>uint64_t\n    <td>exactly 64 bits unsigned\n    <td>uint_least64_t\n    <td>at least 64 bits unsigned\n    <td>uint_fast64_t\n    <td>fast 64 bits unsigned\n    </table>\n\n    The ptr aliases are integral types guaranteed to be large enough\n    to hold a pointer without losing bits:\n\n    <table border=1 cellspacing=0 cellpadding=5>\n    <th>Alias\n    <th>Description\n    <tr>\n    <td>intptr_t\n    <td>signed integral type large enough to hold a pointer\n    <tr>\n    <td>uintptr_t\n    <td>unsigned integral type large enough to hold a pointer\n    </table>\n\n    The max aliases are the largest integral types:\n\n    <table border=1 cellspacing=0 cellpadding=5>\n    <th>Alias\n    <th>Description\n    <tr>\n    <td>intmax_t\n    <td>the largest signed integral type\n    <tr>\n    <td>uintmax_t\n    <td>the largest unsigned integral type\n    </table>\n\n Macros:\n  WIKI=Phobos/StdStdint\n\n Copyright: Copyright Digital Mars 2000 - 2009.\n License:   $(WEB www.boost.org/LICENSE_1_0.txt, Boost License 1.0).\n Authors:   $(WEB digitalmars.com, Walter Bright)\n Source:    $(PHOBOSSRC std/_stdint.d)\n"
	},
	{
		"kind": "module",
		"file": "../phobos/std/parallelism.d",
		"members": [
			{
				"kind": "template",
				"line": 447,
				"members": [
					{
						"kind": "struct",
						"line": 447,
						"members": [
							{
								"kind": "alias",
								"line": 525,
								"char": 5,
								"type": "typeof(fun(_args))",
								"name": "ReturnType",
								"comment": "    The return type of the function called by this $(D Task).  This can be\n    $(D void).\n"
							},
							{
								"kind": "function",
								"line": 594,
								"endchar": 5,
								"char": 30,
								"type": "@property ref @trusted ReturnType()",
								"name": "spinForce",
								"comment": "    If the $(D Task) isn't started yet, execute it in the current thread.\n    If it's done, return its return value, if any.  If it's in progress,\n    busy spin until it's done, then return the return value.  If it threw\n    an exception, rethrow that exception.\n\n    This function should be used when you expect the result of the\n    $(D Task) to be available on a timescale shorter than that of an OS\n    context switch.\n",
								"endline": 611
							},
							{
								"kind": "function",
								"line": 622,
								"endchar": 5,
								"char": 30,
								"type": "@property ref @trusted ReturnType()",
								"name": "yieldForce",
								"comment": "    If the $(D Task) isn't started yet, execute it in the current thread.\n    If it's done, return its return value, if any.  If it's in progress,\n    wait on a condition variable.  If it threw an exception, rethrow that\n    exception.\n\n    This function should be used for expensive functions, as waiting on a\n    condition variable introduces latency, but avoids wasted CPU cycles.\n",
								"endline": 656
							},
							{
								"kind": "function",
								"line": 667,
								"endchar": 5,
								"char": 30,
								"type": "@property ref @trusted ReturnType()",
								"name": "workForce",
								"comment": "    If this $(D Task) was not started yet, execute it in the current\n    thread.  If it is finished, return its result.  If it is in progress,\n    execute any other $(D Task) from the $(D TaskPool) instance that\n    this $(D Task) was submitted to until this one\n    is finished.  If it threw an exception, rethrow that exception.\n    If no other tasks are available or this $(D Task) was executed using\n    $(D executeInNewThread), wait on a condition variable.\n",
								"endline": 730
							},
							{
								"kind": "function",
								"line": 738,
								"endchar": 5,
								"char": 20,
								"type": "@property @trusted bool()",
								"name": "done",
								"comment": "    Returns $(D true) if the $(D Task) is finished executing.\n\n    Throws:  Rethrows any exception thrown during the execution of the\n             $(D Task).\n",
								"endline": 742
							},
							{
								"kind": "function",
								"line": 752,
								"endchar": 5,
								"char": 10,
								"type": "@trusted void()",
								"name": "executeInNewThread",
								"comment": "    Create a new thread for executing this $(D Task), execute it in the\n    newly created thread, then terminate the thread.  This can be used for\n    future/promise parallelism.  An explicit priority may be given\n    to the $(D Task).  If one is provided, its value is forwarded to\n    $(D core.thread.Thread.priority). See $(XREF parallelism, task) for\n    usage example.\n",
								"endline": 755
							},
							{
								"kind": "function",
								"line": 758,
								"endchar": 5,
								"char": 10,
								"type": "@trusted void(int priority)",
								"parameters": [
									{
										"deco": "i",
										"name": "priority"
									}
								],
								"name": "executeInNewThread",
								"comment": "Ditto\n",
								"endline": 761
							}
						],
						"char": 1,
						"name": "Task"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "alias",
						"name": "fun"
					},
					{
						"kind": "tuple",
						"name": "Args"
					}
				],
				"comment": "$(D Task) represents the fundamental unit of work.  A $(D Task) may be\nexecuted in parallel with any other $(D Task).  Using this struct directly\nallows future/promise _parallelism.  In this paradigm, a function (or delegate\nor other callable) is executed in a thread other than the one it was called\nfrom.  The calling thread does not block while the function is being executed.\nA call to $(D workForce), $(D yieldForce), or $(D spinForce) is used to\nensure that the $(D Task) has finished executing and to obtain the return\nvalue, if any.  These functions and $(D done) also act as full memory barriers,\nmeaning that any memory writes made in the thread that executed the $(D Task)\nare guaranteed to be visible in the calling thread after one of these functions\nreturns.\n\nThe $(XREF parallelism, task) and $(XREF parallelism, scopedTask) functions can\nbe used to create an instance of this struct.  See $(D task) for usage examples.\n\nFunction results are returned from $(D yieldForce), $(D spinForce) and\n$(D workForce) by ref.  If $(D fun) returns by ref, the reference will point\nto the returned reference of $(D fun).  Otherwise it will point to a\nfield in this struct.\n\nCopying of this struct is disabled, since it would provide no useful semantics.\nIf you want to pass this struct around, you should do so by reference or\npointer.\n\nBugs:  Changes to $(D ref) and $(D out) arguments are not propagated to the\n       call site, only to $(D args) in this struct.\n",
				"name": "Task"
			},
			{
				"kind": "template",
				"line": 850,
				"members": [
					{
						"kind": "function",
						"line": 850,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "(Args args)",
						"parameters": [
							{
								"type": "Args",
								"name": "args"
							}
						],
						"name": "task",
						"endline": 853
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "alias",
						"name": "fun"
					},
					{
						"kind": "tuple",
						"name": "Args"
					}
				],
				"comment": "Creates a $(D Task) on the GC heap that calls an alias.  This may be executed\nvia $(D Task.executeInNewThread) or by submitting to a\n$(XREF parallelism, TaskPool).  A globally accessible instance of\n$(D TaskPool) is provided by $(XREF parallelism, taskPool).\n\nReturns:  A pointer to the $(D Task).\n\nExamples:\n---\n// Read two files into memory at the same time.\nimport std.file;\n\nvoid main()\n{\n    // Create and execute a Task for reading\n    // foo.txt.\n    auto file1Task = task!read(\"foo.txt\");\n    file1Task.executeInNewThread();\n\n    // Read bar.txt in parallel.\n    auto file2Data = read(\"bar.txt\");\n\n    // Get the results of reading foo.txt.\n    auto file1Data = file1Task.yieldForce;\n}\n---\n\n---\n// Sorts an array using a parallel quick sort algorithm.\n// The first partition is done serially.  Both recursion\n// branches are then executed in parallel.\n//\n// Timings for sorting an array of 1,000,000 doubles on\n// an Athlon 64 X2 dual core machine:\n//\n// This implementation:               176 milliseconds.\n// Equivalent serial implementation:  280 milliseconds\nvoid parallelSort(T)(T[] data)\n{\n    // Sort small subarrays serially.\n    if(data.length < 100)\n    {\n         std.algorithm.sort(data);\n         return;\n    }\n\n    // Partition the array.\n    swap(data[$ / 2], data[$ - 1]);\n    auto pivot = data[$ - 1];\n    bool lessThanPivot(T elem) { return elem < pivot; }\n\n    auto greaterEqual = partition!lessThanPivot(data[0..$ - 1]);\n    swap(data[$ - greaterEqual.length - 1], data[$ - 1]);\n\n    auto less = data[0..$ - greaterEqual.length - 1];\n    greaterEqual = data[$ - greaterEqual.length..$];\n\n    // Execute both recursion branches in parallel.\n    auto recurseTask = task!parallelSort(greaterEqual);\n    taskPool.put(recurseTask);\n    parallelSort(less);\n    recurseTask.yieldForce;\n}\n---\n",
				"name": "task"
			},
			{
				"kind": "template",
				"line": 886,
				"constraint": "is(typeof(delegateOrFp(args))) && !isSafeTask!F",
				"members": [
					{
						"kind": "function",
						"line": 886,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "(F delegateOrFp, Args args)",
						"parameters": [
							{
								"type": "F",
								"name": "delegateOrFp"
							},
							{
								"type": "Args",
								"name": "args"
							}
						],
						"name": "task",
						"endline": 890
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "F"
					},
					{
						"kind": "tuple",
						"name": "Args"
					}
				],
				"comment": "Creates a $(D Task) on the GC heap that calls a function pointer, delegate, or\nclass/struct with overloaded opCall.\n\nExamples:\n---\n// Read two files in at the same time again,\n// but this time use a function pointer instead\n// of an alias to represent std.file.read.\nimport std.file;\n\nvoid main()\n{\n    // Create and execute a Task for reading\n    // foo.txt.\n    auto file1Task = task(&read, \"foo.txt\");\n    file1Task.executeInNewThread();\n\n    // Read bar.txt in parallel.\n    auto file2Data = read(\"bar.txt\");\n\n    // Get the results of reading foo.txt.\n    auto file1Data = file1Task.yieldForce;\n}\n---\n\nNotes: This function takes a non-scope delegate, meaning it can be\n       used with closures.  If you can't allocate a closure due to objects\n       on the stack that have scoped destruction, see $(D scopedTask), which\n       takes a scope delegate.\n",
				"name": "task"
			},
			{
				"kind": "template",
				"line": 913,
				"constraint": "is(typeof(fun(args))) && isSafeTask!F",
				"members": [
					{
						"kind": "function",
						"line": 913,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 15,
						"type": "@trusted (F fun, Args args)",
						"parameters": [
							{
								"type": "F",
								"name": "fun"
							},
							{
								"type": "Args",
								"name": "args"
							}
						],
						"name": "task",
						"endline": 917
					}
				],
				"char": 15,
				"parameters": [
					{
						"kind": "type",
						"name": "F"
					},
					{
						"kind": "tuple",
						"name": "Args"
					}
				],
				"comment": "Version of $(D task) usable from $(D @safe) code.  Usage mechanics are\nidentical to the non-@safe case, but safety introduces some restrictions:\n\n1.  $(D fun) must be @safe or @trusted.\n\n2.  $(D F) must not have any unshared aliasing as defined by\n    $(XREF traits, hasUnsharedAliasing).  This means it\n    may not be an unshared delegate or a non-shared class or struct\n    with overloaded $(D opCall).  This also precludes accepting template\n    alias parameters.\n\n3.  $(D Args) must not have unshared aliasing.\n\n4.  $(D fun) must not return by reference.\n\n5.  The return type must not have unshared aliasing unless $(D fun) is\n    $(D pure) or the $(D Task) is executed via $(D executeInNewThread) instead\n    of using a $(D TaskPool).\n\n",
				"name": "task"
			},
			{
				"kind": "template",
				"line": 940,
				"members": [
					{
						"kind": "function",
						"line": 940,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "(Args args)",
						"parameters": [
							{
								"type": "Args",
								"name": "args"
							}
						],
						"name": "scopedTask",
						"endline": 945
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "alias",
						"name": "fun"
					},
					{
						"kind": "tuple",
						"name": "Args"
					}
				],
				"comment": "These functions allow the creation of $(D Task) objects on the stack rather\nthan the GC heap.  The lifetime of a $(D Task) created by $(D scopedTask)\ncannot exceed the lifetime of the scope it was created in.\n\n$(D scopedTask) might be preferred over $(D task):\n\n1.  When a $(D Task) that calls a delegate is being created and a closure\n    cannot be allocated due to objects on the stack that have scoped\n    destruction.  The delegate overload of $(D scopedTask) takes a $(D scope)\n    delegate.\n\n2.  As a micro-optimization, to avoid the heap allocation associated with\n    $(D task) or with the creation of a closure.\n\nUsage is otherwise identical to $(D task).\n\nNotes:  $(D Task) objects created using $(D scopedTask) will automatically\ncall $(D Task.yieldForce) in their destructor if necessary to ensure\nthe $(D Task) is complete before the stack frame they reside on is destroyed.\n",
				"name": "scopedTask"
			},
			{
				"kind": "template",
				"line": 948,
				"constraint": "is(typeof(delegateOrFp(args))) && !isSafeTask!F",
				"members": [
					{
						"kind": "function",
						"line": 948,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "(scope F delegateOrFp, Args args)",
						"parameters": [
							{
								"storageClass": [
									"scope"
								],
								"type": "F",
								"name": "delegateOrFp"
							},
							{
								"type": "Args",
								"name": "args"
							}
						],
						"name": "scopedTask",
						"endline": 954
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "F"
					},
					{
						"kind": "tuple",
						"name": "Args"
					}
				],
				"comment": "Ditto\n",
				"name": "scopedTask"
			},
			{
				"kind": "template",
				"line": 957,
				"constraint": "is(typeof(fun(args))) && isSafeTask!F",
				"members": [
					{
						"kind": "function",
						"line": 957,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 15,
						"type": "@trusted (F fun, Args args)",
						"parameters": [
							{
								"type": "F",
								"name": "fun"
							},
							{
								"type": "Args",
								"name": "args"
							}
						],
						"name": "scopedTask",
						"endline": 963
					}
				],
				"char": 15,
				"parameters": [
					{
						"kind": "type",
						"name": "F"
					},
					{
						"kind": "tuple",
						"name": "Args"
					}
				],
				"comment": "Ditto\n",
				"name": "scopedTask"
			},
			{
				"kind": "variable",
				"line": 969,
				"storageClass": [
					"immutable"
				],
				"deco": "yk",
				"char": 16,
				"name": "totalCPUs",
				"comment": "The total number of CPU cores available on the current machine, as reported by\nthe operating system.\n",
				"originalType": "uint"
			},
			{
				"kind": "class",
				"line": 1026,
				"members": [
					{
						"kind": "constructor",
						"line": 1436,
						"deco": "FNeZC3std11parallelism8TaskPool",
						"endchar": 5,
						"char": 5,
						"name": "this",
						"comment": "    Default constructor that initializes a $(D TaskPool) with\n    $(D totalCPUs) - 1 worker threads.  The minus 1 is included because the\n    main thread will also be available to do work.\n\n    Note:  On single-core machines, the primitives provided by $(D TaskPool)\n           operate transparently in single-threaded mode.\n",
						"originalType": "@trusted ()",
						"endline": 1439
					},
					{
						"kind": "constructor",
						"line": 1444,
						"deco": "FNemZC3std11parallelism8TaskPool",
						"endchar": 5,
						"char": 5,
						"parameters": [
							{
								"deco": "m",
								"name": "nWorkers"
							}
						],
						"name": "this",
						"comment": "    Allows for custom number of worker threads.\n",
						"originalType": "@trusted (size_t nWorkers)",
						"endline": 1469
					},
					{
						"kind": "template",
						"line": 1542,
						"members": [
							{
								"kind": "function",
								"line": 1542,
								"endchar": 5,
								"char": 23,
								"type": "ParallelForeach!R(R range, size_t workUnitSize)",
								"parameters": [
									{
										"type": "R",
										"name": "range"
									},
									{
										"type": "size_t",
										"name": "workUnitSize"
									}
								],
								"name": "parallel",
								"endline": 1547
							}
						],
						"char": 23,
						"parameters": [
							{
								"kind": "type",
								"name": "R"
							}
						],
						"comment": "    Implements a parallel foreach loop over a range.  This works by implicitly\n    creating and submitting one $(D Task) to the $(D TaskPool) for each worker\n    thread.  A work unit is a set of consecutive elements of $(D range) to\n    be processed by a worker thread between communication with any other\n    thread.  The number of elements processed per work unit is controlled by the\n    $(D workUnitSize) parameter.  Smaller work units provide better load\n    balancing, but larger work units avoid the overhead of communicating\n    with other threads frequently to fetch the next work unit.  Large work\n    units also avoid false sharing in cases where the range is being modified.\n    The less time a single iteration of the loop takes, the larger\n    $(D workUnitSize) should be.  For very expensive loop bodies,\n    $(D workUnitSize) should  be 1.  An overload that chooses a default work\n    unit size is also available.\n\n    Examples:\n    ---\n    // Find the logarithm of every number from 1 to\n    // 10_000_000 in parallel.\n    auto logs = new double[10_000_000];\n\n    // Parallel foreach works with or without an index\n    // variable.  It can be iterate by ref if range.front\n    // returns by ref.\n\n    // Iterate over logs using work units of size 100.\n    foreach(i, ref elem; taskPool.parallel(logs, 100))\n    {\n        elem = log(i + 1.0);\n    }\n\n    // Same thing, but use the default work unit size.\n    //\n    // Timings on an Athlon 64 X2 dual core machine:\n    //\n    // Parallel foreach:  388 milliseconds\n    // Regular foreach:   619 milliseconds\n    foreach(i, ref elem; taskPool.parallel(logs))\n    {\n        elem = log(i + 1.0);\n    }\n    ---\n\n    Notes:\n\n    The memory usage of this implementation is guaranteed to be constant\n    in $(D range.length).\n\n    Breaking from a parallel foreach loop via a break, labeled break,\n    labeled continue, return or goto statement throws a\n    $(D ParallelForeachError).\n\n    In the case of non-random access ranges, parallel foreach buffers lazily\n    to an array of size $(D workUnitSize) before executing the parallel portion\n    of the loop.  The exception is that, if a parallel foreach is executed\n    over a range returned by $(D asyncBuf) or $(D map), the copying is elided\n    and the buffers are simply swapped.  In this case $(D workUnitSize) is\n    ignored and the work unit size is set to the  buffer size of $(D range).\n\n    A memory barrier is guaranteed to be executed on exit from the loop,\n    so that results produced by all threads are visible in the calling thread.\n\n    $(B Exception Handling):\n\n    When at least one exception is thrown from inside a parallel foreach loop,\n    the submission of additional $(D Task) objects is terminated as soon as\n    possible, in a non-deterministic manner.  All executing or\n    enqueued work units are allowed to complete.  Then, all exceptions that\n    were thrown by any work unit are chained using $(D Throwable.next) and\n    rethrown.  The order of the exception chaining is non-deterministic.\n",
						"name": "parallel"
					},
					{
						"kind": "template",
						"line": 1551,
						"members": [
							{
								"kind": "function",
								"line": 1551,
								"endchar": 5,
								"char": 23,
								"type": "ParallelForeach!R(R range)",
								"parameters": [
									{
										"type": "R",
										"name": "range"
									}
								],
								"name": "parallel",
								"endline": 1566
							}
						],
						"char": 23,
						"parameters": [
							{
								"kind": "type",
								"name": "R"
							}
						],
						"comment": "Ditto\n",
						"name": "parallel"
					},
					{
						"kind": "template",
						"line": 1569,
						"members": [
							{
								"kind": "template",
								"line": 1652,
								"constraint": "isRandomAccessRange!(Args[0])",
								"members": [
									{
										"kind": "function",
										"line": 1652,
										"storageClass": [
											"auto"
										],
										"endchar": 9,
										"char": 14,
										"type": "(Args args)",
										"parameters": [
											{
												"type": "Args",
												"name": "args"
											}
										],
										"name": "amap",
										"endline": 1760
									}
								],
								"char": 14,
								"parameters": [
									{
										"kind": "tuple",
										"name": "Args"
									}
								],
								"comment": "        Eager parallel map.  The eagerness of this function means it has less\n        overhead than the lazily evaluated $(D TaskPool.map) and should be\n        preferred where the memory requirements of eagerness are acceptable.\n        $(D functions) are the functions to be evaluated, passed as template alias\n        parameters in a style similar to $(XREF algorithm, map).  The first\n        argument must be a random access range. For performance reasons, amap\n        will assume the range elements have not yet been initialized. Elements will\n        be overwritten without calling a destructor nor doing an assignment. As such,\n        the range must not contain meaningful data: either un-initialized objects, or\n        objects in their $(D .init) state.\n\n        ---\n        auto numbers = iota(100_000_000.0);\n\n        // Find the square roots of numbers.\n        //\n        // Timings on an Athlon 64 X2 dual core machine:\n        //\n        // Parallel eager map:                   0.802 s\n        // Equivalent serial implementation:     1.768 s\n        auto squareRoots = taskPool.amap!sqrt(numbers);\n        ---\n\n        Immediately after the range argument, an optional work unit size argument\n        may be provided.  Work units as used by $(D amap) are identical to those\n        defined for parallel foreach.  If no work unit size is provided, the\n        default work unit size is used.\n\n        ---\n        // Same thing, but make work unit size 100.\n        auto squareRoots = taskPool.amap!sqrt(numbers, 100);\n        ---\n\n        An output range for returning the results may be provided as the last\n        argument.  If one is not provided, an array of the proper type will be\n        allocated on the garbage collected heap.  If one is provided, it must be a\n        random access range with assignable elements, must have reference\n        semantics with respect to assignment to its elements, and must have the\n        same length as the input range.  Writing to adjacent elements from\n        different threads must be safe.\n\n        ---\n        // Same thing, but explicitly allocate an array\n        // to return the results in.  The element type\n        // of the array may be either the exact type\n        // returned by functions or an implicit conversion\n        // target.\n        auto squareRoots = new float[numbers.length];\n        taskPool.amap!sqrt(numbers, squareRoots);\n\n        // Multiple functions, explicit output range, and\n        // explicit work unit size.\n        auto results = new Tuple!(float, real)[numbers.length];\n        taskPool.amap!(sqrt, log)(numbers, 100, results);\n        ---\n\n        Note:\n\n        A memory barrier is guaranteed to be executed after all results are written\n        but before returning so that results produced by all threads are visible\n        in the calling thread.\n\n        Tips:\n\n        To perform the mapping operation in place, provide the same range for the\n        input and output range.\n\n        To parallelize the copying of a range with expensive to evaluate elements\n        to an array, pass an identity function (a function that just returns\n        whatever argument is provided to it) to $(D amap).\n\n        $(B Exception Handling):\n\n        When at least one exception is thrown from inside the map functions,\n        the submission of additional $(D Task) objects is terminated as soon as\n        possible, in a non-deterministic manner.  All currently executing or\n        enqueued work units are allowed to complete.  Then, all exceptions that\n        were thrown from any work unit are chained using $(D Throwable.next) and\n        rethrown.  The order of the exception chaining is non-deterministic.\n",
								"name": "amap"
							}
						],
						"char": 5,
						"parameters": [
							{
								"kind": "tuple",
								"name": "functions"
							}
						],
						"comment": "\n",
						"name": "amap"
					},
					{
						"kind": "template",
						"line": 1764,
						"members": [
							{
								"kind": "template",
								"line": 1836,
								"constraint": "isInputRange!S",
								"members": [
									{
										"kind": "function",
										"line": 1836,
										"storageClass": [
											"auto"
										],
										"endchar": 9,
										"char": 9,
										"type": "(S source, size_t bufSize = 100, size_t workUnitSize = size_t.max)",
										"parameters": [
											{
												"type": "S",
												"name": "source"
											},
											{
												"default": "100",
												"type": "size_t",
												"name": "bufSize"
											},
											{
												"default": "size_t.max",
												"type": "size_t",
												"name": "workUnitSize"
											}
										],
										"name": "map",
										"endline": 2097
									}
								],
								"char": 9,
								"parameters": [
									{
										"kind": "type",
										"name": "S"
									}
								],
								"comment": "        A semi-lazy parallel map that can be used for pipelining.  The map\n        functions are evaluated for the first $(D bufSize) elements and stored in a\n        buffer and made available to $(D popFront).  Meanwhile, in the\n        background a second buffer of the same size is filled.  When the first\n        buffer is exhausted, it is swapped with the second buffer and filled while\n        the values from what was originally the second buffer are read.  This\n        implementation allows for elements to be written to the buffer without\n        the need for atomic operations or synchronization for each write, and\n        enables the mapping function to be evaluated efficiently in parallel.\n\n        $(D map) has more overhead than the simpler procedure used by $(D amap)\n        but avoids the need to keep all results in memory simultaneously and works\n        with non-random access ranges.\n\n        Params:\n\n        source = The input range to be mapped.  If $(D source) is not random\n        access it will be lazily buffered to an array of size $(D bufSize) before\n        the map function is evaluated.  (For an exception to this rule, see Notes.)\n\n        bufSize = The size of the buffer to store the evaluated elements.\n\n        workUnitSize = The number of elements to evaluate in a single\n        $(D Task).  Must be less than or equal to $(D bufSize), and\n        should be a fraction of $(D bufSize) such that all worker threads can be\n        used.  If the default of size_t.max is used, workUnitSize will be set to\n        the pool-wide default.\n\n        Returns:  An input range representing the results of the map.  This range\n                  has a length iff $(D source) has a length.\n\n        Notes:\n\n        If a range returned by $(D map) or $(D asyncBuf) is used as an input to\n        $(D map), then as an optimization the copying from the output buffer\n        of the first range to the input buffer of the second range is elided, even\n        though the ranges returned by $(D map) and $(D asyncBuf) are non-random\n        access ranges.  This means that the $(D bufSize) parameter passed to the\n        current call to $(D map) will be ignored and the size of the buffer\n        will be the buffer size of $(D source).\n\n        Examples:\n        ---\n        // Pipeline reading a file, converting each line\n        // to a number, taking the logarithms of the numbers,\n        // and performing the additions necessary to find\n        // the sum of the logarithms.\n\n        auto lineRange = File(\"numberList.txt\").byLine();\n        auto dupedLines = std.algorithm.map!\"a.idup\"(lineRange);\n        auto nums = taskPool.map!(to!double)(dupedLines);\n        auto logs = taskPool.map!log10(nums);\n\n        double sum = 0;\n        foreach(elem; logs)\n        {\n            sum += elem;\n        }\n        ---\n\n        $(B Exception Handling):\n\n        Any exceptions thrown while iterating over $(D source)\n        or computing the map function are re-thrown on a call to $(D popFront) or,\n        if thrown during construction, are simply allowed to propagate to the\n        caller.  In the case of exceptions thrown while computing the map function,\n        the exceptions are chained as in $(D TaskPool.amap).\n",
								"name": "map"
							}
						],
						"char": 5,
						"parameters": [
							{
								"kind": "tuple",
								"name": "functions"
							}
						],
						"comment": "\n",
						"name": "map"
					},
					{
						"kind": "template",
						"line": 2143,
						"constraint": "isInputRange!S",
						"members": [
							{
								"kind": "function",
								"line": 2143,
								"storageClass": [
									"auto"
								],
								"endchar": 5,
								"char": 10,
								"type": "(S source, size_t bufSize = 100)",
								"parameters": [
									{
										"type": "S",
										"name": "source"
									},
									{
										"default": "100",
										"type": "size_t",
										"name": "bufSize"
									}
								],
								"name": "asyncBuf",
								"endline": 2278
							}
						],
						"char": 10,
						"parameters": [
							{
								"kind": "type",
								"name": "S"
							}
						],
						"comment": "    Given a $(D source) range that is expensive to iterate over, returns an\n    input range that asynchronously buffers the contents of\n    $(D source) into a buffer of $(D bufSize) elements in a worker thread,\n    while making previously buffered elements from a second buffer, also of size\n    $(D bufSize), available via the range interface of the returned\n    object.  The returned range has a length iff $(D hasLength!S).\n    $(D asyncBuf) is useful, for example, when performing expensive operations\n    on the elements of ranges that represent data on a disk or network.\n\n    Examples:\n    ---\n    import std.conv, std.stdio;\n\n    void main()\n    {\n        // Fetch lines of a file in a background thread\n        // while processing previously fetched lines,\n        // dealing with byLine's buffer recycling by\n        // eagerly duplicating every line.\n        auto lines = File(\"foo.txt\").byLine();\n        auto duped = std.algorithm.map!\"a.idup\"(lines);\n\n        // Fetch more lines in the background while we\n        // process the lines already read into memory\n        // into a matrix of doubles.\n        double[][] matrix;\n        auto asyncReader = taskPool.asyncBuf(duped);\n\n        foreach(line; asyncReader)\n        {\n            auto ls = line.split(\"\\t\");\n            matrix ~= to!(double[])(ls);\n        }\n    }\n    ---\n\n    $(B Exception Handling):\n\n    Any exceptions thrown while iterating over $(D source) are re-thrown on a\n    call to $(D popFront) or, if thrown during construction, simply\n    allowed to propagate to the caller.\n",
						"name": "asyncBuf"
					},
					{
						"kind": "template",
						"line": 2343,
						"constraint": "is(typeof(C2.init()) : bool) && ParameterTypeTuple!C1.length == 1 && ParameterTypeTuple!C2.length == 0 && isArray!(ParameterTypeTuple!C1[0])",
						"members": [
							{
								"kind": "function",
								"line": 2343,
								"storageClass": [
									"auto"
								],
								"endchar": 5,
								"char": 10,
								"type": "(C1 next, C2 empty, size_t initialBufSize = 0, size_t nBuffers = 100)",
								"parameters": [
									{
										"type": "C1",
										"name": "next"
									},
									{
										"type": "C2",
										"name": "empty"
									},
									{
										"default": "0",
										"type": "size_t",
										"name": "initialBufSize"
									},
									{
										"default": "100",
										"type": "size_t",
										"name": "nBuffers"
									}
								],
								"name": "asyncBuf",
								"endline": 2351
							}
						],
						"char": 10,
						"parameters": [
							{
								"kind": "type",
								"name": "C1"
							},
							{
								"kind": "type",
								"name": "C2"
							}
						],
						"comment": "    Given a callable object $(D next) that writes to a user-provided buffer and\n    a second callable object $(D empty) that determines whether more data is\n    available to write via $(D next), returns an input range that\n    asynchronously calls $(D next) with a set of size $(D nBuffers) of buffers\n    and makes the results available in the order they were obtained via the\n    input range interface of the returned object.  Similarly to the\n    input range overload of $(D asyncBuf), the first half of the buffers\n    are made available via the range interface while the second half are\n    filled and vice-versa.\n\n    Params:\n\n    next = A callable object that takes a single argument that must be an array\n           with mutable elements.  When called, $(D next) writes data to\n           the array provided by the caller.\n\n    empty = A callable object that takes no arguments and returns a type\n            implicitly convertible to $(D bool).  This is used to signify\n            that no more data is available to be obtained by calling $(D next).\n\n    initialBufSize = The initial size of each buffer.  If $(D next) takes its\n                     array by reference, it may resize the buffers.\n\n    nBuffers = The number of buffers to cycle through when calling $(D next).\n\n    Examples:\n    ---\n    // Fetch lines of a file in a background\n    // thread while processing previously fetched\n    // lines, without duplicating any lines.\n    auto file = File(\"foo.txt\");\n\n    void next(ref char[] buf)\n    {\n        file.readln(buf);\n    }\n\n    // Fetch more lines in the background while we\n    // process the lines already read into memory\n    // into a matrix of doubles.\n    double[][] matrix;\n    auto asyncReader = taskPool.asyncBuf(&next, &file.eof);\n\n    foreach(line; asyncReader)\n    {\n        auto ls = line.split(\"\\t\");\n        matrix ~= to!(double[])(ls);\n    }\n    ---\n\n    $(B Exception Handling):\n\n    Any exceptions thrown while iterating over $(D range) are re-thrown on a\n    call to $(D popFront).\n\n    Warning:\n\n    Using the range returned by this function in a parallel foreach loop\n    will not work because buffers may be overwritten while the task that\n    processes them is in queue.  This is checked for at compile time\n    and will result in a static assertion failure.\n",
						"name": "asyncBuf"
					},
					{
						"kind": "template",
						"line": 2354,
						"members": [
							{
								"kind": "template",
								"line": 2438,
								"members": [
									{
										"kind": "function",
										"line": 2438,
										"storageClass": [
											"auto"
										],
										"endchar": 9,
										"char": 14,
										"type": "(Args args)",
										"parameters": [
											{
												"type": "Args",
												"name": "args"
											}
										],
										"name": "reduce",
										"endline": 2727
									}
								],
								"char": 14,
								"parameters": [
									{
										"kind": "tuple",
										"name": "Args"
									}
								],
								"comment": "        Parallel reduce on a random access range.  Except as otherwise noted, usage\n        is similar to $(XREF algorithm, _reduce).  This function works by splitting\n        the range to be reduced into work units, which are slices to be reduced in\n        parallel.  Once the results from all work units are computed, a final serial\n        reduction is performed on these results to compute the final answer.\n        Therefore, care must be taken to choose the seed value appropriately.\n\n        Because the reduction is being performed in parallel,\n        $(D functions) must be associative.  For notational simplicity, let # be an\n        infix operator representing $(D functions).  Then, (a # b) # c must equal\n        a # (b # c).  Floating point addition is not associative\n        even though addition in exact arithmetic is.  Summing floating\n        point numbers using this function may give different results than summing\n        serially.  However, for many practical purposes floating point addition\n        can be treated as associative.\n\n        Note that, since $(D functions) are assumed to be associative, additional\n        optimizations are made to the serial portion of the reduction algorithm.\n        These take advantage of the instruction level parallelism of modern CPUs,\n        in addition to the thread-level parallelism that the rest of this\n        module exploits.  This can lead to better than linear speedups relative\n        to $(XREF algorithm, _reduce), especially for fine-grained benchmarks\n        like dot products.\n\n        An explicit seed may be provided as the first argument.  If\n        provided, it is used as the seed for all work units and for the final\n        reduction of results from all work units.  Therefore, if it is not the\n        identity value for the operation being performed, results may differ from\n        those generated by $(XREF algorithm, _reduce) or depending on how many work\n        units are used.  The next argument must be the range to be reduced.\n        ---\n        // Find the sum of squares of a range in parallel, using\n        // an explicit seed.\n        //\n        // Timings on an Athlon 64 X2 dual core machine:\n        //\n        // Parallel reduce:                     72 milliseconds\n        // Using std.algorithm.reduce instead:  181 milliseconds\n        auto nums = iota(10_000_000.0f);\n        auto sumSquares = taskPool.reduce!\"a + b\"(\n            0.0, std.algorithm.map!\"a * a\"(nums)\n        );\n        ---\n\n        If no explicit seed is provided, the first element of each work unit\n        is used as a seed.  For the final reduction, the result from the first\n        work unit is used as the seed.\n        ---\n        // Find the sum of a range in parallel, using the first\n        // element of each work unit as the seed.\n        auto sum = taskPool.reduce!\"a + b\"(nums);\n        ---\n\n        An explicit work unit size may be specified as the last argument.\n        Specifying too small a work unit size will effectively serialize the\n        reduction, as the final reduction of the result of each work unit will\n        dominate computation time.  If $(D TaskPool.size) for this instance\n        is zero, this parameter is ignored and one work unit is used.\n        ---\n        // Use a work unit size of 100.\n        auto sum2 = taskPool.reduce!\"a + b\"(nums, 100);\n\n        // Work unit size of 100 and explicit seed.\n        auto sum3 = taskPool.reduce!\"a + b\"(0.0, nums, 100);\n        ---\n\n        Parallel reduce supports multiple functions, like\n        $(D std.algorithm.reduce).\n        ---\n        // Find both the min and max of nums.\n        auto minMax = taskPool.reduce!(min, max)(nums);\n        assert(minMax[0] == reduce!min(nums));\n        assert(minMax[1] == reduce!max(nums));\n        ---\n\n        $(B Exception Handling):\n\n        After this function is finished executing, any exceptions thrown\n        are chained together via $(D Throwable.next) and rethrown.  The chaining\n        order is non-deterministic.\n",
								"name": "reduce"
							}
						],
						"char": 5,
						"parameters": [
							{
								"kind": "tuple",
								"name": "functions"
							}
						],
						"comment": "\n",
						"name": "reduce"
					},
					{
						"kind": "function",
						"line": 2769,
						"deco": "xFNbNdNfZm",
						"endchar": 5,
						"char": 12,
						"name": "workerIndex",
						"comment": "    Gets the index of the current thread relative to this $(D TaskPool).  Any\n    thread not in this pool will receive an index of 0.  The worker threads in\n    this pool receive unique indices of 1 through $(D this.size).\n\n    This function is useful for maintaining worker-local resources.\n\n    Examples:\n    ---\n    // Execute a loop that computes the greatest common\n    // divisor of every number from 0 through 999 with\n    // 42 in parallel.  Write the results out to\n    // a set of files, one for each thread.  This allows\n    // results to be written out without any synchronization.\n\n    import std.conv, std.range, std.numeric, std.stdio;\n\n    void main()\n    {\n        auto filesHandles = new File[taskPool.size + 1];\n        scope(exit) {\n            foreach(ref handle; fileHandles) {\n                handle.close();\n            }\n        }\n\n        foreach(i, ref handle; fileHandles)\n        {\n            handle = File(\"workerResults\" ~ to!string(i) ~ \".txt\");\n        }\n\n        foreach(num; parallel(iota(1_000)))\n        {\n            auto outHandle = fileHandles[taskPool.workerIndex];\n            outHandle.writeln(num, '\\t', gcd(num, 42));\n        }\n    }\n    ---\n",
						"originalType": "const nothrow @property @safe size_t()",
						"endline": 2774
					},
					{
						"kind": "template",
						"line": 2821,
						"members": [
							{
								"kind": "struct",
								"line": 2821,
								"members": [
									{
										"kind": "function",
										"line": 2914,
										"endchar": 9,
										"char": 15,
										"type": "@property ref T()",
										"name": "get",
										"comment": "        Get the current thread's instance.  Returns by ref.\n        Note that calling $(D get) from any thread\n        outside the $(D TaskPool) that created this instance will return the\n        same reference, so an instance of worker-local storage should only be\n        accessed from one thread outside the pool that created it.  If this\n        rule is violated, undefined behavior will result.\n\n        If assertions are enabled and $(D toRange) has been called, then this\n        WorkerLocalStorage instance is no longer worker-local and an assertion\n        failure will result when calling this method.  This is not checked\n        when assertions are disabled for performance reasons.\n",
										"endline": 2921
									},
									{
										"kind": "function",
										"line": 2927,
										"endchar": 9,
										"char": 14,
										"type": "@property void(T val)",
										"parameters": [
											{
												"type": "T",
												"name": "val"
											}
										],
										"name": "get",
										"comment": "        Assign a value to the current thread's instance.  This function has\n        the same caveats as its overload.\n",
										"endline": 2935
									},
									{
										"kind": "function",
										"line": 2947,
										"endchar": 9,
										"char": 35,
										"type": "@property WorkerLocalStorageRange!T()",
										"name": "toRange",
										"comment": "        Returns a range view of the values for all threads, which can be used\n        to further process the results of each thread after running the parallel\n        part of your algorithm.  Do not use this method in the parallel portion\n        of your algorithm.\n\n        Calling this function sets a flag indicating that this struct is no\n        longer worker-local, and attempting to use the $(D get) method again\n        will result in an assertion failure if assertions are enabled.\n",
										"endline": 2964
									}
								],
								"char": 12,
								"name": "WorkerLocalStorage"
							}
						],
						"char": 12,
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"comment": "    Struct for creating worker-local storage.  Worker-local storage is\n    thread-local storage that exists only for worker threads in a given\n    $(D TaskPool) plus a single thread outside the pool.  It is allocated on the\n    garbage collected heap in a way that avoids _false sharing, and doesn't\n    necessarily have global scope within any thread.  It can be accessed from\n    any worker thread in the $(D TaskPool) that created it, and one thread\n    outside this $(D TaskPool).  All threads outside the pool that created a\n    given instance of worker-local storage share a single slot.\n\n    Since the underlying data for this struct is heap-allocated, this struct\n    has reference semantics when passed between functions.\n\n    The main uses cases for $(D WorkerLocalStorageStorage) are:\n\n    1.  Performing parallel reductions with an imperative, as opposed to\n    functional, programming style.  In this case, it's useful to treat\n    $(D WorkerLocalStorageStorage) as local to each thread for only the parallel\n    portion of an algorithm.\n\n    2.  Recycling temporary buffers across iterations of a parallel foreach loop.\n\n    Examples:\n    ---\n    // Calculate pi as in our synopsis example, but\n    // use an imperative instead of a functional style.\n    immutable n = 1_000_000_000;\n    immutable delta = 1.0L / n;\n\n    auto sums = taskPool.workerLocalStorage(0.0L);\n    foreach(i; parallel(iota(n)))\n    {\n        immutable x = ( i - 0.5L ) * delta;\n        immutable toAdd = delta / ( 1.0 + x * x );\n        sums.get += toAdd;\n    }\n\n    // Add up the results from each worker thread.\n    real pi = 0;\n    foreach(threadResult; sums.toRange)\n    {\n        pi += 4.0L * threadResult;\n    }\n    ---\n",
						"name": "WorkerLocalStorage"
					},
					{
						"kind": "template",
						"line": 2979,
						"members": [
							{
								"kind": "struct",
								"line": 2979,
								"members": [],
								"char": 12,
								"name": "WorkerLocalStorageRange"
							}
						],
						"char": 12,
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"comment": "    Range primitives for worker-local storage.  The purpose of this is to\n    access results produced by each worker thread from a single thread once you\n    are no longer using the worker-local storage from multiple threads.\n    Do not use this struct in the parallel portion of your algorithm.\n\n    The proper way to instantiate this object is to call\n    $(D WorkerLocalStorage.toRange).  Once instantiated, this object behaves\n    as a finite random-access range with assignable, lvalue elements and\n    a length equal to the number of worker threads in the $(D TaskPool) that\n    created it plus 1.\n",
						"name": "WorkerLocalStorageRange"
					},
					{
						"kind": "template",
						"line": 3064,
						"members": [
							{
								"kind": "function",
								"line": 3064,
								"endchar": 5,
								"char": 26,
								"type": "WorkerLocalStorage!T(lazy T initialVal = T.init)",
								"parameters": [
									{
										"storageClass": [
											"lazy"
										],
										"default": "T.init",
										"type": "T",
										"name": "initialVal"
									}
								],
								"name": "workerLocalStorage",
								"endline": 3079
							}
						],
						"char": 26,
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"comment": "    Creates an instance of worker-local storage, initialized with a given\n    value.  The value is $(D lazy) so that you can, for example, easily\n    create one instance of a class for each worker.  For usage example,\n    see the $(D WorkerLocalStorage) struct.\n",
						"name": "workerLocalStorage"
					},
					{
						"kind": "function",
						"line": 3092,
						"deco": "FNeZv",
						"endchar": 5,
						"char": 10,
						"name": "stop",
						"comment": "    Signals to all worker threads to terminate as soon as they are finished\n    with their current $(D Task), or immediately if they are not executing a\n    $(D Task).  $(D Task)s that were in queue will not be executed unless\n    a call to $(D Task.workForce), $(D Task.yieldForce) or $(D Task.spinForce)\n    causes them to be executed.\n\n    Use only if you have waited on every $(D Task) and therefore know the\n    queue is empty, or if you speculatively executed some tasks and no longer\n    need the results.\n",
						"endline": 3098
					},
					{
						"kind": "function",
						"line": 3113,
						"deco": "FNebZv",
						"endchar": 5,
						"char": 10,
						"parameters": [
							{
								"deco": "b",
								"default": "false",
								"name": "blocking"
							}
						],
						"name": "finish",
						"comment": "    Signals worker threads to terminate when the queue becomes empty.\n\n    If blocking argument is true, wait for all worker threads to terminate\n    before returning.  This option might be used in applications where\n    task results are never consumed-- e.g. when $(D TaskPool) is employed as a\n    rudimentary scheduler for tasks which communicate by means other than\n    return values.\n\n    Warning:  Calling this function with $(D blocking = true) from a worker\n              thread that is a member of the same $(D TaskPool) that\n              $(D finish) is being called on will result in a deadlock.\n",
						"endline": 3141
					},
					{
						"kind": "function",
						"line": 3144,
						"deco": "xFNaNbNdNfZm",
						"endchar": 5,
						"char": 22,
						"name": "size",
						"comment": "Returns the number of worker threads in the pool.\n",
						"originalType": "const pure nothrow @property @safe size_t()",
						"endline": 3147
					},
					{
						"kind": "template",
						"line": 3181,
						"constraint": "!isSafeReturn!(typeof(task))",
						"members": [
							{
								"kind": "function",
								"line": 3181,
								"endchar": 5,
								"char": 10,
								"type": "void(ref Task!(fun, Args) task)",
								"parameters": [
									{
										"storageClass": [
											"ref"
										],
										"type": "Task!(fun, Args)",
										"name": "task"
									}
								],
								"name": "put",
								"endline": 3186
							}
						],
						"char": 10,
						"parameters": [
							{
								"kind": "alias",
								"name": "fun"
							},
							{
								"kind": "tuple",
								"name": "Args"
							}
						],
						"comment": "    Put a $(D Task) object on the back of the task queue.  The $(D Task)\n    object may be passed by pointer or reference.\n\n    Example:\n    ---\n    import std.file;\n\n    // Create a task.\n    auto t = task!read(\"foo.txt\");\n\n    // Add it to the queue to be executed.\n    taskPool.put(t);\n    ---\n\n    Notes:\n\n    @trusted overloads of this function are called for $(D Task)s if\n    $(XREF traits, hasUnsharedAliasing) is false for the $(D Task)'s\n    return type or the function the $(D Task) executes is $(D pure).\n    $(D Task) objects that meet all other requirements specified in the\n    $(D @trusted) overloads of $(D task) and $(D scopedTask) may be created\n    and executed from $(D @safe) code via $(D Task.executeInNewThread) but\n    not via $(D TaskPool).\n\n    While this function takes the address of variables that may\n    be on the stack, some overloads are marked as @trusted.\n    $(D Task) includes a destructor that waits for the task to complete\n    before destroying the stack frame it is allocated on.  Therefore,\n    it is impossible for the stack frame to be destroyed before the task is\n    complete and no longer referenced by a $(D TaskPool).\n",
						"name": "put"
					},
					{
						"kind": "template",
						"line": 3189,
						"constraint": "!isSafeReturn!(typeof(*task))",
						"members": [
							{
								"kind": "function",
								"line": 3189,
								"endchar": 5,
								"char": 10,
								"type": "void(Task!(fun, Args)* task)",
								"parameters": [
									{
										"type": "Task!(fun, Args)*",
										"name": "task"
									}
								],
								"name": "put",
								"endline": 3194
							}
						],
						"char": 10,
						"parameters": [
							{
								"kind": "alias",
								"name": "fun"
							},
							{
								"kind": "tuple",
								"name": "Args"
							}
						],
						"comment": "Ditto\n",
						"name": "put"
					},
					{
						"kind": "function",
						"line": 3226,
						"deco": "FNdNeZb",
						"endchar": 5,
						"char": 10,
						"name": "isDaemon",
						"comment": "    These properties control whether the worker threads are daemon threads.\n    A daemon thread is automatically terminated when all non-daemon threads\n    have terminated.  A non-daemon thread will prevent a program from\n    terminating as long as it has not terminated.\n\n    If any $(D TaskPool) with non-daemon threads is active, either $(D stop)\n    or $(D finish) must be called on it before the program can terminate.\n\n    The worker treads in the $(D TaskPool) instance returned by the\n    $(D taskPool) property are daemon by default.  The worker threads of\n    manually instantiated task pools are non-daemon by default.\n\n    Note:  For a size zero pool, the getter arbitrarily returns true and the\n           setter has no effect.\n",
						"endline": 3231
					},
					{
						"kind": "function",
						"line": 3234,
						"deco": "FNdNebZv",
						"endchar": 5,
						"char": 10,
						"parameters": [
							{
								"deco": "b",
								"name": "newVal"
							}
						],
						"name": "isDaemon",
						"comment": "Ditto\n",
						"endline": 3242
					},
					{
						"kind": "function",
						"line": 3253,
						"deco": "FNdNeZi",
						"endchar": 5,
						"char": 9,
						"name": "priority",
						"comment": "    These functions allow getting and setting the OS scheduling priority of\n    the worker threads in this $(D TaskPool).  They forward to\n    $(D core.thread.Thread.priority), so a given priority value here means the\n    same thing as an identical priority value in $(D core.thread).\n\n    Note:  For a size zero pool, the getter arbitrarily returns\n           $(D core.thread.Thread.PRIORITY_MIN) and the setter has no effect.\n",
						"endline": 3257
					},
					{
						"kind": "function",
						"line": 3260,
						"deco": "FNdNeiZv",
						"endchar": 5,
						"char": 10,
						"parameters": [
							{
								"deco": "i",
								"name": "newPriority"
							}
						],
						"name": "priority",
						"comment": "Ditto\n",
						"endline": 3269
					}
				],
				"char": 7,
				"name": "TaskPool",
				"comment": "This class encapsulates a task queue and a set of worker threads.  Its purpose\nis to efficiently map a large number of $(D Task)s onto a smaller number of\nthreads.  A task queue is a FIFO queue of $(D Task) objects that have been\nsubmitted to the $(D TaskPool) and are awaiting execution.  A worker thread is a\nthread that executes the $(D Task) at the front of the queue when one is\navailable and sleeps when the queue is empty.\n\nThis class should usually be used via the global instantiation\navailable via the $(XREF parallelism, taskPool) property.\nOccasionally it is useful to explicitly instantiate a $(D TaskPool):\n\n1.  When you want $(D TaskPool) instances with multiple priorities, for example\n    a low priority pool and a high priority pool.\n\n2.  When the threads in the global task pool are waiting on a synchronization\n    primitive (for example a mutex), and you want to parallelize the code that\n    needs to run before these threads can be resumed.\n"
			},
			{
				"kind": "function",
				"line": 3279,
				"deco": "FNdNeZC3std11parallelism8TaskPool",
				"endchar": 1,
				"char": 20,
				"name": "taskPool",
				"comment": "Returns a lazily initialized global instantiation of $(D TaskPool).\nThis function can safely be called concurrently from multiple non-worker\nthreads.  The worker threads in this pool are daemon threads, meaning that it\nis not necessary to call $(D TaskPool.stop) or $(D TaskPool.finish) before\nterminating the main thread.\n",
				"endline": 3299
			},
			{
				"kind": "function",
				"line": 3313,
				"deco": "FNdNeZk",
				"endchar": 1,
				"char": 16,
				"name": "defaultPoolThreads",
				"comment": "These properties get and set the number of worker threads in the $(D TaskPool)\ninstance returned by $(D taskPool).  The default value is $(D totalCPUs) - 1.\nCalling the setter after the first call to $(D taskPool) does not changes\nnumber of worker threads in the instance returned by $(D taskPool).\n",
				"endline": 3316
			},
			{
				"kind": "function",
				"line": 3319,
				"deco": "FNdNekZv",
				"endchar": 1,
				"char": 16,
				"parameters": [
					{
						"deco": "k",
						"name": "newVal"
					}
				],
				"name": "defaultPoolThreads",
				"comment": "Ditto\n",
				"endline": 3322
			},
			{
				"kind": "template",
				"line": 3342,
				"members": [
					{
						"kind": "function",
						"line": 3342,
						"endchar": 1,
						"char": 19,
						"type": "ParallelForeach!R(R range)",
						"parameters": [
							{
								"type": "R",
								"name": "range"
							}
						],
						"name": "parallel",
						"endline": 3345
					}
				],
				"char": 19,
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"comment": "Convenience functions that forwards to $(D taskPool.parallel).  The\npurpose of these is to make parallel foreach less verbose and more\nreadable.\n\nExample:\n---\n// Find the logarithm of every number from\n// 1 to 1_000_000 in parallel, using the\n// default TaskPool instance.\nauto logs = new double[1_000_000];\n\nforeach(i, ref elem; parallel(logs)) {\n    elem = log(i + 1.0);\n}\n---\n\n",
				"name": "parallel"
			},
			{
				"kind": "template",
				"line": 3348,
				"members": [
					{
						"kind": "function",
						"line": 3348,
						"endchar": 1,
						"char": 19,
						"type": "ParallelForeach!R(R range, size_t workUnitSize)",
						"parameters": [
							{
								"type": "R",
								"name": "range"
							},
							{
								"type": "size_t",
								"name": "workUnitSize"
							}
						],
						"name": "parallel",
						"endline": 3351
					}
				],
				"char": 19,
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"comment": "Ditto\n",
				"name": "parallel"
			}
		],
		"name": "std.parallelism",
		"comment": "$(D std._parallelism) implements high-level primitives for SMP _parallelism.\nThese include parallel foreach, parallel reduce, parallel eager map, pipelining\nand future/promise _parallelism.  $(D std._parallelism) is recommended when the\nsame operation is to be executed in parallel on different data, or when a\nfunction is to be executed in a background thread and its result returned to a\nwell-defined main thread.  For communication between arbitrary threads, see\n$(D std.concurrency).\n\n$(D std._parallelism) is based on the concept of a $(D Task).  A $(D Task) is an\nobject that represents the fundamental unit of work in this library and may be\nexecuted in parallel with any other $(D Task).  Using $(D Task)\ndirectly allows programming with a future/promise paradigm.  All other\nsupported _parallelism paradigms (parallel foreach, map, reduce, pipelining)\nrepresent an additional level of abstraction over $(D Task).  They\nautomatically create one or more $(D Task) objects, or closely related types\nthat are conceptually identical but not part of the public API.\n\nAfter creation, a $(D Task) may be executed in a new thread, or submitted\nto a $(D TaskPool) for execution.  A $(D TaskPool) encapsulates a task queue\nand its worker threads.  Its purpose is to efficiently map a large\nnumber of $(D Task)s onto a smaller number of threads.  A task queue is a\nFIFO queue of $(D Task) objects that have been submitted to the\n$(D TaskPool) and are awaiting execution.  A worker thread is a thread that\nis associated with exactly one task queue.  It executes the $(D Task) at the\nfront of its queue when the queue has work available, or sleeps when\nno work is available.  Each task queue is associated with zero or\nmore worker threads.  If the result of a $(D Task) is needed before execution\nby a worker thread has begun, the $(D Task) can be removed from the task queue\nand executed immediately in the thread where the result is needed.\n\nWarning:  Unless marked as $(D @trusted) or $(D @safe), artifacts in\n          this module allow implicit data sharing between threads and cannot\n          guarantee that client code is free from low level data races.\n\nSynopsis:\n\n---\nimport std.algorithm, std.parallelism, std.range;\n\nvoid main() {\n    // Parallel reduce can be combined with\n    // std.algorithm.map to interesting effect.\n    // The following example (thanks to Russel Winder)\n    // calculates pi by quadrature  using\n    // std.algorithm.map and TaskPool.reduce.\n    // getTerm is evaluated in parallel as needed by\n    // TaskPool.reduce.\n    //\n    // Timings on an Athlon 64 X2 dual core machine:\n    //\n    // TaskPool.reduce:       12.170 s\n    // std.algorithm.reduce:  24.065 s\n\n    immutable n = 1_000_000_000;\n    immutable delta = 1.0 / n;\n\n    real getTerm(int i)\n    {\n        immutable x = ( i - 0.5 ) * delta;\n        return delta / ( 1.0 + x * x ) ;\n    }\n\n    immutable pi = 4.0 * taskPool.reduce!\"a + b\"(\n        std.algorithm.map!getTerm(iota(n))\n    );\n}\n---\n\nSource:    $(PHOBOSSRC std/_parallelism.d)\nAuthor:  David Simcha\nCopyright:  Copyright (c) 2009-2011, David Simcha.\nLicense:    $(WEB boost.org/LICENSE_1_0.txt, Boost License 1.0)\n"
	},
	{
		"kind": "module",
		"file": "../phobos/std/conv.d",
		"members": [
			{
				"kind": "class",
				"line": 41,
				"base": "object.Exception",
				"members": [],
				"char": 1,
				"name": "ConvException",
				"comment": " Thrown on conversion errors.\n"
			},
			{
				"kind": "class",
				"line": 156,
				"base": "std.conv.ConvException",
				"members": [],
				"char": 1,
				"name": "ConvOverflowException",
				"comment": " Thrown on conversion overflow errors.\n"
			},
			{
				"kind": "template",
				"line": 290,
				"members": [
					{
						"kind": "template",
						"line": 292,
						"constraint": "!isRawStaticArray!A",
						"members": [
							{
								"kind": "function",
								"line": 292,
								"endchar": 5,
								"char": 7,
								"type": "T(A args)",
								"parameters": [
									{
										"type": "A",
										"name": "args"
									}
								],
								"name": "to",
								"endline": 296
							}
						],
						"char": 7,
						"parameters": [
							{
								"kind": "tuple",
								"name": "A"
							}
						],
						"name": "to"
					},
					{
						"kind": "template",
						"line": 299,
						"constraint": "isRawStaticArray!S",
						"members": [
							{
								"kind": "function",
								"line": 299,
								"endchar": 5,
								"char": 7,
								"type": "T(ref S arg)",
								"parameters": [
									{
										"storageClass": [
											"ref"
										],
										"type": "S",
										"name": "arg"
									}
								],
								"name": "to",
								"endline": 303
							}
						],
						"char": 7,
						"parameters": [
							{
								"kind": "type",
								"name": "S"
							}
						],
						"name": "to"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": "\nThe $(D_PARAM to) family of functions converts a value from type\n$(D_PARAM Source) to type $(D_PARAM Target). The source type is\ndeduced and the target type must be specified, for example the\nexpression $(D_PARAM to!int(42.0)) converts the number 42 from\n$(D_PARAM double) to $(D_PARAM int). The conversion is \"safe\", i.e.,\nit checks for overflow; $(D_PARAM to!int(4.2e10)) would throw the\n$(D_PARAM ConvOverflowException) exception. Overflow checks are only\ninserted when necessary, e.g., $(D_PARAM to!double(42)) does not do\nany checking because any int fits in a double.\n\nConverting a value to its own type (useful mostly for generic code)\nsimply returns its argument.\n\nExample:\n-------------------------\nint a = 42;\nauto b = to!int(a); // b is int with value 42\nauto c = to!double(3.14); // c is double with value 3.14\n-------------------------\n\nConverting among numeric types is a safe way to cast them around.\n\nConversions from floating-point types to integral types allow loss of\nprecision (the fractional part of a floating-point number). The\nconversion is truncating towards zero, the same way a cast would\ntruncate. (To round a floating point value when casting to an\nintegral, use $(D_PARAM roundTo).)\n\nExamples:\n-------------------------\nint a = 420;\nauto b = to!long(a); // same as long b = a;\nauto c = to!byte(a / 10); // fine, c = 42\nauto d = to!byte(a); // throw ConvOverflowException\ndouble e = 4.2e6;\nauto f = to!int(e); // f == 4200000\ne = -3.14;\nauto g = to!uint(e); // fails: floating-to-integral negative overflow\ne = 3.14;\nauto h = to!uint(e); // h = 3\ne = 3.99;\nh = to!uint(a); // h = 3\ne = -3.99;\nf = to!int(a); // f = -3\n-------------------------\n\nConversions from integral types to floating-point types always\nsucceed, but might lose accuracy. The largest integers with a\npredecessor representable in floating-point format are 2^24-1 for\nfloat, 2^53-1 for double, and 2^64-1 for $(D_PARAM real) (when\n$(D_PARAM real) is 80-bit, e.g. on Intel machines).\n\nExample:\n-------------------------\nint a = 16_777_215; // 2^24 - 1, largest proper integer representable as float\nassert(to!int(to!float(a)) == a);\nassert(to!int(to!float(-a)) == -a);\na += 2;\nassert(to!int(to!float(a)) == a); // fails!\n-------------------------\n\nConversions from string to numeric types differ from the C equivalents\n$(D_PARAM atoi()) and $(D_PARAM atol()) by checking for overflow and\nnot allowing whitespace.\n\nFor conversion of strings to signed types, the grammar recognized is:\n<pre>\n$(I Integer): $(I Sign UnsignedInteger)\n$(I UnsignedInteger)\n$(I Sign):\n    $(B +)\n    $(B -)\n</pre>\n\nFor conversion to unsigned types, the grammar recognized is:\n<pre>\n$(I UnsignedInteger):\n    $(I DecimalDigit)\n    $(I DecimalDigit) $(I UnsignedInteger)\n</pre>\n\nConverting an array to another array type works by converting each\nelement in turn. Associative arrays can be converted to associative\narrays as long as keys and values can in turn be converted.\n\nExample:\n-------------------------\nint[] a = [1, 2, 3];\nauto b = to!(float[])(a);\nassert(b == [1.0f, 2, 3]);\nstring str = \"1 2 3 4 5 6\";\nauto numbers = to!(double[])(split(str));\nassert(numbers == [1.0, 2, 3, 4, 5, 6]);\nint[string] c;\nc[\"a\"] = 1;\nc[\"b\"] = 2;\nauto d = to!(double[wstring])(c);\nassert(d[\"a\"w] == 1 && d[\"b\"w] == 2);\n-------------------------\n\nConversions operate transitively, meaning that they work on arrays and\nassociative arrays of any complexity:\n\n-------------------------\nint[string][double[int[]]] a;\n...\nauto b = to!(short[wstring][string[double[]]])(a);\n-------------------------\n\nThis conversion works because $(D_PARAM to!short) applies to an\n$(D_PARAM int), $(D_PARAM to!wstring) applies to a $(D_PARAM\nstring), $(D_PARAM to!string) applies to a $(D_PARAM double), and\n$(D_PARAM to!(double[])) applies to an $(D_PARAM int[]). The\nconversion might throw an exception because $(D_PARAM to!short)\nmight fail the range check.\n\n\n   Entry point that dispatches to the appropriate conversion\n   primitive. Client code normally calls $(D _to!TargetType(value))\n   (and not some variant of $(D toImpl)).\n",
				"name": "to"
			},
			{
				"kind": "template",
				"line": 361,
				"constraint": "isImplicitlyConvertible!(S, T) && !isEnumStrToStr!(S, T) && !isNullToStr!(S, T)",
				"members": [
					{
						"kind": "function",
						"line": 361,
						"endchar": 1,
						"char": 3,
						"type": "T(S value)",
						"parameters": [
							{
								"type": "S",
								"name": "value"
							}
						],
						"name": "toImpl",
						"endline": 386
					}
				],
				"char": 3,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "type",
						"name": "S"
					}
				],
				"comment": "If the source type is implicitly convertible to the target type, $(D\nto) simply performs the implicit conversion.\n",
				"name": "toImpl"
			},
			{
				"kind": "template",
				"line": 491,
				"constraint": "!isImplicitlyConvertible!(S, T) && is(typeof(S.init.opCast!T()) : T) && !isExactSomeString!T && !is(typeof(T(value)))",
				"members": [
					{
						"kind": "function",
						"line": 491,
						"endchar": 1,
						"char": 3,
						"type": "T(S value)",
						"parameters": [
							{
								"type": "S",
								"name": "value"
							}
						],
						"name": "toImpl",
						"endline": 498
					}
				],
				"char": 3,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "type",
						"name": "S"
					}
				],
				"comment": "When source type supports member template function opCast, it is used.\n",
				"name": "toImpl"
			},
			{
				"kind": "template",
				"line": 542,
				"constraint": "!isImplicitlyConvertible!(S, T) && is(T == struct) && is(typeof(T(value)))",
				"members": [
					{
						"kind": "function",
						"line": 542,
						"endchar": 1,
						"char": 3,
						"type": "T(S value)",
						"parameters": [
							{
								"type": "S",
								"name": "value"
							}
						],
						"name": "toImpl",
						"endline": 547
					}
				],
				"char": 3,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "type",
						"name": "S"
					}
				],
				"comment": "When target type supports 'converting construction', it is used.\n$(UL $(LI If target type is struct, $(D T(value)) is used.)\n     $(LI If target type is class, $(D new T(value)) is used.))\n",
				"name": "toImpl"
			},
			{
				"kind": "template",
				"line": 591,
				"constraint": "!isImplicitlyConvertible!(S, T) && is(T == class) && is(typeof(new T(value)))",
				"members": [
					{
						"kind": "function",
						"line": 591,
						"endchar": 1,
						"char": 3,
						"type": "T(S value)",
						"parameters": [
							{
								"type": "S",
								"name": "value"
							}
						],
						"name": "toImpl",
						"endline": 596
					}
				],
				"char": 3,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "type",
						"name": "S"
					}
				],
				"comment": "ditto\n",
				"name": "toImpl"
			},
			{
				"kind": "template",
				"line": 664,
				"constraint": "!isImplicitlyConvertible!(S, T) && (is(S == class) || is(S == interface)) && !is(typeof(value.opCast!T()) : T) && (is(T == class) || is(T == interface)) && !is(typeof(new T(value)))",
				"members": [
					{
						"kind": "function",
						"line": 664,
						"endchar": 1,
						"char": 3,
						"type": "T(S value)",
						"parameters": [
							{
								"type": "S",
								"name": "value"
							}
						],
						"name": "toImpl",
						"endline": 713
					}
				],
				"char": 3,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "type",
						"name": "S"
					}
				],
				"comment": "Object-to-object conversions by dynamic casting throw exception when the source is\nnon-null and the target is null.\n",
				"name": "toImpl"
			},
			{
				"kind": "template",
				"line": 827,
				"constraint": "!(isImplicitlyConvertible!(S, T) && !isEnumStrToStr!(S, T) && !isNullToStr!(S, T)) && !isInfinite!S && isExactSomeString!T",
				"members": [
					{
						"kind": "function",
						"line": 827,
						"endchar": 1,
						"char": 3,
						"type": "T(S value)",
						"parameters": [
							{
								"type": "S",
								"name": "value"
							}
						],
						"name": "toImpl",
						"endline": 922
					}
				],
				"char": 3,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "type",
						"name": "S"
					}
				],
				"comment": "Stringize conversion from all types is supported.\n$(UL\n  $(LI String _to string conversion works for any two string types having\n       ($(D char), $(D wchar), $(D dchar)) character widths and any\n       combination of qualifiers (mutable, $(D const), or $(D immutable)).)\n  $(LI Converts array (other than strings) to string.\n       Each element is converted by calling $(D to!T).)\n  $(LI Associative array to string conversion.\n       Each element is printed by calling $(D to!T).)\n  $(LI Object to string conversion calls $(D toString) against the object or\n       returns $(D \"null\") if the object is null.)\n  $(LI Struct to string conversion calls $(D toString) against the struct if\n       it is defined.)\n  $(LI For structs that do not define $(D toString), the conversion to string\n       produces the list of fields.)\n  $(LI Enumerated types are converted to strings as their symbolic names.)\n  $(LI Boolean values are printed as $(D \"true\") or $(D \"false\").)\n  $(LI $(D char), $(D wchar), $(D dchar) to a string type.)\n  $(LI Unsigned or signed integers to strings.\n       $(DL $(DT [special case])\n            $(DD Convert integral value to string in $(D_PARAM radix) radix.\n            radix must be a value from 2 to 36.\n            value is treated as a signed value only if radix is 10.\n            The characters A through Z are used to represent values 10 through 36\n            and their case is determined by the $(D_PARAM letterCase) parameter.)))\n  $(LI All floating point types to all string types.)\n  $(LI Pointer to string conversions prints the pointer as a $(D size_t) value.\n       If pointer is $(D char*), treat it as C-style strings.\n       In that case, this function is $(D @system).))\n",
				"name": "toImpl"
			},
			{
				"kind": "template",
				"line": 1219,
				"constraint": "isIntegral!S && isExactSomeString!T",
				"members": [
					{
						"kind": "function",
						"line": 1219,
						"endchar": 1,
						"char": 17,
						"type": "pure @trusted T(S value, uint radix, LetterCase letterCase = LetterCase.upper)",
						"parameters": [
							{
								"type": "S",
								"name": "value"
							},
							{
								"deco": "k",
								"name": "radix"
							},
							{
								"default": "LetterCase.upper",
								"type": "LetterCase",
								"name": "letterCase"
							}
						],
						"name": "toImpl",
						"endline": 1288
					}
				],
				"char": 17,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "type",
						"name": "S"
					}
				],
				"comment": "ditto\n",
				"name": "toImpl"
			},
			{
				"kind": "template",
				"line": 1317,
				"constraint": "!isImplicitlyConvertible!(S, T) && (isNumeric!S || isSomeChar!S || isBoolean!S) && (isNumeric!T || isSomeChar!T || isBoolean!T) && !is(T == enum)",
				"members": [
					{
						"kind": "function",
						"line": 1317,
						"endchar": 1,
						"char": 3,
						"type": "T(S value)",
						"parameters": [
							{
								"type": "S",
								"name": "value"
							}
						],
						"name": "toImpl",
						"endline": 1346
					}
				],
				"char": 3,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "type",
						"name": "S"
					}
				],
				"comment": "Narrowing numeric-numeric conversions throw when the value does not\nfit in the narrower type.\n",
				"name": "toImpl"
			},
			{
				"kind": "template",
				"line": 1410,
				"constraint": "!isImplicitlyConvertible!(S, T) && !isSomeString!S && isDynamicArray!S && !isExactSomeString!T && isArray!T",
				"members": [
					{
						"kind": "function",
						"line": 1410,
						"endchar": 1,
						"char": 3,
						"type": "T(S value)",
						"parameters": [
							{
								"type": "S",
								"name": "value"
							}
						],
						"name": "toImpl",
						"endline": 1436
					}
				],
				"char": 3,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "type",
						"name": "S"
					}
				],
				"comment": "Array-to-array conversion (except when target is a string type)\nconverts each element in turn by using $(D to).\n",
				"name": "toImpl"
			},
			{
				"kind": "template",
				"line": 1494,
				"constraint": "isAssociativeArray!S && isAssociativeArray!T && !is(T == enum)",
				"members": [
					{
						"kind": "function",
						"line": 1494,
						"endchar": 1,
						"char": 3,
						"type": "T(S value)",
						"parameters": [
							{
								"type": "S",
								"name": "value"
							}
						],
						"name": "toImpl",
						"endline": 1513
					}
				],
				"char": 3,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "type",
						"name": "S"
					}
				],
				"comment": "Associative array to associative array conversion converts each key\nand each value in turn.\n",
				"name": "toImpl"
			},
			{
				"kind": "template",
				"line": 1727,
				"constraint": "isExactSomeString!S && isDynamicArray!S && !isExactSomeString!T && is(typeof(parse!T(value)))",
				"members": [
					{
						"kind": "function",
						"line": 1727,
						"endchar": 1,
						"char": 3,
						"type": "T(S value)",
						"parameters": [
							{
								"type": "S",
								"name": "value"
							}
						],
						"name": "toImpl",
						"endline": 1739
					}
				],
				"char": 3,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "type",
						"name": "S"
					}
				],
				"comment": "String to non-string conversion runs parsing.\n$(UL\n  $(LI When the source is a wide string, it is first converted to a narrow\n       string and then parsed.)\n  $(LI When the source is a narrow string, normal text parsing occurs.))\n",
				"name": "toImpl"
			},
			{
				"kind": "template",
				"line": 1742,
				"constraint": "isExactSomeString!S && isDynamicArray!S && !isExactSomeString!T && is(typeof(parse!T(value, radix)))",
				"members": [
					{
						"kind": "function",
						"line": 1742,
						"endchar": 1,
						"char": 3,
						"type": "T(S value, uint radix)",
						"parameters": [
							{
								"type": "S",
								"name": "value"
							},
							{
								"deco": "k",
								"name": "radix"
							}
						],
						"name": "toImpl",
						"endline": 1754
					}
				],
				"char": 3,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "type",
						"name": "S"
					}
				],
				"comment": "ditto\n",
				"name": "toImpl"
			},
			{
				"kind": "template",
				"line": 1783,
				"constraint": "is(T == enum) && !is(S == enum) && is(typeof(value == OriginalType!T.init)) && !isFloatingPoint!(OriginalType!T) && !isSomeString!(OriginalType!T)",
				"members": [
					{
						"kind": "function",
						"line": 1783,
						"endchar": 1,
						"char": 3,
						"type": "T(S value)",
						"parameters": [
							{
								"type": "S",
								"name": "value"
							}
						],
						"name": "toImpl",
						"endline": 1794
					}
				],
				"char": 3,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "type",
						"name": "S"
					}
				],
				"comment": "Convert a value that is implicitly convertible to the enum base type\ninto an Enum value. If the value does not match any enum member values\na ConvException is thrown.\nEnums with floating-point or string base types are not supported.\n",
				"name": "toImpl"
			},
			{
				"kind": "template",
				"line": 1816,
				"members": [
					{
						"kind": "template",
						"line": 1818,
						"members": [
							{
								"kind": "function",
								"line": 1818,
								"endchar": 5,
								"char": 12,
								"type": "Target(Source value)",
								"parameters": [
									{
										"type": "Source",
										"name": "value"
									}
								],
								"name": "roundTo",
								"endline": 1825
							}
						],
						"char": 12,
						"parameters": [
							{
								"kind": "type",
								"name": "Source"
							}
						],
						"name": "roundTo"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "Target"
					}
				],
				"comment": " Rounded conversion from floating point to integral.\n\nRounded conversions do not work with non-integral target types.\nExample:\n\n---\nassert(roundTo!int(3.14) == 3);\nassert(roundTo!int(3.49) == 3);\nassert(roundTo!int(3.5) == 4);\nassert(roundTo!int(3.999) == 4);\nassert(roundTo!int(-3.14) == -3);\nassert(roundTo!int(-3.49) == -3);\nassert(roundTo!int(-3.5) == -4);\nassert(roundTo!int(-3.999) == -4);\nassert(roundTo!(const int)(to!(const double)(-3.999)) == -4);\n\n---\n",
				"name": "roundTo"
			},
			{
				"kind": "template",
				"line": 1864,
				"constraint": "isInputRange!Source && isSomeChar!(ElementType!Source) && is(Unqual!Target == bool)",
				"members": [
					{
						"kind": "function",
						"line": 1864,
						"endchar": 1,
						"char": 8,
						"type": "Target(ref Source s)",
						"parameters": [
							{
								"storageClass": [
									"ref"
								],
								"type": "Source",
								"name": "s"
							}
						],
						"name": "parse",
						"endline": 1888
					}
				],
				"char": 8,
				"parameters": [
					{
						"kind": "type",
						"name": "Target"
					},
					{
						"kind": "type",
						"name": "Source"
					}
				],
				"comment": " The $(D_PARAM parse) family of functions works quite like the\n $(D_PARAM to) family, except that (1) it only works with character ranges\n as input, (2) takes the input by reference and advances it to\n the position following the conversion, and (3) does not throw if it\n could not convert the entire input. It still throws if an overflow\n occurred during conversion or if no character of the input\n was meaningfully converted.\nExample:\n\n---\nimport std.string : munch;\nstring test = \"123 \\t  76.14\";\nauto a = parse!uint(test);\nassert(a == 123);\nassert(test == \" \\t  76.14\"); // parse bumps string\nmunch(test, \" \\t\\n\\r\"); // skip ws\nassert(test == \"76.14\");\nauto b = parse!double(test);\nassert(b == 76.14);\nassert(test == \"\");\n\n---\n",
				"name": "parse"
			},
			{
				"kind": "template",
				"line": 2210,
				"constraint": "isSomeChar!(ElementType!Source) && isIntegral!Target && !is(Target == enum)",
				"members": [
					{
						"kind": "function",
						"line": 2210,
						"endchar": 1,
						"char": 8,
						"type": "Target(ref Source s, uint radix)",
						"parameters": [
							{
								"storageClass": [
									"ref"
								],
								"type": "Source",
								"name": "s"
							},
							{
								"deco": "k",
								"name": "radix"
							}
						],
						"name": "parse",
						"endline": 2265
					}
				],
				"char": 8,
				"parameters": [
					{
						"kind": "type",
						"name": "Target"
					},
					{
						"kind": "type",
						"name": "Source"
					}
				],
				"comment": "ditto\n",
				"name": "parse"
			},
			{
				"kind": "template",
				"line": 3031,
				"constraint": "isExactSomeString!Source && staticIndexOf!(Unqual!Target, dchar, Unqual!(ElementEncodingType!Source)) >= 0",
				"members": [
					{
						"kind": "function",
						"line": 3031,
						"endchar": 1,
						"char": 8,
						"type": "Target(ref Source s)",
						"parameters": [
							{
								"storageClass": [
									"ref"
								],
								"type": "Source",
								"name": "s"
							}
						],
						"name": "parse",
						"endline": 3050
					}
				],
				"char": 8,
				"parameters": [
					{
						"kind": "type",
						"name": "Target"
					},
					{
						"kind": "type",
						"name": "Source"
					}
				],
				"comment": "Parsing one character off a string returns the character and bumps the\nstring up one position.\n",
				"name": "parse"
			},
			{
				"kind": "template",
				"line": 3176,
				"constraint": "isExactSomeString!Source && isDynamicArray!Target && !is(Target == enum)",
				"members": [
					{
						"kind": "function",
						"line": 3176,
						"endchar": 1,
						"char": 8,
						"type": "Target(ref Source s, dchar lbracket = '[', dchar rbracket = ']', dchar comma = ',')",
						"parameters": [
							{
								"storageClass": [
									"ref"
								],
								"type": "Source",
								"name": "s"
							},
							{
								"deco": "w",
								"default": "'['",
								"name": "lbracket"
							},
							{
								"deco": "w",
								"default": "']'",
								"name": "rbracket"
							},
							{
								"deco": "w",
								"default": "','",
								"name": "comma"
							}
						],
						"name": "parse",
						"endline": 3203
					}
				],
				"char": 8,
				"parameters": [
					{
						"kind": "type",
						"name": "Target"
					},
					{
						"kind": "type",
						"name": "Source"
					}
				],
				"comment": " Parses an array from a string given the left bracket (default $(D\n '[')), right bracket (default $(D ']')), and element separator (by\n default $(D ',')).\n",
				"name": "parse"
			},
			{
				"kind": "template",
				"line": 3284,
				"constraint": "isExactSomeString!Source && isStaticArray!Target && !is(Target == enum)",
				"members": [
					{
						"kind": "function",
						"line": 3284,
						"endchar": 1,
						"char": 8,
						"type": "Target(ref Source s, dchar lbracket = '[', dchar rbracket = ']', dchar comma = ',')",
						"parameters": [
							{
								"storageClass": [
									"ref"
								],
								"type": "Source",
								"name": "s"
							},
							{
								"deco": "w",
								"default": "'['",
								"name": "lbracket"
							},
							{
								"deco": "w",
								"default": "']'",
								"name": "rbracket"
							},
							{
								"deco": "w",
								"default": "','",
								"name": "comma"
							}
						],
						"name": "parse",
						"endline": 3331
					}
				],
				"char": 8,
				"parameters": [
					{
						"kind": "type",
						"name": "Target"
					},
					{
						"kind": "type",
						"name": "Source"
					}
				],
				"comment": "ditto\n",
				"name": "parse"
			},
			{
				"kind": "template",
				"line": 3357,
				"constraint": "isExactSomeString!Source && isAssociativeArray!Target && !is(Target == enum)",
				"members": [
					{
						"kind": "function",
						"line": 3357,
						"endchar": 1,
						"char": 8,
						"type": "Target(ref Source s, dchar lbracket = '[', dchar rbracket = ']', dchar keyval = ':', dchar comma = ',')",
						"parameters": [
							{
								"storageClass": [
									"ref"
								],
								"type": "Source",
								"name": "s"
							},
							{
								"deco": "w",
								"default": "'['",
								"name": "lbracket"
							},
							{
								"deco": "w",
								"default": "']'",
								"name": "rbracket"
							},
							{
								"deco": "w",
								"default": "':'",
								"name": "keyval"
							},
							{
								"deco": "w",
								"default": "','",
								"name": "comma"
							}
						],
						"name": "parse",
						"endline": 3392
					}
				],
				"char": 8,
				"parameters": [
					{
						"kind": "type",
						"name": "Target"
					},
					{
						"kind": "type",
						"name": "Source"
					}
				],
				"comment": " Parses an associative array from a string given the left bracket (default $(D\n '[')), right bracket (default $(D ']')), key-value separator (default $(D\n ':')), and element seprator (by default $(D ',')).\n",
				"name": "parse"
			},
			{
				"kind": "template",
				"line": 3615,
				"members": [
					{
						"kind": "function",
						"line": 3615,
						"endchar": 59,
						"char": 8,
						"type": "string(T args)",
						"parameters": [
							{
								"type": "T",
								"name": "args"
							}
						],
						"name": "text",
						"endline": 3615
					}
				],
				"char": 8,
				"parameters": [
					{
						"kind": "tuple",
						"name": "T"
					}
				],
				"comment": " Convenience functions for converting any number and types of\n arguments into _text (the three character widths).\nExample:\n\n---\nassert( text(42, ' ', 1.5, \": xyz\") == \"42 1.5: xyz\"c);\nassert(wtext(42, ' ', 1.5, \": xyz\") == \"42 1.5: xyz\"w);\nassert(dtext(42, ' ', 1.5, \": xyz\") == \"42 1.5: xyz\"d);\n\n---\n",
				"name": "text"
			},
			{
				"kind": "template",
				"line": 3617,
				"members": [
					{
						"kind": "function",
						"line": 3617,
						"endchar": 62,
						"char": 9,
						"type": "wstring(T args)",
						"parameters": [
							{
								"type": "T",
								"name": "args"
							}
						],
						"name": "wtext",
						"endline": 3617
					}
				],
				"char": 9,
				"parameters": [
					{
						"kind": "tuple",
						"name": "T"
					}
				],
				"comment": "ditto\n",
				"name": "wtext"
			},
			{
				"kind": "template",
				"line": 3619,
				"members": [
					{
						"kind": "function",
						"line": 3619,
						"endchar": 62,
						"char": 9,
						"type": "dstring(T args)",
						"parameters": [
							{
								"type": "T",
								"name": "args"
							}
						],
						"name": "dtext",
						"endline": 3619
					}
				],
				"char": 9,
				"parameters": [
					{
						"kind": "tuple",
						"name": "T"
					}
				],
				"comment": "ditto\n",
				"name": "dtext"
			},
			{
				"kind": "template",
				"line": 3665,
				"constraint": "octalFitsInInt!num && !literalIsLong!num && !literalIsUnsigned!num",
				"members": [
					{
						"kind": "function",
						"line": 3665,
						"endchar": 1,
						"char": 15,
						"type": "@property int()",
						"name": "octal",
						"endline": 3669
					}
				],
				"char": 15,
				"parameters": [
					{
						"kind": "value",
						"deco": "Aya",
						"name": "num"
					}
				],
				"comment": "The $(D octal) facility is intended as an experimental facility to\nreplace _octal literals starting with $(D '0'), which many find\nconfusing. Using $(D octal!177) or $(D octal!\"177\") instead of $(D\n0177) as an _octal literal makes code clearer and the intent more\nvisible. If use of this facility becomes predominant, a future\nversion of the language may deem old-style _octal literals deprecated.\n\nThe rules for strings are the usual for literals: If it can fit in an\n$(D int), it is an $(D int). Otherwise, it is a $(D long). But, if the\nuser specifically asks for a $(D long) with the $(D L) suffix, always\ngive the $(D long). Give an unsigned iff it is asked for with the $(D\nU) or $(D u) suffix. _Octals created from integers preserve the type\nof the passed-in integral.\nExample:\n\n---\n// same as 0177\nauto x = octal!177;\n// octal is a compile-time device\nenum y = octal!160;\n// Create an unsigned octal\nauto z = octal!\"1_000_000u\";\n\n---\nExample:\n\n---\nint a = octal!(int, \"10\");\n\nassert(a == 8);\n\n---\n",
				"name": "octal"
			},
			{
				"kind": "template",
				"line": 3672,
				"constraint": "(!octalFitsInInt!num || literalIsLong!num) && !literalIsUnsigned!num",
				"members": [
					{
						"kind": "function",
						"line": 3672,
						"endchar": 1,
						"char": 16,
						"type": "@property long()",
						"name": "octal",
						"endline": 3676
					}
				],
				"char": 16,
				"parameters": [
					{
						"kind": "value",
						"deco": "Aya",
						"name": "num"
					}
				],
				"comment": "Ditto\n",
				"name": "octal"
			},
			{
				"kind": "template",
				"line": 3679,
				"constraint": "octalFitsInInt!num && !literalIsLong!num && literalIsUnsigned!num",
				"members": [
					{
						"kind": "function",
						"line": 3679,
						"endchar": 1,
						"char": 16,
						"type": "@property uint()",
						"name": "octal",
						"endline": 3683
					}
				],
				"char": 16,
				"parameters": [
					{
						"kind": "value",
						"deco": "Aya",
						"name": "num"
					}
				],
				"comment": "Ditto\n",
				"name": "octal"
			},
			{
				"kind": "template",
				"line": 3686,
				"constraint": "(!octalFitsInInt!num || literalIsLong!num) && literalIsUnsigned!num",
				"members": [
					{
						"kind": "function",
						"line": 3686,
						"endchar": 1,
						"char": 17,
						"type": "@property ulong()",
						"name": "octal",
						"endline": 3690
					}
				],
				"char": 17,
				"parameters": [
					{
						"kind": "value",
						"deco": "Aya",
						"name": "num"
					}
				],
				"comment": "Ditto\n",
				"name": "octal"
			},
			{
				"kind": "template",
				"line": 3693,
				"constraint": "isIntegral!(typeof(s))",
				"members": [
					{
						"kind": "variable",
						"line": 3696,
						"init": "octal!(typeof(s), to!string(s))",
						"storageClass": [
							"auto",
							"enum"
						],
						"char": 15,
						"name": "octal"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "alias",
						"name": "s"
					}
				],
				"comment": "Ditto\n",
				"name": "octal"
			},
			{
				"kind": "template",
				"line": 4113,
				"members": [
					{
						"kind": "function",
						"line": 4113,
						"endchar": 1,
						"char": 4,
						"type": "pure nothrow @safe T*(T* chunk)",
						"parameters": [
							{
								"type": "T*",
								"name": "chunk"
							}
						],
						"name": "emplace",
						"endline": 4117
					}
				],
				"char": 4,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": "Given a pointer $(D chunk) to uninitialized memory (but already typed\nas $(D T)), constructs an object of non-$(D class) type $(D T) at that\naddress.\n\nReturns: A pointer to the newly constructed object (which is the same\nas $(D chunk)).\n",
				"name": "emplace"
			},
			{
				"kind": "template",
				"line": 4130,
				"constraint": "!is(T == struct) && Args.length == 1",
				"members": [
					{
						"kind": "function",
						"line": 4130,
						"endchar": 1,
						"char": 4,
						"type": "T*(T* chunk, auto ref Args args)",
						"parameters": [
							{
								"type": "T*",
								"name": "chunk"
							},
							{
								"storageClass": [
									"auto",
									"ref"
								],
								"type": "Args",
								"name": "args"
							}
						],
						"name": "emplace",
						"endline": 4135
					}
				],
				"char": 4,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "tuple",
						"name": "Args"
					}
				],
				"comment": "Given a pointer $(D chunk) to uninitialized memory (but already typed\nas a non-class type $(D T)), constructs an object of type $(D T) at\nthat address from arguments $(D args).\n\nThis function can be $(D @trusted) if the corresponding constructor of\n$(D T) is $(D @safe).\n\nReturns: A pointer to the newly constructed object (which is the same\nas $(D chunk)).\n",
				"name": "emplace"
			},
			{
				"kind": "template",
				"line": 4137,
				"constraint": "is(T == struct)",
				"members": [
					{
						"kind": "function",
						"line": 4137,
						"endchar": 1,
						"char": 4,
						"type": "T*(T* chunk, auto ref Args args)",
						"parameters": [
							{
								"type": "T*",
								"name": "chunk"
							},
							{
								"storageClass": [
									"auto",
									"ref"
								],
								"type": "Args",
								"name": "args"
							}
						],
						"name": "emplace",
						"endline": 4142
					}
				],
				"char": 4,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "tuple",
						"name": "Args"
					}
				],
				"comment": "ditto\n",
				"name": "emplace"
			},
			{
				"kind": "template",
				"line": 4985,
				"constraint": "is(T == class)",
				"members": [
					{
						"kind": "function",
						"line": 4985,
						"endchar": 1,
						"char": 3,
						"type": "T(void[] chunk, auto ref Args args)",
						"parameters": [
							{
								"type": "void[]",
								"name": "chunk"
							},
							{
								"storageClass": [
									"auto",
									"ref"
								],
								"type": "Args",
								"name": "args"
							}
						],
						"name": "emplace",
						"endline": 5009
					}
				],
				"char": 3,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "tuple",
						"name": "Args"
					}
				],
				"comment": "Given a raw memory area $(D chunk), constructs an object of $(D class)\ntype $(D T) at that address. The constructor is passed the arguments\n$(D Args). The $(D chunk) must be as least as large as $(D T) needs\nand should have an alignment multiple of $(D T)'s alignment. (The size\nof a $(D class) instance is obtained by using $(D\n__traits(classInstanceSize, T))).\n\nThis function can be $(D @trusted) if the corresponding constructor of\n$(D T) is $(D @safe).\n\nReturns: A pointer to the newly constructed object.\n",
				"name": "emplace"
			},
			{
				"kind": "template",
				"line": 5032,
				"constraint": "!is(T == class)",
				"members": [
					{
						"kind": "function",
						"line": 5032,
						"endchar": 1,
						"char": 4,
						"type": "T*(void[] chunk, auto ref Args args)",
						"parameters": [
							{
								"type": "void[]",
								"name": "chunk"
							},
							{
								"storageClass": [
									"auto",
									"ref"
								],
								"type": "Args",
								"name": "args"
							}
						],
						"name": "emplace",
						"endline": 5037
					}
				],
				"char": 4,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "tuple",
						"name": "Args"
					}
				],
				"comment": "Given a raw memory area $(D chunk), constructs an object of non-$(D\nclass) type $(D T) at that address. The constructor is passed the\narguments $(D args), if any. The $(D chunk) must be as least as large\nas $(D T) needs and should have an alignment multiple of $(D T)'s\nalignment.\n\nThis function can be $(D @trusted) if the corresponding constructor of\n$(D T) is $(D @safe).\n\nReturns: A pointer to the newly constructed object.\nExample:\n\n---\nstruct S\n{\n    int a, b;\n}\nauto p = new void[S.sizeof];\nS s;\ns.a = 42;\ns.b = 43;\nauto s1 = emplace!S(p, s);\nassert(s1.a == 42 && s1.b == 43);\n\n---\n",
				"name": "emplace"
			},
			{
				"kind": "template",
				"line": 5138,
				"constraint": "isIntegral!T",
				"members": [
					{
						"kind": "function",
						"line": 5138,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "(T x)",
						"parameters": [
							{
								"type": "T",
								"name": "x"
							}
						],
						"name": "unsigned",
						"endline": 5141
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": "    Returns the corresponding _unsigned value for $(D x) (e.g. if $(D x) has type\n    $(D int), it returns $(D cast(uint) x)). The advantage compared to the cast\n    is that you do not need to rewrite the cast if $(D x) later changes type\n    (e.g from $(D int) to $(D long)).\n\n    Note that the result is always mutable even if the original type was const\n    or immutable. In order to retain the constness, use $(XREF traits, Unsigned).\nExample:\n\n---\nimmutable int s = 42;\nauto u1 = unsigned(s); //not qualified\nstatic assert(is(typeof(u1) == uint));\nUnsigned!(typeof(s)) u2 = unsigned(s); //same qualification\nstatic assert(is(typeof(u2) == immutable uint));\nimmutable u3 = unsigned(s); //explicitly qualified\n\n---\n",
				"name": "unsigned"
			},
			{
				"kind": "template",
				"line": 5212,
				"constraint": "isIntegral!T",
				"members": [
					{
						"kind": "function",
						"line": 5212,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "(T x)",
						"parameters": [
							{
								"type": "T",
								"name": "x"
							}
						],
						"name": "signed",
						"endline": 5215
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": "    Returns the corresponding _signed value for $(D x) (e.g. if $(D x) has type\n    $(D uint), it returns $(D cast(int) x)). The advantage compared to the cast\n    is that you do not need to rewrite the cast if $(D x) later changes type\n    (e.g from $(D uint) to $(D ulong)).\n\n    Note that the result is always mutable even if the original type was const\n    or immutable. In order to retain the constness, use $(XREF traits, Signed).\nExample:\n\n---\nimmutable uint u = 42;\nauto s1 = signed(u); //not qualified\nstatic assert(is(typeof(s1) == int));\nSigned!(typeof(u)) s2 = signed(u); //same qualification\nstatic assert(is(typeof(s2) == immutable int));\nimmutable s3 = signed(u); //explicitly qualified\n\n---\n",
				"name": "signed"
			},
			{
				"kind": "template",
				"line": 5285,
				"members": [],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "From"
					}
				],
				"comment": "    A wrapper on top of the built-in cast operator that allows one to restrict\n    casting of the original type of the value.\n\n    A common issue with using a raw cast is that it may silently continue to\n    compile even if the value's type has changed during refactoring,\n    which breaks the initial assumption about the cast.\n\n    Params:\n        From  = The type to cast from. The programmer must ensure it is legal\n                to make this cast.\n        To    = The type to cast to\n        value = The value to cast. It must be of type $(D From),\n                otherwise a compile-time error is emitted.\n\n    Returns:\n        the value after the cast, returned by reference if possible\nExample:\n\n---\n// Regular cast, which has been verified to be legal by the programmer:\n{\n    long x;\n    auto y = cast(int) x;\n}\n\n// However this will still compile if 'x' is changed to be a pointer:\n{\n    long* x;\n    auto y = cast(int) x;\n}\n\n// castFrom provides a more reliable alternative to casting:\n{\n    long x;\n    auto y = castFrom!long.to!int(x);\n}\n\n// Changing the type of 'x' will now issue a compiler error,\n// allowing bad casts to be caught before it's too late:\n{\n    long* x;\n    static assert (\n        !__traits(compiles, castFrom!long.to!int(x))\n    );\n\n    // if cast is still needed, must be changed to:\n    auto y = castFrom!(long*).to!int(x);\n}\n\n---\n",
				"name": "castFrom"
			}
		],
		"name": "std.conv",
		"comment": "A one-stop shop for converting values from one type to another.\n\nCopyright: Copyright Digital Mars 2007-.\n\nLicense:   $(WEB boost.org/LICENSE_1_0.txt, Boost License 1.0).\n\nAuthors:   $(WEB digitalmars.com, Walter Bright),\n           $(WEB erdani.org, Andrei Alexandrescu),\n           Shin Fujishiro,\n           Adam D. Ruppe,\n           Kenji Hara\n\nSource:    $(PHOBOSSRC std/_conv.d)\n\nMacros:\nWIKI = Phobos/StdConv\n\n"
	},
	{
		"kind": "module",
		"file": "../phobos/std/range/package.d",
		"members": [
			{
				"kind": "template",
				"line": 186,
				"constraint": "isBidirectionalRange!(Unqual!Range)",
				"members": [
					{
						"kind": "function",
						"line": 186,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "(Range r)",
						"parameters": [
							{
								"type": "Range",
								"name": "r"
							}
						],
						"name": "retro",
						"endline": 295
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "Range"
					}
				],
				"comment": "Iterates a bidirectional range backwards. The original range can be\naccessed by using the $(D source) property. Applying retro twice to\nthe same range yields the original range.\nExample:\n\n---\nimport std.algorithm : equal;\nint[] a = [ 1, 2, 3, 4, 5 ];\nassert(equal(retro(a), [ 5, 4, 3, 2, 1 ][]));\nassert(retro(a).source is a);\nassert(retro(retro(a)) is a);\n\n---\n",
				"name": "retro"
			},
			{
				"kind": "template",
				"line": 413,
				"constraint": "isInputRange!(Unqual!Range)",
				"members": [
					{
						"kind": "function",
						"line": 413,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "(Range r, size_t n)",
						"parameters": [
							{
								"type": "Range",
								"name": "r"
							},
							{
								"type": "size_t",
								"name": "n"
							}
						],
						"name": "stride",
						"endline": 621
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "Range"
					}
				],
				"comment": "Iterates range $(D r) with stride $(D n). If the range is a\nrandom-access range, moves by indexing into the range; otherwise,\nmoves by successive calls to $(D popFront). Applying stride twice to\nthe same range results in a stride with a step that is the\nproduct of the two applications. It is an error for $(D n) to be 0.\nExample:\n\n---\nimport std.algorithm : equal;\n\nint[] a = [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 ];\nassert(equal(stride(a, 3), [ 1, 4, 7, 10 ][]));\nassert(stride(stride(a, 2), 3) == stride(a, 6));\n\n---\n",
				"name": "stride"
			},
			{
				"kind": "template",
				"line": 796,
				"constraint": "Ranges.length > 0 && allSatisfy!(isInputRange, staticMap!(Unqual, Ranges)) && !is(CommonType!(staticMap!(ElementType, staticMap!(Unqual, Ranges))) == void)",
				"members": [
					{
						"kind": "function",
						"line": 796,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "(Ranges rs)",
						"parameters": [
							{
								"type": "Ranges",
								"name": "rs"
							}
						],
						"name": "chain",
						"endline": 1112
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "tuple",
						"name": "Ranges"
					}
				],
				"comment": "Spans multiple ranges in sequence. The function $(D chain) takes any\nnumber of ranges and returns a $(D Chain!(R1, R2,...)) object. The\nranges may be different, but they must have the same element type. The\nresult is a range that offers the $(D front), $(D popFront), and $(D\nempty) primitives. If all input ranges offer random access and $(D\nlength), $(D Chain) offers them as well.\n\nIf only one range is offered to $(D Chain) or $(D chain), the $(D\nChain) type exits the picture by aliasing itself directly to that\nrange's type.\nExample:\n\n---\nimport std.algorithm : equal;\n\nint[] arr1 = [ 1, 2, 3, 4 ];\nint[] arr2 = [ 5, 6 ];\nint[] arr3 = [ 7 ];\nauto s = chain(arr1, arr2, arr3);\nassert(s.length == 7);\nassert(s[5] == 6);\nassert(equal(s, [1, 2, 3, 4, 5, 6, 7][]));\n\n---\n",
				"name": "chain"
			},
			{
				"kind": "template",
				"line": 1239,
				"constraint": "Rs.length > 1 && allSatisfy!(isInputRange, staticMap!(Unqual, Rs))",
				"members": [
					{
						"kind": "function",
						"line": 1239,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "(Rs rs)",
						"parameters": [
							{
								"type": "Rs",
								"name": "rs"
							}
						],
						"name": "roundRobin",
						"endline": 1333
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "tuple",
						"name": "Rs"
					}
				],
				"comment": "$(D roundRobin(r1, r2, r3)) yields $(D r1.front), then $(D r2.front),\nthen $(D r3.front), after which it pops off one element from each and\ncontinues again from $(D r1). For example, if two ranges are involved,\nit alternately yields elements off the two ranges. $(D roundRobin)\nstops after it has consumed all ranges (skipping over the ones that\nfinish early).\nExample:\n\n---\nimport std.algorithm : equal;\n\nint[] a = [ 1, 2, 3 ];\nint[] b = [ 10, 20, 30, 40 ];\nauto r = roundRobin(a, b);\nassert(equal(r, [ 1, 10, 2, 20, 3, 30, 40 ]));\n\n---\n",
				"name": "roundRobin"
			},
			{
				"kind": "template",
				"line": 1352,
				"constraint": "isRandomAccessRange!(Unqual!Range) && hasLength!(Unqual!Range) && isIntegral!I",
				"members": [
					{
						"kind": "function",
						"line": 1352,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "(Range r, I startingIndex)",
						"parameters": [
							{
								"type": "Range",
								"name": "r"
							},
							{
								"type": "I",
								"name": "startingIndex"
							}
						],
						"name": "radial",
						"endline": 1357
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "Range"
					},
					{
						"kind": "type",
						"name": "I"
					}
				],
				"comment": "Iterates a random-access range starting from a given point and\nprogressively extending left and right from that point. If no initial\npoint is given, iteration starts from the middle of the\nrange. Iteration spans the entire range.\nExample:\n\n---\nimport std.algorithm : equal;\nint[] a = [ 1, 2, 3, 4, 5 ];\nassert(equal(radial(a), [ 3, 4, 2, 5, 1 ]));\na = [ 1, 2, 3, 4 ];\nassert(equal(radial(a), [ 2, 3, 1, 4 ]));\n\n---\n",
				"name": "radial"
			},
			{
				"kind": "template",
				"line": 1360,
				"constraint": "isRandomAccessRange!(Unqual!R) && hasLength!(Unqual!R)",
				"members": [
					{
						"kind": "function",
						"line": 1360,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "(R r)",
						"parameters": [
							{
								"type": "R",
								"name": "r"
							}
						],
						"name": "radial",
						"endline": 1364
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"comment": "Ditto\n",
				"name": "radial"
			},
			{
				"kind": "template",
				"line": 1430,
				"constraint": "isInputRange!(Unqual!Range) && !(!isInfinite!(Unqual!Range) && hasSlicing!(Unqual!Range) || is(Range T == Take!T))",
				"members": [
					{
						"kind": "struct",
						"line": 1430,
						"members": [],
						"char": 1,
						"name": "Take"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "Range"
					}
				],
				"comment": "Lazily takes only up to $(D n) elements of a range. This is\nparticularly useful when using with infinite ranges. If the range\noffers random access and $(D length), $(D Take) offers them as well.\nExample:\n\n---\nimport std.algorithm : equal;\n\nint[] arr1 = [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ];\nauto s = take(arr1, 5);\nassert(s.length == 5);\nassert(s[4] == 5);\nassert(equal(s, [ 1, 2, 3, 4, 5 ][]));\n\n---\n",
				"name": "Take"
			},
			{
				"kind": "template",
				"line": 1609,
				"constraint": "isInputRange!(Unqual!R) && !isInfinite!(Unqual!R) && hasSlicing!(Unqual!R) && !is(R T == Take!T)",
				"members": [
					{
						"kind": "function",
						"line": 1609,
						"endchar": 1,
						"char": 8,
						"type": "Take!R(R input, size_t n)",
						"parameters": [
							{
								"type": "R",
								"name": "input"
							},
							{
								"type": "size_t",
								"name": "n"
							}
						],
						"name": "take",
						"endline": 1617
					}
				],
				"char": 8,
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"comment": "ditto\n",
				"name": "take"
			},
			{
				"kind": "template",
				"line": 1759,
				"constraint": "isInputRange!R",
				"members": [
					{
						"kind": "function",
						"line": 1759,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "(R range, size_t n)",
						"parameters": [
							{
								"type": "R",
								"name": "range"
							},
							{
								"type": "size_t",
								"name": "n"
							}
						],
						"name": "takeExactly",
						"endline": 1835
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"comment": "Similar to $(LREF take), but assumes that $(D range) has at least $(D\nn) elements. Consequently, the result of $(D takeExactly(range, n))\nalways defines the $(D length) property (and initializes it to $(D n))\neven when $(D range) itself does not define $(D length).\n\nThe result of $(D takeExactly) is identical to that of $(LREF take) in\ncases where the original range defines $(D length) or is infinite.\nExample:\n\n---\nimport std.algorithm : equal;\n\nauto a = [ 1, 2, 3, 4, 5 ];\n\nauto b = takeExactly(a, 3);\nassert(equal(b, [1, 2, 3]));\nstatic assert(is(typeof(b.length) == size_t));\nassert(b.length == 3);\nassert(b.front == 1);\nassert(b.back == 3);\n\n---\n",
				"name": "takeExactly"
			},
			{
				"kind": "template",
				"line": 1957,
				"constraint": "isInputRange!R",
				"members": [
					{
						"kind": "function",
						"line": 1957,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "(R source)",
						"parameters": [
							{
								"type": "R",
								"name": "source"
							}
						],
						"name": "takeOne",
						"endline": 1992
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"comment": "Returns a range with at most one element; for example, $(D\ntakeOne([42, 43, 44])) returns a range consisting of the integer $(D\n42). Calling $(D popFront()) off that range renders it empty.\n\nIn effect $(D takeOne(r)) is somewhat equivalent to $(D take(r, 1)) but in\ncertain interfaces it is important to know statically that the range may only\nhave at most one element.\n\nThe type returned by $(D takeOne) is a random-access range with length\nregardless of $(D R)'s capabilities (another feature that distinguishes\n$(D takeOne) from $(D take)).\nExample:\n\n---\nauto s = takeOne([42, 43, 44]);\nstatic assert(isRandomAccessRange!(typeof(s)));\nassert(s.length == 1);\nassert(!s.empty);\nassert(s.front == 42);\ns.front = 43;\nassert(s.front == 43);\nassert(s.back == 43);\nassert(s[0] == 43);\ns.popFront();\nassert(s.length == 0);\nassert(s.empty);\n\n---\n",
				"name": "takeOne"
			},
			{
				"kind": "template",
				"line": 2031,
				"constraint": "isInputRange!R",
				"members": [
					{
						"kind": "function",
						"line": 2031,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "()",
						"name": "takeNone",
						"endline": 2035
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"comment": "    Returns an empty range which is statically known to be empty and is\n    guaranteed to have $(D length) and be random access regardless of $(D R)'s\n    capabilities.\nExample:\n\n---\nauto range = takeNone!(int[])();\nassert(range.length == 0);\nassert(range.empty);\n\n---\n",
				"name": "takeNone"
			},
			{
				"kind": "template",
				"line": 2058,
				"constraint": "isInputRange!R",
				"members": [
					{
						"kind": "function",
						"line": 2058,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "(R range)",
						"parameters": [
							{
								"type": "R",
								"name": "range"
							}
						],
						"name": "takeNone",
						"endline": 2080
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"comment": "    Creates an empty range from the given range in $(BIGOH 1). If it can, it\n    will return the same range type. If not, it will return\n    $(D takeExactly(range, 0)).\nExample:\n\n---\nimport std.algorithm : filter;\nassert(takeNone([42, 27, 19]).empty);\nassert(takeNone(\"dlang.org\").empty);\nassert(takeNone(filter!\"true\"([42, 27, 19])).empty);\n\n---\n",
				"name": "takeNone"
			},
			{
				"kind": "template",
				"line": 2224,
				"constraint": "isInputRange!R",
				"members": [
					{
						"kind": "function",
						"line": 2224,
						"endchar": 1,
						"char": 3,
						"type": "R(R range, size_t n)",
						"parameters": [
							{
								"type": "R",
								"name": "range"
							},
							{
								"type": "size_t",
								"name": "n"
							}
						],
						"name": "drop",
						"endline": 2229
					}
				],
				"char": 3,
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"comment": "    Convenience function which calls\n    $(D range.$(LREF popFrontN)(n)) and returns $(D range). $(D drop)\n    makes it easier to pop elements from a range\n    and then pass it to another function within a single expression,\n    whereas $(D popFrontN) would require multiple statements.\n\n    $(D dropBack) provides the same functionality but instead calls\n    $(D range.popBackN(n)).\n\n    Note: $(D drop) and $(D dropBack) will only pop $(I up to)\n    $(D n) elements but will stop if the range is empty first.\n\nExample:\n\n---\nimport std.algorithm : equal;\n\nassert([0, 2, 1, 5, 0, 3].drop(3) == [5, 0, 3]);\nassert(\"hello world\".drop(6) == \"world\");\nassert(\"hello world\".drop(50).empty);\nassert(\"hello world\".take(6).drop(3).equal(\"lo \"));\n\n---\n",
				"name": "drop"
			},
			{
				"kind": "template",
				"line": 2231,
				"constraint": "isBidirectionalRange!R",
				"members": [
					{
						"kind": "function",
						"line": 2231,
						"endchar": 1,
						"char": 3,
						"type": "R(R range, size_t n)",
						"parameters": [
							{
								"type": "R",
								"name": "range"
							},
							{
								"type": "size_t",
								"name": "n"
							}
						],
						"name": "dropBack",
						"endline": 2236
					}
				],
				"char": 3,
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"comment": "ditto\n",
				"name": "dropBack"
			},
			{
				"kind": "template",
				"line": 2302,
				"constraint": "isInputRange!R",
				"members": [
					{
						"kind": "function",
						"line": 2302,
						"endchar": 1,
						"char": 3,
						"type": "R(R range, size_t n)",
						"parameters": [
							{
								"type": "R",
								"name": "range"
							},
							{
								"type": "size_t",
								"name": "n"
							}
						],
						"name": "dropExactly",
						"endline": 2307
					}
				],
				"char": 3,
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"comment": "    Similar to $(LREF drop) and $(D dropBack) but they call\n    $(D range.$(LREF popFrontExactly)(n)) and $(D range.popBackExactly(n))\n    instead.\n\n    Note: Unlike $(D drop), $(D dropExactly) will assume that the\n    range holds at least $(D n) elements. This makes $(D dropExactly)\n    faster than $(D drop), but it also means that if $(D range) does\n    not contain at least $(D n) elements, it will attempt to call $(D popFront)\n    on an empty range, which is undefined behavior. So, only use\n    $(D popFrontExactly) when it is guaranteed that $(D range) holds at least\n    $(D n) elements.\nExample:\n\n---\nimport std.algorithm : equal, filterBidirectional;\n\nauto a = [1, 2, 3];\nassert(a.dropExactly(2) == [3]);\nassert(a.dropBackExactly(2) == [1]);\n\nstring s = \"日本語\";\nassert(s.dropExactly(2) == \"語\");\nassert(s.dropBackExactly(2) == \"日\");\n\nauto bd = filterBidirectional!\"true\"([1, 2, 3]);\nassert(bd.dropExactly(2).equal([3]));\nassert(bd.dropBackExactly(2).equal([1]));\n\n---\n",
				"name": "dropExactly"
			},
			{
				"kind": "template",
				"line": 2309,
				"constraint": "isBidirectionalRange!R",
				"members": [
					{
						"kind": "function",
						"line": 2309,
						"endchar": 1,
						"char": 3,
						"type": "R(R range, size_t n)",
						"parameters": [
							{
								"type": "R",
								"name": "range"
							},
							{
								"type": "size_t",
								"name": "n"
							}
						],
						"name": "dropBackExactly",
						"endline": 2314
					}
				],
				"char": 3,
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"comment": "ditto\n",
				"name": "dropBackExactly"
			},
			{
				"kind": "template",
				"line": 2344,
				"constraint": "isInputRange!R",
				"members": [
					{
						"kind": "function",
						"line": 2344,
						"endchar": 1,
						"char": 3,
						"type": "R(R range)",
						"parameters": [
							{
								"type": "R",
								"name": "range"
							}
						],
						"name": "dropOne",
						"endline": 2349
					}
				],
				"char": 3,
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"comment": "    Convenience function which calls\n    $(D range.popFront()) and returns $(D range). $(D dropOne)\n    makes it easier to pop an element from a range\n    and then pass it to another function within a single expression,\n    whereas $(D popFront) would require multiple statements.\n\n    $(D dropBackOne) provides the same functionality but instead calls\n    $(D range.popBack()).\nExample:\n\n---\nimport std.algorithm : equal, filterBidirectional;\n\nimport std.container.dlist;\n\nauto dl = DList!int(9, 1, 2, 3, 9);\nassert(dl[].dropOne().dropBackOne().equal([1, 2, 3]));\n\nauto a = [1, 2, 3];\nassert(a.dropOne() == [2, 3]);\nassert(a.dropBackOne() == [1, 2]);\n\nstring s = \"日本語\";\nassert(s.dropOne() == \"本語\");\nassert(s.dropBackOne() == \"日本\");\n\nauto bd = filterBidirectional!\"true\"([1, 2, 3]);\nassert(bd.dropOne().equal([2, 3]));\nassert(bd.dropBackOne().equal([1, 2]));\n\n---\n",
				"name": "dropOne"
			},
			{
				"kind": "template",
				"line": 2351,
				"constraint": "isBidirectionalRange!R",
				"members": [
					{
						"kind": "function",
						"line": 2351,
						"endchar": 1,
						"char": 3,
						"type": "R(R range)",
						"parameters": [
							{
								"type": "R",
								"name": "range"
							}
						],
						"name": "dropBackOne",
						"endline": 2356
					}
				],
				"char": 3,
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"comment": "ditto\n",
				"name": "dropBackOne"
			},
			{
				"kind": "template",
				"line": 2386,
				"members": [
					{
						"kind": "struct",
						"line": 2386,
						"members": [],
						"char": 1,
						"name": "Repeat"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": "Repeats one value forever.\n\nModels an infinite bidirectional and random access range, with slicing.\nExample:\n\n---\nimport std.algorithm : equal;\n\nassert(equal(5.repeat().take(4), [ 5, 5, 5, 5 ]));\n\n---\n",
				"name": "Repeat"
			},
			{
				"kind": "template",
				"line": 2425,
				"members": [
					{
						"kind": "function",
						"line": 2425,
						"endchar": 55,
						"char": 10,
						"type": "Repeat!T(T value)",
						"parameters": [
							{
								"type": "T",
								"name": "value"
							}
						],
						"name": "repeat",
						"endline": 2425
					}
				],
				"char": 10,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": "Ditto\n",
				"name": "repeat"
			},
			{
				"kind": "template",
				"line": 2458,
				"members": [
					{
						"kind": "function",
						"line": 2458,
						"endchar": 1,
						"char": 17,
						"type": "Take!(Repeat!T)(T value, size_t n)",
						"parameters": [
							{
								"type": "T",
								"name": "value"
							},
							{
								"type": "size_t",
								"name": "n"
							}
						],
						"name": "repeat",
						"endline": 2461
					}
				],
				"char": 17,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": "   Repeats $(D value) exactly $(D n) times. Equivalent to $(D\n   take(repeat(value), n)).\nExample:\n\n---\nimport std.algorithm : equal;\n\nassert(equal(5.repeat(4), 5.repeat().take(4)));\n\n---\n",
				"name": "repeat"
			},
			{
				"kind": "template",
				"line": 2509,
				"constraint": "isCallable!fun",
				"members": [
					{
						"kind": "function",
						"line": 2509,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "(Fun fun)",
						"parameters": [
							{
								"type": "Fun",
								"name": "fun"
							}
						],
						"name": "generate",
						"endline": 2513
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "Fun"
					}
				],
				"comment": "Given callable ($(XREF traits, isCallable)) $(D fun), create as a range\nwhose front is defined by successive calls to $(D fun()).\nThis is especially useful to call function with global side effects (random\nfunctions), or to create ranges expressed as a single delegate, rather than\nan entire $(D front)/$(D popFront)/$(D empty) structure.\n$(D fun) maybe be passed either a template alias parameter (existing\nfunction, delegate, struct type defining static $(D opCall)... ) or\na run-time value argument (delegate, function object... ).\nThe result range models an InputRange ($(XREF range, isInputRange)).\nThe resulting range will call $(D fun()) on every call to $(D front),\nand only when $(D front) is called, regardless of how the range is\niterated.\nIt is advised to compose generate with either $(XREF algorithm,cache)\nor $(XREF array,array), or to use it in a foreach loop.\nA by-value foreach loop means that the loop value is not $(D ref).\n\nParams:\n    Fun = is the $(D isCallable) that gets called on every call to front.\n\nReturns: an $(D inputRange) that returns a new value generated by $(D Fun) on\n    any call to $(D front).\n",
				"name": "generate"
			},
			{
				"kind": "template",
				"line": 2516,
				"constraint": "isCallable!fun",
				"members": [
					{
						"kind": "function",
						"line": 2516,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "()",
						"name": "generate",
						"endline": 2520
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "alias",
						"name": "fun"
					}
				],
				"comment": "\nExample:\n\n---\nimport std.algorithm : equal, map;\n\nint i = 1;\nauto powersOfTwo = generate!(() => i *= 2)().take(10);\nassert(equal(powersOfTwo, iota(1, 11).map!\"2^^a\"()));\n\n---\nExample:\n\n---\nimport std.algorithm : equal;\n\n//Returns a run-time delegate\nauto infiniteIota(T)(T low, T high)\n{\n    T i = high;\n    return (){if (i == high) i = low; return i++;};\n}\n//adapted as a range.\nassert(equal(generate(infiniteIota(1, 4)).take(10), [1, 2, 3, 1, 2, 3, 1, 2, 3, 1]));\n\n---\n",
				"name": "generate"
			},
			{
				"kind": "template",
				"line": 2608,
				"constraint": "isForwardRange!R && !isInfinite!R",
				"members": [
					{
						"kind": "struct",
						"line": 2608,
						"members": [],
						"char": 1,
						"name": "Cycle"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"comment": "Repeats the given forward range ad infinitum. If the original range is\ninfinite (fact that would make $(D Cycle) the identity application),\n$(D Cycle) detects that and aliases itself to the range type\nitself. If the original range has random access, $(D Cycle) offers\nrandom access and also offers a constructor taking an initial position\n$(D index). $(D Cycle) works with static arrays in addition to ranges,\nmostly for performance reasons.\n\nNote: The input range must not be empty.\n\nTip: This is a great way to implement simple circular buffers.\nExample:\n\n---\nimport std.algorithm : equal;\n\nassert(equal(take(cycle([1, 2][]), 5), [ 1, 2, 1, 2, 1 ][]));\n\n---\n",
				"name": "Cycle"
			},
			{
				"kind": "template",
				"line": 2828,
				"constraint": "isForwardRange!R && !isInfinite!R",
				"members": [
					{
						"kind": "function",
						"line": 2828,
						"endchar": 1,
						"char": 9,
						"type": "Cycle!R(R input)",
						"parameters": [
							{
								"type": "R",
								"name": "input"
							}
						],
						"name": "cycle",
						"endline": 2833
					}
				],
				"char": 9,
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"comment": "Ditto\n",
				"name": "cycle"
			},
			{
				"kind": "template",
				"line": 2844,
				"constraint": "isRandomAccessRange!R && !isInfinite!R",
				"members": [
					{
						"kind": "function",
						"line": 2844,
						"endchar": 1,
						"char": 9,
						"type": "Cycle!R(R input, size_t index = 0)",
						"parameters": [
							{
								"type": "R",
								"name": "input"
							},
							{
								"default": "0",
								"type": "size_t",
								"name": "index"
							}
						],
						"name": "cycle",
						"endline": 2849
					}
				],
				"char": 9,
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"comment": "Ditto\n",
				"name": "cycle"
			},
			{
				"kind": "template",
				"line": 3046,
				"constraint": "Ranges.length && allSatisfy!(isInputRange, Ranges)",
				"members": [
					{
						"kind": "struct",
						"line": 3046,
						"members": [
							{
								"kind": "constructor",
								"line": 3061,
								"endchar": 5,
								"char": 5,
								"type": "(R rs, StoppingPolicy s = StoppingPolicy.shortest)",
								"parameters": [
									{
										"type": "R",
										"name": "rs"
									},
									{
										"default": "StoppingPolicy.shortest",
										"type": "StoppingPolicy",
										"name": "s"
									}
								],
								"name": "this",
								"comment": "   Builds an object. Usually this is invoked indirectly by using the\n   $(LREF zip) function.\n",
								"endline": 3065
							},
							{
								"kind": "function",
								"line": 3132,
								"endchar": 5,
								"char": 27,
								"type": "@property ElementType()",
								"name": "front",
								"comment": "   Returns the current iterated element.\n",
								"endline": 3137
							},
							{
								"kind": "function",
								"line": 3222,
								"endchar": 5,
								"char": 10,
								"type": "void()",
								"name": "popFront",
								"comment": "   Advances to the next element in all controlled ranges.\n",
								"endline": 3249
							}
						],
						"char": 1,
						"name": "Zip"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "tuple",
						"name": "Ranges"
					}
				],
				"comment": "   Iterate several ranges in lockstep. The element type is a proxy tuple\n   that allows accessing the current element in the $(D n)th range by\n   using $(D e[n]).\n   $(D Zip) offers the lowest range facilities of all components, e.g. it\n   offers random access iff all ranges offer random access, and also\n   offers mutation and swapping if all ranges offer it. Due to this, $(D\n   Zip) is extremely powerful because it allows manipulating several\n   ranges in lockstep. For example, the following code sorts two arrays\n   in parallel:\nExample:\n\n---\nimport std.algorithm : sort;\nint[] a = [ 1, 2, 3 ];\nstring[] b = [ \"a\", \"b\", \"c\" ];\nsort!((c, d) => c[0] > d[0])(zip(a, b));\nassert(a == [ 3, 2, 1 ]);\nassert(b == [ \"c\", \"b\", \"a\" ]);\n\n---\nExample:\n\n---\nint[] a = [ 1, 2, 3 ];\nstring[] b = [ \"a\", \"b\", \"c\" ];\n\nsize_t idx = 0;\nforeach (e; zip(a, b))\n{\n    assert(e[0] == a[idx]);\n    assert(e[1] == b[idx]);\n    ++idx;\n}\n\n---\n",
				"name": "Zip"
			},
			{
				"kind": "template",
				"line": 3381,
				"constraint": "Ranges.length && allSatisfy!(isInputRange, Ranges)",
				"members": [
					{
						"kind": "function",
						"line": 3381,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "(Ranges ranges)",
						"parameters": [
							{
								"type": "Ranges",
								"name": "ranges"
							}
						],
						"name": "zip",
						"endline": 3385
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "tuple",
						"name": "Ranges"
					}
				],
				"comment": "Ditto\n",
				"name": "zip"
			},
			{
				"kind": "template",
				"line": 3414,
				"constraint": "Ranges.length && allSatisfy!(isInputRange, Ranges)",
				"members": [
					{
						"kind": "function",
						"line": 3414,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "(StoppingPolicy sp, Ranges ranges)",
						"parameters": [
							{
								"type": "StoppingPolicy",
								"name": "sp"
							},
							{
								"type": "Ranges",
								"name": "ranges"
							}
						],
						"name": "zip",
						"endline": 3418
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "tuple",
						"name": "Ranges"
					}
				],
				"comment": "Ditto\n",
				"name": "zip"
			},
			{
				"kind": "enum",
				"line": 3424,
				"members": [
					{
						"kind": "enum member",
						"line": 3427,
						"value": "0",
						"char": 5,
						"name": "shortest",
						"comment": "Stop when the shortest range is exhausted\n"
					},
					{
						"kind": "enum member",
						"line": 3429,
						"value": "1",
						"char": 5,
						"name": "longest",
						"comment": "Stop when the longest range is exhausted\n"
					},
					{
						"kind": "enum member",
						"line": 3431,
						"value": "2",
						"char": 5,
						"name": "requireSameLength",
						"comment": "Require that all ranges are equal\n"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "StoppingPolicy",
				"comment": "   Dictates how iteration in a $(D Zip) should stop. By default stop at\n   the end of the shortest of all ranges.\n"
			},
			{
				"kind": "template",
				"line": 3686,
				"constraint": "Ranges.length > 1 && allSatisfy!(isInputRange, Ranges)",
				"members": [
					{
						"kind": "struct",
						"line": 3686,
						"members": [],
						"char": 1,
						"name": "Lockstep"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "tuple",
						"name": "Ranges"
					}
				],
				"comment": "   Iterate multiple ranges in lockstep using a $(D foreach) loop.  If only a single\n   range is passed in, the $(D Lockstep) aliases itself away.  If the\n   ranges are of different lengths and $(D s) == $(D StoppingPolicy.shortest)\n   stop after the shortest range is empty.  If the ranges are of different\n   lengths and $(D s) == $(D StoppingPolicy.requireSameLength), throw an\n   exception.  $(D s) may not be $(D StoppingPolicy.longest), and passing this\n   will throw an exception.\n\n   By default $(D StoppingPolicy) is set to $(D StoppingPolicy.shortest).\n\n   BUGS:  If a range does not offer lvalue access, but $(D ref) is used in the\n   $(D foreach) loop, it will be silently accepted but any modifications\n   to the variable will not be propagated to the underlying range.\n\n   // Lockstep also supports iterating with an index variable:\n   Example:\n   -------\n   foreach(index, a, b; lockstep(arr1, arr2)) {\n       writefln(\"Index %s:  a = %s, b = %s\", index, a, b);\n   }\n   -------\nExample:\n\n---\nauto arr1 = [1,2,3,4,5];\nauto arr2 = [6,7,8,9,10];\n\nforeach(ref a, ref b; lockstep(arr1, arr2))\n{\n    a += b;\n}\n\nassert(arr1 == [7,9,11,13,15]);\n\n---\n",
				"name": "Lockstep"
			},
			{
				"kind": "template",
				"line": 3716,
				"constraint": "allSatisfy!(isInputRange, Ranges)",
				"members": [
					{
						"kind": "function",
						"line": 3716,
						"endchar": 1,
						"char": 19,
						"type": "Lockstep!Ranges(Ranges ranges)",
						"parameters": [
							{
								"type": "Ranges",
								"name": "ranges"
							}
						],
						"name": "lockstep",
						"endline": 3720
					}
				],
				"char": 19,
				"parameters": [
					{
						"kind": "tuple",
						"name": "Ranges"
					}
				],
				"comment": "Ditto\n",
				"name": "lockstep"
			},
			{
				"kind": "template",
				"line": 3722,
				"constraint": "allSatisfy!(isInputRange, Ranges)",
				"members": [
					{
						"kind": "function",
						"line": 3722,
						"endchar": 1,
						"char": 19,
						"type": "Lockstep!Ranges(Ranges ranges, StoppingPolicy s)",
						"parameters": [
							{
								"type": "Ranges",
								"name": "ranges"
							},
							{
								"type": "StoppingPolicy",
								"name": "s"
							}
						],
						"name": "lockstep",
						"endline": 3729
					}
				],
				"char": 19,
				"parameters": [
					{
						"kind": "tuple",
						"name": "Ranges"
					}
				],
				"comment": "Ditto\n",
				"name": "lockstep"
			},
			{
				"kind": "template",
				"line": 3863,
				"members": [
					{
						"kind": "struct",
						"line": 3863,
						"members": [],
						"char": 1,
						"name": "Recurrence"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "alias",
						"name": "fun"
					},
					{
						"kind": "type",
						"name": "StateType"
					},
					{
						"kind": "value",
						"deco": "m",
						"name": "stateSize"
					}
				],
				"comment": "Creates a mathematical sequence given the initial values and a\nrecurrence function that computes the next value from the existing\nvalues. The sequence comes in the form of an infinite forward\nrange. The type $(D Recurrence) itself is seldom used directly; most\noften, recurrences are obtained by calling the function $(D\nrecurrence).\n\nWhen calling $(D recurrence), the function that computes the next\nvalue is specified as a template argument, and the initial values in\nthe recurrence are passed as regular arguments. For example, in a\nFibonacci sequence, there are two initial values (and therefore a\nstate size of 2) because computing the next Fibonacci value needs the\npast two values.\n\nThe signature of this function should be:\n----\nauto fun(R)(R state, size_t n)\n----\nwhere $(D n) will be the index of the current value, and $(D state) will be an\nopaque state vector that can be indexed with array-indexing notation\n$(D state[i]), where valid values of $(D i) range from $(D (n - 1)) to\n$(D (n - State.length)).\n\nIf the function is passed in string form, the state has name $(D \"a\")\nand the zero-based index in the recurrence has name $(D \"n\"). The\ngiven string must return the desired value for $(D a[n]) given $(D a[n\n- 1]), $(D a[n - 2]), $(D a[n - 3]),..., $(D a[n - stateSize]). The\nstate size is dictated by the number of arguments passed to the call\nto $(D recurrence). The $(D Recurrence) struct itself takes care of\nmanaging the recurrence's state and shifting it appropriately.\nExample:\n\n---\nimport std.algorithm : equal;\n\n// The Fibonacci numbers, using function in string form:\n// a[0] = 1, a[1] = 1, and compute a[n+1] = a[n-1] + a[n]\nauto fib = recurrence!(\"a[n-1] + a[n-2]\")(1, 1);\nassert(fib.take(10).equal([1, 1, 2, 3, 5, 8, 13, 21, 34, 55]));\n\n// The factorials, using function in lambda form:\nauto fac = recurrence!((a,n) => a[n-1] * n)(1);\nassert(take(fac, 10).equal([\n    1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880\n]));\n\n// The triangular numbers, using function in explicit form:\nstatic size_t genTriangular(R)(R state, size_t n)\n{\n    return state[n-1] + n;\n}\nauto tri = recurrence!genTriangular(0);\nassert(take(tri, 10).equal([0, 1, 3, 6, 10, 15, 21, 28, 36, 45]));\n\n---\n",
				"name": "Recurrence"
			},
			{
				"kind": "template",
				"line": 3926,
				"members": [
					{
						"kind": "function",
						"line": 3926,
						"endchar": 1,
						"char": 1,
						"type": "Recurrence!(fun, CommonType!State, State.length)(State initial)",
						"parameters": [
							{
								"type": "State",
								"name": "initial"
							}
						],
						"name": "recurrence",
						"endline": 3934
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "alias",
						"name": "fun"
					},
					{
						"kind": "tuple",
						"name": "State"
					}
				],
				"comment": "Ditto\n",
				"name": "recurrence"
			},
			{
				"kind": "template",
				"line": 3969,
				"members": [
					{
						"kind": "struct",
						"line": 3969,
						"members": [],
						"char": 1,
						"name": "Sequence"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "alias",
						"name": "fun"
					},
					{
						"kind": "type",
						"name": "State"
					}
				],
				"comment": "   $(D Sequence) is similar to $(D Recurrence) except that iteration is\n   presented in the so-called $(WEB en.wikipedia.org/wiki/Closed_form,\n   closed form). This means that the $(D n)th element in the series is\n   computable directly from the initial values and $(D n) itself. This\n   implies that the interface offered by $(D Sequence) is a random-access\n   range, as opposed to the regular $(D Recurrence), which only offers\n   forward iteration.\n\n   The state of the sequence is stored as a $(D Tuple) so it can be\n   heterogeneous.\nExample:\nOdd numbers, using function in string form:\n---\nauto odds = sequence!(\"a[0] + n * a[1]\")(1, 2);\nassert(odds.front == 1);\nodds.popFront();\nassert(odds.front == 3);\nodds.popFront();\nassert(odds.front == 5);\n\n---\nExample:\nTriangular numbers, using function in lambda form:\n---\nauto tri = sequence!((a,n) => n*(n+1)/2)();\n\n// Note random access\nassert(tri[0] == 0);\nassert(tri[3] == 6);\nassert(tri[1] == 1);\nassert(tri[4] == 10);\nassert(tri[2] == 3);\n\n---\nExample:\nFibonacci numbers, using function in explicit form:\n---\nimport std.math : pow, round, sqrt;\nstatic ulong computeFib(S)(S state, size_t n)\n{\n    // Binet's formula\n    return cast(ulong)(round((pow(state[0], n+1) - pow(state[1], n+1)) /\n                             state[2]));\n}\nauto fib = sequence!computeFib(\n    (1.0 + sqrt(5.0)) / 2.0,    // Golden Ratio\n    (1.0 - sqrt(5.0)) / 2.0,    // Conjugate of Golden Ratio\n    sqrt(5.0));\n\n// Note random access with [] operator\nassert(fib[1] == 1);\nassert(fib[4] == 5);\nassert(fib[3] == 3);\nassert(fib[2] == 2);\nassert(fib[9] == 55);\n\n---\n",
				"name": "Sequence"
			},
			{
				"kind": "template",
				"line": 4026,
				"members": [
					{
						"kind": "function",
						"line": 4026,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "(State args)",
						"parameters": [
							{
								"type": "State",
								"name": "args"
							}
						],
						"name": "sequence",
						"endline": 4031
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "alias",
						"name": "fun"
					},
					{
						"kind": "tuple",
						"name": "State"
					}
				],
				"comment": "Ditto\n",
				"name": "sequence"
			},
			{
				"kind": "template",
				"line": 4180,
				"constraint": "(isIntegral!(CommonType!(B, E)) || isPointer!(CommonType!(B, E))) && isIntegral!S",
				"members": [
					{
						"kind": "function",
						"line": 4180,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "(B begin, E end, S step)",
						"parameters": [
							{
								"type": "B",
								"name": "begin"
							},
							{
								"type": "E",
								"name": "end"
							},
							{
								"type": "S",
								"name": "step"
							}
						],
						"name": "iota",
						"endline": 4269
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "B"
					},
					{
						"kind": "type",
						"name": "E"
					},
					{
						"kind": "type",
						"name": "S"
					}
				],
				"comment": "   Construct a range of values that span the given starting and stopping\n   values.\n\n   Params:\n   begin = The starting value.\n   end = The value that serves as the stopping criterion. This value is not\n        included in the range.\n   step = The value to add to the current value at each iteration.\n\n   Returns:\n   A range that goes through the numbers $(D begin), $(D begin + step),\n   $(D begin + 2 * step), $(D ...), up to and excluding $(D end).\n\n   The two-argument overloads have $(D step = 1). If $(D begin < end && step <\n   0) or $(D begin > end && step > 0) or $(D begin == end), then an empty range\n   is returned. If $(D step == 0) then $(D begin == end) is an error.\n\n   For built-in types, the range returned is a random access range. For\n   user-defined types that support $(D ++), the range is an input\n   range.\n\n    Example:\n    ---\n    void main()\n    {\n        import std.stdio;\n\n        // The following groups all produce the same output of:\n        // 0 1 2 3 4\n\n        foreach (i; 0..5)\n            writef(\"%s \", i);\n        writeln();\n\n        import std.range : iota;\n        foreach (i; iota(0, 5))\n            writef(\"%s \", i);\n        writeln();\n\n        writefln(\"%(%s %|%)\", iota(0, 5));\n\n        import std.algorithm : map, copy;\n        import std.format;\n        iota(0, 5).map!(i => format(\"%s \", i)).copy(stdout.lockingTextWriter());\n        writeln();\n    }\n    ---\nExample:\n\n---\nimport std.algorithm : equal;\nimport std.math : approxEqual;\n\nauto r = iota(0, 10, 1);\nassert(equal(r, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9][]));\nr = iota(0, 11, 3);\nassert(equal(r, [0, 3, 6, 9][]));\nassert(r[2] == 6);\nauto rf = iota(0.0, 0.5, 0.1);\nassert(approxEqual(rf, [0.0, 0.1, 0.2, 0.3, 0.4]));\n\n---\nExample:\nUser-defined types such as $(XREF bigint, BigInt) are also supported, as long\nas they can be incremented with $(D ++) and compared with $(D <) or $(D ==).\n---\nimport std.algorithm.comparison : equal;\nimport std.bigint;\n\nauto s = BigInt(1_000_000_000_000);\nauto e = BigInt(1_000_000_000_003);\nauto r = iota(s, e);\nassert(r.equal([\n    BigInt(1_000_000_000_000),\n    BigInt(1_000_000_000_001),\n    BigInt(1_000_000_000_002)\n]));\n\n---\n",
				"name": "iota"
			},
			{
				"kind": "template",
				"line": 4272,
				"constraint": "isFloatingPoint!(CommonType!(B, E))",
				"members": [
					{
						"kind": "function",
						"line": 4272,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "(B begin, E end)",
						"parameters": [
							{
								"type": "B",
								"name": "begin"
							},
							{
								"type": "E",
								"name": "end"
							}
						],
						"name": "iota",
						"endline": 4276
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "B"
					},
					{
						"kind": "type",
						"name": "E"
					}
				],
				"comment": "Ditto\n",
				"name": "iota"
			},
			{
				"kind": "template",
				"line": 4279,
				"constraint": "isIntegral!(CommonType!(B, E)) || isPointer!(CommonType!(B, E))",
				"members": [
					{
						"kind": "function",
						"line": 4279,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "(B begin, E end)",
						"parameters": [
							{
								"type": "B",
								"name": "begin"
							},
							{
								"type": "E",
								"name": "end"
							}
						],
						"name": "iota",
						"endline": 4339
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "B"
					},
					{
						"kind": "type",
						"name": "E"
					}
				],
				"comment": "Ditto\n",
				"name": "iota"
			},
			{
				"kind": "template",
				"line": 4342,
				"members": [
					{
						"kind": "function",
						"line": 4342,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "(E end)",
						"parameters": [
							{
								"type": "E",
								"name": "end"
							}
						],
						"name": "iota",
						"endline": 4346
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "E"
					}
				],
				"comment": "Ditto\n",
				"name": "iota"
			},
			{
				"kind": "template",
				"line": 4350,
				"constraint": "isFloatingPoint!(CommonType!(B, E, S))",
				"members": [
					{
						"kind": "function",
						"line": 4350,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "(B begin, E end, S step)",
						"parameters": [
							{
								"type": "B",
								"name": "begin"
							},
							{
								"type": "E",
								"name": "end"
							},
							{
								"type": "S",
								"name": "step"
							}
						],
						"name": "iota",
						"endline": 4433
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "B"
					},
					{
						"kind": "type",
						"name": "E"
					},
					{
						"kind": "type",
						"name": "S"
					}
				],
				"comment": "Ditto\n",
				"name": "iota"
			},
			{
				"kind": "template",
				"line": 4654,
				"constraint": "!isIntegral!(CommonType!(B, E)) && !isFloatingPoint!(CommonType!(B, E)) && !isPointer!(CommonType!(B, E)) && is(typeof((ref B b)\n{\n++b;\n}\n)) && (is(typeof(B.init < E.init)) || is(typeof(B.init == E.init)))",
				"members": [
					{
						"kind": "function",
						"line": 4654,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "(B begin, E end)",
						"parameters": [
							{
								"type": "B",
								"name": "begin"
							},
							{
								"type": "E",
								"name": "end"
							}
						],
						"name": "iota",
						"endline": 4683
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "B"
					},
					{
						"kind": "type",
						"name": "E"
					}
				],
				"comment": "ditto\n",
				"name": "iota"
			},
			{
				"kind": "enum",
				"line": 4739,
				"members": [
					{
						"kind": "enum member",
						"line": 4745,
						"value": "0",
						"char": 5,
						"name": "assumeJagged",
						"comment": "   When transversed, the elements of a range of ranges are assumed to\n   have different lengths (e.g. a jagged array).\n"
					},
					{
						"kind": "enum member",
						"line": 4752,
						"value": "1",
						"char": 9,
						"name": "enforceNotJagged",
						"comment": "       The transversal enforces that the elements of a range of ranges have\n       all the same length (e.g. an array of arrays, all having the same\n       length). Checking is done once upon construction of the transversal\n       range.\n"
					},
					{
						"kind": "enum member",
						"line": 4758,
						"value": "2",
						"char": 9,
						"name": "assumeNotJagged",
						"comment": "       The transversal assumes, without verifying, that the elements of a\n       range of ranges have all the same length. This option is useful if\n       checking was already done from the outside of the range.\n"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "TransverseOptions",
				"comment": "   Options for the $(LREF FrontTransversal) and $(LREF Transversal) ranges\n   (below).\n"
			},
			{
				"kind": "template",
				"line": 4765,
				"members": [
					{
						"kind": "struct",
						"line": 4765,
						"members": [
							{
								"kind": "constructor",
								"line": 4793,
								"endchar": 5,
								"char": 5,
								"type": "(RangeOfRanges input)",
								"parameters": [
									{
										"type": "RangeOfRanges",
										"name": "input"
									}
								],
								"name": "this",
								"comment": "   Construction from an input.\n",
								"endline": 4810
							},
							{
								"kind": "function",
								"line": 4828,
								"storageClass": [
									"auto"
								],
								"endchar": 5,
								"char": 24,
								"type": "@property ref ()",
								"name": "front",
								"comment": "Ditto\n",
								"endline": 4832
							},
							{
								"kind": "function",
								"line": 4852,
								"endchar": 5,
								"char": 10,
								"type": "void()",
								"name": "popFront",
								"comment": "Ditto\n",
								"endline": 4857
							}
						],
						"char": 1,
						"name": "FrontTransversal"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "Ror"
					},
					{
						"kind": "value",
						"defaultValue": "TransverseOptions.assumeJagged",
						"deco": "E3std5range17TransverseOptions",
						"name": "opt"
					}
				],
				"comment": "   Given a range of ranges, iterate transversally through the first\n   elements of each of the enclosed ranges.\nExample:\n\n---\nimport std.algorithm : equal;\nint[][] x = new int[][2];\nx[0] = [1, 2];\nx[1] = [3, 4];\nauto ror = frontTransversal(x);\nassert(equal(ror, [ 1, 3 ][]));\n\n---\n",
				"name": "FrontTransversal"
			},
			{
				"kind": "template",
				"line": 4961,
				"members": [
					{
						"kind": "function",
						"line": 4961,
						"endchar": 1,
						"char": 39,
						"type": "FrontTransversal!(RangeOfRanges, opt)(RangeOfRanges rr)",
						"parameters": [
							{
								"type": "RangeOfRanges",
								"name": "rr"
							}
						],
						"name": "frontTransversal",
						"endline": 4967
					}
				],
				"char": 39,
				"parameters": [
					{
						"kind": "value",
						"defaultValue": "TransverseOptions.assumeJagged",
						"deco": "E3std5range17TransverseOptions",
						"name": "opt"
					},
					{
						"kind": "type",
						"name": "RangeOfRanges"
					}
				],
				"comment": "Ditto\n",
				"name": "frontTransversal"
			},
			{
				"kind": "template",
				"line": 5048,
				"members": [
					{
						"kind": "struct",
						"line": 5048,
						"members": [
							{
								"kind": "constructor",
								"line": 5076,
								"endchar": 5,
								"char": 5,
								"type": "(RangeOfRanges input, size_t n)",
								"parameters": [
									{
										"type": "RangeOfRanges",
										"name": "input"
									},
									{
										"type": "size_t",
										"name": "n"
									}
								],
								"name": "this",
								"comment": "   Construction from an input and an index.\n",
								"endline": 5092
							},
							{
								"kind": "function",
								"line": 5110,
								"storageClass": [
									"auto"
								],
								"endchar": 5,
								"char": 24,
								"type": "@property ref ()",
								"name": "front",
								"comment": "Ditto\n",
								"endline": 5114
							},
							{
								"kind": "function",
								"line": 5136,
								"endchar": 5,
								"char": 10,
								"type": "void()",
								"name": "popFront",
								"comment": "Ditto\n",
								"endline": 5141
							}
						],
						"char": 1,
						"name": "Transversal"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "Ror"
					},
					{
						"kind": "value",
						"defaultValue": "TransverseOptions.assumeJagged",
						"deco": "E3std5range17TransverseOptions",
						"name": "opt"
					}
				],
				"comment": "   Given a range of ranges, iterate transversally through the the $(D\n   n)th element of each of the enclosed ranges. All elements of the\n   enclosing range must offer random access.\nExample:\n\n---\nimport std.algorithm : equal;\nint[][] x = new int[][2];\nx[0] = [1, 2];\nx[1] = [3, 4];\nauto ror = transversal(x, 1);\nassert(equal(ror, [ 2, 4 ][]));\n\n---\n",
				"name": "Transversal"
			},
			{
				"kind": "template",
				"line": 5258,
				"members": [
					{
						"kind": "function",
						"line": 5258,
						"endchar": 1,
						"char": 34,
						"type": "Transversal!(RangeOfRanges, opt)(RangeOfRanges rr, size_t n)",
						"parameters": [
							{
								"type": "RangeOfRanges",
								"name": "rr"
							},
							{
								"type": "size_t",
								"name": "n"
							}
						],
						"name": "transversal",
						"endline": 5263
					}
				],
				"char": 34,
				"parameters": [
					{
						"kind": "value",
						"defaultValue": "TransverseOptions.assumeJagged",
						"deco": "E3std5range17TransverseOptions",
						"name": "opt"
					},
					{
						"kind": "type",
						"name": "RangeOfRanges"
					}
				],
				"comment": "Ditto\n",
				"name": "transversal"
			},
			{
				"kind": "template",
				"line": 5421,
				"constraint": "isForwardRange!RangeOfRanges && isInputRange!(ElementType!RangeOfRanges) && hasAssignableElements!RangeOfRanges",
				"members": [
					{
						"kind": "function",
						"line": 5421,
						"endchar": 1,
						"char": 26,
						"type": "Transposed!RangeOfRanges(RangeOfRanges rr)",
						"parameters": [
							{
								"type": "RangeOfRanges",
								"name": "rr"
							}
						],
						"name": "transposed",
						"endline": 5427
					}
				],
				"char": 26,
				"parameters": [
					{
						"kind": "type",
						"name": "RangeOfRanges"
					}
				],
				"comment": "Given a range of ranges, returns a range of ranges where the $(I i)'th subrange\ncontains the $(I i)'th elements of the original subranges.\nExample:\nExample\n---\nimport std.algorithm : equal;\nint[][] ror = [\n    [1, 2, 3],\n    [4, 5, 6]\n];\nauto xp = transposed(ror);\nassert(equal!\"a.equal(b)\"(xp, [\n    [1, 4],\n    [2, 5],\n    [3, 6]\n]));\n\n---\nExample:\n\n---\nint[][] x = new int[][2];\nx[0] = [1, 2];\nx[1] = [3, 4];\nauto tr = transposed(x);\nint[][] witness = [ [ 1, 3 ], [ 2, 4 ] ];\nuint i;\n\nforeach (e; tr)\n{\n    assert(array(e) == witness[i++]);\n}\n\n---\n",
				"name": "transposed"
			},
			{
				"kind": "template",
				"line": 5485,
				"constraint": "isRandomAccessRange!Source && isInputRange!Indices && is(typeof(Source.init[ElementType!Indices.init]))",
				"members": [
					{
						"kind": "struct",
						"line": 5485,
						"members": [
							{
								"kind": "function",
								"line": 5496,
								"storageClass": [
									"auto"
								],
								"endchar": 5,
								"char": 24,
								"type": "@property ref ()",
								"name": "front",
								"comment": "Range primitives\n",
								"endline": 5500
							},
							{
								"kind": "function",
								"line": 5503,
								"endchar": 5,
								"char": 10,
								"type": "void()",
								"name": "popFront",
								"comment": "Ditto\n",
								"endline": 5507
							},
							{
								"kind": "function",
								"line": 5643,
								"endchar": 5,
								"char": 22,
								"type": "@property Source()",
								"name": "source",
								"comment": "    Returns the source range.\n",
								"endline": 5646
							},
							{
								"kind": "function",
								"line": 5651,
								"endchar": 5,
								"char": 24,
								"type": "@property Indices()",
								"name": "indices",
								"comment": "    Returns the indices range.\n",
								"endline": 5654
							}
						],
						"char": 1,
						"name": "Indexed"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "Source"
					},
					{
						"kind": "type",
						"name": "Indices"
					}
				],
				"comment": "This struct takes two ranges, $(D source) and $(D indices), and creates a view\nof $(D source) as if its elements were reordered according to $(D indices).\n$(D indices) may include only a subset of the elements of $(D source) and\nmay also repeat elements.\n\n$(D Source) must be a random access range.  The returned range will be\nbidirectional or random-access if $(D Indices) is bidirectional or\nrandom-access, respectively.\nExample:\n\n---\nimport std.algorithm : equal;\nauto source = [1, 2, 3, 4, 5];\nauto indices = [4, 3, 1, 2, 0, 4];\nauto ind = indexed(source, indices);\nassert(equal(ind, [5, 4, 2, 3, 1, 5]));\nassert(equal(retro(ind), [5, 1, 3, 2, 4, 5]));\n\n---\n",
				"name": "Indexed"
			},
			{
				"kind": "template",
				"line": 5682,
				"members": [
					{
						"kind": "function",
						"line": 5682,
						"endchar": 1,
						"char": 27,
						"type": "Indexed!(Source, Indices)(Source source, Indices indices)",
						"parameters": [
							{
								"type": "Source",
								"name": "source"
							},
							{
								"type": "Indices",
								"name": "indices"
							}
						],
						"name": "indexed",
						"endline": 5685
					}
				],
				"char": 27,
				"parameters": [
					{
						"kind": "type",
						"name": "Source"
					},
					{
						"kind": "type",
						"name": "Indices"
					}
				],
				"comment": "Ditto\n",
				"name": "indexed"
			},
			{
				"kind": "template",
				"line": 5737,
				"constraint": "isForwardRange!Source",
				"members": [
					{
						"kind": "struct",
						"line": 5737,
						"members": [
							{
								"kind": "constructor",
								"line": 5741,
								"endchar": 5,
								"char": 5,
								"type": "(Source source, size_t chunkSize)",
								"parameters": [
									{
										"type": "Source",
										"name": "source"
									},
									{
										"type": "size_t",
										"name": "chunkSize"
									}
								],
								"name": "this",
								"comment": "Standard constructor\n",
								"endline": 5746
							},
							{
								"kind": "function",
								"line": 5749,
								"storageClass": [
									"auto"
								],
								"endchar": 5,
								"char": 20,
								"type": "@property ()",
								"name": "front",
								"comment": "Forward range primitives. Always present.\n",
								"endline": 5753
							},
							{
								"kind": "function",
								"line": 5756,
								"endchar": 5,
								"char": 10,
								"type": "void()",
								"name": "popFront",
								"comment": "Ditto\n",
								"endline": 5760
							},
							{
								"kind": "function",
								"line": 5773,
								"endchar": 5,
								"char": 28,
								"type": "@property typeof(this)()",
								"name": "save",
								"comment": "Ditto\n",
								"endline": 5776
							}
						],
						"char": 1,
						"name": "Chunks"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "Source"
					}
				],
				"comment": "This range iterates over fixed-sized chunks of size $(D chunkSize) of a\n$(D source) range. $(D Source) must be a forward range.\n\nIf $(D !isInfinite!Source) and $(D source.walkLength) is not evenly\ndivisible by $(D chunkSize), the back element of this range will contain\nfewer than $(D chunkSize) elements.\nExample:\n\n---\nimport std.algorithm : equal;\nauto source = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nauto chunks = chunks(source, 4);\nassert(chunks[0] == [1, 2, 3, 4]);\nassert(chunks[1] == [5, 6, 7, 8]);\nassert(chunks[2] == [9, 10]);\nassert(chunks.back == chunks[2]);\nassert(chunks.front == chunks[0]);\nassert(chunks.length == 3);\nassert(equal(retro(array(chunks)), array(retro(chunks))));\n\n---\n",
				"name": "Chunks"
			},
			{
				"kind": "template",
				"line": 5936,
				"constraint": "isForwardRange!Source",
				"members": [
					{
						"kind": "function",
						"line": 5936,
						"endchar": 1,
						"char": 15,
						"type": "Chunks!Source(Source source, size_t chunkSize)",
						"parameters": [
							{
								"type": "Source",
								"name": "source"
							},
							{
								"type": "size_t",
								"name": "chunkSize"
							}
						],
						"name": "chunks",
						"endline": 5940
					}
				],
				"char": 15,
				"parameters": [
					{
						"kind": "type",
						"name": "Source"
					}
				],
				"comment": "Ditto\n",
				"name": "chunks"
			},
			{
				"kind": "template",
				"line": 6229,
				"constraint": "!is(CommonType!Values == void) || Values.length == 0",
				"members": [
					{
						"kind": "function",
						"line": 6229,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "(auto ref Values values)",
						"parameters": [
							{
								"storageClass": [
									"auto",
									"ref"
								],
								"type": "Values",
								"name": "values"
							}
						],
						"name": "only",
						"endline": 6233
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "tuple",
						"name": "Values"
					}
				],
				"comment": "Assemble $(D values) into a range that carries all its\nelements in-situ.\n\nUseful when a single value or multiple disconnected values\nmust be passed to an algorithm expecting a range, without\nhaving to perform dynamic memory allocation.\n\nAs copying the range means copying all elements, it can be\nsafely returned from functions. For the same reason, copying\nthe returned range may be expensive for a large number of arguments.\nExample:\n\n---\nimport std.algorithm;\nimport std.uni;\n\nassert(equal(only('♡'), \"♡\"));\nassert([1, 2, 3, 4].findSplitBefore(only(3))[0] == [1, 2]);\n\nassert(only(\"one\", \"two\", \"three\").joiner(\" \").equal(\"one two three\"));\n\nstring title = \"The D Programming Language\";\nassert(filter!isUpper(title).map!only().join(\".\") == \"T.D.P.L\");\n\n---\n",
				"name": "only"
			},
			{
				"kind": "template",
				"line": 6452,
				"constraint": "isIntegral!Enumerator && isInputRange!Range",
				"members": [
					{
						"kind": "function",
						"line": 6452,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "(Range range, Enumerator start = 0)",
						"parameters": [
							{
								"type": "Range",
								"name": "range"
							},
							{
								"default": "0",
								"type": "Enumerator",
								"name": "start"
							}
						],
						"name": "enumerate",
						"endline": 6594
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"default": "size_t",
						"name": "Enumerator"
					},
					{
						"kind": "type",
						"name": "Range"
					}
				],
				"comment": "Iterate over $(D range) with an attached index variable.\n\nEach element is a $(XREF typecons, Tuple) containing the index\nand the element, in that order, where the index member is named $(D index)\nand the element member is named $(D value).\n\nThe index starts at $(D start) and is incremented by one on every iteration.\n\nBidirectionality is propagated only if $(D range) has length.\n\nOverflow:\nIf $(D range) has length, then it is an error to pass a value for $(D start)\nso that $(D start + range.length) is bigger than $(D Enumerator.max), thus it is\nensured that overflow cannot happen.\n\nIf $(D range) does not have length, and $(D popFront) is called when\n$(D front.index == Enumerator.max), the index will overflow and\ncontinue from $(D Enumerator.min).\n\nExamples:\nUseful for using $(D foreach) with an index loop variable:\n----\n    import std.stdio : stdin, stdout;\n    import std.range : enumerate;\n\n    foreach (lineNum, line; stdin.byLine().enumerate(1))\n        stdout.writefln(\"line #%s: %s\", lineNum, line);\n----\nExample:\nCan start enumeration from a negative position:\n---\nimport std.array : assocArray;\nimport std.range : enumerate;\n\nbool[int] aa = true.repeat(3).enumerate(-1).assocArray();\nassert(aa[-1]);\nassert(aa[0]);\nassert(aa[1]);\n\n---\n",
				"name": "enumerate"
			},
			{
				"kind": "template",
				"line": 6791,
				"members": [
					{
						"kind": "variable",
						"line": 6793,
						"init": "is(typeof(()\n{\nT1 foo();\nT2 bar();\nfn(foo(), bar());\nfn(bar(), foo());\n}\n))",
						"storageClass": [
							"enum"
						],
						"char": 10,
						"name": "isTwoWayCompatible"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "alias",
						"name": "fn"
					},
					{
						"kind": "type",
						"name": "T1"
					},
					{
						"kind": "type",
						"name": "T2"
					}
				],
				"comment": "  Returns true if $(D fn) accepts variables of type T1 and T2 in any order.\n  The following code should compile:\n  ---\n  T1 foo();\n  T2 bar();\n\n  fn(foo(), bar());\n  fn(bar(), foo());\n  ---\n",
				"name": "isTwoWayCompatible"
			},
			{
				"kind": "enum",
				"line": 6808,
				"members": [
					{
						"kind": "enum member",
						"line": 6813,
						"value": "0",
						"char": 5,
						"name": "linear",
						"comment": "       Searches in a linear fashion.\n"
					},
					{
						"kind": "enum member",
						"line": 6824,
						"value": "1",
						"char": 5,
						"name": "trot",
						"comment": "       Searches with a step that is grows linearly (1, 2, 3,...)\n       leading to a quadratic search schedule (indexes tried are 0, 1,\n       3, 6, 10, 15, 21, 28,...) Once the search overshoots its target,\n       the remaining interval is searched using binary search. The\n       search is completed in $(BIGOH sqrt(n)) time. Use it when you\n       are reasonably confident that the value is around the beginning\n       of the range.\n"
					},
					{
						"kind": "enum member",
						"line": 6834,
						"value": "2",
						"char": 9,
						"name": "gallop",
						"comment": "       Performs a $(LUCKY galloping search algorithm), i.e. searches\n       with a step that doubles every time, (1, 2, 4, 8, ...)  leading\n       to an exponential search schedule (indexes tried are 0, 1, 3,\n       7, 15, 31, 63,...) Once the search overshoots its target, the\n       remaining interval is searched using binary search. A value is\n       found in $(BIGOH log(n)) time.\n"
					},
					{
						"kind": "enum member",
						"line": 6845,
						"value": "3",
						"char": 9,
						"name": "binarySearch",
						"comment": "       Searches using a classic interval halving policy. The search\n       starts in the middle of the range, and each search step cuts\n       the range in half. This policy finds a value in $(BIGOH log(n))\n       time but is less cache friendly than $(D gallop) for large\n       ranges. The $(D binarySearch) policy is used as the last step\n       of $(D trot), $(D gallop), $(D trotBackwards), and $(D\n       gallopBackwards) strategies.\n"
					},
					{
						"kind": "enum member",
						"line": 6851,
						"value": "4",
						"char": 9,
						"name": "trotBackwards",
						"comment": "       Similar to $(D trot) but starts backwards. Use it when\n       confident that the value is around the end of the range.\n"
					},
					{
						"kind": "enum member",
						"line": 6857,
						"value": "5",
						"char": 9,
						"name": "gallopBackwards",
						"comment": "       Similar to $(D gallop) but starts backwards. Use it when\n       confident that the value is around the end of the range.\n"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "SearchPolicy",
				"comment": "   Policy used with the searching primitives $(D lowerBound), $(D\n   upperBound), and $(D equalRange) of $(LREF SortedRange) below.\n"
			},
			{
				"kind": "template",
				"line": 6870,
				"constraint": "isInputRange!Range",
				"members": [
					{
						"kind": "struct",
						"line": 6870,
						"members": [
							{
								"kind": "function",
								"line": 6933,
								"endchar": 5,
								"char": 20,
								"type": "@property bool()",
								"name": "empty",
								"comment": "Range primitives.\n",
								"endline": 6936
							},
							{
								"kind": "function",
								"line": 6949,
								"storageClass": [
									"auto"
								],
								"endchar": 5,
								"char": 24,
								"type": "@property ref ()",
								"name": "front",
								"comment": "Ditto\n",
								"endline": 6952
							},
							{
								"kind": "function",
								"line": 6955,
								"endchar": 5,
								"char": 10,
								"type": "void()",
								"name": "popFront",
								"comment": "Ditto\n",
								"endline": 6958
							},
							{
								"kind": "function",
								"line": 7005,
								"storageClass": [
									"auto"
								],
								"endchar": 5,
								"char": 10,
								"type": "()",
								"name": "release",
								"comment": "   Releases the controlled range and returns it.\n",
								"endline": 7009
							},
							{
								"kind": "template",
								"line": 7116,
								"constraint": "isTwoWayCompatible!(predFun, ElementType!Range, V) && hasSlicing!Range",
								"members": [
									{
										"kind": "function",
										"line": 7116,
										"storageClass": [
											"auto"
										],
										"endchar": 5,
										"char": 10,
										"type": "(V value)",
										"parameters": [
											{
												"type": "V",
												"name": "value"
											}
										],
										"name": "lowerBound",
										"endline": 7121
									}
								],
								"char": 10,
								"parameters": [
									{
										"kind": "value",
										"defaultValue": "SearchPolicy.binarySearch",
										"type": "SearchPolicy",
										"name": "sp"
									},
									{
										"kind": "type",
										"name": "V"
									}
								],
								"comment": "   This function uses a search with policy $(D sp) to find the\n   largest left subrange on which $(D pred(x, value)) is $(D true) for\n   all $(D x) (e.g., if $(D pred) is \"less than\", returns the portion of\n   the range with elements strictly smaller than $(D value)). The search\n   schedule and its complexity are documented in\n   $(LREF SearchPolicy).  See also STL's\n   $(WEB sgi.com/tech/stl/lower_bound.html, lower_bound).\n\n   Example:\n   ----\n   auto a = assumeSorted([ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 ]);\n   auto p = a.lowerBound(4);\n   assert(equal(p, [ 0, 1, 2, 3 ]));\n   ----\n",
								"name": "lowerBound"
							},
							{
								"kind": "template",
								"line": 7145,
								"constraint": "isTwoWayCompatible!(predFun, ElementType!Range, V)",
								"members": [
									{
										"kind": "function",
										"line": 7145,
										"storageClass": [
											"auto"
										],
										"endchar": 5,
										"char": 10,
										"type": "(V value)",
										"parameters": [
											{
												"type": "V",
												"name": "value"
											}
										],
										"name": "upperBound",
										"endline": 7163
									}
								],
								"char": 10,
								"parameters": [
									{
										"kind": "value",
										"defaultValue": "SearchPolicy.binarySearch",
										"type": "SearchPolicy",
										"name": "sp"
									},
									{
										"kind": "type",
										"name": "V"
									}
								],
								"comment": "This function searches with policy $(D sp) to find the largest right\nsubrange on which $(D pred(value, x)) is $(D true) for all $(D x)\n(e.g., if $(D pred) is \"less than\", returns the portion of the range\nwith elements strictly greater than $(D value)). The search schedule\nand its complexity are documented in $(LREF SearchPolicy).\n\nFor ranges that do not offer random access, $(D SearchPolicy.linear)\nis the only policy allowed (and it must be specified explicitly lest it exposes\nuser code to unexpected inefficiencies). For random-access searches, all\npolicies are allowed, and $(D SearchPolicy.binarySearch) is the default.\n\nSee_Also: STL's $(WEB sgi.com/tech/stl/lower_bound.html,upper_bound).\n\nExample:\n----\nauto a = assumeSorted([ 1, 2, 3, 3, 3, 4, 4, 5, 6 ]);\nauto p = a.upperBound(3);\nassert(equal(p, [4, 4, 5, 6]));\n----\n",
								"name": "upperBound"
							},
							{
								"kind": "template",
								"line": 7186,
								"constraint": "isTwoWayCompatible!(predFun, ElementType!Range, V) && isRandomAccessRange!Range",
								"members": [
									{
										"kind": "function",
										"line": 7186,
										"storageClass": [
											"auto"
										],
										"endchar": 5,
										"char": 10,
										"type": "(V value)",
										"parameters": [
											{
												"type": "V",
												"name": "value"
											}
										],
										"name": "equalRange",
										"endline": 7223
									}
								],
								"char": 10,
								"parameters": [
									{
										"kind": "type",
										"name": "V"
									}
								],
								"comment": "   Returns the subrange containing all elements $(D e) for which both $(D\n   pred(e, value)) and $(D pred(value, e)) evaluate to $(D false) (e.g.,\n   if $(D pred) is \"less than\", returns the portion of the range with\n   elements equal to $(D value)). Uses a classic binary search with\n   interval halving until it finds a value that satisfies the condition,\n   then uses $(D SearchPolicy.gallopBackwards) to find the left boundary\n   and $(D SearchPolicy.gallop) to find the right boundary. These\n   policies are justified by the fact that the two boundaries are likely\n   to be near the first found value (i.e., equal ranges are relatively\n   small). Completes the entire search in $(BIGOH log(n)) time. See also\n   STL's $(WEB sgi.com/tech/stl/equal_range.html, equal_range).\n\n   Example:\n   ----\n   auto a = [ 1, 2, 3, 3, 3, 4, 4, 5, 6 ];\n   auto r = equalRange(a, 3);\n   assert(equal(r, [ 3, 3, 3 ]));\n   ----\n",
								"name": "equalRange"
							},
							{
								"kind": "template",
								"line": 7243,
								"constraint": "isTwoWayCompatible!(predFun, ElementType!Range, V) && isRandomAccessRange!Range",
								"members": [
									{
										"kind": "function",
										"line": 7243,
										"storageClass": [
											"auto"
										],
										"endchar": 5,
										"char": 10,
										"type": "(V value)",
										"parameters": [
											{
												"type": "V",
												"name": "value"
											}
										],
										"name": "trisect",
										"endline": 7283
									}
								],
								"char": 10,
								"parameters": [
									{
										"kind": "type",
										"name": "V"
									}
								],
								"comment": "Returns a tuple $(D r) such that $(D r[0]) is the same as the result\nof $(D lowerBound(value)), $(D r[1]) is the same as the result of $(D\nequalRange(value)), and $(D r[2]) is the same as the result of $(D\nupperBound(value)). The call is faster than computing all three\nseparately. Uses a search schedule similar to $(D\nequalRange). Completes the entire search in $(BIGOH log(n)) time.\n\nExample:\n----\nauto a = [ 1, 2, 3, 3, 3, 4, 4, 5, 6 ];\nauto r = assumeSorted(a).trisect(3);\nassert(equal(r[0], [ 1, 2 ]));\nassert(equal(r[1], [ 3, 3, 3 ]));\nassert(equal(r[2], [ 4, 4, 5, 6 ]));\n----\n",
								"name": "trisect"
							},
							{
								"kind": "template",
								"line": 7293,
								"constraint": "isRandomAccessRange!Range",
								"members": [
									{
										"kind": "function",
										"line": 7293,
										"endchar": 5,
										"char": 10,
										"type": "bool(V value)",
										"parameters": [
											{
												"type": "V",
												"name": "value"
											}
										],
										"name": "contains",
										"endline": 7318
									}
								],
								"char": 10,
								"parameters": [
									{
										"kind": "type",
										"name": "V"
									}
								],
								"comment": "Returns $(D true) if and only if $(D value) can be found in $(D\nrange), which is assumed to be sorted. Performs $(BIGOH log(r.length))\nevaluations of $(D pred). See also STL's $(WEB\nsgi.com/tech/stl/binary_search.html, binary_search).\n",
								"name": "contains"
							},
							{
								"kind": "template",
								"line": 7325,
								"members": [
									{
										"kind": "function",
										"line": 7325,
										"storageClass": [
											"auto"
										],
										"endchar": 5,
										"char": 10,
										"type": "()",
										"name": "groupBy",
										"endline": 7329
									}
								],
								"char": 10,
								"parameters": [],
								"comment": "Returns a range of subranges of elements that are equivalent according to the\nsorting relation.\n",
								"name": "groupBy"
							}
						],
						"char": 1,
						"name": "SortedRange"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "Range"
					},
					{
						"kind": "alias",
						"name": "pred",
						"defaultAlias": "\"a < b\""
					}
				],
				"comment": "Represents a sorted range. In addition to the regular range\nprimitives, supports additional operations that take advantage of the\nordering, such as merge and binary search. To obtain a $(D\nSortedRange) from an unsorted range $(D r), use $(XREF algorithm,\nsort) which sorts $(D r) in place and returns the corresponding $(D\nSortedRange). To construct a $(D SortedRange) from a range $(D r) that\nis known to be already sorted, use $(LREF assumeSorted) described\nbelow.\nExample:\n\n---\nimport std.algorithm : sort;\nauto a = [ 1, 2, 3, 42, 52, 64 ];\nauto r = assumeSorted(a);\nassert(r.contains(3));\nassert(!r.contains(32));\nauto r1 = sort!\"a > b\"(a);\nassert(r1.contains(3));\nassert(!r1.contains(32));\nassert(r1.release() == [ 64, 52, 42, 3, 2, 1 ]);\n\n---\nExample:\n$(D SortedRange) could accept ranges weaker than random-access, but it\nis unable to provide interesting functionality for them. Therefore,\n$(D SortedRange) is currently restricted to random-access ranges.\n\nNo copy of the original range is ever made. If the underlying range is\nchanged concurrently with its corresponding $(D SortedRange) in ways\nthat break its sortedness, $(D SortedRange) will work erratically.\n---\nimport std.algorithm : swap;\nauto a = [ 1, 2, 3, 42, 52, 64 ];\nauto r = assumeSorted(a);\nassert(r.contains(42));\nswap(a[3], a[5]);         // illegal to break sortedness of original range\nassert(!r.contains(42));  // passes although it shouldn't\n\n---\n",
				"name": "SortedRange"
			},
			{
				"kind": "template",
				"line": 7498,
				"constraint": "isInputRange!(Unqual!R)",
				"members": [
					{
						"kind": "function",
						"line": 7498,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "(R r)",
						"parameters": [
							{
								"type": "R",
								"name": "r"
							}
						],
						"name": "assumeSorted",
						"endline": 7502
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "alias",
						"name": "pred",
						"defaultAlias": "\"a < b\""
					},
					{
						"kind": "type",
						"name": "R"
					}
				],
				"comment": "Assumes $(D r) is sorted by predicate $(D pred) and returns the\ncorresponding $(D SortedRange!(pred, R)) having $(D r) as support. To\nkeep the checking costs low, the cost is $(BIGOH 1) in release mode\n(no checks for sortedness are performed). In debug mode, a few random\nelements of $(D r) are checked for sortedness. The size of the sample\nis proportional $(BIGOH log(r.length)). That way, checking has no\neffect on the complexity of subsequent operations specific to sorted\nranges (such as binary search). The probability of an arbitrary\nunsorted range failing the test is very high (however, an\nalmost-sorted range is likely to pass it). To check for sortedness at\ncost $(BIGOH n), use $(XREF algorithm,isSorted).\n",
				"name": "assumeSorted"
			},
			{
				"kind": "template",
				"line": 7598,
				"constraint": "isForwardRange!R",
				"members": [
					{
						"kind": "struct",
						"line": 7598,
						"members": [
							{
								"kind": "constructor",
								"line": 7604,
								"endchar": 5,
								"char": 5,
								"type": "pure nothrow @safe (R* range)",
								"parameters": [
									{
										"type": "R*",
										"name": "range"
									}
								],
								"name": "this",
								"comment": "\n",
								"endline": 7607
							},
							{
								"kind": "function",
								"line": 7619,
								"storageClass": [
									"auto"
								],
								"endchar": 5,
								"char": 10,
								"type": "(RefRange rhs)",
								"parameters": [
									{
										"type": "RefRange",
										"name": "rhs"
									}
								],
								"name": "opAssign",
								"comment": "        This does not assign the pointer of $(D rhs) to this $(D RefRange).\n        Rather it assigns the range pointed to by $(D rhs) to the range pointed\n        to by this $(D RefRange). This is because $(I any) operation on a\n        $(D RefRange) is the same is if it occurred to the original range. The\n        one exception is when a $(D RefRange) is assigned $(D null) either\n        directly or because $(D rhs) is $(D null). In that case, $(D RefRange)\n        no longer refers to the original range but is $(D null).\n",
								"endline": 7627
							},
							{
								"kind": "function",
								"line": 7630,
								"storageClass": [
									"auto"
								],
								"endchar": 5,
								"char": 10,
								"type": "(typeof(null) rhs)",
								"parameters": [
									{
										"type": "typeof(null)",
										"name": "rhs"
									}
								],
								"name": "opAssign",
								"comment": "\n",
								"endline": 7633
							},
							{
								"kind": "function",
								"line": 7639,
								"endchar": 5,
								"char": 25,
								"type": "inout pure nothrow @property @safe inout(R*)()",
								"name": "ptr",
								"comment": "        A pointer to the wrapped range.\n",
								"endline": 7642
							},
							{
								"kind": "function",
								"line": 7695,
								"endchar": 5,
								"char": 10,
								"type": "void()",
								"name": "popFront",
								"comment": "\n",
								"endline": 7698
							}
						],
						"char": 1,
						"name": "RefRange"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"comment": "    Wrapper which effectively makes it possible to pass a range by reference.\n    Both the original range and the RefRange will always have the exact same\n    elements. Any operation done on one will affect the other. So, for instance,\n    if it's passed to a function which would implicitly copy the original range\n    if it were passed to it, the original range is $(I not) copied but is\n    consumed as if it were a reference type.\n\n    Note that $(D save) works as normal and operates on a new range, so if\n    $(D save) is ever called on the RefRange, then no operations on the saved\n    range will affect the original.\n\nExample:\nBasic Example\n---\nimport std.algorithm;\nubyte[] buffer = [1, 9, 45, 12, 22];\nauto found1 = find(buffer, 45);\nassert(found1 == [45, 12, 22]);\nassert(buffer == [1, 9, 45, 12, 22]);\n\nauto wrapped1 = refRange(&buffer);\nauto found2 = find(wrapped1, 45);\nassert(*found2.ptr == [45, 12, 22]);\nassert(buffer == [45, 12, 22]);\n\nauto found3 = find(wrapped1.save, 22);\nassert(*found3.ptr == [22]);\nassert(buffer == [45, 12, 22]);\n\nstring str = \"hello world\";\nauto wrappedStr = refRange(&str);\nassert(str.front == 'h');\nstr.popFrontN(5);\nassert(str == \" world\");\nassert(wrappedStr.front == ' ');\nassert(*wrappedStr.ptr == \" world\");\n\n---\nExample:\nopAssign Example.\n---\nubyte[] buffer1 = [1, 2, 3, 4, 5];\nubyte[] buffer2 = [6, 7, 8, 9, 10];\nauto wrapped1 = refRange(&buffer1);\nauto wrapped2 = refRange(&buffer2);\nassert(wrapped1.ptr is &buffer1);\nassert(wrapped2.ptr is &buffer2);\nassert(wrapped1.ptr !is wrapped2.ptr);\nassert(buffer1 != buffer2);\n\nwrapped1 = wrapped2;\n\n//Everything points to the same stuff as before.\nassert(wrapped1.ptr is &buffer1);\nassert(wrapped2.ptr is &buffer2);\nassert(wrapped1.ptr !is wrapped2.ptr);\n\n//But buffer1 has changed due to the assignment.\nassert(buffer1 == [6, 7, 8, 9, 10]);\nassert(buffer2 == [6, 7, 8, 9, 10]);\n\nbuffer2 = [11, 12, 13, 14, 15];\n\n//Everything points to the same stuff as before.\nassert(wrapped1.ptr is &buffer1);\nassert(wrapped2.ptr is &buffer2);\nassert(wrapped1.ptr !is wrapped2.ptr);\n\n//But buffer2 has changed due to the assignment.\nassert(buffer1 == [6, 7, 8, 9, 10]);\nassert(buffer2 == [11, 12, 13, 14, 15]);\n\nwrapped2 = null;\n\n//The pointer changed for wrapped2 but not wrapped1.\nassert(wrapped1.ptr is &buffer1);\nassert(wrapped2.ptr is null);\nassert(wrapped1.ptr !is wrapped2.ptr);\n\n//buffer2 is not affected by the assignment.\nassert(buffer1 == [6, 7, 8, 9, 10]);\nassert(buffer2 == [11, 12, 13, 14, 15]);\n\n---\n",
				"name": "RefRange"
			},
			{
				"kind": "template",
				"line": 8275,
				"constraint": "isForwardRange!R && !is(R == class)",
				"members": [
					{
						"kind": "function",
						"line": 8275,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "(R* range)",
						"parameters": [
							{
								"type": "R*",
								"name": "range"
							}
						],
						"name": "refRange",
						"endline": 8279
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"comment": "    Helper function for constructing a $(LREF RefRange).\n\n    If the given range is not a forward range or it is a class type (and thus is\n    already a reference type), then the original range is returned rather than\n    a $(LREF RefRange).\nExample:\n\n---\nimport std.algorithm : map, joiner, group, until;\n// fix for std.algorithm\nauto r = map!(x => 0)([1]);\nchain(r, r);\nzip(r, r);\nroundRobin(r, r);\n\nstruct NRAR {\n    typeof(r) input;\n    @property empty() { return input.empty; }\n    @property front() { return input.front; }\n    void popFront()   { input.popFront(); }\n    @property save()  { return NRAR(input.save); }\n}\nauto n1 = NRAR(r);\ncycle(n1);  // non random access range version\n\nassumeSorted(r);\n\n// fix for std.range\njoiner([r], [9]);\n\nstruct NRAR2 {\n    NRAR input;\n    @property empty() { return true; }\n    @property front() { return input; }\n    void popFront() { }\n    @property save()  { return NRAR2(input.save); }\n}\nauto n2 = NRAR2(n1);\njoiner(n2);\n\ngroup(r);\n\nuntil(r, 7);\nstatic void foo(R)(R r) { until!(x => x > 7)(r); }\nfoo(r);\n\n---\n",
				"name": "refRange"
			},
			{
				"kind": "struct",
				"line": 8335,
				"members": [],
				"char": 1,
				"name": "NullSink",
				"comment": " An OutputRange that discards the data it receives.\n"
			},
			{
				"kind": "template",
				"line": 8364,
				"constraint": "isInputRange!R1 && isOutputRange!(R2, ElementType!R1)",
				"members": [
					{
						"kind": "function",
						"line": 8364,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "(R1 inputRange, R2 outputRange)",
						"parameters": [
							{
								"type": "R1",
								"name": "inputRange"
							},
							{
								"type": "R2",
								"name": "outputRange"
							}
						],
						"name": "tee",
						"endline": 8422
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "value",
						"defaultValue": "Yes.pipeOnPop",
						"deco": "E3std8typecons34__T4FlagVAyaa9_706970654f6e506f70Z4Flag",
						"name": "pipeOnPop"
					},
					{
						"kind": "type",
						"name": "R1"
					},
					{
						"kind": "type",
						"name": "R2"
					}
				],
				"comment": "  Implements a \"tee\" style pipe, wrapping an input range so that elements\n  of the range can be passed to a provided function or $(LREF OutputRange)\n  as they are iterated over. This is useful for printing out intermediate\n  values in a long chain of range code, performing some operation with\n  side-effects on each call to $(D front) or $(D popFront), or diverting\n  the elements of a range into an auxiliary $(LREF OutputRange).\n\n  It is important to note that as the resultant range is evaluated lazily,\n  in the case of the version of $(D tee) that takes a function, the function\n  will not actually be executed until the range is \"walked\" using functions\n  that evaluate ranges, such as $(XREF array,array) or\n  $(XREF algorithm,reduce).\n\n  See_Also: $(XREF argorithm,each)\n",
				"name": "tee"
			},
			{
				"kind": "template",
				"line": 8427,
				"constraint": "is(typeof(fun) == void) || isSomeFunction!fun",
				"members": [
					{
						"kind": "function",
						"line": 8427,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "(R1 inputRange)",
						"parameters": [
							{
								"type": "R1",
								"name": "inputRange"
							}
						],
						"name": "tee",
						"endline": 8450
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "alias",
						"name": "fun"
					},
					{
						"kind": "value",
						"defaultValue": "Yes.pipeOnPop",
						"deco": "E3std8typecons34__T4FlagVAyaa9_706970654f6e506f70Z4Flag",
						"name": "pipeOnPop"
					},
					{
						"kind": "type",
						"name": "R1"
					}
				],
				"comment": "  Overload for taking a function or template lambda as an $(LREF OutputRange)\n",
				"name": "tee"
			}
		],
		"name": "std.range",
		"comment": "This module defines the notion of a range. Ranges generalize the concept of\narrays, lists, or anything that involves sequential access. This abstraction\nenables the same set of algorithms (see $(LINK2 std_algorithm.html,\nstd.algorithm)) to be used with a vast variety of different concrete types. For\nexample, a linear search algorithm such as $(LINK2 std_algorithm.html#find,\nstd.algorithm.find) works not just for arrays, but for linked-lists, input\nfiles, incoming network data, etc.\n\nFor more detailed information about the conceptual aspect of ranges and the\nmotivation behind them, see Andrei Alexandrescu's article\n$(LINK2 http://www.informit.com/articles/printerfriendly.aspx?p=1407357&rll=1,\n$(I On Iteration)).\n\nSubmodules:\n\nThis module has two submodules:\n\n$(LIST\n$(DIV ,\nThe $(LINK2 std_range_primitives.html, $(D std._range.primitives)) submodule\nprovides basic _range functionality. It defines several templates for testing\nwhether a given object is a _range, what kind of _range it is, and provides\nsome common _range operations.\n),\n$(DIV ,\nThe $(LINK2 std_range_interfaces.html, $(D std._range.interfaces)) submodule\nprovides object-based interfaces for working with ranges via runtime\npolymorphism.\n))\n\nThe remainder of this module provides a rich set of _range creation and\ncomposition templates that let you construct new ranges out of existing ranges:\n\n$(BOOKTABLE ,\n    $(TR $(TD $(D $(LREF chain)))\n        $(TD Concatenates several ranges into a single _range.\n    ))\n    $(TR $(TD $(D $(LREF chunks)))\n        $(TD Creates a _range that returns fixed-size chunks of the original\n        _range.\n    ))\n    $(TR $(TD $(D $(LREF cycle)))\n        $(TD Creates an infinite _range that repeats the given forward _range\n        indefinitely. Good for implementing circular buffers.\n    ))\n    $(TR $(TD $(D $(LREF drop)))\n        $(TD Creates the _range that results from discarding the first $(I n)\n        elements from the given _range.\n    ))\n    $(TR $(TD $(D $(LREF dropExactly)))\n        $(TD Creates the _range that results from discarding exactly $(I n)\n        of the first elements from the given _range.\n    ))\n    $(TR $(TD $(D $(LREF dropOne)))\n        $(TD Creates the _range that results from discarding\n        the first elements from the given _range.\n    ))\n    $(TR $(TD $(D $(LREF enumerate)))\n        $(TD Iterates a _range with an attached index variable.\n    ))\n    $(TR $(TD $(D $(LREF frontTransversal)))\n        $(TD Creates a _range that iterates over the first elements of the\n        given ranges.\n    ))\n    $(TR $(TD $(D $(LREF indexed)))\n        $(TD Creates a _range that offers a view of a given _range as though\n        its elements were reordered according to a given _range of indices.\n    ))\n    $(TR $(TD $(D $(LREF iota)))\n        $(TD Creates a _range consisting of numbers between a starting point\n        and ending point, spaced apart by a given interval.\n    ))\n    $(TR $(TD $(D $(LREF lockstep)))\n        $(TD Iterates $(I n) _ranges in lockstep, for use in a $(D foreach)\n        loop. Similar to $(D zip), except that $(D lockstep) is designed\n        especially for $(D foreach) loops.\n    ))\n    $(TR $(TD $(D $(LREF NullSink)))\n        $(TD An output _range that discards the data it receives.\n    ))\n    $(TR $(TD $(D $(LREF only)))\n        $(TD Creates a _range that iterates over the given arguments.\n    ))\n    $(TR $(TD $(D $(LREF radial)))\n        $(TD Given a random-access _range and a starting point, creates a\n        _range that alternately returns the next left and next right element to\n        the starting point.\n    ))\n    $(TR $(TD $(D $(LREF recurrence)))\n        $(TD Creates a forward _range whose values are defined by a\n        mathematical recurrence relation.\n    ))\n    $(TR $(TD $(D $(LREF repeat)))\n        $(TD Creates a _range that consists of a single element repeated $(I n)\n        times, or an infinite _range repeating that element indefinitely.\n    ))\n    $(TR $(TD $(D $(LREF retro)))\n        $(TD Iterates a bidirectional _range backwards.\n    ))\n    $(TR $(TD $(D $(LREF roundRobin)))\n        $(TD Given $(I n) ranges, creates a new _range that return the $(I n)\n        first elements of each _range, in turn, then the second element of each\n        _range, and so on, in a round-robin fashion.\n    ))\n    $(TR $(TD $(D $(LREF sequence)))\n        $(TD Similar to $(D recurrence), except that a random-access _range is\n        created.\n    ))\n    $(TR $(TD $(D $(LREF stride)))\n        $(TD Iterates a _range with stride $(I n).\n    ))\n    $(TR $(TD $(D $(LREF take)))\n        $(TD Creates a sub-_range consisting of only up to the first $(I n)\n        elements of the given _range.\n    ))\n    $(TR $(TD $(D $(LREF takeExactly)))\n        $(TD Like $(D take), but assumes the given _range actually has $(I n)\n        elements, and therefore also defines the $(D length) property.\n    ))\n    $(TR $(TD $(D $(LREF takeNone)))\n        $(TD Creates a random-access _range consisting of zero elements of the\n        given _range.\n    ))\n    $(TR $(TD $(D $(LREF takeOne)))\n        $(TD Creates a random-access _range consisting of exactly the first\n        element of the given _range.\n    ))\n    $(TR $(TD $(D $(LREF tee)))\n        $(TD Creates a _range that wraps a given _range, forwarding along\n        its elements while also calling a provided function with each element.\n    ))\n    $(TR $(TD $(D $(LREF transposed)))\n        $(TD Transposes a _range of ranges.\n    ))\n    $(TR $(TD $(D $(LREF transversal)))\n        $(TD Creates a _range that iterates over the $(I n)'th elements of the\n        given random-access ranges.\n    ))\n    $(TR $(TD $(D $(LREF zip)))\n        $(TD Given $(I n) _ranges, creates a _range that successively returns a\n        tuple of all the first elements, a tuple of all the second elements,\n        etc.\n    ))\n)\n\nRanges whose elements are sorted afford better efficiency with certain\noperations. For this, the $(D $(LREF assumeSorted)) function can be used to\nconstruct a $(D $(LREF SortedRange)) from a pre-sorted _range. The $(LINK2\nstd_algorithm.html#sort, $(D std.algorithm.sort)) function also conveniently\nreturns a $(D SortedRange). $(D SortedRange) objects provide some additional\n_range operations that take advantage of the fact that the _range is sorted.\n\nSource: $(PHOBOSSRC std/_range/_package.d)\n\nMacros:\n\nWIKI = Phobos/StdRange\n\nCopyright: Copyright by authors 2008-.\n\nLicense: $(WEB boost.org/LICENSE_1_0.txt, Boost License 1.0).\n\nAuthors: $(WEB erdani.com, Andrei Alexandrescu), David Simcha,\nand Jonathan M Davis. Credit for some of the ideas in building this module goes\nto $(WEB fantascienza.net/leonardo/so/, Leonardo Maffi).\n"
	},
	{
		"kind": "module",
		"file": "../phobos/std/range/primitives.d",
		"members": [
			{
				"kind": "template",
				"line": 149,
				"members": [
					{
						"kind": "variable",
						"line": 151,
						"init": "is(typeof((inout int = 0)\n{\nR r = R.init;\nif (r.empty)\n{\n}\nr.popFront();\nauto h = r.front;\n}\n))",
						"storageClass": [
							"enum"
						],
						"deco": "b",
						"char": 15,
						"name": "isInputRange"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"comment": "Returns $(D true) if $(D R) is an input range. An input range must\ndefine the primitives $(D empty), $(D popFront), and $(D front). The\nfollowing code should compile for any input range.\n\n----\nR r;              // can define a range object\nif (r.empty) {}   // can test for empty\nr.popFront();     // can invoke popFront()\nauto h = r.front; // can get the front of the range of non-void type\n----\n\nThe semantics of an input range (not checkable during compilation) are\nassumed to be the following ($(D r) is an object of type $(D R)):\n\n$(UL $(LI $(D r.empty) returns $(D false) iff there is more data\navailable in the range.)  $(LI $(D r.front) returns the current\nelement in the range. It may return by value or by reference. Calling\n$(D r.front) is allowed only if calling $(D r.empty) has, or would\nhave, returned $(D false).) $(LI $(D r.popFront) advances to the next\nelement in the range. Calling $(D r.popFront) is allowed only if\ncalling $(D r.empty) has, or would have, returned $(D false).))\n\nParams:\n    R = type to be tested\n\nReturns:\n    true if R is an InputRange, false if not\nExample:\n\n---\nstruct A {}\nstruct B\n{\n    void popFront();\n    @property bool empty();\n    @property int front();\n}\nstatic assert(!isInputRange!A);\nstatic assert( isInputRange!B);\nstatic assert( isInputRange!(int[]));\nstatic assert( isInputRange!(char[]));\nstatic assert(!isInputRange!(char[4]));\nstatic assert( isInputRange!(inout(int)[]));\n\n---\n",
				"name": "isInputRange"
			},
			{
				"kind": "template",
				"line": 284,
				"members": [
					{
						"kind": "function",
						"line": 284,
						"endchar": 1,
						"char": 6,
						"type": "void(ref R r, E e)",
						"parameters": [
							{
								"storageClass": [
									"ref"
								],
								"type": "R",
								"name": "r"
							},
							{
								"type": "E",
								"name": "e"
							}
						],
						"name": "put",
						"endline": 337
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					},
					{
						"kind": "type",
						"name": "E"
					}
				],
				"comment": "Outputs $(D e) to $(D r). The exact effect is dependent upon the two\ntypes. Several cases are accepted, as described below. The code snippets\nare attempted in order, and the first to compile \"wins\" and gets\nevaluated.\n\nIn this table \"doPut\" is a method that places $(D e) into $(D r), using the\ncorrect primitive: $(D r.put(e)) if $(D R) defines $(D put), $(D r.front = e)\nif $(D r) is an input range (followed by $(D r.popFront())), or $(D r(e))\notherwise.\n\n$(BOOKTABLE ,\n    $(TR\n        $(TH Code Snippet)\n        $(TH Scenario)\n    )\n    $(TR\n        $(TD $(D r.doPut(e);))\n        $(TD $(D R) specifically accepts an $(D E).)\n    )\n    $(TR\n        $(TD $(D r.doPut([ e ]);))\n        $(TD $(D R) specifically accepts an $(D E[]).)\n    )\n    $(TR\n        $(TD $(D r.putChar(e);))\n        $(TD $(D R) accepts some form of string or character. put will\n            transcode the character $(D e) accordingly.)\n    )\n    $(TR\n        $(TD $(D for (; !e.empty; e.popFront()) put(r, e.front);))\n        $(TD Copying range $(D E) into $(D R).)\n    )\n)\n\nTip: $(D put) should $(I not) be used \"UFCS-style\", e.g. $(D r.put(e)).\nDoing this may call $(D R.put) directly, by-passing any transformation\nfeature provided by $(D Range.put). $(D put(r, e)) is prefered.\nExample:\n\n---\nint[] r = new int[](4);\nstatic assert(isInputRange!(int[]));\nstatic assert( isNativeOutputRange!(int[], int));\nstatic assert(!isNativeOutputRange!(int[], int[]));\nstatic assert( isOutputRange!(int[], int[]));\n\nif (!r.empty)\n    put(r, 1); //guaranteed to succeed\nif (!r.empty)\n    put(r, [1, 2]); //May actually error out.\n\n---\n",
				"name": "put"
			},
			{
				"kind": "template",
				"line": 704,
				"members": [
					{
						"kind": "variable",
						"line": 706,
						"init": "is(typeof((inout int = 0)\n{\nR r = R.init;\nE e = E.init;\nput(r, e);\n}\n))",
						"storageClass": [
							"enum"
						],
						"deco": "b",
						"char": 15,
						"name": "isOutputRange"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					},
					{
						"kind": "type",
						"name": "E"
					}
				],
				"comment": "Returns $(D true) if $(D R) is an output range for elements of type\n$(D E). An output range is defined functionally as a range that\nsupports the operation $(D put(r, e)) as defined above.\nExample:\n\n---\nvoid myprint(in char[] s) { }\nstatic assert(isOutputRange!(typeof(&myprint), char));\n\nstatic assert(!isOutputRange!(char[], char));\nstatic assert( isOutputRange!(dchar[], wchar));\nstatic assert( isOutputRange!(dchar[], dchar));\n\n---\n",
				"name": "isOutputRange"
			},
			{
				"kind": "template",
				"line": 774,
				"members": [
					{
						"kind": "variable",
						"line": 776,
						"init": "isInputRange!R && is(typeof((inout int = 0)\n{\nR r1 = R.init;\nstatic assert(is(typeof(r1.save) == R));\n}\n))",
						"storageClass": [
							"enum"
						],
						"deco": "b",
						"char": 15,
						"name": "isForwardRange"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"comment": "Returns $(D true) if $(D R) is a forward range. A forward range is an\ninput range $(D r) that can save \"checkpoints\" by saving $(D r.save)\nto another value of type $(D R). Notable examples of input ranges that\nare $(I not) forward ranges are file/socket ranges; copying such a\nrange will not save the position in the stream, and they most likely\nreuse an internal buffer as the entire stream does not sit in\nmemory. Subsequently, advancing either the original or the copy will\nadvance the stream, so the copies are not independent.\n\nThe following code should compile for any forward range.\n\n----\nstatic assert(isInputRange!R);\nR r1;\nstatic assert (is(typeof(r1.save) == R));\n----\n\nSaving a range is not duplicating it; in the example above, $(D r1)\nand $(D r2) still refer to the same underlying data. They just\nnavigate that data independently.\n\nThe semantics of a forward range (not checkable during compilation)\nare the same as for an input range, with the additional requirement\nthat backtracking must be possible by saving a copy of the range\nobject with $(D save) and using it later.\nExample:\n\n---\nstatic assert(!isForwardRange!(int));\nstatic assert( isForwardRange!(int[]));\nstatic assert( isForwardRange!(inout(int)[]));\n\n---\n",
				"name": "isForwardRange"
			},
			{
				"kind": "template",
				"line": 806,
				"members": [
					{
						"kind": "variable",
						"line": 808,
						"init": "isForwardRange!R && is(typeof((inout int = 0)\n{\nR r = R.init;\nr.popBack();\nauto t = r.back;\nauto w = r.front;\nstatic assert(is(typeof(t) == typeof(w)));\n}\n))",
						"storageClass": [
							"enum"
						],
						"deco": "b",
						"char": 15,
						"name": "isBidirectionalRange"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"comment": "Returns $(D true) if $(D R) is a bidirectional range. A bidirectional\nrange is a forward range that also offers the primitives $(D back) and\n$(D popBack). The following code should compile for any bidirectional\nrange.\n\nThe semantics of a bidirectional range (not checkable during\ncompilation) are assumed to be the following ($(D r) is an object of\ntype $(D R)):\n\n$(UL $(LI $(D r.back) returns (possibly a reference to) the last\nelement in the range. Calling $(D r.back) is allowed only if calling\n$(D r.empty) has, or would have, returned $(D false).))\nExample:\n\n---\nalias R = int[];\nR r = [0,1];\nstatic assert(isForwardRange!R);           // is forward range\nr.popBack();                               // can invoke popBack\nauto t = r.back;                           // can get the back of the range\nauto w = r.front;\nstatic assert(is(typeof(t) == typeof(w))); // same type for front and back\n\n---\n",
				"name": "isBidirectionalRange"
			},
			{
				"kind": "template",
				"line": 876,
				"members": [
					{
						"kind": "variable",
						"line": 878,
						"init": "is(typeof((inout int = 0)\n{\nstatic assert(isBidirectionalRange!R || isForwardRange!R && isInfinite!R);\nR r = R.init;\nauto e = r[1];\nstatic assert(is(typeof(e) == typeof(r.front)));\nstatic assert(!isNarrowString!R);\nstatic assert(hasLength!R || isInfinite!R);\nstatic if (is(typeof(r[__dollar])))\n{\nstatic assert(is(typeof(r.front) == typeof(r[__dollar])));\nstatic if (!isInfinite!R)\n{\nstatic assert(is(typeof(r.front) == typeof(r[__dollar - 1])));\n}\n\n}\n\n}\n))",
						"storageClass": [
							"enum"
						],
						"deco": "b",
						"char": 15,
						"name": "isRandomAccessRange"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"comment": "Returns $(D true) if $(D R) is a random-access range. A random-access\nrange is a bidirectional range that also offers the primitive $(D\nopIndex), OR an infinite forward range that offers $(D opIndex). In\neither case, the range must either offer $(D length) or be\ninfinite. The following code should compile for any random-access\nrange.\n\nThe semantics of a random-access range (not checkable during\ncompilation) are assumed to be the following ($(D r) is an object of\ntype $(D R)): $(UL $(LI $(D r.opIndex(n)) returns a reference to the\n$(D n)th element in the range.))\n\nAlthough $(D char[]) and $(D wchar[]) (as well as their qualified\nversions including $(D string) and $(D wstring)) are arrays, $(D\nisRandomAccessRange) yields $(D false) for them because they use\nvariable-length encodings (UTF-8 and UTF-16 respectively). These types\nare bidirectional ranges only.\nExample:\n\n---\nalias R = int[];\n\n// range is finite and bidirectional or infinite and forward.\nstatic assert(isBidirectionalRange!R ||\n              isForwardRange!R && isInfinite!R);\n\nR r = [0,1];\nauto e = r[1]; // can index\nstatic assert(is(typeof(e) == typeof(r.front))); // same type for indexed and front\nstatic assert(!isNarrowString!R); // narrow strings cannot be indexed as ranges\nstatic assert(hasLength!R || isInfinite!R); // must have length or be infinite\n\n// $ must work as it does with arrays if opIndex works with $\nstatic if(is(typeof(r[$])))\n{\n    static assert(is(typeof(r.front) == typeof(r[$])));\n\n    // $ - 1 doesn't make sense with infinite ranges but needs to work\n    // with finite ones.\n    static if(!isInfinite!R)\n        static assert(is(typeof(r.front) == typeof(r[$ - 1])));\n}\n\n---\n",
				"name": "isRandomAccessRange"
			},
			{
				"kind": "template",
				"line": 1012,
				"members": [
					{
						"kind": "variable",
						"line": 1014,
						"init": "isInputRange!R && is(typeof((inout int = 0)\n{\nalias E = ElementType!R;\nR r = R.init;\nstatic assert(is(typeof(moveFront(r)) == E));\nstatic if (isBidirectionalRange!R)\n{\nstatic assert(is(typeof(moveBack(r)) == E));\n}\n\nstatic if (isRandomAccessRange!R)\n{\nstatic assert(is(typeof(moveAt(r, 0)) == E));\n}\n\n}\n))",
						"storageClass": [
							"enum"
						],
						"deco": "b",
						"char": 15,
						"name": "hasMobileElements"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"comment": "Returns $(D true) iff $(D R) is an input range that supports the\n$(D moveFront) primitive, as well as $(D moveBack) and $(D moveAt) if it's a\nbidirectional or random access range. These may be explicitly implemented, or\nmay work via the default behavior of the module level functions $(D moveFront)\nand friends. The following code should compile for any range\nwith mobile elements.\n\n----\nalias E = ElementType!R;\nR r;\nstatic assert(isInputRange!R);\nstatic assert(is(typeof(moveFront(r)) == E));\nstatic if (isBidirectionalRange!R)\n    static assert(is(typeof(moveBack(r)) == E));\nstatic if (isRandomAccessRange!R)\n    static assert(is(typeof(moveAt(r, 0)) == E));\n----\nExample:\n\n---\nimport std.algorithm : map;\nimport std.range : iota, repeat;\n\nstatic struct HasPostblit\n{\n    this(this) {}\n}\n\nauto nonMobile = map!\"a\"(repeat(HasPostblit.init));\nstatic assert(!hasMobileElements!(typeof(nonMobile)));\nstatic assert( hasMobileElements!(int[]));\nstatic assert( hasMobileElements!(inout(int)[]));\nstatic assert( hasMobileElements!(typeof(iota(1000))));\n\nstatic assert( hasMobileElements!( string));\nstatic assert( hasMobileElements!(dstring));\nstatic assert( hasMobileElements!( char[]));\nstatic assert( hasMobileElements!(dchar[]));\n\n---\n",
				"name": "hasMobileElements"
			},
			{
				"kind": "template",
				"line": 1058,
				"members": [],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"comment": "The element type of $(D R). $(D R) does not have to be a range. The\nelement type is determined as the type yielded by $(D r.front) for an\nobject $(D r) of type $(D R). For example, $(D ElementType!(T[])) is\n$(D T) if $(D T[]) isn't a narrow string; if it is, the element type is\n$(D dchar). If $(D R) doesn't have $(D front), $(D ElementType!R) is\n$(D void).\nExample:\n\n---\nimport std.range : iota;\n\n// Standard arrays: returns the type of the elements of the array\nstatic assert(is(ElementType!(int[]) == int));\n\n// Accessing .front retrieves the decoded dchar\nstatic assert(is(ElementType!(char[])  == dchar)); // rvalue\nstatic assert(is(ElementType!(dchar[]) == dchar)); // lvalue\n\n// Ditto\nstatic assert(is(ElementType!(string) == dchar));\nstatic assert(is(ElementType!(dstring) == immutable(dchar)));\n\n// For ranges it gets the type of .front.\nauto range = iota(0, 10);\nstatic assert(is(ElementType!(typeof(range)) == int));\n\n---\n",
				"name": "ElementType"
			},
			{
				"kind": "template",
				"line": 1144,
				"members": [],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"comment": "The encoding element type of $(D R). For narrow strings ($(D char[]),\n$(D wchar[]) and their qualified variants including $(D string) and\n$(D wstring)), $(D ElementEncodingType) is the character type of the\nstring. For all other types, $(D ElementEncodingType) is the same as\n$(D ElementType).\nExample:\n\n---\nimport std.range : iota;\n// internally the range stores the encoded type\nstatic assert(is(ElementEncodingType!(char[])  == char));\n\nstatic assert(is(ElementEncodingType!(wstring) == immutable(wchar)));\n\nstatic assert(is(ElementEncodingType!(byte[]) == byte));\n\nauto range = iota(0, 10);\nstatic assert(is(ElementEncodingType!(typeof(range)) == int));\n\n---\n",
				"name": "ElementEncodingType"
			},
			{
				"kind": "template",
				"line": 1215,
				"members": [
					{
						"kind": "variable",
						"line": 1218,
						"init": "isInputRange!R && is(typeof((inout int = 0)\n{\nR r = R.init;\nswap(r.front, r.front);\nstatic if (isBidirectionalRange!R)\n{\nswap(r.back, r.front);\n}\n\nstatic if (isRandomAccessRange!R)\n{\nswap(r[0], r.front);\n}\n\n}\n))",
						"storageClass": [
							"enum"
						],
						"deco": "b",
						"char": 15,
						"name": "hasSwappableElements"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"comment": "Returns $(D true) if $(D R) is an input range and has swappable\nelements. The following code should compile for any range\nwith swappable elements.\n\n----\nR r;\nstatic assert(isInputRange!R);\nswap(r.front, r.front);\nstatic if (isBidirectionalRange!R) swap(r.back, r.front);\nstatic if (isRandomAccessRange!R) swap(r[], r.front);\n----\nExample:\n\n---\nstatic assert(!hasSwappableElements!(const int[]));\nstatic assert(!hasSwappableElements!(const(int)[]));\nstatic assert(!hasSwappableElements!(inout(int)[]));\nstatic assert( hasSwappableElements!(int[]));\n\nstatic assert(!hasSwappableElements!( string));\nstatic assert(!hasSwappableElements!(dstring));\nstatic assert(!hasSwappableElements!( char[]));\nstatic assert( hasSwappableElements!(dchar[]));\n\n---\n",
				"name": "hasSwappableElements"
			},
			{
				"kind": "template",
				"line": 1255,
				"members": [
					{
						"kind": "variable",
						"line": 1257,
						"init": "isInputRange!R && is(typeof((inout int = 0)\n{\nR r = R.init;\nr.front = r.front;\nstatic if (isBidirectionalRange!R)\n{\nr.back = r.front;\n}\n\nstatic if (isRandomAccessRange!R)\n{\nr[0] = r.front;\n}\n\n}\n))",
						"storageClass": [
							"enum"
						],
						"deco": "b",
						"char": 15,
						"name": "hasAssignableElements"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"comment": "Returns $(D true) if $(D R) is an input range and has mutable\nelements. The following code should compile for any range\nwith assignable elements.\n\n----\nR r;\nstatic assert(isInputRange!R);\nr.front = r.front;\nstatic if (isBidirectionalRange!R) r.back = r.front;\nstatic if (isRandomAccessRange!R) r[0] = r.front;\n----\nExample:\n\n---\nstatic assert(!hasAssignableElements!(const int[]));\nstatic assert(!hasAssignableElements!(const(int)[]));\nstatic assert( hasAssignableElements!(int[]));\nstatic assert(!hasAssignableElements!(inout(int)[]));\n\nstatic assert(!hasAssignableElements!( string));\nstatic assert(!hasAssignableElements!(dstring));\nstatic assert(!hasAssignableElements!( char[]));\nstatic assert( hasAssignableElements!(dchar[]));\n\n---\n",
				"name": "hasAssignableElements"
			},
			{
				"kind": "template",
				"line": 1294,
				"members": [
					{
						"kind": "variable",
						"line": 1296,
						"init": "isInputRange!R && is(typeof((inout int = 0)\n{\nvoid checkRef(ref ElementType!R stuff);\nR r = R.init;\ncheckRef(r.front);\nstatic if (isBidirectionalRange!R)\n{\ncheckRef(r.back);\n}\n\nstatic if (isRandomAccessRange!R)\n{\ncheckRef(r[0]);\n}\n\n}\n))",
						"storageClass": [
							"enum"
						],
						"deco": "b",
						"char": 15,
						"name": "hasLvalueElements"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"comment": "Tests whether the range $(D R) has lvalue elements. These are defined as\nelements that can be passed by reference and have their address taken.\nThe following code should compile for any range with lvalue elements.\n----\nvoid passByRef(ref ElementType!R stuff);\n...\nstatic assert(isInputRange!R);\npassByRef(r.front);\nstatic if (isBidirectionalRange!R) passByRef(r.back);\nstatic if (isRandomAccessRange!R) passByRef(r[0]);\n----\nExample:\n\n---\nimport std.range : iota, chain;\n\nstatic assert( hasLvalueElements!(int[]));\nstatic assert( hasLvalueElements!(const(int)[]));\nstatic assert( hasLvalueElements!(inout(int)[]));\nstatic assert( hasLvalueElements!(immutable(int)[]));\nstatic assert(!hasLvalueElements!(typeof(iota(3))));\n\nstatic assert(!hasLvalueElements!( string));\nstatic assert( hasLvalueElements!(dstring));\nstatic assert(!hasLvalueElements!( char[]));\nstatic assert( hasLvalueElements!(dchar[]));\n\nauto c = chain([1, 2, 3], [4, 5, 6]);\nstatic assert( hasLvalueElements!(typeof(c)));\n\n---\n",
				"name": "hasLvalueElements"
			},
			{
				"kind": "template",
				"line": 1351,
				"members": [
					{
						"kind": "variable",
						"line": 1353,
						"init": "!isNarrowString!R && is(typeof((inout int = 0)\n{\nR r = R.init;\nstatic assert(is(typeof(r.length) : ulong));\n}\n))",
						"storageClass": [
							"enum"
						],
						"deco": "b",
						"char": 15,
						"name": "hasLength"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"comment": "Returns $(D true) if $(D R) has a $(D length) member that returns an\nintegral type. $(D R) does not have to be a range. Note that $(D\nlength) is an optional primitive as no range must implement it. Some\nranges do not store their length explicitly, some cannot compute it\nwithout actually exhausting the range (e.g. socket streams), and some\nother ranges may be infinite.\n\nAlthough narrow string types ($(D char[]), $(D wchar[]), and their\nqualified derivatives) do define a $(D length) property, $(D\nhasLength) yields $(D false) for them. This is because a narrow\nstring's length does not reflect the number of characters, but instead\nthe number of encoding units, and as such is not useful with\nrange-oriented algorithms.\nExample:\n\n---\nstatic assert(!hasLength!(char[]));\nstatic assert( hasLength!(int[]));\nstatic assert( hasLength!(inout(int)[]));\n\nstruct A { ulong length; }\nstruct B { size_t length() { return 0; } }\nstruct C { @property size_t length() { return 0; } }\nstatic assert( hasLength!(A));\nstatic assert(!hasLength!(B));\nstatic assert( hasLength!(C));\n}\n\n/**\nReturns $(D true) if $(D R) is an infinite input range. An\ninfinite input range is an input range that has a statically-defined\nenumerated member called $(D empty) that is always $(D false),\nfor example:\n\n----\nstruct MyInfiniteRange\n{\nenum bool empty = false;\n...\n\n---\n",
				"name": "hasLength"
			},
			{
				"kind": "template",
				"line": 1391,
				"members": [],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"comment": "Returns $(D true) if $(D R) is an infinite input range. An\ninfinite input range is an input range that has a statically-defined\nenumerated member called $(D empty) that is always $(D false),\nfor example:\n\n----\nstruct MyInfiniteRange\n{\n    enum bool empty = false;\n    ...\n}\n----\nExample:\n\n---\nimport std.range : Repeat;\nstatic assert(!isInfinite!(int[]));\nstatic assert( isInfinite!(Repeat!(int)));\n}\n\n/**\nReturns $(D true) if $(D R) offers a slicing operator with integral boundaries\nthat returns a forward range type.\n\nFor finite ranges, the result of $(D opSlice) must be of the same type as the\noriginal range type. If the range defines $(D opDollar), then it must support\nsubtraction.\n\nFor infinite ranges, when $(I not) using $(D opDollar), the result of\n$(D opSlice) must be the result of $(LREF take) or $(LREF takeExactly) on the\noriginal range (they both return the same type for infinite ranges). However,\nwhen using $(D opDollar), the result of $(D opSlice) must be that of the\noriginal range type.\n\nThe following code must compile for $(D hasSlicing) to be $(D true):\n\n----\nR r = void;\n\nstatic if(isInfinite!R)\ntypeof(take(r, 1)) s = r[1 .. 2];\nelse\n{\nstatic assert(is(typeof(r[1 .. 2]) == R));\nR s = r[1 .. 2];\n}\n\ns = r[1 .. 2];\n\nstatic if(is(typeof(r[0 .. $])))\n{\nstatic assert(is(typeof(r[0 .. $]) == R));\nR t = r[0 .. $];\nt = r[0 .. $];\n\nstatic if(!isInfinite!R)\n{\n    static assert(is(typeof(r[0 .. $ - 1]) == R));\n    R u = r[0 .. $ - 1];\n    u = r[0 .. $ - 1];\n}\n\n---\n",
				"name": "isInfinite"
			},
			{
				"kind": "template",
				"line": 1454,
				"members": [
					{
						"kind": "variable",
						"line": 1456,
						"init": "isForwardRange!R && !isNarrowString!R && is(typeof((inout int = 0)\n{\nR r = R.init;\nstatic if (isInfinite!R)\n{\ntypeof(r[1..1]) s = r[1..2];\n}\nelse\n{\nstatic assert(is(typeof(r[1..2]) == R));\nR s = r[1..2];\n}\ns = r[1..2];\nstatic if (is(typeof(r[0..__dollar])))\n{\nstatic assert(is(typeof(r[0..__dollar]) == R));\nR t = r[0..__dollar];\nt = r[0..__dollar];\nstatic if (!isInfinite!R)\n{\nstatic assert(is(typeof(r[0..__dollar - 1]) == R));\nR u = r[0..__dollar - 1];\nu = r[0..__dollar - 1];\n}\n\n}\n\nstatic assert(isForwardRange!(typeof(r[1..2])));\nstatic assert(hasLength!(typeof(r[1..2])));\n}\n))",
						"storageClass": [
							"enum"
						],
						"deco": "b",
						"char": 15,
						"name": "hasSlicing"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"comment": "Returns $(D true) if $(D R) offers a slicing operator with integral boundaries\nthat returns a forward range type.\n\nFor finite ranges, the result of $(D opSlice) must be of the same type as the\noriginal range type. If the range defines $(D opDollar), then it must support\nsubtraction.\n\nFor infinite ranges, when $(I not) using $(D opDollar), the result of\n$(D opSlice) must be the result of $(LREF take) or $(LREF takeExactly) on the\noriginal range (they both return the same type for infinite ranges). However,\nwhen using $(D opDollar), the result of $(D opSlice) must be that of the\noriginal range type.\n\nThe following code must compile for $(D hasSlicing) to be $(D true):\n\n----\nR r = void;\n\nstatic if(isInfinite!R)\n    typeof(take(r, 1)) s = r[1 .. 2];\nelse\n{\n    static assert(is(typeof(r[1 .. 2]) == R));\n    R s = r[1 .. 2];\n}\n\ns = r[1 .. 2];\n\nstatic if(is(typeof(r[0 .. $])))\n{\n    static assert(is(typeof(r[0 .. $]) == R));\n    R t = r[0 .. $];\n    t = r[0 .. $];\n\n    static if(!isInfinite!R)\n    {\n        static assert(is(typeof(r[0 .. $ - 1]) == R));\n        R u = r[0 .. $ - 1];\n        u = r[0 .. $ - 1];\n    }\n}\n\nstatic assert(isForwardRange!(typeof(r[1 .. 2])));\nstatic assert(hasLength!(typeof(r[1 .. 2])));\n----\nExample:\n\n---\nimport std.range : takeExactly;\nstatic assert( hasSlicing!(int[]));\nstatic assert( hasSlicing!(const(int)[]));\nstatic assert(!hasSlicing!(const int[]));\nstatic assert( hasSlicing!(inout(int)[]));\nstatic assert(!hasSlicing!(inout int []));\nstatic assert( hasSlicing!(immutable(int)[]));\nstatic assert(!hasSlicing!(immutable int[]));\nstatic assert(!hasSlicing!string);\nstatic assert( hasSlicing!dstring);\n\nenum rangeFuncs = \"@property int front();\" ~\n                  \"void popFront();\" ~\n                  \"@property bool empty();\" ~\n                  \"@property auto save() { return this; }\" ~\n                  \"@property size_t length();\";\n\nstruct A { mixin(rangeFuncs); int opSlice(size_t, size_t); }\nstruct B { mixin(rangeFuncs); B opSlice(size_t, size_t); }\nstruct C { mixin(rangeFuncs); @disable this(); C opSlice(size_t, size_t); }\nstruct D { mixin(rangeFuncs); int[] opSlice(size_t, size_t); }\nstatic assert(!hasSlicing!(A));\nstatic assert( hasSlicing!(B));\nstatic assert( hasSlicing!(C));\nstatic assert(!hasSlicing!(D));\n\nstruct InfOnes\n{\n    enum empty = false;\n    void popFront() {}\n    @property int front() { return 1; }\n    @property InfOnes save() { return this; }\n    auto opSlice(size_t i, size_t j) { return takeExactly(this, j - i); }\n    auto opSlice(size_t i, Dollar d) { return this; }\n\n    struct Dollar {}\n    Dollar opDollar() const { return Dollar.init; }\n}\n\nstatic assert(hasSlicing!InfOnes);\n\n---\n",
				"name": "hasSlicing"
			},
			{
				"kind": "template",
				"line": 1557,
				"constraint": "isInputRange!Range && !isInfinite!Range",
				"members": [
					{
						"kind": "function",
						"line": 1557,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "(Range range)",
						"parameters": [
							{
								"type": "Range",
								"name": "range"
							}
						],
						"name": "walkLength",
						"endline": 1569
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "Range"
					}
				],
				"comment": "This is a best-effort implementation of $(D length) for any kind of\nrange.\n\nIf $(D hasLength!Range), simply returns $(D range.length) without\nchecking $(D upTo) (when specified).\n\nOtherwise, walks the range through its length and returns the number\nof elements seen. Performes $(BIGOH n) evaluations of $(D range.empty)\nand $(D range.popFront()), where $(D n) is the effective length of $(D\nrange).\n\nThe $(D upTo) parameter is useful to \"cut the losses\" in case\nthe interest is in seeing whether the range has at least some number\nof elements. If the parameter $(D upTo) is specified, stops if $(D\nupTo) steps have been taken and returns $(D upTo).\n\nInfinite ranges are compatible, provided the parameter $(D upTo) is\nspecified, in which case the implementation simply returns upTo.\n",
				"name": "walkLength"
			},
			{
				"kind": "template",
				"line": 1571,
				"constraint": "isInputRange!Range",
				"members": [
					{
						"kind": "function",
						"line": 1571,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "(Range range, const size_t upTo)",
						"parameters": [
							{
								"type": "Range",
								"name": "range"
							},
							{
								"storageClass": [
									"const"
								],
								"type": "size_t",
								"name": "upTo"
							}
						],
						"name": "walkLength",
						"endline": 1585
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "Range"
					}
				],
				"comment": "ditto\n",
				"name": "walkLength"
			},
			{
				"kind": "template",
				"line": 1628,
				"constraint": "isInputRange!Range",
				"members": [
					{
						"kind": "function",
						"line": 1628,
						"endchar": 1,
						"char": 8,
						"type": "size_t(ref Range r, size_t n)",
						"parameters": [
							{
								"storageClass": [
									"ref"
								],
								"type": "Range",
								"name": "r"
							},
							{
								"type": "size_t",
								"name": "n"
							}
						],
						"name": "popFrontN",
						"endline": 1661
					}
				],
				"char": 8,
				"parameters": [
					{
						"kind": "type",
						"name": "Range"
					}
				],
				"comment": "    Eagerly advances $(D r) itself (not a copy) up to $(D n) times (by\n    calling $(D r.popFront)). $(D popFrontN) takes $(D r) by $(D ref),\n    so it mutates the original range. Completes in $(BIGOH 1) steps for ranges\n    that support slicing and have length.\n    Completes in $(BIGOH n) time for all other ranges.\n\n    Returns:\n    How much $(D r) was actually advanced, which may be less than $(D n) if\n    $(D r) did not have at least $(D n) elements.\n\n    $(D popBackN) will behave the same but instead removes elements from\n    the back of the (bidirectional) range instead of the front.\nExample:\n\n---\nint[] a = [ 1, 2, 3, 4, 5 ];\na.popFrontN(2);\nassert(a == [ 3, 4, 5 ]);\na.popFrontN(7);\nassert(a == [ ]);\n\n---\nExample:\n\n---\nimport std.algorithm : equal;\nimport std.range : iota;\nauto LL = iota(1L, 7L);\nauto r = popFrontN(LL, 2);\nassert(equal(LL, [3L, 4L, 5L, 6L]));\nassert(r == 2);\n\n---\nExample:\n\n---\nint[] a = [ 1, 2, 3, 4, 5 ];\na.popBackN(2);\nassert(a == [ 1, 2, 3 ]);\na.popBackN(7);\nassert(a == [ ]);\n\n---\nExample:\n\n---\nimport std.algorithm : equal;\nimport std.range : iota;\nauto LL = iota(1L, 7L);\nauto r = popBackN(LL, 2);\nassert(equal(LL, [1L, 2L, 3L, 4L]));\nassert(r == 2);\n\n---\n",
				"name": "popFrontN"
			},
			{
				"kind": "template",
				"line": 1664,
				"constraint": "isBidirectionalRange!Range",
				"members": [
					{
						"kind": "function",
						"line": 1664,
						"endchar": 1,
						"char": 8,
						"type": "size_t(ref Range r, size_t n)",
						"parameters": [
							{
								"storageClass": [
									"ref"
								],
								"type": "Range",
								"name": "r"
							},
							{
								"type": "size_t",
								"name": "n"
							}
						],
						"name": "popBackN",
						"endline": 1697
					}
				],
				"char": 8,
				"parameters": [
					{
						"kind": "type",
						"name": "Range"
					}
				],
				"comment": "ditto\n",
				"name": "popBackN"
			},
			{
				"kind": "template",
				"line": 1759,
				"constraint": "isInputRange!Range",
				"members": [
					{
						"kind": "function",
						"line": 1759,
						"endchar": 1,
						"char": 6,
						"type": "void(ref Range r, size_t n)",
						"parameters": [
							{
								"storageClass": [
									"ref"
								],
								"type": "Range",
								"name": "r"
							},
							{
								"type": "size_t",
								"name": "n"
							}
						],
						"name": "popFrontExactly",
						"endline": 1772
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "Range"
					}
				],
				"comment": "    Eagerly advances $(D r) itself (not a copy) exactly $(D n) times (by\n    calling $(D r.popFront)). $(D popFrontExactly) takes $(D r) by $(D ref),\n    so it mutates the original range. Completes in $(BIGOH 1) steps for ranges\n    that support slicing, and have either length or are infinite.\n    Completes in $(BIGOH n) time for all other ranges.\n\n    Note: Unlike $(LREF popFrontN), $(D popFrontExactly) will assume that the\n    range holds at least $(D n) elements. This makes $(D popFrontExactly)\n    faster than $(D popFrontN), but it also means that if $(D range) does\n    not contain at least $(D n) elements, it will attempt to call $(D popFront)\n    on an empty range, which is undefined behavior. So, only use\n    $(D popFrontExactly) when it is guaranteed that $(D range) holds at least\n    $(D n) elements.\n\n    $(D popBackExactly) will behave the same but instead removes elements from\n    the back of the (bidirectional) range instead of the front.\nExample:\n\n---\nimport std.algorithm : filterBidirectional, equal;\n\nauto a = [1, 2, 3];\na.popFrontExactly(1);\nassert(a == [2, 3]);\na.popBackExactly(1);\nassert(a == [2]);\n\nstring s = \"日本語\";\ns.popFrontExactly(1);\nassert(s == \"本語\");\ns.popBackExactly(1);\nassert(s == \"本\");\n\nauto bd = filterBidirectional!\"true\"([1, 2, 3]);\nbd.popFrontExactly(1);\nassert(bd.equal([2, 3]));\nbd.popBackExactly(1);\nassert(bd.equal([2]));\n\n---\n",
				"name": "popFrontExactly"
			},
			{
				"kind": "template",
				"line": 1775,
				"constraint": "isBidirectionalRange!Range",
				"members": [
					{
						"kind": "function",
						"line": 1775,
						"endchar": 1,
						"char": 6,
						"type": "void(ref Range r, size_t n)",
						"parameters": [
							{
								"storageClass": [
									"ref"
								],
								"type": "Range",
								"name": "r"
							},
							{
								"type": "size_t",
								"name": "n"
							}
						],
						"name": "popBackExactly",
						"endline": 1788
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "Range"
					}
				],
				"comment": "ditto\n",
				"name": "popBackExactly"
			},
			{
				"kind": "template",
				"line": 1819,
				"members": [
					{
						"kind": "function",
						"line": 1819,
						"endchar": 1,
						"char": 15,
						"type": "ElementType!R(R r)",
						"parameters": [
							{
								"type": "R",
								"name": "r"
							}
						],
						"name": "moveFront",
						"endline": 1832
					}
				],
				"char": 15,
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"comment": "   Moves the front of $(D r) out and returns it. Leaves $(D r.front) in a\n   destroyable state that does not allocate any resources (usually equal\n   to its $(D .init) value).\nExample:\n\n---\nauto a = [ 1, 2, 3 ];\nassert(moveFront(a) == 1);\n\n// define a perfunctory input range\nstruct InputRange\n{\n    @property bool empty() { return false; }\n    @property int front() { return 42; }\n    void popFront() {}\n    int moveFront() { return 43; }\n}\nInputRange r;\nassert(moveFront(r) == 43);\n\n---\n",
				"name": "moveFront"
			},
			{
				"kind": "template",
				"line": 1868,
				"members": [
					{
						"kind": "function",
						"line": 1868,
						"endchar": 1,
						"char": 15,
						"type": "ElementType!R(R r)",
						"parameters": [
							{
								"type": "R",
								"name": "r"
							}
						],
						"name": "moveBack",
						"endline": 1881
					}
				],
				"char": 15,
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"comment": "   Moves the back of $(D r) out and returns it. Leaves $(D r.back) in a\n   destroyable state that does not allocate any resources (usually equal\n   to its $(D .init) value).\nExample:\n\n---\nstruct TestRange\n{\n    int payload = 5;\n    @property bool empty() { return false; }\n    @property TestRange save() { return this; }\n    @property ref int front() return { return payload; }\n    @property ref int back() return { return payload; }\n    void popFront() { }\n    void popBack() { }\n}\nstatic assert(isBidirectionalRange!TestRange);\nTestRange r;\nauto x = moveBack(r);\nassert(x == 5);\n\n---\n",
				"name": "moveBack"
			},
			{
				"kind": "template",
				"line": 1907,
				"constraint": "isIntegral!I",
				"members": [
					{
						"kind": "function",
						"line": 1907,
						"endchar": 1,
						"char": 15,
						"type": "ElementType!R(R r, I i)",
						"parameters": [
							{
								"type": "R",
								"name": "r"
							},
							{
								"type": "I",
								"name": "i"
							}
						],
						"name": "moveAt",
						"endline": 1920
					}
				],
				"char": 15,
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					},
					{
						"kind": "type",
						"name": "I"
					}
				],
				"comment": "   Moves element at index $(D i) of $(D r) out and returns it. Leaves $(D\n   r.front) in a destroyable state that does not allocate any resources\n   (usually equal to its $(D .init) value).\nExample:\n\n---\nauto a = [1,2,3,4];\nforeach(idx, it; a)\n{\n    assert(it == moveAt(a, idx));\n}\n\n---\n",
				"name": "moveAt"
			},
			{
				"kind": "template",
				"line": 1957,
				"members": [
					{
						"kind": "function",
						"line": 1957,
						"endchar": 1,
						"char": 16,
						"type": "pure nothrow @property @safe bool(in T[] a)",
						"parameters": [
							{
								"storageClass": [
									"in"
								],
								"type": "T[]",
								"name": "a"
							}
						],
						"name": "empty",
						"endline": 1960
					}
				],
				"char": 16,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": "Implements the range interface primitive $(D empty) for built-in\narrays. Due to the fact that nonmember functions can be called with\nthe first argument using the dot notation, $(D array.empty) is\nequivalent to $(D empty(array)).\nExample:\n\n---\nauto a = [ 1, 2, 3 ];\nassert(!a.empty);\nassert(a[3 .. $].empty);\n\n---\n",
				"name": "empty"
			},
			{
				"kind": "template",
				"line": 1978,
				"members": [
					{
						"kind": "function",
						"line": 1978,
						"endchar": 1,
						"char": 15,
						"type": "pure nothrow @property @safe T[](T[] a)",
						"parameters": [
							{
								"type": "T[]",
								"name": "a"
							}
						],
						"name": "save",
						"endline": 1981
					}
				],
				"char": 15,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": "Implements the range interface primitive $(D save) for built-in\narrays. Due to the fact that nonmember functions can be called with\nthe first argument using the dot notation, $(D array.save) is\nequivalent to $(D save(array)). The function does not duplicate the\ncontent of the array, it simply returns its argument.\nExample:\n\n---\nauto a = [ 1, 2, 3 ];\nauto b = a.save;\nassert(b is a);\n\n---\n",
				"name": "save"
			},
			{
				"kind": "template",
				"line": 1999,
				"constraint": "!isNarrowString!(T[]) && !is(T[] == void[])",
				"members": [
					{
						"kind": "function",
						"line": 1999,
						"endchar": 1,
						"char": 6,
						"type": "pure nothrow @safe void(ref T[] a)",
						"parameters": [
							{
								"storageClass": [
									"ref"
								],
								"type": "T[]",
								"name": "a"
							}
						],
						"name": "popFront",
						"endline": 2004
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": "Implements the range interface primitive $(D popFront) for built-in\narrays. Due to the fact that nonmember functions can be called with\nthe first argument using the dot notation, $(D array.popFront) is\nequivalent to $(D popFront(array)). For $(GLOSSARY narrow strings),\n$(D popFront) automatically advances to the next $(GLOSSARY code\npoint).\nExample:\n\n---\nauto a = [ 1, 2, 3 ];\na.popFront();\nassert(a == [ 2, 3 ]);\n\n---\n",
				"name": "popFront"
			},
			{
				"kind": "template",
				"line": 2098,
				"constraint": "!isNarrowString!(T[]) && !is(T[] == void[])",
				"members": [
					{
						"kind": "function",
						"line": 2098,
						"endchar": 1,
						"char": 6,
						"type": "pure nothrow @safe void(ref T[] a)",
						"parameters": [
							{
								"storageClass": [
									"ref"
								],
								"type": "T[]",
								"name": "a"
							}
						],
						"name": "popBack",
						"endline": 2103
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": "Implements the range interface primitive $(D popBack) for built-in\narrays. Due to the fact that nonmember functions can be called with\nthe first argument using the dot notation, $(D array.popBack) is\nequivalent to $(D popBack(array)). For $(GLOSSARY narrow strings), $(D\npopFront) automatically eliminates the last $(GLOSSARY code point).\nExample:\n\n---\nauto a = [ 1, 2, 3 ];\na.popBack();\nassert(a == [ 1, 2 ]);\n\n---\n",
				"name": "popBack"
			},
			{
				"kind": "template",
				"line": 2164,
				"constraint": "!isNarrowString!(T[]) && !is(T[] == void[])",
				"members": [
					{
						"kind": "function",
						"line": 2164,
						"endchar": 1,
						"char": 17,
						"type": "pure nothrow @property ref @safe T(T[] a)",
						"parameters": [
							{
								"type": "T[]",
								"name": "a"
							}
						],
						"name": "front",
						"endline": 2169
					}
				],
				"char": 17,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": "Implements the range interface primitive $(D front) for built-in\narrays. Due to the fact that nonmember functions can be called with\nthe first argument using the dot notation, $(D array.front) is\nequivalent to $(D front(array)). For $(GLOSSARY narrow strings), $(D\nfront) automatically returns the first $(GLOSSARY code point) as a $(D\ndchar).\nExample:\n\n---\nint[] a = [ 1, 2, 3 ];\nassert(a.front == 1);\n\n---\n",
				"name": "front"
			},
			{
				"kind": "template",
				"line": 2208,
				"constraint": "!isNarrowString!(T[])",
				"members": [
					{
						"kind": "function",
						"line": 2208,
						"endchar": 1,
						"char": 17,
						"type": "pure nothrow @property ref @safe T(T[] a)",
						"parameters": [
							{
								"type": "T[]",
								"name": "a"
							}
						],
						"name": "back",
						"endline": 2212
					}
				],
				"char": 17,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": "Implements the range interface primitive $(D back) for built-in\narrays. Due to the fact that nonmember functions can be called with\nthe first argument using the dot notation, $(D array.back) is\nequivalent to $(D back(array)). For $(GLOSSARY narrow strings), $(D\nback) automatically returns the last $(GLOSSARY code point) as a $(D\ndchar).\nExample:\n\n---\nint[] a = [ 1, 2, 3 ];\nassert(a.back == 3);\na.back += 4;\nassert(a.back == 7);\n\n---\n",
				"name": "back"
			}
		],
		"name": "std.range.primitives",
		"comment": "This module is a submodule of $(LINK2 std_range.html, std.range).\n\nIt provides basic range functionality by defining several templates for testing\nwhether a given object is a _range, and what kind of _range it is:\n\n$(BOOKTABLE ,\n    $(TR $(TD $(D $(LREF isInputRange)))\n        $(TD Tests if something is an $(I input _range), defined to be\n        something from which one can sequentially read data using the\n        primitives $(D front), $(D popFront), and $(D empty).\n    ))\n    $(TR $(TD $(D $(LREF isOutputRange)))\n        $(TD Tests if something is an $(I output _range), defined to be\n        something to which one can sequentially write data using the\n        $(D $(LREF put)) primitive.\n    ))\n    $(TR $(TD $(D $(LREF isForwardRange)))\n        $(TD Tests if something is a $(I forward _range), defined to be an\n        input _range with the additional capability that one can save one's\n        current position with the $(D save) primitive, thus allowing one to\n        iterate over the same _range multiple times.\n    ))\n    $(TR $(TD $(D $(LREF isBidirectionalRange)))\n        $(TD Tests if something is a $(I bidirectional _range), that is, a\n        forward _range that allows reverse traversal using the primitives $(D\n        back) and $(D popBack).\n    ))\n    $(TR $(TD $(D $(LREF isRandomAccessRange)))\n        $(TD Tests if something is a $(I random access _range), which is a\n        bidirectional _range that also supports the array subscripting\n        operation via the primitive $(D opIndex).\n    ))\n)\n\nIt also provides number of templates that test for various _range capabilities:\n\n$(BOOKTABLE ,\n    $(TR $(TD $(D $(LREF hasMobileElements)))\n        $(TD Tests if a given _range's elements can be moved around using the\n        primitives $(D moveFront), $(D moveBack), or $(D moveAt).\n    ))\n    $(TR $(TD $(D $(LREF ElementType)))\n        $(TD Returns the element type of a given _range.\n    ))\n    $(TR $(TD $(D $(LREF ElementEncodingType)))\n        $(TD Returns the encoding element type of a given _range.\n    ))\n    $(TR $(TD $(D $(LREF hasSwappableElements)))\n        $(TD Tests if a _range is a forward _range with swappable elements.\n    ))\n    $(TR $(TD $(D $(LREF hasAssignableElements)))\n        $(TD Tests if a _range is a forward _range with mutable elements.\n    ))\n    $(TR $(TD $(D $(LREF hasLvalueElements)))\n        $(TD Tests if a _range is a forward _range with elements that can be\n        passed by reference and have their address taken.\n    ))\n    $(TR $(TD $(D $(LREF hasLength)))\n        $(TD Tests if a given _range has the $(D length) attribute.\n    ))\n    $(TR $(TD $(D $(LREF isInfinite)))\n        $(TD Tests if a given _range is an $(I infinite _range).\n    ))\n    $(TR $(TD $(D $(LREF hasSlicing)))\n        $(TD Tests if a given _range supports the array slicing operation $(D\n        R[x..y]).\n    ))\n)\n\nFinally, it includes some convenience functions for manipulating ranges:\n\n$(BOOKTABLE ,\n    $(TR $(TD $(D $(LREF popFrontN)))\n        $(TD Advances a given _range by up to $(I n) elements.\n    ))\n    $(TR $(TD $(D $(LREF popBackN)))\n        $(TD Advances a given bidirectional _range from the right by up to\n        $(I n) elements.\n    ))\n    $(TR $(TD $(D $(LREF popFrontExactly)))\n        $(TD Advances a given _range by up exactly $(I n) elements.\n    ))\n    $(TR $(TD $(D $(LREF popBackExactly)))\n        $(TD Advances a given bidirectional _range from the right by exactly\n        $(I n) elements.\n    ))\n    $(TR $(TD $(D $(LREF moveFront)))\n        $(TD Removes the front element of a _range.\n    ))\n    $(TR $(TD $(D $(LREF moveBack)))\n        $(TD Removes the back element of a bidirectional _range.\n    ))\n    $(TR $(TD $(D $(LREF moveAt)))\n        $(TD Removes the $(I i)'th element of a random-access _range.\n    ))\n    $(TR $(TD $(D $(LREF walkLength)))\n        $(TD Computes the length of any _range in O(n) time.\n    ))\n)\n\nSource: $(PHOBOSSRC std/range/_constraints.d)\n\nMacros:\n\nWIKI = Phobos/StdRange\n\nCopyright: Copyright by authors 2008-.\n\nLicense: $(WEB boost.org/LICENSE_1_0.txt, Boost License 1.0).\n\nAuthors: $(WEB erdani.com, Andrei Alexandrescu), David Simcha,\nand Jonathan M Davis. Credit for some of the ideas in building this module goes\nto $(WEB fantascienza.net/leonardo/so/, Leonardo Maffi).\n"
	},
	{
		"kind": "module",
		"file": "../phobos/std/range/interfaces.d",
		"members": [
			{
				"kind": "template",
				"line": 93,
				"members": [
					{
						"kind": "interface",
						"line": 93,
						"members": [
							{
								"kind": "function",
								"line": 95,
								"char": 17,
								"type": "@property E()",
								"name": "front",
								"comment": "\n"
							},
							{
								"kind": "function",
								"line": 98,
								"char": 7,
								"type": "E()",
								"name": "moveFront",
								"comment": "\n"
							},
							{
								"kind": "function",
								"line": 101,
								"char": 10,
								"type": "void()",
								"name": "popFront",
								"comment": "\n"
							},
							{
								"kind": "function",
								"line": 104,
								"char": 20,
								"type": "@property bool()",
								"name": "empty",
								"comment": "\n"
							},
							{
								"kind": "function",
								"line": 118,
								"char": 9,
								"type": "int(int delegate(E))",
								"parameters": [
									{
										"type": "int delegate(E)"
									}
								],
								"name": "opApply",
								"comment": "$(D foreach) iteration uses opApply, since one delegate call per loop\n iteration is faster than three virtual function calls.\n"
							},
							{
								"kind": "function",
								"line": 121,
								"char": 9,
								"type": "int(int delegate(size_t, E))",
								"parameters": [
									{
										"type": "int delegate(size_t, E)"
									}
								],
								"name": "opApply",
								"comment": "Ditto\n"
							}
						],
						"char": 1,
						"name": "InputRange"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "E"
					}
				],
				"comment": "These interfaces are intended to provide virtual function-based wrappers\n around input ranges with element type E.  This is useful where a well-defined\n binary interface is required, such as when a DLL function or virtual function\n needs to accept a generic range as a parameter.  Note that\n $(LREF isInputRange) and friends check for conformance to structural\n interfaces, not for implementation of these $(D interface) types.\n\n Limitations:\n\n These interfaces are not capable of forwarding $(D ref) access to elements.\n\n Infiniteness of the wrapped range is not propagated.\n\n Length is not propagated in the case of non-random access ranges.\n\n See_Also:\n $(LREF inputRangeObject)\nExample:\n\n---\nimport std.algorithm : map;\nimport std.range : iota;\n\nvoid useRange(InputRange!int range) {\n    // Function body.\n}\n\n// Create a range type.\nauto squares = map!\"a * a\"(iota(10));\n\n// Wrap it in an interface.\nauto squaresWrapped = inputRangeObject(squares);\n\n// Use it.\nuseRange(squaresWrapped);\n\n---\n",
				"name": "InputRange"
			},
			{
				"kind": "template",
				"line": 146,
				"members": [
					{
						"kind": "interface",
						"line": 146,
						"members": [
							{
								"kind": "function",
								"line": 148,
								"char": 30,
								"type": "@property ForwardRange!E()",
								"name": "save",
								"comment": "\n"
							}
						],
						"char": 1,
						"name": "ForwardRange"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "E"
					}
				],
				"comment": "Interface for a forward range of type $(D E).\n",
				"name": "ForwardRange"
			},
			{
				"kind": "template",
				"line": 152,
				"members": [
					{
						"kind": "interface",
						"line": 152,
						"members": [
							{
								"kind": "function",
								"line": 154,
								"char": 36,
								"type": "@property BidirectionalRange!E()",
								"name": "save",
								"comment": "\n"
							},
							{
								"kind": "function",
								"line": 157,
								"char": 17,
								"type": "@property E()",
								"name": "back",
								"comment": "\n"
							},
							{
								"kind": "function",
								"line": 160,
								"char": 7,
								"type": "E()",
								"name": "moveBack",
								"comment": "\n"
							},
							{
								"kind": "function",
								"line": 163,
								"char": 10,
								"type": "void()",
								"name": "popBack",
								"comment": "\n"
							}
						],
						"char": 1,
						"name": "BidirectionalRange"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "E"
					}
				],
				"comment": "Interface for a bidirectional range of type $(D E).\n",
				"name": "BidirectionalRange"
			},
			{
				"kind": "template",
				"line": 167,
				"members": [
					{
						"kind": "interface",
						"line": 167,
						"members": [
							{
								"kind": "function",
								"line": 169,
								"char": 36,
								"type": "@property RandomAccessFinite!E()",
								"name": "save",
								"comment": "\n"
							},
							{
								"kind": "function",
								"line": 172,
								"char": 7,
								"type": "E(size_t)",
								"parameters": [
									{
										"type": "size_t"
									}
								],
								"name": "opIndex",
								"comment": "\n"
							},
							{
								"kind": "function",
								"line": 175,
								"char": 7,
								"type": "E(size_t)",
								"parameters": [
									{
										"type": "size_t"
									}
								],
								"name": "moveAt",
								"comment": "\n"
							},
							{
								"kind": "function",
								"line": 178,
								"char": 22,
								"type": "@property size_t()",
								"name": "length",
								"comment": "\n"
							},
							{
								"kind": "alias",
								"line": 181,
								"char": 5,
								"type": "length",
								"name": "opDollar",
								"comment": "\n"
							}
						],
						"char": 1,
						"name": "RandomAccessFinite"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "E"
					}
				],
				"comment": "Interface for a finite random access range of type $(D E).\n",
				"name": "RandomAccessFinite"
			},
			{
				"kind": "template",
				"line": 192,
				"members": [
					{
						"kind": "interface",
						"line": 192,
						"members": [
							{
								"kind": "function",
								"line": 194,
								"char": 7,
								"type": "E(size_t)",
								"parameters": [
									{
										"type": "size_t"
									}
								],
								"name": "moveAt",
								"comment": "\n"
							},
							{
								"kind": "function",
								"line": 197,
								"char": 38,
								"type": "@property RandomAccessInfinite!E()",
								"name": "save",
								"comment": "\n"
							},
							{
								"kind": "function",
								"line": 200,
								"char": 7,
								"type": "E(size_t)",
								"parameters": [
									{
										"type": "size_t"
									}
								],
								"name": "opIndex",
								"comment": "\n"
							}
						],
						"char": 1,
						"name": "RandomAccessInfinite"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "E"
					}
				],
				"comment": "Interface for an infinite random access range of type $(D E).\n",
				"name": "RandomAccessInfinite"
			},
			{
				"kind": "template",
				"line": 204,
				"members": [
					{
						"kind": "interface",
						"line": 204,
						"members": [
							{
								"kind": "function",
								"line": 206,
								"char": 20,
								"type": "@property void(E newVal)",
								"parameters": [
									{
										"type": "E",
										"name": "newVal"
									}
								],
								"name": "front",
								"comment": "\n"
							}
						],
						"char": 1,
						"name": "InputAssignable"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "E"
					}
				],
				"comment": "Adds assignable elements to InputRange.\n",
				"name": "InputAssignable"
			},
			{
				"kind": "template",
				"line": 210,
				"members": [
					{
						"kind": "interface",
						"line": 210,
						"members": [
							{
								"kind": "function",
								"line": 212,
								"char": 35,
								"type": "@property ForwardAssignable!E()",
								"name": "save",
								"comment": "\n"
							}
						],
						"char": 1,
						"name": "ForwardAssignable"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "E"
					}
				],
				"comment": "Adds assignable elements to ForwardRange.\n",
				"name": "ForwardAssignable"
			},
			{
				"kind": "template",
				"line": 216,
				"members": [
					{
						"kind": "interface",
						"line": 216,
						"members": [
							{
								"kind": "function",
								"line": 218,
								"char": 41,
								"type": "@property BidirectionalAssignable!E()",
								"name": "save",
								"comment": "\n"
							},
							{
								"kind": "function",
								"line": 221,
								"char": 20,
								"type": "@property void(E newVal)",
								"parameters": [
									{
										"type": "E",
										"name": "newVal"
									}
								],
								"name": "back",
								"comment": "\n"
							}
						],
						"char": 1,
						"name": "BidirectionalAssignable"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "E"
					}
				],
				"comment": "Adds assignable elements to BidirectionalRange.\n",
				"name": "BidirectionalAssignable"
			},
			{
				"kind": "template",
				"line": 225,
				"members": [
					{
						"kind": "interface",
						"line": 225,
						"members": [
							{
								"kind": "function",
								"line": 227,
								"char": 40,
								"type": "@property RandomFiniteAssignable!E()",
								"name": "save",
								"comment": "\n"
							},
							{
								"kind": "function",
								"line": 230,
								"char": 10,
								"type": "void(E val, size_t index)",
								"parameters": [
									{
										"type": "E",
										"name": "val"
									},
									{
										"type": "size_t",
										"name": "index"
									}
								],
								"name": "opIndexAssign",
								"comment": "\n"
							}
						],
						"char": 1,
						"name": "RandomFiniteAssignable"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "E"
					}
				],
				"comment": "Adds assignable elements to RandomAccessFinite.\n",
				"name": "RandomFiniteAssignable"
			},
			{
				"kind": "template",
				"line": 235,
				"members": [
					{
						"kind": "interface",
						"line": 235,
						"members": [
							{
								"kind": "function",
								"line": 237,
								"char": 10,
								"type": "void(E)",
								"parameters": [
									{
										"type": "E"
									}
								],
								"name": "put",
								"comment": "\n"
							}
						],
						"char": 1,
						"name": "OutputRange"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "E"
					}
				],
				"comment": "Interface for an output range of type $(D E).  Usage is similar to the\n $(D InputRange) interface and descendants.\n",
				"name": "OutputRange"
			},
			{
				"kind": "template",
				"line": 266,
				"members": [
					{
						"kind": "class",
						"line": 266,
						"members": [],
						"char": 1,
						"name": "OutputRangeObject"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					},
					{
						"kind": "tuple",
						"name": "E"
					}
				],
				"comment": "Implements the $(D OutputRange) interface for all types E and wraps the\n $(D put) method for each type $(D E) in a virtual function.\n",
				"name": "OutputRangeObject"
			},
			{
				"kind": "template",
				"line": 280,
				"constraint": "isInputRange!(Unqual!R)",
				"members": [],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"comment": "Returns the interface type that best matches $(D R).\n",
				"name": "MostDerivedInputRange"
			},
			{
				"kind": "template",
				"line": 316,
				"constraint": "isInputRange!(Unqual!R)",
				"members": [],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"comment": "Implements the most derived interface that $(D R) works with and wraps\n all relevant range primitives in virtual functions.  If $(D R) is already\n derived from the $(D InputRange) interface, aliases itself away.\n",
				"name": "InputRangeObject"
			},
			{
				"kind": "template",
				"line": 434,
				"constraint": "isInputRange!R",
				"members": [
					{
						"kind": "function",
						"line": 434,
						"endchar": 1,
						"char": 20,
						"type": "InputRangeObject!R(R range)",
						"parameters": [
							{
								"type": "R",
								"name": "range"
							}
						],
						"name": "inputRangeObject",
						"endline": 440
					}
				],
				"char": 20,
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"comment": "Convenience function for creating an $(D InputRangeObject) of the proper type.\n See $(LREF InputRange) for an example.\n",
				"name": "inputRangeObject"
			},
			{
				"kind": "template",
				"line": 445,
				"members": [
					{
						"kind": "template",
						"line": 448,
						"members": [
							{
								"kind": "function",
								"line": 448,
								"endchar": 5,
								"char": 30,
								"type": "OutputRangeObject!(R, E)(R range)",
								"parameters": [
									{
										"type": "R",
										"name": "range"
									}
								],
								"name": "outputRangeObject",
								"endline": 450
							}
						],
						"char": 30,
						"parameters": [
							{
								"kind": "type",
								"name": "R"
							}
						],
						"comment": "\n",
						"name": "outputRangeObject"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "tuple",
						"name": "E"
					}
				],
				"comment": "Convenience function for creating an $(D OutputRangeObject) with a base range\n of type $(D R) that accepts types $(D E).\nExample:\n\n---\nimport std.array;\nauto app = appender!(uint[])();\nauto appWrapped = outputRangeObject!(uint, uint[])(app);\nstatic assert(is(typeof(appWrapped) : OutputRange!(uint[])));\nstatic assert(is(typeof(appWrapped) : OutputRange!(uint)));\n\n---\n",
				"name": "outputRangeObject"
			}
		],
		"name": "std.range.interfaces",
		"comment": "This module is a submodule of $(LINK2 std_range.html, std.range).\n\nThe main $(D std.range) module provides template-based tools for working with\nranges, but sometimes an object-based interface for ranges is needed, such as\nwhen runtime polymorphism is required. For this purpose, this submodule\nprovides a number of object and $(D interface) definitions that can be used to\nwrap around _range objects created by the $(D std.range) templates.\n\n$(BOOKTABLE ,\n    $(TR $(TD $(D $(LREF InputRange)))\n        $(TD Wrapper for input ranges.\n    ))\n    $(TR $(TD $(D $(LREF InputAssignable)))\n        $(TD Wrapper for input ranges with assignable elements.\n    ))\n    $(TR $(TD $(D $(LREF ForwardRange)))\n        $(TD Wrapper for forward ranges.\n    ))\n    $(TR $(TD $(D $(LREF ForwardAssignable)))\n        $(TD Wrapper for forward ranges with assignable elements.\n    ))\n    $(TR $(TD $(D $(LREF BidirectionalRange)))\n        $(TD Wrapper for bidirectional ranges.\n    ))\n    $(TR $(TD $(D $(LREF BidirectionalAssignable)))\n        $(TD Wrapper for bidirectional ranges with assignable elements.\n    ))\n    $(TR $(TD $(D $(LREF RandomAccessFinite)))\n        $(TD Wrapper for finite random-access ranges.\n    ))\n    $(TR $(TD $(D $(LREF RandomAccessAssignable)))\n        $(TD Wrapper for finite random-access ranges with assignable elements.\n    ))\n    $(TR $(TD $(D $(LREF RandomAccessInfinite)))\n        $(TD Wrapper for infinite random-access ranges.\n    ))\n    $(TR $(TD $(D $(LREF OutputRange)))\n        $(TD Wrapper for output ranges.\n    ))\n    $(TR $(TD $(D $(LREF OutputRangeObject)))\n        $(TD Class that implements the $(D OutputRange) interface and wraps the\n        $(D put) methods in virtual functions.\n    ))\n    $(TR $(TD $(D $(LREF InputRangeObject)))\n        $(TD Class that implements the $(D InputRange) interface and wraps the\n        input _range methods in virtual functions.\n    ))\n    $(TR $(TD $(D $(LREF RefRange)))\n        $(TD Wrapper around a forward _range that gives it reference semantics.\n    ))\n)\n\n\nSource: $(PHOBOSSRC std/range/_interfaces.d)\n\nMacros:\n\nWIKI = Phobos/StdRange\n\nCopyright: Copyright by authors 2008-.\n\nLicense: $(WEB boost.org/LICENSE_1_0.txt, Boost License 1.0).\n\nAuthors: $(WEB erdani.com, Andrei Alexandrescu), David Simcha,\nand Jonathan M Davis. Credit for some of the ideas in building this module goes\nto $(WEB fantascienza.net/leonardo/so/, Leonardo Maffi).\n"
	},
	{
		"kind": "module",
		"file": "../phobos/std/bigint.d",
		"members": [
			{
				"kind": "struct",
				"line": 43,
				"members": [
					{
						"kind": "template",
						"line": 54,
						"members": [
							{
								"kind": "constructor",
								"line": 54,
								"endchar": 5,
								"char": 5,
								"type": "pure (T s)",
								"parameters": [
									{
										"type": "T",
										"name": "s"
									}
								],
								"name": "this",
								"endline": 78
							}
						],
						"char": 5,
						"parameters": [
							{
								"kind": "type",
								"deco": "Axa",
								"name": "T"
							}
						],
						"comment": "Construct a BigInt from a decimal or hexadecimal string.\n\nThe number must be in the form of a D decimal or hex literal:\n\nIt may have a leading + or - sign; followed by \"0x\" if hexadecimal.\n\nUnderscores are permitted.\n\nBUG: Should throw a IllegalArgumentException/ConvError if invalid character found\n",
						"name": "this"
					},
					{
						"kind": "template",
						"line": 81,
						"constraint": "isIntegral!T",
						"members": [
							{
								"kind": "constructor",
								"line": 81,
								"endchar": 5,
								"char": 5,
								"type": "pure nothrow (T x)",
								"parameters": [
									{
										"type": "T",
										"name": "x"
									}
								],
								"name": "this",
								"endline": 85
							}
						],
						"char": 5,
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"comment": "Construct a BigInt from a built-in integral type.\nExample:\n\n---\nulong data = 1_000_000_000_000;\nauto bigData = BigInt(data);\nassert(data == BigInt(\"1_000_000_000_000\"));\n\n\n---\n",
						"name": "this"
					},
					{
						"kind": "template",
						"line": 96,
						"constraint": "is(Unqual!T == BigInt)",
						"members": [
							{
								"kind": "constructor",
								"line": 96,
								"endchar": 5,
								"char": 5,
								"type": "pure nothrow (T x)",
								"parameters": [
									{
										"type": "T",
										"name": "x"
									}
								],
								"name": "this",
								"endline": 99
							}
						],
						"char": 5,
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"comment": "Construct a BigInt from another BigInt.\nExample:\n\n---\nconst(BigInt) b1 = BigInt(\"1_234_567_890\");\nBigInt b2 = BigInt(b1);\nassert(b2 == BigInt(\"1_234_567_890\"));\n\n\n---\n",
						"name": "this"
					},
					{
						"kind": "template",
						"line": 110,
						"constraint": "isIntegral!T",
						"members": [
							{
								"kind": "function",
								"line": 110,
								"endchar": 5,
								"char": 12,
								"type": "pure nothrow BigInt(T x)",
								"parameters": [
									{
										"type": "T",
										"name": "x"
									}
								],
								"name": "opAssign",
								"endline": 115
							}
						],
						"char": 12,
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"comment": "Assignment from built-in integer types.\nExample:\n\n---\nauto b = BigInt(\"123\");\nb = 456;\nassert(b == BigInt(\"456\"));\n\n\n---\n",
						"name": "opAssign"
					},
					{
						"kind": "template",
						"line": 126,
						"members": [
							{
								"kind": "function",
								"line": 126,
								"endchar": 5,
								"char": 12,
								"type": "pure @nogc BigInt(T x)",
								"parameters": [
									{
										"type": "T",
										"name": "x"
									}
								],
								"name": "opAssign",
								"endline": 131
							}
						],
						"char": 12,
						"parameters": [
							{
								"kind": "type",
								"deco": "S3std6bigint6BigInt",
								"name": "T"
							}
						],
						"comment": "Assignment from another BigInt.\nExample:\n\n---\nauto b1 = BigInt(\"123\");\nauto b2 = BigInt(\"456\");\nb2 = b1;\nassert(b2 == BigInt(\"123\"));\n\n\n---\n",
						"name": "opAssign"
					},
					{
						"kind": "template",
						"line": 146,
						"constraint": "(op == \"+\" || op == \"-\" || op == \"*\" || op == \"/\" || op == \"%\" || op == \">>\" || op == \"<<\" || op == \"^^\" || op == \"|\" || op == \"&\" || op == \"^\") && isIntegral!T",
						"members": [
							{
								"kind": "function",
								"line": 146,
								"endchar": 5,
								"char": 12,
								"type": "pure nothrow BigInt(T y)",
								"parameters": [
									{
										"type": "T",
										"name": "y"
									}
								],
								"name": "opOpAssign",
								"endline": 228
							}
						],
						"char": 12,
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "op"
							},
							{
								"kind": "type",
								"name": "T"
							}
						],
						"comment": " Implements assignment operators from built-in integers of the form\n $(D BigInt op= integer).\nExample:\n\n---\nauto b = BigInt(\"1_000_000_000\");\n\nb += 12345;\nassert(b == BigInt(\"1_000_012_345\"));\n\nb /= 5;\nassert(b == BigInt(\"200_002_469\"));\n\n\n---\n",
						"name": "opOpAssign"
					},
					{
						"kind": "template",
						"line": 245,
						"constraint": "(op == \"+\" || op == \"-\" || op == \"*\" || op == \"|\" || op == \"&\" || op == \"^\" || op == \"/\" || op == \"%\") && is(T : BigInt)",
						"members": [
							{
								"kind": "function",
								"line": 245,
								"endchar": 5,
								"char": 12,
								"type": "pure nothrow BigInt(T y)",
								"parameters": [
									{
										"type": "T",
										"name": "y"
									}
								],
								"name": "opOpAssign",
								"endline": 289
							}
						],
						"char": 12,
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "op"
							},
							{
								"kind": "type",
								"name": "T"
							}
						],
						"comment": " Implements assignment operators of the form $(D BigInt op= BigInt).\nExample:\n\n---\nauto x = BigInt(\"123\");\nauto y = BigInt(\"321\");\nx += y;\nassert(x == BigInt(\"444\"));\n\n\n---\n",
						"name": "opOpAssign"
					},
					{
						"kind": "template",
						"line": 303,
						"constraint": "(op == \"+\" || op == \"*\" || op == \"-\" || op == \"|\" || op == \"&\" || op == \"^\" || op == \"/\" || op == \"%\") && is(T : BigInt)",
						"members": [
							{
								"kind": "function",
								"line": 303,
								"endchar": 5,
								"char": 12,
								"type": "const pure nothrow BigInt(T y)",
								"parameters": [
									{
										"type": "T",
										"name": "y"
									}
								],
								"name": "opBinary",
								"endline": 310
							}
						],
						"char": 12,
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "op"
							},
							{
								"kind": "type",
								"name": "T"
							}
						],
						"comment": " Implements binary operators between BigInts.\nExample:\n\n---\nauto x = BigInt(\"123\");\nauto y = BigInt(\"456\");\nBigInt z = x * y;\nassert(z == BigInt(\"56088\"));\n\n\n---\n",
						"name": "opBinary"
					},
					{
						"kind": "template",
						"line": 324,
						"constraint": "(op == \"+\" || op == \"*\" || op == \"-\" || op == \"/\" || op == \"|\" || op == \"&\" || op == \"^\" || op == \">>\" || op == \"<<\" || op == \"^^\") && isIntegral!T",
						"members": [
							{
								"kind": "function",
								"line": 324,
								"endchar": 5,
								"char": 12,
								"type": "const pure nothrow BigInt(T y)",
								"parameters": [
									{
										"type": "T",
										"name": "y"
									}
								],
								"name": "opBinary",
								"endline": 331
							}
						],
						"char": 12,
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "op"
							},
							{
								"kind": "type",
								"name": "T"
							}
						],
						"comment": " Implements binary operators between BigInt's and built-in integers.\nExample:\n\n---\nauto x = BigInt(\"123\");\nx *= 300;\nassert(x == BigInt(\"36900\"));\n\n\n---\n",
						"name": "opBinary"
					},
					{
						"kind": "template",
						"line": 353,
						"constraint": "op == \"%\" && isIntegral!T",
						"members": [
							{
								"kind": "function",
								"line": 353,
								"storageClass": [
									"auto"
								],
								"endchar": 5,
								"char": 10,
								"type": "const pure nothrow (T y)",
								"parameters": [
									{
										"type": "T",
										"name": "y"
									}
								],
								"name": "opBinary",
								"endline": 383
							}
						],
						"char": 10,
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "op"
							},
							{
								"kind": "type",
								"name": "T"
							}
						],
						"comment": "        Implements a narrowing remainder operation with built-in integer types.\n\n        This binary operator returns a narrower, built-in integer type\n        where applicable, according to the following table.\n\n        $(TABLE ,\n        $(TR $(TD `BigInt`) $(TD $(CODE_PERCENT)) $(TD `long`) $(TD $(RARR)) $(TD `long`))\n        $(TR $(TD `BigInt`) $(TD $(CODE_PERCENT)) $(TD `ulong`) $(TD $(RARR)) $(TD `BigInt`))\n        $(TR $(TD `BigInt`) $(TD $(CODE_PERCENT)) $(TD other type) $(TD $(RARR)) $(TD `int`))\n        )\nExample:\n\n---\nauto  x  = BigInt(\"1_000_000_500\");\nlong  l  = 1_000_000L;\nulong ul = 2_000_000UL;\nint   i  = 500_000;\nshort s  = 30_000;\n\nassert(is(typeof(x % l)  == long)   && x % l  == 500L);\nassert(is(typeof(x % ul) == BigInt) && x % ul == BigInt(500));\nassert(is(typeof(x % i)  == int)    && x % i  == 500);\nassert(is(typeof(x % s)  == int)    && x % s  == 10500);\n\n\n---\n",
						"name": "opBinary"
					},
					{
						"kind": "template",
						"line": 404,
						"constraint": "(op == \"+\" || op == \"*\" || op == \"|\" || op == \"&\" || op == \"^\") && isIntegral!T",
						"members": [
							{
								"kind": "function",
								"line": 404,
								"endchar": 5,
								"char": 12,
								"type": "const pure nothrow BigInt(T y)",
								"parameters": [
									{
										"type": "T",
										"name": "y"
									}
								],
								"name": "opBinaryRight",
								"endline": 408
							}
						],
						"char": 12,
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "op"
							},
							{
								"kind": "type",
								"name": "T"
							}
						],
						"comment": "        Implements operators with built-in integers on the left-hand side and\n        BigInt on the right-hand side.\nExample:\n\n---\nauto x = BigInt(\"100\");\nBigInt y = 123 + x;\nassert(y == BigInt(\"223\"));\n\nBigInt z = 123 - x;\nassert(z == BigInt(\"23\"));\n\n// Dividing a built-in integer type by BigInt always results in\n// something that fits in a built-in type, so the built-in type is\n// returned, not BigInt.\nassert(is(typeof(1000 / x) == int));\nassert(1000 / x == 10);\n\n\n---\n",
						"name": "opBinaryRight"
					},
					{
						"kind": "template",
						"line": 429,
						"constraint": "op == \"-\" && isIntegral!T",
						"members": [
							{
								"kind": "function",
								"line": 429,
								"endchar": 5,
								"char": 12,
								"type": "const pure nothrow BigInt(T y)",
								"parameters": [
									{
										"type": "T",
										"name": "y"
									}
								],
								"name": "opBinaryRight",
								"endline": 441
							}
						],
						"char": 12,
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "op"
							},
							{
								"kind": "type",
								"name": "T"
							}
						],
						"comment": "ditto\n",
						"name": "opBinaryRight"
					},
					{
						"kind": "template",
						"line": 445,
						"constraint": "(op == \"%\" || op == \"/\") && isIntegral!T",
						"members": [
							{
								"kind": "function",
								"line": 445,
								"endchar": 5,
								"char": 7,
								"type": "const pure nothrow T(T x)",
								"parameters": [
									{
										"type": "T",
										"name": "x"
									}
								],
								"name": "opBinaryRight",
								"endline": 466
							}
						],
						"char": 7,
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "op"
							},
							{
								"kind": "type",
								"name": "T"
							}
						],
						"comment": "ditto\n",
						"name": "opBinaryRight"
					},
					{
						"kind": "template",
						"line": 472,
						"constraint": "op == \"+\" || op == \"-\" || op == \"~\"",
						"members": [
							{
								"kind": "function",
								"line": 472,
								"endchar": 5,
								"char": 12,
								"type": "const pure nothrow BigInt()",
								"name": "opUnary",
								"endline": 486
							}
						],
						"char": 12,
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "op"
							}
						],
						"comment": "        Implements BigInt unary operators.\nExample:\n\n---\nauto x = BigInt(\"1234\");\nassert(-x == BigInt(\"-1234\"));\n\n++x;\nassert(x == BigInt(\"1235\"));\n\n\n---\n",
						"name": "opUnary"
					},
					{
						"kind": "template",
						"line": 490,
						"constraint": "op == \"++\" || op == \"--\"",
						"members": [
							{
								"kind": "function",
								"line": 490,
								"endchar": 5,
								"char": 12,
								"type": "pure nothrow BigInt()",
								"name": "opUnary",
								"endline": 502
							}
						],
						"char": 12,
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "op"
							}
						],
						"comment": "ditto\n",
						"name": "opUnary"
					},
					{
						"kind": "template",
						"line": 518,
						"members": [
							{
								"kind": "function",
								"line": 518,
								"endchar": 5,
								"char": 10,
								"type": "const pure @nogc bool(auto ref const BigInt y)",
								"parameters": [
									{
										"storageClass": [
											"auto",
											"const",
											"ref"
										],
										"type": "BigInt",
										"name": "y"
									}
								],
								"name": "opEquals",
								"endline": 521
							}
						],
						"char": 10,
						"parameters": [],
						"comment": "        Implements BigInt equality test with other BigInt's and built-in\n        integer types.\nExample:\n\n---\nauto x = BigInt(\"12345\");\nauto y = BigInt(\"12340\");\nint z = 12345;\nint w = 54321;\n\nassert(x == x);\nassert(x != y);\nassert(x == y + 5);\nassert(x == z);\nassert(x != w);\n\n\n---\n",
						"name": "opEquals"
					},
					{
						"kind": "template",
						"line": 524,
						"constraint": "isIntegral!T",
						"members": [
							{
								"kind": "function",
								"line": 524,
								"endchar": 5,
								"char": 10,
								"type": "const pure nothrow @nogc bool(T y)",
								"parameters": [
									{
										"type": "T",
										"name": "y"
									}
								],
								"name": "opEquals",
								"endline": 529
							}
						],
						"char": 10,
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"comment": "ditto\n",
						"name": "opEquals"
					},
					{
						"kind": "template",
						"line": 549,
						"members": [
							{
								"kind": "function",
								"line": 549,
								"endchar": 5,
								"char": 7,
								"type": "const pure nothrow @nogc T()",
								"name": "opCast",
								"endline": 552
							}
						],
						"char": 7,
						"parameters": [
							{
								"kind": "type",
								"deco": "b",
								"name": "T"
							}
						],
						"comment": "        Implements casting to bool.\nExample:\n\n---\n// Non-zero values are regarded as true\nauto x = BigInt(\"1\");\nauto y = BigInt(\"10\");\nassert(x);\nassert(y);\n\n// Zero value is regarded as false\nauto z = BigInt(\"0\");\nassert(!z);\n\n\n---\n",
						"name": "opCast"
					},
					{
						"kind": "template",
						"line": 574,
						"constraint": "is(Unqual!T == BigInt)",
						"members": [
							{
								"kind": "function",
								"line": 574,
								"endchar": 5,
								"char": 7,
								"type": "const pure nothrow @nogc T()",
								"name": "opCast",
								"endline": 576
							}
						],
						"char": 7,
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"comment": "        Implements casting to/from qualified BigInt's.\n\n        Warning: Casting to/from $(D const) or $(D immutable) may break type\n        system guarantees. Use with care.\nExample:\n\n---\nconst(BigInt) x = BigInt(\"123\");\nBigInt y = cast() x;    // cast away const\nassert(y == x);\n\n\n---\n",
						"name": "opCast"
					},
					{
						"kind": "function",
						"line": 593,
						"deco": "xFNaNbNiKxS3std6bigint6BigIntZi",
						"endchar": 5,
						"char": 9,
						"parameters": [
							{
								"deco": "xS3std6bigint6BigInt",
								"storageClass": [
									"ref"
								],
								"name": "y"
							}
						],
						"name": "opCmp",
						"comment": "        Implements 3-way comparisons of BigInt with BigInt or BigInt with\n        built-in integers.\nExample:\n\n---\nauto x = BigInt(\"100\");\nauto y = BigInt(\"10\");\nint z = 50;\nconst int w = 200;\n\nassert(y < x);\nassert(x > z);\nassert(z > y);\nassert(x < w);\n\n\n---\n",
						"originalType": "const pure nothrow @nogc int(ref const BigInt y)",
						"endline": 597
					},
					{
						"kind": "template",
						"line": 600,
						"constraint": "isIntegral!T",
						"members": [
							{
								"kind": "function",
								"line": 600,
								"endchar": 5,
								"char": 9,
								"type": "const pure nothrow @nogc int(T y)",
								"parameters": [
									{
										"type": "T",
										"name": "y"
									}
								],
								"name": "opCmp",
								"endline": 606
							}
						],
						"char": 9,
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"comment": "ditto\n",
						"name": "opCmp"
					},
					{
						"kind": "template",
						"line": 608,
						"members": [
							{
								"kind": "function",
								"line": 608,
								"endchar": 5,
								"char": 9,
								"type": "const pure nothrow @nogc int(const T y)",
								"parameters": [
									{
										"storageClass": [
											"const"
										],
										"type": "T",
										"name": "y"
									}
								],
								"name": "opCmp",
								"endline": 614
							}
						],
						"char": 9,
						"parameters": [
							{
								"kind": "type",
								"deco": "S3std6bigint6BigInt",
								"name": "T"
							}
						],
						"comment": "ditto\n",
						"name": "opCmp"
					},
					{
						"kind": "function",
						"line": 634,
						"deco": "xFNaNbNiNfZl",
						"endchar": 5,
						"char": 10,
						"name": "toLong",
						"comment": "        Returns: The value of this BigInt as a long, or +/- long.max if outside\n        the representable range.\nExample:\n\n---\nauto b = BigInt(\"12345\");\nlong l = b.toLong();\nassert(l == 12345);\n\n\n---\n",
						"endline": 640
					},
					{
						"kind": "function",
						"line": 654,
						"deco": "xFNaNbNiNfZi",
						"endchar": 5,
						"char": 9,
						"name": "toInt",
						"comment": "        Returns: The value of this BigInt as an int, or +/- int.max if outside\n        the representable range.\nExample:\n\n---\nauto big = BigInt(\"5_000_000\");\nauto i = big.toInt();\nassert(i == 5_000_000);\n\n// Numbers that are too big to fit into an int will be clamped to int.max.\nauto tooBig = BigInt(\"5_000_000_000\");\ni = tooBig.toInt();\nassert(i == int.max);\n\n\n---\n",
						"endline": 660
					},
					{
						"kind": "function",
						"line": 677,
						"deco": "xFNaNbNdNiNfZm",
						"endchar": 5,
						"char": 22,
						"name": "uintLength",
						"comment": "Number of significant uints which are used in storing this number.\n\nThe absolute value of this BigInt is always < 2^^(32*uintLength)\n",
						"originalType": "const pure nothrow @nogc @property @safe size_t()",
						"endline": 680
					},
					{
						"kind": "function",
						"line": 684,
						"deco": "xFNaNbNdNiNfZm",
						"endchar": 5,
						"char": 22,
						"name": "ulongLength",
						"comment": "Number of significant ulongs which are used in storing this number.\n\nThe absolute value of this BigInt is always < 2^^(64*ulongLength)\n",
						"originalType": "const pure nothrow @nogc @property @safe size_t()",
						"endline": 687
					},
					{
						"kind": "function",
						"line": 704,
						"deco": "xFMDFAxaZvAyaZv",
						"endchar": 5,
						"char": 10,
						"parameters": [
							{
								"deco": "DFAxaZv",
								"storageClass": [
									"scope"
								],
								"name": "sink"
							},
							{
								"deco": "Aya",
								"name": "formatString"
							}
						],
						"name": "toString",
						"comment": " Convert the BigInt to string, passing it to the given sink.\n\n Params:\n  sink = A delegate for accepting possibly piecewise segments of the\n      formatted string.\n  formatString = A format string specifying the output format.\n\n $(TABLE  Available output formats:,\n $(TR $(TD \"d\") $(TD  Decimal))\n $(TR $(TD \"x\") $(TD  Hexadecimal, lower case))\n $(TR $(TD \"X\") $(TD  Hexadecimal, upper case))\n $(TR $(TD \"s\") $(TD  Default formatting (same as \"d\") ))\n $(TR $(TD null) $(TD Default formatting (same as \"d\") ))\n )\nExample:\n$(D toString) is rarely directly invoked; the usual way of using it is via\n        $(LINK2 std_format.html#format, std.format.format):\n---\nimport std.format : format;\n\nauto x = BigInt(\"1_000_000\");\nx *= 12345;\n\nassert(format(\"%d\", x) == \"12345000000\");\nassert(format(\"%X\", x) == \"2_DFD1C040\");\n\n\n---\n",
						"endline": 709
					},
					{
						"kind": "function",
						"line": 712,
						"deco": "xFMDFAxaZvKS3std6format18__T10FormatSpecTaZ10FormatSpecZv",
						"endchar": 5,
						"char": 10,
						"parameters": [
							{
								"deco": "DFAxaZv",
								"storageClass": [
									"scope"
								],
								"name": "sink"
							},
							{
								"deco": "S3std6format18__T10FormatSpecTaZ10FormatSpec",
								"storageClass": [
									"ref"
								],
								"name": "f"
							}
						],
						"name": "toString",
						"comment": "ditto\n",
						"endline": 759
					},
					{
						"kind": "function",
						"line": 781,
						"deco": "xFNbNfZm",
						"endchar": 5,
						"char": 12,
						"name": "toHash",
						"comment": "        Returns: A unique hash of the BigInt's value suitable for use in a hash\n        table.\nExample:\n$(D toHash) is rarely directly invoked; it is implicitly used when\n        BigInt is used as the key of an associative array.\n---\nstring[BigInt] aa;\naa[BigInt(123)] = \"abc\";\naa[BigInt(456)] = \"def\";\n\nassert(aa[BigInt(123)] == \"abc\");\nassert(aa[BigInt(456)] == \"def\");\n\n\n---\n",
						"originalType": "const nothrow @safe size_t()",
						"endline": 784
					}
				],
				"char": 1,
				"name": "BigInt",
				"comment": " A struct representing an arbitrary precision integer.\n\n All arithmetic operations are supported, except unsigned shift right (>>>).\n Bitwise operations (|, &, ^, ~) are supported, and behave as if BigInt was\n an infinite length 2's complement number.\n\n BigInt implements value semantics using copy-on-write. This means that\n assignment is cheap, but operations such as x++ will cause heap\n allocation. (But note that for most bigint operations, heap allocation is\n inevitable anyway.)\nExample:\n\n---\nBigInt a = \"9588669891916142\";\nBigInt b = \"7452469135154800\";\nauto c = a * b;\nassert(c == BigInt(\"71459266416693160362545788781600\"));\nauto d = b * a;\nassert(d == BigInt(\"71459266416693160362545788781600\"));\nassert(d == c);\nd = c * BigInt(\"794628672112\");\nassert(d == BigInt(\"56783581982794522489042432639320434378739200\"));\nauto e = c + d;\nassert(e == BigInt(\"56783581982865981755459125799682980167520800\"));\nauto f = d + c;\nassert(f == e);\nauto g = f - c;\nassert(g == d);\ng = f - d;\nassert(g == c);\ne = 12345678;\ng = c + e;\nauto h = g / b;\nauto i = g % b;\nassert(h == a);\nassert(i == e);\nBigInt j = \"-0x9A56_57f4_7B83_AB78\";\nj ^^= 11;\n\n---\n"
			},
			{
				"kind": "function",
				"line": 861,
				"deco": "FxS3std6bigint6BigIntZAya",
				"endchar": 1,
				"char": 8,
				"parameters": [
					{
						"deco": "xS3std6bigint6BigInt",
						"name": "x"
					}
				],
				"name": "toDecimalString",
				"comment": "Params:\n    x = The $(D BigInt) to convert to a decimal $(D string).\n\nReturns:\n    A $(D string) that represents the $(D BigInt) as a decimal number.\n\nExample:\n\n---\nauto x = BigInt(\"123\");\nx *= 1000;\nx += 456;\n\nauto xstr = x.toDecimalString();\nassert(xstr == \"123456\");\n\n---\n",
				"endline": 867
			},
			{
				"kind": "function",
				"line": 889,
				"deco": "FxS3std6bigint6BigIntZAya",
				"endchar": 1,
				"char": 8,
				"parameters": [
					{
						"deco": "xS3std6bigint6BigInt",
						"name": "x"
					}
				],
				"name": "toHex",
				"comment": "Params:\n    x = The $(D BigInt) to convert to a hexadecimal $(D string).\n\nReturns:\n    A $(D string) that represents the $(D BigInt) as a hexadecimal (base 16)\n    number.\n\nExample:\n\n---\nauto x = BigInt(\"123\");\nx *= 1000;\nx += 456;\n\nauto xstr = x.toHex();\nassert(xstr == \"1E240\");\n\n---\n",
				"endline": 895
			},
			{
				"kind": "template",
				"line": 918,
				"constraint": "isIntegral!T",
				"members": [
					{
						"kind": "function",
						"line": 918,
						"endchar": 1,
						"char": 12,
						"type": "Unsigned!T(T x)",
						"parameters": [
							{
								"type": "T",
								"name": "x"
							}
						],
						"name": "absUnsign",
						"endline": 933
					}
				],
				"char": 12,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": " Returns the absolute value of x converted to the corresponding unsigned\ntype.\n\nParams:\n    x = The integral value to return the absolute value of.\n\nReturns:\n    The absolute value of x.\n\n",
				"name": "absUnsign"
			}
		],
		"name": "std.bigint",
		"comment": " Arbitrary-precision ('bignum') arithmetic.\n\n Performance is optimized for numbers below ~1000 decimal digits.\n For X86 machines, highly optimised assembly routines are used.\n\n The following algorithms are currently implemented:\n $(UL\n $(LI Karatsuba multiplication)\n $(LI Squaring is optimized independently of multiplication)\n $(LI Divide-and-conquer division)\n $(LI Binary exponentiation)\n )\n\n For very large numbers, consider using the $(WEB gmplib.org, GMP library) instead.\n\n License:   $(WEB www.boost.org/LICENSE_1_0.txt, Boost License 1.0).\n Authors:   Don Clugston\n Source: $(PHOBOSSRC std/_bigint.d)\n"
	},
	{
		"kind": "module",
		"file": "../phobos/std/random.d",
		"members": [
			{
				"kind": "template",
				"line": 133,
				"members": [
					{
						"kind": "variable",
						"line": 135,
						"init": "isInputRange!Rng && is(typeof(Rng.front) == ElementType) && is(typeof(()\n{\nstatic assert(Rng.isUniformRandom);\n}\n))",
						"storageClass": [
							"enum"
						],
						"deco": "b",
						"char": 15,
						"name": "isUniformRNG"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "Rng"
					},
					{
						"kind": "type",
						"name": "ElementType"
					}
				],
				"comment": " Test if Rng is a random-number generator. The overload\n taking a ElementType also makes sure that the Rng generates\n values of that type.\n\n A random-number generator has at least the following features:\n $(UL\n   $(LI it's an InputRange)\n   $(LI it has a 'bool isUniformRandom' field readable in CTFE)\n )\n",
				"name": "isUniformRNG"
			},
			{
				"kind": "template",
				"line": 146,
				"members": [
					{
						"kind": "variable",
						"line": 148,
						"init": "isInputRange!Rng && is(typeof(()\n{\nstatic assert(Rng.isUniformRandom);\n}\n))",
						"storageClass": [
							"enum"
						],
						"deco": "b",
						"char": 15,
						"name": "isUniformRNG"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "Rng"
					}
				],
				"comment": " ditto\n",
				"name": "isUniformRNG"
			},
			{
				"kind": "template",
				"line": 164,
				"members": [
					{
						"kind": "variable",
						"line": 166,
						"init": "isUniformRNG!Rng && is(typeof(()\n{\nRng r = void;\nr.seed(SeedType.init);\n}\n))",
						"storageClass": [
							"enum"
						],
						"deco": "b",
						"char": 15,
						"name": "isSeedable"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "Rng"
					},
					{
						"kind": "type",
						"name": "SeedType"
					}
				],
				"comment": " Test if Rng is seedable. The overload\n taking a SeedType also makes sure that the Rng can be seeded with SeedType.\n\n A seedable random-number generator has the following additional features:\n $(UL\n   $(LI it has a 'seed(ElementType)' function)\n )\n",
				"name": "isSeedable"
			},
			{
				"kind": "template",
				"line": 175,
				"members": [
					{
						"kind": "variable",
						"line": 177,
						"init": "isUniformRNG!Rng && is(typeof(()\n{\nRng r = void;\nr.seed((typeof(r.front)).init);\n}\n))",
						"storageClass": [
							"enum"
						],
						"deco": "b",
						"char": 15,
						"name": "isSeedable"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "Rng"
					}
				],
				"comment": "ditto\n",
				"name": "isSeedable"
			},
			{
				"kind": "template",
				"line": 253,
				"constraint": "isUnsigned!UIntType",
				"members": [
					{
						"kind": "struct",
						"line": 253,
						"members": [
							{
								"kind": "variable",
								"line": 257,
								"init": "true",
								"storageClass": [
									"enum"
								],
								"deco": "b",
								"char": 15,
								"name": "isUniformRandom",
								"comment": "Mark this as a Rng\n"
							},
							{
								"kind": "variable",
								"line": 259,
								"init": "true",
								"storageClass": [
									"enum"
								],
								"deco": "b",
								"char": 15,
								"name": "hasFixedRange",
								"comment": "Does this generator have a fixed range? ($(D_PARAM true)).\n"
							},
							{
								"kind": "variable",
								"line": 261,
								"init": "c == 0 ? 1 : 0",
								"storageClass": [
									"enum"
								],
								"char": 19,
								"type": "UIntType",
								"name": "min",
								"comment": "Lowest generated value ($(D 1) if $(D c == 0), $(D 0) otherwise).\n"
							},
							{
								"kind": "variable",
								"line": 263,
								"init": "m - 1",
								"storageClass": [
									"enum"
								],
								"char": 19,
								"type": "UIntType",
								"name": "max",
								"comment": "Highest generated value ($(D modulus - 1)).\n"
							},
							{
								"kind": "variable",
								"line": 268,
								"init": "a",
								"storageClass": [
									"enum"
								],
								"char": 19,
								"type": "UIntType",
								"name": "multiplier",
								"comment": "The parameters of this distribution. The random number is $(D_PARAM x\n= (x * multipler + increment) % modulus).\n"
							},
							{
								"kind": "variable",
								"line": 270,
								"init": "c",
								"storageClass": [
									"enum"
								],
								"char": 19,
								"type": "UIntType",
								"name": "increment",
								"comment": "ditto\n"
							},
							{
								"kind": "variable",
								"line": 272,
								"init": "m",
								"storageClass": [
									"enum"
								],
								"char": 19,
								"type": "UIntType",
								"name": "modulus",
								"comment": "ditto\n"
							},
							{
								"kind": "constructor",
								"line": 354,
								"endchar": 5,
								"char": 5,
								"type": "pure @safe (UIntType x0)",
								"parameters": [
									{
										"type": "UIntType",
										"name": "x0"
									}
								],
								"name": "this",
								"comment": "Constructs a $(D_PARAM LinearCongruentialEngine) generator seeded with\n$(D x0).\n",
								"endline": 357
							},
							{
								"kind": "function",
								"line": 362,
								"endchar": 5,
								"char": 10,
								"type": "pure @safe void(UIntType x0 = 1)",
								"parameters": [
									{
										"default": "1",
										"type": "UIntType",
										"name": "x0"
									}
								],
								"name": "seed",
								"comment": "   (Re)seeds the generator.\n",
								"endline": 372
							},
							{
								"kind": "function",
								"line": 377,
								"endchar": 5,
								"char": 10,
								"type": "pure nothrow @safe void()",
								"name": "popFront",
								"comment": "   Advances the random sequence.\n",
								"endline": 408
							},
							{
								"kind": "function",
								"line": 413,
								"endchar": 5,
								"char": 24,
								"type": "const pure nothrow @property @safe UIntType()",
								"name": "front",
								"comment": "   Returns the current number in the random sequence.\n",
								"endline": 416
							},
							{
								"kind": "function",
								"line": 419,
								"endchar": 5,
								"char": 28,
								"type": "pure nothrow @property @safe typeof(this)()",
								"name": "save",
								"comment": "\n",
								"endline": 422
							},
							{
								"kind": "variable",
								"line": 427,
								"init": "false",
								"storageClass": [
									"enum"
								],
								"deco": "b",
								"char": 15,
								"name": "empty",
								"comment": "Always $(D false) (random generators are infinite ranges).\n"
							},
							{
								"kind": "function",
								"line": 432,
								"endchar": 5,
								"char": 10,
								"type": "const pure nothrow @safe bool(ref const LinearCongruentialEngine rhs)",
								"parameters": [
									{
										"storageClass": [
											"const",
											"ref"
										],
										"type": "LinearCongruentialEngine",
										"name": "rhs"
									}
								],
								"name": "opEquals",
								"comment": "   Compares against $(D_PARAM rhs) for equality.\n",
								"endline": 435
							}
						],
						"char": 1,
						"name": "LinearCongruentialEngine"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "UIntType"
					},
					{
						"kind": "value",
						"type": "UIntType",
						"name": "a"
					},
					{
						"kind": "value",
						"type": "UIntType",
						"name": "c"
					},
					{
						"kind": "value",
						"type": "UIntType",
						"name": "m"
					}
				],
				"comment": "Linear Congruential generator.\n",
				"name": "LinearCongruentialEngine"
			},
			{
				"kind": "alias",
				"line": 460,
				"deco": "S3std6random57__T24LinearCongruentialEngineTkVki16807Vki0Vki2147483647Z24LinearCongruentialEngine",
				"char": 1,
				"name": "MinstdRand0",
				"comment": "Define $(D_PARAM LinearCongruentialEngine) generators with well-chosen\nparameters. $(D MinstdRand0) implements Park and Miller's \"minimal\nstandard\" $(WEB\nwikipedia.org/wiki/Park%E2%80%93Miller_random_number_generator,\ngenerator) that uses 16807 for the multiplier. $(D MinstdRand)\nimplements a variant that has slightly better spectral behavior by\nusing the multiplier 48271. Both generators are rather simplistic.\n\nExample:\n\n----\n// seed with a constant\nauto rnd0 = MinstdRand0(1);\nauto n = rnd0.front; // same for each run\n// Seed with an unpredictable value\nrnd0.seed(unpredictableSeed);\nn = rnd0.front; // different across runs\n----\n"
			},
			{
				"kind": "alias",
				"line": 462,
				"deco": "S3std6random57__T24LinearCongruentialEngineTkVki48271Vki0Vki2147483647Z24LinearCongruentialEngine",
				"char": 1,
				"name": "MinstdRand",
				"comment": "ditto\n"
			},
			{
				"kind": "template",
				"line": 532,
				"constraint": "isUnsigned!UIntType",
				"members": [
					{
						"kind": "struct",
						"line": 532,
						"members": [
							{
								"kind": "variable",
								"line": 545,
								"init": "true",
								"storageClass": [
									"enum"
								],
								"deco": "b",
								"char": 15,
								"name": "isUniformRandom",
								"comment": "Mark this as a Rng\n"
							},
							{
								"kind": "variable",
								"line": 550,
								"init": "w",
								"storageClass": [
									"enum"
								],
								"char": 19,
								"type": "size_t",
								"name": "wordSize",
								"comment": "Parameters for the generator.\n"
							},
							{
								"kind": "variable",
								"line": 551,
								"init": "n",
								"storageClass": [
									"enum"
								],
								"char": 19,
								"type": "size_t",
								"name": "stateSize",
								"comment": "ditto\n"
							},
							{
								"kind": "variable",
								"line": 552,
								"init": "m",
								"storageClass": [
									"enum"
								],
								"char": 19,
								"type": "size_t",
								"name": "shiftSize",
								"comment": "ditto\n"
							},
							{
								"kind": "variable",
								"line": 553,
								"init": "r",
								"storageClass": [
									"enum"
								],
								"char": 19,
								"type": "size_t",
								"name": "maskBits",
								"comment": "ditto\n"
							},
							{
								"kind": "variable",
								"line": 554,
								"init": "a",
								"storageClass": [
									"enum"
								],
								"char": 19,
								"type": "UIntType",
								"name": "xorMask",
								"comment": "ditto\n"
							},
							{
								"kind": "variable",
								"line": 555,
								"init": "u",
								"storageClass": [
									"enum"
								],
								"char": 19,
								"type": "UIntType",
								"name": "temperingU",
								"comment": "ditto\n"
							},
							{
								"kind": "variable",
								"line": 556,
								"init": "s",
								"storageClass": [
									"enum"
								],
								"char": 19,
								"type": "size_t",
								"name": "temperingS",
								"comment": "ditto\n"
							},
							{
								"kind": "variable",
								"line": 557,
								"init": "b",
								"storageClass": [
									"enum"
								],
								"char": 19,
								"type": "UIntType",
								"name": "temperingB",
								"comment": "ditto\n"
							},
							{
								"kind": "variable",
								"line": 558,
								"init": "t",
								"storageClass": [
									"enum"
								],
								"char": 19,
								"type": "size_t",
								"name": "temperingT",
								"comment": "ditto\n"
							},
							{
								"kind": "variable",
								"line": 559,
								"init": "c",
								"storageClass": [
									"enum"
								],
								"char": 19,
								"type": "UIntType",
								"name": "temperingC",
								"comment": "ditto\n"
							},
							{
								"kind": "variable",
								"line": 560,
								"init": "l",
								"storageClass": [
									"enum"
								],
								"char": 19,
								"type": "size_t",
								"name": "temperingL",
								"comment": "ditto\n"
							},
							{
								"kind": "variable",
								"line": 563,
								"init": "0",
								"storageClass": [
									"enum"
								],
								"char": 19,
								"type": "UIntType",
								"name": "min",
								"comment": "Smallest generated value (0).\n"
							},
							{
								"kind": "variable",
								"line": 565,
								"init": "UIntType.max >> UIntType.sizeof * 8u - w",
								"storageClass": [
									"enum"
								],
								"char": 19,
								"type": "UIntType",
								"name": "max",
								"comment": "Largest generated value.\n"
							},
							{
								"kind": "variable",
								"line": 568,
								"init": "5489u",
								"storageClass": [
									"enum"
								],
								"char": 19,
								"type": "UIntType",
								"name": "defaultSeed",
								"comment": "The default seed value.\n"
							},
							{
								"kind": "constructor",
								"line": 573,
								"endchar": 5,
								"char": 5,
								"type": "pure nothrow @safe (UIntType value)",
								"parameters": [
									{
										"type": "UIntType",
										"name": "value"
									}
								],
								"name": "this",
								"comment": "   Constructs a MersenneTwisterEngine object.\n",
								"endline": 576
							},
							{
								"kind": "template",
								"line": 584,
								"members": [
									{
										"kind": "function",
										"line": 584,
										"endchar": 5,
										"char": 10,
										"type": "pure nothrow @safe void(UIntType value = defaultSeed)",
										"parameters": [
											{
												"default": "defaultSeed",
												"type": "UIntType",
												"name": "value"
											}
										],
										"name": "seed",
										"endline": 608
									}
								],
								"char": 10,
								"parameters": [],
								"comment": "   Seeds a MersenneTwisterEngine object.\n   Note:\n   This seed function gives 2^32 starting points. To allow the RNG to be started in any one of its\n   internal states use the seed overload taking an InputRange.\n",
								"name": "seed"
							},
							{
								"kind": "template",
								"line": 623,
								"constraint": "isInputRange!T && is(Unqual!(ElementType!T) == UIntType)",
								"members": [
									{
										"kind": "function",
										"line": 623,
										"endchar": 5,
										"char": 10,
										"type": "void(T range)",
										"parameters": [
											{
												"type": "T",
												"name": "range"
											}
										],
										"name": "seed",
										"endline": 640
									}
								],
								"char": 10,
								"parameters": [
									{
										"kind": "type",
										"name": "T"
									}
								],
								"comment": "   Seeds a MersenneTwisterEngine object using an InputRange.\n\n   Throws:\n   $(D Exception) if the InputRange didn't provide enough elements to seed the generator.\n   The number of elements required is the 'n' template parameter of the MersenneTwisterEngine struct.\n\n   Examples:\n   ----------------\n   Mt19937 gen;\n   gen.seed(map!((a) => unpredictableSeed)(repeat(0)));\n   ----------------\n",
								"name": "seed"
							},
							{
								"kind": "function",
								"line": 645,
								"endchar": 5,
								"char": 10,
								"type": "pure nothrow @safe void()",
								"name": "popFront",
								"comment": "   Advances the generator.\n",
								"endline": 691
							},
							{
								"kind": "function",
								"line": 696,
								"endchar": 5,
								"char": 24,
								"type": "pure nothrow @property @safe UIntType()",
								"name": "front",
								"comment": "   Returns the current random value.\n",
								"endline": 700
							},
							{
								"kind": "function",
								"line": 703,
								"endchar": 5,
								"char": 28,
								"type": "pure nothrow @property @safe typeof(this)()",
								"name": "save",
								"comment": "\n",
								"endline": 706
							},
							{
								"kind": "variable",
								"line": 711,
								"init": "false",
								"storageClass": [
									"enum"
								],
								"deco": "b",
								"char": 15,
								"name": "empty",
								"comment": "Always $(D false).\n"
							}
						],
						"char": 1,
						"name": "MersenneTwisterEngine"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "UIntType"
					},
					{
						"kind": "value",
						"deco": "m",
						"name": "w"
					},
					{
						"kind": "value",
						"deco": "m",
						"name": "n"
					},
					{
						"kind": "value",
						"deco": "m",
						"name": "m"
					},
					{
						"kind": "value",
						"deco": "m",
						"name": "r"
					},
					{
						"kind": "value",
						"type": "UIntType",
						"name": "a"
					},
					{
						"kind": "value",
						"deco": "m",
						"name": "u"
					},
					{
						"kind": "value",
						"deco": "m",
						"name": "s"
					},
					{
						"kind": "value",
						"type": "UIntType",
						"name": "b"
					},
					{
						"kind": "value",
						"deco": "m",
						"name": "t"
					},
					{
						"kind": "value",
						"type": "UIntType",
						"name": "c"
					},
					{
						"kind": "value",
						"deco": "m",
						"name": "l"
					}
				],
				"comment": "The $(LUCKY Mersenne Twister) generator.\n",
				"name": "MersenneTwisterEngine"
			},
			{
				"kind": "alias",
				"line": 737,
				"deco": "S3std6random109__T21MersenneTwisterEngineTkVmi32Vmi624Vmi397Vmi31Vki2567483615Vmi11Vmi7Vki2636928640Vmi15Vki4022730752Vmi18Z21MersenneTwisterEngine",
				"char": 1,
				"name": "Mt19937",
				"comment": "A $(D MersenneTwisterEngine) instantiated with the parameters of the\noriginal engine $(WEB math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt.html,\nMT19937), generating uniformly-distributed 32-bit numbers with a\nperiod of 2 to the power of 19937. Recommended for random number\ngeneration unless memory is severely restricted, in which case a $(D\nLinearCongruentialEngine) would be the generator of choice.\n\nExample:\n\n----\n// seed with a constant\nMt19937 gen;\nauto n = gen.front; // same for each run\n// Seed with an unpredictable value\ngen.seed(unpredictableSeed);\nn = gen.front; // different across runs\n----\n"
			},
			{
				"kind": "template",
				"line": 829,
				"constraint": "isUnsigned!UIntType",
				"members": [
					{
						"kind": "struct",
						"line": 829,
						"members": [
							{
								"kind": "variable",
								"line": 838,
								"init": "true",
								"storageClass": [
									"enum"
								],
								"deco": "b",
								"char": 15,
								"name": "isUniformRandom",
								"comment": "Mark this as a Rng\n"
							},
							{
								"kind": "variable",
								"line": 840,
								"init": "false",
								"storageClass": [
									"enum"
								],
								"char": 10,
								"name": "empty",
								"comment": "Always $(D false) (random generators are infinite ranges).\n"
							},
							{
								"kind": "variable",
								"line": 842,
								"init": "0",
								"storageClass": [
									"enum"
								],
								"char": 19,
								"type": "UIntType",
								"name": "min",
								"comment": "Smallest generated value.\n"
							},
							{
								"kind": "variable",
								"line": 844,
								"init": "UIntType.max",
								"storageClass": [
									"enum"
								],
								"char": 19,
								"type": "UIntType",
								"name": "max",
								"comment": "Largest generated value.\n"
							},
							{
								"kind": "constructor",
								"line": 877,
								"endchar": 5,
								"char": 13,
								"type": "pure nothrow @safe (UIntType x0)",
								"parameters": [
									{
										"type": "UIntType",
										"name": "x0"
									}
								],
								"name": "this",
								"comment": " Constructs a $(D XorshiftEngine) generator seeded with $(D_PARAM x0).\n",
								"endline": 880
							},
							{
								"kind": "function",
								"line": 887,
								"endchar": 5,
								"char": 18,
								"type": "pure nothrow @safe void(UIntType x0)",
								"parameters": [
									{
										"type": "UIntType",
										"name": "x0"
									}
								],
								"name": "seed",
								"comment": " (Re)seeds the generator.\n",
								"endline": 897
							},
							{
								"kind": "function",
								"line": 904,
								"endchar": 5,
								"char": 22,
								"type": "const pure nothrow @property @safe UIntType()",
								"name": "front",
								"comment": " Returns the current number in the random sequence.\n",
								"endline": 910
							},
							{
								"kind": "function",
								"line": 917,
								"endchar": 5,
								"char": 18,
								"type": "pure nothrow @safe void()",
								"name": "popFront",
								"comment": " Advances the random sequence.\n",
								"endline": 972
							},
							{
								"kind": "function",
								"line": 979,
								"endchar": 5,
								"char": 26,
								"type": "pure nothrow @property @safe typeof(this)()",
								"name": "save",
								"comment": " Captures a range state.\n",
								"endline": 982
							},
							{
								"kind": "function",
								"line": 989,
								"endchar": 5,
								"char": 18,
								"type": "const pure nothrow @safe bool(ref const XorshiftEngine rhs)",
								"parameters": [
									{
										"storageClass": [
											"const",
											"ref"
										],
										"type": "XorshiftEngine",
										"name": "rhs"
									}
								],
								"name": "opEquals",
								"comment": " Compares against $(D_PARAM rhs) for equality.\n",
								"endline": 992
							}
						],
						"char": 1,
						"name": "XorshiftEngine"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "UIntType"
					},
					{
						"kind": "value",
						"type": "UIntType",
						"name": "bits"
					},
					{
						"kind": "value",
						"type": "UIntType",
						"name": "a"
					},
					{
						"kind": "value",
						"type": "UIntType",
						"name": "b"
					},
					{
						"kind": "value",
						"type": "UIntType",
						"name": "c"
					}
				],
				"comment": " Xorshift generator using 32bit algorithm.\n\n Implemented according to $(WEB www.jstatsoft.org/v08/i14/paper, Xorshift RNGs).\n\n $(BOOKTABLE $(TEXTWITHCOMMAS Supporting bits are below, $(D bits) means second parameter of XorshiftEngine.),\n  $(TR $(TH bits) $(TH period))\n  $(TR $(TD 32)   $(TD 2^32 - 1))\n  $(TR $(TD 64)   $(TD 2^64 - 1))\n  $(TR $(TD 96)   $(TD 2^96 - 1))\n  $(TR $(TD 128)  $(TD 2^128 - 1))\n  $(TR $(TD 160)  $(TD 2^160 - 1))\n  $(TR $(TD 192)  $(TD 2^192 - 2^32))\n )\n",
				"name": "XorshiftEngine"
			},
			{
				"kind": "alias",
				"line": 1036,
				"deco": "S3std6random42__T14XorshiftEngineTkVki32Vki13Vki17Vki15Z14XorshiftEngine",
				"char": 1,
				"name": "Xorshift32",
				"comment": " Define $(D XorshiftEngine) generators with well-chosen parameters. See each bits examples of \"Xorshift RNGs\".\n $(D Xorshift) is a Xorshift128's alias because 128bits implementation is mostly used.\n\n Example:\n -----\n // Seed with a constant\n auto rnd = Xorshift(1);\n auto num = rnd.front;  // same for each run\n\n // Seed with an unpredictable value\n rnd.seed(unpredictableSeed());\n num = rnd.front; // different across runs\n -----\n"
			},
			{
				"kind": "alias",
				"line": 1037,
				"deco": "S3std6random42__T14XorshiftEngineTkVki64Vki10Vki13Vki10Z14XorshiftEngine",
				"char": 1,
				"name": "Xorshift64",
				"comment": "ditto\n"
			},
			{
				"kind": "alias",
				"line": 1038,
				"deco": "S3std6random41__T14XorshiftEngineTkVki96Vki10Vki5Vki26Z14XorshiftEngine",
				"char": 1,
				"name": "Xorshift96",
				"comment": "ditto\n"
			},
			{
				"kind": "alias",
				"line": 1039,
				"deco": "S3std6random42__T14XorshiftEngineTkVki128Vki11Vki8Vki19Z14XorshiftEngine",
				"char": 1,
				"name": "Xorshift128",
				"comment": "ditto\n"
			},
			{
				"kind": "alias",
				"line": 1040,
				"deco": "S3std6random40__T14XorshiftEngineTkVki160Vki2Vki1Vki4Z14XorshiftEngine",
				"char": 1,
				"name": "Xorshift160",
				"comment": "ditto\n"
			},
			{
				"kind": "alias",
				"line": 1041,
				"deco": "S3std6random40__T14XorshiftEngineTkVki192Vki2Vki1Vki4Z14XorshiftEngine",
				"char": 1,
				"name": "Xorshift192",
				"comment": "ditto\n"
			},
			{
				"kind": "alias",
				"line": 1042,
				"deco": "S3std6random42__T14XorshiftEngineTkVki128Vki11Vki8Vki19Z14XorshiftEngine",
				"char": 1,
				"name": "Xorshift",
				"comment": "ditto\n"
			},
			{
				"kind": "function",
				"line": 1133,
				"deco": "FNdNeZk",
				"endchar": 1,
				"char": 16,
				"name": "unpredictableSeed",
				"comment": "A \"good\" seed for initializing random number engines. Initializing\nwith $(D_PARAM unpredictableSeed) makes engines generate different\nrandom number sequences every run.\n\nReturns:\nA single unsigned integer seed value, different on each successive call\n\nExample:\n\n----\nauto rnd = Random(unpredictableSeed);\nauto n = rnd.front;\n...\n----\n",
				"endline": 1146
			},
			{
				"kind": "alias",
				"line": 1163,
				"deco": "S3std6random109__T21MersenneTwisterEngineTkVmi32Vmi624Vmi397Vmi31Vki2567483615Vmi11Vmi7Vki2636928640Vmi15Vki4022730752Vmi18Z21MersenneTwisterEngine",
				"char": 1,
				"name": "Random",
				"comment": "The \"default\", \"favorite\", \"suggested\" random number generator type on\nthe current platform. It is an alias for one of the previously-defined\ngenerators. You may want to use it if (1) you need to generate some\nnice random numbers, and (2) you don't care for the minutiae of the\nmethod being used.\n"
			},
			{
				"kind": "function",
				"line": 1181,
				"deco": "FNcNdNfZS3std6random109__T21MersenneTwisterEngineTkVmi32Vmi624Vmi397Vmi31Vki2567483615Vmi11Vmi7Vki2636928640Vmi15Vki4022730752Vmi18Z21MersenneTwisterEngine",
				"endchar": 1,
				"char": 22,
				"name": "rndGen",
				"comment": "Global random number generator used by various functions in this\nmodule whenever no generator is specified. It is allocated per-thread\nand initialized to an unpredictable value for each thread.\n\nReturns:\nA singleton instance of the default random number generator\n",
				"originalType": "@property ref @safe Random()",
				"endline": 1197
			},
			{
				"kind": "template",
				"line": 1228,
				"constraint": "!is(CommonType!(T1, T2) == void)",
				"members": [
					{
						"kind": "function",
						"line": 1228,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "(T1 a, T2 b)",
						"parameters": [
							{
								"type": "T1",
								"name": "a"
							},
							{
								"type": "T2",
								"name": "b"
							}
						],
						"name": "uniform",
						"endline": 1232
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "value",
						"defaultValue": "\"[)\"",
						"deco": "Aya",
						"name": "boundaries"
					},
					{
						"kind": "type",
						"name": "T1"
					},
					{
						"kind": "type",
						"name": "T2"
					}
				],
				"comment": "Generates a number between $(D a) and $(D b). The $(D boundaries)\nparameter controls the shape of the interval (open vs. closed on\neither side). Valid values for $(D boundaries) are $(D \"[]\"), $(D\n\"$(LPAREN)]\"), $(D \"[$(RPAREN)\"), and $(D \"()\"). The default interval\nis closed to the left and open to the right. The version that does not\ntake $(D urng) uses the default generator $(D rndGen).\n\nParams:\n    a = lower bound of the _uniform distribution\n    b = upper bound of the _uniform distribution\n    urng = (optional) random number generator to use;\n           if not specified, defaults to $(D rndGen)\n\nReturns:\n    A single random variate drawn from the _uniform distribution\n    between $(D a) and $(D b), whose type is the common type of\n    these parameters\n\nExample:\n\n----\nauto gen = Random(unpredictableSeed);\n// Generate an integer in [0, 1023]\nauto a = uniform(0, 1024, gen);\n// Generate a float in [0, 1)\nauto a = uniform(0.0f, 1.0f, gen);\n----\n",
				"name": "uniform"
			},
			{
				"kind": "template",
				"line": 1265,
				"constraint": "isFloatingPoint!(CommonType!(T1, T2)) && isUniformRNG!UniformRandomNumberGenerator",
				"members": [
					{
						"kind": "function",
						"line": 1265,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "(T1 a, T2 b, ref UniformRandomNumberGenerator urng)",
						"parameters": [
							{
								"type": "T1",
								"name": "a"
							},
							{
								"type": "T2",
								"name": "b"
							},
							{
								"storageClass": [
									"ref"
								],
								"type": "UniformRandomNumberGenerator",
								"name": "urng"
							}
						],
						"name": "uniform",
						"endline": 1299
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "value",
						"defaultValue": "\"[)\"",
						"deco": "Aya",
						"name": "boundaries"
					},
					{
						"kind": "type",
						"name": "T1"
					},
					{
						"kind": "type",
						"name": "T2"
					},
					{
						"kind": "type",
						"name": "UniformRandomNumberGenerator"
					}
				],
				"comment": "ditto\n",
				"name": "uniform"
			},
			{
				"kind": "template",
				"line": 1574,
				"constraint": "!is(T == enum) && (isIntegral!T || isSomeChar!T) && isUniformRNG!UniformRandomNumberGenerator",
				"members": [
					{
						"kind": "function",
						"line": 1574,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "(ref UniformRandomNumberGenerator urng)",
						"parameters": [
							{
								"storageClass": [
									"ref"
								],
								"type": "UniformRandomNumberGenerator",
								"name": "urng"
							}
						],
						"name": "uniform",
						"endline": 1601
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "type",
						"name": "UniformRandomNumberGenerator"
					}
				],
				"comment": "Generates a uniformly-distributed number in the range $(D [T.min,\nT.max]) for any integral or character type $(D T). If no random\nnumber generator is passed, uses the default $(D rndGen).\n\nParams:\n    urng = (optional) random number generator to use;\n           if not specified, defaults to $(D rndGen)\n\nReturns:\n    Random variate drawn from the _uniform distribution across all\n    possible values of the integral or character type $(D T).\n",
				"name": "uniform"
			},
			{
				"kind": "template",
				"line": 1604,
				"constraint": "!is(T == enum) && (isIntegral!T || isSomeChar!T)",
				"members": [
					{
						"kind": "function",
						"line": 1604,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "()",
						"name": "uniform",
						"endline": 1608
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": "Ditto\n",
				"name": "uniform"
			},
			{
				"kind": "template",
				"line": 1642,
				"constraint": "is(E == enum) && isUniformRNG!UniformRandomNumberGenerator",
				"members": [
					{
						"kind": "function",
						"line": 1642,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "(ref UniformRandomNumberGenerator urng)",
						"parameters": [
							{
								"storageClass": [
									"ref"
								],
								"type": "UniformRandomNumberGenerator",
								"name": "urng"
							}
						],
						"name": "uniform",
						"endline": 1648
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "E"
					},
					{
						"kind": "type",
						"name": "UniformRandomNumberGenerator"
					}
				],
				"comment": "Returns a uniformly selected member of enum $(D E). If no random number\ngenerator is passed, uses the default $(D rndGen).\n\nParams:\n    urng = (optional) random number generator to use;\n           if not specified, defaults to $(D rndGen)\n\nReturns:\n    Random variate drawn with equal probability from any\n    of the possible values of the enum $(D E).\nExample:\n\n---\nenum Fruit { apple, mango, pear }\nauto randFruit = uniform!Fruit();\n\n---\n",
				"name": "uniform"
			},
			{
				"kind": "template",
				"line": 1651,
				"constraint": "is(E == enum)",
				"members": [
					{
						"kind": "function",
						"line": 1651,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "()",
						"name": "uniform",
						"endline": 1655
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "E"
					}
				],
				"comment": "Ditto\n",
				"name": "uniform"
			},
			{
				"kind": "template",
				"line": 1695,
				"constraint": "isFloatingPoint!T",
				"members": [
					{
						"kind": "function",
						"line": 1695,
						"endchar": 1,
						"char": 3,
						"type": "T()",
						"name": "uniform01",
						"endline": 1699
					}
				],
				"char": 3,
				"parameters": [
					{
						"kind": "type",
						"defaultDeco": "d",
						"name": "T"
					}
				],
				"comment": " Generates a uniformly-distributed floating point number of type\n $(D T) in the range [0, 1$(RPAREN).  If no random number generator is\n specified, the default RNG $(D rndGen) will be used as the source\n of randomness.\n\n $(D uniform01) offers a faster generation of random variates than\n the equivalent $(D uniform!\"[$(RPAREN)\"(0.0, 1.0)) and so may be preferred\n for some applications.\n\n Params:\n     urng = (optional) random number generator to use;\n            if not specified, defaults to $(D rndGen)\n\n Returns:\n     Floating-point random variate of type $(D T) drawn from the _uniform\n     distribution across the half-open interval [0, 1$(RPAREN).\n\n",
				"name": "uniform01"
			},
			{
				"kind": "template",
				"line": 1702,
				"constraint": "isFloatingPoint!T && isUniformRNG!UniformRNG",
				"members": [
					{
						"kind": "function",
						"line": 1702,
						"endchar": 1,
						"char": 3,
						"type": "T(ref UniformRNG rng)",
						"parameters": [
							{
								"storageClass": [
									"ref"
								],
								"type": "UniformRNG",
								"name": "rng"
							}
						],
						"name": "uniform01",
						"endline": 1755
					}
				],
				"char": 3,
				"parameters": [
					{
						"kind": "type",
						"defaultDeco": "d",
						"name": "T"
					},
					{
						"kind": "type",
						"name": "UniformRNG"
					}
				],
				"comment": "ditto\n",
				"name": "uniform01"
			},
			{
				"kind": "template",
				"line": 1797,
				"constraint": "isFloatingPoint!F",
				"members": [
					{
						"kind": "function",
						"line": 1797,
						"endchar": 1,
						"char": 5,
						"type": "F[](size_t n, F[] useThis = null)",
						"parameters": [
							{
								"type": "size_t",
								"name": "n"
							},
							{
								"default": "null",
								"type": "F[]",
								"name": "useThis"
							}
						],
						"name": "uniformDistribution",
						"endline": 1808
					}
				],
				"char": 5,
				"parameters": [
					{
						"kind": "type",
						"defaultDeco": "d",
						"name": "F"
					}
				],
				"comment": "Generates a uniform probability distribution of size $(D n), i.e., an\narray of size $(D n) of positive numbers of type $(D F) that sum to\n$(D 1). If $(D useThis) is provided, it is used as storage.\n",
				"name": "uniformDistribution"
			},
			{
				"kind": "template",
				"line": 1834,
				"constraint": "isRandomAccessRange!Range && isUniformRNG!RandomGen",
				"members": [
					{
						"kind": "function",
						"line": 1834,
						"endchar": 1,
						"char": 6,
						"type": "void(Range r, ref RandomGen gen)",
						"parameters": [
							{
								"type": "Range",
								"name": "r"
							},
							{
								"storageClass": [
									"ref"
								],
								"type": "RandomGen",
								"name": "gen"
							}
						],
						"name": "randomShuffle",
						"endline": 1838
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "Range"
					},
					{
						"kind": "type",
						"name": "RandomGen"
					}
				],
				"comment": "Shuffles elements of $(D r) using $(D gen) as a shuffler. $(D r) must be\na random-access range with length.  If no RNG is specified, $(D rndGen)\nwill be used.\n\nParams:\n    r = random-access range whose elements are to be shuffled\n    gen = (optional) random number generator to use; if not\n          specified, defaults to $(D rndGen)\n",
				"name": "randomShuffle"
			},
			{
				"kind": "template",
				"line": 1841,
				"constraint": "isRandomAccessRange!Range",
				"members": [
					{
						"kind": "function",
						"line": 1841,
						"endchar": 1,
						"char": 6,
						"type": "void(Range r)",
						"parameters": [
							{
								"type": "Range",
								"name": "r"
							}
						],
						"name": "randomShuffle",
						"endline": 1845
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "Range"
					}
				],
				"comment": "ditto\n",
				"name": "randomShuffle"
			},
			{
				"kind": "template",
				"line": 1883,
				"constraint": "isRandomAccessRange!Range && isUniformRNG!RandomGen",
				"members": [
					{
						"kind": "function",
						"line": 1883,
						"endchar": 1,
						"char": 6,
						"type": "void(Range r, in size_t n, ref RandomGen gen)",
						"parameters": [
							{
								"type": "Range",
								"name": "r"
							},
							{
								"storageClass": [
									"in"
								],
								"type": "size_t",
								"name": "n"
							},
							{
								"storageClass": [
									"ref"
								],
								"type": "RandomGen",
								"name": "gen"
							}
						],
						"name": "partialShuffle",
						"endline": 1893
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "Range"
					},
					{
						"kind": "type",
						"name": "RandomGen"
					}
				],
				"comment": "Partially shuffles the elements of $(D r) such that upon returning $(D r[0..n])\nis a random subset of $(D r) and is randomly ordered.  $(D r[n..r.length])\nwill contain the elements not in $(D r[0..n]).  These will be in an undefined\norder, but will not be random in the sense that their order after\n$(D partialShuffle) returns will not be independent of their order before\n$(D partialShuffle) was called.\n\n$(D r) must be a random-access range with length.  $(D n) must be less than\nor equal to $(D r.length).  If no RNG is specified, $(D rndGen) will be used.\n\nParams:\n    r = random-access range whose elements are to be shuffled\n    n = number of elements of $(D r) to shuffle (counting from the beginning);\n        must be less than $(D r.length)\n    gen = (optional) random number generator to use; if not\n          specified, defaults to $(D rndGen)\n",
				"name": "partialShuffle"
			},
			{
				"kind": "template",
				"line": 1896,
				"constraint": "isRandomAccessRange!Range",
				"members": [
					{
						"kind": "function",
						"line": 1896,
						"endchar": 1,
						"char": 6,
						"type": "void(Range r, in size_t n)",
						"parameters": [
							{
								"type": "Range",
								"name": "r"
							},
							{
								"storageClass": [
									"in"
								],
								"type": "size_t",
								"name": "n"
							}
						],
						"name": "partialShuffle",
						"endline": 1900
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "Range"
					}
				],
				"comment": "ditto\n",
				"name": "partialShuffle"
			},
			{
				"kind": "template",
				"line": 1948,
				"constraint": "isNumeric!Num && isForwardRange!Rng",
				"members": [
					{
						"kind": "function",
						"line": 1948,
						"endchar": 1,
						"char": 8,
						"type": "size_t(ref Rng rnd, Num[] proportions...)",
						"parameters": [
							{
								"storageClass": [
									"ref"
								],
								"type": "Rng",
								"name": "rnd"
							},
							{
								"type": "Num[]",
								"name": "proportions"
							}
						],
						"name": "dice",
						"endline": 1952
					}
				],
				"char": 8,
				"parameters": [
					{
						"kind": "type",
						"name": "Rng"
					},
					{
						"kind": "type",
						"name": "Num"
					}
				],
				"comment": "Rolls a dice with relative probabilities stored in $(D\nproportions). Returns the index in $(D proportions) that was chosen.\n\nParams:\n    rnd = (optional) random number generator to use; if not\n          specified, defaults to $(D rndGen)\n    proportions = forward range or list of individual values\n                  whose elements correspond to the probabilities\n                  with which to choose the corresponding index\n                  value\n\nReturns:\n    Random variate drawn from the index values\n    [0, ... $(D proportions.length) - 1], with the probability\n    of getting an individual index value $(D i) being proportional to\n    $(D proportions[i]).\n\nExample:\n\n----\nauto x = dice(0.5, 0.5);   // x is 0 or 1 in equal proportions\nauto y = dice(50, 50);     // y is 0 or 1 in equal proportions\nauto z = dice(70, 20, 10); // z is 0 70% of the time, 1 20% of the time,\n                           // and 2 10% of the time\n----\n",
				"name": "dice"
			},
			{
				"kind": "template",
				"line": 1955,
				"constraint": "isForwardRange!Range && isNumeric!(ElementType!Range) && !isArray!Range",
				"members": [
					{
						"kind": "function",
						"line": 1955,
						"endchar": 1,
						"char": 8,
						"type": "size_t(ref R rnd, Range proportions)",
						"parameters": [
							{
								"storageClass": [
									"ref"
								],
								"type": "R",
								"name": "rnd"
							},
							{
								"type": "Range",
								"name": "proportions"
							}
						],
						"name": "dice",
						"endline": 1959
					}
				],
				"char": 8,
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					},
					{
						"kind": "type",
						"name": "Range"
					}
				],
				"comment": "Ditto\n",
				"name": "dice"
			},
			{
				"kind": "template",
				"line": 1962,
				"constraint": "isForwardRange!Range && isNumeric!(ElementType!Range) && !isArray!Range",
				"members": [
					{
						"kind": "function",
						"line": 1962,
						"endchar": 1,
						"char": 8,
						"type": "size_t(Range proportions)",
						"parameters": [
							{
								"type": "Range",
								"name": "proportions"
							}
						],
						"name": "dice",
						"endline": 1966
					}
				],
				"char": 8,
				"parameters": [
					{
						"kind": "type",
						"name": "Range"
					}
				],
				"comment": "Ditto\n",
				"name": "dice"
			},
			{
				"kind": "template",
				"line": 1969,
				"constraint": "isNumeric!Num",
				"members": [
					{
						"kind": "function",
						"line": 1969,
						"endchar": 1,
						"char": 8,
						"type": "size_t(Num[] proportions...)",
						"parameters": [
							{
								"type": "Num[]",
								"name": "proportions"
							}
						],
						"name": "dice",
						"endline": 1973
					}
				],
				"char": 8,
				"parameters": [
					{
						"kind": "type",
						"name": "Num"
					}
				],
				"comment": "Ditto\n",
				"name": "dice"
			},
			{
				"kind": "template",
				"line": 2069,
				"constraint": "isRandomAccessRange!Range && (isUniformRNG!UniformRNG || is(UniformRNG == void))",
				"members": [
					{
						"kind": "struct",
						"line": 2069,
						"members": [],
						"char": 1,
						"name": "RandomCover"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "Range"
					},
					{
						"kind": "type",
						"defaultDeco": "v",
						"name": "UniformRNG"
					}
				],
				"comment": "Covers a given range $(D r) in a random manner, i.e. goes through each\nelement of $(D r) once and only once, just in a random order. $(D r)\nmust be a random-access range with length.\n\nIf no random number generator is passed to $(D randomCover), the\nthread-global RNG rndGen will be used internally.\n\nParams:\n    r = random-access range to cover\n    rng = (optional) random number generator to use;\n          if not specified, defaults to $(D rndGen)\n\nReturns:\n    Range whose elements consist of the elements of $(D r),\n    in random order.  Will be a forward range if both $(D r) and\n    $(D rng) are forward ranges, an input range otherwise.\n\nExample:\n----\nint[] a = [ 0, 1, 2, 3, 4, 5, 6, 7, 8 ];\nforeach (e; randomCover(a))\n{\n    writeln(e);\n}\n----\n\n$(B WARNING:) If an alternative RNG is desired, it is essential for this\nto be a $(I new) RNG seeded in an unpredictable manner. Passing it a RNG\nused elsewhere in the program will result in unintended correlations,\ndue to the current implementation of RNGs as value types.\n\nExample:\n----\nint[] a = [ 0, 1, 2, 3, 4, 5, 6, 7, 8 ];\nforeach (e; randomCover(a, Random(unpredictableSeed)))  // correct!\n{\n    writeln(e);\n}\n\nforeach (e; randomCover(a, rndGen))  // DANGEROUS!! rndGen gets copied by value\n{\n    writeln(e);\n}\n\nforeach (e; randomCover(a, rndGen))  // ... so this second random cover\n{                                    // will output the same sequence as\n    writeln(e);                      // the previous one.\n}\n----\n\nThese issues will be resolved in a second-generation std.random that\nre-implements random number generators as reference types.\n",
				"name": "RandomCover"
			},
			{
				"kind": "template",
				"line": 2184,
				"constraint": "isRandomAccessRange!Range && isUniformRNG!UniformRNG",
				"members": [
					{
						"kind": "function",
						"line": 2184,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "(Range r, auto ref UniformRNG rng)",
						"parameters": [
							{
								"type": "Range",
								"name": "r"
							},
							{
								"storageClass": [
									"auto",
									"ref"
								],
								"type": "UniformRNG",
								"name": "rng"
							}
						],
						"name": "randomCover",
						"endline": 2188
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "Range"
					},
					{
						"kind": "type",
						"name": "UniformRNG"
					}
				],
				"comment": "Ditto\n",
				"name": "randomCover"
			},
			{
				"kind": "template",
				"line": 2191,
				"constraint": "isRandomAccessRange!Range",
				"members": [
					{
						"kind": "function",
						"line": 2191,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "(Range r)",
						"parameters": [
							{
								"type": "Range",
								"name": "r"
							}
						],
						"name": "randomCover",
						"endline": 2195
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "Range"
					}
				],
				"comment": "Ditto\n",
				"name": "randomCover"
			},
			{
				"kind": "template",
				"line": 2325,
				"constraint": "isInputRange!Range && (isUniformRNG!UniformRNG || is(UniformRNG == void))",
				"members": [
					{
						"kind": "struct",
						"line": 2325,
						"members": [
							{
								"kind": "function",
								"line": 2427,
								"endchar": 5,
								"char": 20,
								"type": "const @property bool()",
								"name": "empty",
								"comment": "   Range primitives.\n",
								"endline": 2430
							},
							{
								"kind": "function",
								"line": 2447,
								"endchar": 5,
								"char": 10,
								"type": "void()",
								"name": "popFront",
								"comment": "Ditto\n",
								"endline": 2461
							},
							{
								"kind": "function",
								"line": 2476,
								"endchar": 5,
								"char": 22,
								"type": "@property size_t()",
								"name": "length",
								"comment": "Ditto\n",
								"endline": 2479
							},
							{
								"kind": "function",
								"line": 2484,
								"endchar": 5,
								"char": 22,
								"type": "@property size_t()",
								"name": "index",
								"comment": "Returns the index of the visited record.\n",
								"endline": 2491
							}
						],
						"char": 1,
						"name": "RandomSample"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "Range"
					},
					{
						"kind": "type",
						"defaultDeco": "v",
						"name": "UniformRNG"
					}
				],
				"comment": "Selects a random subsample out of $(D r), containing exactly $(D n)\nelements. The order of elements is the same as in the original\nrange. The total length of $(D r) must be known. If $(D total) is\npassed in, the total number of sample is considered to be $(D\ntotal). Otherwise, $(D RandomSample) uses $(D r.length).\n\nParams:\n    r = range to sample from\n    n = number of elements to include in the sample;\n        must be less than or equal to the total number\n        of elements in $(D r) and/or the parameter\n        $(D total) (if provided)\n    total = (semi-optional) number of elements of $(D r)\n            from which to select the sample (counting from\n            the beginning); must be less than or equal to\n            the total number of elements in $(D r) itself.\n            May be omitted if $(D r) has the $(D .length)\n            property and the sample is to be drawn from\n            all elements of $(D r).\n    rng = (optional) random number generator to use;\n          if not specified, defaults to $(D rndGen)\n\nReturns:\n    Range whose elements consist of a randomly selected subset of\n    the elements of $(D r), in the same order as these elements\n    appear in $(D r) itself.  Will be a forward range if both $(D r)\n    and $(D rng) are forward ranges, an input range otherwise.\n\n$(D RandomSample) implements Jeffrey Scott Vitter's Algorithm D\n(see Vitter $(WEB dx.doi.org/10.1145/358105.893, 1984), $(WEB\ndx.doi.org/10.1145/23002.23003, 1987)), which selects a sample\nof size $(D n) in O(n) steps and requiring O(n) random variates,\nregardless of the size of the data being sampled.  The exception\nto this is if traversing k elements on the input range is itself\nan O(k) operation (e.g. when sampling lines from an input file),\nin which case the sampling calculation will inevitably be of\nO(total).\n\nRandomSample will throw an exception if $(D total) is verifiably\nless than the total number of elements available in the input,\nor if $(D n > total).\n\nIf no random number generator is passed to $(D randomSample), the\nthread-global RNG rndGen will be used internally.\n\nExample:\n----\nint[] a = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 ];\n// Print 5 random elements picked off from a\nforeach (e; randomSample(a, 5))\n{\n    writeln(e);\n}\n----\n\n$(B WARNING:) If an alternative RNG is desired, it is essential for this\nto be a $(I new) RNG seeded in an unpredictable manner. Passing it a RNG\nused elsewhere in the program will result in unintended correlations,\ndue to the current implementation of RNGs as value types.\n\nExample:\n----\nint[] a = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 ];\nforeach (e; randomSample(a, 5, Random(unpredictableSeed)))  // correct!\n{\n    writeln(e);\n}\n\nforeach (e; randomSample(a, 5, rndGen))  // DANGEROUS!! rndGen gets\n{                                        // copied by value\n    writeln(e);\n}\n\nforeach (e; randomSample(a, 5, rndGen))  // ... so this second random\n{                                        // sample will select the same\n    writeln(e);                          // values as the previous one.\n}\n----\n\nThese issues will be resolved in a second-generation std.random that\nre-implements random number generators as reference types.\n",
				"name": "RandomSample"
			},
			{
				"kind": "template",
				"line": 2712,
				"constraint": "isInputRange!Range",
				"members": [
					{
						"kind": "function",
						"line": 2712,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "(Range r, size_t n, size_t total)",
						"parameters": [
							{
								"type": "Range",
								"name": "r"
							},
							{
								"type": "size_t",
								"name": "n"
							},
							{
								"type": "size_t",
								"name": "total"
							}
						],
						"name": "randomSample",
						"endline": 2716
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "Range"
					}
				],
				"comment": "Ditto\n",
				"name": "randomSample"
			},
			{
				"kind": "template",
				"line": 2719,
				"constraint": "isInputRange!Range && hasLength!Range",
				"members": [
					{
						"kind": "function",
						"line": 2719,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "(Range r, size_t n)",
						"parameters": [
							{
								"type": "Range",
								"name": "r"
							},
							{
								"type": "size_t",
								"name": "n"
							}
						],
						"name": "randomSample",
						"endline": 2723
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "Range"
					}
				],
				"comment": "Ditto\n",
				"name": "randomSample"
			},
			{
				"kind": "template",
				"line": 2726,
				"constraint": "isInputRange!Range && isUniformRNG!UniformRNG",
				"members": [
					{
						"kind": "function",
						"line": 2726,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "(Range r, size_t n, size_t total, auto ref UniformRNG rng)",
						"parameters": [
							{
								"type": "Range",
								"name": "r"
							},
							{
								"type": "size_t",
								"name": "n"
							},
							{
								"type": "size_t",
								"name": "total"
							},
							{
								"storageClass": [
									"auto",
									"ref"
								],
								"type": "UniformRNG",
								"name": "rng"
							}
						],
						"name": "randomSample",
						"endline": 2730
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "Range"
					},
					{
						"kind": "type",
						"name": "UniformRNG"
					}
				],
				"comment": "Ditto\n",
				"name": "randomSample"
			},
			{
				"kind": "template",
				"line": 2733,
				"constraint": "isInputRange!Range && hasLength!Range && isUniformRNG!UniformRNG",
				"members": [
					{
						"kind": "function",
						"line": 2733,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "(Range r, size_t n, auto ref UniformRNG rng)",
						"parameters": [
							{
								"type": "Range",
								"name": "r"
							},
							{
								"type": "size_t",
								"name": "n"
							},
							{
								"storageClass": [
									"auto",
									"ref"
								],
								"type": "UniformRNG",
								"name": "rng"
							}
						],
						"name": "randomSample",
						"endline": 2737
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "Range"
					},
					{
						"kind": "type",
						"name": "UniformRNG"
					}
				],
				"comment": "Ditto\n",
				"name": "randomSample"
			}
		],
		"name": "std.random",
		"comment": "Facilities for random number generation.\n\nThe new-style generator objects hold their own state so they are\nimmune of threading issues. The generators feature a number of\nwell-known and well-documented methods of generating random\nnumbers. An overall fast and reliable means to generate random numbers\nis the $(D_PARAM Mt19937) generator, which derives its name from\n\"$(LUCKY Mersenne Twister) with a period of 2 to the power of\n19937\". In memory-constrained situations, $(LUCKY linear congruential)\ngenerators such as $(D MinstdRand0) and $(D MinstdRand) might be\nuseful. The standard library provides an alias $(D_PARAM Random) for\nwhichever generator it considers the most fit for the target\nenvironment.\n\nExample:\n\n----\n// Generate a uniformly-distributed integer in the range [0, 14]\nauto i = uniform(0, 15);\n// Generate a uniformly-distributed real in the range [0, 100)\n// using a specific random generator\nRandom gen;\nauto r = uniform(0.0L, 100.0L, gen);\n----\n\nIn addition to random number generators, this module features\ndistributions, which skew a generator's output statistical\ndistribution in various ways. So far the uniform distribution for\nintegers and real numbers have been implemented.\n\nUpgrading:\n        $(WEB digitalmars.com/d/1.0/phobos/std_random.html#rand Phobos D1 $(D rand())) can\n        be replaced with $(D uniform!uint()).\n\nSource:    $(PHOBOSSRC std/_random.d)\n\nMacros:\n\nWIKI = Phobos/StdRandom\n\n\nCopyright: Copyright Andrei Alexandrescu 2008 - 2009, Joseph Rushton Wakeling 2012.\nLicense:   $(WEB www.boost.org/LICENSE_1_0.txt, Boost License 1.0).\nAuthors:   $(WEB erdani.org, Andrei Alexandrescu)\n           Masahiro Nakagawa (Xorshift random generator)\n           $(WEB braingam.es, Joseph Rushton Wakeling) (Algorithm D for random sampling)\nCredits:   The entire random number library architecture is derived from the\n           excellent $(WEB open-std.org/jtc1/sc22/wg21/docs/papers/2007/n2461.pdf, C++0X)\n           random number facility proposed by Jens Maurer and contributed to by\n           researchers at the Fermi laboratory (excluding Xorshift).\n"
	},
	{
		"kind": "module",
		"file": "../phobos/std/stdio.d",
		"members": [
			{
				"kind": "alias",
				"line": 31,
				"deco": "E3std8typecons45__T4FlagVAyaa14_6b6565705465726d696e61746f72Z4Flag",
				"char": 1,
				"name": "KeepTerminator",
				"comment": "If flag $(D KeepTerminator) is set to $(D KeepTerminator.yes), then the delimiter\nis included in the strings returned.\n"
			},
			{
				"kind": "struct",
				"line": 341,
				"members": [
					{
						"kind": "constructor",
						"line": 385,
						"deco": "FNcNfAyaxAaZS3std5stdio4File",
						"endchar": 5,
						"char": 5,
						"parameters": [
							{
								"deco": "Aya",
								"name": "name"
							},
							{
								"deco": "xAa",
								"default": "\"rb\"",
								"name": "stdioOpenmode"
							}
						],
						"name": "this",
						"comment": "Constructor taking the name of the file to open and the open mode\n(with the same semantics as in the C standard library $(WEB\ncplusplus.com/reference/clibrary/cstdio/fopen.html, fopen)\nfunction).\n\nCopying one $(D File) object to another results in the two $(D File)\nobjects referring to the same underlying file.\n\nThe destructor automatically closes the file as soon as no $(D File)\nobject refers to it anymore.\n\nThrows: $(D ErrnoException) if the file could not be opened.\n",
						"originalType": "ref @safe (string name, in char[] stdioOpenmode = \"rb\")",
						"endline": 408
					},
					{
						"kind": "function",
						"line": 427,
						"deco": "FNfS3std5stdio4FileZv",
						"endchar": 5,
						"char": 10,
						"parameters": [
							{
								"deco": "S3std5stdio4File",
								"name": "rhs"
							}
						],
						"name": "opAssign",
						"comment": "Assigns a file to another. The target of the assignment gets detached\nfrom whatever file it was attached to, and attaches itself to the new\nfile.\n",
						"endline": 432
					},
					{
						"kind": "function",
						"line": 442,
						"deco": "FNfAyaxAaZv",
						"endchar": 5,
						"char": 10,
						"parameters": [
							{
								"deco": "Aya",
								"name": "name"
							},
							{
								"deco": "xAa",
								"default": "\"rb\"",
								"name": "stdioOpenmode"
							}
						],
						"name": "open",
						"comment": "First calls $(D detach) (throwing on failure), and then attempts to\n_open file $(D name) with mode $(D stdioOpenmode). The mode has the\nsame semantics as in the C standard library $(WEB\ncplusplus.com/reference/clibrary/cstdio/fopen.html, fopen) function.\n\nThrows: $(D ErrnoException) in case of error.\n",
						"originalType": "@safe void(string name, in char[] stdioOpenmode = \"rb\")",
						"endline": 446
					},
					{
						"kind": "function",
						"line": 455,
						"deco": "FNfAyaxAaZv",
						"endchar": 5,
						"char": 25,
						"parameters": [
							{
								"deco": "Aya",
								"name": "command"
							},
							{
								"deco": "xAa",
								"default": "\"r\"",
								"name": "stdioOpenmode"
							}
						],
						"name": "popen",
						"comment": "First calls $(D detach) (throwing on failure), and then runs a command\nby calling the C standard library function $(WEB\nopengroup.org/onlinepubs/007908799/xsh/_popen.html, _popen).\n\nThrows: $(D ErrnoException) in case of error.\n",
						"originalType": "@safe void(string command, in char[] stdioOpenmode = \"r\")",
						"endline": 463
					},
					{
						"kind": "function",
						"line": 472,
						"deco": "FNfixAaZv",
						"endchar": 5,
						"char": 10,
						"parameters": [
							{
								"deco": "i",
								"name": "fd"
							},
							{
								"deco": "xAa",
								"default": "\"rb\"",
								"name": "stdioOpenmode"
							}
						],
						"name": "fdopen",
						"comment": "First calls $(D detach) (throwing on failure), and then attempts to\nassociate the given file descriptor with the $(D File). The mode must\nbe compatible with the mode of the file descriptor.\n\nThrows: $(D ErrnoException) in case of error.\n",
						"originalType": "@safe void(int fd, in char[] stdioOpenmode = \"rb\")",
						"endline": 475
					},
					{
						"kind": "function",
						"line": 526,
						"deco": "FixAaZv",
						"char": 10,
						"parameters": [
							{
								"deco": "i",
								"name": "handle"
							},
							{
								"deco": "xAa",
								"name": "stdioOpenmode"
							}
						],
						"name": "windowsHandleOpen",
						"comment": "First calls $(D detach) (throwing on failure), and then attempts to\nassociate the given Windows $(D HANDLE) with the $(D File). The mode must\nbe compatible with the access attributes of the handle. Windows only.\n\nThrows: $(D ErrnoException) in case of error.\n",
						"originalType": "void(HANDLE handle, in char[] stdioOpenmode)"
					},
					{
						"kind": "function",
						"line": 562,
						"deco": "xFNaNbNdNfZb",
						"endchar": 5,
						"char": 20,
						"name": "isOpen",
						"comment": " Returns $(D true) if the file is opened.\n",
						"endline": 565
					},
					{
						"kind": "function",
						"line": 573,
						"deco": "xFNaNdNeZb",
						"endchar": 5,
						"char": 20,
						"name": "eof",
						"comment": "Returns $(D true) if the file is at end (see $(WEB\ncplusplus.com/reference/clibrary/cstdio/feof.html, feof)).\n\nThrows: $(D Exception) if the file is not opened.\n",
						"endline": 579
					},
					{
						"kind": "function",
						"line": 584,
						"deco": "xFNaNbNdNfZAya",
						"endchar": 5,
						"char": 22,
						"name": "name",
						"comment": " Returns the name of the last opened file, if any.\nIf a $(D File) was created with $(LREF tmpfile) and $(LREF wrapFile)\nit has no name.\n",
						"endline": 587
					},
					{
						"kind": "function",
						"line": 594,
						"deco": "xFNaNbNdNeZb",
						"endchar": 5,
						"char": 20,
						"name": "error",
						"comment": "If the file is not opened, returns $(D false). Otherwise, returns\n$(WEB cplusplus.com/reference/clibrary/cstdio/ferror.html, ferror) for\nthe file handle.\n",
						"endline": 597
					},
					{
						"kind": "function",
						"line": 616,
						"deco": "FNfZv",
						"endchar": 5,
						"char": 10,
						"name": "detach",
						"comment": "Detaches from the underlying file. If the sole owner, calls $(D close).\n\nThrows: $(D ErrnoException) on failure if closing the file.\n",
						"endline": 627
					},
					{
						"kind": "function",
						"line": 655,
						"deco": "FNeZv",
						"endchar": 5,
						"char": 10,
						"name": "close",
						"comment": "If the file was unopened, succeeds vacuously. Otherwise closes the\nfile (by calling $(WEB\ncplusplus.com/reference/clibrary/cstdio/fclose.html, fclose)),\nthrowing on error. Even if an exception is thrown, afterwards the $(D\nFile) object is empty. This is different from $(D detach) in that it\nalways closes the file; consequently, all other $(D File) objects\nreferring to the same handle will see a closed file henceforth.\n\nThrows: $(D ErrnoException) on error.\n",
						"endline": 688
					},
					{
						"kind": "function",
						"line": 695,
						"deco": "FNaNbNfZv",
						"endchar": 5,
						"char": 10,
						"name": "clearerr",
						"comment": "If the file is not opened, succeeds vacuously. Otherwise, returns\n$(WEB cplusplus.com/reference/clibrary/cstdio/_clearerr.html,\n_clearerr) for the file handle.\n",
						"endline": 699
					},
					{
						"kind": "function",
						"line": 707,
						"deco": "FNeZv",
						"endchar": 5,
						"char": 10,
						"name": "flush",
						"comment": "Calls $(WEB cplusplus.com/reference/clibrary/cstdio/_fflush.html, _fflush)\nfor the file handle.\n\nThrows: $(D Exception) if the file is not opened or if the call to $(D fflush) fails.\n",
						"endline": 713
					},
					{
						"kind": "template",
						"line": 743,
						"members": [
							{
								"kind": "function",
								"line": 743,
								"endchar": 5,
								"char": 9,
								"type": "T[](T[] buffer)",
								"parameters": [
									{
										"type": "T[]",
										"name": "buffer"
									}
								],
								"name": "rawRead",
								"endline": 773
							}
						],
						"char": 9,
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"comment": "Calls $(WEB cplusplus.com/reference/clibrary/cstdio/fread.html, fread) for the\nfile handle. The number of items to read and the size of\neach item is inferred from the size and type of the input array, respectively.\n\nReturns: The slice of $(D buffer) containing the data that was actually read.\nThis will be shorter than $(D buffer) if EOF was reached before the buffer\ncould be filled.\n\nThrows: $(D Exception) if $(D buffer) is empty.\n        $(D ErrnoException) if the file is not opened or the call to $(D fread) fails.\n\n$(D rawRead) always reads in binary mode on Windows.\n",
						"name": "rawRead"
					},
					{
						"kind": "template",
						"line": 802,
						"members": [
							{
								"kind": "function",
								"line": 802,
								"endchar": 5,
								"char": 10,
								"type": "void(in T[] buffer)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "T[]",
										"name": "buffer"
									}
								],
								"name": "rawWrite",
								"endline": 831
							}
						],
						"char": 10,
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"comment": "Calls $(WEB cplusplus.com/reference/clibrary/cstdio/fwrite.html, fwrite) for the file\nhandle. The number of items to write and the size of each\nitem is inferred from the size and type of the input array, respectively. An\nerror is thrown if the buffer could not be written in its entirety.\n\n$(D rawWrite) always writes in binary mode on Windows.\n\nThrows: $(D ErrnoException) if the file is not opened or if the call to $(D fwrite) fails.\n",
						"name": "rawWrite"
					},
					{
						"kind": "function",
						"line": 852,
						"deco": "FNeliZv",
						"endchar": 5,
						"char": 10,
						"parameters": [
							{
								"deco": "l",
								"name": "offset"
							},
							{
								"deco": "i",
								"default": "0",
								"name": "origin"
							}
						],
						"name": "seek",
						"comment": "Calls $(WEB cplusplus.com/reference/clibrary/cstdio/fseek.html, fseek)\nfor the file handle.\n\nThrows: $(D Exception) if the file is not opened.\n        $(D ErrnoException) if the call to $(D fseek) fails.\n",
						"originalType": "@trusted void(long offset, int origin = SEEK_SET)",
						"endline": 870
					},
					{
						"kind": "function",
						"line": 911,
						"deco": "xFNdNeZm",
						"endchar": 5,
						"char": 21,
						"name": "tell",
						"comment": "Calls $(WEB cplusplus.com/reference/clibrary/cstdio/ftell.html, ftell) for the\nmanaged file handle.\n\nThrows: $(D Exception) if the file is not opened.\n        $(D ErrnoException) if the call to $(D ftell) fails.\n",
						"endline": 928
					},
					{
						"kind": "function",
						"line": 950,
						"deco": "FNfZv",
						"endchar": 5,
						"char": 10,
						"name": "rewind",
						"comment": "Calls $(WEB cplusplus.com/reference/clibrary/cstdio/_rewind.html, _rewind)\nfor the file handle.\n\nThrows: $(D Exception) if the file is not opened.\n",
						"endline": 956
					},
					{
						"kind": "function",
						"line": 965,
						"deco": "FNemiZv",
						"endchar": 5,
						"char": 10,
						"parameters": [
							{
								"deco": "m",
								"name": "size"
							},
							{
								"deco": "i",
								"default": "0",
								"name": "mode"
							}
						],
						"name": "setvbuf",
						"comment": "Calls $(WEB cplusplus.com/reference/clibrary/cstdio/_setvbuf.html, _setvbuf) for\nthe file handle.\n\nThrows: $(D Exception) if the file is not opened.\n        $(D ErrnoException) if the call to $(D setvbuf) fails.\n",
						"originalType": "@trusted void(size_t size, int mode = _IOFBF)",
						"endline": 972
					},
					{
						"kind": "function",
						"line": 981,
						"deco": "FNeAviZv",
						"endchar": 5,
						"char": 10,
						"parameters": [
							{
								"deco": "Av",
								"name": "buf"
							},
							{
								"deco": "i",
								"default": "0",
								"name": "mode"
							}
						],
						"name": "setvbuf",
						"comment": "Calls $(WEB cplusplus.com/reference/clibrary/cstdio/_setvbuf.html,\n_setvbuf) for the file handle.\n\nThrows: $(D Exception) if the file is not opened.\n        $(D ErrnoException) if the call to $(D setvbuf) fails.\n",
						"originalType": "@trusted void(void[] buf, int mode = _IOFBF)",
						"endline": 989
					},
					{
						"kind": "function",
						"line": 1053,
						"deco": "FE3std5stdio8LockTypemmZv",
						"endchar": 5,
						"char": 10,
						"parameters": [
							{
								"deco": "E3std5stdio8LockType",
								"default": "cast(LockType)1",
								"name": "lockType"
							},
							{
								"deco": "m",
								"default": "0LU",
								"name": "start"
							},
							{
								"deco": "m",
								"default": "0LU",
								"name": "length"
							}
						],
						"name": "lock",
						"comment": "Locks the specified file segment. If the file segment is already locked\nby another process, waits until the existing lock is released.\nIf both $(D start) and $(D length) are zero, the entire file is locked.\n\nLocks created using $(D lock) and $(D tryLock) have the following properties:\n$(UL\n $(LI All locks are automatically released when the process terminates.)\n $(LI Locks are not inherited by child processes.)\n $(LI Closing a file will release all locks associated with the file. On POSIX,\n      even locks acquired via a different $(D File) will be released as well.)\n $(LI Not all NFS implementations correctly implement file locking.)\n)\n",
						"originalType": "void(LockType lockType = LockType.readWrite, ulong start = 0, ulong length = 0)",
						"endline": 1077
					},
					{
						"kind": "function",
						"line": 1085,
						"deco": "FE3std5stdio8LockTypemmZb",
						"endchar": 5,
						"char": 10,
						"parameters": [
							{
								"deco": "E3std5stdio8LockType",
								"default": "cast(LockType)1",
								"name": "lockType"
							},
							{
								"deco": "m",
								"default": "0LU",
								"name": "start"
							},
							{
								"deco": "m",
								"default": "0LU",
								"name": "length"
							}
						],
						"name": "tryLock",
						"comment": "Attempts to lock the specified file segment.\nIf both $(D start) and $(D length) are zero, the entire file is locked.\nReturns: $(D true) if the lock was successful, and $(D false) if the\nspecified file segment was already locked.\n",
						"originalType": "bool(LockType lockType = LockType.readWrite, ulong start = 0, ulong length = 0)",
						"endline": 1118
					},
					{
						"kind": "function",
						"line": 1123,
						"deco": "FmmZv",
						"endchar": 5,
						"char": 10,
						"parameters": [
							{
								"deco": "m",
								"default": "0LU",
								"name": "start"
							},
							{
								"deco": "m",
								"default": "0LU",
								"name": "length"
							}
						],
						"name": "unlock",
						"comment": "Removes the lock over the specified file segment.\n",
						"originalType": "void(ulong start = 0, ulong length = 0)",
						"endline": 1142
					},
					{
						"kind": "template",
						"line": 1227,
						"members": [
							{
								"kind": "function",
								"line": 1227,
								"endchar": 5,
								"char": 10,
								"type": "void(S args)",
								"parameters": [
									{
										"type": "S",
										"name": "args"
									}
								],
								"name": "write",
								"endline": 1268
							}
						],
						"char": 10,
						"parameters": [
							{
								"kind": "tuple",
								"name": "S"
							}
						],
						"comment": "Writes its arguments in text format to the file.\n\nThrows: $(D Exception) if the file is not opened.\n        $(D ErrnoException) on an error writing to the file.\n",
						"name": "write"
					},
					{
						"kind": "template",
						"line": 1276,
						"members": [
							{
								"kind": "function",
								"line": 1276,
								"endchar": 5,
								"char": 10,
								"type": "void(S args)",
								"parameters": [
									{
										"type": "S",
										"name": "args"
									}
								],
								"name": "writeln",
								"endline": 1279
							}
						],
						"char": 10,
						"parameters": [
							{
								"kind": "tuple",
								"name": "S"
							}
						],
						"comment": "Writes its arguments in text format to the file, followed by a newline.\n\nThrows: $(D Exception) if the file is not opened.\n        $(D ErrnoException) on an error writing to the file.\n",
						"name": "writeln"
					},
					{
						"kind": "template",
						"line": 1288,
						"members": [
							{
								"kind": "function",
								"line": 1288,
								"endchar": 5,
								"char": 10,
								"type": "void(in Char[] fmt, A args)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "Char[]",
										"name": "fmt"
									},
									{
										"type": "A",
										"name": "args"
									}
								],
								"name": "writef",
								"endline": 1293
							}
						],
						"char": 10,
						"parameters": [
							{
								"kind": "type",
								"name": "Char"
							},
							{
								"kind": "tuple",
								"name": "A"
							}
						],
						"comment": "Writes its arguments in text format to the file, according to the\nformat in the first argument.\n\nThrows: $(D Exception) if the file is not opened.\n        $(D ErrnoException) on an error writing to the file.\n",
						"name": "writef"
					},
					{
						"kind": "template",
						"line": 1302,
						"members": [
							{
								"kind": "function",
								"line": 1302,
								"endchar": 5,
								"char": 10,
								"type": "void(in Char[] fmt, A args)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "Char[]",
										"name": "fmt"
									},
									{
										"type": "A",
										"name": "args"
									}
								],
								"name": "writefln",
								"endline": 1309
							}
						],
						"char": 10,
						"parameters": [
							{
								"kind": "type",
								"name": "Char"
							},
							{
								"kind": "tuple",
								"name": "A"
							}
						],
						"comment": "Writes its arguments in text format to the file, according to the\nformat in the first argument, followed by a newline.\n\nThrows: $(D Exception) if the file is not opened.\n        $(D ErrnoException) on an error writing to the file.\n",
						"name": "writefln"
					},
					{
						"kind": "template",
						"line": 1344,
						"constraint": "isSomeString!S",
						"members": [
							{
								"kind": "function",
								"line": 1344,
								"endchar": 5,
								"char": 7,
								"type": "S(dchar terminator = '\\x0a')",
								"parameters": [
									{
										"deco": "w",
										"default": "'\\x0a'",
										"name": "terminator"
									}
								],
								"name": "readln",
								"endline": 1350
							}
						],
						"char": 7,
						"parameters": [
							{
								"kind": "type",
								"default": "string",
								"name": "S"
							}
						],
						"comment": "Read line from the file handle and return it as a specified type.\n\nThis version manages its own read buffer, which means one memory allocation per call. If you are not\nretaining a reference to the read data, consider the $(D File.readln(buf)) version, which may offer\nbetter performance as it can reuse its read buffer.\n\nParams:\n    S = Template parameter; the type of the allocated buffer, and the type returned. Defaults to $(D string).\n    terminator = Line terminator (by default, $(D '\\n')).\n\nNote:\n    String terminators are not supported due to ambiguity with readln(buf) below.\n\nReturns:\n    The line that was read, including the line terminator character.\n\nThrows:\n    $(D StdioException) on I/O error, or $(D UnicodeException) on Unicode conversion error.\n\nExample:\n---\n// Reads $(D stdin) and writes it to $(D stdout).\nimport std.stdio;\n\nvoid main()\n{\n    string line;\n    while ((line = stdin.readln()) !is null)\n        write(line);\n}\n---\n",
						"name": "readln"
					},
					{
						"kind": "template",
						"line": 1443,
						"constraint": "isSomeChar!C && is(Unqual!C == C) && !is(C == enum)",
						"members": [
							{
								"kind": "function",
								"line": 1443,
								"endchar": 5,
								"char": 12,
								"type": "size_t(ref C[] buf, dchar terminator = '\\x0a')",
								"parameters": [
									{
										"storageClass": [
											"ref"
										],
										"type": "C[]",
										"name": "buf"
									},
									{
										"deco": "w",
										"default": "'\\x0a'",
										"name": "terminator"
									}
								],
								"name": "readln",
								"endline": 1472
							}
						],
						"char": 12,
						"parameters": [
							{
								"kind": "type",
								"name": "C"
							}
						],
						"comment": "Read line from the file handle and write it to $(D buf[]), including\nterminating character.\n\nThis can be faster than $(D line = File.readln()) because you can reuse\nthe buffer for each call. Note that reusing the buffer means that you\nmust copy the previous contents if you wish to retain them.\n\nParams:\nbuf = Buffer used to store the resulting line data. buf is\nresized as necessary.\nterminator = Line terminator (by default, $(D '\\n')). Use\n$(XREF ascii, newline) for portability (unless the file was opened in\ntext mode).\n\nReturns:\n0 for end of file, otherwise number of characters read\n\nThrows: $(D StdioException) on I/O error, or $(D UnicodeException) on Unicode\nconversion error.\n\nExample:\n---\n// Read lines from $(D stdin) into a string\n// Ignore lines starting with '#'\n// Write the string to $(D stdout)\n\nvoid main()\n{\n    string output;\n    char[] buf;\n\n    while (stdin.readln(buf))\n    {\n        if (buf[0] == '#')\n            continue;\n\n        output ~= buf;\n    }\n\n    write(output);\n}\n---\n\nThis method can be more efficient than the one in the previous example\nbecause $(D stdin.readln(buf)) reuses (if possible) memory allocated\nfor $(D buf), whereas $(D line = stdin.readln()) makes a new memory allocation\nfor every line.\n",
						"name": "readln"
					},
					{
						"kind": "template",
						"line": 1475,
						"constraint": "isSomeChar!C && is(Unqual!C == C) && !is(C == enum) && isBidirectionalRange!R && is(typeof(terminator.front == (dchar).init))",
						"members": [
							{
								"kind": "function",
								"line": 1475,
								"endchar": 5,
								"char": 12,
								"type": "size_t(ref C[] buf, R terminator)",
								"parameters": [
									{
										"storageClass": [
											"ref"
										],
										"type": "C[]",
										"name": "buf"
									},
									{
										"type": "R",
										"name": "terminator"
									}
								],
								"name": "readln",
								"endline": 1497
							}
						],
						"char": 12,
						"parameters": [
							{
								"kind": "type",
								"name": "C"
							},
							{
								"kind": "type",
								"name": "R"
							}
						],
						"comment": " ditto\n",
						"name": "readln"
					},
					{
						"kind": "template",
						"line": 1527,
						"members": [
							{
								"kind": "function",
								"line": 1527,
								"endchar": 5,
								"char": 10,
								"type": "uint(in char[] format, Data data)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "char[]",
										"name": "format"
									},
									{
										"type": "Data",
										"name": "data"
									}
								],
								"name": "readf",
								"endline": 1534
							}
						],
						"char": 10,
						"parameters": [
							{
								"kind": "tuple",
								"name": "Data"
							}
						],
						"comment": " Read data from the file according to the specified\n $(LINK2 std_format.html#format-string, format specifier) using\n $(XREF format,formattedRead).\n",
						"name": "readf"
					},
					{
						"kind": "function",
						"line": 1562,
						"storageClass": [
							"static"
						],
						"deco": "FNfZS3std5stdio4File",
						"endchar": 5,
						"char": 17,
						"name": "tmpfile",
						"comment": " Returns a temporary file by calling\n $(WEB  cplusplus.com/reference/clibrary/cstdio/_tmpfile.html, _tmpfile).\n\n $(RED Warning: The $(LREF File) returned has an empty $(LREF name)).\n",
						"endline": 1569
					},
					{
						"kind": "function",
						"line": 1597,
						"storageClass": [
							"static"
						],
						"deco": "FAxaAxaAxaZS3std5stdio4File",
						"endchar": 5,
						"char": 17,
						"parameters": [
							{
								"deco": "Axa",
								"name": "prefix"
							},
							{
								"deco": "Axa",
								"name": "suffix"
							},
							{
								"deco": "Axa",
								"name": "dir"
							}
						],
						"name": "scratchFile",
						"comment": "Creates a file with a randomly generated name and returns an open File to it.\n\nThere is nothing special about the file created other than the fact that its\nname is randomly generated, and it defaults to being in the temp directory on\nthe system. It will only be deleted if explicitly deleted or if it's in the\ntemp directory, and the temp directory is cleared out (as happens on system\nstartup or shutdown on some systems).\n\nThe file is created with R/W permissions and opened with $(D \"w+b\"). On POSIX\nsystems, the permissions are restricted to the current user, though the\neffective permissions are modified by the process' umask in the usual way.\n\nParams:\n    prefix = Prefix for the generated file name.\n    suffix = Suffix for the generated file name (which also provides a way to\n             give the file an extension).\n    dir    = Directory of the temporary file. Defaults to the result of\n             $(XREF file, tempDir).\n\nThrows:\n    $(D Exception) if the file could not be created.\n\nSee_Also:\n    $(LREF tmpfile)\n",
						"endline": 1694
					},
					{
						"kind": "function",
						"line": 1697,
						"storageClass": [
							"static"
						],
						"deco": "FAyaAyaZS3std5stdio4File",
						"endchar": 5,
						"char": 17,
						"parameters": [
							{
								"deco": "Aya",
								"default": "null",
								"name": "prefix"
							},
							{
								"deco": "Aya",
								"default": "null",
								"name": "suffix"
							}
						],
						"name": "scratchFile",
						"comment": "Ditto\n",
						"endline": 1701
					},
					{
						"kind": "function",
						"line": 1754,
						"storageClass": [
							"static"
						],
						"deco": "FNfPOS4core4stdc5stdio8_IO_FILEZS3std5stdio4File",
						"endchar": 5,
						"char": 29,
						"parameters": [
							{
								"deco": "POS4core4stdc5stdio8_IO_FILE",
								"name": "f"
							}
						],
						"name": "wrapFile",
						"comment": "Unsafe function that wraps an existing $(D FILE*). The resulting $(D\nFile) never takes the initiative in closing the file.\nNote that the created file has no $(LREF name)\n",
						"originalType": "@safe File(FILE* f)",
						"endline": 1760
					},
					{
						"kind": "function",
						"line": 1765,
						"deco": "FNaNfZPOS4core4stdc5stdio8_IO_FILE",
						"endchar": 5,
						"char": 11,
						"name": "getFP",
						"comment": "Returns the $(D FILE*) corresponding to this object.\n",
						"originalType": "pure @safe FILE*()",
						"endline": 1772
					},
					{
						"kind": "function",
						"line": 1783,
						"deco": "xFNdNeZi",
						"endchar": 5,
						"char": 38,
						"name": "fileno",
						"comment": "Returns the file number corresponding to this object.\n",
						"endline": 1789
					},
					{
						"kind": "function",
						"line": 1795,
						"deco": "FNdZi",
						"char": 22,
						"name": "windowsHandle",
						"comment": "Returns the underlying operating system $(D HANDLE) (Windows only).\n",
						"originalType": "@property HANDLE()"
					},
					{
						"kind": "template",
						"line": 1976,
						"constraint": "isScalarType!Terminator",
						"members": [
							{
								"kind": "function",
								"line": 1976,
								"storageClass": [
									"auto"
								],
								"endchar": 5,
								"char": 10,
								"type": "(KeepTerminator keepTerminator = KeepTerminator.no, Terminator terminator = '\\x0a')",
								"parameters": [
									{
										"default": "KeepTerminator.no",
										"type": "KeepTerminator",
										"name": "keepTerminator"
									},
									{
										"default": "'\\x0a'",
										"type": "Terminator",
										"name": "terminator"
									}
								],
								"name": "byLine",
								"endline": 1982
							}
						],
						"char": 10,
						"parameters": [
							{
								"kind": "type",
								"defaultDeco": "a",
								"name": "Terminator"
							},
							{
								"kind": "type",
								"defaultDeco": "a",
								"name": "Char"
							}
						],
						"comment": "Returns an input range set up to read from the file handle one line\nat a time.\n\nThe element type for the range will be $(D Char[]). Range primitives\nmay throw $(D StdioException) on I/O error.\n\nNote:\nEach $(D front) will not persist after $(D\npopFront) is called, so the caller must copy its contents (e.g. by\ncalling $(D to!string)) when retention is needed. If the caller needs\nto retain a copy of every line, use the $(LREF byLineCopy) function\ninstead.\n\nParams:\nChar = Character type for each line, defaulting to $(D char).\nkeepTerminator = Use $(D KeepTerminator.yes) to include the\nterminator at the end of each line.\nterminator = Line separator ($(D '\\n') by default). Use\n$(XREF ascii, newline) for portability (unless the file was opened in\ntext mode).\n\nExample:\n----\nimport std.algorithm, std.stdio, std.string;\n// Count words in a file using ranges.\nvoid main()\n{\n    auto file = File(\"file.txt\"); // Open for reading\n    const wordCount = file.byLine()            // Read lines\n                          .map!split           // Split into words\n                          .map!(a => a.length) // Count words per line\n                          .sum();              // Total word count\n    writeln(wordCount);\n}\n----\n\nExample:\n----\nimport std.range, std.stdio;\n// Read lines using foreach.\nvoid main()\n{\n    auto file = File(\"file.txt\"); // Open for reading\n    auto range = file.byLine();\n    // Print first three lines\n    foreach (line; range.take(3))\n        writeln(line);\n    // Print remaining lines beginning with '#'\n    foreach (line; range)\n    {\n        if (!line.empty && line[0] == '#')\n            writeln(line);\n    }\n}\n----\nNotice that neither example accesses the line data returned by\n$(D front) after the corresponding $(D popFront) call is made (because\nthe contents may well have changed).\n",
						"name": "byLine"
					},
					{
						"kind": "template",
						"line": 1985,
						"constraint": "is(Unqual!(ElementEncodingType!Terminator) == Char)",
						"members": [
							{
								"kind": "function",
								"line": 1985,
								"storageClass": [
									"auto"
								],
								"endchar": 5,
								"char": 10,
								"type": "(KeepTerminator keepTerminator, Terminator terminator)",
								"parameters": [
									{
										"type": "KeepTerminator",
										"name": "keepTerminator"
									},
									{
										"type": "Terminator",
										"name": "terminator"
									}
								],
								"name": "byLine",
								"endline": 1990
							}
						],
						"char": 10,
						"parameters": [
							{
								"kind": "type",
								"name": "Terminator"
							},
							{
								"kind": "type",
								"defaultDeco": "a",
								"name": "Char"
							}
						],
						"comment": "ditto\n",
						"name": "byLine"
					},
					{
						"kind": "template",
						"line": 2113,
						"constraint": "isScalarType!Terminator",
						"members": [
							{
								"kind": "function",
								"line": 2113,
								"storageClass": [
									"auto"
								],
								"endchar": 5,
								"char": 10,
								"type": "(KeepTerminator keepTerminator = KeepTerminator.no, Terminator terminator = '\\x0a')",
								"parameters": [
									{
										"default": "KeepTerminator.no",
										"type": "KeepTerminator",
										"name": "keepTerminator"
									},
									{
										"default": "'\\x0a'",
										"type": "Terminator",
										"name": "terminator"
									}
								],
								"name": "byLineCopy",
								"endline": 2119
							}
						],
						"char": 10,
						"parameters": [
							{
								"kind": "type",
								"defaultDeco": "a",
								"name": "Terminator"
							},
							{
								"kind": "type",
								"defaultDeco": "ya",
								"name": "Char"
							}
						],
						"comment": "Returns an input range set up to read from the file handle one line\nat a time. Each line will be newly allocated. $(D front) will cache\nits value to allow repeated calls without unnecessary allocations.\n\nNote: Due to caching byLineCopy can be more memory-efficient than\n$(D File.byLine.map!idup).\n\nThe element type for the range will be $(D Char[]). Range\nprimitives may throw $(D StdioException) on I/O error.\n\nParams:\nChar = Character type for each line, defaulting to $(D immutable char).\nkeepTerminator = Use $(D KeepTerminator.yes) to include the\nterminator at the end of each line.\nterminator = Line separator ($(D '\\n') by default). Use\n$(XREF ascii, newline) for portability (unless the file was opened in\ntext mode).\n\nExample:\n----\nimport std.algorithm, std.array, std.stdio;\n// Print sorted lines of a file.\nvoid main()\n{\n    auto sortedLines = File(\"file.txt\")   // Open for reading\n                       .byLineCopy()      // Read persistent lines\n                       .array()           // into an array\n                       .sort();           // then sort them\n    foreach (line; sortedLines)\n        writeln(line);\n}\n----\nSee_Also:\n$(XREF file,readText)\n",
						"name": "byLineCopy"
					},
					{
						"kind": "template",
						"line": 2122,
						"constraint": "is(Unqual!(ElementEncodingType!Terminator) == Unqual!Char)",
						"members": [
							{
								"kind": "function",
								"line": 2122,
								"storageClass": [
									"auto"
								],
								"endchar": 5,
								"char": 10,
								"type": "(KeepTerminator keepTerminator, Terminator terminator)",
								"parameters": [
									{
										"type": "KeepTerminator",
										"name": "keepTerminator"
									},
									{
										"type": "Terminator",
										"name": "terminator"
									}
								],
								"name": "byLineCopy",
								"endline": 2127
							}
						],
						"char": 10,
						"parameters": [
							{
								"kind": "type",
								"name": "Terminator"
							},
							{
								"kind": "type",
								"defaultDeco": "ya",
								"name": "Char"
							}
						],
						"comment": "ditto\n",
						"name": "byLineCopy"
					},
					{
						"kind": "function",
						"line": 2450,
						"storageClass": [
							"auto"
						],
						"deco": "FmZS3std5stdio4File7ByChunk",
						"endchar": 5,
						"char": 10,
						"parameters": [
							{
								"deco": "m",
								"name": "chunkSize"
							}
						],
						"name": "byChunk",
						"comment": "Returns an input range set up to read from the file handle a chunk at a\ntime.\n\nThe element type for the range will be $(D ubyte[]). Range primitives\nmay throw $(D StdioException) on I/O error.\n\nExample:\n---------\nvoid main()\n{\n    // Read standard input 4KB at a time\n    foreach (ubyte[] buffer; stdin.byChunk(4096))\n    {\n        ... use buffer ...\n    }\n}\n---------\n\nThe parameter may be a number (as shown in the example above) dictating the\nsize of each chunk. Alternatively, $(D byChunk) accepts a\nuser-provided buffer that it uses directly.\n\nExample:\n---------\nvoid main()\n{\n    // Read standard input 4KB at a time\n    foreach (ubyte[] buffer; stdin.byChunk(new ubyte[4096]))\n    {\n        ... use buffer ...\n    }\n}\n---------\n\nIn either case, the content of the buffer is reused across calls. That means\n$(D front) will not persist after $(D popFront) is called, so if retention is\nneeded, the caller must copy its contents (e.g. by calling $(D buffer.dup)).\n\nIn the  example above, $(D buffer.length) is 4096 for all iterations, except\nfor the last one, in which case $(D buffer.length) may be less than 4096 (but\nalways greater than zero).\n\nWith the mentioned limitations, $(D byChunks) works with any algorithm\ncompatible with input ranges.\n\nExample:\n---\n// Efficient file copy, 1MB at a time.\nimport std.algorithm, std.stdio;\nvoid main()\n{\n    stdin.byChunk(1024 * 1024).copy(stdout.lockingTextWriter());\n}\n---\n\n$(XREF algorithm, joiner) can be used to join chunks together into a single\nrange lazily.\nExample:\n---\nimport std.algorithm, std.stdio;\nvoid main()\n{\n    //Range of ranges\n    static assert(is(typeof(stdin.byChunk(4096).front) == ubyte[]));\n    //Range of elements\n    static assert(is(typeof(stdin.byChunk(4096).joiner.front) == ubyte));\n}\n---\n\nReturns: A call to $(D byChunk) returns a range initialized with the $(D File)\nobject and the appropriate buffer.\n\nThrows: If the user-provided size is zero or the user-provided buffer\nis empty, throws an $(D Exception). In case of an I/O error throws\n$(D StdioException).\n",
						"originalType": "(size_t chunkSize)",
						"endline": 2453
					},
					{
						"kind": "function",
						"line": 2455,
						"deco": "FAhZS3std5stdio4File7ByChunk",
						"endchar": 5,
						"char": 13,
						"parameters": [
							{
								"deco": "Ah",
								"name": "buffer"
							}
						],
						"name": "byChunk",
						"comment": "Ditto\n",
						"endline": 2458
					},
					{
						"kind": "function",
						"line": 2693,
						"storageClass": [
							"auto"
						],
						"deco": "FNfZS3std5stdio4File17LockingTextWriter",
						"endchar": 5,
						"char": 10,
						"name": "lockingTextWriter",
						"comment": " Returns an output range that locks the file and allows fast writing to it.\n\nSee $(LREF byChunk) for an example.\n",
						"originalType": "@safe ()",
						"endline": 2696
					},
					{
						"kind": "function",
						"line": 2699,
						"deco": "FNdNfZm",
						"endchar": 5,
						"char": 21,
						"name": "size",
						"comment": "Get the size of the file, ulong.max if file is not searchable, but still throws if an actual error occurs.\n",
						"endline": 2708
					}
				],
				"char": 1,
				"name": "File",
				"comment": "Encapsulates a $(D FILE*). Generally D does not attempt to provide\nthin wrappers over equivalent functions in the C standard library, but\nmanipulating $(D FILE*) values directly is unsafe and error-prone in\nmany ways. The $(D File) type ensures safe manipulation, automatic\nfile closing, and a lot of convenience.\n\nThe underlying $(D FILE*) handle is maintained in a reference-counted\nmanner, such that as soon as the last $(D File) variable bound to a\ngiven $(D FILE*) goes out of scope, the underlying $(D FILE*) is\nautomatically closed.\n\nBugs:\n$(D File) expects file names to be encoded in $(B CP_ACP) on $(I Windows)\ninstead of UTF-8 ($(BUGZILLA 7648)) thus must not be used in $(I Windows)\nor cross-platform applications other than with an immediate ASCII string as\na file name to prevent accidental changes to result in incorrect behavior.\nOne can use $(XREF file, read)/$(XREF file, write)/$(XREF stream, _File)\ninstead.\n\nExample:\n----\n// test.d\nvoid main(string args[])\n{\n    auto f = File(\"test.txt\", \"w\"); // open for writing\n    f.write(\"Hello\");\n    if (args.length > 1)\n    {\n        auto g = f; // now g and f write to the same file\n                    // internal reference count is 2\n        g.write(\", \", args[1]);\n        // g exits scope, reference count decreases to 1\n    }\n    f.writeln(\"!\");\n    // f exits scope, reference count falls to zero,\n    // underlying $(D FILE*) is closed.\n}\n----\n<pre class=console>\n% rdmd test.d Jimmy\n% cat test.txt\nHello, Jimmy!\n% __\n</pre>\n"
			},
			{
				"kind": "enum",
				"line": 2885,
				"members": [
					{
						"kind": "enum member",
						"line": 2892,
						"value": "0",
						"char": 5,
						"name": "read",
						"comment": "Specifies a _read (shared) lock. A _read lock denies all processes\n\nwrite access to the specified region of the file, including the\n\nprocess that first locks the region. All processes can _read the\n\nlocked region. Multiple simultaneous _read locks are allowed, as\n\nlong as there are no exclusive locks.\n"
					},
					{
						"kind": "enum member",
						"line": 2897,
						"value": "1",
						"char": 5,
						"name": "readWrite",
						"comment": "Specifies a read/write (exclusive) lock. A read/write lock denies all\n\nother processes both read and write access to the locked file region.\n\nIf a segment has an exclusive lock, it may not have any shared locks\n\nor other exclusive locks.\n"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "LockType",
				"comment": "Used to specify the lock type for $(D File.lock) and $(D File.tryLock).\n"
			},
			{
				"kind": "template",
				"line": 3075,
				"members": [
					{
						"kind": "variable",
						"line": 3077,
						"init": "is(T : FILE*) || is(T : File)",
						"storageClass": [
							"enum"
						],
						"char": 10,
						"name": "isFileHandle"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": " Indicates whether $(D T) is a file handle of some kind.\n",
				"name": "isFileHandle"
			},
			{
				"kind": "alias",
				"line": 3092,
				"storageClass": [
					"deprecated"
				],
				"char": 1,
				"name": "isStreamingDevice",
				"comment": " $(RED Deprecated. Please use $(D isFileHandle) instead. This alias will be\n       removed in June 2015.)\n"
			},
			{
				"kind": "template",
				"line": 3107,
				"constraint": "!is(T[0] : File)",
				"members": [
					{
						"kind": "function",
						"line": 3107,
						"endchar": 1,
						"char": 6,
						"type": "void(T args)",
						"parameters": [
							{
								"type": "T",
								"name": "args"
							}
						],
						"name": "write",
						"endline": 3110
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "tuple",
						"name": "T"
					}
				],
				"comment": "For each argument $(D arg) in $(D args), format the argument (as per\n$(LINK2 std_conv.html, to!(string)(arg))) and write the resulting\nstring to $(D args[0]). A call without any arguments will fail to\ncompile.\n\nThrows: In case of an I/O error, throws an $(D StdioException).\n",
				"name": "write"
			},
			{
				"kind": "template",
				"line": 3143,
				"members": [
					{
						"kind": "function",
						"line": 3143,
						"endchar": 1,
						"char": 6,
						"type": "void(T args)",
						"parameters": [
							{
								"type": "T",
								"name": "args"
							}
						],
						"name": "writeln",
						"endline": 3178
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "tuple",
						"name": "T"
					}
				],
				"comment": " Equivalent to $(D write(args, '\\n')).  Calling $(D writeln) without\n arguments is valid and just prints a newline to the standard\n output.\n",
				"name": "writeln"
			},
			{
				"kind": "template",
				"line": 3318,
				"members": [
					{
						"kind": "function",
						"line": 3318,
						"endchar": 1,
						"char": 6,
						"type": "void(T args)",
						"parameters": [
							{
								"type": "T",
								"name": "args"
							}
						],
						"name": "writef",
						"endline": 3321
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "tuple",
						"name": "T"
					}
				],
				"comment": "Writes formatted data to standard output (without a trailing newline).\n\nParams:\nargs = The first argument $(D args[0]) should be the format string, specifying\nhow to format the rest of the arguments. For a full description of the syntax\nof the format string and how it controls the formatting of the rest of the\narguments, please refer to the documentation for $(XREF format,\nformattedWrite).\n\nNote: In older versions of Phobos, it used to be possible to write:\n\n------\nwritef(stderr, \"%s\", \"message\");\n------\n\nto print a message to $(D stderr). This syntax is no longer supported, and has\nbeen superceded by:\n\n------\nstderr.writef(\"%s\", \"message\");\n------\n\n",
				"name": "writef"
			},
			{
				"kind": "template",
				"line": 3349,
				"members": [
					{
						"kind": "function",
						"line": 3349,
						"endchar": 1,
						"char": 6,
						"type": "void(T args)",
						"parameters": [
							{
								"type": "T",
								"name": "args"
							}
						],
						"name": "writefln",
						"endline": 3352
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "tuple",
						"name": "T"
					}
				],
				"comment": " Equivalent to $(D writef(args, '\\n')).\n",
				"name": "writefln"
			},
			{
				"kind": "template",
				"line": 3399,
				"members": [
					{
						"kind": "function",
						"line": 3399,
						"endchar": 1,
						"char": 6,
						"type": "uint(in char[] format, A args)",
						"parameters": [
							{
								"storageClass": [
									"in"
								],
								"type": "char[]",
								"name": "format"
							},
							{
								"type": "A",
								"name": "args"
							}
						],
						"name": "readf",
						"endline": 3402
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "tuple",
						"name": "A"
					}
				],
				"comment": " Read data from $(D stdin) according to the specified\n $(LINK2 std_format.html#format-string, format specifier) using\n $(XREF format,formattedRead).\n",
				"name": "readf"
			},
			{
				"kind": "template",
				"line": 3444,
				"constraint": "isSomeString!S",
				"members": [
					{
						"kind": "function",
						"line": 3444,
						"endchar": 1,
						"char": 3,
						"type": "S(dchar terminator = '\\x0a')",
						"parameters": [
							{
								"deco": "w",
								"default": "'\\x0a'",
								"name": "terminator"
							}
						],
						"name": "readln",
						"endline": 3448
					}
				],
				"char": 3,
				"parameters": [
					{
						"kind": "type",
						"default": "string",
						"name": "S"
					}
				],
				"comment": " Read line from $(D stdin).\n\n This version manages its own read buffer, which means one memory allocation per call. If you are not\n retaining a reference to the read data, consider the $(D readln(buf)) version, which may offer\n better performance as it can reuse its read buffer.\n\n Returns:\n        The line that was read, including the line terminator character.\n Params:\n        S = Template parameter; the type of the allocated buffer, and the type returned. Defaults to $(D string).\n        terminator = Line terminator (by default, $(D '\\n')).\n Note:\n        String terminators are not supported due to ambiguity with readln(buf) below.\n Throws:\n        $(D StdioException) on I/O error, or $(D UnicodeException) on Unicode conversion error.\n Example:\n        Reads $(D stdin) and writes it to $(D stdout).\n---\nimport std.stdio;\n\nvoid main()\n{\n    string line;\n    while ((line = readln()) !is null)\n        write(line);\n}\n---\n",
				"name": "readln"
			},
			{
				"kind": "template",
				"line": 3478,
				"constraint": "isSomeChar!C && is(Unqual!C == C) && !is(C == enum)",
				"members": [
					{
						"kind": "function",
						"line": 3478,
						"endchar": 1,
						"char": 8,
						"type": "size_t(ref C[] buf, dchar terminator = '\\x0a')",
						"parameters": [
							{
								"storageClass": [
									"ref"
								],
								"type": "C[]",
								"name": "buf"
							},
							{
								"deco": "w",
								"default": "'\\x0a'",
								"name": "terminator"
							}
						],
						"name": "readln",
						"endline": 3482
					}
				],
				"char": 8,
				"parameters": [
					{
						"kind": "type",
						"name": "C"
					}
				],
				"comment": " Read line from $(D stdin) and write it to buf[], including terminating character.\n\n This can be faster than $(D line = readln()) because you can reuse\n the buffer for each call. Note that reusing the buffer means that you\n must copy the previous contents if you wish to retain them.\n\n Returns:\n        $(D size_t) 0 for end of file, otherwise number of characters read\n Params:\n        buf = Buffer used to store the resulting line data. buf is resized as necessary.\n        terminator = Line terminator (by default, $(D '\\n')). Use $(XREF ascii, newline)\n        for portability (unless the file was opened in text mode).\n Throws:\n        $(D StdioException) on I/O error, or $(D UnicodeException) on Unicode conversion error.\n Example:\n        Reads $(D stdin) and writes it to $(D stdout).\n---\nimport std.stdio;\n\nvoid main()\n{\n    char[] buf;\n    while (readln(buf))\n        write(buf);\n}\n---\n",
				"name": "readln"
			},
			{
				"kind": "template",
				"line": 3485,
				"constraint": "isSomeChar!C && is(Unqual!C == C) && !is(C == enum) && isBidirectionalRange!R && is(typeof(terminator.front == (dchar).init))",
				"members": [
					{
						"kind": "function",
						"line": 3485,
						"endchar": 1,
						"char": 8,
						"type": "size_t(ref C[] buf, R terminator)",
						"parameters": [
							{
								"storageClass": [
									"ref"
								],
								"type": "C[]",
								"name": "buf"
							},
							{
								"type": "R",
								"name": "terminator"
							}
						],
						"name": "readln",
						"endline": 3490
					}
				],
				"char": 8,
				"parameters": [
					{
						"kind": "type",
						"name": "C"
					},
					{
						"kind": "type",
						"name": "R"
					}
				],
				"comment": " ditto\n",
				"name": "readln"
			},
			{
				"kind": "function",
				"line": 3556,
				"deco": "FNbNiNexAaxAaZPOS4core4stdc5stdio8_IO_FILE",
				"endchar": 5,
				"char": 11,
				"parameters": [
					{
						"deco": "xAa",
						"name": "name"
					},
					{
						"deco": "xAa",
						"default": "\"r\"",
						"name": "mode"
					}
				],
				"name": "popen",
				"comment": " Convenience function that forwards to $(D core.sys.posix.stdio.popen)\n with appropriately-constructed C-style strings.\n",
				"originalType": "nothrow @nogc @trusted FILE*(in char[] name, in char[] mode = \"r\")",
				"endline": 3562
			},
			{
				"kind": "struct",
				"line": 3623,
				"members": [
					{
						"kind": "constructor",
						"line": 3635,
						"deco": "FNcS3std5stdio4FilewZS3std5stdio5lines",
						"endchar": 5,
						"char": 5,
						"parameters": [
							{
								"deco": "S3std5stdio4File",
								"name": "f"
							},
							{
								"deco": "w",
								"default": "'\\x0a'",
								"name": "terminator"
							}
						],
						"name": "this",
						"comment": "    Constructor.\n    Params:\n    f = File to read lines from.\n    terminator = Line separator ($(D '\\n') by default).\n",
						"originalType": "ref (File f, dchar terminator = '\\x0a')",
						"endline": 3639
					}
				],
				"char": 1,
				"name": "lines",
				"comment": " Iterates through the lines of a file by using $(D foreach).\n\n Example:\n\n---------\nvoid main()\n{\n  foreach (string line; lines(stdin))\n  {\n    ... use line ...\n  }\n}\n---------\nThe line terminator ($(D '\\n') by default) is part of the string read (it\ncould be missing in the last line of the file). Several types are\nsupported for $(D line), and the behavior of $(D lines)\nchanges accordingly:\n\n$(OL $(LI If $(D line) has type $(D string), $(D\nwstring), or $(D dstring), a new string of the respective type\nis allocated every read.) $(LI If $(D line) has type $(D\nchar[]), $(D wchar[]), $(D dchar[]), the line's content\nwill be reused (overwritten) across reads.) $(LI If $(D line)\nhas type $(D immutable(ubyte)[]), the behavior is similar to\ncase (1), except that no UTF checking is attempted upon input.) $(LI\nIf $(D line) has type $(D ubyte[]), the behavior is\nsimilar to case (2), except that no UTF checking is attempted upon\ninput.))\n\nIn all cases, a two-symbols versions is also accepted, in which case\nthe first symbol (of integral type, e.g. $(D ulong) or $(D\nuint)) tracks the zero-based number of the current line.\n\nExample:\n----\n  foreach (ulong i, string line; lines(stdin))\n  {\n    ... use line ...\n  }\n----\n\n In case of an I/O error, an $(D StdioException) is thrown.\n\nSee_Also:\n$(LREF byLine)\n"
			},
			{
				"kind": "function",
				"line": 3887,
				"storageClass": [
					"auto"
				],
				"deco": "FS3std5stdio4FilemZS3std5stdio10ChunksImpl",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "S3std5stdio4File",
						"name": "f"
					},
					{
						"deco": "m",
						"name": "size"
					}
				],
				"name": "chunks",
				"comment": "Iterates through a file a chunk at a time by using $(D foreach).\n\nExample:\n\n---------\nvoid main()\n{\n    foreach (ubyte[] buffer; chunks(stdin, 4096))\n    {\n        ... use buffer ...\n    }\n}\n---------\n\nThe content of $(D buffer) is reused across calls. In the\n example above, $(D buffer.length) is 4096 for all iterations,\n except for the last one, in which case $(D buffer.length) may\n be less than 4096 (but always greater than zero).\n\n In case of an I/O error, an $(D StdioException) is thrown.\n",
				"originalType": "(File f, size_t size)",
				"endline": 3890
			},
			{
				"kind": "class",
				"line": 3986,
				"base": "object.Exception",
				"members": [
					{
						"kind": "variable",
						"line": 3990,
						"deco": "k",
						"char": 10,
						"name": "errno",
						"comment": "Operating system error code.\n",
						"offset": 72
					},
					{
						"kind": "constructor",
						"line": 3995,
						"deco": "FAyakZC3std5stdio14StdioException",
						"endchar": 5,
						"char": 5,
						"parameters": [
							{
								"deco": "Aya",
								"name": "message"
							},
							{
								"deco": "k",
								"default": "cast(uint)errno()",
								"name": "e"
							}
						],
						"name": "this",
						"comment": "Initialize with a message and an error code.\n",
						"originalType": "(string message, uint e = core.stdc.errno.errno)",
						"endline": 4026
					},
					{
						"kind": "function",
						"line": 4029,
						"storageClass": [
							"static"
						],
						"deco": "FAyaZv",
						"endchar": 5,
						"char": 17,
						"parameters": [
							{
								"deco": "Aya",
								"name": "msg"
							}
						],
						"name": "opCall",
						"comment": " Convenience functions that throw an $(D StdioException).\n",
						"endline": 4032
					},
					{
						"kind": "function",
						"line": 4035,
						"storageClass": [
							"static"
						],
						"deco": "FZv",
						"endchar": 5,
						"char": 17,
						"name": "opCall",
						"comment": "ditto\n",
						"endline": 4038
					}
				],
				"char": 1,
				"name": "StdioException",
				"comment": " Thrown if I/O errors happen.\n"
			},
			{
				"kind": "variable",
				"line": 4063,
				"storageClass": [
					"__gshared"
				],
				"deco": "S3std5stdio4File",
				"char": 10,
				"name": "stdin",
				"comment": " The standard input stream.\nExample:\n\n---\n// Read stdin, sort lines, write to stdout\nimport std.stdio, std.array, std.algorithm : sort, copy;\n\nvoid main() {\n    stdin                       // read from stdin\n    .byLineCopy(KeepTerminator.yes) // copying each line\n    .array()                    // convert to array of lines\n    .sort()                     // sort the lines\n    .copy(                      // copy output of .sort to an OutputRange\n        stdout.lockingTextWriter()); // the OutputRange\n}\n\n\n---\n"
			},
			{
				"kind": "variable",
				"line": 4080,
				"storageClass": [
					"__gshared"
				],
				"deco": "S3std5stdio4File",
				"char": 10,
				"name": "stdout",
				"comment": "The standard output stream.\n"
			},
			{
				"kind": "variable",
				"line": 4081,
				"storageClass": [
					"__gshared"
				],
				"deco": "S3std5stdio4File",
				"char": 10,
				"name": "stderr",
				"comment": "The standard error stream.\n"
			},
			{
				"kind": "function",
				"line": 4508,
				"deco": "FAyatZS3std5stdio4File",
				"endchar": 5,
				"char": 10,
				"parameters": [
					{
						"deco": "Aya",
						"name": "host"
					},
					{
						"deco": "t",
						"name": "port"
					}
				],
				"name": "openNetwork",
				"comment": " Experimental network access via the File interface\n\n        Opens a TCP connection to the given host and port, then returns\n        a File struct with read and write access through the same interface\n        as any other file (meaning writef and the byLine ranges work!).\n\n        Authors:\n                Adam D. Ruppe\n\n        Bugs:\n                Only works on Linux\n",
				"endline": 4546
			}
		],
		"name": "std.stdio",
		"comment": "Standard I/O functions that extend $(B core.stdc.stdio).  $(B core.stdc.stdio)\nis $(D_PARAM public)ally imported when importing $(B std.stdio).\n\nSource: $(PHOBOSSRC std/_stdio.d)\nMacros:\nWIKI=Phobos/StdStdio\n\nCopyright: Copyright Digital Mars 2007-.\nLicense:   $(WEB boost.org/LICENSE_1_0.txt, Boost License 1.0).\nAuthors:   $(WEB digitalmars.com, Walter Bright),\n           $(WEB erdani.org, Andrei Alexandrescu),\n           Alex Rønne Petersen\n"
	},
	{
		"kind": "module",
		"file": "../phobos/std/traits.d",
		"members": [
			{
				"kind": "template",
				"line": 322,
				"members": [],
				"char": 1,
				"parameters": [
					{
						"kind": "alias",
						"name": "T"
					}
				],
				"comment": " Get the full package name for the given symbol.\nExample:\n\n---\nimport std.traits;\nstatic assert(packageName!packageName == \"std\");\n\n---\n",
				"name": "packageName"
			},
			{
				"kind": "template",
				"line": 376,
				"members": [],
				"char": 1,
				"parameters": [
					{
						"kind": "alias",
						"name": "T"
					}
				],
				"comment": " Get the module name (including package) for the given symbol.\nExample:\n\n---\nimport std.traits;\nstatic assert(moduleName!moduleName == \"std.traits\");\n\n---\n",
				"name": "moduleName"
			},
			{
				"kind": "template",
				"line": 439,
				"constraint": "T.length == 1",
				"members": [],
				"char": 1,
				"parameters": [
					{
						"kind": "tuple",
						"name": "T"
					}
				],
				"comment": " Get the fully qualified name of a type or a symbol. Can act as an intelligent type/symbol to string  converter.\n\nExample:\n-----------------\nmodule myModule;\nstruct MyStruct {}\nstatic assert(fullyQualifiedName!(const MyStruct[]) == \"const(myModule.MyStruct[])\");\n-----------------\nExample:\n\n---\nstatic assert(fullyQualifiedName!fullyQualifiedName == \"std.traits.fullyQualifiedName\");\n\n---\n",
				"name": "fullyQualifiedName"
			},
			{
				"kind": "template",
				"line": 844,
				"constraint": "func.length == 1 && isCallable!func",
				"members": [],
				"char": 1,
				"parameters": [
					{
						"kind": "tuple",
						"name": "func"
					}
				],
				"comment": " Get the type of the return value from a function,\n a pointer to function, a delegate, a struct\n with an opCall, a pointer to a struct with an opCall,\n or a class with an $(D opCall). Please note that $(D_KEYWORD ref)\n is not part of a type, but the attribute of the function\n (see template $(LREF functionAttributes)).\nExample:\n\n---\nint foo();\nReturnType!foo x;   // x is declared as int\n\n---\n",
				"name": "ReturnType"
			},
			{
				"kind": "template",
				"line": 903,
				"constraint": "func.length == 1 && isCallable!func",
				"members": [],
				"char": 1,
				"parameters": [
					{
						"kind": "tuple",
						"name": "func"
					}
				],
				"comment": "Get, as a tuple, the types of the parameters to a function, a pointer\nto function, a delegate, a struct with an $(D opCall), a pointer to a\nstruct with an $(D opCall), or a class with an $(D opCall).\nExample:\n\n---\nint foo(int, long);\nvoid bar(ParameterTypeTuple!foo);      // declares void bar(int, long);\nvoid abc(ParameterTypeTuple!foo[1]);   // declares void abc(long);\n\n---\n",
				"name": "ParameterTypeTuple"
			},
			{
				"kind": "template",
				"line": 948,
				"constraint": "isCallable!func && variadicFunctionStyle!func == Variadic.no",
				"members": [
					{
						"kind": "variable",
						"line": 951,
						"init": "ParameterTypeTuple!func.length",
						"storageClass": [
							"enum"
						],
						"char": 17,
						"type": "size_t",
						"name": "arity"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "alias",
						"name": "func"
					}
				],
				"comment": "Returns the number of arguments of function $(D func).\narity is undefined for variadic functions.\nExample:\n\n---\nvoid foo(){}\nstatic assert(arity!foo==0);\nvoid bar(uint){}\nstatic assert(arity!bar==1);\nvoid variadicFoo(uint...){}\nstatic assert(__traits(compiles,arity!variadicFoo)==false);\n\n---\n",
				"name": "arity"
			},
			{
				"kind": "enum",
				"line": 968,
				"members": [
					{
						"kind": "enum member",
						"line": 974,
						"value": "0u",
						"char": 5,
						"name": "none",
						"comment": " These flags can be bitwise OR-ed together to represent complex storage\n class.\n"
					},
					{
						"kind": "enum member",
						"line": 975,
						"value": "1u",
						"char": 5,
						"name": "scope_",
						"comment": "ditto\n"
					},
					{
						"kind": "enum member",
						"line": 976,
						"value": "2u",
						"char": 5,
						"name": "out_",
						"comment": "ditto\n"
					},
					{
						"kind": "enum member",
						"line": 977,
						"value": "4u",
						"char": 5,
						"name": "ref_",
						"comment": "ditto\n"
					},
					{
						"kind": "enum member",
						"line": 978,
						"value": "8u",
						"char": 5,
						"name": "lazy_",
						"comment": "ditto\n"
					},
					{
						"kind": "enum member",
						"line": 979,
						"value": "16u",
						"char": 5,
						"name": "return_",
						"comment": "ditto\n"
					}
				],
				"char": 1,
				"baseDeco": "k",
				"name": "ParameterStorageClass",
				"comment": "Returns a tuple consisting of the storage classes of the parameters of a\nfunction $(D func).\nExample:\n\n---\nalias STC = ParameterStorageClass; // shorten the enum name\n\nvoid func(ref int ctx, out real result, real param)\n{\n}\nalias pstc = ParameterStorageClassTuple!func;\nstatic assert(pstc.length == 3); // three parameters\nstatic assert(pstc[0] == STC.ref_);\nstatic assert(pstc[1] == STC.out_);\nstatic assert(pstc[2] == STC.none);\n\n---\n"
			},
			{
				"kind": "template",
				"line": 983,
				"constraint": "func.length == 1 && isCallable!func",
				"members": [
					{
						"kind": "alias",
						"line": 1018,
						"char": 5,
						"type": "demangleNextParameter!margs",
						"name": "ParameterStorageClassTuple"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "tuple",
						"name": "func"
					}
				],
				"comment": "ditto\n",
				"name": "ParameterStorageClassTuple"
			},
			{
				"kind": "template",
				"line": 1091,
				"constraint": "func.length == 1 && isCallable!func",
				"members": [
					{
						"kind": "alias",
						"line": 1127,
						"char": 5,
						"type": "Impl!()",
						"name": "ParameterIdentifierTuple"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "tuple",
						"name": "func"
					}
				],
				"comment": "Get, as a tuple, the identifiers of the parameters to a function symbol.\nExample:\n\n---\nint foo(int num, string name, int);\nstatic assert([ParameterIdentifierTuple!foo] == [\"num\", \"name\", \"\"]);\n\n---\n",
				"name": "ParameterIdentifierTuple"
			},
			{
				"kind": "template",
				"line": 1178,
				"constraint": "func.length == 1 && isCallable!func",
				"members": [
					{
						"kind": "alias",
						"line": 1221,
						"char": 5,
						"type": "Impl!()",
						"name": "ParameterDefaultValueTuple"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "tuple",
						"name": "func"
					}
				],
				"comment": "Get, as a tuple, the default value of the parameters to a function symbol.\nIf a parameter doesn't have the default value, $(D void) is returned instead.\nExample:\n\n---\nint foo(int num, string name = \"hello\", int[] = [1,2,3]);\nstatic assert(is(ParameterDefaultValueTuple!foo[0] == void));\nstatic assert(   ParameterDefaultValueTuple!foo[1] == \"hello\");\nstatic assert(   ParameterDefaultValueTuple!foo[2] == [1,2,3]);\n\n---\n",
				"name": "ParameterDefaultValueTuple"
			},
			{
				"kind": "enum",
				"line": 1271,
				"members": [
					{
						"kind": "enum member",
						"line": 1276,
						"value": "0u",
						"char": 5,
						"name": "none",
						"comment": " These flags can be bitwise OR-ed together to represent a complex attribute.\n"
					},
					{
						"kind": "enum member",
						"line": 1277,
						"value": "1u",
						"char": 5,
						"name": "pure_",
						"comment": "ditto\n"
					},
					{
						"kind": "enum member",
						"line": 1278,
						"value": "2u",
						"char": 5,
						"name": "nothrow_",
						"comment": "ditto\n"
					},
					{
						"kind": "enum member",
						"line": 1279,
						"value": "4u",
						"char": 5,
						"name": "ref_",
						"comment": "ditto\n"
					},
					{
						"kind": "enum member",
						"line": 1280,
						"value": "8u",
						"char": 5,
						"name": "property",
						"comment": "ditto\n"
					},
					{
						"kind": "enum member",
						"line": 1281,
						"value": "16u",
						"char": 5,
						"name": "trusted",
						"comment": "ditto\n"
					},
					{
						"kind": "enum member",
						"line": 1282,
						"value": "32u",
						"char": 5,
						"name": "safe",
						"comment": "ditto\n"
					},
					{
						"kind": "enum member",
						"line": 1283,
						"value": "64u",
						"char": 5,
						"name": "nogc",
						"comment": "ditto\n"
					},
					{
						"kind": "enum member",
						"line": 1284,
						"value": "128u",
						"char": 5,
						"name": "system",
						"comment": "ditto\n"
					},
					{
						"kind": "enum member",
						"line": 1285,
						"value": "256u",
						"char": 5,
						"name": "const_",
						"comment": "ditto\n"
					},
					{
						"kind": "enum member",
						"line": 1286,
						"value": "512u",
						"char": 5,
						"name": "immutable_",
						"comment": "ditto\n"
					},
					{
						"kind": "enum member",
						"line": 1287,
						"value": "1024u",
						"char": 5,
						"name": "inout_",
						"comment": "ditto\n"
					},
					{
						"kind": "enum member",
						"line": 1288,
						"value": "2048u",
						"char": 5,
						"name": "shared_",
						"comment": "ditto\n"
					},
					{
						"kind": "enum member",
						"line": 1289,
						"value": "4096u",
						"char": 5,
						"name": "return_",
						"comment": "ditto\n"
					}
				],
				"char": 1,
				"baseDeco": "k",
				"name": "FunctionAttribute",
				"comment": "Returns the attributes attached to a function $(D func).\nExample:\n\n---\nimport std.traits : functionAttributes, FunctionAttribute;\n\nalias FA = FunctionAttribute; // shorten the enum name\n\nreal func(real x) pure nothrow @safe\n{\n    return x;\n}\nstatic assert(functionAttributes!func & FA.pure_);\nstatic assert(functionAttributes!func & FA.safe);\nstatic assert(!(functionAttributes!func & FA.trusted)); // not @trusted\n\n---\n"
			},
			{
				"kind": "template",
				"line": 1293,
				"constraint": "func.length == 1 && isCallable!func",
				"members": [
					{
						"kind": "variable",
						"line": 1300,
						"init": "extractAttribFlags!(__traits(getFunctionAttributes, FuncSym))()",
						"storageClass": [
							"enum"
						],
						"char": 28,
						"type": "FunctionAttribute",
						"name": "functionAttributes"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "tuple",
						"name": "func"
					}
				],
				"comment": "ditto\n",
				"name": "functionAttributes"
			},
			{
				"kind": "template",
				"line": 1461,
				"constraint": "isCallable!func",
				"members": [
					{
						"kind": "variable",
						"line": 1464,
						"init": "(functionAttributes!func & FunctionAttribute.safe) != 0 || (functionAttributes!func & FunctionAttribute.trusted) != 0",
						"storageClass": [
							"enum"
						],
						"char": 10,
						"name": "isSafe"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "alias",
						"name": "func"
					}
				],
				"comment": "$(D true) if $(D func) is $(D @safe) or $(D @trusted).\nExample:\n\n---\n@safe    int add(int a, int b) {return a+b;}\n@trusted int sub(int a, int b) {return a-b;}\n@system  int mul(int a, int b) {return a*b;}\n\nstatic assert( isSafe!add);\nstatic assert( isSafe!sub);\nstatic assert(!isSafe!mul);\n\n---\n",
				"name": "isSafe"
			},
			{
				"kind": "template",
				"line": 1540,
				"members": [
					{
						"kind": "variable",
						"line": 1542,
						"init": "!isSafe!func",
						"storageClass": [
							"enum"
						],
						"char": 10,
						"name": "isUnsafe"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "alias",
						"name": "func"
					}
				],
				"comment": "$(D true) if $(D func) is $(D @system).\nExample:\n\n---\n@safe    int add(int a, int b) {return a+b;}\n@trusted int sub(int a, int b) {return a-b;}\n@system  int mul(int a, int b) {return a*b;}\n\nstatic assert(!isUnsafe!add);\nstatic assert(!isUnsafe!sub);\nstatic assert( isUnsafe!mul);\n\n---\n",
				"name": "isUnsafe"
			},
			{
				"kind": "template",
				"line": 1633,
				"constraint": "funcs.length > 0",
				"members": [],
				"char": 1,
				"parameters": [
					{
						"kind": "tuple",
						"name": "funcs"
					}
				],
				"comment": "$(RED Deprecated. It's badly named and provides redundant functionality. It was\nalso badly broken prior to 2.060 (bug# 8362), so any code which uses it\nprobably needs to be changed anyway. Please use $(D allSatisfy(isSafe, ...))\ninstead. This will be removed in June 2015.)\n\n$(D true) all functions are $(D isSafe).\n\nExample\n-------------\n@safe    int add(int a, int b) {return a+b;}\n@trusted int sub(int a, int b) {return a-b;}\n@system  int mul(int a, int b) {return a*b;}\n\nstatic assert( areAllSafe!(add, add));\nstatic assert( areAllSafe!(add, sub));\nstatic assert(!areAllSafe!(sub, mul));\n-------------\n",
				"name": "areAllSafe"
			},
			{
				"kind": "template",
				"line": 1679,
				"constraint": "func.length == 1 && isCallable!func",
				"members": [
					{
						"kind": "variable",
						"line": 1684,
						"init": "['F':\"D\", 'U':\"C\", 'W':\"Windows\", 'V':\"Pascal\", 'R':\"C++\"][mangledName!Func[0]]",
						"storageClass": [
							"enum"
						],
						"char": 17,
						"type": "string",
						"name": "functionLinkage"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "tuple",
						"name": "func"
					}
				],
				"comment": "Returns the calling convention of function as a string.\nExample:\n\n---\nimport std.stdio : writeln, printf;\n\nstring a = functionLinkage!(writeln!(string, int));\nassert(a == \"D\"); // extern(D)\n\nauto fp = &printf;\nstring b = functionLinkage!fp;\nassert(b == \"C\"); // extern(C)\n\n---\n",
				"name": "functionLinkage"
			},
			{
				"kind": "enum",
				"line": 1729,
				"members": [
					{
						"kind": "enum member",
						"line": 1731,
						"value": "0",
						"char": 5,
						"name": "no",
						"comment": "Function is not variadic.\n"
					},
					{
						"kind": "enum member",
						"line": 1732,
						"value": "1",
						"char": 5,
						"name": "c",
						"comment": "Function is a _C-style variadic function.\n"
					},
					{
						"kind": "enum member",
						"line": 1734,
						"value": "2",
						"char": 5,
						"name": "d",
						"comment": "Function is a _D-style variadic function, which uses\n\n__argptr and __arguments.\n"
					},
					{
						"kind": "enum member",
						"line": 1735,
						"value": "3",
						"char": 5,
						"name": "typesafe",
						"comment": "Function is a typesafe variadic function.\n"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "Variadic",
				"comment": "Determines what kind of variadic parameters function has.\nExample:\n\n---\nvoid func() {}\nstatic assert(variadicFunctionStyle!func == Variadic.no);\n\nextern(C) int printf(in char*, ...);\nstatic assert(variadicFunctionStyle!printf == Variadic.c);\n\n---\n"
			},
			{
				"kind": "template",
				"line": 1739,
				"constraint": "func.length == 1 && isCallable!func",
				"members": [
					{
						"kind": "variable",
						"line": 1753,
						"init": "argclose == 'X' ? Variadic.typesafe : argclose == 'Y' ? callconv == \"C\" ? Variadic.c : Variadic.d : Variadic.no",
						"storageClass": [
							"enum"
						],
						"char": 19,
						"type": "Variadic",
						"name": "variadicFunctionStyle"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "tuple",
						"name": "func"
					}
				],
				"comment": "ditto\n",
				"name": "variadicFunctionStyle"
			},
			{
				"kind": "template",
				"line": 1798,
				"constraint": "func.length == 1 && isCallable!func",
				"members": [],
				"char": 1,
				"parameters": [
					{
						"kind": "tuple",
						"name": "func"
					}
				],
				"comment": "Get the function type from a callable object $(D func).\n\nUsing builtin $(D typeof) on a property function yields the types of the\nproperty value, not of the property function itself.  Still,\n$(D FunctionTypeOf) is able to obtain function types of properties.\n\nNote:\nDo not confuse function types with function pointer types; function types are\nusually used for compile-time reflection purposes.\nExample:\n\n---\nclass C\n{\n    int value() @property { return 0; }\n}\nstatic assert(is( typeof(C.value) == int ));\nstatic assert(is( FunctionTypeOf!(C.value) == function ));\n\n---\n",
				"name": "FunctionTypeOf"
			},
			{
				"kind": "template",
				"line": 1903,
				"constraint": "isFunctionPointer!T || isDelegate!T",
				"members": [],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "value",
						"deco": "Aya",
						"name": "linkage"
					},
					{
						"kind": "value",
						"deco": "k",
						"name": "attrs"
					}
				],
				"comment": " Constructs a new function or delegate type with the same basic signature\n as the given one, but different attributes (including linkage).\n\n This is especially useful for adding/removing attributes to/from types in\n generic code, where the actual type name cannot be spelt out.\n\n Params:\n    T = The base type.\n    linkage = The desired linkage of the result type.\n    attrs = The desired $(LREF FunctionAttribute)s of the result type.\nExample:\n\n---\nalias ExternC(T) = SetFunctionAttributes!(T, \"C\", functionAttributes!T);\n\nauto assumePure(T)(T t)\n    if (isFunctionPointer!T || isDelegate!T)\n{\n    enum attrs = functionAttributes!T | FunctionAttribute.pure_;\n    return cast(SetFunctionAttributes!(T, functionLinkage!T, attrs)) t;\n}\n\n---\n",
				"name": "SetFunctionAttributes"
			},
			{
				"kind": "template",
				"line": 1978,
				"constraint": "is(T == function)",
				"members": [
					{
						"kind": "alias",
						"line": 1984,
						"char": 5,
						"type": "FunctionTypeOf!(SetFunctionAttributes!(T*, linkage, attrs))",
						"name": "SetFunctionAttributes"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "value",
						"deco": "Aya",
						"name": "linkage"
					},
					{
						"kind": "value",
						"deco": "k",
						"name": "attrs"
					}
				],
				"comment": "Ditto\n",
				"name": "SetFunctionAttributes"
			},
			{
				"kind": "template",
				"line": 2064,
				"constraint": "is(T == class) || is(T == struct) || is(T == union)",
				"members": [
					{
						"kind": "variable",
						"line": 2067,
						"init": "__traits(isNested, T)",
						"storageClass": [
							"enum"
						],
						"char": 10,
						"name": "isNested"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": "Determines whether $(D T) has its own context pointer.\n$(D T) must be either $(D class), $(D struct), or $(D union).\nExample:\n\n---\nstatic struct S { }\nstatic assert(!isNested!S);\n\nint i;\nstruct NestedStruct { void f() { ++i; } }\nstatic assert(isNested!NestedStruct);\n\n---\n",
				"name": "isNested"
			},
			{
				"kind": "template",
				"line": 2085,
				"members": [],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": "Determines whether $(D T) or any of its representation types\nhave a context pointer.\nExample:\n\n---\nstatic struct S { }\n\nint i;\nstruct NS { void f() { ++i; } }\n\nstatic assert(!hasNested!(S[2]));\nstatic assert(hasNested!(NS[2]));\n\n---\n",
				"name": "hasNested"
			},
			{
				"kind": "template",
				"line": 2168,
				"members": [],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": " Get as a typetuple the types of the fields of a struct, class, or union.\n This consists of the fields that take up memory space,\n excluding the hidden fields like the virtual function\n table pointer or a context pointer for nested types.\n If $(D T) isn't a struct, class, or union returns typetuple\n with one element $(D T).\nExample:\n\n---\nstruct S { int x; float y; }\nstatic assert(is(FieldTypeTuple!S == TypeTuple!(int, float)));\n\n---\n",
				"name": "FieldTypeTuple"
			},
			{
				"kind": "template",
				"line": 2218,
				"members": [],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": " Get as an expression tuple the names of the fields of a struct, class, or\n union. This consists of the fields that take up memory space, excluding the\n hidden fields like the virtual function table pointer or a context pointer\n for nested types. If $(D T) isn't a struct, class, or union returns an\n expression tuple with an empty string.\nExample:\n\n---\nstruct S { int x; float y; }\nstatic assert(FieldNameTuple!S == TypeTuple!(\"x\", \"y\"));\nstatic assert(FieldNameTuple!int == TypeTuple!\"\");\n\n---\n",
				"name": "FieldNameTuple"
			},
			{
				"kind": "template",
				"line": 2263,
				"members": [],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": "Get the primitive types of the fields of a struct or class, in\ntopological order.\nExample:\n\n---\nstruct S1 { int a; float b; }\nstruct S2 { char[] a; union { S1 b; S1 * c; } }\nalias R = RepresentationTypeTuple!S2;\nassert(R.length == 4\n    && is(R[0] == char[]) && is(R[1] == int)\n    && is(R[2] == float) && is(R[3] == S1*));\n\n---\nExample:\n\n---\n// simple types\nstatic assert(!hasRawAliasing!int);\nstatic assert( hasRawAliasing!(char*));\n// references aren't raw pointers\nstatic assert(!hasRawAliasing!Object);\n// built-in arrays do contain raw pointers\nstatic assert( hasRawAliasing!(int[]));\n// aggregate of simple types\nstruct S1 { int a; double b; }\nstatic assert(!hasRawAliasing!S1);\n// indirect aggregation\nstruct S2 { S1 a; double b; }\nstatic assert(!hasRawAliasing!S2);\n\n---\nExample:\n\n---\n// simple types\nstatic assert(!hasRawUnsharedAliasing!int);\nstatic assert( hasRawUnsharedAliasing!(char*));\nstatic assert(!hasRawUnsharedAliasing!(shared char*));\n// references aren't raw pointers\nstatic assert(!hasRawUnsharedAliasing!Object);\n// built-in arrays do contain raw pointers\nstatic assert( hasRawUnsharedAliasing!(int[]));\nstatic assert(!hasRawUnsharedAliasing!(shared int[]));\n// aggregate of simple types\nstruct S1 { int a; double b; }\nstatic assert(!hasRawUnsharedAliasing!S1);\n// indirect aggregation\nstruct S2 { S1 a; double b; }\nstatic assert(!hasRawUnsharedAliasing!S2);\n// struct with a pointer member\nstruct S3 { int a; double * b; }\nstatic assert( hasRawUnsharedAliasing!S3);\nstruct S4 { int a; shared double * b; }\nstatic assert(!hasRawUnsharedAliasing!S4);\n\n---\n",
				"name": "RepresentationTypeTuple"
			},
			{
				"kind": "template",
				"line": 2678,
				"members": [],
				"char": 1,
				"parameters": [
					{
						"kind": "tuple",
						"name": "T"
					}
				],
				"comment": "Returns $(D true) if and only if $(D T)'s representation includes at\nleast one of the following: $(OL $(LI a raw pointer $(D U*) and $(D U)\nis not immutable;) $(LI an array $(D U[]) and $(D U) is not\nimmutable;) $(LI a reference to a class or interface type $(D C) and $(D C) is\nnot immutable.) $(LI an associative array that is not immutable.)\n$(LI a delegate.))\nExample:\n\n---\nstruct S1 { int a; Object b; }\nstruct S2 { string a; }\nstruct S3 { int a; immutable Object b; }\nstruct S4 { float[3] vals; }\nstatic assert( hasAliasing!S1);\nstatic assert(!hasAliasing!S2);\nstatic assert(!hasAliasing!S3);\nstatic assert(!hasAliasing!S4);\n\n---\n",
				"name": "hasAliasing"
			},
			{
				"kind": "template",
				"line": 2781,
				"members": [],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": "Returns $(D true) if and only if $(D T)'s representation includes at\nleast one of the following: $(OL $(LI a raw pointer $(D U*);) $(LI an\narray $(D U[]);) $(LI a reference to a class type $(D C).)\n$(LI an associative array.) $(LI a delegate.))\nExample:\n\n---\nstatic assert( hasIndirections!(int[string]));\nstatic assert( hasIndirections!(void delegate()));\nstatic assert( hasIndirections!(void delegate() immutable));\nstatic assert( hasIndirections!(immutable(void delegate())));\nstatic assert( hasIndirections!(immutable(void delegate() immutable)));\n\nstatic assert(!hasIndirections!(void function()));\nstatic assert( hasIndirections!(void*[1]));\nstatic assert(!hasIndirections!(byte[1]));\n\n---\n",
				"name": "hasIndirections"
			},
			{
				"kind": "template",
				"line": 2891,
				"members": [],
				"char": 1,
				"parameters": [
					{
						"kind": "tuple",
						"name": "T"
					}
				],
				"comment": "Returns $(D true) if and only if $(D T)'s representation includes at\nleast one of the following: $(OL $(LI a raw pointer $(D U*) and $(D U)\nis not immutable or shared;) $(LI an array $(D U[]) and $(D U) is not\nimmutable or shared;) $(LI a reference to a class type $(D C) and\n$(D C) is not immutable or shared.) $(LI an associative array that is not\nimmutable or shared.) $(LI a delegate that is not shared.))\nExample:\n\n---\nstruct S1 { int a; Object b; }\nstruct S2 { string a; }\nstruct S3 { int a; immutable Object b; }\nstatic assert( hasUnsharedAliasing!S1);\nstatic assert(!hasUnsharedAliasing!S2);\nstatic assert(!hasUnsharedAliasing!S3);\n\nstruct S4 { int a; shared Object b; }\nstruct S5 { char[] a; }\nstruct S6 { shared char[] b; }\nstruct S7 { float[3] vals; }\nstatic assert(!hasUnsharedAliasing!S4);\nstatic assert( hasUnsharedAliasing!S5);\nstatic assert(!hasUnsharedAliasing!S6);\nstatic assert(!hasUnsharedAliasing!S7);\n\n---\n",
				"name": "hasUnsharedAliasing"
			},
			{
				"kind": "template",
				"line": 3066,
				"members": [],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "S"
					}
				],
				"comment": " True if $(D S) or any type embedded directly in the representation of $(D S)\n defines an elaborate copy constructor. Elaborate copy constructors are\n introduced by defining $(D this(this)) for a $(D struct).\n\n Classes and unions never have elaborate copy constructors.\nExample:\n\n---\nstatic assert(!hasElaborateCopyConstructor!int);\n\nstatic struct S1 { }\nstatic struct S2 { this(this) {} }\nstatic struct S3 { S2 field; }\nstatic struct S4 { S3[1] field; }\nstatic struct S5 { S3[] field; }\nstatic struct S6 { S3[0] field; }\nstatic struct S7 { @disable this(); S3 field; }\nstatic assert(!hasElaborateCopyConstructor!S1);\nstatic assert( hasElaborateCopyConstructor!S2);\nstatic assert( hasElaborateCopyConstructor!(immutable S2));\nstatic assert( hasElaborateCopyConstructor!S3);\nstatic assert( hasElaborateCopyConstructor!(S3[1]));\nstatic assert(!hasElaborateCopyConstructor!(S3[0]));\nstatic assert( hasElaborateCopyConstructor!S4);\nstatic assert(!hasElaborateCopyConstructor!S5);\nstatic assert(!hasElaborateCopyConstructor!S6);\nstatic assert( hasElaborateCopyConstructor!S7);\n\n---\n",
				"name": "hasElaborateCopyConstructor"
			},
			{
				"kind": "template",
				"line": 3122,
				"members": [],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "S"
					}
				],
				"comment": "   True if $(D S) or any type directly embedded in the representation of $(D S)\n   defines an elaborate assignment. Elaborate assignments are introduced by\n   defining $(D opAssign(typeof(this))) or $(D opAssign(ref typeof(this)))\n   for a $(D struct) or when there is a compiler-generated $(D opAssign).\n\n   A type $(D S) gets compiler-generated $(D opAssign) in case it has\n   an elaborate copy constructor or elaborate destructor.\n\n   Classes and unions never have elaborate assignments.\n\n   Note: Structs with (possibly nested) postblit operator(s) will have a\n   hidden yet elaborate compiler generated assignment operator (unless\n   explicitly disabled).\nExample:\n\n---\nstatic assert(!hasElaborateAssign!int);\n\nstatic struct S  { void opAssign(S) {} }\nstatic assert( hasElaborateAssign!S);\nstatic assert(!hasElaborateAssign!(const(S)));\n\nstatic struct S1 { void opAssign(ref S1) {} }\nstatic struct S2 { void opAssign(int) {} }\nstatic struct S3 { S s; }\nstatic assert( hasElaborateAssign!S1);\nstatic assert(!hasElaborateAssign!S2);\nstatic assert( hasElaborateAssign!S3);\nstatic assert( hasElaborateAssign!(S3[1]));\nstatic assert(!hasElaborateAssign!(S3[0]));\n\n---\n",
				"name": "hasElaborateAssign"
			},
			{
				"kind": "template",
				"line": 3208,
				"members": [],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "S"
					}
				],
				"comment": "   True if $(D S) or any type directly embedded in the representation\n   of $(D S) defines an elaborate destructor. Elaborate destructors\n   are introduced by defining $(D ~this()) for a $(D\n   struct).\n\n   Classes and unions never have elaborate destructors, even\n   though classes may define $(D ~this()).\nExample:\n\n---\nstatic assert(!hasElaborateDestructor!int);\n\nstatic struct S1 { }\nstatic struct S2 { ~this() {} }\nstatic struct S3 { S2 field; }\nstatic struct S4 { S3[1] field; }\nstatic struct S5 { S3[] field; }\nstatic struct S6 { S3[0] field; }\nstatic struct S7 { @disable this(); S3 field; }\nstatic assert(!hasElaborateDestructor!S1);\nstatic assert( hasElaborateDestructor!S2);\nstatic assert( hasElaborateDestructor!(immutable S2));\nstatic assert( hasElaborateDestructor!S3);\nstatic assert( hasElaborateDestructor!(S3[1]));\nstatic assert(!hasElaborateDestructor!(S3[0]));\nstatic assert( hasElaborateDestructor!S4);\nstatic assert(!hasElaborateDestructor!S5);\nstatic assert(!hasElaborateDestructor!S6);\nstatic assert( hasElaborateDestructor!S7);\n\n---\n",
				"name": "hasElaborateDestructor"
			},
			{
				"kind": "template",
				"line": 3255,
				"members": [],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "value",
						"deco": "Aya",
						"name": "name"
					}
				],
				"comment": "   Yields $(D true) if and only if $(D T) is an aggregate that defines\n   a symbol called $(D name).\nExample:\n\n---\nstatic assert(!hasMember!(int, \"blah\"));\nstruct S1 { int blah; }\nstruct S2 { int blah(){ return 0; } }\nclass C1 { int blah; }\nclass C2 { int blah(){ return 0; } }\nstatic assert(hasMember!(S1, \"blah\"));\nstatic assert(hasMember!(S2, \"blah\"));\nstatic assert(hasMember!(C1, \"blah\"));\nstatic assert(hasMember!(C2, \"blah\"));\n\n---\n",
				"name": "hasMember"
			},
			{
				"kind": "template",
				"line": 3380,
				"constraint": "is(E == enum)",
				"members": [
					{
						"kind": "alias",
						"line": 3419,
						"char": 5,
						"type": "EnumSpecificMembers!(__traits(allMembers, E))",
						"name": "EnumMembers"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "E"
					}
				],
				"comment": "Retrieves the members of an enumerated type $(D enum E).\n\nParams:\n E = An enumerated type. $(D E) may have duplicated values.\n\nReturns:\n Static tuple composed of the members of the enumerated type $(D E).\n The members are arranged in the same order as declared in $(D E).\n\nNote:\n An enum can have multiple members which have the same value. If you want\n to use EnumMembers to e.g. generate switch cases at compile-time,\n you should use the $(XREF typetuple, NoDuplicates) template to avoid\n generating duplicate switch cases.\n\nNote:\n Returned values are strictly typed with $(D E). Thus, the following code\n does not work without the explicit cast:\n--------------------\nenum E : int { a, b, c }\nint[] abc = cast(int[]) [ EnumMembers!E ];\n--------------------\n Cast is not necessary if the type of the variable is inferred. See the\n example below.\n\nExamples:\n Creating an array of enumerated values:\n--------------------\nenum Sqrts : real\n{\n    one   = 1,\n    two   = 1.41421,\n    three = 1.73205,\n}\nauto sqrts = [ EnumMembers!Sqrts ];\nassert(sqrts == [ Sqrts.one, Sqrts.two, Sqrts.three ]);\n--------------------\n\n A generic function $(D rank(v)) in the following example uses this\n template for finding a member $(D e) in an enumerated type $(D E).\n--------------------\n// Returns i if e is the i-th enumerator of E.\nsize_t rank(E)(E e)\n    if (is(E == enum))\n{\n    foreach (i, member; EnumMembers!E)\n    {\n        if (e == member)\n            return i;\n    }\n    assert(0, \"Not an enum member\");\n}\n\nenum Mode\n{\n    read  = 1,\n    write = 2,\n    map   = 4,\n}\nassert(rank(Mode.read ) == 0);\nassert(rank(Mode.write) == 1);\nassert(rank(Mode.map  ) == 2);\n--------------------\n",
				"name": "EnumMembers"
			},
			{
				"kind": "template",
				"line": 3472,
				"members": [],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "A"
					}
				],
				"comment": " Get a $(D_PARAM TypeTuple) of the base class and base interfaces of\n this class or interface. $(D_PARAM BaseTypeTuple!Object) returns\n the empty type tuple.\nExample:\n\n---\ninterface I1 { }\ninterface I2 { }\ninterface I12 : I1, I2 { }\nstatic assert(is(BaseTypeTuple!I12 == TypeTuple!(I1, I2)));\n\ninterface I3 : I1 { }\ninterface I123 : I1, I2, I3 { }\nstatic assert(is(BaseTypeTuple!I123 == TypeTuple!(I1, I2, I3)));\n\n---\n",
				"name": "BaseTypeTuple"
			},
			{
				"kind": "template",
				"line": 3514,
				"constraint": "is(T == class)",
				"members": [],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": " Get a $(D_PARAM TypeTuple) of $(I all) base classes of this class,\n in decreasing order. Interfaces are not included. $(D_PARAM\n BaseClassesTuple!Object) yields the empty type tuple.\nExample:\n\n---\nclass C1 { }\nclass C2 : C1 { }\nclass C3 : C2 { }\nstatic assert(!BaseClassesTuple!Object.length);\nstatic assert(is(BaseClassesTuple!C1 == TypeTuple!(Object)));\nstatic assert(is(BaseClassesTuple!C2 == TypeTuple!(C1, Object)));\nstatic assert(is(BaseClassesTuple!C3 == TypeTuple!(C2, C1, Object)));\nstatic assert(!BaseClassesTuple!Object.length);\n\n---\n",
				"name": "BaseClassesTuple"
			},
			{
				"kind": "template",
				"line": 3563,
				"members": [],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": " Get a $(D_PARAM TypeTuple) of $(I all) interfaces directly or\n indirectly inherited by this class or interface. Interfaces do not\n repeat if multiply implemented. $(D_PARAM InterfacesTuple!Object)\n yields the empty type tuple.\n",
				"name": "InterfacesTuple"
			},
			{
				"kind": "template",
				"line": 3623,
				"members": [],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": " Get a $(D_PARAM TypeTuple) of $(I all) base classes of $(D_PARAM\n T), in decreasing order, followed by $(D_PARAM T)'s\n interfaces. $(D_PARAM TransitiveBaseTypeTuple!Object) yields the\n empty type tuple.\nExample:\n\n---\ninterface J1 {}\ninterface J2 {}\nclass B1 {}\nclass B2 : B1, J1, J2 {}\nclass B3 : B2, J1 {}\nalias TL = TransitiveBaseTypeTuple!B3;\nassert(TL.length == 5);\nassert(is (TL[0] == B2));\nassert(is (TL[1] == B1));\nassert(is (TL[2] == Object));\nassert(is (TL[3] == J1));\nassert(is (TL[4] == J2));\n\nassert(TransitiveBaseTypeTuple!Object.length == 0);\n\n---\n",
				"name": "TransitiveBaseTypeTuple"
			},
			{
				"kind": "template",
				"line": 3657,
				"constraint": "is(C == class) || is(C == interface)",
				"members": [],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "C"
					},
					{
						"kind": "value",
						"deco": "Aya",
						"name": "name"
					}
				],
				"comment": "Returns a tuple of non-static functions with the name $(D name) declared in the\nclass or interface $(D C).  Covariant duplicates are shrunk into the most\nderived one.\nExample:\n\n---\ninterface I { I foo(); }\nclass B\n{\n    real foo(real v) { return v; }\n}\nclass C : B, I\n{\n    override C foo() { return this; } // covariant overriding of I.foo()\n}\nalias MemberFunctionsTuple!(C, \"foo\") foos;\nstatic assert(foos.length == 2);\nstatic assert(__traits(isSame, foos[0], C.foo));\nstatic assert(__traits(isSame, foos[1], B.foo));\n\n---\n",
				"name": "MemberFunctionsTuple"
			},
			{
				"kind": "template",
				"line": 3809,
				"members": [
					{
						"kind": "alias",
						"line": 3811,
						"char": 5,
						"type": "Base",
						"name": "TemplateOf"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "alias",
						"specAlias": "Base!Args",
						"name": "T"
					},
					{
						"kind": "alias",
						"name": "Base"
					},
					{
						"kind": "tuple",
						"name": "Args"
					}
				],
				"comment": "Returns an alias to the template that $(D T) is an instance of.\nExample:\n\n---\nstruct Foo(T, U) {}\nstatic assert(__traits(isSame, TemplateOf!(Foo!(int, real)), Foo));\n\n---\n",
				"name": "TemplateOf"
			},
			{
				"kind": "template",
				"line": 3853,
				"members": [
					{
						"kind": "alias",
						"line": 3855,
						"char": 5,
						"type": "Args",
						"name": "TemplateArgsOf"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "alias",
						"specAlias": "Base!Args",
						"name": "T"
					},
					{
						"kind": "alias",
						"name": "Base"
					},
					{
						"kind": "tuple",
						"name": "Args"
					}
				],
				"comment": "Returns a $(D TypeTuple) of the template arguments used to instantiate $(D T).\nExample:\n\n---\nstruct Foo(T, U) {}\nstatic assert(is(TemplateArgsOf!(Foo!(int, real)) == TypeTuple!(int, real)));\n\n---\n",
				"name": "TemplateArgsOf"
			},
			{
				"kind": "template",
				"line": 3859,
				"members": [
					{
						"kind": "alias",
						"line": 3861,
						"char": 5,
						"type": "Args",
						"name": "TemplateArgsOf"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"type": "Base!Args",
						"name": "T"
					},
					{
						"kind": "alias",
						"name": "Base"
					},
					{
						"kind": "tuple",
						"name": "Args"
					}
				],
				"comment": "ditto\n",
				"name": "TemplateArgsOf"
			},
			{
				"kind": "template",
				"line": 3914,
				"constraint": "is(T == class)",
				"members": [
					{
						"kind": "alias",
						"line": 3916,
						"char": 5,
						"type": "maxAlignment!(void*, typeof(T.tupleof))",
						"name": "classInstanceAlignment"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": "Returns class instance alignment.\nExample:\n\n---\nclass A { byte b; }\nclass B { long l; }\n\n// As class instance always has a hidden pointer\nstatic assert(classInstanceAlignment!A == (void*).alignof);\nstatic assert(classInstanceAlignment!B == long.alignof);\n\n---\n",
				"name": "classInstanceAlignment"
			},
			{
				"kind": "template",
				"line": 3941,
				"members": [],
				"char": 1,
				"parameters": [
					{
						"kind": "tuple",
						"name": "T"
					}
				],
				"comment": "Get the type that all types can be implicitly converted to. Useful\ne.g. in figuring out an array type from a bunch of initializing\nvalues. Returns $(D_PARAM void) if passed an empty list, or if the\ntypes have no common type.\nExample:\n\n---\nalias X = CommonType!(int, long, short);\nassert(is(X == long));\nalias Y = CommonType!(int, char[], short);\nassert(is(Y == void));\n\n---\n",
				"name": "CommonType"
			},
			{
				"kind": "template",
				"line": 3994,
				"members": [],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": " Returns a tuple with all possible target types of an implicit\n conversion of a value of type $(D_PARAM T).\n\n Important note:\n\n The possible targets are computed more conservatively than the D\n 2.005 compiler does, eliminating all dangerous conversions. For\n example, $(D_PARAM ImplicitConversionTargets!double) does not\n include $(D_PARAM float).\n",
				"name": "ImplicitConversionTargets"
			},
			{
				"kind": "template",
				"line": 4065,
				"members": [
					{
						"kind": "variable",
						"line": 4067,
						"init": "is(typeof(()\n{\nvoid fun(ref From v)\n{\nvoid gun(To)\n{\n}\ngun(v);\n}\n}\n))",
						"storageClass": [
							"enum"
						],
						"deco": "b",
						"char": 15,
						"name": "isImplicitlyConvertible"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "From"
					},
					{
						"kind": "type",
						"name": "To"
					}
				],
				"comment": "Is $(D From) implicitly convertible to $(D To)?\n",
				"name": "isImplicitlyConvertible"
			},
			{
				"kind": "template",
				"line": 4102,
				"members": [
					{
						"kind": "variable",
						"line": 4102,
						"init": "isRvalueAssignable!(Lhs, Rhs) && isLvalueAssignable!(Lhs, Rhs)",
						"storageClass": [
							"enum"
						],
						"char": 6,
						"name": "isAssignable"
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "Lhs"
					},
					{
						"kind": "type",
						"default": "Lhs",
						"name": "Rhs"
					}
				],
				"comment": "Returns $(D true) iff a value of type $(D Rhs) can be assigned to a variable of\ntype $(D Lhs).\n\n$(D isAssignable) returns whether both an lvalue and rvalue can be assigned.\n\nIf you omit $(D Rhs), $(D isAssignable) will check identity assignable of $(D Lhs).\nExample:\n\n---\nstatic assert( isAssignable!(long, int));\nstatic assert(!isAssignable!(int, long));\nstatic assert( isAssignable!(const(char)[], string));\nstatic assert(!isAssignable!(string, char[]));\n\n// int is assignable to int\nstatic assert( isAssignable!int);\n\n// immutable int is not assignable to immutable int\nstatic assert(!isAssignable!(immutable int));\n\n---\n",
				"name": "isAssignable"
			},
			{
				"kind": "template",
				"line": 4313,
				"constraint": "is(F == function) && is(G == function)",
				"members": [],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "F"
					},
					{
						"kind": "type",
						"name": "G"
					}
				],
				"comment": "Determines whether the function type $(D F) is covariant with $(D G), i.e.,\nfunctions of the type $(D F) can override ones of the type $(D G).\nExample:\n\n---\ninterface I { I clone(); }\ninterface J { J clone(); }\nclass C : I\n{\n    override C clone()   // covariant overriding of I.clone()\n    {\n        return new C;\n    }\n}\n\n// C.clone() can override I.clone(), indeed.\nstatic assert(isCovariantWith!(typeof(C.clone), typeof(I.clone)));\n\n// C.clone() can't override J.clone(); the return type C is not implicitly\n// convertible to J.\nstatic assert(!isCovariantWith!(typeof(C.clone), typeof(J.clone)));\n\n---\n",
				"name": "isCovariantWith"
			},
			{
				"kind": "template",
				"line": 4526,
				"members": [
					{
						"kind": "function",
						"line": 4526,
						"char": 13,
						"type": "@property T(inout __InoutWorkaroundStruct = __InoutWorkaroundStruct.init)",
						"parameters": [
							{
								"storageClass": [
									"inout"
								],
								"default": "__InoutWorkaroundStruct.init",
								"type": "__InoutWorkaroundStruct"
							}
						],
						"name": "rvalueOf"
					}
				],
				"char": 13,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": "Creates an lvalue or rvalue of type $(D T) for $(D typeof(...)) and\n$(D __traits(compiles, ...)) purposes. No actual value is returned.\n\nNote: Trying to use returned value will result in a\n\"Symbol Undefined\" error at link time.\n\nExamples:\n---\n// Note that `f` doesn't have to be implemented\n// as is isn't called.\nint f(int);\nbool f(ref int);\nstatic assert(is(typeof(f(rvalueOf!int)) == int));\nstatic assert(is(typeof(f(lvalueOf!int)) == bool));\n\nint i = rvalueOf!int; // error, no actual value is returned\n---\n",
				"name": "rvalueOf"
			},
			{
				"kind": "template",
				"line": 4529,
				"members": [
					{
						"kind": "function",
						"line": 4529,
						"char": 17,
						"type": "@property ref T(inout __InoutWorkaroundStruct = __InoutWorkaroundStruct.init)",
						"parameters": [
							{
								"storageClass": [
									"inout"
								],
								"default": "__InoutWorkaroundStruct.init",
								"type": "__InoutWorkaroundStruct"
							}
						],
						"name": "lvalueOf"
					}
				],
				"char": 17,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": "ditto\n",
				"name": "lvalueOf"
			},
			{
				"kind": "template",
				"line": 4979,
				"members": [
					{
						"kind": "variable",
						"line": 4979,
						"init": "is(BooleanTypeOf!T) && !isAggregateType!T",
						"storageClass": [
							"enum"
						],
						"deco": "b",
						"char": 11,
						"name": "isBoolean"
					}
				],
				"char": 11,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": " Detect whether $(D T) is a built-in boolean type.\nExample:\n\n---\nstatic assert( isBoolean!bool);\nenum EB : bool { a = true }\nstatic assert( isBoolean!EB);\nstatic assert(!isBoolean!(SubTypeOf!bool));\n\n---\n",
				"name": "isBoolean"
			},
			{
				"kind": "template",
				"line": 4994,
				"members": [
					{
						"kind": "variable",
						"line": 4994,
						"init": "is(IntegralTypeOf!T) && !isAggregateType!T",
						"storageClass": [
							"enum"
						],
						"deco": "b",
						"char": 11,
						"name": "isIntegral"
					}
				],
				"char": 11,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": " Detect whether $(D T) is a built-in integral type. Types $(D bool),\n $(D char), $(D wchar), and $(D dchar) are not considered integral.\n",
				"name": "isIntegral"
			},
			{
				"kind": "template",
				"line": 5018,
				"members": [
					{
						"kind": "variable",
						"line": 5018,
						"init": "is(FloatingPointTypeOf!T) && !isAggregateType!T",
						"storageClass": [
							"enum"
						],
						"deco": "b",
						"char": 11,
						"name": "isFloatingPoint"
					}
				],
				"char": 11,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": " Detect whether $(D T) is a built-in floating point type.\n",
				"name": "isFloatingPoint"
			},
			{
				"kind": "template",
				"line": 5045,
				"members": [
					{
						"kind": "variable",
						"line": 5045,
						"init": "is(NumericTypeOf!T) && !isAggregateType!T",
						"storageClass": [
							"enum"
						],
						"deco": "b",
						"char": 11,
						"name": "isNumeric"
					}
				],
				"char": 11,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": "Detect whether $(D T) is a built-in numeric type (integral or floating\npoint).\n",
				"name": "isNumeric"
			},
			{
				"kind": "template",
				"line": 5062,
				"members": [
					{
						"kind": "variable",
						"line": 5062,
						"init": "isNumeric!T || isSomeChar!T || isBoolean!T",
						"storageClass": [
							"enum"
						],
						"deco": "b",
						"char": 11,
						"name": "isScalarType"
					}
				],
				"char": 11,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": "Detect whether $(D T) is a scalar type (a built-in numeric, character or boolean type).\nExample:\n\n---\nstatic assert(!isScalarType!void);\nstatic assert( isScalarType!(immutable(int)));\nstatic assert( isScalarType!(shared(float)));\nstatic assert( isScalarType!(shared(const bool)));\nstatic assert( isScalarType!(const(dchar)));\n\n---\n",
				"name": "isScalarType"
			},
			{
				"kind": "template",
				"line": 5077,
				"members": [
					{
						"kind": "variable",
						"line": 5077,
						"init": "isScalarType!T || is(T == void)",
						"storageClass": [
							"enum"
						],
						"deco": "b",
						"char": 11,
						"name": "isBasicType"
					}
				],
				"char": 11,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": "Detect whether $(D T) is a basic type (scalar type or void).\nExample:\n\n---\nstatic assert(isBasicType!void);\nstatic assert(isBasicType!(immutable(int)));\nstatic assert(isBasicType!(shared(float)));\nstatic assert(isBasicType!(shared(const bool)));\nstatic assert(isBasicType!(const(dchar)));\n\n---\n",
				"name": "isBasicType"
			},
			{
				"kind": "template",
				"line": 5092,
				"members": [
					{
						"kind": "variable",
						"line": 5092,
						"init": "is(UnsignedTypeOf!T) && !isAggregateType!T",
						"storageClass": [
							"enum"
						],
						"deco": "b",
						"char": 11,
						"name": "isUnsigned"
					}
				],
				"char": 11,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": "Detect whether $(D T) is a built-in unsigned numeric type.\n",
				"name": "isUnsigned"
			},
			{
				"kind": "template",
				"line": 5109,
				"members": [
					{
						"kind": "variable",
						"line": 5109,
						"init": "is(SignedTypeOf!T) && !isAggregateType!T",
						"storageClass": [
							"enum"
						],
						"deco": "b",
						"char": 11,
						"name": "isSigned"
					}
				],
				"char": 11,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": "Detect whether $(D T) is a built-in signed numeric type.\n",
				"name": "isSigned"
			},
			{
				"kind": "template",
				"line": 5126,
				"members": [
					{
						"kind": "variable",
						"line": 5126,
						"init": "is(CharTypeOf!T) && !isAggregateType!T",
						"storageClass": [
							"enum"
						],
						"deco": "b",
						"char": 11,
						"name": "isSomeChar"
					}
				],
				"char": 11,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": "Detect whether $(D T) is one of the built-in character types.\nExample:\n\n---\nstatic assert(!isSomeChar!int);\nstatic assert(!isSomeChar!byte);\nstatic assert(!isSomeChar!string);\nstatic assert(!isSomeChar!wstring);\nstatic assert(!isSomeChar!dstring);\nstatic assert(!isSomeChar!(char[4]));\n\n---\n",
				"name": "isSomeChar"
			},
			{
				"kind": "template",
				"line": 5162,
				"members": [
					{
						"kind": "variable",
						"line": 5162,
						"init": "is(StringTypeOf!T) && !isAggregateType!T && !isStaticArray!T",
						"storageClass": [
							"enum"
						],
						"deco": "b",
						"char": 11,
						"name": "isSomeString"
					}
				],
				"char": 11,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": "Detect whether $(D T) is one of the built-in string types.\n\nThe built-in string types are $(D Char[]), where $(D Char) is any of $(D char),\n$(D wchar) or $(D dchar), with or without qualifiers.\n\nStatic arrays of characters (like $(D char[80])) are not considered\nbuilt-in string types.\nExample:\n\n---\nstatic assert(!isSomeString!int);\nstatic assert(!isSomeString!(int[]));\nstatic assert(!isSomeString!(byte[]));\nstatic assert(!isSomeString!(typeof(null)));\nstatic assert(!isSomeString!(char[4]));\n\nenum ES : string { a = \"aaa\", b = \"bbb\" }\nstatic assert( isSomeString!ES);\n\n---\n",
				"name": "isSomeString"
			},
			{
				"kind": "template",
				"line": 5212,
				"members": [
					{
						"kind": "variable",
						"line": 5212,
						"init": "is(StaticArrayTypeOf!T) && !isAggregateType!T",
						"storageClass": [
							"enum"
						],
						"deco": "b",
						"char": 11,
						"name": "isStaticArray"
					}
				],
				"char": 11,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": " Detect whether type $(D T) is a static array.\nExample:\n\n---\nstatic assert(!isStaticArray!(const(int)[]));\nstatic assert(!isStaticArray!(immutable(int)[]));\nstatic assert(!isStaticArray!(const(int)[4][]));\nstatic assert(!isStaticArray!(int[]));\nstatic assert(!isStaticArray!(int[char]));\nstatic assert(!isStaticArray!(int[1][]));\nstatic assert(!isStaticArray!(int[int]));\nstatic assert(!isStaticArray!int);\n\n---\n",
				"name": "isStaticArray"
			},
			{
				"kind": "template",
				"line": 5247,
				"members": [
					{
						"kind": "variable",
						"line": 5247,
						"init": "is(DynamicArrayTypeOf!T) && !isAggregateType!T",
						"storageClass": [
							"enum"
						],
						"deco": "b",
						"char": 11,
						"name": "isDynamicArray"
					}
				],
				"char": 11,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": " Detect whether type $(D T) is a dynamic array.\n",
				"name": "isDynamicArray"
			},
			{
				"kind": "template",
				"line": 5271,
				"members": [
					{
						"kind": "variable",
						"line": 5271,
						"init": "isStaticArray!T || isDynamicArray!T",
						"storageClass": [
							"enum"
						],
						"deco": "b",
						"char": 11,
						"name": "isArray"
					}
				],
				"char": 11,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": " Detect whether type $(D T) is an array (static or dynamic; for associative\n  arrays see $(LREF isAssociativeArray)).\n",
				"name": "isArray"
			},
			{
				"kind": "template",
				"line": 5292,
				"members": [
					{
						"kind": "variable",
						"line": 5292,
						"init": "is(AssocArrayTypeOf!T) && !isAggregateType!T",
						"storageClass": [
							"enum"
						],
						"deco": "b",
						"char": 11,
						"name": "isAssociativeArray"
					}
				],
				"char": 11,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": " Detect whether $(D T) is an associative array type\n",
				"name": "isAssociativeArray"
			},
			{
				"kind": "template",
				"line": 5323,
				"members": [
					{
						"kind": "variable",
						"line": 5323,
						"init": "is(BuiltinTypeOf!T) && !isAggregateType!T",
						"storageClass": [
							"enum"
						],
						"deco": "b",
						"char": 11,
						"name": "isBuiltinType"
					}
				],
				"char": 11,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": " Detect whether type $(D T) is a builtin type.\n",
				"name": "isBuiltinType"
			},
			{
				"kind": "template",
				"line": 5328,
				"members": [
					{
						"kind": "variable",
						"line": 5328,
						"init": "is(T : __vector(V[N]), V, size_t N)",
						"storageClass": [
							"enum"
						],
						"deco": "b",
						"char": 11,
						"name": "isSIMDVector"
					}
				],
				"char": 11,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": " Detect whether type $(D T) is a SIMD vector type.\n",
				"name": "isSIMDVector"
			},
			{
				"kind": "template",
				"line": 5345,
				"members": [
					{
						"kind": "variable",
						"line": 5345,
						"init": "is(T == U*, U) && !isAggregateType!T",
						"storageClass": [
							"enum"
						],
						"deco": "b",
						"char": 11,
						"name": "isPointer"
					}
				],
				"char": 11,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": " Detect whether type $(D T) is a pointer.\n",
				"name": "isPointer"
			},
			{
				"kind": "template",
				"line": 5367,
				"members": [
					{
						"kind": "alias",
						"line": 5367,
						"char": 1,
						"type": "T",
						"name": "PointerTarget"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"type": "T*",
						"name": "T"
					}
				],
				"comment": "Returns the target type of a pointer.\n",
				"name": "PointerTarget"
			},
			{
				"kind": "alias",
				"line": 5374,
				"storageClass": [
					"deprecated"
				],
				"char": 1,
				"name": "pointerTarget",
				"comment": "  $(RED Deprecated. Please use $(LREF PointerTarget) instead. This will be\n        removed in June 2015.)\n"
			},
			{
				"kind": "template",
				"line": 5387,
				"members": [
					{
						"kind": "variable",
						"line": 5387,
						"init": "is(T == struct) || is(T == union) || is(T == class) || is(T == interface)",
						"storageClass": [
							"enum"
						],
						"deco": "b",
						"char": 11,
						"name": "isAggregateType"
					}
				],
				"char": 11,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": " Detect whether type $(D T) is an aggregate type.\n",
				"name": "isAggregateType"
			},
			{
				"kind": "template",
				"line": 5397,
				"members": [
					{
						"kind": "variable",
						"line": 5397,
						"init": "is(typeof(()\n{\nforeach (elem; T.init)\n{\n}\n}\n))",
						"storageClass": [
							"enum"
						],
						"deco": "b",
						"char": 11,
						"name": "isIterable"
					}
				],
				"char": 11,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": " Returns $(D true) if T can be iterated over using a $(D foreach) loop with\n a single loop variable of automatically inferred type, regardless of how\n the $(D foreach) loop is implemented.  This includes ranges, structs/classes\n that define $(D opApply) with a single loop variable, and builtin dynamic,\n static and associative arrays.\nExample:\n\n---\nstruct OpApply\n{\n    int opApply(int delegate(ref uint) dg) { assert(0); }\n}\n\nstruct Range\n{\n    @property uint front() { assert(0); }\n    void popFront() { assert(0); }\n    enum bool empty = false;\n}\n\nstatic assert( isIterable!(uint[]));\nstatic assert( isIterable!OpApply);\nstatic assert( isIterable!(uint[string]));\nstatic assert( isIterable!Range);\n\nstatic assert(!isIterable!uint);\n\n---\n",
				"name": "isIterable"
			},
			{
				"kind": "template",
				"line": 5426,
				"members": [
					{
						"kind": "variable",
						"line": 5426,
						"init": "!is(T == const) && !is(T == immutable) && !is(T == inout)",
						"storageClass": [
							"enum"
						],
						"deco": "b",
						"char": 11,
						"name": "isMutable"
					}
				],
				"char": 11,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": " Returns true if T is not const or immutable.  Note that isMutable is true for\n string, or immutable(char)[], because the 'head' is mutable.\nExample:\n\n---\nstatic assert( isMutable!int);\nstatic assert( isMutable!string);\nstatic assert( isMutable!(shared int));\nstatic assert( isMutable!(shared const(int)[]));\n\nstatic assert(!isMutable!(const int));\nstatic assert(!isMutable!(inout int));\nstatic assert(!isMutable!(shared(const int)));\nstatic assert(!isMutable!(shared(inout int)));\nstatic assert(!isMutable!(immutable string));\n\n---\n",
				"name": "isMutable"
			},
			{
				"kind": "template",
				"line": 5446,
				"members": [
					{
						"kind": "variable",
						"line": 5446,
						"init": "is(T == S!Args, Args...)",
						"storageClass": [
							"enum"
						],
						"deco": "b",
						"char": 11,
						"name": "isInstanceOf"
					}
				],
				"char": 11,
				"parameters": [
					{
						"kind": "alias",
						"name": "S"
					},
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": " Returns true if T is an instance of the template S.\nExample:\n\n---\nstatic struct Foo(T...) { }\nstatic struct Bar(T...) { }\nstatic struct Doo(T) { }\nstatic struct ABC(int x) { }\nstatic assert(isInstanceOf!(Foo, Foo!int));\nstatic assert(!isInstanceOf!(Foo, Bar!int));\nstatic assert(!isInstanceOf!(Foo, int));\nstatic assert(isInstanceOf!(Doo, Doo!int));\nstatic assert(isInstanceOf!(ABC, ABC!1));\nstatic assert(!__traits(compiles, isInstanceOf!(Foo, Foo)));\n\n---\n",
				"name": "isInstanceOf"
			},
			{
				"kind": "template",
				"line": 5469,
				"members": [],
				"char": 1,
				"parameters": [
					{
						"kind": "tuple",
						"name": "T"
					}
				],
				"comment": " Check whether the tuple T is an expression tuple.\n An expression tuple only contains expressions.\n\n See_Also: $(LREF isTypeTuple).\nExample:\n\n---\nstatic assert(isExpressionTuple!(1, 2.0, \"a\"));\nstatic assert(!isExpressionTuple!(int, double, string));\nstatic assert(!isExpressionTuple!(int, 2.0, \"a\"));\n\n---\n",
				"name": "isExpressionTuple"
			},
			{
				"kind": "template",
				"line": 5516,
				"members": [],
				"char": 1,
				"parameters": [
					{
						"kind": "tuple",
						"name": "T"
					}
				],
				"comment": " Check whether the tuple $(D T) is a type tuple.\n A type tuple only contains types.\n\n See_Also: $(LREF isExpressionTuple).\nExample:\n\n---\nstatic assert(isTypeTuple!(int, float, string));\nstatic assert(!isTypeTuple!(1, 2.0, \"a\"));\nstatic assert(!isTypeTuple!(1, double, string));\n\n---\n",
				"name": "isTypeTuple"
			},
			{
				"kind": "template",
				"line": 5556,
				"constraint": "T.length == 1",
				"members": [],
				"char": 1,
				"parameters": [
					{
						"kind": "tuple",
						"name": "T"
					}
				],
				"comment": "Detect whether symbol or type $(D T) is a function pointer.\nExample:\n\n---\nstatic void foo() {}\nvoid bar() {}\n\nauto fpfoo = &foo;\nstatic assert( isFunctionPointer!fpfoo);\nstatic assert( isFunctionPointer!(void function()));\n\nauto dgbar = &bar;\nstatic assert(!isFunctionPointer!dgbar);\nstatic assert(!isFunctionPointer!(void delegate()));\nstatic assert(!isFunctionPointer!foo);\nstatic assert(!isFunctionPointer!bar);\n\nstatic assert( isFunctionPointer!((int a) {}));\n\n---\n",
				"name": "isFunctionPointer"
			},
			{
				"kind": "template",
				"line": 5592,
				"constraint": "T.length == 1",
				"members": [],
				"char": 1,
				"parameters": [
					{
						"kind": "tuple",
						"name": "T"
					}
				],
				"comment": "Detect whether symbol or type $(D T) is a delegate.\nExample:\n\n---\nstatic void sfunc() { }\nint x;\nvoid func() { x++; }\n\nint delegate() dg;\nassert(isDelegate!dg);\nassert(isDelegate!(int delegate()));\nassert(isDelegate!(typeof(&func)));\n\nint function() fp;\nassert(!isDelegate!fp);\nassert(!isDelegate!(int function()));\nassert(!isDelegate!(typeof(&sfunc)));\n\n---\n",
				"name": "isDelegate"
			},
			{
				"kind": "template",
				"line": 5630,
				"constraint": "T.length == 1",
				"members": [],
				"char": 1,
				"parameters": [
					{
						"kind": "tuple",
						"name": "T"
					}
				],
				"comment": "Detect whether symbol or type $(D T) is a function, a function pointer or a delegate.\n",
				"name": "isSomeFunction"
			},
			{
				"kind": "template",
				"line": 5691,
				"constraint": "T.length == 1",
				"members": [],
				"char": 1,
				"parameters": [
					{
						"kind": "tuple",
						"name": "T"
					}
				],
				"comment": "Detect whether $(D T) is a callable object, which can be called with the\nfunction call operator $(D $(LPAREN)...$(RPAREN)).\nExample:\n\n---\ninterface I { real value() @property; }\nstruct S { static int opCall(int) { return 0; } }\nclass C { int opCall(int) { return 0; } }\nauto c = new C;\n\nstatic assert( isCallable!c);\nstatic assert( isCallable!S);\nstatic assert( isCallable!(c.opCall));\nstatic assert( isCallable!(I.value));\nstatic assert( isCallable!((int a) { return a; }));\n\nstatic assert(!isCallable!I);\n\n---\n",
				"name": "isCallable"
			},
			{
				"kind": "template",
				"line": 5725,
				"constraint": "T.length == 1",
				"members": [
					{
						"kind": "variable",
						"line": 5728,
						"init": "__traits(isAbstractFunction, T[0])",
						"storageClass": [
							"enum"
						],
						"deco": "b",
						"char": 15,
						"name": "isAbstractFunction"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "tuple",
						"name": "T"
					}
				],
				"comment": " Detect whether $(D T) is a an abstract function.\n",
				"name": "isAbstractFunction"
			},
			{
				"kind": "template",
				"line": 5744,
				"constraint": "T.length == 1",
				"members": [
					{
						"kind": "variable",
						"line": 5747,
						"init": "__traits(isFinalFunction, T[0])",
						"storageClass": [
							"enum"
						],
						"deco": "b",
						"char": 15,
						"name": "isFinalFunction"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "tuple",
						"name": "T"
					}
				],
				"comment": " Detect whether $(D T) is a a final function.\nExample:\n\n---\nstruct S { void bar() { } }\nfinal class FC { void foo(); }\nclass C\n{\n    void bar() { }\n    final void foo();\n}\nstatic assert(!isFinalFunction!(S.bar));\nstatic assert( isFinalFunction!(FC.foo));\nstatic assert(!isFinalFunction!(C.bar));\nstatic assert( isFinalFunction!(C.foo));\n\n---\n",
				"name": "isFinalFunction"
			},
			{
				"kind": "template",
				"line": 5769,
				"members": [
					{
						"kind": "variable",
						"line": 5771,
						"init": "__traits(isNested, f)",
						"storageClass": [
							"enum"
						],
						"char": 10,
						"name": "isNestedFunction"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "alias",
						"name": "f"
					}
				],
				"comment": "Determines whether function $(D f) requires a context pointer.\n",
				"name": "isNestedFunction"
			},
			{
				"kind": "template",
				"line": 5785,
				"constraint": "T.length == 1",
				"members": [
					{
						"kind": "variable",
						"line": 5788,
						"init": "__traits(isAbstractClass, T[0])",
						"storageClass": [
							"enum"
						],
						"deco": "b",
						"char": 15,
						"name": "isAbstractClass"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "tuple",
						"name": "T"
					}
				],
				"comment": " Detect whether $(D T) is a an abstract class.\nExample:\n\n---\nstruct S { }\nclass C { }\nabstract class AC { }\nstatic assert(!isAbstractClass!S);\nstatic assert(!isAbstractClass!C);\nstatic assert( isAbstractClass!AC);\n\n---\n",
				"name": "isAbstractClass"
			},
			{
				"kind": "template",
				"line": 5805,
				"constraint": "T.length == 1",
				"members": [
					{
						"kind": "variable",
						"line": 5808,
						"init": "__traits(isFinalClass, T[0])",
						"storageClass": [
							"enum"
						],
						"deco": "b",
						"char": 15,
						"name": "isFinalClass"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "tuple",
						"name": "T"
					}
				],
				"comment": " Detect whether $(D T) is a a final class.\nExample:\n\n---\nclass C { }\nabstract class AC { }\nfinal class FC1 : C { }\nfinal class FC2 { }\nstatic assert(!isFinalClass!C);\nstatic assert(!isFinalClass!AC);\nstatic assert( isFinalClass!FC1);\nstatic assert( isFinalClass!FC2);\n\n---\n",
				"name": "isFinalClass"
			},
			{
				"kind": "template",
				"line": 5831,
				"members": [],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": "Removes all qualifiers, if any, from type $(D T).\nExample:\n\n---\nstatic assert(is(Unqual!int == int));\nstatic assert(is(Unqual!(const int) == int));\nstatic assert(is(Unqual!(immutable int) == int));\nstatic assert(is(Unqual!(shared int) == int));\nstatic assert(is(Unqual!(shared(const int)) == int));\n\n---\n",
				"name": "Unqual"
			},
			{
				"kind": "template",
				"line": 5916,
				"members": [
					{
						"kind": "alias",
						"line": 5918,
						"char": 5,
						"type": "ReturnType!(typeof((inout int x = 0)\n{\nforeach (elem; T.init)\n{\nreturn elem;\n}\nassert(0);\n}\n))",
						"name": "ForeachType"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": "Returns the inferred type of the loop variable when a variable of type T\nis iterated over using a $(D foreach) loop with a single loop variable and\nautomatically inferred return type.  Note that this may not be the same as\n$(D std.range.ElementType!Range) in the case of narrow strings, or if T\nhas both opApply and a range interface.\nExample:\n\n---\nstatic assert(is(ForeachType!(uint[]) == uint));\nstatic assert(is(ForeachType!string == immutable(char)));\nstatic assert(is(ForeachType!(string[string]) == string));\nstatic assert(is(ForeachType!(inout(int)[]) == inout(int)));\n\n---\n",
				"name": "ForeachType"
			},
			{
				"kind": "template",
				"line": 5942,
				"members": [
					{
						"kind": "alias",
						"line": 5950,
						"char": 5,
						"type": "ModifyTypePreservingSTC!(Impl, T)",
						"name": "OriginalType"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": " Strips off all $(D enum)s from type $(D T).\nExample:\n\n---\nenum E : real { a }\nenum F : E    { a = E.a }\nalias G = const(F);\nstatic assert(is(OriginalType!E == real));\nstatic assert(is(OriginalType!F == real));\nstatic assert(is(OriginalType!G == const real));\n\n---\n",
				"name": "OriginalType"
			},
			{
				"kind": "template",
				"line": 5967,
				"members": [
					{
						"kind": "alias",
						"line": 5967,
						"char": 1,
						"type": "K",
						"name": "KeyType"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"type": "V[K]",
						"name": "V"
					},
					{
						"kind": "type",
						"name": "K"
					}
				],
				"comment": " Get the Key type of an Associative Array.\nExample:\n\n---\nimport std.traits;\nalias Hash = int[string];\nstatic assert(is(KeyType!Hash == string));\nstatic assert(is(ValueType!Hash == int));\nKeyType!Hash str = \"a\"; // str is declared as string\nValueType!Hash num = 1; // num is declared as int\n\n---\n",
				"name": "KeyType"
			},
			{
				"kind": "template",
				"line": 5983,
				"members": [
					{
						"kind": "alias",
						"line": 5983,
						"char": 1,
						"type": "V",
						"name": "ValueType"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"type": "V[K]",
						"name": "V"
					},
					{
						"kind": "type",
						"name": "K"
					}
				],
				"comment": " Get the Value type of an Associative Array.\nExample:\n\n---\nimport std.traits;\nalias Hash = int[string];\nstatic assert(is(KeyType!Hash == string));\nstatic assert(is(ValueType!Hash == int));\nKeyType!Hash str = \"a\"; // str is declared as string\nValueType!Hash num = 1; // num is declared as int\n\n---\n",
				"name": "ValueType"
			},
			{
				"kind": "template",
				"line": 6000,
				"members": [
					{
						"kind": "alias",
						"line": 6021,
						"char": 5,
						"type": "ModifyTypePreservingSTC!(Impl, OriginalType!T)",
						"name": "Unsigned"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": " Returns the corresponding unsigned type for T. T must be a numeric\n integral type, otherwise a compile-time error occurs.\n",
				"name": "Unsigned"
			},
			{
				"kind": "template",
				"line": 6058,
				"constraint": "T.length >= 1",
				"members": [],
				"char": 1,
				"parameters": [
					{
						"kind": "tuple",
						"name": "T"
					}
				],
				"comment": "Returns the largest type, i.e. T such that T.sizeof is the largest.  If more\nthan one type is of the same size, the leftmost argument of these in will be\nreturned.\nExample:\n\n---\nstatic assert(is(Largest!(uint, ubyte, ushort, real) == real));\nstatic assert(is(Largest!(ulong, double) == ulong));\nstatic assert(is(Largest!(double, ulong) == double));\nstatic assert(is(Largest!(uint, byte, double, short) == double));\nstatic if (is(ucent))\n    static assert(is(Largest!(uint, ubyte, ucent, ushort) == ucent));\n\n---\n",
				"name": "Largest"
			},
			{
				"kind": "template",
				"line": 6096,
				"members": [
					{
						"kind": "alias",
						"line": 6117,
						"char": 5,
						"type": "ModifyTypePreservingSTC!(Impl, OriginalType!T)",
						"name": "Signed"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": "Returns the corresponding signed type for T. T must be a numeric integral type,\notherwise a compile-time error occurs.\nExample:\n\n---\nalias S1 = Signed!uint;\nstatic assert(is(S1 == int));\nalias S2 = Signed!(const(uint));\nstatic assert(is(S2 == const(int)));\nalias S3 = Signed!(immutable(uint));\nstatic assert(is(S3 == immutable(int)));\nstatic if (is(ucent))\n{\n    alias S4 = Signed!ucent;\n    static assert(is(S4 == cent));\n}\n\n---\n",
				"name": "Signed"
			},
			{
				"kind": "template",
				"line": 6152,
				"constraint": "isNumeric!T || isSomeChar!T || isBoolean!T",
				"members": [],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": "Returns the most negative value of the numeric type T.\nExample:\n\n---\nstatic assert(mostNegative!float == -float.max);\nstatic assert(mostNegative!double == -double.max);\nstatic assert(mostNegative!real == -real.max);\nstatic assert(mostNegative!bool == false);\n\n---\nExample:\n\n---\nforeach(T; TypeTuple!(bool, byte, short, int, long))\n    static assert(mostNegative!T == T.min);\n\nforeach(T; TypeTuple!(ubyte, ushort, uint, ulong, char, wchar, dchar))\n    static assert(mostNegative!T == 0);\n}\n\n\n//:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::://\n// Misc.\n//:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::://\n\n/**\nReturns the mangled name of symbol or type $(D sth).\n\n$(D mangledName) is the same as builtin $(D .mangleof) property, except that\nthe correct names of property functions are obtained.\n--------------------\nmodule test;\nimport std.traits : mangledName;\n\nclass C\n{\nint value() @property;\n\n---\n",
				"name": "mostNegative"
			},
			{
				"kind": "template",
				"line": 6204,
				"constraint": "sth.length == 1",
				"members": [],
				"char": 1,
				"parameters": [
					{
						"kind": "tuple",
						"name": "sth"
					}
				],
				"comment": "Returns the mangled name of symbol or type $(D sth).\n\n$(D mangledName) is the same as builtin $(D .mangleof) property, except that\nthe correct names of property functions are obtained.\n--------------------\nmodule test;\nimport std.traits : mangledName;\n\nclass C\n{\n    int value() @property;\n}\npragma(msg, C.value.mangleof);      // prints \"i\"\npragma(msg, mangledName!(C.value)); // prints \"_D4test1C5valueMFNdZi\"\n--------------------\n",
				"name": "mangledName"
			},
			{
				"kind": "template",
				"line": 6304,
				"constraint": "T.length == 2",
				"members": [
					{
						"kind": "alias",
						"line": 6306,
						"char": 5,
						"type": "T[!condition]",
						"name": "Select"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "value",
						"deco": "b",
						"name": "condition"
					},
					{
						"kind": "tuple",
						"name": "T"
					}
				],
				"comment": "Aliases itself to $(D T[0]) if the boolean $(D condition) is $(D true)\nand to $(D T[1]) otherwise.\nExample:\n\n---\n// can select types\nstatic assert(is(Select!(true, int, long) == int));\nstatic assert(is(Select!(false, int, long) == long));\n\n// can select symbols\nint a = 1;\nint b = 2;\nalias selA = Select!(true, a, b);\nalias selB = Select!(false, a, b);\nassert(selA == 1);\nassert(selB == 2);\n}\n\n/**\nIf $(D cond) is $(D true), returns $(D a) without evaluating $(D\nb). Otherwise, returns $(D b) without evaluating $(D a).\n*/\nA select(bool cond : true, A, B)(A a, lazy B b) { return a; \n\n---\n",
				"name": "Select"
			},
			{
				"kind": "template",
				"line": 6329,
				"members": [
					{
						"kind": "function",
						"line": 6329,
						"endchar": 61,
						"char": 3,
						"type": "A(A a, lazy B b)",
						"parameters": [
							{
								"type": "A",
								"name": "a"
							},
							{
								"storageClass": [
									"lazy"
								],
								"type": "B",
								"name": "b"
							}
						],
						"name": "select",
						"endline": 6329
					}
				],
				"char": 3,
				"parameters": [
					{
						"kind": "value",
						"deco": "b",
						"specValue": "true",
						"name": "cond"
					},
					{
						"kind": "type",
						"name": "A"
					},
					{
						"kind": "type",
						"name": "B"
					}
				],
				"comment": "If $(D cond) is $(D true), returns $(D a) without evaluating $(D\nb). Otherwise, returns $(D b) without evaluating $(D a).\n",
				"name": "select"
			},
			{
				"kind": "template",
				"line": 6331,
				"members": [
					{
						"kind": "function",
						"line": 6331,
						"endchar": 62,
						"char": 3,
						"type": "B(lazy A a, B b)",
						"parameters": [
							{
								"storageClass": [
									"lazy"
								],
								"type": "A",
								"name": "a"
							},
							{
								"type": "B",
								"name": "b"
							}
						],
						"name": "select",
						"endline": 6331
					}
				],
				"char": 3,
				"parameters": [
					{
						"kind": "value",
						"deco": "b",
						"specValue": "false",
						"name": "cond"
					},
					{
						"kind": "type",
						"name": "A"
					},
					{
						"kind": "type",
						"name": "B"
					}
				],
				"comment": "Ditto\n",
				"name": "select"
			}
		],
		"name": "std.traits",
		"comment": " Templates which extract information about types and symbols at compile time.\n\n $(SCRIPT inhibitQuickIndex = 1;)\n\n $(DIVC quickindex,\n $(BOOKTABLE ,\n $(TR $(TH Category) $(TH Templates))\n $(TR $(TD Symbol Name _traits) $(TD\n           $(LREF fullyQualifiedName)\n           $(LREF moduleName)\n           $(LREF packageName)\n ))\n $(TR $(TD Function _traits) $(TD\n           $(LREF arity)\n           $(LREF functionAttributes)\n           $(LREF functionLinkage)\n           $(LREF FunctionTypeOf)\n           $(LREF isSafe)\n           $(LREF isUnsafe)\n           $(LREF ParameterDefaultValueTuple)\n           $(LREF ParameterIdentifierTuple)\n           $(LREF ParameterStorageClassTuple)\n           $(LREF ParameterTypeTuple)\n           $(LREF ReturnType)\n           $(LREF SetFunctionAttributes)\n           $(LREF variadicFunctionStyle)\n ))\n $(TR $(TD Aggregate Type _traits) $(TD\n           $(LREF BaseClassesTuple)\n           $(LREF BaseTypeTuple)\n           $(LREF classInstanceAlignment)\n           $(LREF EnumMembers)\n           $(LREF FieldNameTuple)\n           $(LREF FieldTypeTuple)\n           $(LREF hasAliasing)\n           $(LREF hasElaborateAssign)\n           $(LREF hasElaborateCopyConstructor)\n           $(LREF hasElaborateDestructor)\n           $(LREF hasIndirections)\n           $(LREF hasMember)\n           $(LREF hasNested)\n           $(LREF hasUnsharedAliasing)\n           $(LREF InterfacesTuple)\n           $(LREF isNested)\n           $(LREF MemberFunctionsTuple)\n           $(LREF RepresentationTypeTuple)\n           $(LREF TemplateArgsOf)\n           $(LREF TemplateOf)\n           $(LREF TransitiveBaseTypeTuple)\n ))\n $(TR $(TD Type Conversion) $(TD\n           $(LREF CommonType)\n           $(LREF ImplicitConversionTargets)\n           $(LREF isAssignable)\n           $(LREF isCovariantWith)\n           $(LREF isImplicitlyConvertible)\n ))\n <!--$(TR $(TD SomethingTypeOf) $(TD\n           $(LREF BooleanTypeOf)\n           $(LREF IntegralTypeOf)\n           $(LREF FloatingPointTypeOf)\n           $(LREF NumericTypeOf)\n           $(LREF UnsignedTypeOf)\n           $(LREF SignedTypeOf)\n           $(LREF CharTypeOf)\n           $(LREF StaticArrayTypeOf)\n           $(LREF DynamicArrayTypeOf)\n           $(LREF ArrayTypeOf)\n           $(LREF StringTypeOf)\n           $(LREF AssocArrayTypeOf)\n           $(LREF BuiltinTypeOf)\n ))-->\n $(TR $(TD Categories of types) $(TD\n           $(LREF isAggregateType)\n           $(LREF isArray)\n           $(LREF isAssociativeArray)\n           $(LREF isBasicType)\n           $(LREF isBoolean)\n           $(LREF isBuiltinType)\n           $(LREF isDynamicArray)\n           $(LREF isFloatingPoint)\n           $(LREF isIntegral)\n           $(LREF isNarrowString)\n           $(LREF isNumeric)\n           $(LREF isPointer)\n           $(LREF isScalarType)\n           $(LREF isSigned)\n           $(LREF isSomeChar)\n           $(LREF isSomeString)\n           $(LREF isStaticArray)\n           $(LREF isUnsigned)\n ))\n $(TR $(TD Type behaviours) $(TD\n           $(LREF isAbstractClass)\n           $(LREF isAbstractFunction)\n           $(LREF isCallable)\n           $(LREF isDelegate)\n           $(LREF isExpressionTuple)\n           $(LREF isFinalClass)\n           $(LREF isFinalFunction)\n           $(LREF isFunctionPointer)\n           $(LREF isInstanceOf)\n           $(LREF isIterable)\n           $(LREF isMutable)\n           $(LREF isSomeFunction)\n           $(LREF isTypeTuple)\n ))\n $(TR $(TD General Types) $(TD\n           $(LREF ForeachType)\n           $(LREF KeyType)\n           $(LREF Largest)\n           $(LREF mostNegative)\n           $(LREF OriginalType)\n           $(LREF PointerTarget)\n           $(LREF Signed)\n           $(LREF Unqual)\n           $(LREF Unsigned)\n           $(LREF ValueType)\n ))\n $(TR $(TD Misc) $(TD\n           $(LREF mangledName)\n           $(LREF Select)\n           $(LREF select)\n ))\n )\n )\n\n Macros:\n  WIKI = Phobos/StdTraits\n\n Copyright: Copyright Digital Mars 2005 - 2009.\n License:   $(WEB www.boost.org/LICENSE_1_0.txt, Boost License 1.0).\n Authors:   $(WEB digitalmars.com, Walter Bright),\n            Tomasz Stachowiak ($(D isExpressionTuple)),\n            $(WEB erdani.org, Andrei Alexandrescu),\n            Shin Fujishiro,\n            $(WEB octarineparrot.com, Robert Clipsham),\n            $(WEB klickverbot.at, David Nadlinger),\n            Kenji Hara,\n            Shoichi Kato\n Source:    $(PHOBOSSRC std/_traits.d)\n"
	},
	{
		"kind": "module",
		"file": "../phobos/std/path.d",
		"members": [
			{
				"kind": "variable",
				"line": 65,
				"init": "\"/\"",
				"storageClass": [
					"enum"
				],
				"deco": "Aya",
				"char": 37,
				"name": "dirSeparator",
				"comment": " String used to separate directory names in a path.  Under\n    POSIX this is a slash, under Windows a backslash.\n"
			},
			{
				"kind": "variable",
				"line": 75,
				"init": "\":\"",
				"storageClass": [
					"enum"
				],
				"deco": "Aya",
				"char": 37,
				"name": "pathSeparator",
				"comment": " Path separator string.  A colon under POSIX, a semicolon\n    under Windows.\n"
			},
			{
				"kind": "function",
				"line": 87,
				"deco": "FNaNbNiNfwZb",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "w",
						"name": "c"
					}
				],
				"name": "isDirSeparator",
				"comment": " Determines whether the given character is a directory separator.\n\n    On Windows, this includes both $(D `\\`) and $(D `/`).\n    On POSIX, it's just $(D `/`).\n",
				"endline": 92
			},
			{
				"kind": "enum",
				"line": 213,
				"members": [
					{
						"kind": "enum member",
						"line": 216,
						"value": "false",
						"char": 5,
						"name": "no",
						"comment": "File names are case insensitive\n"
					},
					{
						"kind": "enum member",
						"line": 219,
						"value": "true",
						"char": 5,
						"name": "yes",
						"comment": "File names are case sensitive\n"
					},
					{
						"kind": "enum member",
						"line": 225,
						"value": "true",
						"char": 5,
						"name": "osDefault",
						"comment": " The default (or most common) setting for the current platform.\n        That is, $(D no) on Windows and Mac OS X, and $(D yes) on all\n        POSIX systems except OS X (Linux, *BSD, etc.).\n"
					}
				],
				"char": 1,
				"baseDeco": "b",
				"name": "CaseSensitive",
				"comment": " This $(D enum) is used as a template argument to functions which\n    compare file names, and determines whether the comparison is\n    case sensitive or not.\n"
			},
			{
				"kind": "template",
				"line": 276,
				"constraint": "isRandomAccessRange!R && hasSlicing!R && isSomeChar!(ElementType!R) || is(StringTypeOf!R)",
				"members": [
					{
						"kind": "function",
						"line": 276,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "(R path)",
						"parameters": [
							{
								"type": "R",
								"name": "path"
							}
						],
						"name": "baseName",
						"endline": 297
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"comment": " Returns the name of a file, without any leading directory\n    and with an optional suffix chopped off.\n\n    If $(D suffix) is specified, it will be compared to $(D path)\n    using $(D filenameCmp!cs),\n    where $(D cs) is an optional template parameter determining whether\n    the comparison is case sensitive or not.  See the\n    $(LREF filenameCmp) documentation for details.\n\n    Examples:\n    ---\n    assert (baseName(\"dir/file.ext\")         == \"file.ext\");\n    assert (baseName(\"dir/file.ext\", \".ext\") == \"file\");\n    assert (baseName(\"dir/file.ext\", \".xyz\") == \"file.ext\");\n    assert (baseName(\"dir/filename\", \"name\") == \"file\");\n    assert (baseName(\"dir/subdir/\")          == \"subdir\");\n\n    version (Windows)\n    {\n        assert (baseName(`d:file.ext`)      == \"file.ext\");\n        assert (baseName(`d:\\dir\\file.ext`) == \"file.ext\");\n    }\n    ---\n\n    Note:\n    This function $(I only) strips away the specified suffix, which\n    doesn't necessarily have to represent an extension.\n    To remove the extension from a path, regardless of what the extension\n    is, use $(LREF stripExtension).\n    To obtain the filename without leading directories and without\n    an extension, combine the functions like this:\n    ---\n    assert (baseName(stripExtension(\"dir/file.ext\")) == \"file\");\n    ---\n\n    Standards:\n    This function complies with\n    $(LINK2 http://pubs.opengroup.org/onlinepubs/9699919799/utilities/basename.html,\n    the POSIX requirements for the 'basename' shell utility)\n    (with suitable adaptations for Windows paths).\n",
				"name": "baseName"
			},
			{
				"kind": "template",
				"line": 300,
				"constraint": "isSomeChar!C && isSomeChar!C1",
				"members": [
					{
						"kind": "function",
						"line": 300,
						"endchar": 1,
						"char": 12,
						"type": "pure @safe inout(C)[](inout(C)[] path, in C1[] suffix)",
						"parameters": [
							{
								"type": "inout(C)[]",
								"name": "path"
							},
							{
								"storageClass": [
									"in"
								],
								"type": "C1[]",
								"name": "suffix"
							}
						],
						"name": "baseName",
						"endline": 312
					}
				],
				"char": 12,
				"parameters": [
					{
						"kind": "value",
						"defaultValue": "CaseSensitive.osDefault",
						"deco": "E3std4path13CaseSensitive",
						"name": "cs"
					},
					{
						"kind": "type",
						"name": "C"
					},
					{
						"kind": "type",
						"name": "C1"
					}
				],
				"comment": "ditto\n",
				"name": "baseName"
			},
			{
				"kind": "template",
				"line": 408,
				"constraint": "isSomeChar!C",
				"members": [
					{
						"kind": "function",
						"line": 408,
						"endchar": 1,
						"char": 5,
						"type": "C[](C[] path)",
						"parameters": [
							{
								"type": "C[]",
								"name": "path"
							}
						],
						"name": "dirName",
						"endline": 440
					}
				],
				"char": 5,
				"parameters": [
					{
						"kind": "type",
						"name": "C"
					}
				],
				"comment": " Returns the directory part of a path.  On Windows, this\n    includes the drive letter if present.\n\n    This function performs a memory allocation if and only if $(D path)\n    does not have a directory (in which case a new string is needed to\n    hold the returned current-directory symbol, $(D \".\")).\n\n    Examples:\n    ---\n    assert (dirName(\"file\")        == \".\");\n    assert (dirName(\"dir/file\")    == \"dir\");\n    assert (dirName(\"/file\")       == \"/\");\n    assert (dirName(\"dir/subdir/\") == \"dir\");\n\n    version (Windows)\n    {\n        assert (dirName(\"d:file\")      == \"d:\");\n        assert (dirName(`d:\\dir\\file`) == `d:\\dir`);\n        assert (dirName(`d:\\file`)     == `d:\\`);\n        assert (dirName(`dir\\subdir\\`) == `dir`);\n    }\n    ---\n\n    Standards:\n    This function complies with\n    $(LINK2 http://pubs.opengroup.org/onlinepubs/9699919799/utilities/dirname.html,\n    the POSIX requirements for the 'dirname' shell utility)\n    (with suitable adaptations for Windows paths).\n",
				"name": "dirName"
			},
			{
				"kind": "template",
				"line": 501,
				"constraint": "isSomeChar!C",
				"members": [
					{
						"kind": "function",
						"line": 501,
						"endchar": 1,
						"char": 12,
						"type": "pure nothrow @nogc @safe inout(C)[](inout(C)[] path)",
						"parameters": [
							{
								"type": "inout(C)[]",
								"name": "path"
							}
						],
						"name": "rootName",
						"endline": 526
					}
				],
				"char": 12,
				"parameters": [
					{
						"kind": "type",
						"name": "C"
					}
				],
				"comment": " Returns the root directory of the specified path, or $(D null) if the\n    path is not rooted.\n\n    Examples:\n    ---\n    assert (rootName(\"foo\") is null);\n    assert (rootName(\"/foo\") == \"/\");\n\n    version (Windows)\n    {\n        assert (rootName(`\\foo`) == `\\`);\n        assert (rootName(`c:\\foo`) == `c:\\`);\n        assert (rootName(`\\\\server\\share\\foo`) == `\\\\server\\share`);\n    }\n    ---\n",
				"name": "rootName"
			},
			{
				"kind": "template",
				"line": 564,
				"constraint": "isSomeChar!C",
				"members": [
					{
						"kind": "function",
						"line": 564,
						"endchar": 1,
						"char": 12,
						"type": "pure nothrow @nogc @safe inout(C)[](inout(C)[] path)",
						"parameters": [
							{
								"type": "inout(C)[]",
								"name": "path"
							}
						],
						"name": "driveName",
						"endline": 575
					}
				],
				"char": 12,
				"parameters": [
					{
						"kind": "type",
						"name": "C"
					}
				],
				"comment": " Returns the drive of a path, or $(D null) if the drive\n    is not specified.  In the case of UNC paths, the network share\n    is returned.\n\n    Always returns $(D null) on POSIX.\n\n    Examples:\n    ---\n    version (Windows)\n    {\n        assert (driveName(`d:\\file`) == \"d:\");\n        assert (driveName(`\\\\server\\share\\file`) == `\\\\server\\share`);\n        assert (driveName(`dir\\file`).empty);\n    }\n    ---\n",
				"name": "driveName"
			},
			{
				"kind": "template",
				"line": 610,
				"constraint": "isRandomAccessRange!R && hasSlicing!R && isSomeChar!(ElementType!R) || is(StringTypeOf!R)",
				"members": [
					{
						"kind": "function",
						"line": 610,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "(inout R path)",
						"parameters": [
							{
								"storageClass": [
									"inout"
								],
								"type": "R",
								"name": "path"
							}
						],
						"name": "stripDrive",
						"endline": 620
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"comment": " Strips the drive from a Windows path.  On POSIX, the path is returned\n    unaltered.\n\n    Example:\n    ---\n    version (Windows)\n    {\n        assert (stripDrive(`d:\\dir\\file`) == `\\dir\\file`);\n        assert (stripDrive(`\\\\server\\share\\dir\\file`) == `\\dir\\file`);\n    }\n    ---\n",
				"name": "stripDrive"
			},
			{
				"kind": "template",
				"line": 681,
				"constraint": "isRandomAccessRange!R && hasSlicing!R && isSomeChar!(ElementType!R) || is(StringTypeOf!R)",
				"members": [
					{
						"kind": "function",
						"line": 681,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "(R path)",
						"parameters": [
							{
								"type": "R",
								"name": "path"
							}
						],
						"name": "extension",
						"endline": 694
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"comment": " Returns the _extension part of a file name, including the dot.\n\n    If there is no _extension, $(D null) is returned.\n\n    Examples:\n    ---\n    assert (extension(\"file\").empty);\n    assert (extension(\"file.ext\")       == \".ext\");\n    assert (extension(\"file.ext1.ext2\") == \".ext2\");\n    assert (extension(\"file.\")          == \".\");\n    assert (extension(\".file\").empty);\n    assert (extension(\".file.ext\")      == \".ext\");\n    ---\n",
				"name": "extension"
			},
			{
				"kind": "template",
				"line": 760,
				"constraint": "isSomeChar!C",
				"members": [
					{
						"kind": "function",
						"line": 760,
						"endchar": 1,
						"char": 12,
						"type": "pure nothrow @nogc @safe inout(C)[](inout(C)[] path)",
						"parameters": [
							{
								"type": "inout(C)[]",
								"name": "path"
							}
						],
						"name": "stripExtension",
						"endline": 766
					}
				],
				"char": 12,
				"parameters": [
					{
						"kind": "type",
						"name": "C"
					}
				],
				"comment": " Returns slice of path[] with the extension stripped off.\n\n    Examples:\n    ---\n    assert (stripExtension(\"file\")           == \"file\");\n    assert (stripExtension(\"file.ext\")       == \"file\");\n    assert (stripExtension(\"file.ext1.ext2\") == \"file.ext1\");\n    assert (stripExtension(\"file.\")          == \"file\");\n    assert (stripExtension(\".file\")          == \".file\");\n    assert (stripExtension(\".file.ext\")      == \".file\");\n    assert (stripExtension(\"dir/file.ext\")   == \"dir/file\");\n    ---\n",
				"name": "stripExtension"
			},
			{
				"kind": "template",
				"line": 828,
				"constraint": "isSomeChar!C1 && !is(C1 == immutable) && is(Unqual!C1 == Unqual!C2)",
				"members": [
					{
						"kind": "function",
						"line": 828,
						"endchar": 1,
						"char": 24,
						"type": "pure nothrow @trusted immutable(Unqual!C1)[](in C1[] path, in C2[] ext)",
						"parameters": [
							{
								"storageClass": [
									"in"
								],
								"type": "C1[]",
								"name": "path"
							},
							{
								"storageClass": [
									"in"
								],
								"type": "C2[]",
								"name": "ext"
							}
						],
						"name": "setExtension",
						"endline": 836
					}
				],
				"char": 24,
				"parameters": [
					{
						"kind": "type",
						"name": "C1"
					},
					{
						"kind": "type",
						"name": "C2"
					}
				],
				"comment": " Returns a string containing the _path given by $(D path), but where\n    the extension has been set to $(D ext).\n\n    If the filename already has an extension, it is replaced.   If not, the\n    extension is simply appended to the filename.  Including a leading dot\n    in $(D ext) is optional.\n\n    If the extension is empty, this function is equivalent to\n    $(LREF stripExtension).\n\n    This function normally allocates a new string (the possible exception\n    being the case when path is immutable and doesn't already have an\n    extension).\n\n    Examples:\n    ---\n    assert (setExtension(\"file\", \"ext\")      == \"file.ext\");\n    assert (setExtension(\"file\", \".ext\")     == \"file.ext\");\n    assert (setExtension(\"file.old\", \"\")     == \"file\");\n    assert (setExtension(\"file.old\", \"new\")  == \"file.new\");\n    assert (setExtension(\"file.old\", \".new\") == \"file.new\");\n    ---\n",
				"name": "setExtension"
			},
			{
				"kind": "template",
				"line": 839,
				"constraint": "isSomeChar!C1 && is(Unqual!C1 == Unqual!C2)",
				"members": [
					{
						"kind": "function",
						"line": 839,
						"endchar": 1,
						"char": 17,
						"type": "pure nothrow @trusted immutable(C1)[](immutable(C1)[] path, const(C2)[] ext)",
						"parameters": [
							{
								"type": "immutable(C1)[]",
								"name": "path"
							},
							{
								"type": "const(C2)[]",
								"name": "ext"
							}
						],
						"name": "setExtension",
						"endline": 864
					}
				],
				"char": 17,
				"parameters": [
					{
						"kind": "type",
						"name": "C1"
					},
					{
						"kind": "type",
						"name": "C2"
					}
				],
				"comment": "ditto\n",
				"name": "setExtension"
			},
			{
				"kind": "template",
				"line": 913,
				"constraint": "isSomeChar!C1 && is(Unqual!C1 == Unqual!C2)",
				"members": [
					{
						"kind": "function",
						"line": 913,
						"endchar": 1,
						"char": 24,
						"type": "pure @trusted immutable(Unqual!C1)[](in C1[] path, in C2[] ext)",
						"parameters": [
							{
								"storageClass": [
									"in"
								],
								"type": "C1[]",
								"name": "path"
							},
							{
								"storageClass": [
									"in"
								],
								"type": "C2[]",
								"name": "ext"
							}
						],
						"name": "defaultExtension",
						"endline": 927
					}
				],
				"char": 24,
				"parameters": [
					{
						"kind": "type",
						"name": "C1"
					},
					{
						"kind": "type",
						"name": "C2"
					}
				],
				"comment": " Returns the _path given by $(D path), with the extension given by\n    $(D ext) appended if the path doesn't already have one.\n\n    Including the dot in the extension is optional.\n\n    This function always allocates a new string, except in the case when\n    path is immutable and already has an extension.\n\n    Examples:\n    ---\n    assert (defaultExtension(\"file\", \"ext\")      == \"file.ext\");\n    assert (defaultExtension(\"file\", \".ext\")     == \"file.ext\");\n    assert (defaultExtension(\"file.\", \"ext\")     == \"file.\");\n    assert (defaultExtension(\"file.old\", \"new\")  == \"file.old\");\n    assert (defaultExtension(\"file.old\", \".new\") == \"file.old\");\n    ---\n",
				"name": "defaultExtension"
			},
			{
				"kind": "template",
				"line": 968,
				"constraint": "isInputRange!Range && isSomeString!(ElementType!Range)",
				"members": [
					{
						"kind": "function",
						"line": 968,
						"endchar": 1,
						"char": 5,
						"type": "immutable(ElementEncodingType!(ElementType!Range))[](Range segments)",
						"parameters": [
							{
								"type": "Range",
								"name": "segments"
							}
						],
						"name": "buildPath",
						"endline": 1021
					}
				],
				"char": 5,
				"parameters": [
					{
						"kind": "type",
						"name": "Range"
					}
				],
				"comment": " Combines one or more path segments.\n\n    This function takes a set of path segments, given as an input\n    range of string elements or as a set of string arguments,\n    and concatenates them with each other.  Directory separators\n    are inserted between segments if necessary.  If any of the\n    path segments are absolute (as defined by $(LREF isAbsolute)), the\n    preceding segments will be dropped.\n\n    On Windows, if one of the path segments are rooted, but not absolute\n    (e.g. $(D `\\foo`)), all preceding path segments down to the previous\n    root will be dropped.  (See below for an example.)\n\n    This function always allocates memory to hold the resulting path.\n    The variadic overload is guaranteed to only perform a single\n    allocation, as is the range version if $(D paths) is a forward\n    range.\nExample:\n\n---\nversion (Posix)\n{\n    assert (buildPath(\"foo\", \"bar\", \"baz\") == \"foo/bar/baz\");\n    assert (buildPath(\"/foo/\", \"bar/baz\")  == \"/foo/bar/baz\");\n    assert (buildPath(\"/foo\", \"/bar\")      == \"/bar\");\n}\n\nversion (Windows)\n{\n    assert (buildPath(\"foo\", \"bar\", \"baz\") == `foo\\bar\\baz`);\n    assert (buildPath(`c:\\foo`, `bar\\baz`) == `c:\\foo\\bar\\baz`);\n    assert (buildPath(\"foo\", `d:\\bar`)     == `d:\\bar`);\n    assert (buildPath(\"foo\", `\\bar`)       == `\\bar`);\n    assert (buildPath(`c:\\foo`, `\\bar`)    == `c:\\bar`);\n}\n\n---\n",
				"name": "buildPath"
			},
			{
				"kind": "template",
				"line": 1024,
				"constraint": "isSomeChar!C",
				"members": [
					{
						"kind": "function",
						"line": 1024,
						"endchar": 1,
						"char": 16,
						"type": "pure nothrow @safe immutable(C)[](const(C[])[] paths...)",
						"parameters": [
							{
								"type": "const(C[])[]",
								"name": "paths"
							}
						],
						"name": "buildPath",
						"endline": 1029
					}
				],
				"char": 16,
				"parameters": [
					{
						"kind": "type",
						"name": "C"
					}
				],
				"comment": "ditto\n",
				"name": "buildPath"
			},
			{
				"kind": "template",
				"line": 1182,
				"constraint": "isSomeChar!C",
				"members": [
					{
						"kind": "function",
						"line": 1182,
						"endchar": 1,
						"char": 16,
						"type": "pure nothrow @trusted immutable(C)[](const(C[])[] paths...)",
						"parameters": [
							{
								"type": "const(C[])[]",
								"name": "paths"
							}
						],
						"name": "buildNormalizedPath",
						"endline": 1398
					}
				],
				"char": 16,
				"parameters": [
					{
						"kind": "type",
						"name": "C"
					}
				],
				"comment": " Performs the same task as $(LREF buildPath),\n    while at the same time resolving current/parent directory\n    symbols ($(D \".\") and $(D \"..\")) and removing superfluous\n    directory separators.\n    It will return \".\" if the path leads to the starting directory.\n    On Windows, slashes are replaced with backslashes.\n\n    Using buildNormalizedPath on null paths will always return null.\n\n    Note that this function does not resolve symbolic links.\n\n    This function always allocates memory to hold the resulting path.\n\n    Examples:\n    ---\n    assert (buildNormalizedPath(\"foo\", \"..\") == \".\");\n\n    version (Posix)\n    {\n        assert (buildNormalizedPath(\"/foo/./bar/..//baz/\") == \"/foo/baz\");\n        assert (buildNormalizedPath(\"../foo/.\") == \"../foo\");\n        assert (buildNormalizedPath(\"/foo\", \"bar/baz/\") == \"/foo/bar/baz\");\n        assert (buildNormalizedPath(\"/foo\", \"/bar/..\", \"baz\") == \"/baz\");\n        assert (buildNormalizedPath(\"foo/./bar\", \"../../\", \"../baz\") == \"../baz\");\n        assert (buildNormalizedPath(\"/foo/./bar\", \"../../baz\") == \"/baz\");\n    }\n\n    version (Windows)\n    {\n        assert (buildNormalizedPath(`c:\\foo\\.\\bar/..\\\\baz\\`) == `c:\\foo\\baz`);\n        assert (buildNormalizedPath(`..\\foo\\.`) == `..\\foo`);\n        assert (buildNormalizedPath(`c:\\foo`, `bar\\baz\\`) == `c:\\foo\\bar\\baz`);\n        assert (buildNormalizedPath(`c:\\foo`, `bar/..`) == `c:\\foo`);\n        assert (buildNormalizedPath(`\\\\server\\share\\foo`, `..\\bar`) == `\\\\server\\share\\bar`);\n    }\n    ---\n",
				"name": "buildNormalizedPath"
			},
			{
				"kind": "template",
				"line": 1646,
				"constraint": "isSomeChar!C",
				"members": [
					{
						"kind": "function",
						"line": 1646,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "pure nothrow @safe (const(C)[] path)",
						"parameters": [
							{
								"type": "const(C)[]",
								"name": "path"
							}
						],
						"name": "pathSplitter",
						"endline": 1780
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "C"
					}
				],
				"comment": " Returns a bidirectional range that iterates over the elements of a path.\n\n    Examples:\n    ---\n    assert (equal(pathSplitter(\"/\"), [\"/\"]));\n    assert (equal(pathSplitter(\"/foo/bar\"), [\"/\", \"foo\", \"bar\"]));\n    assert (equal(pathSplitter(\"//foo/bar\"), [\"//foo\", \"bar\"]));\n    assert (equal(pathSplitter(\"foo/../bar//./\"), [\"foo\", \"..\", \"bar\", \".\"]));\n\n    version (Windows)\n    {\n        assert (equal(pathSplitter(`foo\\..\\bar\\/.\\`), [\"foo\", \"..\", \"bar\", \".\"]));\n        assert (equal(pathSplitter(\"c:\"), [\"c:\"]));\n        assert (equal(pathSplitter(`c:\\foo\\bar`), [`c:\\`, \"foo\", \"bar\"]));\n        assert (equal(pathSplitter(`c:foo\\bar`), [\"c:foo\", \"bar\"]));\n    }\n    ---\n",
				"name": "pathSplitter"
			},
			{
				"kind": "template",
				"line": 1877,
				"constraint": "isRandomAccessRange!R && isSomeChar!(ElementType!R) || is(StringTypeOf!R)",
				"members": [
					{
						"kind": "function",
						"line": 1877,
						"endchar": 1,
						"char": 6,
						"type": "bool(inout R path)",
						"parameters": [
							{
								"storageClass": [
									"inout"
								],
								"type": "R",
								"name": "path"
							}
						],
						"name": "isRooted",
						"endline": 1884
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"comment": " Determines whether a path starts at a root directory.\n\n    On POSIX, this function returns true if and only if the path starts\n    with a slash (/).\n    ---\n    version (Posix)\n    {\n        assert (isRooted(\"/\"));\n        assert (isRooted(\"/foo\"));\n        assert (!isRooted(\"foo\"));\n        assert (!isRooted(\"../foo\"));\n    }\n    ---\n\n    On Windows, this function returns true if the path starts at\n    the root directory of the current drive, of some other drive,\n    or of a network drive.\n    ---\n    version (Windows)\n    {\n        assert (isRooted(`\\`));\n        assert (isRooted(`\\foo`));\n        assert (isRooted(`d:\\foo`));\n        assert (isRooted(`\\\\foo\\bar`));\n        assert (!isRooted(\"foo\"));\n        assert (!isRooted(\"d:foo\"));\n    }\n    ---\n",
				"name": "isRooted"
			},
			{
				"kind": "template",
				"line": 1947,
				"constraint": "isRandomAccessRange!R && isSomeChar!(ElementType!R) || is(StringTypeOf!R)",
				"members": [
					{
						"kind": "function",
						"line": 1947,
						"char": 10,
						"type": "pure nothrow @nogc @safe bool(const R path)",
						"parameters": [
							{
								"storageClass": [
									"const"
								],
								"type": "R",
								"name": "path"
							}
						],
						"name": "isAbsolute"
					}
				],
				"char": 10,
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"comment": " Determines whether a path is absolute or not.\n\n    Examples:\n    On POSIX, an absolute path starts at the root directory.\n    (In fact, $(D _isAbsolute) is just an alias for $(LREF isRooted).)\n    ---\n    version (Posix)\n    {\n        assert (isAbsolute(\"/\"));\n        assert (isAbsolute(\"/foo\"));\n        assert (!isAbsolute(\"foo\"));\n        assert (!isAbsolute(\"../foo\"));\n    }\n    ---\n\n    On Windows, an absolute path starts at the root directory of\n    a specific drive.  Hence, it must start with $(D `d:\\`) or $(D `d:/`),\n    where $(D d) is the drive letter.  Alternatively, it may be a\n    network path, i.e. a path starting with a double (back)slash.\n    ---\n    version (Windows)\n    {\n        assert (isAbsolute(`d:\\`));\n        assert (isAbsolute(`d:\\foo`));\n        assert (isAbsolute(`\\\\foo\\bar`));\n        assert (!isAbsolute(`\\`));\n        assert (!isAbsolute(`\\foo`));\n        assert (!isAbsolute(\"d:foo\"));\n    }\n    ---\n",
				"name": "isAbsolute"
			},
			{
				"kind": "function",
				"line": 2037,
				"deco": "FNaNfAyaLAyaZAya",
				"endchar": 1,
				"char": 8,
				"parameters": [
					{
						"deco": "Aya",
						"name": "path"
					},
					{
						"deco": "Aya",
						"storageClass": [
							"lazy"
						],
						"default": "getcwd()",
						"name": "base"
					}
				],
				"name": "absolutePath",
				"comment": " Translates $(D path) into an absolute _path.\n\n    The following algorithm is used:\n    $(OL\n        $(LI If $(D path) is empty, return $(D null).)\n        $(LI If $(D path) is already absolute, return it.)\n        $(LI Otherwise, append $(D path) to $(D base) and return\n            the result. If $(D base) is not specified, the current\n            working directory is used.)\n    )\n    The function allocates memory if and only if it gets to the third stage\n    of this algorithm.\n\n    Examples:\n    ---\n    version (Posix)\n    {\n        assert (absolutePath(\"some/file\", \"/foo/bar\")  == \"/foo/bar/some/file\");\n        assert (absolutePath(\"../file\", \"/foo/bar\")    == \"/foo/bar/../file\");\n        assert (absolutePath(\"/some/file\", \"/foo/bar\") == \"/some/file\");\n    }\n\n    version (Windows)\n    {\n        assert (absolutePath(`some\\file`, `c:\\foo\\bar`)    == `c:\\foo\\bar\\some\\file`);\n        assert (absolutePath(`..\\file`, `c:\\foo\\bar`)      == `c:\\foo\\bar\\..\\file`);\n        assert (absolutePath(`c:\\some\\file`, `c:\\foo\\bar`) == `c:\\some\\file`);\n        assert (absolutePath(`\\file`, `c:\\foo\\bar`)        == `c:\\file`);\n    }\n    ---\n\n    Throws:\n    $(D Exception) if the specified _base directory is not absolute.\n",
				"endline": 2045
			},
			{
				"kind": "template",
				"line": 2128,
				"members": [
					{
						"kind": "function",
						"line": 2128,
						"endchar": 1,
						"char": 8,
						"type": "string(string path, lazy string base = getcwd())",
						"parameters": [
							{
								"type": "string",
								"name": "path"
							},
							{
								"storageClass": [
									"lazy"
								],
								"default": "getcwd()",
								"type": "string",
								"name": "base"
							}
						],
						"name": "relativePath",
						"endline": 2175
					}
				],
				"char": 8,
				"parameters": [
					{
						"kind": "value",
						"defaultValue": "CaseSensitive.osDefault",
						"deco": "E3std4path13CaseSensitive",
						"name": "cs"
					}
				],
				"comment": " Translates $(D path) into a relative _path.\n\n    The returned _path is relative to $(D base), which is by default\n    taken to be the current working directory.  If specified,\n    $(D base) must be an absolute _path, and it is always assumed\n    to refer to a directory.  If $(D path) and $(D base) refer to\n    the same directory, the function returns $(D `.`).\n\n    The following algorithm is used:\n    $(OL\n        $(LI If $(D path) is a relative directory, return it unaltered.)\n        $(LI Find a common root between $(D path) and $(D base).\n            If there is no common root, return $(D path) unaltered.)\n        $(LI Prepare a string with as many $(D `../`) or $(D `..\\`) as\n            necessary to reach the common root from base path.)\n        $(LI Append the remaining segments of $(D path) to the string\n            and return.)\n    )\n\n    In the second step, path components are compared using $(D filenameCmp!cs),\n    where $(D cs) is an optional template parameter determining whether\n    the comparison is case sensitive or not.  See the\n    $(LREF filenameCmp) documentation for details.\n\n    The function allocates memory if and only if it reaches the third stage\n    of the above algorithm.\n\n    Examples:\n    ---\n    assert (relativePath(\"foo\") == \"foo\");\n\n    version (Posix)\n    {\n        assert (relativePath(\"foo\", \"/bar\") == \"foo\");\n        assert (relativePath(\"/foo/bar\", \"/foo/bar\") == \".\");\n        assert (relativePath(\"/foo/bar\", \"/foo/baz\") == \"../bar\");\n        assert (relativePath(\"/foo/bar/baz\", \"/foo/woo/wee\") == \"../../bar/baz\");\n        assert (relativePath(\"/foo/bar/baz\", \"/foo/bar\") == \"baz\");\n    }\n    version (Windows)\n    {\n        assert (relativePath(\"foo\", `c:\\bar`) == \"foo\");\n        assert (relativePath(`c:\\foo\\bar`, `c:\\foo\\bar`) == \".\");\n        assert (relativePath(`c:\\foo\\bar`, `c:\\foo\\baz`) == `..\\bar`);\n        assert (relativePath(`c:\\foo\\bar\\baz`, `c:\\foo\\woo\\wee`) == `..\\..\\bar\\baz`);\n        assert (relativePath(`c:\\foo\\bar\\baz`, `c:\\foo\\bar`) == \"baz\");\n        assert (relativePath(`c:\\foo\\bar`, `d:\\foo`) == `c:\\foo\\bar`);\n    }\n    ---\n\n    Throws:\n    $(D Exception) if the specified _base directory is not absolute.\n",
				"name": "relativePath"
			},
			{
				"kind": "template",
				"line": 2250,
				"members": [
					{
						"kind": "function",
						"line": 2250,
						"endchar": 1,
						"char": 5,
						"type": "pure nothrow @safe int(dchar a, dchar b)",
						"parameters": [
							{
								"deco": "w",
								"name": "a"
							},
							{
								"deco": "w",
								"name": "b"
							}
						],
						"name": "filenameCharCmp",
						"endline": 2261
					}
				],
				"char": 5,
				"parameters": [
					{
						"kind": "value",
						"defaultValue": "CaseSensitive.osDefault",
						"deco": "E3std4path13CaseSensitive",
						"name": "cs"
					}
				],
				"comment": " Compares filename characters and return $(D < 0) if $(D a < b), $(D 0) if\n    $(D a == b) and $(D > 0) if $(D a > b).\n\n    This function can perform a case-sensitive or a case-insensitive\n    comparison.  This is controlled through the $(D cs) template parameter\n    which, if not specified, is given by\n    $(LREF CaseSensitive)$(D .osDefault).\n\n    On Windows, the backslash and slash characters ($(D `\\`) and $(D `/`))\n    are considered equal.\n\n    Examples:\n    ---\n    assert (filenameCharCmp('a', 'a') == 0);\n    assert (filenameCharCmp('a', 'b') < 0);\n    assert (filenameCharCmp('b', 'a') > 0);\n\n    version (linux)\n    {\n        // Same as calling filenameCharCmp!(CaseSensitive.yes)(a, b)\n        assert (filenameCharCmp('A', 'a') < 0);\n        assert (filenameCharCmp('a', 'A') > 0);\n    }\n    version (Windows)\n    {\n        // Same as calling filenameCharCmp!(CaseSensitive.no)(a, b)\n        assert (filenameCharCmp('a', 'A') == 0);\n        assert (filenameCharCmp('a', 'B') < 0);\n        assert (filenameCharCmp('A', 'b') < 0);\n    }\n    ---\n",
				"name": "filenameCharCmp"
			},
			{
				"kind": "template",
				"line": 2323,
				"constraint": "isSomeChar!C1 && isSomeChar!C2",
				"members": [
					{
						"kind": "function",
						"line": 2323,
						"endchar": 1,
						"char": 5,
						"type": "pure @safe int(const(C1)[] filename1, const(C2)[] filename2)",
						"parameters": [
							{
								"type": "const(C1)[]",
								"name": "filename1"
							},
							{
								"type": "const(C2)[]",
								"name": "filename2"
							}
						],
						"name": "filenameCmp",
						"endline": 2338
					}
				],
				"char": 5,
				"parameters": [
					{
						"kind": "value",
						"defaultValue": "CaseSensitive.osDefault",
						"deco": "E3std4path13CaseSensitive",
						"name": "cs"
					},
					{
						"kind": "type",
						"name": "C1"
					},
					{
						"kind": "type",
						"name": "C2"
					}
				],
				"comment": " Compares file names and returns\n    $(D < 0) if $(D filename1 < filename2),\n    $(D 0) if $(D filename1 == filename2) and\n    $(D > 0) if $(D filename1 > filename2).\n\n    Individual characters are compared using $(D filenameCharCmp!cs),\n    where $(D cs) is an optional template parameter determining whether\n    the comparison is case sensitive or not.  See the\n    $(LREF filenameCharCmp) documentation for details.\n\n    Examples:\n    ---\n    assert (filenameCmp(\"abc\", \"abc\") == 0);\n    assert (filenameCmp(\"abc\", \"abd\") < 0);\n    assert (filenameCmp(\"abc\", \"abb\") > 0);\n    assert (filenameCmp(\"abc\", \"abcd\") < 0);\n    assert (filenameCmp(\"abcd\", \"abc\") > 0);\n\n    version (linux)\n    {\n        // Same as calling filenameCmp!(CaseSensitive.yes)(filename1, filename2)\n        assert (filenameCmp(\"Abc\", \"abc\") < 0);\n        assert (filenameCmp(\"abc\", \"Abc\") > 0);\n    }\n    version (Windows)\n    {\n        // Same as calling filenameCmp!(CaseSensitive.no)(filename1, filename2)\n        assert (filenameCmp(\"Abc\", \"abc\") == 0);\n        assert (filenameCmp(\"abc\", \"Abc\") == 0);\n        assert (filenameCmp(\"Abc\", \"abD\") < 0);\n        assert (filenameCmp(\"abc\", \"AbB\") > 0);\n    }\n    ---\n",
				"name": "filenameCmp"
			},
			{
				"kind": "template",
				"line": 2428,
				"constraint": "isSomeChar!C",
				"members": [
					{
						"kind": "function",
						"line": 2428,
						"endchar": 1,
						"char": 6,
						"type": "pure nothrow @safe bool(const(C)[] path, const(C)[] pattern)",
						"parameters": [
							{
								"type": "const(C)[]",
								"name": "path"
							},
							{
								"type": "const(C)[]",
								"name": "pattern"
							}
						],
						"name": "globMatch",
						"endline": 2546
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "value",
						"defaultValue": "CaseSensitive.osDefault",
						"deco": "E3std4path13CaseSensitive",
						"name": "cs"
					},
					{
						"kind": "type",
						"name": "C"
					}
				],
				"comment": " Matches a pattern against a path.\n\n    Some characters of pattern have a special meaning (they are\n    $(I meta-characters)) and can't be escaped. These are:\n\n    $(BOOKTABLE,\n    $(TR $(TD $(D *))\n         $(TD Matches 0 or more instances of any character.))\n    $(TR $(TD $(D ?))\n         $(TD Matches exactly one instance of any character.))\n    $(TR $(TD $(D [)$(I chars)$(D ]))\n         $(TD Matches one instance of any character that appears\n              between the brackets.))\n    $(TR $(TD $(D [!)$(I chars)$(D ]))\n         $(TD Matches one instance of any character that does not\n              appear between the brackets after the exclamation mark.))\n    $(TR $(TD $(D {)$(I string1)$(D ,)$(I string2)$(D ,)&hellip;$(D }))\n         $(TD Matches either of the specified strings.))\n    )\n\n    Individual characters are compared using $(D filenameCharCmp!cs),\n    where $(D cs) is an optional template parameter determining whether\n    the comparison is case sensitive or not.  See the\n    $(LREF filenameCharCmp) documentation for details.\n\n    Note that directory\n    separators and dots don't stop a meta-character from matching\n    further portions of the path.\n\n    Returns:\n    $(D true) if pattern matches path, $(D false) otherwise.\n\n    See_also:\n    $(LINK2 http://en.wikipedia.org/wiki/Glob_%28programming%29,Wikipedia: _glob (programming))\n\n    Examples:\n    -----\n    assert (globMatch(\"foo.bar\", \"*\"));\n    assert (globMatch(\"foo.bar\", \"*.*\"));\n    assert (globMatch(`foo/foo\\bar`, \"f*b*r\"));\n    assert (globMatch(\"foo.bar\", \"f???bar\"));\n    assert (globMatch(\"foo.bar\", \"[fg]???bar\"));\n    assert (globMatch(\"foo.bar\", \"[!gh]*bar\"));\n    assert (globMatch(\"bar.fooz\", \"bar.{foo,bif}z\"));\n    assert (globMatch(\"bar.bifz\", \"bar.{foo,bif}z\"));\n\n    version (Windows)\n    {\n        // Same as calling globMatch!(CaseSensitive.no)(path, pattern)\n        assert (globMatch(\"foo\", \"Foo\"));\n        assert (globMatch(\"Goo.bar\", \"[fg]???bar\"));\n    }\n    version (linux)\n    {\n        // Same as calling globMatch!(CaseSensitive.yes)(path, pattern)\n        assert (!globMatch(\"foo\", \"Foo\"));\n        assert (!globMatch(\"Goo.bar\", \"[fg]???bar\"));\n    }\n    -----\n",
				"name": "globMatch"
			},
			{
				"kind": "template",
				"line": 2621,
				"constraint": "isRandomAccessRange!R && isSomeChar!(ElementType!R) || is(StringTypeOf!R)",
				"members": [
					{
						"kind": "function",
						"line": 2621,
						"endchar": 1,
						"char": 6,
						"type": "bool(R filename)",
						"parameters": [
							{
								"type": "R",
								"name": "filename"
							}
						],
						"name": "isValidFilename",
						"endline": 2665
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"comment": " Checks that the given file or directory name is valid.\n\n    This function returns $(D true) if and only if $(D filename) is not\n    empty, not too long, and does not contain invalid characters.\n\n    The maximum length of $(D filename) is given by the constant\n    $(D core.stdc.stdio.FILENAME_MAX).  (On Windows, this number is\n    defined as the maximum number of UTF-16 code points, and the\n    test will therefore only yield strictly correct results when\n    $(D filename) is a string of $(D wchar)s.)\n\n    On Windows, the following criteria must be satisfied\n    ($(LINK2 http://msdn.microsoft.com/en-us/library/aa365247(v=vs.85).aspx,source)):\n    $(UL\n        $(LI $(D filename) must not contain any characters whose integer\n            representation is in the range 0-31.)\n        $(LI $(D filename) must not contain any of the following $(I reserved\n            characters): <>:\"/\\|?*)\n        $(LI $(D filename) may not end with a space ($(D ' ')) or a period\n            ($(D '.')).)\n    )\n\n    On POSIX, $(D filename) may not contain a forward slash ($(D '/')) or\n    the null character ($(D '\\0')).\n",
				"name": "isValidFilename"
			},
			{
				"kind": "template",
				"line": 2724,
				"constraint": "isSomeChar!C",
				"members": [
					{
						"kind": "function",
						"line": 2724,
						"endchar": 1,
						"char": 6,
						"type": "pure nothrow @safe bool(in C[] path)",
						"parameters": [
							{
								"storageClass": [
									"in"
								],
								"type": "C[]",
								"name": "path"
							}
						],
						"name": "isValidPath",
						"endline": 2815
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "C"
					}
				],
				"comment": " Checks whether $(D path) is a valid _path.\n\n    Generally, this function checks that $(D path) is not empty, and that\n    each component of the path either satisfies $(LREF isValidFilename)\n    or is equal to $(D \".\") or $(D \"..\").\n    It does $(I not) check whether the _path points to an existing file\n    or directory; use $(XREF file,exists) for this purpose.\n\n    On Windows, some special rules apply:\n    $(UL\n        $(LI If the second character of $(D path) is a colon ($(D ':')),\n            the first character is interpreted as a drive letter, and\n            must be in the range A-Z (case insensitive).)\n        $(LI If $(D path) is on the form $(D `\\\\$(I server)\\$(I share)\\...`)\n            (UNC path), $(LREF isValidFilename) is applied to $(I server)\n            and $(I share) as well.)\n        $(LI If $(D path) starts with $(D `\\\\?\\`) (long UNC path), the\n            only requirement for the rest of the string is that it does\n            not contain the null character.)\n        $(LI If $(D path) starts with $(D `\\\\.\\`) (Win32 device namespace)\n            this function returns $(D false); such paths are beyond the scope\n            of this module.)\n    )\n",
				"name": "isValidPath"
			},
			{
				"kind": "function",
				"line": 2893,
				"deco": "FAyaZAya",
				"endchar": 1,
				"char": 8,
				"parameters": [
					{
						"deco": "Aya",
						"name": "inputPath"
					}
				],
				"name": "expandTilde",
				"comment": " Performs tilde expansion in paths on POSIX systems.\n    On Windows, this function does nothing.\n\n    There are two ways of using tilde expansion in a path. One\n    involves using the tilde alone or followed by a path separator. In\n    this case, the tilde will be expanded with the value of the\n    environment variable $(D HOME).  The second way is putting\n    a username after the tilde (i.e. $(D ~john/Mail)). Here,\n    the username will be searched for in the user database\n    (i.e. $(D /etc/passwd) on Unix systems) and will expand to\n    whatever path is stored there.  The username is considered the\n    string after the tilde ending at the first instance of a path\n    separator.\n\n    Note that using the $(D ~user) syntax may give different\n    values from just $(D ~) if the environment variable doesn't\n    match the value stored in the user database.\n\n    When the environment variable version is used, the path won't\n    be modified if the environment variable doesn't exist or it\n    is empty. When the database version is used, the path won't be\n    modified if the user doesn't exist in the database or there is\n    not enough memory to perform the query.\n\n    This function performs several memory allocations.\n\n    Returns:\n    $(D inputPath) with the tilde expanded, or just $(D inputPath)\n    if it could not be expanded.\n    For Windows, $(D expandTilde) merely returns its argument $(D inputPath).\n\n    Examples:\n    -----\n    void processFile(string path)\n    {\n        // Allow calling this function with paths such as ~/foo\n        auto fullPath = expandTilde(path);\n        ...\n    }\n    -----\n",
				"endline": 3042
			}
		],
		"name": "std.path",
		"comment": " This module is used to manipulate _path strings.\n\n    All functions, with the exception of $(LREF expandTilde) (and in some\n    cases $(LREF absolutePath) and $(LREF relativePath)), are pure\n    string manipulation functions; they don't depend on any state outside\n    the program, nor do they perform any actual file system actions.\n    This has the consequence that the module does not make any distinction\n    between a _path that points to a directory and a _path that points to a\n    file, and it does not know whether or not the object pointed to by the\n    _path actually exists in the file system.\n    To differentiate between these cases, use $(XREF file,isDir) and\n    $(XREF file,exists).\n\n    Note that on Windows, both the backslash ($(D `\\`)) and the slash ($(D `/`))\n    are in principle valid directory separators.  This module treats them\n    both on equal footing, but in cases where a $(I new) separator is\n    added, a backslash will be used.  Furthermore, the $(LREF buildNormalizedPath)\n    function will replace all slashes with backslashes on that platform.\n\n    In general, the functions in this module assume that the input paths\n    are well-formed.  (That is, they should not contain invalid characters,\n    they should follow the file system's _path format, etc.)  The result\n    of calling a function on an ill-formed _path is undefined.  When there\n    is a chance that a _path or a file name is invalid (for instance, when it\n    has been input by the user), it may sometimes be desirable to use the\n    $(LREF isValidFilename) and $(LREF isValidPath) functions to check\n    this.\n\n    Most functions do not perform any memory allocations, and if a string is\n    returned, it is usually a slice of an input string.  If a function\n    allocates, this is explicitly mentioned in the documentation.\n\n    Upgrading:\n        $(WEB digitalmars.com/d/1.0/phobos/std_path.html#fnmatch) can\n        be replaced with $(D globMatch).\n\n    Authors:\n        Lars Tandle Kyllingstad,\n        $(WEB digitalmars.com, Walter Bright),\n        Grzegorz Adam Hankiewicz,\n        Thomas K$(UUML)hne,\n        $(WEB erdani.org, Andrei Alexandrescu)\n    Copyright:\n        Copyright (c) 2000-2014, the authors. All rights reserved.\n    License:\n        $(WEB boost.org/LICENSE_1_0.txt, Boost License 1.0)\n    Source:\n        $(PHOBOSSRC std/_path.d)\n    Macros:\n        WIKI = Phobos/StdPath\n"
	},
	{
		"kind": "module",
		"file": "../phobos/std/experimental/logger/package.d",
		"members": [],
		"name": "std.experimental.logger",
		"comment": "Implements logging facilities.\n\nCopyright: Copyright Robert \"burner\" Schadek 2013 --\nLicense: <a href=\"http://www.boost.org/LICENSE_1_0.txt\">Boost License 1.0</a>.\nAuthors: $(WEB http://www.svs.informatik.uni-oldenburg.de/60865.html, Robert burner Schadek)\n\n$(H3 Basic Logging)\n\nMessage logging is a common approach to expose runtime information of a\nprogram. Logging should be easy, but also flexible and powerful, therefore\n$(D D) provides a standard interface for logging.\n\nThe easiest way to create a log message is to write:\n-------------\nimport std.experimental.logger;\n\nvoid main() {\n    log(\"Hello World\");\n}\n-------------\nThis will print a message to the $(D stderr) device. The message will contain\nthe filename, the linenumber, the name of the surrounding function, the time\nand the message.\n\nMore complex log call can go along the lines like:\n-------------\nlog(\"Logging to the sharedLog with its default LogLevel\");\nlogf(LogLevel.info, 5 < 6, \"%s to the sharedLog with its LogLevel.info\", \"Logging\");\ninfo(\"Logging to the sharedLog with its info LogLevel\");\nwarning(5 < 6, \"Logging to the sharedLog with its LogLevel.warning if 5 is less than 6\");\nerror(\"Logging to the sharedLog with its error LogLevel\");\nerrorf(\"Logging %s the sharedLog %s its error LogLevel\", \"to\", \"with\");\ncritical(\"Logging to the\",\" sharedLog with its error LogLevel\");\nfatal(\"Logging to the sharedLog with its fatal LogLevel\");\n\nauto fLogger = new FileLogger(\"NameOfTheLogFile\");\nfLogger.log(\"Logging to the fileLogger with its default LogLevel\");\nfLogger.info(\"Logging to the fileLogger with its default LogLevel\");\nfLogger.warning(5 < 6, \"Logging to the fileLogger with its LogLevel.warning if 5 is less than 6\");\nfLogger.warningf(5 < 6, \"Logging to the fileLogger with its LogLevel.warning if %s is %s than 6\", 5, \"less\");\nfLogger.critical(\"Logging to the fileLogger with its info LogLevel\");\nfLogger.log(LogLevel.trace, 5 < 6, \"Logging to the fileLogger\",\" with its default LogLevel if 5 is less than 6\");\nfLogger.fatal(\"Logging to the fileLogger with its warning LogLevel\");\n-------------\nAdditionally, this example shows how a new $(D FileLogger) is created.\nIndividual $(D Logger) and the global log functions share commonly named\nfunctions to log data.\n\nThe names of the functions are as follows:\n$(LI $(D log))\n$(LI $(D trace))\n$(LI $(D info))\n$(LI $(D warning))\n$(LI $(D critical))\n$(LI $(D fatal))\nThe default $(D Logger) will by default log to $(D stderr) and has a default\n$(D LogLevel) of $(D LogLevel.all). The default Logger can be accessed by\nusing the property called $(D sharedLog). This property a reference to the\ncurrent default $(D Logger). This reference can be used to assign a new\ndefault $(D Logger).\n-------------\nsharedLog = new FileLogger(\"New_Default_Log_File.log\");\n-------------\n\nAdditional $(D Logger) can be created by creating a new instance of the\nrequired $(D Logger).\n\n$(H3 Logging Fundamentals)\n$(H4 LogLevel)\nThe $(D LogLevel) of an log call can be defined in two ways. The first is by\ncalling $(D log) and passing the $(D LogLevel) explicit as the first argument.\nThe second way of setting the $(D LogLevel) of a\nlog call, is by calling either $(D trace), $(D info), $(D warning),\n$(D critical), or $(D fatal). The log call will than have the respective\n$(D LogLevel). If no $(D LogLevel) is defined the log call will use the\ncurrent $(D LogLevel) of the used $(D Logger). If data is logged with\n$(D LogLevel) $(D fatal) by default an $(D Error) will be thrown.\nThis behaviour can be modified by using the member $(D fatalHandler) to\nassign a custom delegate to handle log call with $(D LogLevel) $(D fatal).\n\n$(H4 Conditional Logging)\nConditional logging can be achieved be passing a $(D bool) as first\nargument to a log function. If conditional logging is used the condition must\nbe $(D true) in order to have the log message logged.\n\nIn order to combine an explicit $(D LogLevel) passing with conditional\nlogging, the $(D LogLevel) has to be passed as first argument followed by the\n$(D bool).\n\n$(H4 Filtering Log Messages)\nMessages are logged if the $(D LogLevel) of the log message is greater than or\nequal to than the $(D LogLevel) of the used $(D Logger) and additionally if the\n$(D LogLevel) of the log message is greater equal to the global $(D LogLevel).\nIf a condition is passed into the log call, this condition must be true.\n\nThe global $(D LogLevel) is accessible by using $(D globalLogLevel).\nTo assign the $(D LogLevel) of a $(D Logger) use the $(D logLevel) property of\nthe logger.\n\n$(H4 Printf Sytle Logging)\nIf $(D printf)-style logging is needed add a $(B f) to the logging call, such as\n$(D myLogger.infof(\"Hello %s\", \"world\");) or $(fatalf(\"errno %d\", 1337))\nThe additional $(B f) enables $(D printf)-style logging for call combinations of\nexplicit $(D LogLevel) and conditional logging functions and methods.\n\n$(H4 Thread Local Redirection)\nCalls to the free standing log functions are not directly forwarded to the\nglobal $(D Logger) $(D sharedLog). Actually, a thread local $(D Logger) of\ntype $(D StdForwardLogger) process the log call and then, by default, forward\nthe created $(D Logger.LogEntry) to the $(D sharedLog) $(D Logger).\nThe thread local $(D Logger) is accessable by the $(D stdThreadLocalLog)\nproperty. This property allows to assign user defined $(D Logger). The default\n$(D LogLevel) of the $(D stdThreadLocalLog) $(D Logger) is $(D LogLevel.all)\nand it will therefore forward all messaged to the $(D sharedLog) $(D Logger).\nThe $(D LogLevel) of the $(D stdThreadLocalLog) can be used to filter log\ncalls before they reach the $(D sharedLog) $(D Logger).\n\n$(H3 User Defined Logger)\nTo customize the $(D Logger) behavior, create a new $(D class) that inherits from\nthe abstract $(D Logger) $(D class), and implements the $(D writeLogMsg)\nmethod.\n-------------\nclass MyCustomLogger : Logger\n{\n    this(string newName, LogLevel lv) @safe\n    {\n        super(newName, lv);\n    }\n\n    override void writeLogMsg(ref LogEntry payload)\n    {\n        // log message in my custom way\n    }\n}\n\nauto logger = new MyCustomLogger();\nlogger.log(\"Awesome log message\");\n-------------\n\nTo gain more precise control over the logging process, additionally to\noverwriting the $(D writeLogMsg) method the methods $(D beginLogMsg),\n$(D logMsgPart) and $(D finishLogMsg) can be overwritten.\n\n$(H3 Compile Time Disabling of $(D Logger))\nIn order to disable logging at compile time, pass $(D StdLoggerDisableLogging) as a\nversion argument to the $(D D) compiler when compiling your program code.\nThis will disable all logging functionality.\nSpecific $(D LogLevel) can be disabled at compile time as well.\nIn order to disable logging with the $(D trace) $(D LogLevel) pass\n$(D StdLoggerDisableTrace) as a version.\nThe following table shows which version statement disables which\n$(D LogLevel).\n$(TABLE\n    $(TR $(TD $(D LogLevel.trace) ) $(TD StdLoggerDisableTrace))\n    $(TR $(TD $(D LogLevel.info) ) $(TD StdLoggerDisableInfo))\n    $(TR $(TD $(D LogLevel.warning) ) $(TD StdLoggerDisableWarning))\n    $(TR $(TD $(D LogLevel.error) ) $(TD StdLoggerDisableError))\n    $(TR $(TD $(D LogLevel.critical) ) $(TD StdLoggerDisableCritical))\n    $(TR $(TD $(D LogLevel.fatal) ) $(TD StdLoggerDisableFatal))\n)\nSuch a version statement will only disable logging in the associated compile\nunit.\n\n$(H3 Provided Logger)\nBy default four $(D Logger) implementations are given. The $(D FileLogger)\nlogs data to files. It can also be used to log to $(D stdout) and $(D stderr)\nas these devices are files as well. A $(D Logger) that logs to $(D stdout) can\ntherefore be created by $(D new FileLogger(stdout)).\nThe $(D MultiLogger) is basically an associative array of $(D string)s to\n$(D Logger). It propagates log calls to its stored $(D Logger). The\n$(D ArrayLogger) contains an array of $(D Logger) and also propagates log\ncalls to its stored $(D Logger). The $(D NullLogger) does not do anything. It\nwill never log a message and will never throw on a log call with $(D LogLevel)\n$(D error).\n"
	},
	{
		"kind": "module",
		"file": "../phobos/std/experimental/testing/package.d",
		"members": [],
		"name": "std.experimental.testing",
		"comment": "Advanced unit-testing.\n\nCopyright: Atila Neves\nLicense: <a href=\"http://www.boost.org/LICENSE_1_0.txt\">Boost License 1.0</a>.\nAuthors: Atila Neves\n\n$(D D)'s $(D unittest) blocks are a built-in feature of the language that allows\nfor easy unit testing with no boilerplate. As a program grows it's usual to need\nor want more advanced testing features, which is provided by this package.\n\nThe easiest way to run tests with the functionality provided is to have a $(D D)\nmodule implementing a $(D main) function similar to this one:\n\n-----\nimport std.experimental.testing;\n\nint main(string[] args) {\n     return runTests!(\"name.of.mymodule\",\n                      \"name.of.other.module\")(args);\n}\n-----\n\nThis will (by default) run all $(D unittest) blocks in the modules passed in as\ncompile-time parameters in multiple threads. Unit tests can be named: to do so\nsimply use the supplied $(D Name)\n<a href=\"http://dlang.org/attribute.html#uda\">UDA</a>. There are other\nsupplied UDAs. Please consult the relevant documentation.\n"
	},
	{
		"kind": "module",
		"file": "../phobos/std/experimental/testing/io.d",
		"members": [
			{
				"kind": "template",
				"line": 18,
				"members": [
					{
						"kind": "function",
						"line": 18,
						"endchar": 1,
						"char": 6,
						"type": "void(T args)",
						"parameters": [
							{
								"type": "T",
								"name": "args"
							}
						],
						"name": "writelnUt",
						"endline": 22
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "tuple",
						"name": "T"
					}
				],
				"comment": " Write if debug output was enabled. Not thread-safe in the sense that it\n will get printed out immediately and may overlap with other output.\n This is why the test runner forces single-threaded mode when debug mode\n is selected.\n",
				"name": "writelnUt"
			},
			{
				"kind": "class",
				"line": 106,
				"members": [
					{
						"kind": "function",
						"line": 112,
						"storageClass": [
							"static"
						],
						"deco": "FZC3std12experimental7testing2io12WriterThread",
						"endchar": 5,
						"char": 25,
						"name": "get",
						"comment": " Returns a reference to the only instance of this class.\n",
						"endline": 126
					},
					{
						"kind": "template",
						"line": 131,
						"members": [
							{
								"kind": "function",
								"line": 131,
								"endchar": 5,
								"char": 10,
								"type": "void(T args)",
								"parameters": [
									{
										"type": "T",
										"name": "args"
									}
								],
								"name": "write",
								"endline": 134
							}
						],
						"char": 10,
						"parameters": [
							{
								"kind": "tuple",
								"name": "T"
							}
						],
						"comment": " Writes the args in a thread-safe manner.\n",
						"name": "write"
					},
					{
						"kind": "template",
						"line": 139,
						"members": [
							{
								"kind": "function",
								"line": 139,
								"endchar": 5,
								"char": 10,
								"type": "void(T args)",
								"parameters": [
									{
										"type": "T",
										"name": "args"
									}
								],
								"name": "writeln",
								"endline": 142
							}
						],
						"char": 10,
						"parameters": [
							{
								"kind": "tuple",
								"name": "T"
							}
						],
						"comment": " Writes the args in a thread-safe manner and appends a newline.\n",
						"name": "writeln"
					},
					{
						"kind": "template",
						"line": 148,
						"members": [
							{
								"kind": "function",
								"line": 148,
								"endchar": 5,
								"char": 10,
								"type": "void(T args)",
								"parameters": [
									{
										"type": "T",
										"name": "args"
									}
								],
								"name": "writelnGreen",
								"endline": 151
							}
						],
						"char": 10,
						"parameters": [
							{
								"kind": "tuple",
								"name": "T"
							}
						],
						"comment": " Writes the args in a thread-safe manner in green (POSIX only).\n and appends a newline.\n",
						"name": "writelnGreen"
					},
					{
						"kind": "template",
						"line": 157,
						"members": [
							{
								"kind": "function",
								"line": 157,
								"endchar": 5,
								"char": 10,
								"type": "void(T args)",
								"parameters": [
									{
										"type": "T",
										"name": "args"
									}
								],
								"name": "writelnRed",
								"endline": 160
							}
						],
						"char": 10,
						"parameters": [
							{
								"kind": "tuple",
								"name": "T"
							}
						],
						"comment": " Writes the args in a thread-safe manner in red (POSIX only)\n and appends a newline.\n",
						"name": "writelnRed"
					},
					{
						"kind": "template",
						"line": 166,
						"members": [
							{
								"kind": "function",
								"line": 166,
								"endchar": 5,
								"char": 10,
								"type": "void(T args)",
								"parameters": [
									{
										"type": "T",
										"name": "args"
									}
								],
								"name": "writeRed",
								"endline": 169
							}
						],
						"char": 10,
						"parameters": [
							{
								"kind": "tuple",
								"name": "T"
							}
						],
						"comment": " Writes the args in a thread-safe manner in red (POSIX only).\n and appends a newline.\n",
						"name": "writeRed"
					},
					{
						"kind": "template",
						"line": 175,
						"members": [
							{
								"kind": "function",
								"line": 175,
								"endchar": 5,
								"char": 10,
								"type": "void(T args)",
								"parameters": [
									{
										"type": "T",
										"name": "args"
									}
								],
								"name": "writeYellow",
								"endline": 178
							}
						],
						"char": 10,
						"parameters": [
							{
								"kind": "tuple",
								"name": "T"
							}
						],
						"comment": " Writes the args in a thread-safe manner in yellow (POSIX only).\n and appends a newline.\n",
						"name": "writeYellow"
					},
					{
						"kind": "function",
						"line": 183,
						"storageClass": [
							"static"
						],
						"deco": "FZv",
						"endchar": 5,
						"char": 17,
						"name": "start",
						"comment": " Creates the singleton instance and waits until it's ready.\n",
						"endline": 187
					},
					{
						"kind": "function",
						"line": 192,
						"deco": "FZv",
						"endchar": 5,
						"char": 10,
						"name": "join",
						"comment": " Waits for the writer thread to terminate.\n",
						"endline": 198
					}
				],
				"char": 1,
				"name": "WriterThread",
				"comment": " Thread to output to stdout\n"
			}
		],
		"name": "std.experimental.testing.io",
		"comment": " IO related functions\n"
	},
	{
		"kind": "module",
		"file": "../phobos/std/demangle.d",
		"members": [
			{
				"kind": "function",
				"line": 85,
				"deco": "FAyaZAya",
				"endchar": 1,
				"char": 8,
				"parameters": [
					{
						"deco": "Aya",
						"name": "name"
					}
				],
				"name": "demangle",
				"comment": " Demangle D mangled names.\n\n If it is not a D mangled name, it returns its argument name.\n Example:\n        This program reads standard in and writes it to standard out,\n        pretty-printing any found D mangled names.\n-------------------\nimport core.stdc.stdio : stdin;\nimport std.stdio;\nimport std.ascii;\nimport std.demangle;\n\nvoid test(int x, float y) { }\n\nint main()\n{\n    string buffer;\n    bool inword;\n    int c;\n\n    writefln(\"Try typing in: %s\", test.mangleof);\n    while ((c = fgetc(stdin)) != EOF)\n    {\n        if (inword)\n        {\n            if (c == '_' || isAlphaNum(c))\n                buffer ~= cast(char) c;\n            else\n            {\n                inword = false;\n                write(demangle(buffer), cast(char) c);\n            }\n        }\n        else\n        {   if (c == '_' || isAlpha(c))\n            {\n                inword = true;\n                buffer.length = 0;\n                buffer ~= cast(char) c;\n            }\n            else\n                write(cast(char) c);\n        }\n    }\n    if (inword)\n        write(demangle(buffer));\n    return 0;\n}\n-------------------\n",
				"endline": 91
			}
		],
		"name": "std.demangle",
		"comment": " Demangle D mangled names.\n\n Macros:\n  WIKI = Phobos/StdDemangle\n\n Copyright: Copyright Digital Mars 2000 - 2009.\n License:   $(WEB www.boost.org/LICENSE_1_0.txt, Boost License 1.0).\n Authors:   $(WEB digitalmars.com, Walter Bright),\n                        Thomas K$(UUML)hne, Frits van Bommel\n Source:    $(PHOBOSSRC std/_demangle.d)\n"
	},
	{
		"kind": "module",
		"file": "../phobos/std/stream.d",
		"members": [
			{
				"kind": "class",
				"line": 50,
				"base": "object.Exception",
				"members": [
					{
						"kind": "constructor",
						"line": 52,
						"deco": "FAyaZC3std6stream15StreamException",
						"endchar": 34,
						"char": 3,
						"parameters": [
							{
								"deco": "Aya",
								"name": "msg"
							}
						],
						"name": "this",
						"comment": "Construct a StreamException with given error message.\n",
						"originalType": "(string msg)",
						"endline": 52
					}
				],
				"char": 1,
				"name": "StreamException",
				"comment": "A base class for stream exceptions.\n"
			},
			{
				"kind": "class",
				"line": 56,
				"base": "std.stream.StreamException",
				"members": [
					{
						"kind": "constructor",
						"line": 58,
						"deco": "FAyaZC3std6stream13ReadException",
						"endchar": 34,
						"char": 3,
						"parameters": [
							{
								"deco": "Aya",
								"name": "msg"
							}
						],
						"name": "this",
						"comment": "Construct a ReadException with given error message.\n",
						"originalType": "(string msg)",
						"endline": 58
					}
				],
				"char": 1,
				"name": "ReadException",
				"comment": "Thrown when unable to read data from Stream.\n"
			},
			{
				"kind": "class",
				"line": 62,
				"base": "std.stream.StreamException",
				"members": [
					{
						"kind": "constructor",
						"line": 64,
						"deco": "FAyaZC3std6stream14WriteException",
						"endchar": 34,
						"char": 3,
						"parameters": [
							{
								"deco": "Aya",
								"name": "msg"
							}
						],
						"name": "this",
						"comment": "Construct a WriteException with given error message.\n",
						"originalType": "(string msg)",
						"endline": 64
					}
				],
				"char": 1,
				"name": "WriteException",
				"comment": "Thrown when unable to write data to Stream.\n"
			},
			{
				"kind": "class",
				"line": 68,
				"base": "std.stream.StreamException",
				"members": [
					{
						"kind": "constructor",
						"line": 70,
						"deco": "FAyaZC3std6stream13SeekException",
						"endchar": 34,
						"char": 3,
						"parameters": [
							{
								"deco": "Aya",
								"name": "msg"
							}
						],
						"name": "this",
						"comment": "Construct a SeekException with given error message.\n",
						"originalType": "(string msg)",
						"endline": 70
					}
				],
				"char": 1,
				"name": "SeekException",
				"comment": "Thrown when unable to move Stream pointer.\n"
			},
			{
				"kind": "interface",
				"line": 94,
				"members": [
					{
						"kind": "function",
						"line": 101,
						"storageClass": [
							"abstract"
						],
						"deco": "FPvmZv",
						"char": 8,
						"parameters": [
							{
								"deco": "Pv",
								"name": "buffer"
							},
							{
								"deco": "m",
								"name": "size"
							}
						],
						"name": "readExact",
						"comment": " Read exactly size bytes into the buffer.\n\n Throws a ReadException if it is not correct.\n",
						"originalType": "void(void* buffer, size_t size)"
					},
					{
						"kind": "function",
						"line": 108,
						"storageClass": [
							"abstract"
						],
						"deco": "FAhZm",
						"char": 10,
						"parameters": [
							{
								"deco": "Ah",
								"name": "buffer"
							}
						],
						"name": "read",
						"comment": " Read a block of data big enough to fill the given array buffer.\n\n Returns: the actual number of bytes read. Unfilled bytes are not modified.\n",
						"originalType": "size_t(ubyte[] buffer)"
					},
					{
						"kind": "function",
						"line": 118,
						"storageClass": [
							"abstract"
						],
						"deco": "FJgZv",
						"char": 8,
						"parameters": [
							{
								"deco": "g",
								"storageClass": [
									"out"
								],
								"name": "x"
							}
						],
						"name": "read",
						"comment": " Read a basic type or counted string.\n\n Throw a ReadException if it could not be read.\n Outside of byte, ubyte, and char, the format is\n implementation-specific and should not be used except as opposite actions\n to write.\n"
					},
					{
						"kind": "function",
						"line": 119,
						"storageClass": [
							"abstract"
						],
						"deco": "FJhZv",
						"char": 8,
						"parameters": [
							{
								"deco": "h",
								"storageClass": [
									"out"
								],
								"name": "x"
							}
						],
						"name": "read",
						"comment": "ditto\n"
					},
					{
						"kind": "function",
						"line": 120,
						"storageClass": [
							"abstract"
						],
						"deco": "FJsZv",
						"char": 8,
						"parameters": [
							{
								"deco": "s",
								"storageClass": [
									"out"
								],
								"name": "x"
							}
						],
						"name": "read",
						"comment": "ditto\n"
					},
					{
						"kind": "function",
						"line": 121,
						"storageClass": [
							"abstract"
						],
						"deco": "FJtZv",
						"char": 8,
						"parameters": [
							{
								"deco": "t",
								"storageClass": [
									"out"
								],
								"name": "x"
							}
						],
						"name": "read",
						"comment": "ditto\n"
					},
					{
						"kind": "function",
						"line": 122,
						"storageClass": [
							"abstract"
						],
						"deco": "FJiZv",
						"char": 8,
						"parameters": [
							{
								"deco": "i",
								"storageClass": [
									"out"
								],
								"name": "x"
							}
						],
						"name": "read",
						"comment": "ditto\n"
					},
					{
						"kind": "function",
						"line": 123,
						"storageClass": [
							"abstract"
						],
						"deco": "FJkZv",
						"char": 8,
						"parameters": [
							{
								"deco": "k",
								"storageClass": [
									"out"
								],
								"name": "x"
							}
						],
						"name": "read",
						"comment": "ditto\n"
					},
					{
						"kind": "function",
						"line": 124,
						"storageClass": [
							"abstract"
						],
						"deco": "FJlZv",
						"char": 8,
						"parameters": [
							{
								"deco": "l",
								"storageClass": [
									"out"
								],
								"name": "x"
							}
						],
						"name": "read",
						"comment": "ditto\n"
					},
					{
						"kind": "function",
						"line": 125,
						"storageClass": [
							"abstract"
						],
						"deco": "FJmZv",
						"char": 8,
						"parameters": [
							{
								"deco": "m",
								"storageClass": [
									"out"
								],
								"name": "x"
							}
						],
						"name": "read",
						"comment": "ditto\n"
					},
					{
						"kind": "function",
						"line": 126,
						"storageClass": [
							"abstract"
						],
						"deco": "FJfZv",
						"char": 8,
						"parameters": [
							{
								"deco": "f",
								"storageClass": [
									"out"
								],
								"name": "x"
							}
						],
						"name": "read",
						"comment": "ditto\n"
					},
					{
						"kind": "function",
						"line": 127,
						"storageClass": [
							"abstract"
						],
						"deco": "FJdZv",
						"char": 8,
						"parameters": [
							{
								"deco": "d",
								"storageClass": [
									"out"
								],
								"name": "x"
							}
						],
						"name": "read",
						"comment": "ditto\n"
					},
					{
						"kind": "function",
						"line": 128,
						"storageClass": [
							"abstract"
						],
						"deco": "FJeZv",
						"char": 8,
						"parameters": [
							{
								"deco": "e",
								"storageClass": [
									"out"
								],
								"name": "x"
							}
						],
						"name": "read",
						"comment": "ditto\n"
					},
					{
						"kind": "function",
						"line": 129,
						"storageClass": [
							"abstract"
						],
						"deco": "FJoZv",
						"char": 8,
						"parameters": [
							{
								"deco": "o",
								"storageClass": [
									"out"
								],
								"name": "x"
							}
						],
						"name": "read",
						"comment": "ditto\n"
					},
					{
						"kind": "function",
						"line": 130,
						"storageClass": [
							"abstract"
						],
						"deco": "FJpZv",
						"char": 8,
						"parameters": [
							{
								"deco": "p",
								"storageClass": [
									"out"
								],
								"name": "x"
							}
						],
						"name": "read",
						"comment": "ditto\n"
					},
					{
						"kind": "function",
						"line": 131,
						"storageClass": [
							"abstract"
						],
						"deco": "FJjZv",
						"char": 8,
						"parameters": [
							{
								"deco": "j",
								"storageClass": [
									"out"
								],
								"name": "x"
							}
						],
						"name": "read",
						"comment": "ditto\n"
					},
					{
						"kind": "function",
						"line": 132,
						"storageClass": [
							"abstract"
						],
						"deco": "FJqZv",
						"char": 8,
						"parameters": [
							{
								"deco": "q",
								"storageClass": [
									"out"
								],
								"name": "x"
							}
						],
						"name": "read",
						"comment": "ditto\n"
					},
					{
						"kind": "function",
						"line": 133,
						"storageClass": [
							"abstract"
						],
						"deco": "FJrZv",
						"char": 8,
						"parameters": [
							{
								"deco": "r",
								"storageClass": [
									"out"
								],
								"name": "x"
							}
						],
						"name": "read",
						"comment": "ditto\n"
					},
					{
						"kind": "function",
						"line": 134,
						"storageClass": [
							"abstract"
						],
						"deco": "FJcZv",
						"char": 8,
						"parameters": [
							{
								"deco": "c",
								"storageClass": [
									"out"
								],
								"name": "x"
							}
						],
						"name": "read",
						"comment": "ditto\n"
					},
					{
						"kind": "function",
						"line": 135,
						"storageClass": [
							"abstract"
						],
						"deco": "FJaZv",
						"char": 8,
						"parameters": [
							{
								"deco": "a",
								"storageClass": [
									"out"
								],
								"name": "x"
							}
						],
						"name": "read",
						"comment": "ditto\n"
					},
					{
						"kind": "function",
						"line": 136,
						"storageClass": [
							"abstract"
						],
						"deco": "FJuZv",
						"char": 8,
						"parameters": [
							{
								"deco": "u",
								"storageClass": [
									"out"
								],
								"name": "x"
							}
						],
						"name": "read",
						"comment": "ditto\n"
					},
					{
						"kind": "function",
						"line": 137,
						"storageClass": [
							"abstract"
						],
						"deco": "FJwZv",
						"char": 8,
						"parameters": [
							{
								"deco": "w",
								"storageClass": [
									"out"
								],
								"name": "x"
							}
						],
						"name": "read",
						"comment": "ditto\n"
					},
					{
						"kind": "function",
						"line": 140,
						"storageClass": [
							"abstract"
						],
						"deco": "FJAaZv",
						"char": 8,
						"parameters": [
							{
								"deco": "Aa",
								"storageClass": [
									"out"
								],
								"name": "s"
							}
						],
						"name": "read",
						"comment": "ditto\n"
					},
					{
						"kind": "function",
						"line": 143,
						"storageClass": [
							"abstract"
						],
						"deco": "FJAuZv",
						"char": 8,
						"parameters": [
							{
								"deco": "Au",
								"storageClass": [
									"out"
								],
								"name": "s"
							}
						],
						"name": "read",
						"comment": "ditto\n"
					},
					{
						"kind": "function",
						"line": 153,
						"storageClass": [
							"abstract"
						],
						"deco": "FZAa",
						"char": 10,
						"name": "readLine",
						"comment": " Read a line that is terminated with some combination of carriage return and\n line feed or end-of-file.\n\n The terminators are not included. The wchar version\n is identical. The optional buffer parameter is filled (reallocating\n it if necessary) and a slice of the result is returned.\n"
					},
					{
						"kind": "function",
						"line": 154,
						"storageClass": [
							"abstract"
						],
						"deco": "FAaZAa",
						"char": 10,
						"parameters": [
							{
								"deco": "Aa",
								"name": "result"
							}
						],
						"name": "readLine",
						"comment": "ditto\n"
					},
					{
						"kind": "function",
						"line": 155,
						"storageClass": [
							"abstract"
						],
						"deco": "FZAu",
						"char": 11,
						"name": "readLineW",
						"comment": "ditto\n"
					},
					{
						"kind": "function",
						"line": 156,
						"storageClass": [
							"abstract"
						],
						"deco": "FAuZAu",
						"char": 11,
						"parameters": [
							{
								"deco": "Au",
								"name": "result"
							}
						],
						"name": "readLineW",
						"comment": "ditto\n"
					},
					{
						"kind": "function",
						"line": 178,
						"storageClass": [
							"abstract"
						],
						"deco": "FMDFKAaZiZi",
						"char": 7,
						"parameters": [
							{
								"deco": "DFKAaZi",
								"storageClass": [
									"scope"
								],
								"name": "dg"
							}
						],
						"name": "opApply",
						"comment": " Overload foreach statements to read the stream line by line and call the\n supplied delegate with each line or with each line with line number.\n\n The string passed in line may be reused between calls to the delegate.\n Line numbering starts at 1.\n Breaking out of the foreach will leave the stream\n position at the beginning of the next line to be read.\n For example, to echo a file line-by-line with line numbers run:\n ------------------------------------\n Stream file = new BufferedFile(\"sample.txt\");\n foreach(ulong n, char[] line; file)\n {\n     writefln(\"line %d: %s\", n, line);\n }\n file.close();\n ------------------------------------\n"
					},
					{
						"kind": "function",
						"line": 179,
						"storageClass": [
							"abstract"
						],
						"deco": "FMDFKmKAaZiZi",
						"char": 7,
						"parameters": [
							{
								"deco": "DFKmKAaZi",
								"storageClass": [
									"scope"
								],
								"name": "dg"
							}
						],
						"name": "opApply",
						"comment": "ditto\n"
					},
					{
						"kind": "function",
						"line": 180,
						"storageClass": [
							"abstract"
						],
						"deco": "FMDFKAuZiZi",
						"char": 7,
						"parameters": [
							{
								"deco": "DFKAuZi",
								"storageClass": [
									"scope"
								],
								"name": "dg"
							}
						],
						"name": "opApply",
						"comment": "ditto\n"
					},
					{
						"kind": "function",
						"line": 181,
						"storageClass": [
							"abstract"
						],
						"deco": "FMDFKmKAuZiZi",
						"char": 7,
						"parameters": [
							{
								"deco": "DFKmKAuZi",
								"storageClass": [
									"scope"
								],
								"name": "dg"
							}
						],
						"name": "opApply",
						"comment": "ditto\n"
					},
					{
						"kind": "function",
						"line": 185,
						"storageClass": [
							"abstract"
						],
						"deco": "FmZAa",
						"char": 10,
						"parameters": [
							{
								"deco": "m",
								"name": "length"
							}
						],
						"name": "readString",
						"comment": "Read a string of the given length,\n\nthrowing ReadException if there was a problem.\n",
						"originalType": "char[](size_t length)"
					},
					{
						"kind": "function",
						"line": 195,
						"storageClass": [
							"abstract"
						],
						"deco": "FmZAu",
						"char": 11,
						"parameters": [
							{
								"deco": "m",
								"name": "length"
							}
						],
						"name": "readStringW",
						"comment": " Read a string of the given length, throwing ReadException if there was a\n problem.\n\n The file format is implementation-specific and should not be used\n except as opposite actions to <b>write</b>.\n",
						"originalType": "wchar[](size_t length)"
					},
					{
						"kind": "function",
						"line": 206,
						"storageClass": [
							"abstract"
						],
						"deco": "FZa",
						"char": 8,
						"name": "getc",
						"comment": " Read and return the next character in the stream.\n\n This is the only method that will handle ungetc properly.\n getcw's format is implementation-specific.\n If EOF is reached then getc returns char.init and getcw returns wchar.init.\n"
					},
					{
						"kind": "function",
						"line": 207,
						"storageClass": [
							"abstract"
						],
						"deco": "FZu",
						"char": 9,
						"name": "getcw",
						"comment": "ditto\n"
					},
					{
						"kind": "function",
						"line": 215,
						"storageClass": [
							"abstract"
						],
						"deco": "FaZa",
						"char": 8,
						"parameters": [
							{
								"deco": "a",
								"name": "c"
							}
						],
						"name": "ungetc",
						"comment": " Push a character back onto the stream.\n\n They will be returned in first-in last-out order from getc/getcw.\n Only has effect on further calls to getc() and getcw().\n"
					},
					{
						"kind": "function",
						"line": 216,
						"storageClass": [
							"abstract"
						],
						"deco": "FuZu",
						"char": 9,
						"parameters": [
							{
								"deco": "u",
								"name": "c"
							}
						],
						"name": "ungetcw",
						"comment": "ditto\n"
					},
					{
						"kind": "function",
						"line": 238,
						"storageClass": [
							"abstract"
						],
						"deco": "FAC8TypeInfoPS4core4stdc6stdarg13__va_list_tagZi",
						"char": 7,
						"parameters": [
							{
								"deco": "AC8TypeInfo",
								"name": "arguments"
							},
							{
								"deco": "PS4core4stdc6stdarg13__va_list_tag",
								"name": "args"
							}
						],
						"name": "vreadf",
						"comment": " Scan a string from the input using a similar form to C's scanf\n and <a href=\"std_format.html\">std.format</a>.\n\n An argument of type string is interpreted as a format string.\n All other arguments must be pointer types.\n If a format string is not present a default will be supplied computed from\n the base type of the pointer type. An argument of type string* is filled\n (possibly with appending characters) and a slice of the result is assigned\n back into the argument. For example the following readf statements\n are equivalent:\n --------------------------\n int x;\n double y;\n string s;\n file.readf(&x, \" hello \", &y, &s);\n file.readf(\"%d hello %f %s\", &x, &y, &s);\n file.readf(\"%d hello %f\", &x, &y, \"%s\", &s);\n --------------------------\n",
						"originalType": "int(TypeInfo[] arguments, va_list args)"
					},
					{
						"kind": "function",
						"line": 239,
						"storageClass": [
							"abstract"
						],
						"deco": "FYi",
						"char": 7,
						"name": "readf",
						"comment": "ditto\n"
					},
					{
						"kind": "function",
						"line": 242,
						"storageClass": [
							"abstract"
						],
						"deco": "FNdZm",
						"char": 20,
						"name": "available",
						"comment": "Retrieve the number of bytes available for immediate reading.\n",
						"originalType": "@property size_t()"
					},
					{
						"kind": "function",
						"line": 253,
						"storageClass": [
							"abstract"
						],
						"deco": "FNdZb",
						"char": 18,
						"name": "eof",
						"comment": " Return whether the current file position is the same as the end of the\n file.\n\n This does not require actually reading past the end, as with stdio. For\n non-seekable streams this might only return true after attempting to read\n past the end.\n"
					},
					{
						"kind": "function",
						"line": 255,
						"storageClass": [
							"abstract"
						],
						"deco": "FNdZb",
						"char": 18,
						"name": "isOpen",
						"comment": "Return true if the stream is currently open.\n"
					}
				],
				"char": 1,
				"name": "InputStream",
				"comment": "InputStream is the interface for readable streams.\n"
			},
			{
				"kind": "interface",
				"line": 259,
				"members": [
					{
						"kind": "function",
						"line": 265,
						"storageClass": [
							"abstract"
						],
						"deco": "FxPvmZv",
						"char": 8,
						"parameters": [
							{
								"deco": "xPv",
								"name": "buffer"
							},
							{
								"deco": "m",
								"name": "size"
							}
						],
						"name": "writeExact",
						"comment": " Write exactly size bytes from buffer, or throw a WriteException if that\n could not be done.\n",
						"originalType": "void(const void* buffer, size_t size)"
					},
					{
						"kind": "function",
						"line": 271,
						"storageClass": [
							"abstract"
						],
						"deco": "FAxhZm",
						"char": 10,
						"parameters": [
							{
								"deco": "Axh",
								"name": "buffer"
							}
						],
						"name": "write",
						"comment": " Write as much of the buffer as possible,\n returning the number of bytes written.\n",
						"originalType": "size_t(const(ubyte)[] buffer)"
					},
					{
						"kind": "function",
						"line": 280,
						"storageClass": [
							"abstract"
						],
						"deco": "FgZv",
						"char": 8,
						"parameters": [
							{
								"deco": "g",
								"name": "x"
							}
						],
						"name": "write",
						"comment": " Write a basic type.\n\n Outside of byte, ubyte, and char, the format is implementation-specific\n and should only be used in conjunction with read.\n Throw WriteException on error.\n"
					},
					{
						"kind": "function",
						"line": 281,
						"storageClass": [
							"abstract"
						],
						"deco": "FhZv",
						"char": 8,
						"parameters": [
							{
								"deco": "h",
								"name": "x"
							}
						],
						"name": "write",
						"comment": "ditto\n"
					},
					{
						"kind": "function",
						"line": 282,
						"storageClass": [
							"abstract"
						],
						"deco": "FsZv",
						"char": 8,
						"parameters": [
							{
								"deco": "s",
								"name": "x"
							}
						],
						"name": "write",
						"comment": "ditto\n"
					},
					{
						"kind": "function",
						"line": 283,
						"storageClass": [
							"abstract"
						],
						"deco": "FtZv",
						"char": 8,
						"parameters": [
							{
								"deco": "t",
								"name": "x"
							}
						],
						"name": "write",
						"comment": "ditto\n"
					},
					{
						"kind": "function",
						"line": 284,
						"storageClass": [
							"abstract"
						],
						"deco": "FiZv",
						"char": 8,
						"parameters": [
							{
								"deco": "i",
								"name": "x"
							}
						],
						"name": "write",
						"comment": "ditto\n"
					},
					{
						"kind": "function",
						"line": 285,
						"storageClass": [
							"abstract"
						],
						"deco": "FkZv",
						"char": 8,
						"parameters": [
							{
								"deco": "k",
								"name": "x"
							}
						],
						"name": "write",
						"comment": "ditto\n"
					},
					{
						"kind": "function",
						"line": 286,
						"storageClass": [
							"abstract"
						],
						"deco": "FlZv",
						"char": 8,
						"parameters": [
							{
								"deco": "l",
								"name": "x"
							}
						],
						"name": "write",
						"comment": "ditto\n"
					},
					{
						"kind": "function",
						"line": 287,
						"storageClass": [
							"abstract"
						],
						"deco": "FmZv",
						"char": 8,
						"parameters": [
							{
								"deco": "m",
								"name": "x"
							}
						],
						"name": "write",
						"comment": "ditto\n"
					},
					{
						"kind": "function",
						"line": 288,
						"storageClass": [
							"abstract"
						],
						"deco": "FfZv",
						"char": 8,
						"parameters": [
							{
								"deco": "f",
								"name": "x"
							}
						],
						"name": "write",
						"comment": "ditto\n"
					},
					{
						"kind": "function",
						"line": 289,
						"storageClass": [
							"abstract"
						],
						"deco": "FdZv",
						"char": 8,
						"parameters": [
							{
								"deco": "d",
								"name": "x"
							}
						],
						"name": "write",
						"comment": "ditto\n"
					},
					{
						"kind": "function",
						"line": 290,
						"storageClass": [
							"abstract"
						],
						"deco": "FeZv",
						"char": 8,
						"parameters": [
							{
								"deco": "e",
								"name": "x"
							}
						],
						"name": "write",
						"comment": "ditto\n"
					},
					{
						"kind": "function",
						"line": 291,
						"storageClass": [
							"abstract"
						],
						"deco": "FoZv",
						"char": 8,
						"parameters": [
							{
								"deco": "o",
								"name": "x"
							}
						],
						"name": "write",
						"comment": "ditto\n"
					},
					{
						"kind": "function",
						"line": 292,
						"storageClass": [
							"abstract"
						],
						"deco": "FpZv",
						"char": 8,
						"parameters": [
							{
								"deco": "p",
								"name": "x"
							}
						],
						"name": "write",
						"comment": "ditto\n"
					},
					{
						"kind": "function",
						"line": 293,
						"storageClass": [
							"abstract"
						],
						"deco": "FjZv",
						"char": 8,
						"parameters": [
							{
								"deco": "j",
								"name": "x"
							}
						],
						"name": "write",
						"comment": "ditto\n"
					},
					{
						"kind": "function",
						"line": 294,
						"storageClass": [
							"abstract"
						],
						"deco": "FqZv",
						"char": 8,
						"parameters": [
							{
								"deco": "q",
								"name": "x"
							}
						],
						"name": "write",
						"comment": "ditto\n"
					},
					{
						"kind": "function",
						"line": 295,
						"storageClass": [
							"abstract"
						],
						"deco": "FrZv",
						"char": 8,
						"parameters": [
							{
								"deco": "r",
								"name": "x"
							}
						],
						"name": "write",
						"comment": "ditto\n"
					},
					{
						"kind": "function",
						"line": 296,
						"storageClass": [
							"abstract"
						],
						"deco": "FcZv",
						"char": 8,
						"parameters": [
							{
								"deco": "c",
								"name": "x"
							}
						],
						"name": "write",
						"comment": "ditto\n"
					},
					{
						"kind": "function",
						"line": 297,
						"storageClass": [
							"abstract"
						],
						"deco": "FaZv",
						"char": 8,
						"parameters": [
							{
								"deco": "a",
								"name": "x"
							}
						],
						"name": "write",
						"comment": "ditto\n"
					},
					{
						"kind": "function",
						"line": 298,
						"storageClass": [
							"abstract"
						],
						"deco": "FuZv",
						"char": 8,
						"parameters": [
							{
								"deco": "u",
								"name": "x"
							}
						],
						"name": "write",
						"comment": "ditto\n"
					},
					{
						"kind": "function",
						"line": 299,
						"storageClass": [
							"abstract"
						],
						"deco": "FwZv",
						"char": 8,
						"parameters": [
							{
								"deco": "w",
								"name": "x"
							}
						],
						"name": "write",
						"comment": "ditto\n"
					},
					{
						"kind": "function",
						"line": 308,
						"storageClass": [
							"abstract"
						],
						"deco": "FAxaZv",
						"char": 10,
						"parameters": [
							{
								"deco": "Axa",
								"name": "s"
							}
						],
						"name": "write",
						"comment": " Writes a string, together with its length.\n\n The format is implementation-specific\n and should only be used in conjunction with read.\n Throw WriteException on error.\n"
					},
					{
						"kind": "function",
						"line": 309,
						"storageClass": [
							"abstract"
						],
						"deco": "FAxuZv",
						"char": 10,
						"parameters": [
							{
								"deco": "Axu",
								"name": "s"
							}
						],
						"name": "write",
						"comment": "ditto\n"
					},
					{
						"kind": "function",
						"line": 317,
						"storageClass": [
							"abstract"
						],
						"deco": "FAxaZv",
						"char": 8,
						"parameters": [
							{
								"deco": "Axa",
								"name": "s"
							}
						],
						"name": "writeLine",
						"comment": " Write a line of text,\n appending the line with an operating-system-specific line ending.\n\n Throws WriteException on error.\n"
					},
					{
						"kind": "function",
						"line": 326,
						"storageClass": [
							"abstract"
						],
						"deco": "FAxuZv",
						"char": 10,
						"parameters": [
							{
								"deco": "Axu",
								"name": "s"
							}
						],
						"name": "writeLineW",
						"comment": " Write a line of text,\n appending the line with an operating-system-specific line ending.\n\n The format is implementation-specific.\n Throws WriteException on error.\n"
					},
					{
						"kind": "function",
						"line": 333,
						"storageClass": [
							"abstract"
						],
						"deco": "FAxaZv",
						"char": 10,
						"parameters": [
							{
								"deco": "Axa",
								"name": "s"
							}
						],
						"name": "writeString",
						"comment": " Write a string of text.\n\n Throws WriteException if it could not be fully written.\n"
					},
					{
						"kind": "function",
						"line": 341,
						"storageClass": [
							"abstract"
						],
						"deco": "FAxuZv",
						"char": 8,
						"parameters": [
							{
								"deco": "Axu",
								"name": "s"
							}
						],
						"name": "writeStringW",
						"comment": " Write a string of text.\n\n The format is implementation-specific.\n Throws WriteException if it could not be fully written.\n"
					},
					{
						"kind": "function",
						"line": 347,
						"storageClass": [
							"abstract"
						],
						"deco": "FAxaPS4core4stdc6stdarg13__va_list_tagZm",
						"char": 10,
						"parameters": [
							{
								"deco": "Axa",
								"name": "format"
							},
							{
								"deco": "PS4core4stdc6stdarg13__va_list_tag",
								"name": "args"
							}
						],
						"name": "vprintf",
						"comment": " Print a formatted string into the stream using printf-style syntax,\n returning the number of bytes written.\n",
						"originalType": "size_t(const(char)[] format, va_list args)"
					},
					{
						"kind": "function",
						"line": 348,
						"storageClass": [
							"abstract"
						],
						"deco": "FAxaYm",
						"char": 10,
						"parameters": [
							{
								"deco": "Axa",
								"name": "format"
							}
						],
						"name": "printf",
						"comment": "ditto\n",
						"originalType": "size_t(const(char)[] format, ...)"
					},
					{
						"kind": "function",
						"line": 355,
						"storageClass": [
							"abstract"
						],
						"deco": "FYC3std6stream12OutputStream",
						"char": 16,
						"name": "writef",
						"comment": " Print a formatted string into the stream using writef-style syntax.\n References: <a href=\"std_format.html\">std.format</a>.\n Returns: self to chain with other stream commands like flush.\n"
					},
					{
						"kind": "function",
						"line": 356,
						"storageClass": [
							"abstract"
						],
						"deco": "FYC3std6stream12OutputStream",
						"char": 16,
						"name": "writefln",
						"comment": "ditto\n"
					},
					{
						"kind": "function",
						"line": 357,
						"storageClass": [
							"abstract"
						],
						"deco": "FAC8TypeInfoPS4core4stdc6stdarg13__va_list_tagiZC3std6stream12OutputStream",
						"char": 16,
						"parameters": [
							{
								"deco": "AC8TypeInfo",
								"name": "arguments"
							},
							{
								"deco": "PS4core4stdc6stdarg13__va_list_tag",
								"name": "argptr"
							},
							{
								"deco": "i",
								"default": "0",
								"name": "newline"
							}
						],
						"name": "writefx",
						"comment": "ditto\n",
						"originalType": "OutputStream(TypeInfo[] arguments, va_list argptr, int newline = false)"
					},
					{
						"kind": "function",
						"line": 359,
						"storageClass": [
							"abstract"
						],
						"deco": "FZv",
						"char": 8,
						"name": "flush",
						"comment": "Flush pending output if appropriate.\n"
					},
					{
						"kind": "function",
						"line": 360,
						"storageClass": [
							"abstract"
						],
						"deco": "FZv",
						"char": 8,
						"name": "close",
						"comment": "Close the stream, flushing output if appropriate.\n"
					},
					{
						"kind": "function",
						"line": 361,
						"storageClass": [
							"abstract"
						],
						"deco": "FNdZb",
						"char": 18,
						"name": "isOpen",
						"comment": "Return true if the stream is currently open.\n"
					}
				],
				"char": 1,
				"name": "OutputStream",
				"comment": "Interface for writable streams.\n"
			},
			{
				"kind": "class",
				"line": 391,
				"members": [
					{
						"kind": "variable",
						"line": 395,
						"init": "false",
						"deco": "b",
						"char": 8,
						"name": "readable",
						"comment": "Indicates whether this stream can be read from.\n",
						"offset": 16
					},
					{
						"kind": "variable",
						"line": 396,
						"init": "false",
						"deco": "b",
						"char": 8,
						"name": "writeable",
						"comment": "Indicates whether this stream can be written to.\n",
						"offset": 17
					},
					{
						"kind": "variable",
						"line": 397,
						"init": "false",
						"deco": "b",
						"char": 8,
						"name": "seekable",
						"comment": "Indicates whether this stream can be seeked within.\n",
						"offset": 18
					},
					{
						"kind": "variable",
						"line": 398,
						"init": "true",
						"protection": "protected",
						"deco": "b",
						"char": 18,
						"name": "isopen",
						"comment": "Indicates whether this stream is open.\n",
						"offset": 19
					},
					{
						"kind": "variable",
						"line": 400,
						"init": "false",
						"protection": "protected",
						"deco": "b",
						"char": 18,
						"name": "readEOF",
						"comment": " Indicates whether this stream is at eof\n after the last read attempt.\n",
						"offset": 20
					},
					{
						"kind": "variable",
						"line": 404,
						"init": "false",
						"protection": "protected",
						"deco": "b",
						"char": 18,
						"name": "prevCr",
						"comment": " For a non-seekable stream indicates that\n the last readLine or readLineW ended on a\n '\\r' character.\n",
						"offset": 21
					},
					{
						"kind": "function",
						"line": 415,
						"storageClass": [
							"abstract"
						],
						"deco": "FPvmZm",
						"char": 19,
						"parameters": [
							{
								"deco": "Pv",
								"name": "buffer"
							},
							{
								"deco": "m",
								"name": "size"
							}
						],
						"name": "readBlock",
						"comment": " Read up to size bytes into the buffer and return the number of bytes\n actually read. A return value of 0 indicates end-of-file.\n",
						"originalType": "size_t(void* buffer, size_t size)"
					},
					{
						"kind": "function",
						"line": 1080,
						"storageClass": [
							"abstract"
						],
						"deco": "FxPvmZm",
						"char": 19,
						"parameters": [
							{
								"deco": "xPv",
								"name": "buffer"
							},
							{
								"deco": "m",
								"name": "size"
							}
						],
						"name": "writeBlock",
						"comment": " Write up to size bytes from buffer in the stream, returning the actual\n number of bytes that were written.\n",
						"originalType": "size_t(const void* buffer, size_t size)"
					},
					{
						"kind": "function",
						"line": 1244,
						"deco": "FC3std6stream6StreamZv",
						"endchar": 3,
						"char": 8,
						"parameters": [
							{
								"deco": "C3std6stream6Stream",
								"name": "s"
							}
						],
						"name": "copyFrom",
						"comment": " Copies all data from s into this stream.\n This may throw ReadException or WriteException on failure.\n This restores the file position of s so that it is unchanged.\n",
						"endline": 1257
					},
					{
						"kind": "function",
						"line": 1264,
						"deco": "FC3std6stream6StreammZv",
						"endchar": 3,
						"char": 8,
						"parameters": [
							{
								"deco": "C3std6stream6Stream",
								"name": "s"
							},
							{
								"deco": "m",
								"name": "count"
							}
						],
						"name": "copyFrom",
						"comment": " Copy a specified number of bytes from the given stream into this one.\n This may throw ReadException or WriteException on failure.\n Unlike the previous form, this doesn't restore the file position of s.\n",
						"endline": 1272
					},
					{
						"kind": "function",
						"line": 1282,
						"storageClass": [
							"abstract"
						],
						"deco": "FlE3std6stream7SeekPosZm",
						"char": 18,
						"parameters": [
							{
								"deco": "l",
								"name": "offset"
							},
							{
								"deco": "E3std6stream7SeekPos",
								"name": "whence"
							}
						],
						"name": "seek",
						"comment": " Change the current position of the stream. whence is either SeekPos.Set, in\n   which case the offset is an absolute index from the beginning of the stream,\n   SeekPos.Current, in which case the offset is a delta from the current\n   position, or SeekPos.End, in which case the offset is a delta from the end of\n   the stream (negative or zero offsets only make sense in that case). This\n   returns the new file position.\n"
					},
					{
						"kind": "function",
						"line": 1287,
						"deco": "FlZm",
						"endchar": 67,
						"char": 9,
						"parameters": [
							{
								"deco": "l",
								"name": "offset"
							}
						],
						"name": "seekSet",
						"comment": " Aliases for their normal seek counterparts.\n",
						"endline": 1287
					},
					{
						"kind": "function",
						"line": 1288,
						"deco": "FlZm",
						"endchar": 71,
						"char": 9,
						"parameters": [
							{
								"deco": "l",
								"name": "offset"
							}
						],
						"name": "seekCur",
						"comment": "ditto\n",
						"endline": 1288
					},
					{
						"kind": "function",
						"line": 1289,
						"deco": "FlZm",
						"endchar": 67,
						"char": 9,
						"parameters": [
							{
								"deco": "l",
								"name": "offset"
							}
						],
						"name": "seekEnd",
						"comment": "ditto\n",
						"endline": 1289
					},
					{
						"kind": "function",
						"line": 1294,
						"deco": "FNdmZv",
						"endchar": 74,
						"char": 18,
						"parameters": [
							{
								"deco": "m",
								"name": "pos"
							}
						],
						"name": "position",
						"comment": " Sets file position. Equivalent to calling seek(pos, SeekPos.Set).\n",
						"endline": 1294
					},
					{
						"kind": "function",
						"line": 1299,
						"deco": "FNdZm",
						"endchar": 65,
						"char": 19,
						"name": "position",
						"comment": " Returns current file position. Equivalent to seek(0, SeekPos.Current).\n",
						"endline": 1299
					},
					{
						"kind": "function",
						"line": 1305,
						"deco": "FNdZm",
						"endchar": 3,
						"char": 19,
						"name": "size",
						"comment": " Retrieve the size of the stream in bytes.\n The stream must be seekable or a SeekException is thrown.\n",
						"endline": 1310
					},
					{
						"kind": "function",
						"line": 1344,
						"storageClass": [
							"override"
						],
						"deco": "FZAya",
						"endchar": 3,
						"char": 19,
						"name": "toString",
						"comment": " Read the entire stream and return it as a string.\n If the stream is not seekable the contents from the current position to eof\n is read and returned.\n",
						"endline": 1379,
						"overrides": [
							"object.Object.toString"
						]
					},
					{
						"kind": "function",
						"line": 1385,
						"storageClass": [
							"override"
						],
						"deco": "FNbNeZm",
						"endchar": 3,
						"char": 19,
						"name": "toHash",
						"comment": " Get a hash of the stream by reading each byte and using it in a CRC-32\n checksum.\n",
						"originalType": "@trusted size_t()",
						"endline": 1416,
						"overrides": [
							"object.Object.toHash"
						]
					}
				],
				"char": 1,
				"interfaces": [
					"std.stream.InputStream",
					"std.stream.OutputStream"
				],
				"name": "Stream",
				"comment": " Stream is the base abstract class from which the other stream classes derive.\n\n Stream's byte order is the format native to the computer.\n\n Reading:\n These methods require that the readable flag be set.\n Problems with reading result in a ReadException being thrown.\n Stream implements the InputStream interface in addition to the\n readBlock method.\n\n Writing:\n These methods require that the writeable flag be set. Problems with writing\n result in a WriteException being thrown. Stream implements the OutputStream\n interface in addition to the following methods:\n writeBlock\n copyFrom\n copyFrom\n\n Seeking:\n These methods require that the seekable flag be set.\n Problems with seeking result in a SeekException being thrown.\n seek, seekSet, seekCur, seekEnd, position, size, toString, toHash\n"
			},
			{
				"kind": "class",
				"line": 1504,
				"base": "std.stream.Stream",
				"members": [
					{
						"kind": "variable",
						"line": 1510,
						"init": "true",
						"deco": "b",
						"char": 8,
						"name": "nestClose",
						"comment": "Property indicating when this stream closes to close the source stream as\n\nwell.\n\nDefaults to true.\n",
						"offset": 64
					},
					{
						"kind": "constructor",
						"line": 1513,
						"deco": "FC3std6stream6StreamZC3std6stream12FilterStream",
						"endchar": 3,
						"char": 3,
						"parameters": [
							{
								"deco": "C3std6stream6Stream",
								"name": "source"
							}
						],
						"name": "this",
						"comment": "Construct a FilterStream for the given source.\n",
						"originalType": "(Stream source)",
						"endline": 1516
					},
					{
						"kind": "function",
						"line": 1523,
						"storageClass": [
							"final"
						],
						"deco": "FZC3std6stream6Stream",
						"endchar": 34,
						"char": 16,
						"name": "source",
						"comment": " Get the current source stream.\n",
						"endline": 1523
					},
					{
						"kind": "function",
						"line": 1532,
						"deco": "FC3std6stream6StreamZv",
						"endchar": 3,
						"char": 8,
						"parameters": [
							{
								"deco": "C3std6stream6Stream",
								"name": "s"
							}
						],
						"name": "source",
						"comment": " Set the current source stream.\n\n Setting the source stream closes this stream before attaching the new\n source. Attaching an open stream reopens this stream and resets the stream\n state.\n",
						"endline": 1536
					},
					{
						"kind": "function",
						"line": 1542,
						"deco": "FZv",
						"endchar": 3,
						"char": 8,
						"name": "resetSource",
						"comment": " Indicates the source stream changed state and that this stream should reset\n any readable, writeable, seekable, isopen and buffering flags.\n",
						"endline": 1553
					}
				],
				"char": 1,
				"name": "FilterStream",
				"comment": " A base class for streams that wrap a source stream with additional\n functionality.\n\n The method implementations forward read/write/seek calls to the\n source stream. A FilterStream can change the position of the source stream\n arbitrarily and may not keep the source stream state in sync with the\n FilterStream, even upon flushing and closing the FilterStream. It is\n recommended to not make any assumptions about the state of the source position\n and read/write state after a FilterStream has acted upon it. Specifc subclasses\n of FilterStream should document how they modify the source stream and if any\n invariants hold true between the source and filter.\n"
			},
			{
				"kind": "class",
				"line": 1595,
				"base": "std.stream.FilterStream",
				"members": [
					{
						"kind": "constructor",
						"line": 1625,
						"deco": "FC3std6stream6StreammZC3std6stream14BufferedStream",
						"endchar": 3,
						"char": 3,
						"parameters": [
							{
								"deco": "C3std6stream6Stream",
								"name": "source"
							},
							{
								"deco": "m",
								"default": "8192LU",
								"name": "bufferSize"
							}
						],
						"name": "this",
						"comment": " Create a buffered stream for the stream source with the buffer size\n bufferSize.\n",
						"originalType": "(Stream source, size_t bufferSize = DefaultBufferSize)",
						"endline": 1629
					}
				],
				"char": 1,
				"name": "BufferedStream",
				"comment": " This subclass is for buffering a source stream.\n\n A buffered stream must be\n closed explicitly to ensure the final buffer content is written to the source\n stream. The source stream position is changed according to the block size so\n reading or writing to the BufferedStream may not change the source stream\n position by the same amount.\n"
			},
			{
				"kind": "class",
				"line": 1884,
				"base": "std.stream.StreamException",
				"members": [
					{
						"kind": "constructor",
						"line": 1886,
						"deco": "FAyaZC3std6stream19StreamFileException",
						"endchar": 34,
						"char": 3,
						"parameters": [
							{
								"deco": "Aya",
								"name": "msg"
							}
						],
						"name": "this",
						"comment": "Construct a StreamFileException with given error message.\n",
						"originalType": "(string msg)",
						"endline": 1886
					}
				],
				"char": 1,
				"name": "StreamFileException",
				"comment": "An exception for File errors.\n"
			},
			{
				"kind": "class",
				"line": 1890,
				"base": "std.stream.StreamFileException",
				"members": [
					{
						"kind": "constructor",
						"line": 1892,
						"deco": "FAyaZC3std6stream13OpenException",
						"endchar": 34,
						"char": 3,
						"parameters": [
							{
								"deco": "Aya",
								"name": "msg"
							}
						],
						"name": "this",
						"comment": "Construct an OpenFileException with given error message.\n",
						"originalType": "(string msg)",
						"endline": 1892
					}
				],
				"char": 1,
				"name": "OpenException",
				"comment": "An exception for errors during File.open.\n"
			},
			{
				"kind": "enum",
				"line": 1896,
				"members": [
					{
						"kind": "enum member",
						"line": 1897,
						"value": "1",
						"char": 3,
						"name": "In",
						"comment": "Opens the file for reading.\n"
					},
					{
						"kind": "enum member",
						"line": 1898,
						"value": "2",
						"char": 3,
						"name": "Out",
						"comment": "Opens the file for writing.\n"
					},
					{
						"kind": "enum member",
						"line": 1899,
						"value": "6",
						"char": 3,
						"name": "OutNew",
						"comment": "Opens the file for writing, creates a new file if it doesn't exist.\n"
					},
					{
						"kind": "enum member",
						"line": 1900,
						"value": "10",
						"char": 3,
						"name": "Append",
						"comment": "Opens the file for writing, appending new data to the end of the file.\n"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "FileMode",
				"comment": "Specifies the $(LREF File) access mode used when opening the file.\n"
			},
			{
				"kind": "class",
				"line": 1917,
				"base": "std.stream.Stream",
				"members": [
					{
						"kind": "constructor",
						"line": 1964,
						"deco": "FAyaE3std6stream8FileModeZC3std6stream4File",
						"endchar": 3,
						"char": 3,
						"parameters": [
							{
								"deco": "Aya",
								"name": "filename"
							},
							{
								"deco": "E3std6stream8FileMode",
								"default": "cast(FileMode)1",
								"name": "mode"
							}
						],
						"name": "this",
						"comment": " Create the stream with no open file, an open file in read mode, or an open\n file with explicit file mode.\n mode, if given, is a combination of FileMode.In\n (indicating a file that can be read) and FileMode.Out (indicating a file\n that can be written).\n Opening a file for reading that doesn't exist will error.\n Opening a file for writing that doesn't exist will create the file.\n The FileMode.OutNew mode will open the file for writing and reset the\n length to zero.\n The FileMode.Append mode will open the file for writing and move the\n file position to the end of the file.\n",
						"originalType": "(string filename, FileMode mode = FileMode.In)",
						"endline": 1968
					},
					{
						"kind": "function",
						"line": 1975,
						"deco": "FAyaE3std6stream8FileModeZv",
						"endchar": 3,
						"char": 8,
						"parameters": [
							{
								"deco": "Aya",
								"name": "filename"
							},
							{
								"deco": "E3std6stream8FileMode",
								"default": "cast(FileMode)1",
								"name": "mode"
							}
						],
						"name": "open",
						"comment": " Open a file for the stream, in an identical manner to the constructors.\n If an error occurs an OpenException is thrown.\n",
						"originalType": "void(string filename, FileMode mode = FileMode.In)",
						"endline": 1996
					},
					{
						"kind": "function",
						"line": 2035,
						"deco": "FAyaZv",
						"endchar": 3,
						"char": 8,
						"parameters": [
							{
								"deco": "Aya",
								"name": "filename"
							}
						],
						"name": "create",
						"comment": "Create a file for writing.\n",
						"endline": 2037
					},
					{
						"kind": "function",
						"line": 2040,
						"deco": "FAyaE3std6stream8FileModeZv",
						"endchar": 3,
						"char": 8,
						"parameters": [
							{
								"deco": "Aya",
								"name": "filename"
							},
							{
								"deco": "E3std6stream8FileMode",
								"name": "mode"
							}
						],
						"name": "create",
						"comment": "ditto\n",
						"endline": 2043
					},
					{
						"kind": "function",
						"line": 2046,
						"storageClass": [
							"override"
						],
						"deco": "FZv",
						"endchar": 3,
						"char": 17,
						"name": "close",
						"comment": "Close the current file if it is open; otherwise it does nothing.\n",
						"endline": 2059,
						"overrides": [
							"std.stream.Stream.close"
						]
					},
					{
						"kind": "function",
						"line": 2125,
						"storageClass": [
							"override"
						],
						"deco": "FNdZm",
						"endchar": 3,
						"char": 29,
						"name": "available",
						"comment": " For a seekable file returns the difference of the size and position and\n otherwise returns 0.\n",
						"originalType": "@property size_t()",
						"endline": 2132,
						"overrides": [
							"std.stream.Stream.available"
						]
					}
				],
				"char": 1,
				"name": "File",
				"comment": "This subclass is for unbuffered file system streams.\n"
			},
			{
				"kind": "class",
				"line": 2223,
				"base": "std.stream.BufferedStream",
				"members": [
					{
						"kind": "constructor",
						"line": 2226,
						"deco": "FZC3std6stream12BufferedFile",
						"endchar": 31,
						"char": 3,
						"name": "this",
						"comment": "opens file for reading\n",
						"originalType": "()",
						"endline": 2226
					},
					{
						"kind": "constructor",
						"line": 2229,
						"deco": "FAyaE3std6stream8FileModemZC3std6stream12BufferedFile",
						"endchar": 3,
						"char": 3,
						"parameters": [
							{
								"deco": "Aya",
								"name": "filename"
							},
							{
								"deco": "E3std6stream8FileMode",
								"default": "cast(FileMode)1",
								"name": "mode"
							},
							{
								"deco": "m",
								"default": "8192LU",
								"name": "bufferSize"
							}
						],
						"name": "this",
						"comment": "opens file in requested mode and buffer size\n",
						"originalType": "(string filename, FileMode mode = FileMode.In, size_t bufferSize = DefaultBufferSize)",
						"endline": 2232
					},
					{
						"kind": "constructor",
						"line": 2235,
						"deco": "FC3std6stream4FilemZC3std6stream12BufferedFile",
						"endchar": 3,
						"char": 3,
						"parameters": [
							{
								"deco": "C3std6stream4File",
								"name": "file"
							},
							{
								"deco": "m",
								"default": "8192LU",
								"name": "bufferSize"
							}
						],
						"name": "this",
						"comment": "opens file for reading with requested buffer size\n",
						"originalType": "(File file, size_t bufferSize = DefaultBufferSize)",
						"endline": 2237
					},
					{
						"kind": "constructor",
						"line": 2240,
						"deco": "FiE3std6stream8FileModemZC3std6stream12BufferedFile",
						"endchar": 3,
						"char": 3,
						"parameters": [
							{
								"deco": "i",
								"name": "hFile"
							},
							{
								"deco": "E3std6stream8FileMode",
								"name": "mode"
							},
							{
								"deco": "m",
								"default": "8192LU",
								"name": "buffersize"
							}
						],
						"name": "this",
						"comment": "opens existing handle; use with care!\n",
						"originalType": "(HANDLE hFile, FileMode mode, size_t buffersize = DefaultBufferSize)",
						"endline": 2242
					},
					{
						"kind": "function",
						"line": 2245,
						"deco": "FAyaE3std6stream8FileModeZv",
						"endchar": 3,
						"char": 8,
						"parameters": [
							{
								"deco": "Aya",
								"name": "filename"
							},
							{
								"deco": "E3std6stream8FileMode",
								"default": "cast(FileMode)1",
								"name": "mode"
							}
						],
						"name": "open",
						"comment": "opens file in requested mode\n",
						"originalType": "void(string filename, FileMode mode = FileMode.In)",
						"endline": 2249
					},
					{
						"kind": "function",
						"line": 2252,
						"deco": "FAyaE3std6stream8FileModeZv",
						"endchar": 3,
						"char": 8,
						"parameters": [
							{
								"deco": "Aya",
								"name": "filename"
							},
							{
								"deco": "E3std6stream8FileMode",
								"default": "cast(FileMode)6",
								"name": "mode"
							}
						],
						"name": "create",
						"comment": "creates file in requested mode\n",
						"originalType": "void(string filename, FileMode mode = FileMode.OutNew)",
						"endline": 2256
					}
				],
				"char": 1,
				"name": "BufferedFile",
				"comment": " This subclass is for buffered file system streams.\n\n It is a convenience class for wrapping a File in a BufferedStream.\n A buffered stream must be closed explicitly to ensure the final buffer\n content is written to the file.\n"
			},
			{
				"kind": "enum",
				"line": 2313,
				"members": [
					{
						"kind": "enum member",
						"line": 2314,
						"value": "0",
						"char": 9,
						"name": "UTF8",
						"comment": "UTF-8\n"
					},
					{
						"kind": "enum member",
						"line": 2315,
						"value": "1",
						"char": 9,
						"name": "UTF16LE",
						"comment": "UTF-16 Little Endian\n"
					},
					{
						"kind": "enum member",
						"line": 2316,
						"value": "2",
						"char": 9,
						"name": "UTF16BE",
						"comment": "UTF-16 Big Endian\n"
					},
					{
						"kind": "enum member",
						"line": 2317,
						"value": "3",
						"char": 9,
						"name": "UTF32LE",
						"comment": "UTF-32 Little Endian\n"
					},
					{
						"kind": "enum member",
						"line": 2318,
						"value": "4",
						"char": 9,
						"name": "UTF32BE",
						"comment": "UTF-32 Big Endian\n"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "BOM",
				"comment": "UTF byte-order-mark signatures\n"
			},
			{
				"kind": "class",
				"line": 2351,
				"base": "std.stream.FilterStream",
				"members": [
					{
						"kind": "variable",
						"line": 2353,
						"deco": "E3std6system6Endian",
						"char": 10,
						"name": "endian",
						"comment": "Endianness property of the source stream.\n",
						"offset": 68
					},
					{
						"kind": "constructor",
						"line": 2361,
						"deco": "FC3std6stream6StreamE3std6system6EndianZC3std6stream12EndianStream",
						"endchar": 3,
						"char": 3,
						"parameters": [
							{
								"deco": "C3std6stream6Stream",
								"name": "source"
							},
							{
								"deco": "E3std6system6Endian",
								"default": "cast(Endian)1",
								"name": "end"
							}
						],
						"name": "this",
						"comment": " Create the endian stream for the source stream source with endianness end.\n The default endianness is the native byte order.\n The Endian type is defined\n in the std.system module.\n",
						"originalType": "(Stream source, Endian end = std.system.endian)",
						"endline": 2364
					},
					{
						"kind": "function",
						"line": 2374,
						"deco": "FiZi",
						"endchar": 3,
						"char": 7,
						"parameters": [
							{
								"deco": "i",
								"default": "1",
								"name": "ungetCharSize"
							}
						],
						"name": "readBOM",
						"comment": " Return -1 if no BOM and otherwise read the BOM and return it.\n\n If there is no BOM or if bytes beyond the BOM are read then the bytes read\n are pushed back onto the ungetc buffer or ungetcw buffer.\n Pass ungetCharSize == 2 to use\n ungetcw instead of ungetc when no BOM is present.\n",
						"endline": 2412
					},
					{
						"kind": "function",
						"line": 2418,
						"storageClass": [
							"final"
						],
						"deco": "FPxvmZv",
						"endchar": 3,
						"char": 14,
						"parameters": [
							{
								"deco": "Pxv",
								"name": "buffer"
							},
							{
								"deco": "m",
								"name": "size"
							}
						],
						"name": "fixBO",
						"comment": " Correct the byte order of buffer to match native endianness.\n size must be even.\n",
						"originalType": "void(const(void)* buffer, size_t size)",
						"endline": 2451
					},
					{
						"kind": "function",
						"line": 2458,
						"storageClass": [
							"final"
						],
						"deco": "FPvkmZv",
						"endchar": 3,
						"char": 14,
						"parameters": [
							{
								"deco": "Pv",
								"name": "buffer"
							},
							{
								"deco": "k",
								"name": "size"
							},
							{
								"deco": "m",
								"name": "repeat"
							}
						],
						"name": "fixBlockBO",
						"comment": " Correct the byte order of the given buffer in blocks of the given size and\n repeated the given number of times.\n size must be even.\n",
						"originalType": "void(void* buffer, uint size, size_t repeat)",
						"endline": 2463
					},
					{
						"kind": "function",
						"line": 2515,
						"deco": "FE3std6stream3BOMZv",
						"endchar": 3,
						"char": 8,
						"parameters": [
							{
								"deco": "E3std6stream3BOM",
								"name": "b"
							}
						],
						"name": "writeBOM",
						"comment": "Write the specified BOM b to the source stream.\n",
						"endline": 2518
					}
				],
				"char": 1,
				"name": "EndianStream",
				"comment": " This subclass wraps a stream with big-endian or little-endian byte order\n swapping.\n\n UTF Byte-Order-Mark (BOM) signatures can be read and deduced or\n written.\n Note that an EndianStream should not be used as the source of another\n FilterStream since a FilterStream call the source with byte-oriented\n read/write requests and the EndianStream will not perform any byte swapping.\n The EndianStream reads and writes binary data (non-getc functions) in a\n one-to-one\n manner with the source stream so the source stream's position and state will be\n kept in sync with the EndianStream if only non-getc functions are called.\n"
			},
			{
				"kind": "template",
				"line": 2644,
				"members": [
					{
						"kind": "class",
						"line": 2644,
						"members": [
							{
								"kind": "constructor",
								"line": 2650,
								"endchar": 3,
								"char": 3,
								"type": "(Buffer buf)",
								"parameters": [
									{
										"type": "Buffer",
										"name": "buf"
									}
								],
								"name": "this",
								"comment": "Create the stream for the the buffer buf. Non-copying.\n",
								"endline": 2655
							},
							{
								"kind": "function",
								"line": 2713,
								"endchar": 3,
								"char": 21,
								"type": "@property ubyte[]()",
								"name": "data",
								"comment": "Get the current memory data in total.\n",
								"endline": 2718
							}
						],
						"char": 1,
						"name": "TArrayStream"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "Buffer"
					}
				],
				"comment": " Parameterized subclass that wraps an array-like buffer with a stream\n interface.\n\n The type Buffer must support the length property, opIndex and opSlice.\n Compile in release mode when directly instantiating a TArrayStream to avoid\n link errors.\n",
				"name": "TArrayStream"
			},
			{
				"kind": "class",
				"line": 2756,
				"base": "std.stream.TArrayStream!(ubyte[]).TArrayStream",
				"members": [
					{
						"kind": "constructor",
						"line": 2760,
						"deco": "FZC3std6stream12MemoryStream",
						"endchar": 38,
						"char": 3,
						"name": "this",
						"comment": "Create the output buffer and setup for reading, writing, and seeking.\n",
						"originalType": "()",
						"endline": 2760
					},
					{
						"kind": "constructor",
						"line": 2766,
						"deco": "FAhZC3std6stream12MemoryStream",
						"endchar": 36,
						"char": 3,
						"parameters": [
							{
								"deco": "Ah",
								"name": "buf"
							}
						],
						"name": "this",
						"comment": " Create the output buffer and setup for reading, writing, and seeking.\n Load it with specific input data.\n",
						"originalType": "(ubyte[] buf)",
						"endline": 2766
					},
					{
						"kind": "constructor",
						"line": 2767,
						"deco": "FAgZC3std6stream12MemoryStream",
						"endchar": 47,
						"char": 3,
						"parameters": [
							{
								"deco": "Ag",
								"name": "buf"
							}
						],
						"name": "this",
						"comment": "ditto\n",
						"originalType": "(byte[] buf)",
						"endline": 2767
					},
					{
						"kind": "constructor",
						"line": 2768,
						"deco": "FAaZC3std6stream12MemoryStream",
						"endchar": 47,
						"char": 3,
						"parameters": [
							{
								"deco": "Aa",
								"name": "buf"
							}
						],
						"name": "this",
						"comment": "ditto\n",
						"originalType": "(char[] buf)",
						"endline": 2768
					},
					{
						"kind": "function",
						"line": 2771,
						"deco": "FmZv",
						"endchar": 3,
						"char": 8,
						"parameters": [
							{
								"deco": "m",
								"name": "count"
							}
						],
						"name": "reserve",
						"comment": "Ensure the stream can write count extra bytes from cursor position without an allocation.\n",
						"originalType": "void(size_t count)",
						"endline": 2774
					}
				],
				"char": 1,
				"name": "MemoryStream",
				"comment": "This subclass reads and constructs an array of bytes in memory.\n"
			},
			{
				"kind": "class",
				"line": 2833,
				"base": "std.stream.TArrayStream!(std.mmfile.MmFile).TArrayStream",
				"members": [
					{
						"kind": "constructor",
						"line": 2836,
						"deco": "FC3std6mmfile6MmFileZC3std6stream12MmFileStream",
						"endchar": 3,
						"char": 3,
						"parameters": [
							{
								"deco": "C3std6mmfile6MmFile",
								"name": "file"
							}
						],
						"name": "this",
						"comment": "Create stream wrapper for file.\n",
						"originalType": "(MmFile file)",
						"endline": 2840
					}
				],
				"char": 1,
				"name": "MmFileStream",
				"comment": " This subclass wraps a memory-mapped file with the stream API.\n See std.mmfile module.\n"
			},
			{
				"kind": "class",
				"line": 2899,
				"base": "std.stream.FilterStream",
				"members": [
					{
						"kind": "constructor",
						"line": 2914,
						"deco": "FC3std6stream6StreammZC3std6stream11SliceStream",
						"endchar": 3,
						"char": 3,
						"parameters": [
							{
								"deco": "C3std6stream6Stream",
								"name": "s"
							},
							{
								"deco": "m",
								"name": "low"
							}
						],
						"name": "this",
						"comment": " Indicate both the source stream to use for reading from and the low part of\n the slice.\n\n The high part of the slice is dependent upon the end of the source\n stream, so that if you write beyond the end it resizes the stream normally.\n",
						"originalType": "(Stream s, ulong low)",
						"endline": 2923
					},
					{
						"kind": "constructor",
						"line": 2931,
						"deco": "FC3std6stream6StreammmZC3std6stream11SliceStream",
						"endchar": 3,
						"char": 3,
						"parameters": [
							{
								"deco": "C3std6stream6Stream",
								"name": "s"
							},
							{
								"deco": "m",
								"name": "low"
							},
							{
								"deco": "m",
								"name": "high"
							}
						],
						"name": "this",
						"comment": " Indicate the high index as well.\n\n Attempting to read or write past the high\n index results in the end being clipped off.\n",
						"originalType": "(Stream s, ulong low, ulong high)",
						"endline": 2941
					}
				],
				"char": 1,
				"name": "SliceStream",
				"comment": " This subclass slices off a portion of another stream, making seeking relative\n to the boundaries of the slice.\n\n It could be used to section a large file into a\n set of smaller files, such as with tar archives. Reading and writing a\n SliceStream does not modify the position of the source stream if it is\n seekable.\n"
			}
		],
		"name": "std.stream",
		"comment": " $(RED Warning: This module is considered out-dated and not up to Phobos'\n       current standards. It will remain until we have a suitable replacement,\n       but be aware that it will not remain long term.)\n\n Source:    $(PHOBOSSRC std/_stream.d)\n Macros:\n      WIKI = Phobos/StdStream\n"
	},
	{
		"kind": "module",
		"file": "../phobos/std/bitmanip.d",
		"members": [
			{
				"kind": "template",
				"line": 254,
				"members": [
					{
						"kind": "enum member",
						"line": 256,
						"value": "createFields!(createStoreName!T, 0, T).result",
						"char": 12,
						"name": "bitfields"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "tuple",
						"name": "T"
					}
				],
				"comment": "Allows creating bit fields inside $(D_PARAM struct)s and $(D_PARAM\nclass)es.\n\nExample:\n\n----\nstruct A\n{\n    int a;\n    mixin(bitfields!(\n        uint, \"x\",    2,\n        int,  \"y\",    3,\n        uint, \"z\",    2,\n        bool, \"flag\", 1));\n}\nA obj;\nobj.x = 2;\nobj.z = obj.x;\n----\n\nThe example above creates a bitfield pack of eight bits, which fit in\none $(D_PARAM ubyte). The bitfields are allocated starting from the\nleast significant bit, i.e. x occupies the two least significant bits\nof the bitfields storage.\n\nThe sum of all bit lengths in one $(D_PARAM bitfield) instantiation\nmust be exactly 8, 16, 32, or 64. If padding is needed, just allocate\none bitfield with an empty name.\n\nExample:\n\n----\nstruct A\n{\n    mixin(bitfields!(\n        bool, \"flag1\",    1,\n        bool, \"flag2\",    1,\n        uint, \"\",         6));\n}\n----\n\nThe type of a bit field can be any integral type or enumerated\ntype. The most efficient type to store in bitfields is $(D_PARAM\nbool), followed by unsigned types, followed by signed types.\n",
				"name": "bitfields"
			},
			{
				"kind": "template",
				"line": 274,
				"members": [
					{
						"kind": "variable",
						"line": 275,
						"init": "createTaggedReference!(createStoreName!(T, name, 0, Ts), T*, T.alignof, name, Ts).result",
						"storageClass": [
							"enum"
						],
						"char": 10,
						"name": "taggedPointer"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"type": "T*",
						"name": "T"
					},
					{
						"kind": "value",
						"deco": "Aya",
						"name": "name"
					},
					{
						"kind": "tuple",
						"name": "Ts"
					}
				],
				"comment": "This string mixin generator allows one to create tagged pointers inside $(D_PARAM struct)s and $(D_PARAM class)es.\n\nA tagged pointer uses the bits known to be zero in a normal pointer or class reference to store extra information.\nFor example, a pointer to an integer must be 4-byte aligned, so there are 2 bits that are always known to be zero.\nOne can store a 2-bit integer there.\n\nThe example above creates a tagged pointer in the struct A. The pointer is of type\n$(D uint*) as specified by the first argument, and is named x, as specified by the second\nargument.\n\nFollowing arguments works the same way as $(D bitfield)'s. The bitfield must fit into the\nbits known to be zero because of the pointer alignement.\nExample:\n\n---\nstruct A\n{\n    int a;\n    mixin(taggedPointer!(\n        uint*, \"x\",\n        bool, \"b1\", 1,\n        bool, \"b2\", 1));\n}\nA obj;\nobj.x = new uint;\nobj.b1 = true;\nobj.b2 = false;\n\n---\n",
				"name": "taggedPointer"
			},
			{
				"kind": "template",
				"line": 306,
				"constraint": "is(T == class)",
				"members": [
					{
						"kind": "variable",
						"line": 307,
						"init": "createTaggedReference!(createStoreName!(T, name, 0, Ts), T, 8, name, Ts).result",
						"storageClass": [
							"enum"
						],
						"char": 10,
						"name": "taggedClassRef"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "value",
						"deco": "Aya",
						"name": "name"
					},
					{
						"kind": "tuple",
						"name": "Ts"
					}
				],
				"comment": "This string mixin generator allows one to create tagged class reference inside $(D_PARAM struct)s and $(D_PARAM class)es.\n\nA tagged class reference uses the bits known to be zero in a normal class reference to store extra information.\nFor example, a pointer to an integer must be 4-byte aligned, so there are 2 bits that are always known to be zero.\nOne can store a 2-bit integer there.\n\nThe example above creates a tagged reference to an Object in the struct A. This expects the same parameters\nas $(D taggedPointer), except the first argument which must be a class type instead of a pointer type.\nExample:\n\n---\nstruct A\n{\n    int a;\n    mixin(taggedClassRef!(\n        Object, \"o\",\n        uint, \"i\", 2));\n}\nA obj;\nobj.o = new Object();\nobj.i = 3;\n\n---\n",
				"name": "taggedClassRef"
			},
			{
				"kind": "struct",
				"line": 624,
				"members": [],
				"char": 1,
				"name": "FloatRep",
				"comment": "   Allows manipulating the fraction, exponent, and sign parts of a\n   $(D_PARAM float) separately. The definition is:\n\n----\nstruct FloatRep\n{\n    union\n    {\n        float value;\n        mixin(bitfields!(\n                  uint,  \"fraction\", 23,\n                  ubyte, \"exponent\",  8,\n                  bool,  \"sign\",      1));\n    }\n    enum uint bias = 127, fractionBits = 23, exponentBits = 8, signBits = 1;\n}\n----\n"
			},
			{
				"kind": "struct",
				"line": 657,
				"members": [],
				"char": 1,
				"name": "DoubleRep",
				"comment": "   Allows manipulating the fraction, exponent, and sign parts of a\n   $(D_PARAM double) separately. The definition is:\n\n----\nstruct DoubleRep\n{\n    union\n    {\n        double value;\n        mixin(bitfields!(\n                  ulong,   \"fraction\", 52,\n                  ushort,  \"exponent\", 11,\n                  bool,    \"sign\",      1));\n    }\n    enum uint bias = 1023, signBits = 1, fractionBits = 52, exponentBits = 11;\n}\n----\n"
			},
			{
				"kind": "struct",
				"line": 702,
				"members": [
					{
						"kind": "function",
						"line": 735,
						"deco": "xFNaNbNdNiZm",
						"endchar": 5,
						"char": 22,
						"name": "dim",
						"comment": " Gets the amount of native words backing this $(D BitArray).\n",
						"originalType": "const pure nothrow @nogc @property size_t()",
						"endline": 738
					},
					{
						"kind": "function",
						"line": 743,
						"deco": "xFNaNbNdNiZm",
						"endchar": 5,
						"char": 22,
						"name": "length",
						"comment": " Gets the amount of bits in the $(D BitArray).\n",
						"originalType": "const pure nothrow @nogc @property size_t()",
						"endline": 746
					},
					{
						"kind": "function",
						"line": 754,
						"deco": "FNaNbNdmZm",
						"endchar": 5,
						"char": 22,
						"parameters": [
							{
								"deco": "m",
								"name": "newlen"
							}
						],
						"name": "length",
						"comment": " Sets the amount of bits in the $(D BitArray).\n $(RED Warning: increasing length may overwrite bits in\n final word up to the next word boundary. i.e. D dynamic\n array extension semantics are not followed.)\n",
						"originalType": "pure nothrow @property size_t(size_t newlen)",
						"endline": 772
					},
					{
						"kind": "function",
						"line": 777,
						"deco": "xFNaNbNimZb",
						"endchar": 5,
						"char": 10,
						"parameters": [
							{
								"deco": "m",
								"name": "i"
							}
						],
						"name": "opIndex",
						"comment": " Gets the $(D i)'th bit in the $(D BitArray).\n",
						"originalType": "const pure nothrow @nogc bool(size_t i)",
						"endline": 785
					},
					{
						"kind": "function",
						"line": 805,
						"deco": "FNaNbNibmZb",
						"endchar": 5,
						"char": 10,
						"parameters": [
							{
								"deco": "b",
								"name": "b"
							},
							{
								"deco": "m",
								"name": "i"
							}
						],
						"name": "opIndexAssign",
						"comment": " Sets the $(D i)'th bit in the $(D BitArray).\n",
						"originalType": "pure nothrow @nogc bool(bool b, size_t i)",
						"endline": 817
					},
					{
						"kind": "function",
						"line": 822,
						"deco": "xFNaNbNdZS3std8bitmanip8BitArray",
						"endchar": 5,
						"char": 24,
						"name": "dup",
						"comment": " Duplicates the $(D BitArray) and its contents.\n",
						"endline": 830
					},
					{
						"kind": "function",
						"line": 853,
						"deco": "FMDFKbZiZi",
						"endchar": 5,
						"char": 9,
						"parameters": [
							{
								"deco": "DFKbZi",
								"storageClass": [
									"scope"
								],
								"name": "dg"
							}
						],
						"name": "opApply",
						"comment": " Support for $(D foreach) loops for $(D BitArray).\n",
						"endline": 866
					},
					{
						"kind": "function",
						"line": 869,
						"deco": "xFMDFbZiZi",
						"endchar": 5,
						"char": 9,
						"parameters": [
							{
								"deco": "DFbZi",
								"storageClass": [
									"scope"
								],
								"name": "dg"
							}
						],
						"name": "opApply",
						"comment": " ditto\n",
						"endline": 881
					},
					{
						"kind": "function",
						"line": 884,
						"deco": "FMDFmKbZiZi",
						"endchar": 5,
						"char": 9,
						"parameters": [
							{
								"deco": "DFmKbZi",
								"storageClass": [
									"scope"
								],
								"name": "dg"
							}
						],
						"name": "opApply",
						"comment": " ditto\n",
						"originalType": "int(scope int delegate(size_t, ref bool) dg)",
						"endline": 897
					},
					{
						"kind": "function",
						"line": 900,
						"deco": "xFMDFmbZiZi",
						"endchar": 5,
						"char": 9,
						"parameters": [
							{
								"deco": "DFmbZi",
								"storageClass": [
									"scope"
								],
								"name": "dg"
							}
						],
						"name": "opApply",
						"comment": " ditto\n",
						"originalType": "const int(scope int delegate(size_t, bool) dg)",
						"endline": 912
					},
					{
						"kind": "function",
						"line": 951,
						"deco": "FNaNbNdNiZS3std8bitmanip8BitArray",
						"endchar": 5,
						"char": 24,
						"name": "reverse",
						"comment": " Reverses the bits of the $(D BitArray).\n",
						"endline": 973
					},
					{
						"kind": "function",
						"line": 995,
						"deco": "FNaNbNdNiZS3std8bitmanip8BitArray",
						"endchar": 5,
						"char": 24,
						"name": "sort",
						"comment": " Sorts the $(D BitArray)'s elements.\n",
						"endline": 1037
					},
					{
						"kind": "function",
						"line": 1056,
						"deco": "xFNaNbNiKxS3std8bitmanip8BitArrayZb",
						"endchar": 5,
						"char": 10,
						"parameters": [
							{
								"deco": "xS3std8bitmanip8BitArray",
								"storageClass": [
									"ref"
								],
								"name": "a2"
							}
						],
						"name": "opEquals",
						"comment": " Support for operators == and != for $(D BitArray).\n",
						"originalType": "const pure nothrow @nogc bool(ref const BitArray a2)",
						"endline": 1071
					},
					{
						"kind": "function",
						"line": 1103,
						"deco": "xFNaNbNiS3std8bitmanip8BitArrayZi",
						"endchar": 5,
						"char": 9,
						"parameters": [
							{
								"deco": "S3std8bitmanip8BitArray",
								"name": "a2"
							}
						],
						"name": "opCmp",
						"comment": " Supports comparison operators for $(D BitArray).\n",
						"endline": 1137
					},
					{
						"kind": "function",
						"line": 1204,
						"deco": "xFNaNbNiZm",
						"endchar": 5,
						"char": 12,
						"name": "toHash",
						"comment": " Support for hashing for $(D BitArray).\n",
						"originalType": "const pure nothrow @nogc size_t()",
						"endline": 1219
					},
					{
						"kind": "function",
						"line": 1225,
						"storageClass": [
							"deprecated"
						],
						"deco": "FNaNbAbZv",
						"endchar": 5,
						"char": 10,
						"parameters": [
							{
								"deco": "Ab",
								"name": "ba"
							}
						],
						"name": "init",
						"comment": " $(RED Will be deprecated in 2.068. Please use the constructor instead.)\n",
						"endline": 1228
					},
					{
						"kind": "function",
						"line": 1232,
						"storageClass": [
							"deprecated"
						],
						"deco": "FNaNbAvmZv",
						"endchar": 5,
						"char": 10,
						"parameters": [
							{
								"deco": "Av",
								"name": "v"
							},
							{
								"deco": "m",
								"name": "numbits"
							}
						],
						"name": "init",
						"comment": "ditto\n",
						"originalType": "pure nothrow void(void[] v, size_t numbits)",
						"endline": 1235
					},
					{
						"kind": "constructor",
						"line": 1240,
						"deco": "FNaNbNcAbZS3std8bitmanip8BitArray",
						"endchar": 5,
						"char": 5,
						"parameters": [
							{
								"deco": "Ab",
								"name": "ba"
							}
						],
						"name": "this",
						"comment": " Set this $(D BitArray) to the contents of $(D ba).\n",
						"originalType": "pure nothrow ref (bool[] ba)",
						"endline": 1247
					},
					{
						"kind": "constructor",
						"line": 1264,
						"deco": "FNaNbNcAvmZS3std8bitmanip8BitArray",
						"endchar": 5,
						"char": 5,
						"parameters": [
							{
								"deco": "Av",
								"name": "v"
							},
							{
								"deco": "m",
								"name": "numbits"
							}
						],
						"name": "this",
						"comment": " Map the $(D BitArray) onto $(D v), with $(D numbits) being the number of bits\n in the array. Does not copy the data. $(D v.length) must be a multiple of\n $(D size_t.sizeof). If there are unmapped bits in the final mapped word then\n these will be set to 0.\n\n This is the inverse of $(D opCast).\n",
						"originalType": "pure nothrow ref (void[] v, size_t numbits)",
						"endline": 1279
					},
					{
						"kind": "template",
						"line": 1308,
						"members": [
							{
								"kind": "function",
								"line": 1308,
								"endchar": 5,
								"char": 12,
								"type": "pure nothrow @nogc void[]()",
								"name": "opCast",
								"endline": 1311
							}
						],
						"char": 12,
						"parameters": [
							{
								"kind": "type",
								"deco": "Av",
								"name": "T"
							}
						],
						"comment": " Convert to $(D void[]).\n",
						"name": "opCast"
					},
					{
						"kind": "template",
						"line": 1316,
						"members": [
							{
								"kind": "function",
								"line": 1316,
								"endchar": 5,
								"char": 14,
								"type": "pure nothrow @nogc size_t[]()",
								"name": "opCast",
								"endline": 1319
							}
						],
						"char": 14,
						"parameters": [
							{
								"kind": "type",
								"deco": "Am",
								"name": "T"
							}
						],
						"comment": " Convert to $(D size_t[]).\n",
						"name": "opCast"
					},
					{
						"kind": "function",
						"line": 1336,
						"deco": "xFNaNbZS3std8bitmanip8BitArray",
						"endchar": 5,
						"char": 14,
						"name": "opCom",
						"comment": " Support for unary operator ~ for $(D BitArray).\n",
						"endline": 1351
					},
					{
						"kind": "template",
						"line": 1373,
						"constraint": "op == \"-\" || op == \"&\" || op == \"|\" || op == \"^\"",
						"members": [
							{
								"kind": "function",
								"line": 1373,
								"endchar": 5,
								"char": 14,
								"type": "const pure nothrow BitArray(const BitArray e2)",
								"parameters": [
									{
										"storageClass": [
											"const"
										],
										"type": "BitArray",
										"name": "e2"
									}
								],
								"name": "opBinary",
								"endline": 1397
							}
						],
						"char": 14,
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "op"
							}
						],
						"comment": " Support for binary bitwise operators for $(D BitArray).\n",
						"name": "opBinary"
					},
					{
						"kind": "template",
						"line": 1479,
						"constraint": "op == \"-\" || op == \"&\" || op == \"|\" || op == \"^\"",
						"members": [
							{
								"kind": "function",
								"line": 1479,
								"endchar": 5,
								"char": 14,
								"type": "pure nothrow @nogc BitArray(const BitArray e2)",
								"parameters": [
									{
										"storageClass": [
											"const"
										],
										"type": "BitArray",
										"name": "e2"
									}
								],
								"name": "opOpAssign",
								"endline": 1506
							}
						],
						"char": 14,
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "op"
							}
						],
						"comment": " Support for operator op= for $(D BitArray).\n",
						"name": "opOpAssign"
					},
					{
						"kind": "function",
						"line": 1604,
						"deco": "FNaNbbZS3std8bitmanip8BitArray",
						"endchar": 5,
						"char": 14,
						"parameters": [
							{
								"deco": "b",
								"name": "b"
							}
						],
						"name": "opCatAssign",
						"comment": " Support for operator ~= for $(D BitArray).\n $(RED Warning: This will overwrite a bit in the final word\n of the current underlying data regardless of whether it is\n shared between BitArray objects. i.e. D dynamic array\n concatenation semantics are not followed)\n",
						"endline": 1609
					},
					{
						"kind": "function",
						"line": 1635,
						"deco": "FNaNbS3std8bitmanip8BitArrayZS3std8bitmanip8BitArray",
						"endchar": 5,
						"char": 14,
						"parameters": [
							{
								"deco": "S3std8bitmanip8BitArray",
								"name": "b"
							}
						],
						"name": "opCatAssign",
						"comment": " ditto\n",
						"endline": 1642
					},
					{
						"kind": "function",
						"line": 1669,
						"deco": "xFNaNbbZS3std8bitmanip8BitArray",
						"endchar": 5,
						"char": 14,
						"parameters": [
							{
								"deco": "b",
								"name": "b"
							}
						],
						"name": "opCat",
						"comment": " Support for binary operator ~ for $(D BitArray).\n",
						"endline": 1677
					},
					{
						"kind": "function",
						"line": 1680,
						"deco": "xFNaNbbZS3std8bitmanip8BitArray",
						"endchar": 5,
						"char": 14,
						"parameters": [
							{
								"deco": "b",
								"name": "b"
							}
						],
						"name": "opCat_r",
						"comment": " ditto\n",
						"endline": 1689
					},
					{
						"kind": "function",
						"line": 1692,
						"deco": "xFNaNbS3std8bitmanip8BitArrayZS3std8bitmanip8BitArray",
						"endchar": 5,
						"char": 14,
						"parameters": [
							{
								"deco": "S3std8bitmanip8BitArray",
								"name": "b"
							}
						],
						"name": "opCat",
						"comment": " ditto\n",
						"endline": 1699
					},
					{
						"kind": "template",
						"line": 1812,
						"constraint": "op == \"<<\"",
						"members": [
							{
								"kind": "function",
								"line": 1812,
								"endchar": 5,
								"char": 10,
								"type": "pure nothrow @nogc void(size_t nbits)",
								"parameters": [
									{
										"type": "size_t",
										"name": "nbits"
									}
								],
								"name": "opOpAssign",
								"endline": 1833
							}
						],
						"char": 10,
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "op"
							}
						],
						"comment": " Operator $(D <<=) support.\n\n Shifts all the bits in the array to the left by the given number of\n bits.  The leftmost bits are dropped, and 0's are appended to the end\n to fill up the vacant bits.\n\n $(RED Warning: unused bits in the final word up to the next word\n boundary may be overwritten by this operation. It does not attempt to\n preserve bits past the end of the array.)\n",
						"name": "opOpAssign"
					},
					{
						"kind": "template",
						"line": 1846,
						"constraint": "op == \">>\"",
						"members": [
							{
								"kind": "function",
								"line": 1846,
								"endchar": 5,
								"char": 10,
								"type": "pure nothrow @nogc void(size_t nbits)",
								"parameters": [
									{
										"type": "size_t",
										"name": "nbits"
									}
								],
								"name": "opOpAssign",
								"endline": 1874
							}
						],
						"char": 10,
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "op"
							}
						],
						"comment": " Operator $(D >>=) support.\n\n Shifts all the bits in the array to the right by the given number of\n bits.  The rightmost bits are dropped, and 0's are inserted at the back\n to fill up the vacant bits.\n\n $(RED Warning: unused bits in the final word up to the next word\n boundary may be overwritten by this operation. It does not attempt to\n preserve bits past the end of the array.)\n",
						"name": "opOpAssign"
					},
					{
						"kind": "function",
						"line": 1967,
						"deco": "xFMDFAxaZvS3std6format18__T10FormatSpecTaZ10FormatSpecZv",
						"endchar": 5,
						"char": 10,
						"parameters": [
							{
								"deco": "DFAxaZv",
								"storageClass": [
									"scope"
								],
								"name": "sink"
							},
							{
								"deco": "S3std6format18__T10FormatSpecTaZ10FormatSpec",
								"name": "fmt"
							}
						],
						"name": "toString",
						"comment": " Return a string representation of this BitArray.\n\n Two format specifiers are supported:\n $(LI $(B %s) which prints the bits as an array, and)\n $(LI $(B %b) which prints the bits as 8-bit byte packets)\n separated with an underscore.\nExample:\n\n---\nimport std.format : format;\n\ndebug(bitarray) printf(\"BitArray.toString unittest\\n\");\nauto b = BitArray([0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1]);\n\nauto s1 = format(\"%s\", b);\nassert(s1 == \"[0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1]\");\n\nauto s2 = format(\"%b\", b);\nassert(s2 == \"00001111_00001111\");\n\n\n---\n",
						"endline": 1979
					},
					{
						"kind": "function",
						"line": 1999,
						"storageClass": [
							"auto"
						],
						"deco": "xFNbNdZS3std9algorithm9iteration270__T6joinerTS3std9algorithm9iteration220__T9MapResultS483std8bitmanip8BitArray7bitsSetMxFNbNdZ9__lambda2TS3std9algorithm9iteration112__T12FilterResultS483std8bitmanip8BitArray7bitsSetMxFNbNdZ9__lambda1TS3std5range13__T4iotaTmTmZ4iotaFmmZ6ResultZ12FilterResultZ9MapResultZ6joinerFS3std9algorithm9iteration220__T9MapResultS483std8bitmanip8BitArray7bitsSetMxFNbNdZ9__lambda2TS3std9algorithm9iteration112__T12FilterResultS483std8bitmanip8BitArray7bitsSetMxFNbNdZ9__lambda1TS3std5range13__T4iotaTmTmZ4iotaFmmZ6ResultZ12FilterResultZ9MapResultZ6Result",
						"endchar": 5,
						"char": 20,
						"name": "bitsSet",
						"comment": " Return a lazy range of the indices of set bits.\nExample:\n\n---\nimport std.algorithm : equal;\n\nauto b1 = BitArray([0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1]);\nassert(b1.bitsSet.equal([4, 5, 6, 7, 12, 13, 14, 15]));\n\nBitArray b2;\nb2.length = 1000;\nb2[333] = true;\nb2[666] = true;\nb2[999] = true;\nassert(b2.bitsSet.equal([333, 666, 999]));\n\n\n---\n",
						"originalType": "const nothrow @property ()",
						"endline": 2008
					}
				],
				"char": 1,
				"name": "BitArray",
				"comment": " An array of bits.\n"
			},
			{
				"kind": "template",
				"line": 2125,
				"constraint": "isIntegral!T || isSomeChar!T || isBoolean!T",
				"members": [
					{
						"kind": "function",
						"line": 2125,
						"endchar": 1,
						"char": 3,
						"type": "pure nothrow @nogc @safe T(T val)",
						"parameters": [
							{
								"type": "T",
								"name": "val"
							}
						],
						"name": "swapEndian",
						"endline": 2140
					}
				],
				"char": 3,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": "    Swaps the endianness of the given integral value or character.\n",
				"name": "swapEndian"
			},
			{
				"kind": "template",
				"line": 2237,
				"constraint": "canSwapEndianness!T",
				"members": [
					{
						"kind": "function",
						"line": 2237,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "pure nothrow @nogc @safe (T val)",
						"parameters": [
							{
								"type": "T",
								"name": "val"
							}
						],
						"name": "nativeToBigEndian",
						"endline": 2241
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": "    Converts the given value from the native endianness to big endian and\n    returns it as a $(D ubyte[n]) where $(D n) is the size of the given type.\n\n    Returning a $(D ubyte[n]) helps prevent accidentally using a swapped value\n    as a regular one (and in the case of floating point values, it's necessary,\n    because the FPU will mess up any swapped floating point values. So, you\n    can't actually have swapped floating point values as floating point values).\n\n    $(D real) is not supported, because its size is implementation-dependent\n    and therefore could vary from machine to machine (which could make it\n    unusable if you tried to transfer it to another machine).\nExample:\n\n---\nint i = 12345;\nubyte[4] swappedI = nativeToBigEndian(i);\nassert(i == bigEndianToNative!int(swappedI));\n\ndouble d = 123.45;\nubyte[8] swappedD = nativeToBigEndian(d);\nassert(d == bigEndianToNative!double(swappedD));\n\n---\n",
				"name": "nativeToBigEndian"
			},
			{
				"kind": "template",
				"line": 2359,
				"constraint": "canSwapEndianness!T && n == T.sizeof",
				"members": [
					{
						"kind": "function",
						"line": 2359,
						"endchar": 1,
						"char": 3,
						"type": "pure nothrow @nogc @safe T(ubyte[n] val)",
						"parameters": [
							{
								"type": "ubyte[n]",
								"name": "val"
							}
						],
						"name": "bigEndianToNative",
						"endline": 2363
					}
				],
				"char": 3,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "value",
						"deco": "m",
						"name": "n"
					}
				],
				"comment": "    Converts the given value from big endian to the native endianness and\n    returns it. The value is given as a $(D ubyte[n]) where $(D n) is the size\n    of the target type. You must give the target type as a template argument,\n    because there are multiple types with the same size and so the type of the\n    argument is not enough to determine the return type.\n\n    Taking a $(D ubyte[n]) helps prevent accidentally using a swapped value\n    as a regular one (and in the case of floating point values, it's necessary,\n    because the FPU will mess up any swapped floating point values. So, you\n    can't actually have swapped floating point values as floating point values).\nExample:\n\n---\nushort i = 12345;\nubyte[2] swappedI = nativeToBigEndian(i);\nassert(i == bigEndianToNative!ushort(swappedI));\n\ndchar c = 'D';\nubyte[4] swappedC = nativeToBigEndian(c);\nassert(c == bigEndianToNative!dchar(swappedC));\n\n---\n",
				"name": "bigEndianToNative"
			},
			{
				"kind": "template",
				"line": 2411,
				"constraint": "canSwapEndianness!T",
				"members": [
					{
						"kind": "function",
						"line": 2411,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "pure nothrow @nogc @safe (T val)",
						"parameters": [
							{
								"type": "T",
								"name": "val"
							}
						],
						"name": "nativeToLittleEndian",
						"endline": 2415
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": "    Converts the given value from the native endianness to little endian and\n    returns it as a $(D ubyte[n]) where $(D n) is the size of the given type.\n\n    Returning a $(D ubyte[n]) helps prevent accidentally using a swapped value\n    as a regular one (and in the case of floating point values, it's necessary,\n    because the FPU will mess up any swapped floating point values. So, you\n    can't actually have swapped floating point values as floating point values).\nExample:\n\n---\nint i = 12345;\nubyte[4] swappedI = nativeToLittleEndian(i);\nassert(i == littleEndianToNative!int(swappedI));\n\ndouble d = 123.45;\nubyte[8] swappedD = nativeToLittleEndian(d);\nassert(d == littleEndianToNative!double(swappedD));\n\n---\n",
				"name": "nativeToLittleEndian"
			},
			{
				"kind": "template",
				"line": 2506,
				"constraint": "canSwapEndianness!T && n == T.sizeof",
				"members": [
					{
						"kind": "function",
						"line": 2506,
						"endchar": 1,
						"char": 3,
						"type": "pure nothrow @nogc @safe T(ubyte[n] val)",
						"parameters": [
							{
								"type": "ubyte[n]",
								"name": "val"
							}
						],
						"name": "littleEndianToNative",
						"endline": 2510
					}
				],
				"char": 3,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "value",
						"deco": "m",
						"name": "n"
					}
				],
				"comment": "    Converts the given value from little endian to the native endianness and\n    returns it. The value is given as a $(D ubyte[n]) where $(D n) is the size\n    of the target type. You must give the target type as a template argument,\n    because there are multiple types with the same size and so the type of the\n    argument is not enough to determine the return type.\n\n    Taking a $(D ubyte[n]) helps prevent accidentally using a swapped value\n    as a regular one (and in the case of floating point values, it's necessary,\n    because the FPU will mess up any swapped floating point values. So, you\n    can't actually have swapped floating point values as floating point values).\n\n    $(D real) is not supported, because its size is implementation-dependent\n    and therefore could vary from machine to machine (which could make it\n    unusable if you tried to transfer it to another machine).\nExample:\n\n---\nushort i = 12345;\nubyte[2] swappedI = nativeToLittleEndian(i);\nassert(i == littleEndianToNative!ushort(swappedI));\n\ndchar c = 'D';\nubyte[4] swappedC = nativeToLittleEndian(c);\nassert(c == littleEndianToNative!dchar(swappedC));\n\n---\n",
				"name": "littleEndianToNative"
			},
			{
				"kind": "template",
				"line": 2651,
				"constraint": "canSwapEndianness!T && isForwardRange!R && is(ElementType!R : const(ubyte))",
				"members": [
					{
						"kind": "function",
						"line": 2651,
						"endchar": 1,
						"char": 3,
						"type": "T(R range)",
						"parameters": [
							{
								"type": "R",
								"name": "range"
							}
						],
						"name": "peek",
						"endline": 2675
					}
				],
				"char": 3,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "value",
						"defaultValue": "Endian.bigEndian",
						"deco": "E3std6system6Endian",
						"name": "endianness"
					},
					{
						"kind": "type",
						"name": "R"
					}
				],
				"comment": "    Takes a range of $(D ubyte)s and converts the first $(D T.sizeof) bytes to\n    $(D T). The value returned is converted from the given endianness to the\n    native endianness. The range is not consumed.\n\n    Params:\n        T     = The integral type to convert the first $(D T.sizeof) bytes to.\n        endianness = The endianness that the bytes are assumed to be in.\n        range = The range to read from.\n        index = The index to start reading from (instead of starting at the\n                front). If index is a pointer, then it is updated to the index\n                after the bytes read. The overloads with index are only\n                available if $(D hasSlicing!R) is $(D true).\nExample:\n\n---\nubyte[] buffer = [1, 5, 22, 9, 44, 255, 8];\nassert(buffer.peek!uint() == 17110537);\nassert(buffer.peek!ushort() == 261);\nassert(buffer.peek!ubyte() == 1);\n\nassert(buffer.peek!uint(2) == 369700095);\nassert(buffer.peek!ushort(2) == 5641);\nassert(buffer.peek!ubyte(2) == 22);\n\nsize_t index = 0;\nassert(buffer.peek!ushort(&index) == 261);\nassert(index == 2);\n\nassert(buffer.peek!uint(&index) == 369700095);\nassert(index == 6);\n\nassert(buffer.peek!ubyte(&index) == 8);\nassert(index == 7);\n\n---\n",
				"name": "peek"
			},
			{
				"kind": "template",
				"line": 2678,
				"constraint": "canSwapEndianness!T && isForwardRange!R && hasSlicing!R && is(ElementType!R : const(ubyte))",
				"members": [
					{
						"kind": "function",
						"line": 2678,
						"endchar": 1,
						"char": 3,
						"type": "T(R range, size_t index)",
						"parameters": [
							{
								"type": "R",
								"name": "range"
							},
							{
								"type": "size_t",
								"name": "index"
							}
						],
						"name": "peek",
						"endline": 2685
					}
				],
				"char": 3,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "value",
						"defaultValue": "Endian.bigEndian",
						"deco": "E3std6system6Endian",
						"name": "endianness"
					},
					{
						"kind": "type",
						"name": "R"
					}
				],
				"comment": " Ditto\n",
				"name": "peek"
			},
			{
				"kind": "template",
				"line": 2688,
				"constraint": "canSwapEndianness!T && isForwardRange!R && hasSlicing!R && is(ElementType!R : const(ubyte))",
				"members": [
					{
						"kind": "function",
						"line": 2688,
						"endchar": 1,
						"char": 3,
						"type": "T(R range, size_t* index)",
						"parameters": [
							{
								"type": "R",
								"name": "range"
							},
							{
								"type": "size_t*",
								"name": "index"
							}
						],
						"name": "peek",
						"endline": 2705
					}
				],
				"char": 3,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "value",
						"defaultValue": "Endian.bigEndian",
						"deco": "E3std6system6Endian",
						"name": "endianness"
					},
					{
						"kind": "type",
						"name": "R"
					}
				],
				"comment": " Ditto\n",
				"name": "peek"
			},
			{
				"kind": "template",
				"line": 2953,
				"constraint": "canSwapEndianness!T && isInputRange!R && is(ElementType!R : const(ubyte))",
				"members": [
					{
						"kind": "function",
						"line": 2953,
						"endchar": 1,
						"char": 3,
						"type": "T(ref R range)",
						"parameters": [
							{
								"storageClass": [
									"ref"
								],
								"type": "R",
								"name": "range"
							}
						],
						"name": "read",
						"endline": 2976
					}
				],
				"char": 3,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "value",
						"defaultValue": "Endian.bigEndian",
						"deco": "E3std6system6Endian",
						"name": "endianness"
					},
					{
						"kind": "type",
						"name": "R"
					}
				],
				"comment": "    Takes a range of $(D ubyte)s and converts the first $(D T.sizeof) bytes to\n    $(D T). The value returned is converted from the given endianness to the\n    native endianness. The $(D T.sizeof) bytes which are read are consumed from\n    the range.\n\n    Params:\n        T     = The integral type to convert the first $(D T.sizeof) bytes to.\n        endianness = The endianness that the bytes are assumed to be in.\n        range = The range to read from.\nExample:\n\n---\nubyte[] buffer = [1, 5, 22, 9, 44, 255, 8];\nassert(buffer.length == 7);\n\nassert(buffer.read!ushort() == 261);\nassert(buffer.length == 5);\n\nassert(buffer.read!uint() == 369700095);\nassert(buffer.length == 1);\n\nassert(buffer.read!ubyte() == 8);\nassert(buffer.empty);\n\n---\n",
				"name": "read"
			},
			{
				"kind": "template",
				"line": 3197,
				"constraint": "canSwapEndianness!T && isForwardRange!R && hasSlicing!R && is(ElementType!R : ubyte)",
				"members": [
					{
						"kind": "function",
						"line": 3197,
						"endchar": 1,
						"char": 6,
						"type": "void(R range, T value, size_t index)",
						"parameters": [
							{
								"type": "R",
								"name": "range"
							},
							{
								"type": "T",
								"name": "value"
							},
							{
								"type": "size_t",
								"name": "index"
							}
						],
						"name": "write",
						"endline": 3204
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "value",
						"defaultValue": "Endian.bigEndian",
						"deco": "E3std6system6Endian",
						"name": "endianness"
					},
					{
						"kind": "type",
						"name": "R"
					}
				],
				"comment": "    Takes an integral value, converts it to the given endianness, and writes it\n    to the given range of $(D ubyte)s as a sequence of $(D T.sizeof) $(D ubyte)s\n    starting at index. $(D hasSlicing!R) must be $(D true).\n\n    Params:\n        T     = The integral type to convert the first $(D T.sizeof) bytes to.\n        endianness = The endianness to write the bytes in.\n        range = The range to write to.\n        index = The index to start writing to. If index is a pointer, then it\n                is updated to the index after the bytes read.\nExample:\n\n---\n{\n    ubyte[] buffer = [0, 0, 0, 0, 0, 0, 0, 0];\n    buffer.write!uint(29110231u, 0);\n    assert(buffer == [1, 188, 47, 215, 0, 0, 0, 0]);\n\n    buffer.write!ushort(927, 0);\n    assert(buffer == [3, 159, 47, 215, 0, 0, 0, 0]);\n\n    buffer.write!ubyte(42, 0);\n    assert(buffer == [42, 159, 47, 215, 0, 0, 0, 0]);\n}\n\n{\n    ubyte[] buffer = [0, 0, 0, 0, 0, 0, 0, 0, 0];\n    buffer.write!uint(142700095u, 2);\n    assert(buffer == [0, 0, 8, 129, 110, 63, 0, 0, 0]);\n\n    buffer.write!ushort(19839, 2);\n    assert(buffer == [0, 0, 77, 127, 110, 63, 0, 0, 0]);\n\n    buffer.write!ubyte(132, 2);\n    assert(buffer == [0, 0, 132, 127, 110, 63, 0, 0, 0]);\n}\n\n{\n    ubyte[] buffer = [0, 0, 0, 0, 0, 0, 0, 0];\n    size_t index = 0;\n    buffer.write!ushort(261, &index);\n    assert(buffer == [1, 5, 0, 0, 0, 0, 0, 0]);\n    assert(index == 2);\n\n    buffer.write!uint(369700095u, &index);\n    assert(buffer == [1, 5, 22, 9, 44, 255, 0, 0]);\n    assert(index == 6);\n\n    buffer.write!ubyte(8, &index);\n    assert(buffer == [1, 5, 22, 9, 44, 255, 8, 0]);\n    assert(index == 7);\n}\n\n---\n",
				"name": "write"
			},
			{
				"kind": "template",
				"line": 3207,
				"constraint": "canSwapEndianness!T && isForwardRange!R && hasSlicing!R && is(ElementType!R : ubyte)",
				"members": [
					{
						"kind": "function",
						"line": 3207,
						"endchar": 1,
						"char": 6,
						"type": "void(R range, T value, size_t* index)",
						"parameters": [
							{
								"type": "R",
								"name": "range"
							},
							{
								"type": "T",
								"name": "value"
							},
							{
								"type": "size_t*",
								"name": "index"
							}
						],
						"name": "write",
						"endline": 3224
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "value",
						"defaultValue": "Endian.bigEndian",
						"deco": "E3std6system6Endian",
						"name": "endianness"
					},
					{
						"kind": "type",
						"name": "R"
					}
				],
				"comment": " Ditto\n",
				"name": "write"
			},
			{
				"kind": "template",
				"line": 3540,
				"constraint": "canSwapEndianness!T && isOutputRange!(R, ubyte)",
				"members": [
					{
						"kind": "function",
						"line": 3540,
						"endchar": 1,
						"char": 6,
						"type": "void(R range, T value)",
						"parameters": [
							{
								"type": "R",
								"name": "range"
							},
							{
								"type": "T",
								"name": "value"
							}
						],
						"name": "append",
						"endline": 3549
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "value",
						"defaultValue": "Endian.bigEndian",
						"deco": "E3std6system6Endian",
						"name": "endianness"
					},
					{
						"kind": "type",
						"name": "R"
					}
				],
				"comment": "    Takes an integral value, converts it to the given endianness, and appends\n    it to the given range of $(D ubyte)s (using $(D put)) as a sequence of\n    $(D T.sizeof) $(D ubyte)s starting at index. $(D hasSlicing!R) must be\n    $(D true).\n\n    Params:\n        T     = The integral type to convert the first $(D T.sizeof) bytes to.\n        endianness = The endianness to write the bytes in.\n        range = The range to append to.\nExample:\n\n---\nimport std.array;\nauto buffer = appender!(const ubyte[])();\nbuffer.append!ushort(261);\nassert(buffer.data == [1, 5]);\n\nbuffer.append!uint(369700095u);\nassert(buffer.data == [1, 5, 22, 9, 44, 255]);\n\nbuffer.append!ubyte(8);\nassert(buffer.data == [1, 5, 22, 9, 44, 255, 8]);\n\n---\nExample:\n\n---\nassert(countTrailingZeros(1) == 0);\nassert(countTrailingZeros(0) == 32);\nassert(countTrailingZeros(int.min) == 31);\nassert(countTrailingZeros(256) == 8);\n\n---\nExample:\n\n---\nassert(countBitsSet(1) == 1);\nassert(countBitsSet(0) == 0);\nassert(countBitsSet(int.min) == 1);\nassert(countBitsSet(uint.max) == 32);\n\n---\n",
				"name": "append"
			},
			{
				"kind": "template",
				"line": 3935,
				"constraint": "isIntegral!T",
				"members": [
					{
						"kind": "function",
						"line": 3935,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "pure nothrow @nogc (T value)",
						"parameters": [
							{
								"type": "T",
								"name": "value"
							}
						],
						"name": "bitsSet",
						"endline": 3939
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": "Range that iterates the indices of the set bits in $(D value).\nIndex 0 corresponds to the least significant bit.\nFor signed integers, the highest index corresponds to the sign bit.\nExample:\n\n---\nimport std.algorithm : equal;\nimport std.range : iota;\n\nassert(bitsSet(1).equal([0]));\nassert(bitsSet(5).equal([0, 2]));\nassert(bitsSet(-1).equal(iota(32)));\nassert(bitsSet(int.min).equal([31]));\n\n---\n",
				"name": "bitsSet"
			}
		],
		"name": "std.bitmanip",
		"comment": "Bit-level manipulation facilities.\n\nMacros:\n\nWIKI = StdBitarray\n\nCopyright: Copyright Digital Mars 2007 - 2011.\nLicense:   $(WEB www.boost.org/LICENSE_1_0.txt, Boost License 1.0).\nAuthors:   $(WEB digitalmars.com, Walter Bright),\n           $(WEB erdani.org, Andrei Alexandrescu),\n           Jonathan M Davis,\n           Alex Rønne Petersen,\n           Damian Ziemba\n           Amaury SECHET\nSource: $(PHOBOSSRC std/_bitmanip.d)\n"
	},
	{
		"kind": "module",
		"file": "../phobos/std/zip.d",
		"members": [
			{
				"kind": "class",
				"line": 81,
				"base": "object.Exception",
				"members": [],
				"char": 1,
				"name": "ZipException",
				"comment": " Thrown on error.\n"
			},
			{
				"kind": "enum",
				"line": 92,
				"members": [
					{
						"kind": "enum member",
						"line": 94,
						"value": "cast(ushort)0u",
						"char": 5,
						"name": "none",
						"comment": "No compression, just archiving\n"
					},
					{
						"kind": "enum member",
						"line": 95,
						"value": "cast(ushort)8u",
						"char": 5,
						"name": "deflate",
						"comment": "Deflate algorithm. Use zlib library to compress\n"
					}
				],
				"char": 1,
				"baseDeco": "t",
				"name": "CompressionMethod",
				"comment": " Compression method used by ArchiveMember\n"
			},
			{
				"kind": "class",
				"line": 101,
				"members": [
					{
						"kind": "variable",
						"line": 111,
						"deco": "Aya",
						"char": 12,
						"name": "name",
						"comment": " Read/Write: Usually the file name of the archive member; it is used to\n index the archive directory for the member. Each member must have a unique\n name[]. Do not change without removing member from the directory first.\n",
						"offset": 16
					},
					{
						"kind": "variable",
						"line": 113,
						"deco": "Ah",
						"char": 13,
						"name": "extra",
						"comment": "Read/Write: extra data for this member.\n",
						"offset": 32
					},
					{
						"kind": "variable",
						"line": 114,
						"deco": "Aya",
						"char": 12,
						"name": "comment",
						"comment": "Read/Write: comment associated with this member.\n",
						"offset": 48
					},
					{
						"kind": "variable",
						"line": 129,
						"deco": "t",
						"char": 12,
						"name": "flags",
						"comment": "Read/Write: normally set to 0\n",
						"offset": 128
					},
					{
						"kind": "variable",
						"line": 130,
						"deco": "t",
						"char": 12,
						"name": "internalAttributes",
						"comment": "Read/Write\n",
						"offset": 130
					},
					{
						"kind": "function",
						"line": 132,
						"deco": "FNdZt",
						"endchar": 69,
						"char": 22,
						"name": "extractVersion",
						"comment": "Read Only\n",
						"endline": 132
					},
					{
						"kind": "function",
						"line": 133,
						"deco": "FNdZk",
						"endchar": 53,
						"char": 20,
						"name": "crc32",
						"comment": "Read Only: cyclic redundancy check (CRC) value\n",
						"endline": 133
					},
					{
						"kind": "function",
						"line": 146,
						"deco": "FNdZk",
						"endchar": 67,
						"char": 20,
						"name": "compressedSize",
						"comment": "Read Only: size of data of member in compressed form.\n",
						"endline": 146
					},
					{
						"kind": "function",
						"line": 149,
						"deco": "FNdZk",
						"endchar": 63,
						"char": 20,
						"name": "expandedSize",
						"comment": "Read Only: size of data of member in expanded form.\n",
						"endline": 149
					},
					{
						"kind": "function",
						"line": 150,
						"deco": "FNdZt",
						"endchar": 61,
						"char": 22,
						"name": "diskNumber",
						"comment": "Read Only: should be 0.\n",
						"endline": 150
					},
					{
						"kind": "function",
						"line": 153,
						"deco": "FNdZAh",
						"endchar": 70,
						"char": 23,
						"name": "compressedData",
						"comment": "Read Only: data of member in compressed form.\n",
						"endline": 153
					},
					{
						"kind": "function",
						"line": 156,
						"deco": "FNdZAh",
						"endchar": 66,
						"char": 23,
						"name": "expandedData",
						"comment": "Read data of member in uncompressed form.\n",
						"endline": 156
					},
					{
						"kind": "function",
						"line": 159,
						"deco": "FNdAhZv",
						"endchar": 5,
						"char": 20,
						"parameters": [
							{
								"deco": "Ah",
								"name": "ed"
							}
						],
						"name": "expandedData",
						"comment": "Write data of member in uncompressed form.\n",
						"endline": 167
					},
					{
						"kind": "function",
						"line": 173,
						"deco": "FNdkZv",
						"endchar": 5,
						"char": 20,
						"parameters": [
							{
								"deco": "k",
								"name": "attr"
							}
						],
						"name": "fileAttributes",
						"comment": " Set the OS specific file attributes, as obtained by\n $(XREF file,getAttributes) or $(XREF file,DirEntry.attributes), for this archive member.\n",
						"endline": 190
					},
					{
						"kind": "function",
						"line": 207,
						"deco": "xFNdZk",
						"endchar": 5,
						"char": 20,
						"name": "fileAttributes",
						"comment": " Get the OS specific file attributes for the archive member.\n\n Returns: The file attributes or 0 if the file attributes were\n encoded for an incompatible OS (Windows vs. Posix).\n\n",
						"endline": 225
					},
					{
						"kind": "function",
						"line": 228,
						"deco": "FNdS3std8datetime7SysTimeZv",
						"endchar": 5,
						"char": 20,
						"parameters": [
							{
								"deco": "S3std8datetime7SysTime",
								"name": "time"
							}
						],
						"name": "time",
						"comment": "Set the last modification time for this member.\n",
						"endline": 231
					},
					{
						"kind": "function",
						"line": 234,
						"deco": "FNdkZv",
						"endchar": 5,
						"char": 20,
						"parameters": [
							{
								"deco": "k",
								"name": "time"
							}
						],
						"name": "time",
						"comment": "ditto\n",
						"originalType": "@property void(DosFileTime time)",
						"endline": 237
					},
					{
						"kind": "function",
						"line": 240,
						"deco": "xFNdZk",
						"endchar": 5,
						"char": 27,
						"name": "time",
						"comment": "Get the last modification time for this member.\n",
						"originalType": "const @property DosFileTime()",
						"endline": 243
					},
					{
						"kind": "function",
						"line": 250,
						"deco": "FNdZE3std3zip17CompressionMethod",
						"endchar": 82,
						"char": 33,
						"name": "compressionMethod",
						"comment": " Read compression method used for this member\n See_Also:\n     CompressionMethod\n",
						"endline": 250
					},
					{
						"kind": "function",
						"line": 264,
						"deco": "FNdE3std3zip17CompressionMethodZv",
						"endchar": 5,
						"char": 20,
						"parameters": [
							{
								"deco": "E3std3zip17CompressionMethod",
								"name": "cm"
							}
						],
						"name": "compressionMethod",
						"comment": " Write compression method used for this member\n See_Also:\n     CompressionMethod\n",
						"endline": 272
					}
				],
				"char": 7,
				"name": "ArchiveMember",
				"comment": " A member of the ZipArchive.\n"
			},
			{
				"kind": "class",
				"line": 298,
				"members": [
					{
						"kind": "variable",
						"line": 306,
						"deco": "Aya",
						"char": 12,
						"name": "comment",
						"comment": "Read/Write: the archive comment. Must be less than 65536 bytes in length.\n",
						"offset": 16
					},
					{
						"kind": "function",
						"line": 322,
						"deco": "FNdZAh",
						"endchar": 52,
						"char": 23,
						"name": "data",
						"comment": "Read Only: array representing the entire contents of the archive.\n",
						"endline": 322
					},
					{
						"kind": "function",
						"line": 325,
						"deco": "FNdZk",
						"endchar": 58,
						"char": 20,
						"name": "diskNumber",
						"comment": "Read Only: 0 since multi-disk zip archives are not supported.\n",
						"endline": 325
					},
					{
						"kind": "function",
						"line": 328,
						"deco": "FNdZk",
						"endchar": 60,
						"char": 20,
						"name": "diskStartDir",
						"comment": "Read Only: 0 since multi-disk zip archives are not supported\n",
						"endline": 328
					},
					{
						"kind": "function",
						"line": 331,
						"deco": "FNdZk",
						"endchar": 58,
						"char": 20,
						"name": "numEntries",
						"comment": "Read Only: number of ArchiveMembers in the directory.\n",
						"endline": 331
					},
					{
						"kind": "function",
						"line": 332,
						"deco": "FNdZk",
						"endchar": 60,
						"char": 20,
						"name": "totalEntries",
						"comment": "ditto\n",
						"endline": 332
					},
					{
						"kind": "function",
						"line": 335,
						"deco": "FNdZb",
						"endchar": 50,
						"char": 20,
						"name": "isZip64",
						"comment": "True when the archive is in Zip64 format.\n",
						"endline": 335
					},
					{
						"kind": "function",
						"line": 338,
						"deco": "FNdbZv",
						"endchar": 60,
						"char": 20,
						"parameters": [
							{
								"deco": "b",
								"name": "value"
							}
						],
						"name": "isZip64",
						"comment": "Set this to true to force building a Zip64 archive.\n",
						"endline": 338
					},
					{
						"kind": "function",
						"line": 351,
						"deco": "FNdZHAyaC3std3zip13ArchiveMember",
						"endchar": 70,
						"char": 37,
						"name": "directory",
						"comment": " Read Only: array indexed by the name of each member of the archive.\n  All the members of the archive can be accessed with a foreach loop:\n Example:\n --------------------\n ZipArchive archive = new ZipArchive(data);\n foreach (ArchiveMember am; archive.directory)\n {\n     writefln(\"member name is '%s'\", am.name);\n }\n --------------------\n",
						"endline": 351
					},
					{
						"kind": "constructor",
						"line": 371,
						"deco": "FZC3std3zip10ZipArchive",
						"endchar": 5,
						"char": 5,
						"name": "this",
						"comment": " Constructor to use when creating a new archive.\n",
						"originalType": "()",
						"endline": 373
					},
					{
						"kind": "function",
						"line": 377,
						"deco": "FC3std3zip13ArchiveMemberZv",
						"endchar": 5,
						"char": 10,
						"parameters": [
							{
								"deco": "C3std3zip13ArchiveMember",
								"name": "de"
							}
						],
						"name": "addMember",
						"comment": " Add de to the archive.\n",
						"endline": 380
					},
					{
						"kind": "function",
						"line": 384,
						"deco": "FC3std3zip13ArchiveMemberZv",
						"endchar": 5,
						"char": 10,
						"parameters": [
							{
								"deco": "C3std3zip13ArchiveMember",
								"name": "de"
							}
						],
						"name": "deleteMember",
						"comment": " Delete de from the archive.\n",
						"endline": 387
					},
					{
						"kind": "function",
						"line": 399,
						"deco": "FZAv",
						"endchar": 5,
						"char": 12,
						"name": "build",
						"comment": " Construct an archive out of the current members of the archive.\n\n Fills in the properties data[], diskNumber, diskStartDir, numEntries,\n totalEntries, and directory[].\n For each ArchiveMember, fills in properties crc32, compressedSize,\n compressedData[].\n\n Returns: array representing the entire archive.\n",
						"endline": 555
					},
					{
						"kind": "constructor",
						"line": 574,
						"deco": "FAvZC3std3zip10ZipArchive",
						"endchar": 5,
						"char": 5,
						"parameters": [
							{
								"deco": "Av",
								"name": "buffer"
							}
						],
						"name": "this",
						"comment": " Constructor to use when reading an existing archive.\n\n Fills in the properties data[], diskNumber, diskStartDir, numEntries,\n totalEntries, comment[], and directory[].\n For each ArchiveMember, fills in\n properties madeVersion, extractVersion, flags, compressionMethod, time,\n crc32, compressedSize, expandedSize, compressedData[], diskNumber,\n internalAttributes, externalAttributes, name[], extra[], comment[].\n Use expand() to get the expanded data for each ArchiveMember.\n\n Params:\n  buffer = the entire contents of the archive.\n",
						"originalType": "(void[] buffer)",
						"endline": 727
					},
					{
						"kind": "function",
						"line": 736,
						"deco": "FC3std3zip13ArchiveMemberZAh",
						"endchar": 5,
						"char": 13,
						"parameters": [
							{
								"deco": "C3std3zip13ArchiveMember",
								"name": "de"
							}
						],
						"name": "expand",
						"comment": " Decompress the contents of archive member de and return the expanded\n data.\n\n Fills in properties extractVersion, flags, compressionMethod, time,\n crc32, compressedSize, expandedSize, expandedData[], name[], extra[].\n",
						"endline": 789
					}
				],
				"char": 7,
				"name": "ZipArchive",
				"comment": " Object representing the entire archive.\n ZipArchives are collections of ArchiveMembers.\n"
			}
		],
		"name": "std.zip",
		"comment": " Read/write data in the $(LINK2 http://www.info-_zip.org, zip archive) format.\n Makes use of the etc.c.zlib compression library.\n\n Bugs:\n      $(UL\n      $(LI Multi-disk zips not supported.)\n      $(LI Only Zip version 20 formats are supported.)\n      $(LI Only supports compression modes 0 (no compression) and 8 (deflate).)\n      $(LI Does not support encryption.)\n      $(LI $(BUGZILLA 592))\n      $(LI $(BUGZILLA 2137))\n      )\n\n Macros:\n      WIKI = Phobos/StdZip\n\n Examples:\n ---\n// Read existing zip file.\nimport std.digest.crc, std.file, std.stdio, std.zip;\n\nvoid main(string[] args)\n{\n    // read a zip file into memory\n    auto zip = new ZipArchive(read(args[1]));\n    writeln(\"Archive: \", args[1]);\n    writefln(\"%-10s  %-8s  Name\", \"Length\", \"CRC-32\");\n    // iterate over all zip members\n    foreach (name, am; zip.directory)\n    {\n        // print some data about each member\n        writefln(\"%10s  %08x  %s\", am.expandedSize, am.crc32, name);\n        assert(am.expandedData.length == 0);\n        // decompress the archive member\n        zip.expand(am);\n        assert(am.expandedData.length == am.expandedSize);\n    }\n}\n\n// Create and write new zip file.\nimport std.file: write;\nimport std.string: representation;\n\nvoid main()\n{\n    char[] data = \"Test data.\\n\".dup;\n    // Create an ArchiveMember for the test file.\n    ArchiveMember am = new ArchiveMember();\n    am.name = \"test.txt\";\n    am.expandedData(data.representation);\n    // Create an archive and add the member.\n    ZipArchive zip = new ZipArchive();\n    zip.addMember(am);\n    // Build the archive\n    void[] compressed_data = zip.build();\n    // Write to a file\n    write(\"test.zip\", compressed_data);\n}\n ---\n\n Copyright: Copyright Digital Mars 2000 - 2009.\n License:   $(WEB www.boost.org/LICENSE_1_0.txt, Boost License 1.0).\n Authors:   $(WEB digitalmars.com, Walter Bright)\n Source:    $(PHOBOSSRC std/_zip.d)\n"
	},
	{
		"kind": "module",
		"file": "../phobos/std/process.d",
		"members": [
			{
				"kind": "function",
				"line": 289,
				"deco": "FNexAAaS3std5stdio4FileS3std5stdio4FileS3std5stdio4FilexHAyaAyaE3std7process6ConfigxAaZC3std7process3Pid",
				"endchar": 1,
				"char": 5,
				"parameters": [
					{
						"deco": "xAAa",
						"name": "args"
					},
					{
						"deco": "S3std5stdio4File",
						"default": "stdin",
						"name": "stdin"
					},
					{
						"deco": "S3std5stdio4File",
						"default": "stdout",
						"name": "stdout"
					},
					{
						"deco": "S3std5stdio4File",
						"default": "stderr",
						"name": "stderr"
					},
					{
						"deco": "xHAyaAya",
						"default": "cast(const(string[string]))null",
						"name": "env"
					},
					{
						"deco": "E3std7process6Config",
						"default": "cast(Config)0",
						"name": "config"
					},
					{
						"deco": "xAa",
						"default": "null",
						"name": "workDir"
					}
				],
				"name": "spawnProcess",
				"comment": "Spawns a new _process, optionally assigning it an arbitrary set of standard\ninput, output, and error streams.\n\nThe function returns immediately, leaving the child _process to execute\nin parallel with its parent.  It is recommended to always call $(LREF wait)\non the returned $(LREF Pid), as detailed in the documentation for $(D wait).\n\nCommand_line:\nThere are four overloads of this function.  The first two take an array\nof strings, $(D args), which should contain the program name as the\nzeroth element and any command-line arguments in subsequent elements.\nThe third and fourth versions are included for convenience, and may be\nused when there are no command-line arguments.  They take a single string,\n$(D program), which specifies the program name.\n\nUnless a directory is specified in $(D args[0]) or $(D program),\n$(D spawnProcess) will search for the program in a platform-dependent\nmanner.  On POSIX systems, it will look for the executable in the\ndirectories listed in the PATH environment variable, in the order\nthey are listed.  On Windows, it will search for the executable in\nthe following sequence:\n$(OL\n    $(LI The directory from which the application loaded.)\n    $(LI The current directory for the parent process.)\n    $(LI The 32-bit Windows system directory.)\n    $(LI The 16-bit Windows system directory.)\n    $(LI The Windows directory.)\n    $(LI The directories listed in the PATH environment variable.)\n)\n---\n// Run an executable called \"prog\" located in the current working\n// directory:\nauto pid = spawnProcess(\"./prog\");\nscope(exit) wait(pid);\n// We can do something else while the program runs.  The scope guard\n// ensures that the process is waited for at the end of the scope.\n...\n\n// Run DMD on the file \"myprog.d\", specifying a few compiler switches:\nauto dmdPid = spawnProcess([\"dmd\", \"-O\", \"-release\", \"-inline\", \"myprog.d\" ]);\nif (wait(dmdPid) != 0)\n    writeln(\"Compilation failed!\");\n---\n\nEnvironment_variables:\nBy default, the child process inherits the environment of the parent\nprocess, along with any additional variables specified in the $(D env)\nparameter.  If the same variable exists in both the parent's environment\nand in $(D env), the latter takes precedence.\n\nIf the $(LREF Config.newEnv) flag is set in $(D config), the child\nprocess will $(I not) inherit the parent's environment.  Its entire\nenvironment will then be determined by $(D env).\n---\nwait(spawnProcess(\"myapp\", [\"foo\" : \"bar\"], Config.newEnv));\n---\n\nStandard_streams:\nThe optional arguments $(D stdin), $(D stdout) and $(D stderr) may\nbe used to assign arbitrary $(XREF stdio,File) objects as the standard\ninput, output and error streams, respectively, of the child process.  The\nformer must be opened for reading, while the latter two must be opened for\nwriting.  The default is for the child process to inherit the standard\nstreams of its parent.\n---\n// Run DMD on the file myprog.d, logging any error messages to a\n// file named errors.log.\nauto logFile = File(\"errors.log\", \"w\");\nauto pid = spawnProcess([\"dmd\", \"myprog.d\"],\n                        std.stdio.stdin,\n                        std.stdio.stdout,\n                        logFile);\nif (wait(pid) != 0)\n    writeln(\"Compilation failed. See errors.log for details.\");\n---\n\nNote that if you pass a $(D File) object that is $(I not)\none of the standard input/output/error streams of the parent process,\nthat stream will by default be $(I closed) in the parent process when\nthis function returns.  See the $(LREF Config) documentation below for\ninformation about how to disable this behaviour.\n\nBeware of buffering issues when passing $(D File) objects to\n$(D spawnProcess).  The child process will inherit the low-level raw\nread/write offset associated with the underlying file descriptor, but\nit will not be aware of any buffered data.  In cases where this matters\n(e.g. when a file should be aligned before being passed on to the\nchild process), it may be a good idea to use unbuffered streams, or at\nleast ensure all relevant buffers are flushed.\n\nParams:\nargs    = An array which contains the program name as the zeroth element\n          and any command-line arguments in the following elements.\nstdin   = The standard input stream of the child process.\n          This can be any $(XREF stdio,File) that is opened for reading.\n          By default the child process inherits the parent's input\n          stream.\nstdout  = The standard output stream of the child process.\n          This can be any $(XREF stdio,File) that is opened for writing.\n          By default the child process inherits the parent's output stream.\nstderr  = The standard error stream of the child process.\n          This can be any $(XREF stdio,File) that is opened for writing.\n          By default the child process inherits the parent's error stream.\nenv     = Additional environment variables for the child process.\nconfig  = Flags that control process creation. See $(LREF Config)\n          for an overview of available flags.\nworkDir = The working directory for the new process.\n          By default the child process inherits the parent's working\n          directory.\n\nReturns:\nA $(LREF Pid) object that corresponds to the spawned process.\n\nThrows:\n$(LREF ProcessException) on failure to start the process.$(BR)\n$(XREF stdio,StdioException) on failure to pass one of the streams\n    to the child process (Windows only).$(BR)\n$(CXREF exception,RangeError) if $(D args) is empty.\n",
				"originalType": "@trusted Pid(in char[][] args, File stdin = std.stdio.stdin, File stdout = std.stdio.stdout, File stderr = std.stdio.stderr, const string[string] env = null, Config config = Config.none, in char[] workDir = null)",
				"endline": 301
			},
			{
				"kind": "function",
				"line": 304,
				"deco": "FNexAAaxHAyaAyaE3std7process6ConfigxAaZC3std7process3Pid",
				"endchar": 1,
				"char": 5,
				"parameters": [
					{
						"deco": "xAAa",
						"name": "args"
					},
					{
						"deco": "xHAyaAya",
						"name": "env"
					},
					{
						"deco": "E3std7process6Config",
						"default": "cast(Config)0",
						"name": "config"
					},
					{
						"deco": "xAa",
						"default": "null",
						"name": "workDir"
					}
				],
				"name": "spawnProcess",
				"comment": "ditto\n",
				"originalType": "@trusted Pid(in char[][] args, const string[string] env, Config config = Config.none, in char[] workDir = null)",
				"endline": 317
			},
			{
				"kind": "function",
				"line": 320,
				"deco": "FNexAaS3std5stdio4FileS3std5stdio4FileS3std5stdio4FilexHAyaAyaE3std7process6ConfigxAaZC3std7process3Pid",
				"endchar": 1,
				"char": 5,
				"parameters": [
					{
						"deco": "xAa",
						"name": "program"
					},
					{
						"deco": "S3std5stdio4File",
						"default": "stdin",
						"name": "stdin"
					},
					{
						"deco": "S3std5stdio4File",
						"default": "stdout",
						"name": "stdout"
					},
					{
						"deco": "S3std5stdio4File",
						"default": "stderr",
						"name": "stderr"
					},
					{
						"deco": "xHAyaAya",
						"default": "cast(const(string[string]))null",
						"name": "env"
					},
					{
						"deco": "E3std7process6Config",
						"default": "cast(Config)0",
						"name": "config"
					},
					{
						"deco": "xAa",
						"default": "null",
						"name": "workDir"
					}
				],
				"name": "spawnProcess",
				"comment": "ditto\n",
				"originalType": "@trusted Pid(in char[] program, File stdin = std.stdio.stdin, File stdout = std.stdio.stdout, File stderr = std.stdio.stderr, const string[string] env = null, Config config = Config.none, in char[] workDir = null)",
				"endline": 331
			},
			{
				"kind": "function",
				"line": 334,
				"deco": "FNexAaxHAyaAyaE3std7process6ConfigxAaZC3std7process3Pid",
				"endchar": 1,
				"char": 5,
				"parameters": [
					{
						"deco": "xAa",
						"name": "program"
					},
					{
						"deco": "xHAyaAya",
						"name": "env"
					},
					{
						"deco": "E3std7process6Config",
						"default": "cast(Config)0",
						"name": "config"
					},
					{
						"deco": "xAa",
						"default": "null",
						"name": "workDir"
					}
				],
				"name": "spawnProcess",
				"comment": "ditto\n",
				"originalType": "@trusted Pid(in char[] program, const string[string] env, Config config = Config.none, in char[] workDir = null)",
				"endline": 341
			},
			{
				"kind": "function",
				"line": 956,
				"deco": "FNexAaS3std5stdio4FileS3std5stdio4FileS3std5stdio4FilexHAyaAyaE3std7process6ConfigxAaZC3std7process3Pid",
				"endchar": 1,
				"char": 5,
				"parameters": [
					{
						"deco": "xAa",
						"name": "command"
					},
					{
						"deco": "S3std5stdio4File",
						"default": "stdin",
						"name": "stdin"
					},
					{
						"deco": "S3std5stdio4File",
						"default": "stdout",
						"name": "stdout"
					},
					{
						"deco": "S3std5stdio4File",
						"default": "stderr",
						"name": "stderr"
					},
					{
						"deco": "xHAyaAya",
						"default": "cast(const(string[string]))null",
						"name": "env"
					},
					{
						"deco": "E3std7process6Config",
						"default": "cast(Config)0",
						"name": "config"
					},
					{
						"deco": "xAa",
						"default": "null",
						"name": "workDir"
					}
				],
				"name": "spawnShell",
				"comment": "A variation on $(LREF spawnProcess) that runs the given _command through\nthe current user's preferred _command interpreter (aka. shell).\n\nThe string $(D command) is passed verbatim to the shell, and is therefore\nsubject to its rules about _command structure, argument/filename quoting\nand escaping of special characters.\nThe path to the shell executable is determined by the $(LREF userShell)\nfunction.\n\nIn all other respects this function works just like $(D spawnProcess).\nPlease refer to the $(LREF spawnProcess) documentation for descriptions\nof the other function parameters, the return value and any exceptions\nthat may be thrown.\n---\n// Run the command/program \"foo\" on the file named \"my file.txt\", and\n// redirect its output into foo.log.\nauto pid = spawnShell(`foo \"my file.txt\" > foo.log`);\nwait(pid);\n---\n\nSee_also:\n$(LREF escapeShellCommand), which may be helpful in constructing a\nproperly quoted and escaped shell _command line for the current platform.\n",
				"originalType": "@trusted Pid(in char[] command, File stdin = std.stdio.stdin, File stdout = std.stdio.stdout, File stderr = std.stdio.stderr, const string[string] env = null, Config config = Config.none, in char[] workDir = null)",
				"endline": 982
			},
			{
				"kind": "function",
				"line": 985,
				"deco": "FNexAaxHAyaAyaE3std7process6ConfigxAaZC3std7process3Pid",
				"endchar": 1,
				"char": 5,
				"parameters": [
					{
						"deco": "xAa",
						"name": "command"
					},
					{
						"deco": "xHAyaAya",
						"name": "env"
					},
					{
						"deco": "E3std7process6Config",
						"default": "cast(Config)0",
						"name": "config"
					},
					{
						"deco": "xAa",
						"default": "null",
						"name": "workDir"
					}
				],
				"name": "spawnShell",
				"comment": "ditto\n",
				"originalType": "@trusted Pid(in char[] command, const string[string] env, Config config = Config.none, in char[] workDir = null)",
				"endline": 998
			},
			{
				"kind": "enum",
				"line": 1061,
				"members": [
					{
						"kind": "enum member",
						"line": 1071,
						"value": "1",
						"char": 5,
						"name": "newEnv",
						"comment": "    By default, the child process inherits the parent's environment,\n    and any environment variables passed to $(LREF spawnProcess) will\n    be added to it.  If this flag is set, the only variables in the\n    child process' environment will be those given to spawnProcess.\n"
					},
					{
						"kind": "enum member",
						"line": 1080,
						"value": "2",
						"char": 5,
						"name": "retainStdin",
						"comment": "    Unless the child process inherits the standard input/output/error\n    streams of its parent, one almost always wants the streams closed\n    in the parent when $(LREF spawnProcess) returns.  Therefore, by\n    default, this is done.  If this is not desirable, pass any of these\n    options to spawnProcess.\n"
					},
					{
						"kind": "enum member",
						"line": 1081,
						"value": "4",
						"char": 5,
						"name": "retainStdout",
						"comment": "ditto\n"
					},
					{
						"kind": "enum member",
						"line": 1082,
						"value": "8",
						"char": 5,
						"name": "retainStderr",
						"comment": "ditto\n"
					},
					{
						"kind": "enum member",
						"line": 1089,
						"value": "16",
						"char": 5,
						"name": "suppressConsole",
						"comment": "    On Windows, if the child process is a console application, this\n    flag will prevent the creation of a console window.  Otherwise,\n    it will be ignored. On POSIX, $(D suppressConsole) has no effect.\n"
					},
					{
						"kind": "enum member",
						"line": 1104,
						"value": "32",
						"char": 5,
						"name": "inheritFDs",
						"comment": "    On POSIX, open $(LINK2 http://en.wikipedia.org/wiki/File_descriptor,file descriptors)\n    are by default inherited by the child process.  As this may lead\n    to subtle bugs when pipes or multiple threads are involved,\n    $(LREF spawnProcess) ensures that all file descriptors except the\n    ones that correspond to standard input/output/error are closed\n    in the child process when it starts.  Use $(D inheritFDs) to prevent\n    this.\n\n    On Windows, this option has no effect, and any handles which have been\n    explicitly marked as inheritable will always be inherited by the child\n    process.\n"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "Config",
				"comment": "Flags that control the behaviour of $(LREF spawnProcess) and\n$(LREF spawnShell).\n\nUse bitwise OR to combine flags.\n\nExample:\n---\nauto logFile = File(\"myapp_error.log\", \"w\");\n\n// Start program, suppressing the console window (Windows only),\n// redirect its error stream to logFile, and leave logFile open\n// in the parent process as well.\nauto pid = spawnProcess(\"myapp\", stdin, stdout, logFile,\n                        Config.retainStderr | Config.suppressConsole);\nscope(exit)\n{\n    auto exitCode = wait(pid);\n    logFile.writeln(\"myapp exited with code \", exitCode);\n    logFile.close();\n}\n---\n"
			},
			{
				"kind": "class",
				"line": 1109,
				"members": [
					{
						"kind": "function",
						"line": 1119,
						"deco": "xFNaNbNdNfZi",
						"endchar": 5,
						"char": 19,
						"name": "processID",
						"comment": "    The process ID number.\n\n    This is a number that uniquely identifies the process on the operating\n    system, for at least as long as the process is running.  Once $(LREF wait)\n    has been called on the $(LREF Pid), this method will return an\n    invalid (negative) process ID.\n",
						"endline": 1122
					},
					{
						"kind": "function",
						"line": 1142,
						"deco": "FNaNbNdNfZi",
						"endchar": 5,
						"char": 21,
						"name": "osHandle",
						"comment": "    An operating system handle to the process.\n\n    This handle is used to specify the process in OS-specific APIs.\n    On POSIX, this function returns a $(D core.sys.posix.sys.types.pid_t)\n    with the same value as $(LREF Pid.processID), while on Windows it returns\n    a $(D core.sys.windows.windows.HANDLE).\n\n    Once $(LREF wait) has been called on the $(LREF Pid), this method\n    will return an invalid handle.\n",
						"originalType": "pure nothrow @property @safe pid_t()",
						"endline": 1145
					}
				],
				"char": 7,
				"name": "Pid",
				"comment": "A handle that corresponds to a spawned process.\n"
			},
			{
				"kind": "function",
				"line": 1300,
				"deco": "FNfC3std7process3PidZi",
				"endchar": 1,
				"char": 5,
				"parameters": [
					{
						"deco": "C3std7process3Pid",
						"name": "pid"
					}
				],
				"name": "wait",
				"comment": "Waits for the process associated with $(D pid) to terminate, and returns\nits exit status.\n\nIn general one should always _wait for child processes to terminate\nbefore exiting the parent process.  Otherwise, they may become\n\"$(WEB en.wikipedia.org/wiki/Zombie_process,zombies)\" – processes\nthat are defunct, yet still occupy a slot in the OS process table.\n\nIf the process has already terminated, this function returns directly.\nThe exit code is cached, so that if wait() is called multiple times on\nthe same $(LREF Pid) it will always return the same value.\n\nPOSIX_specific:\nIf the process is terminated by a signal, this function returns a\nnegative number whose absolute value is the signal number.\nSince POSIX restricts normal exit codes to the range 0-255, a\nnegative return value will always indicate termination by signal.\nSignal codes are defined in the $(D core.sys.posix.signal) module\n(which corresponds to the $(D signal.h) POSIX header).\n\nThrows:\n$(LREF ProcessException) on failure.\n\nExamples:\nSee the $(LREF spawnProcess) documentation.\n\nSee_also:\n$(LREF tryWait), for a non-blocking function.\n",
				"endline": 1304
			},
			{
				"kind": "function",
				"line": 1369,
				"storageClass": [
					"auto"
				],
				"deco": "FNfC3std7process3PidZS3std8typecons61__T5TupleTbVAyaa10_7465726d696e61746564TiVAyaa6_737461747573Z5Tuple",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "C3std7process3Pid",
						"name": "pid"
					}
				],
				"name": "tryWait",
				"comment": "A non-blocking version of $(LREF wait).\n\nIf the process associated with $(D pid) has already terminated,\n$(D tryWait) has the exact same effect as $(D wait).\nIn this case, it returns a tuple where the $(D terminated) field\nis set to $(D true) and the $(D status) field has the same\ninterpretation as the return value of $(D wait).\n\nIf the process has $(I not) yet terminated, this function differs\nfrom $(D wait) in that does not wait for this to happen, but instead\nreturns immediately.  The $(D terminated) field of the returned\ntuple will then be set to $(D false), while the $(D status) field\nwill always be 0 (zero).  $(D wait) or $(D tryWait) should then be\ncalled again on the same $(D Pid) at some later time; not only to\nget the exit code, but also to avoid the process becoming a \"zombie\"\nwhen it finally terminates.  (See $(LREF wait) for details).\n\nReturns:\nAn $(D std.typecons.Tuple!(bool, \"terminated\", int, \"status\")).\n\nThrows:\n$(LREF ProcessException) on failure.\n\nExample:\n---\nauto pid = spawnProcess(\"dmd myapp.d\");\nscope(exit) wait(pid);\n...\nauto dmd = tryWait(pid);\nif (dmd.terminated)\n{\n    if (dmd.status == 0) writeln(\"Compilation succeeded!\");\n    else writeln(\"Compilation failed\");\n}\nelse writeln(\"Still compiling...\");\n...\n---\nNote that in this example, the first $(D wait) call will have no\neffect if the process has already terminated by the time $(D tryWait)\nis called.  In the opposite case, however, the $(D scope) statement\nensures that we always wait for the process if it hasn't terminated\nby the time we reach the end of the scope.\n",
				"originalType": "@safe (Pid pid)",
				"endline": 1375
			},
			{
				"kind": "function",
				"line": 1428,
				"deco": "FC3std7process3PidZv",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "C3std7process3Pid",
						"name": "pid"
					}
				],
				"name": "kill",
				"comment": "Attempts to terminate the process associated with $(D pid).\n\nThe effect of this function, as well as the meaning of $(D codeOrSignal),\nis highly platform dependent.  Details are given below.  Common to all\nplatforms is that this function only $(I initiates) termination of the process,\nand returns immediately.  It does not wait for the process to end,\nnor does it guarantee that the process does in fact get terminated.\n\nAlways call $(LREF wait) to wait for a process to complete, even if $(D kill)\nhas been called on it.\n\nWindows_specific:\nThe process will be\n$(LINK2 http://msdn.microsoft.com/en-us/library/windows/desktop/ms686714%28v=vs.100%29.aspx,\nforcefully and abruptly terminated).  If $(D codeOrSignal) is specified, it\nmust be a nonnegative number which will be used as the exit code of the process.\nIf not, the process wil exit with code 1.  Do not use $(D codeOrSignal = 259),\nas this is a special value (aka. $(LINK2 http://msdn.microsoft.com/en-us/library/windows/desktop/ms683189.aspx,STILL_ACTIVE))\nused by Windows to signal that a process has in fact $(I not) terminated yet.\n---\nauto pid = spawnProcess(\"some_app\");\nkill(pid, 10);\nassert (wait(pid) == 10);\n---\n\nPOSIX_specific:\nA $(LINK2 http://en.wikipedia.org/wiki/Unix_signal,signal) will be sent to\nthe process, whose value is given by $(D codeOrSignal).  Depending on the\nsignal sent, this may or may not terminate the process.  Symbolic constants\nfor various $(LINK2 http://en.wikipedia.org/wiki/Unix_signal#POSIX_signals,\nPOSIX signals) are defined in $(D core.sys.posix.signal), which corresponds to the\n$(LINK2 http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/signal.h.html,\n$(D signal.h) POSIX header).  If $(D codeOrSignal) is omitted, the\n$(D SIGTERM) signal will be sent.  (This matches the behaviour of the\n$(LINK2 http://pubs.opengroup.org/onlinepubs/9699919799/utilities/kill.html,\n$(D _kill)) shell command.)\n---\nimport core.sys.posix.signal: SIGKILL;\nauto pid = spawnProcess(\"some_app\");\nkill(pid, SIGKILL);\nassert (wait(pid) == -SIGKILL); // Negative return value on POSIX!\n---\n\nThrows:\n$(LREF ProcessException) on error (e.g. if codeOrSignal is invalid).\n    Note that failure to terminate the process is considered a \"normal\"\n    outcome, not an error.$(BR)\n",
				"endline": 1436
			},
			{
				"kind": "function",
				"line": 1439,
				"deco": "FC3std7process3PidiZv",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "C3std7process3Pid",
						"name": "pid"
					},
					{
						"deco": "i",
						"name": "codeOrSignal"
					}
				],
				"name": "kill",
				"comment": "ditto\n",
				"endline": 1457
			},
			{
				"kind": "function",
				"line": 1528,
				"deco": "FNeZS3std7process4Pipe",
				"endchar": 1,
				"char": 6,
				"name": "pipe",
				"comment": "Creates a unidirectional _pipe.\n\nData is written to one end of the _pipe and read from the other.\n---\nauto p = pipe();\np.writeEnd.writeln(\"Hello World\");\nassert (p.readEnd.readln().chomp() == \"Hello World\");\n---\nPipes can, for example, be used for interprocess communication\nby spawning a new process and passing one end of the _pipe to\nthe child, while the parent uses the other end.\n(See also $(LREF pipeProcess) and $(LREF pipeShell) for an easier\nway of doing this.)\n---\n// Use cURL to download the dlang.org front page, pipe its\n// output to grep to extract a list of links to ZIP files,\n// and write the list to the file \"D downloads.txt\":\nauto p = pipe();\nauto outFile = File(\"D downloads.txt\", \"w\");\nauto cpid = spawnProcess([\"curl\", \"http://dlang.org/download.html\"],\n                         std.stdio.stdin, p.writeEnd);\nscope(exit) wait(cpid);\nauto gpid = spawnProcess([\"grep\", \"-o\", `http://\\S*\\.zip`],\n                         p.readEnd, outFile);\nscope(exit) wait(gpid);\n---\n\nReturns:\nA $(LREF Pipe) object that corresponds to the created _pipe.\n\nThrows:\n$(XREF stdio,StdioException) on failure.\n",
				"endline": 1543
			},
			{
				"kind": "struct",
				"line": 1579,
				"members": [
					{
						"kind": "function",
						"line": 1582,
						"deco": "FNbNdNfZS3std5stdio4File",
						"endchar": 60,
						"char": 20,
						"name": "readEnd",
						"comment": "The read end of the pipe.\n",
						"endline": 1582
					},
					{
						"kind": "function",
						"line": 1586,
						"deco": "FNbNdNfZS3std5stdio4File",
						"endchar": 62,
						"char": 20,
						"name": "writeEnd",
						"comment": "The write end of the pipe.\n",
						"endline": 1586
					},
					{
						"kind": "function",
						"line": 1603,
						"deco": "FNfZv",
						"endchar": 5,
						"char": 10,
						"name": "close",
						"comment": "    Closes both ends of the pipe.\n\n    Normally it is not necessary to do this manually, as $(XREF stdio,File)\n    objects are automatically closed when there are no more references\n    to them.\n\n    Note that if either end of the pipe has been passed to a child process,\n    it will only be closed in the parent process.  (What happens in the\n    child process is platform dependent.)\n\n    Throws:\n    $(XREF exception,ErrnoException) if an error occurs.\n",
						"endline": 1607
					}
				],
				"char": 1,
				"name": "Pipe",
				"comment": "An interface to a pipe created by the $(LREF pipe) function.\n"
			},
			{
				"kind": "function",
				"line": 1710,
				"deco": "FNfxAAaE3std7process8RedirectxHAyaAyaE3std7process6ConfigxAaZS3std7process12ProcessPipes",
				"endchar": 1,
				"char": 14,
				"parameters": [
					{
						"deco": "xAAa",
						"name": "args"
					},
					{
						"deco": "E3std7process8Redirect",
						"default": "cast(Redirect)7",
						"name": "redirect"
					},
					{
						"deco": "xHAyaAya",
						"default": "cast(const(string[string]))null",
						"name": "env"
					},
					{
						"deco": "E3std7process6Config",
						"default": "cast(Config)0",
						"name": "config"
					},
					{
						"deco": "xAa",
						"default": "null",
						"name": "workDir"
					}
				],
				"name": "pipeProcess",
				"comment": "Starts a new process, creating pipes to redirect its standard\ninput, output and/or error streams.\n\n$(D pipeProcess) and $(D pipeShell) are convenient wrappers around\n$(LREF spawnProcess) and $(LREF spawnShell), respectively, and\nautomate the task of redirecting one or more of the child process'\nstandard streams through pipes.  Like the functions they wrap,\nthese functions return immediately, leaving the child process to\nexecute in parallel with the invoking process.  It is recommended\nto always call $(LREF wait) on the returned $(LREF ProcessPipes.pid),\nas detailed in the documentation for $(D wait).\n\nThe $(D args)/$(D program)/$(D command), $(D env) and $(D config)\nparameters are forwarded straight to the underlying spawn functions,\nand we refer to their documentation for details.\n\nParams:\nargs     = An array which contains the program name as the zeroth element\n           and any command-line arguments in the following elements.\n           (See $(LREF spawnProcess) for details.)\nprogram  = The program name, $(I without) command-line arguments.\n           (See $(LREF spawnProcess) for details.)\ncommand  = A shell command which is passed verbatim to the command\n           interpreter.  (See $(LREF spawnShell) for details.)\nredirect = Flags that determine which streams are redirected, and\n           how.  See $(LREF Redirect) for an overview of available\n           flags.\nenv      = Additional environment variables for the child process.\n           (See $(LREF spawnProcess) for details.)\nconfig   = Flags that control process creation. See $(LREF Config)\n           for an overview of available flags, and note that the\n           $(D retainStd...) flags have no effect in this function.\nworkDir  = The working directory for the new process.\n           By default the child process inherits the parent's working\n           directory.\n\nReturns:\nA $(LREF ProcessPipes) object which contains $(XREF stdio,File)\nhandles that communicate with the redirected streams of the child\nprocess, along with a $(LREF Pid) object that corresponds to the\nspawned process.\n\nThrows:\n$(LREF ProcessException) on failure to start the process.$(BR)\n$(XREF stdio,StdioException) on failure to redirect any of the streams.$(BR)\n\nExample:\n---\n// my_application writes to stdout and might write to stderr\nauto pipes = pipeProcess(\"my_application\", Redirect.stdout | Redirect.stderr);\nscope(exit) wait(pipes.pid);\n\n// Store lines of output.\nstring[] output;\nforeach (line; pipes.stdout.byLine) output ~= line.idup;\n\n// Store lines of errors.\nstring[] errors;\nforeach (line; pipes.stderr.byLine) errors ~= line.idup;\n\n\n// sendmail expects to read from stdin\npipes = pipeProcess([\"/usr/bin/sendmail\", \"-t\"], Redirect.stdin);\npipes.stdin.writeln(\"To: you\");\npipes.stdin.writeln(\"From: me\");\npipes.stdin.writeln(\"Subject: dlang\");\npipes.stdin.writeln(\"\");\npipes.stdin.writeln(message);\n\n// a single period tells sendmail we are finished\npipes.stdin.writeln(\".\");\n\n// but at this point sendmail might not see it, we need to flush\npipes.stdin.flush();\n\n// sendmail happens to exit on \".\", but some you have to close the file:\npipes.stdin.close();\n\n// otherwise this wait will wait forever\nwait(pipes.pid);\n\n---\n",
				"originalType": "@safe ProcessPipes(in char[][] args, Redirect redirect = Redirect.all, const string[string] env = null, Config config = Config.none, in char[] workDir = null)",
				"endline": 1718
			},
			{
				"kind": "function",
				"line": 1721,
				"deco": "FNfxAaE3std7process8RedirectxHAyaAyaE3std7process6ConfigxAaZS3std7process12ProcessPipes",
				"endchar": 1,
				"char": 14,
				"parameters": [
					{
						"deco": "xAa",
						"name": "program"
					},
					{
						"deco": "E3std7process8Redirect",
						"default": "cast(Redirect)7",
						"name": "redirect"
					},
					{
						"deco": "xHAyaAya",
						"default": "cast(const(string[string]))null",
						"name": "env"
					},
					{
						"deco": "E3std7process6Config",
						"default": "cast(Config)0",
						"name": "config"
					},
					{
						"deco": "xAa",
						"default": "null",
						"name": "workDir"
					}
				],
				"name": "pipeProcess",
				"comment": "ditto\n",
				"originalType": "@safe ProcessPipes(in char[] program, Redirect redirect = Redirect.all, const string[string] env = null, Config config = Config.none, in char[] workDir = null)",
				"endline": 1729
			},
			{
				"kind": "function",
				"line": 1732,
				"deco": "FNfxAaE3std7process8RedirectxHAyaAyaE3std7process6ConfigxAaZS3std7process12ProcessPipes",
				"endchar": 1,
				"char": 14,
				"parameters": [
					{
						"deco": "xAa",
						"name": "command"
					},
					{
						"deco": "E3std7process8Redirect",
						"default": "cast(Redirect)7",
						"name": "redirect"
					},
					{
						"deco": "xHAyaAya",
						"default": "cast(const(string[string]))null",
						"name": "env"
					},
					{
						"deco": "E3std7process6Config",
						"default": "cast(Config)0",
						"name": "config"
					},
					{
						"deco": "xAa",
						"default": "null",
						"name": "workDir"
					}
				],
				"name": "pipeShell",
				"comment": "ditto\n",
				"originalType": "@safe ProcessPipes(in char[] command, Redirect redirect = Redirect.all, const string[string] env = null, Config config = Config.none, in char[] workDir = null)",
				"endline": 1740
			},
			{
				"kind": "enum",
				"line": 1825,
				"members": [
					{
						"kind": "enum member",
						"line": 1828,
						"value": "1",
						"char": 5,
						"name": "stdin",
						"comment": "Redirect the standard input, output or error streams, respectively.\n"
					},
					{
						"kind": "enum member",
						"line": 1829,
						"value": "2",
						"char": 5,
						"name": "stdout",
						"comment": "ditto\n"
					},
					{
						"kind": "enum member",
						"line": 1830,
						"value": "4",
						"char": 5,
						"name": "stderr",
						"comment": "ditto\n"
					},
					{
						"kind": "enum member",
						"line": 1836,
						"value": "7",
						"char": 5,
						"name": "all",
						"comment": "    Redirect _all three streams.  This is equivalent to\n    $(D Redirect.stdin | Redirect.stdout | Redirect.stderr).\n"
					},
					{
						"kind": "enum member",
						"line": 1842,
						"value": "8",
						"char": 5,
						"name": "stderrToStdout",
						"comment": "    Redirect the standard error stream into the standard output stream.\n    This can not be combined with $(D Redirect.stderr).\n"
					},
					{
						"kind": "enum member",
						"line": 1848,
						"value": "16",
						"char": 5,
						"name": "stdoutToStderr",
						"comment": "    Redirect the standard output stream into the standard error stream.\n    This can not be combined with $(D Redirect.stdout).\n"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "Redirect",
				"comment": "Flags that can be passed to $(LREF pipeProcess) and $(LREF pipeShell)\nto specify which of the child process' standard streams are redirected.\nUse bitwise OR to combine flags.\n"
			},
			{
				"kind": "struct",
				"line": 1931,
				"members": [
					{
						"kind": "function",
						"line": 1934,
						"deco": "FNbNdNfZC3std7process3Pid",
						"endchar": 5,
						"char": 19,
						"name": "pid",
						"comment": "The $(LREF Pid) of the child process.\n",
						"endline": 1938
					},
					{
						"kind": "function",
						"line": 1948,
						"deco": "FNbNdNfZS3std5stdio4File",
						"endchar": 5,
						"char": 20,
						"name": "stdin",
						"comment": "    An $(XREF stdio,File) that allows writing to the child process'\n    standard input stream.\n\n    Throws:\n    $(OBJECTREF Error) if the child process' standard input stream hasn't\n    been redirected.\n",
						"endline": 1954
					},
					{
						"kind": "function",
						"line": 1964,
						"deco": "FNbNdNfZS3std5stdio4File",
						"endchar": 5,
						"char": 20,
						"name": "stdout",
						"comment": "    An $(XREF stdio,File) that allows reading from the child process'\n    standard output stream.\n\n    Throws:\n    $(OBJECTREF Error) if the child process' standard output stream hasn't\n    been redirected.\n",
						"endline": 1970
					},
					{
						"kind": "function",
						"line": 1980,
						"deco": "FNbNdNfZS3std5stdio4File",
						"endchar": 5,
						"char": 20,
						"name": "stderr",
						"comment": "    An $(XREF stdio,File) that allows reading from the child process'\n    standard error stream.\n\n    Throws:\n    $(OBJECTREF Error) if the child process' standard error stream hasn't\n    been redirected.\n",
						"endline": 1986
					}
				],
				"char": 1,
				"name": "ProcessPipes",
				"comment": "Object which contains $(XREF stdio,File) handles that allow communication\nwith a child process through its standard streams.\n"
			},
			{
				"kind": "function",
				"line": 2049,
				"storageClass": [
					"auto"
				],
				"deco": "FNexAAaxHAyaAyaE3std7process6ConfigmxAaZS3std8typecons54__T5TupleTiVAyaa6_737461747573TAyaVAyaa6_6f7574707574Z5Tuple",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "xAAa",
						"name": "args"
					},
					{
						"deco": "xHAyaAya",
						"default": "cast(const(string[string]))null",
						"name": "env"
					},
					{
						"deco": "E3std7process6Config",
						"default": "cast(Config)0",
						"name": "config"
					},
					{
						"deco": "m",
						"default": "18446744073709551615LU",
						"name": "maxOutput"
					},
					{
						"deco": "xAa",
						"default": "null",
						"name": "workDir"
					}
				],
				"name": "execute",
				"comment": "Executes the given program or shell command and returns its exit\ncode and output.\n\n$(D execute) and $(D executeShell) start a new process using\n$(LREF spawnProcess) and $(LREF spawnShell), respectively, and wait\nfor the process to complete before returning.  The functions capture\nwhat the child process prints to both its standard output and\nstandard error streams, and return this together with its exit code.\n---\nauto dmd = execute([\"dmd\", \"myapp.d\"]);\nif (dmd.status != 0) writeln(\"Compilation failed:\\n\", dmd.output);\n\nauto ls = executeShell(\"ls -l\");\nif (ls.status != 0) writeln(\"Failed to retrieve file listing\");\nelse writeln(ls.output);\n---\n\nThe $(D args)/$(D program)/$(D command), $(D env) and $(D config)\nparameters are forwarded straight to the underlying spawn functions,\nand we refer to their documentation for details.\n\nParams:\nargs      = An array which contains the program name as the zeroth element\n            and any command-line arguments in the following elements.\n            (See $(LREF spawnProcess) for details.)\nprogram   = The program name, $(I without) command-line arguments.\n            (See $(LREF spawnProcess) for details.)\ncommand   = A shell command which is passed verbatim to the command\n            interpreter.  (See $(LREF spawnShell) for details.)\nenv       = Additional environment variables for the child process.\n            (See $(LREF spawnProcess) for details.)\nconfig    = Flags that control process creation. See $(LREF Config)\n            for an overview of available flags, and note that the\n            $(D retainStd...) flags have no effect in this function.\nmaxOutput = The maximum number of bytes of output that should be\n            captured.\nworkDir   = The working directory for the new process.\n            By default the child process inherits the parent's working\n            directory.\n\nReturns:\nAn $(D std.typecons.Tuple!(int, \"status\", string, \"output\")).\n\nPOSIX_specific:\nIf the process is terminated by a signal, the $(D status) field of\nthe return value will contain a negative number whose absolute\nvalue is the signal number.  (See $(LREF wait) for details.)\n\nThrows:\n$(LREF ProcessException) on failure to start the process.$(BR)\n$(XREF stdio,StdioException) on failure to capture output.\n",
				"originalType": "@trusted (in char[][] args, const string[string] env = null, Config config = Config.none, size_t maxOutput = size_t.max, in char[] workDir = null)",
				"endline": 2057
			},
			{
				"kind": "function",
				"line": 2060,
				"storageClass": [
					"auto"
				],
				"deco": "FNexAaxHAyaAyaE3std7process6ConfigmxAaZS3std8typecons54__T5TupleTiVAyaa6_737461747573TAyaVAyaa6_6f7574707574Z5Tuple",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "xAa",
						"name": "program"
					},
					{
						"deco": "xHAyaAya",
						"default": "cast(const(string[string]))null",
						"name": "env"
					},
					{
						"deco": "E3std7process6Config",
						"default": "cast(Config)0",
						"name": "config"
					},
					{
						"deco": "m",
						"default": "18446744073709551615LU",
						"name": "maxOutput"
					},
					{
						"deco": "xAa",
						"default": "null",
						"name": "workDir"
					}
				],
				"name": "execute",
				"comment": "ditto\n",
				"originalType": "@trusted (in char[] program, const string[string] env = null, Config config = Config.none, size_t maxOutput = size_t.max, in char[] workDir = null)",
				"endline": 2068
			},
			{
				"kind": "function",
				"line": 2071,
				"storageClass": [
					"auto"
				],
				"deco": "FNexAaxHAyaAyaE3std7process6ConfigmxAaZS3std8typecons54__T5TupleTiVAyaa6_737461747573TAyaVAyaa6_6f7574707574Z5Tuple",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "xAa",
						"name": "command"
					},
					{
						"deco": "xHAyaAya",
						"default": "cast(const(string[string]))null",
						"name": "env"
					},
					{
						"deco": "E3std7process6Config",
						"default": "cast(Config)0",
						"name": "config"
					},
					{
						"deco": "m",
						"default": "18446744073709551615LU",
						"name": "maxOutput"
					},
					{
						"deco": "xAa",
						"default": "null",
						"name": "workDir"
					}
				],
				"name": "executeShell",
				"comment": "ditto\n",
				"originalType": "@trusted (in char[] command, const string[string] env = null, Config config = Config.none, size_t maxOutput = size_t.max, in char[] workDir = null)",
				"endline": 2079
			},
			{
				"kind": "class",
				"line": 2169,
				"base": "object.Exception",
				"members": [],
				"char": 1,
				"name": "ProcessException",
				"comment": "An exception that signals a problem with starting or waiting for a process.\n"
			},
			{
				"kind": "function",
				"line": 2223,
				"deco": "FNdNfZAya",
				"endchar": 1,
				"char": 18,
				"name": "userShell",
				"comment": "Determines the path to the current user's default command interpreter.\n\nOn Windows, this function returns the contents of the COMSPEC environment\nvariable, if it exists.  Otherwise, it returns the string $(D \"cmd.exe\").\n\nOn POSIX, $(D userShell) returns the contents of the SHELL environment\nvariable, if it exists and is non-empty.  Otherwise, it returns\n$(D \"/bin/sh\").\n",
				"endline": 2228
			},
			{
				"kind": "function",
				"line": 2238,
				"deco": "FNbNdNeZi",
				"endchar": 1,
				"char": 15,
				"name": "thisProcessID",
				"comment": "Returns the process ID number of the current process.\n",
				"endline": 2242
			},
			{
				"kind": "function",
				"line": 2349,
				"deco": "FNaNfxAAaXAya",
				"endchar": 1,
				"char": 8,
				"parameters": [
					{
						"deco": "xAAa",
						"name": "args"
					}
				],
				"name": "escapeShellCommand",
				"comment": "Escapes an argv-style argument array to be used with $(LREF spawnShell),\n$(LREF pipeShell) or $(LREF executeShell).\n---\nstring url = \"http://dlang.org/\";\nexecuteShell(escapeShellCommand(\"wget\", url, \"-O\", \"dlang-index.html\"));\n---\n\nConcatenate multiple $(D escapeShellCommand) and\n$(LREF escapeShellFileName) results to use shell redirection or\npiping operators.\n---\nexecuteShell(\n    escapeShellCommand(\"curl\", \"http://dlang.org/download.html\") ~\n    \"|\" ~\n    escapeShellCommand(\"grep\", \"-o\", `http://\\S*\\.zip`) ~\n    \">\" ~\n    escapeShellFileName(\"D download links.txt\"));\n---\n\nThrows:\n$(OBJECTREF Exception) if any part of the command line contains unescapable\ncharacters (NUL on all platforms, as well as CR and LF on Windows).\n",
				"originalType": "pure @safe string(in char[][] args...)",
				"endline": 2370
			},
			{
				"kind": "function",
				"line": 2494,
				"deco": "FNaNbNexAaZAya",
				"endchar": 1,
				"char": 8,
				"parameters": [
					{
						"deco": "xAa",
						"name": "arg"
					}
				],
				"name": "escapeWindowsArgument",
				"comment": "Quotes a command-line argument in a manner conforming to the behavior of\n$(LINK2 http://msdn.microsoft.com/en-us/library/windows/desktop/bb776391(v=vs.85).aspx,\nCommandLineToArgvW).\n",
				"originalType": "pure nothrow @trusted string(in char[] arg)",
				"endline": 2502
			},
			{
				"kind": "function",
				"line": 2679,
				"deco": "FNaNbNexAaZAya",
				"endchar": 1,
				"char": 8,
				"parameters": [
					{
						"deco": "xAa",
						"name": "fileName"
					}
				],
				"name": "escapeShellFileName",
				"comment": "Escapes a filename to be used for shell redirection with $(LREF spawnShell),\n$(LREF pipeShell) or $(LREF executeShell).\n",
				"originalType": "pure nothrow @trusted string(in char[] fileName)",
				"endline": 2700
			},
			{
				"kind": "class",
				"line": 2824,
				"members": [
					{
						"kind": "function",
						"line": 2841,
						"storageClass": [
							"static"
						],
						"deco": "FNfxAaZAya",
						"endchar": 5,
						"char": 12,
						"parameters": [
							{
								"deco": "xAa",
								"name": "name"
							}
						],
						"name": "opIndex",
						"comment": "    Retrieves the value of the environment variable with the given $(D name).\n    ---\n    auto path = environment[\"PATH\"];\n    ---\n\n    Throws:\n    $(OBJECTREF Exception) if the environment variable does not exist,\n    or $(XREF utf,UTFException) if the variable contains invalid UTF-16\n    characters (Windows only).\n\n    See_also:\n    $(LREF environment.get), which doesn't throw on failure.\n",
						"originalType": "@safe string(in char[] name)",
						"endline": 2846
					},
					{
						"kind": "function",
						"line": 2873,
						"storageClass": [
							"static"
						],
						"deco": "FNfxAaAyaZAya",
						"endchar": 5,
						"char": 12,
						"parameters": [
							{
								"deco": "xAa",
								"name": "name"
							},
							{
								"deco": "Aya",
								"default": "null",
								"name": "defaultValue"
							}
						],
						"name": "get",
						"comment": "    Retrieves the value of the environment variable with the given $(D name),\n    or a default value if the variable doesn't exist.\n\n    Unlike $(LREF environment.opIndex), this function never throws.\n    ---\n    auto sh = environment.get(\"SHELL\", \"/bin/sh\");\n    ---\n    This function is also useful in checking for the existence of an\n    environment variable.\n    ---\n    auto myVar = environment.get(\"MYVAR\");\n    if (myVar is null)\n    {\n        // Environment variable doesn't exist.\n        // Note that we have to use 'is' for the comparison, since\n        // myVar == null is also true if the variable exists but is\n        // empty.\n    }\n    ---\n\n    Throws:\n    $(XREF utf,UTFException) if the variable contains invalid UTF-16\n    characters (Windows only).\n",
						"originalType": "@safe string(in char[] name, string defaultValue = null)",
						"endline": 2878
					},
					{
						"kind": "function",
						"line": 2894,
						"storageClass": [
							"static"
						],
						"deco": "FNeNgAaxAaZANga",
						"endchar": 5,
						"char": 19,
						"parameters": [
							{
								"deco": "NgAa",
								"name": "value"
							},
							{
								"deco": "xAa",
								"name": "name"
							}
						],
						"name": "opIndexAssign",
						"comment": "    Assigns the given $(D value) to the environment variable with the given\n    $(D name).\n\n    If the variable does not exist, it will be created. If it already exists,\n    it will be overwritten.\n    ---\n    environment[\"foo\"] = \"bar\";\n    ---\n\n    Throws:\n    $(OBJECTREF Exception) if the environment variable could not be added\n        (e.g. if the name is invalid).\n",
						"originalType": "@trusted inout(char)[](inout char[] value, in char[] name)",
						"endline": 2919
					},
					{
						"kind": "function",
						"line": 2927,
						"storageClass": [
							"static"
						],
						"deco": "FNbNiNexAaZv",
						"endchar": 5,
						"char": 10,
						"parameters": [
							{
								"deco": "xAa",
								"name": "name"
							}
						],
						"name": "remove",
						"comment": "    Removes the environment variable with the given $(D name).\n\n    If the variable isn't in the environment, this function returns\n    successfully without doing anything.\n",
						"originalType": "nothrow @nogc @trusted void(in char[] name)",
						"endline": 2932
					},
					{
						"kind": "function",
						"line": 2946,
						"storageClass": [
							"static"
						],
						"deco": "FNeZHAyaAya",
						"endchar": 5,
						"char": 20,
						"name": "toAA",
						"comment": "    Copies all environment variables into an associative array.\n\n    Windows_specific:\n    While Windows environment variable names are case insensitive, D's\n    built-in associative arrays are not.  This function will store all\n    variable names in uppercase (e.g. $(D PATH)).\n\n    Throws:\n    $(OBJECTREF Exception) if the environment variables could not\n        be retrieved (Windows only).\n",
						"endline": 3000
					}
				],
				"char": 16,
				"name": "environment",
				"comment": "Manipulates _environment variables using an associative-array-like\ninterface.\n\nThis class contains only static methods, and cannot be instantiated.\nSee below for examples of use.\n"
			},
			{
				"kind": "function",
				"line": 3166,
				"storageClass": [
					"deprecated"
				],
				"deco": "FAyaZi",
				"endchar": 1,
				"char": 5,
				"parameters": [
					{
						"deco": "Aya",
						"name": "command"
					}
				],
				"name": "system",
				"comment": "   Execute $(D command) in a _command shell.\n\n   $(RED Deprecated. Please use $(LREF spawnShell) or $(LREF executeShell)\n         instead. This function will be removed in August 2015.)\n\n   Returns: If $(D command) is null, returns nonzero if the _command\n   interpreter is found, and zero otherwise. If $(D command) is not\n   null, returns -1 on error, or the exit status of command (which may\n   in turn signal an error in command's execution).\n\n   Note: On Unix systems, the homonym C function (which is accessible\n   to D programs as $(LINK2 core_stdc_stdlib.html, core.stdc.stdlib._system))\n   returns a code in the same format as $(LUCKY waitpid, waitpid),\n   meaning that C programs must use the $(D WEXITSTATUS) macro to\n   extract the actual exit code from the $(D system) call. D's $(D\n   system) automatically extracts the exit status.\n\n",
				"endline": 3183
			},
			{
				"kind": "function",
				"line": 3371,
				"deco": "FxAyaxAAyaZi",
				"char": 9,
				"parameters": [
					{
						"deco": "xAya",
						"name": "pathname"
					},
					{
						"deco": "xAAya",
						"name": "argv"
					}
				],
				"name": "execv",
				"comment": "    Replaces the current process by executing a command, $(D pathname), with\n    the arguments in $(D argv).\n\n    $(RED Deprecated on Windows.  From August 2015, these functions will\n    only be available on POSIX platforms. The reason is that they never\n    did what the documentation claimed they did, nor is it technically\n    possible to implement such behaviour on Windows. See below for more\n    information.)\n\n    Typically, the first element of $(D argv) is\n    the command being executed, i.e. $(D argv[0] == pathname). The 'p'\n    versions of $(D exec) search the PATH environment variable for $(D\n    pathname). The 'e' versions additionally take the new process'\n    environment variables as an array of strings of the form key=value.\n\n    Does not return on success (the current process will have been\n    replaced). Returns -1 on failure with no indication of the\n    underlying error.\n\n    Windows_specific:\n    These functions are only supported on POSIX platforms, as the Windows\n    operating systems do not provide the ability to overwrite the current\n    process image with another. In single-threaded programs it is possible\n    to approximate the effect of $(D execv*) by using $(LREF spawnProcess)\n    and terminating the current process once the child process has returned.\n    For example:\n    ---\n    auto commandLine = [ \"program\", \"arg1\", \"arg2\" ];\n    version (Posix)\n    {\n        execv(commandLine[0], commandLine);\n        throw new Exception(\"Failed to execute program\");\n    }\n    else version (Windows)\n    {\n        import core.stdc.stdlib: _exit;\n        _exit(wait(spawnProcess(commandLine)));\n    }\n    ---\n    This is, however, NOT equivalent to POSIX' $(D execv*).  For one thing, the\n    executed program is started as a separate process, with all this entails.\n    Secondly, in a multithreaded program, other threads will continue to do\n    work while the current thread is waiting for the child process to complete.\n\n    A better option may sometimes be to terminate the current program immediately\n    after spawning the child process.  This is the behaviour exhibited by the\n    $(LINK2 http://msdn.microsoft.com/en-us/library/431x4c1w.aspx,$(D __exec))\n    functions in Microsoft's C runtime library, and it is how D's now-deprecated\n    Windows $(D execv*) functions work. Example:\n    ---\n    auto commandLine = [ \"program\", \"arg1\", \"arg2\" ];\n    version (Posix)\n    {\n        execv(commandLine[0], commandLine);\n        throw new Exception(\"Failed to execute program\");\n    }\n    else version (Windows)\n    {\n        spawnProcess(commandLine);\n        import core.stdc.stdlib: _exit;\n        _exit(0);\n    }\n    ---\n",
				"originalType": "int(in string pathname, in string[] argv)"
			},
			{
				"kind": "function",
				"line": 3373,
				"deco": "FxAyaxAAyaxAAyaZi",
				"char": 9,
				"parameters": [
					{
						"deco": "xAya",
						"name": "pathname"
					},
					{
						"deco": "xAAya",
						"name": "argv"
					},
					{
						"deco": "xAAya",
						"name": "envp"
					}
				],
				"name": "execve",
				"comment": "ditto\n",
				"originalType": "int(in string pathname, in string[] argv, in string[] envp)"
			},
			{
				"kind": "function",
				"line": 3375,
				"deco": "FxAyaxAAyaZi",
				"char": 9,
				"parameters": [
					{
						"deco": "xAya",
						"name": "pathname"
					},
					{
						"deco": "xAAya",
						"name": "argv"
					}
				],
				"name": "execvp",
				"comment": "ditto\n",
				"originalType": "int(in string pathname, in string[] argv)"
			},
			{
				"kind": "function",
				"line": 3377,
				"deco": "FxAyaxAAyaxAAyaZi",
				"char": 9,
				"parameters": [
					{
						"deco": "xAya",
						"name": "pathname"
					},
					{
						"deco": "xAAya",
						"name": "argv"
					},
					{
						"deco": "xAAya",
						"name": "envp"
					}
				],
				"name": "execvpe",
				"comment": "ditto\n",
				"originalType": "int(in string pathname, in string[] argv, in string[] envp)"
			},
			{
				"kind": "alias",
				"line": 3516,
				"storageClass": [
					"deprecated"
				],
				"char": 1,
				"name": "getpid",
				"comment": " Returns the process ID of the calling process, which is guaranteed to be\n unique on the system. This call is always successful.\n\n $(RED Deprecated.  Please use $(LREF thisProcessID) instead.\n       This function will be removed in August 2015.)\n\n Example:\n ---\n writefln(\"Current process id: %s\", getpid());\n ---\n"
			},
			{
				"kind": "function",
				"line": 3540,
				"storageClass": [
					"deprecated"
				],
				"deco": "FAyaZAya",
				"endchar": 1,
				"char": 8,
				"parameters": [
					{
						"deco": "Aya",
						"name": "cmd"
					}
				],
				"name": "shell",
				"comment": "   Runs $(D_PARAM cmd) in a shell and returns its standard output. If\n   the process could not be started or exits with an error code,\n   throws ErrnoException.\n\n   $(RED Deprecated.  Please use $(LREF executeShell) instead.\n         This function will be removed in August 2015.)\n\n   Example:\n\n   ----\n   auto tempFilename = chomp(shell(\"mcookie\"));\n   auto f = enforce(fopen(tempFilename), \"w\");\n   scope(exit)\n   {\n       fclose(f) == 0 || assert(false);\n       system(escapeShellCommand(\"rm\", tempFilename));\n   }\n   ... use f ...\n   ----\n",
				"endline": 3576
			},
			{
				"kind": "function",
				"line": 3603,
				"storageClass": [
					"deprecated"
				],
				"deco": "FNbxAaZAya",
				"endchar": 1,
				"char": 8,
				"parameters": [
					{
						"deco": "xAa",
						"name": "name"
					}
				],
				"name": "getenv",
				"comment": "Gets the value of environment variable $(D name) as a string. Calls\n$(LINK2 core_stdc_stdlib.html#_getenv, core.stdc.stdlib._getenv)\ninternally.\n\n$(RED Deprecated. Please use $(LREF environment.opIndex) or\n      $(LREF environment.get) instead.  This function will be\n      removed in August 2015.)\n",
				"originalType": "nothrow string(in char[] name)",
				"endline": 3612
			},
			{
				"kind": "function",
				"line": 3624,
				"storageClass": [
					"deprecated"
				],
				"deco": "FxAaxAabZv",
				"char": 34,
				"parameters": [
					{
						"deco": "xAa",
						"name": "name"
					},
					{
						"deco": "xAa",
						"name": "value"
					},
					{
						"deco": "b",
						"name": "overwrite"
					}
				],
				"name": "setenv",
				"comment": "Sets the value of environment variable $(D name) to $(D value). If the\nvalue was written, or the variable was already present and $(D\noverwrite) is false, returns normally. Otherwise, it throws an\nexception. Calls $(LINK2 core_sys_posix_stdlib.html#_setenv,\ncore.sys.posix.stdlib._setenv) internally.\n\n$(RED Deprecated. Please use $(LREF environment.opIndexAssign) instead.\n      This function will be removed in August 2015.)\n",
				"originalType": "void(in char[] name, in char[] value, bool overwrite)"
			},
			{
				"kind": "function",
				"line": 3640,
				"storageClass": [
					"deprecated"
				],
				"deco": "FxAaZv",
				"char": 34,
				"parameters": [
					{
						"deco": "xAa",
						"name": "name"
					}
				],
				"name": "unsetenv",
				"comment": "Removes variable $(D name) from the environment. Calls $(LINK2\ncore_sys_posix_stdlib.html#_unsetenv, core.sys.posix.stdlib._unsetenv) internally.\n\n$(RED Deprecated. Please use $(LREF environment.remove) instead.\n      This function will be removed in August 2015.)\n",
				"originalType": "void(in char[] name)"
			},
			{
				"kind": "function",
				"line": 3664,
				"deco": "FAyaZv",
				"char": 10,
				"parameters": [
					{
						"deco": "Aya",
						"name": "url"
					}
				],
				"name": "browse",
				"comment": " Start up the browser and set it to viewing the page at url.\n"
			}
		],
		"name": "std.process",
		"comment": "Functions for starting and interacting with other processes, and for\nworking with the current _process' execution environment.\n\nProcess_handling:\n$(UL $(LI\n    $(LREF spawnProcess) spawns a new _process, optionally assigning it an\n    arbitrary set of standard input, output, and error streams.\n    The function returns immediately, leaving the child _process to execute\n    in parallel with its parent.  All other functions in this module that\n    spawn processes are built around $(D spawnProcess).)\n$(LI\n    $(LREF wait) makes the parent _process wait for a child _process to\n    terminate.  In general one should always do this, to avoid\n    child processes becoming \"zombies\" when the parent _process exits.\n    Scope guards are perfect for this – see the $(LREF spawnProcess)\n    documentation for examples.  $(LREF tryWait) is similar to $(D wait),\n    but does not block if the _process has not yet terminated.)\n$(LI\n    $(LREF pipeProcess) also spawns a child _process which runs\n    in parallel with its parent.  However, instead of taking\n    arbitrary streams, it automatically creates a set of\n    pipes that allow the parent to communicate with the child\n    through the child's standard input, output, and/or error streams.\n    This function corresponds roughly to C's $(D popen) function.)\n$(LI\n    $(LREF execute) starts a new _process and waits for it\n    to complete before returning.  Additionally, it captures\n    the _process' standard output and error streams and returns\n    the output of these as a string.)\n$(LI\n    $(LREF spawnShell), $(LREF pipeShell) and $(LREF executeShell) work like\n    $(D spawnProcess), $(D pipeProcess) and $(D execute), respectively,\n    except that they take a single command string and run it through\n    the current user's default command interpreter.\n    $(D executeShell) corresponds roughly to C's $(D system) function.)\n$(LI\n    $(LREF kill) attempts to terminate a running _process.)\n)\n\nThe following table compactly summarises the different _process creation\nfunctions and how they relate to each other:\n$(BOOKTABLE,\n    $(TR $(TH )\n         $(TH Runs program directly)\n         $(TH Runs shell command))\n    $(TR $(TD Low-level _process creation)\n         $(TD $(LREF spawnProcess))\n         $(TD $(LREF spawnShell)))\n    $(TR $(TD Automatic input/output redirection using pipes)\n         $(TD $(LREF pipeProcess))\n         $(TD $(LREF pipeShell)))\n    $(TR $(TD Execute and wait for completion, collect output)\n         $(TD $(LREF execute))\n         $(TD $(LREF executeShell)))\n)\n\nOther_functionality:\n$(UL\n$(LI\n    $(LREF pipe) is used to create unidirectional pipes.)\n$(LI\n    $(LREF environment) is an interface through which the current _process'\n    environment variables can be read and manipulated.)\n$(LI\n    $(LREF escapeShellCommand) and $(LREF escapeShellFileName) are useful\n    for constructing shell command lines in a portable way.)\n)\n\nAuthors:\n    $(LINK2 https://github.com/kyllingstad, Lars Tandle Kyllingstad),\n    $(LINK2 https://github.com/schveiguy, Steven Schveighoffer),\n    $(WEB thecybershadow.net, Vladimir Panteleev)\nCopyright:\n    Copyright (c) 2013, the authors. All rights reserved.\nLicense:\n   $(WEB www.boost.org/LICENSE_1_0.txt, Boost License 1.0).\nSource:\n    $(PHOBOSSRC std/_process.d)\nMacros:\n    WIKI=Phobos/StdProcess\n    OBJECTREF=$(D $(LINK2 object.html#$0,$0))\n    LREF=$(D $(LINK2 #.$0,$0))\n"
	},
	{
		"kind": "module",
		"file": "../phobos/std/file.d",
		"members": [
			{
				"kind": "class",
				"line": 96,
				"base": "object.Exception",
				"members": [
					{
						"kind": "variable",
						"line": 101,
						"storageClass": [
							"immutable"
						],
						"deco": "yk",
						"char": 20,
						"name": "errno",
						"comment": "        OS error code.\n",
						"originalType": "uint",
						"offset": 72
					},
					{
						"kind": "constructor",
						"line": 112,
						"deco": "FNaNfxAaxAaAyamZC3std4file13FileException",
						"endchar": 5,
						"char": 5,
						"parameters": [
							{
								"deco": "xAa",
								"name": "name"
							},
							{
								"deco": "xAa",
								"name": "msg"
							},
							{
								"deco": "Aya",
								"default": "__FILE__",
								"name": "file"
							},
							{
								"deco": "m",
								"default": "cast(ulong)__LINE__",
								"name": "line"
							}
						],
						"name": "this",
						"comment": "        Constructor which takes an error message.\n\n        Params:\n            name = Name of file for which the error occurred.\n            msg  = Message describing the error.\n            file = The file where the error occurred.\n            line = The line where the error occurred.\n",
						"originalType": "pure @safe (in char[] name, in char[] msg, string file = __FILE__, size_t line = __LINE__)",
						"endline": 120
					},
					{
						"kind": "constructor",
						"line": 142,
						"deco": "FNexAakAyamZC3std4file13FileException",
						"endchar": 5,
						"char": 25,
						"parameters": [
							{
								"deco": "xAa",
								"name": "name"
							},
							{
								"deco": "k",
								"default": "cast(uint)errno()",
								"name": "errno"
							},
							{
								"deco": "Aya",
								"default": "__FILE__",
								"name": "file"
							},
							{
								"deco": "m",
								"default": "cast(ulong)__LINE__",
								"name": "line"
							}
						],
						"name": "this",
						"comment": "        Constructor which takes the error number ($(LUCKY GetLastError)\n        in Windows, $(D_PARAM errno) in Posix).\n\n        Params:\n            name  = Name of file for which the error occurred.\n            errno = The error number.\n            file  = The file where the error occurred.\n                    Defaults to $(D __FILE__).\n            line  = The line where the error occurred.\n                    Defaults to $(D __LINE__).\n",
						"originalType": "@trusted (in char[] name, uint errno = .errno, string file = __FILE__, size_t line = __LINE__)",
						"endline": 150
					}
				],
				"char": 1,
				"name": "FileException",
				"comment": "    Exception thrown for file I/O errors.\n"
			},
			{
				"kind": "function",
				"line": 194,
				"deco": "FNexAamZAv",
				"endchar": 1,
				"char": 24,
				"parameters": [
					{
						"deco": "xAa",
						"name": "name"
					},
					{
						"deco": "m",
						"default": "18446744073709551615LU",
						"name": "upTo"
					}
				],
				"name": "read",
				"comment": "Read entire contents of file $(D name) and returns it as an untyped\narray. If the file size is larger than $(D upTo), only $(D upTo)\nbytes are read.\n\nExample:\n\n----\nimport std.file, std.stdio;\nvoid main()\n{\n   auto bytes = cast(ubyte[]) read(\"filename\", 5);\n   if (bytes.length == 5)\n       writefln(\"The fifth byte of the file is 0x%x\", bytes[4]);\n}\n----\n\nReturns: Untyped array of bytes _read.\n\nThrows: $(D FileException) on error.\n",
				"originalType": "@trusted void[](in char[] name, size_t upTo = size_t.max)",
				"endline": 238
			},
			{
				"kind": "template",
				"line": 340,
				"constraint": "isSomeString!S",
				"members": [
					{
						"kind": "function",
						"line": 340,
						"endchar": 1,
						"char": 3,
						"type": "@safe S(in char[] name)",
						"parameters": [
							{
								"storageClass": [
									"in"
								],
								"type": "char[]",
								"name": "name"
							}
						],
						"name": "readText",
						"endline": 347
					}
				],
				"char": 3,
				"parameters": [
					{
						"kind": "type",
						"default": "string",
						"name": "S"
					}
				],
				"comment": "Read and validates (using $(XREF utf, validate)) a text file. $(D S)\ncan be a type of array of characters of any width and constancy. No\nwidth conversion is performed; if the width of the characters in file\n$(D name) is different from the width of elements of $(D S),\nvalidation will fail.\n\nReturns: Array of characters read.\n\nThrows: $(D FileException) on file error, $(D UTFException) on UTF\ndecoding error.\n\nExample:\n\n----\nenforce(system(\"echo abc>deleteme\") == 0);\nscope(exit) remove(\"deleteme\");\nenforce(chomp(readText(\"deleteme\")) == \"abc\");\n----\n",
				"name": "readText"
			},
			{
				"kind": "function",
				"line": 373,
				"deco": "FNexAaxAvZv",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "xAa",
						"name": "name"
					},
					{
						"deco": "xAv",
						"name": "buffer"
					}
				],
				"name": "write",
				"comment": "Write $(D buffer) to file $(D name).\nThrows: $(D FileException) on error.\n\nExample:\n\n----\nimport std.file;\nvoid main()\n{\n   int[] a = [ 0, 1, 1, 2, 3, 5, 8 ];\n   write(\"filename\", a);\n   assert(cast(int[]) read(\"filename\") == a);\n}\n----\n",
				"originalType": "@trusted void(in char[] name, const void[] buffer)",
				"endline": 392
			},
			{
				"kind": "function",
				"line": 412,
				"deco": "FNexAaxAvZv",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "xAa",
						"name": "name"
					},
					{
						"deco": "xAv",
						"name": "buffer"
					}
				],
				"name": "append",
				"comment": "Appends $(D buffer) to file $(D name).\nThrows: $(D FileException) on error.\n\nExample:\n\n----\nimport std.file;\nvoid main()\n{\n   int[] a = [ 0, 1, 1, 2, 3, 5, 8 ];\n   write(\"filename\", a);\n   int[] b = [ 13, 21 ];\n   append(\"filename\", b);\n   assert(cast(int[]) read(\"filename\") == a ~ b);\n}\n----\n",
				"originalType": "@trusted void(in char[] name, in void[] buffer)",
				"endline": 432
			},
			{
				"kind": "function",
				"line": 457,
				"deco": "FNexAaxAaZv",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "xAa",
						"name": "from"
					},
					{
						"deco": "xAa",
						"name": "to"
					}
				],
				"name": "rename",
				"comment": " Rename file $(D from) to $(D to).\n If the target file exists, it is overwritten.\n Throws: $(D FileException) on error.\n",
				"originalType": "@trusted void(in char[] from, in char[] to)",
				"endline": 472
			},
			{
				"kind": "function",
				"line": 491,
				"deco": "FNexAaZv",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "xAa",
						"name": "name"
					}
				],
				"name": "remove",
				"comment": "Delete file $(D name).\nThrows: $(D FileException) on error.\n",
				"originalType": "@trusted void(in char[] name)",
				"endline": 504
			},
			{
				"kind": "function",
				"line": 526,
				"deco": "FNfxAaZm",
				"endchar": 1,
				"char": 7,
				"parameters": [
					{
						"deco": "xAa",
						"name": "name"
					}
				],
				"name": "getSize",
				"comment": "Get size of file $(D name) in bytes.\n\nThrows: $(D FileException) on error (e.g., file not found).\n",
				"originalType": "@safe ulong(in char[] name)",
				"endline": 547
			},
			{
				"kind": "function",
				"line": 572,
				"deco": "FNfxAaJS3std8datetime7SysTimeJS3std8datetime7SysTimeZv",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "xAa",
						"name": "name"
					},
					{
						"deco": "S3std8datetime7SysTime",
						"storageClass": [
							"out"
						],
						"name": "accessTime"
					},
					{
						"deco": "S3std8datetime7SysTime",
						"storageClass": [
							"out"
						],
						"name": "modificationTime"
					}
				],
				"name": "getTimes",
				"comment": "    Get the access and modified times of file or folder $(D name).\n\n    Params:\n        name             = File/Folder name to get times for.\n        accessTime       = Time the file/folder was last accessed.\n        modificationTime = Time the file/folder was last modified.\n\n    Throws:\n        $(D FileException) on error.\n",
				"originalType": "@safe void(in char[] name, out SysTime accessTime, out SysTime modificationTime)",
				"endline": 597
			},
			{
				"kind": "function",
				"line": 671,
				"deco": "FNfxAaJS3std8datetime7SysTimeJS3std8datetime7SysTimeJS3std8datetime7SysTimeZv",
				"char": 23,
				"parameters": [
					{
						"deco": "xAa",
						"name": "name"
					},
					{
						"deco": "S3std8datetime7SysTime",
						"storageClass": [
							"out"
						],
						"name": "fileCreationTime"
					},
					{
						"deco": "S3std8datetime7SysTime",
						"storageClass": [
							"out"
						],
						"name": "fileAccessTime"
					},
					{
						"deco": "S3std8datetime7SysTime",
						"storageClass": [
							"out"
						],
						"name": "fileModificationTime"
					}
				],
				"name": "getTimesWin",
				"comment": "    $(BLUE This function is Windows-Only.)\n\n    Get creation/access/modified times of file $(D name).\n\n    This is the same as $(D getTimes) except that it also gives you the file\n    creation time - which isn't possible on Posix systems.\n\n    Params:\n        name                 = File name to get times for.\n        fileCreationTime     = Time the file was created.\n        fileAccessTime       = Time the file was last accessed.\n        fileModificationTime = Time the file was last modified.\n\n    Throws:\n        $(D FileException) on error.\n",
				"originalType": "@safe void(in char[] name, out SysTime fileCreationTime, out SysTime fileAccessTime, out SysTime fileModificationTime)"
			},
			{
				"kind": "function",
				"line": 765,
				"deco": "FNfxAaS3std8datetime7SysTimeS3std8datetime7SysTimeZv",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "xAa",
						"name": "name"
					},
					{
						"deco": "S3std8datetime7SysTime",
						"name": "accessTime"
					},
					{
						"deco": "S3std8datetime7SysTime",
						"name": "modificationTime"
					}
				],
				"name": "setTimes",
				"comment": "    Set access/modified times of file or folder $(D name).\n\n    Params:\n        name             = File/Folder name to get times for.\n        accessTime       = Time the file/folder was last accessed.\n        modificationTime = Time the file/folder was last modified.\n\n    Throws:\n        $(D FileException) on error.\n",
				"originalType": "@safe void(in char[] name, SysTime accessTime, SysTime modificationTime)",
				"endline": 823
			},
			{
				"kind": "function",
				"line": 857,
				"deco": "FNfxAaZS3std8datetime7SysTime",
				"endchar": 1,
				"char": 9,
				"parameters": [
					{
						"deco": "xAa",
						"name": "name"
					}
				],
				"name": "timeLastModified",
				"comment": "    Returns the time that the given file was last modified.\n\n    Throws:\n        $(D FileException) if the given file does not exist.\n",
				"originalType": "@safe SysTime(in char[] name)",
				"endline": 880
			},
			{
				"kind": "function",
				"line": 913,
				"deco": "FNfxAaS3std8datetime7SysTimeZS3std8datetime7SysTime",
				"endchar": 1,
				"char": 9,
				"parameters": [
					{
						"deco": "xAa",
						"name": "name"
					},
					{
						"deco": "S3std8datetime7SysTime",
						"name": "returnIfMissing"
					}
				],
				"name": "timeLastModified",
				"comment": "    Returns the time that the given file was last modified. If the\n    file does not exist, returns $(D returnIfMissing).\n\n    A frequent usage pattern occurs in build automation tools such as\n    $(WEB gnu.org/software/make, make) or $(WEB\n    en.wikipedia.org/wiki/Apache_Ant, ant). To check whether file $(D\n    target) must be rebuilt from file $(D source) (i.e., $(D target) is\n    older than $(D source) or does not exist), use the comparison\n    below. The code throws a $(D FileException) if $(D source) does not\n    exist (as it should). On the other hand, the $(D SysTime.min) default\n    makes a non-existing $(D target) seem infinitely old so the test\n    correctly prompts building it.\n\n    Params:\n        name            = The name of the file to get the modification time for.\n        returnIfMissing = The time to return if the given file does not exist.\n\nExamples:\n--------------------\nif(timeLastModified(source) >= timeLastModified(target, SysTime.min))\n{\n    // must (re)build\n}\nelse\n{\n    // target is up-to-date\n}\n--------------------\n",
				"originalType": "@safe SysTime(in char[] name, SysTime returnIfMissing)",
				"endline": 939
			},
			{
				"kind": "function",
				"line": 964,
				"deco": "FNbNiNexAaZb",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "xAa",
						"name": "name"
					}
				],
				"name": "exists",
				"comment": "    Returns whether the given file (or directory) exists.\n",
				"originalType": "nothrow @nogc @trusted bool(in char[] name)",
				"endline": 997
			},
			{
				"kind": "function",
				"line": 1029,
				"deco": "FNfxAaZk",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "xAa",
						"name": "name"
					}
				],
				"name": "getAttributes",
				"comment": " Returns the attributes of the given file.\n\n Note that the file attributes on Windows and Posix systems are\n completely different. On Windows, they're what is returned by $(WEB\n msdn.microsoft.com/en-us/library/aa364944(v=vs.85).aspx,\n GetFileAttributes), whereas on Posix systems, they're the $(LUCKY\n st_mode) value which is part of the $(D stat struct) gotten by\n calling the $(WEB en.wikipedia.org/wiki/Stat_%28Unix%29, $(D stat))\n function.\n\n On Posix systems, if the given file is a symbolic link, then\n attributes are the attributes of the file pointed to by the symbolic\n link.\n\n Params:\n name = The file to get the attributes of.\n\n Throws: $(D FileException) on error.\n",
				"originalType": "@safe uint(in char[] name)",
				"endline": 1055
			},
			{
				"kind": "function",
				"line": 1074,
				"deco": "FNfxAaZk",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "xAa",
						"name": "name"
					}
				],
				"name": "getLinkAttributes",
				"comment": "    If the given file is a symbolic link, then this returns the attributes of the\n    symbolic link itself rather than file that it points to. If the given file\n    is $(I not) a symbolic link, then this function returns the same result\n    as getAttributes.\n\n    On Windows, getLinkAttributes is identical to getAttributes. It exists on\n    Windows so that you don't have to special-case code for Windows when dealing\n    with symbolic links.\n\n    Params:\n        name = The file to get the symbolic link attributes of.\n\n    Throws:\n        $(D FileException) on error.\n",
				"originalType": "@safe uint(in char[] name)",
				"endline": 1090
			},
			{
				"kind": "function",
				"line": 1099,
				"deco": "FNfxAakZv",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "xAa",
						"name": "name"
					},
					{
						"deco": "k",
						"name": "attributes"
					}
				],
				"name": "setAttributes",
				"comment": "    Set the attributes of the given file.\n\n    Throws:\n        $(D FileException) if the given file does not exist.\n",
				"originalType": "@safe void(in char[] name, uint attributes)",
				"endline": 1118
			},
			{
				"kind": "function",
				"line": 1136,
				"deco": "FNdNfxAaZb",
				"endchar": 1,
				"char": 16,
				"parameters": [
					{
						"deco": "xAa",
						"name": "name"
					}
				],
				"name": "isDir",
				"comment": "    Returns whether the given file is a directory.\n\n    Params:\n        name = The path to the file.\n\n    Throws:\n        $(D FileException) if the given file does not exist.\n\nExamples:\n--------------------\nassert(!\"/etc/fonts/fonts.conf\".isDir);\nassert(\"/usr/share/include\".isDir);\n--------------------\n",
				"originalType": "@property @safe bool(in char[] name)",
				"endline": 1146
			},
			{
				"kind": "function",
				"line": 1181,
				"deco": "FNaNbNiNfkZb",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "k",
						"name": "attributes"
					}
				],
				"name": "attrIsDir",
				"comment": "    Returns whether the given file attributes are for a directory.\n\n    Params:\n        attributes = The file attributes.\n\nExamples:\n--------------------\nassert(!attrIsDir(getAttributes(\"/etc/fonts/fonts.conf\")));\nassert(!attrIsDir(getLinkAttributes(\"/etc/fonts/fonts.conf\")));\n--------------------\n",
				"endline": 1191
			},
			{
				"kind": "function",
				"line": 1253,
				"deco": "FNdNfxAaZb",
				"endchar": 1,
				"char": 16,
				"parameters": [
					{
						"deco": "xAa",
						"name": "name"
					}
				],
				"name": "isFile",
				"comment": "    Returns whether the given file (or directory) is a file.\n\n    On Windows, if a file is not a directory, then it's a file. So,\n    either $(D isFile) or $(D isDir) will return true for any given file.\n\n    On Posix systems, if $(D isFile) is $(D true), that indicates that the file\n    is a regular file (e.g. not a block not device). So, on Posix systems, it's\n    possible for both $(D isFile) and $(D isDir) to be $(D false) for a\n    particular file (in which case, it's a special file). You can use\n    $(D getAttributes) to get the attributes to figure out what type of special\n    it is, or you can use $(D DirEntry) to get at its $(D statBuf), which is the\n    result from $(D stat). In either case, see the man page for $(D stat) for\n    more information.\n\n    Params:\n        name = The path to the file.\n\n    Throws:\n        $(D FileException) if the given file does not exist.\n\nExamples:\n--------------------\nassert(\"/etc/fonts/fonts.conf\".isFile);\nassert(!\"/usr/share/include\".isFile);\n--------------------\n",
				"originalType": "@property @safe bool(in char[] name)",
				"endline": 1259
			},
			{
				"kind": "function",
				"line": 1305,
				"deco": "FNaNbNiNfkZb",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "k",
						"name": "attributes"
					}
				],
				"name": "attrIsFile",
				"comment": "    Returns whether the given file attributes are for a file.\n\n    On Windows, if a file is not a directory, it's a file. So, either\n    $(D attrIsFile) or $(D attrIsDir) will return $(D true) for the\n    attributes of any given file.\n\n    On Posix systems, if $(D attrIsFile) is $(D true), that indicates that the\n    file is a regular file (e.g. not a block not device). So, on Posix systems,\n    it's possible for both $(D attrIsFile) and $(D attrIsDir) to be $(D false)\n    for a particular file (in which case, it's a special file). If a file is a\n    special file, you can use the attributes to check what type of special file\n    it is (see the man page for $(D stat) for more information).\n\n    Params:\n        attributes = The file attributes.\n\nExamples:\n--------------------\nassert(attrIsFile(getAttributes(\"/etc/fonts/fonts.conf\")));\nassert(attrIsFile(getLinkAttributes(\"/etc/fonts/fonts.conf\")));\n--------------------\n",
				"endline": 1315
			},
			{
				"kind": "function",
				"line": 1362,
				"deco": "FNdNfxAaZb",
				"endchar": 1,
				"char": 16,
				"parameters": [
					{
						"deco": "xAa",
						"name": "name"
					}
				],
				"name": "isSymlink",
				"comment": "    Returns whether the given file is a symbolic link.\n\n    On Windows, returns $(D true) when the file is either a symbolic link or a\n    junction point.\n\n    Params:\n        name = The path to the file.\n\n    Throws:\n        $(D FileException) if the given file does not exist.\n",
				"originalType": "@property @safe bool(in char[] name)",
				"endline": 1368
			},
			{
				"kind": "function",
				"line": 1461,
				"deco": "FNaNbNiNfkZb",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "k",
						"name": "attributes"
					}
				],
				"name": "attrIsSymlink",
				"comment": "    Returns whether the given file attributes are for a symbolic link.\n\n    On Windows, return $(D true) when the file is either a symbolic link or a\n    junction point.\n\n    Params:\n        attributes = The file attributes.\n\nExamples:\n--------------------\ncore.sys.posix.unistd.symlink(\"/etc/fonts/fonts.conf\", \"/tmp/alink\");\n\nassert(!getAttributes(\"/tmp/alink\").isSymlink);\nassert(getLinkAttributes(\"/tmp/alink\").isSymlink);\n--------------------\n",
				"endline": 1467
			},
			{
				"kind": "function",
				"line": 1474,
				"deco": "FNfxAaZv",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "xAa",
						"name": "pathname"
					}
				],
				"name": "chdir",
				"comment": " Change directory to $(D pathname).\n Throws: $(D FileException) on error.\n",
				"originalType": "@safe void(in char[] pathname)",
				"endline": 1492
			},
			{
				"kind": "function",
				"line": 1500,
				"deco": "FNfxAaZv",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "xAa",
						"name": "pathname"
					}
				],
				"name": "mkdir",
				"comment": "Make directory $(D pathname).\n\nThrows: $(D FileException) on Posix or $(D WindowsException) on Windows\n        if an error occured.\n",
				"originalType": "@safe void(in char[] pathname)",
				"endline": 1518
			},
			{
				"kind": "function",
				"line": 1547,
				"deco": "FxAaZv",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "xAa",
						"name": "pathname"
					}
				],
				"name": "mkdirRecurse",
				"comment": " Make directory and all parent directories as needed.\n\n Throws: $(D FileException) on error.\n",
				"originalType": "void(in char[] pathname)",
				"endline": 1558
			},
			{
				"kind": "function",
				"line": 1609,
				"deco": "FxAaZv",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "xAa",
						"name": "pathname"
					}
				],
				"name": "rmdir",
				"comment": "Remove directory $(D pathname).\n\nThrows: $(D FileException) on error.\n",
				"originalType": "void(in char[] pathname)",
				"endline": 1621
			},
			{
				"kind": "template",
				"line": 1640,
				"members": [
					{
						"kind": "function",
						"line": 1640,
						"char": 23,
						"type": "@safe void(const(C1)[] original, const(C2)[] link)",
						"parameters": [
							{
								"type": "const(C1)[]",
								"name": "original"
							},
							{
								"type": "const(C2)[]",
								"name": "link"
							}
						],
						"name": "symlink"
					}
				],
				"char": 23,
				"parameters": [
					{
						"kind": "type",
						"name": "C1"
					},
					{
						"kind": "type",
						"name": "C2"
					}
				],
				"comment": "    $(BLUE This function is Posix-Only.)\n\n    Creates a symlink.\n\n    Params:\n        original = The file to link from.\n        link     = The symlink to create.\n\n    Note:\n        Relative paths are relative to the current working directory,\n        not the files being linked to or from.\n\n    Throws:\n        $(D FileException) on error (which includes if the symlink already\n        exists).\n",
				"name": "symlink"
			},
			{
				"kind": "template",
				"line": 1706,
				"members": [
					{
						"kind": "function",
						"line": 1706,
						"char": 25,
						"type": "@safe string(const(C)[] link)",
						"parameters": [
							{
								"type": "const(C)[]",
								"name": "link"
							}
						],
						"name": "readLink"
					}
				],
				"char": 25,
				"parameters": [
					{
						"kind": "type",
						"name": "C"
					}
				],
				"comment": "    $(BLUE This function is Posix-Only.)\n\n    Returns the path to the file pointed to by a symlink. Note that the\n    path could be either relative or absolute depending on the symlink.\n    If the path is relative, it's relative to the symlink, not the current\n    working directory.\n\n    Throws:\n        $(D FileException) on error.\n",
				"name": "readLink"
			},
			{
				"kind": "function",
				"line": 1796,
				"deco": "FZAya",
				"endchar": 1,
				"char": 29,
				"name": "getcwd",
				"comment": " Get the current working directory.\n Throws: $(D FileException) on error.\n",
				"endline": 1802
			},
			{
				"kind": "function",
				"line": 1822,
				"deco": "FNeZAya",
				"endchar": 1,
				"char": 17,
				"name": "thisExePath",
				"comment": " Returns the full path of the current executable.\n\n Throws:\n $(XREF object, Exception)\n",
				"endline": 1898
			},
			{
				"kind": "struct",
				"line": 1914,
				"members": [
					{
						"kind": "constructor",
						"line": 1925,
						"deco": "FNcAyaZS3std4file8DirEntry",
						"char": 9,
						"parameters": [
							{
								"deco": "Aya",
								"name": "path"
							}
						],
						"name": "this",
						"comment": "            Constructs a DirEntry for the given file (or directory).\n\n            Params:\n                path = The file (or directory) to get a DirEntry for.\n\n            Throws:\n                $(D FileException) if the file does not exist.\n",
						"originalType": "ref (string path)"
					},
					{
						"kind": "function",
						"line": 1948,
						"deco": "xFNdZAya",
						"char": 26,
						"name": "name",
						"comment": "            Returns the path to the file represented by this $(D DirEntry).\n\nExamples:\n--------------------\nauto de1 = DirEntry(\"/etc/fonts/fonts.conf\");\nassert(de1.name == \"/etc/fonts/fonts.conf\");\n\nauto de2 = DirEntry(\"/usr/share/include\");\nassert(de2.name == \"/usr/share/include\");\n--------------------\n"
					},
					{
						"kind": "function",
						"line": 1964,
						"deco": "FNdZb",
						"char": 24,
						"name": "isDir",
						"comment": "            Returns whether the file represented by this $(D DirEntry) is a\n            directory.\n\nExamples:\n--------------------\nauto de1 = DirEntry(\"/etc/fonts/fonts.conf\");\nassert(!de1.isDir);\n\nauto de2 = DirEntry(\"/usr/share/include\");\nassert(de2.isDir);\n--------------------\n"
					},
					{
						"kind": "function",
						"line": 1990,
						"deco": "FNdZb",
						"char": 24,
						"name": "isFile",
						"comment": "            Returns whether the file represented by this $(D DirEntry) is a file.\n\n            On Windows, if a file is not a directory, then it's a file. So,\n            either $(D isFile) or $(D isDir) will return $(D true).\n\n            On Posix systems, if $(D isFile) is $(D true), that indicates that\n            the file is a regular file (e.g. not a block not device). So, on\n            Posix systems, it's possible for both $(D isFile) and $(D isDir) to\n            be $(D false) for a particular file (in which case, it's a special\n            file). You can use $(D attributes) or $(D statBuf) to get more\n            information about a special file (see the stat man page for more\n            details).\n\nExamples:\n--------------------\nauto de1 = DirEntry(\"/etc/fonts/fonts.conf\");\nassert(de1.isFile);\n\nauto de2 = DirEntry(\"/usr/share/include\");\nassert(!de2.isFile);\n--------------------\n"
					},
					{
						"kind": "function",
						"line": 1999,
						"deco": "FNdZb",
						"char": 24,
						"name": "isSymlink",
						"comment": "            Returns whether the file represented by this $(D DirEntry) is a\n            symbolic link.\n\n            On Windows, return $(D true) when the file is either a symbolic\n            link or a junction point.\n"
					},
					{
						"kind": "function",
						"line": 2005,
						"deco": "FNdZm",
						"char": 25,
						"name": "size",
						"comment": "            Returns the size of the the file represented by this $(D DirEntry)\n            in bytes.\n"
					},
					{
						"kind": "function",
						"line": 2013,
						"deco": "xFNdZS3std8datetime7SysTime",
						"char": 27,
						"name": "timeCreated",
						"comment": "            $(BLUE This function is Windows-Only.)\n\n            Returns the creation time of the file represented by this\n            $(D DirEntry).\n"
					},
					{
						"kind": "function",
						"line": 2024,
						"deco": "FNdZS3std8datetime7SysTime",
						"char": 27,
						"name": "timeLastAccessed",
						"comment": "            Returns the time that the file represented by this $(D DirEntry) was\n            last accessed.\n\n            Note that many file systems do not update the access time for files\n            (generally for performance reasons), so there's a good chance that\n            $(D timeLastAccessed) will return the same value as\n            $(D timeLastModified).\n"
					},
					{
						"kind": "function",
						"line": 2030,
						"deco": "FNdZS3std8datetime7SysTime",
						"char": 27,
						"name": "timeLastModified",
						"comment": "            Returns the time that the file represented by this $(D DirEntry) was\n            last modified.\n"
					},
					{
						"kind": "function",
						"line": 2046,
						"deco": "FNdZk",
						"char": 24,
						"name": "attributes",
						"comment": "            Returns the attributes of the file represented by this $(D DirEntry).\n\n            Note that the file attributes on Windows and Posix systems are\n            completely different. On, Windows, they're what is returned by\n            $(D GetFileAttributes)\n            $(WEB msdn.microsoft.com/en-us/library/aa364944(v=vs.85).aspx, GetFileAttributes)\n            Whereas, an Posix systems, they're the $(D st_mode) value which is\n            part of the $(D stat) struct gotten by calling $(D stat).\n\n            On Posix systems, if the file represented by this $(D DirEntry) is a\n            symbolic link, then attributes are the attributes of the file\n            pointed to by the symbolic link.\n"
					},
					{
						"kind": "function",
						"line": 2058,
						"deco": "FNdZk",
						"char": 24,
						"name": "linkAttributes",
						"comment": "            On Posix systems, if the file represented by this $(D DirEntry) is a\n            symbolic link, then $(D linkAttributes) are the attributes of the\n            symbolic link itself. Otherwise, $(D linkAttributes) is identical to\n            $(D attributes).\n\n            On Windows, $(D linkAttributes) is identical to $(D attributes). It\n            exists on Windows so that you don't have to special-case code for\n            Windows when dealing with symbolic links.\n"
					},
					{
						"kind": "function",
						"line": 2068,
						"deco": "FNdZS4core3sys5posix3sys4stat6stat_t",
						"char": 26,
						"name": "statBuf",
						"comment": "            $(BLUE This function is Posix-Only.)\n\n            The $(D stat) struct gotten from calling $(D stat).\n"
					}
				],
				"char": 5,
				"name": "DirEntry",
				"comment": "        Info on a file, similar to what you'd get from stat on a Posix system.\n"
			},
			{
				"kind": "variable",
				"line": 2462,
				"deco": "E3std8typecons53__T4FlagVAyaa18_707265736572766541747472696275746573Z4Flag",
				"char": 24,
				"name": "preserveAttributesDefault",
				"comment": "Defaults to PreserveAttributes.yes on Windows, and the opposite on all other platforms.\n",
				"originalType": "PreserveAttributes"
			},
			{
				"kind": "function",
				"line": 2481,
				"deco": "FxAaxAaE3std8typecons53__T4FlagVAyaa18_707265736572766541747472696275746573Z4FlagZv",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "xAa",
						"name": "from"
					},
					{
						"deco": "xAa",
						"name": "to"
					},
					{
						"deco": "E3std8typecons53__T4FlagVAyaa18_707265736572766541747472696275746573Z4Flag",
						"default": "preserveAttributesDefault",
						"name": "preserve"
					}
				],
				"name": "copy",
				"comment": "Copy file $(D from) to file $(D to). File timestamps are preserved.\nFile attributes are preserved, if $(D preserve) equals $(D PreserveAttributes.yes).\nOn Windows only $(D PreserveAttributes.yes) (the default on Windows) is supported.\nIf the target file exists, it is overwritten.\n\nThrows: $(D FileException) on error.\n",
				"originalType": "void(in char[] from, in char[] to, PreserveAttributes preserve = preserveAttributesDefault)",
				"endline": 2541
			},
			{
				"kind": "function",
				"line": 2574,
				"deco": "FxAaZv",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "xAa",
						"name": "pathname"
					}
				],
				"name": "rmdirRecurse",
				"comment": "    Remove directory and all of its content and subdirectories,\n    recursively.\n\n    Throws:\n        $(D FileException) if there is an error (including if the given\n        file is not a directory).\n",
				"originalType": "void(in char[] pathname)",
				"endline": 2579
			},
			{
				"kind": "function",
				"line": 2589,
				"deco": "FKS3std4file8DirEntryZv",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "S3std4file8DirEntry",
						"storageClass": [
							"ref"
						],
						"name": "de"
					}
				],
				"name": "rmdirRecurse",
				"comment": "    Remove directory and all of its content and subdirectories,\n    recursively.\n\n    Throws:\n        $(D FileException) if there is an error (including if the given\n        file is not a directory).\n",
				"endline": 2612
			},
			{
				"kind": "function",
				"line": 2619,
				"deco": "FS3std4file8DirEntryZv",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "S3std4file8DirEntry",
						"name": "de"
					}
				],
				"name": "rmdirRecurse",
				"comment": "ditto\n",
				"endline": 2622
			},
			{
				"kind": "enum",
				"line": 2680,
				"members": [
					{
						"kind": "enum member",
						"line": 2683,
						"value": "0",
						"char": 5,
						"name": "shallow",
						"comment": " Only spans one directory.\n"
					},
					{
						"kind": "enum member",
						"line": 2687,
						"value": "1",
						"char": 5,
						"name": "depth",
						"comment": " Spans the directory depth-first, i.e. the content of any\n     subdirectory is spanned before that subdirectory itself. Useful\n     e.g. when recursively deleting files.\n"
					},
					{
						"kind": "enum member",
						"line": 2690,
						"value": "2",
						"char": 5,
						"name": "breadth",
						"comment": " Spans the directory breadth-first, i.e. the content of any\n     subdirectory is spanned right after that subdirectory itself.\n"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "SpanMode",
				"comment": " Dictates directory spanning policy for $(D_PARAM dirEntries) (see below).\n"
			},
			{
				"kind": "function",
				"line": 2966,
				"storageClass": [
					"auto"
				],
				"deco": "FAyaE3std4file8SpanModebZS3std4file11DirIterator",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "Aya",
						"name": "path"
					},
					{
						"deco": "E3std4file8SpanMode",
						"name": "mode"
					},
					{
						"deco": "b",
						"default": "true",
						"name": "followSymlink"
					}
				],
				"name": "dirEntries",
				"comment": "    Returns an input range of DirEntry that lazily iterates a given directory,\n    also provides two ways of foreach iteration. The iteration variable can be of\n    type $(D_PARAM string) if only the name is needed, or $(D_PARAM DirEntry)\n    if additional details are needed. The span mode dictates the how the\n    directory is traversed. The name of the each directory entry iterated\n    contains the absolute path.\n\n    Params:\n        path = The directory to iterate over.\n        mode = Whether the directory's sub-directories should be iterated\n               over depth-first ($(D_PARAM depth)), breadth-first\n               ($(D_PARAM breadth)), or not at all ($(D_PARAM shallow)).\n        followSymlink = Whether symbolic links which point to directories\n                         should be treated as directories and their contents\n                         iterated over.\n\n    Throws:\n        $(D FileException) if the directory does not exist.\n\nExamples:\n--------------------\n// Iterate a directory in depth\nforeach (string name; dirEntries(\"destroy/me\", SpanMode.depth))\n{\n remove(name);\n}\n// Iterate a directory in breadth\nforeach (string name; dirEntries(\".\", SpanMode.breadth))\n{\n writeln(name);\n}\n// Iterate a directory and get detailed info about it\nforeach (DirEntry e; dirEntries(\"dmd-testing\", SpanMode.breadth))\n{\n writeln(e.name, \"\\t\", e.size);\n}\n// Iterate over all *.d files in current directory and all its subdirectories\nauto dFiles = filter!`endsWith(a.name,\".d\")`(dirEntries(\".\",SpanMode.depth));\nforeach(d; dFiles)\n    writeln(d.name);\n// Hook it up with std.parallelism to compile them all in parallel:\nforeach(d; parallel(dFiles, 1)) //passes by 1 file to each thread\n{\n    string cmd = \"dmd -c \"  ~ d.name;\n    writeln(cmd);\n    std.process.system(cmd);\n}\n--------------------\nExample:\nDuplicate functionality of D1's $(D std.file.listdir()):\n---\nstring[] listdir(string pathname)\n{\n    import std.file;\n    import std.path;\n    import std.algorithm;\n    import std.array;\n\n    return std.file.dirEntries(pathname, SpanMode.shallow)\n        .filter!(a => a.isFile)\n        .map!(a => std.path.baseName(a.name))\n        .array;\n}\n\nvoid main(string[] args)\n{\n    import std.stdio;\n\n    string[] files = listdir(args[1]);\n    writefln(\"%s\", files);\n }\n\n---\n",
				"originalType": "(string path, SpanMode mode, bool followSymlink = true)",
				"endline": 2969
			},
			{
				"kind": "function",
				"line": 3083,
				"storageClass": [
					"auto"
				],
				"deco": "FAyaAyaE3std4file8SpanModebZS3std9algorithm9iteration121__T12FilterResultS76_D3std4file10dirEntriesFAyaAyaE3std4file8SpanModebZ1fMFS3std4file8DirEntryZbTS3std4file11DirIteratorZ12FilterResult",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "Aya",
						"name": "path"
					},
					{
						"deco": "Aya",
						"name": "pattern"
					},
					{
						"deco": "E3std4file8SpanMode",
						"name": "mode"
					},
					{
						"deco": "b",
						"default": "true",
						"name": "followSymlink"
					}
				],
				"name": "dirEntries",
				"comment": "    Convenience wrapper for filtering file names with a glob pattern.\n\n    Params:\n        path = The directory to iterate over.\n        pattern  = String with wildcards, such as $(RED \"*.d\"). The supported\n                   wildcard strings are described under\n                   $(XREF _path, globMatch).\n        mode = Whether the directory's sub-directories should be iterated\n               over depth-first ($(D_PARAM depth)), breadth-first\n               ($(D_PARAM breadth)), or not at all ($(D_PARAM shallow)).\n        followSymlink = Whether symbolic links which point to directories\n                         should be treated as directories and their contents\n                         iterated over.\n\n    Throws:\n        $(D FileException) if the directory does not exist.\n\nExamples:\n--------------------\n// Iterate over all D source files in current directory and all its\n// subdirectories\nauto dFiles = dirEntries(\".\",\"*.{d,di}\",SpanMode.depth);\nforeach(d; dFiles)\n    writeln(d.name);\n--------------------\n",
				"originalType": "(string path, string pattern, SpanMode mode, bool followSymlink = true)",
				"endline": 3089
			},
			{
				"kind": "template",
				"line": 3194,
				"members": [
					{
						"kind": "function",
						"line": 3194,
						"endchar": 1,
						"char": 1,
						"type": "Select!(Types.length == 1, Types[0][], Tuple!Types[])(string filename, in char[] format)",
						"parameters": [
							{
								"type": "string",
								"name": "filename"
							},
							{
								"storageClass": [
									"in"
								],
								"type": "char[]",
								"name": "format"
							}
						],
						"name": "slurp",
						"endline": 3213
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "tuple",
						"name": "Types"
					}
				],
				"comment": "Reads an entire file into an array.\n\nExample:\n----\n// Load file; each line is an int followed by comma, whitespace and a\n// double.\nauto a = slurp!(int, double)(\"filename\", \"%s, %s\");\n----\n\nBugs:\n$(D slurp) expects file names to be encoded in $(B CP_ACP) on $(I Windows)\ninstead of UTF-8 (as it internally uses $(XREF stdio, File),\nsee $(BUGZILLA 7648)) thus must not be used in $(I Windows)\nor cross-platform applications other than with an immediate ASCII string as\na file name to prevent accidental changes to result in incorrect behavior.\n",
				"name": "slurp"
			},
			{
				"kind": "function",
				"line": 3257,
				"deco": "FNeZAya",
				"endchar": 1,
				"char": 8,
				"name": "tempDir",
				"comment": "Returns the path to a directory for temporary files.\n\nOn Windows, this function returns the result of calling the Windows API function\n$(LINK2 http://msdn.microsoft.com/en-us/library/windows/desktop/aa364992.aspx, $(D GetTempPath)).\n\nOn POSIX platforms, it searches through the following list of directories\nand returns the first one which is found to exist:\n$(OL\n    $(LI The directory given by the $(D TMPDIR) environment variable.)\n    $(LI The directory given by the $(D TEMP) environment variable.)\n    $(LI The directory given by the $(D TMP) environment variable.)\n    $(LI $(D /tmp))\n    $(LI $(D /var/tmp))\n    $(LI $(D /usr/tmp))\n)\n\nOn all platforms, $(D tempDir) returns $(D \".\") on failure, representing\nthe current working directory.\n\nThe return value of the function is cached, so the procedures described\nabove will only be performed the first time the function is called.  All\nsubsequent runs will return the same string, regardless of whether\nenvironment variables and directory structures have changed in the\nmeantime.\n\nThe POSIX $(D tempDir) algorithm is inspired by Python's\n$(LINK2 http://docs.python.org/library/tempfile.html#tempfile.tempdir, $(D tempfile.tempdir)).\n",
				"endline": 3294
			}
		],
		"name": "std.file",
		"comment": "Utilities for manipulating files and scanning directories. Functions\nin this module handle files as a unit, e.g., read or write one _file\nat a time. For opening files and manipulating them via handles refer\nto module $(LINK2 std_stdio.html,$(D std.stdio)).\n\nMacros:\nWIKI = Phobos/StdFile\n\nCopyright: Copyright Digital Mars 2007 - 2011.\nLicense:   $(WEB boost.org/LICENSE_1_0.txt, Boost License 1.0).\nAuthors:   $(WEB digitalmars.com, Walter Bright),\n           $(WEB erdani.org, Andrei Alexandrescu),\n           Jonathan M Davis\nSource:    $(PHOBOSSRC std/_file.d)\n"
	},
	{
		"kind": "module",
		"file": "../phobos/std/syserror.d",
		"members": [],
		"name": "std.syserror",
		"comment": " Convert Win32 error code to string\n\n Source:    $(PHOBOSSRC std/_syserror.d)\n"
	},
	{
		"kind": "module",
		"file": "../phobos/std/socket.d",
		"members": [
			{
				"kind": "class",
				"line": 146,
				"base": "object.Exception",
				"members": [
					{
						"kind": "constructor",
						"line": 149,
						"deco": "FNaNbNfAyaAyamC6object9ThrowableZC3std6socket15SocketException",
						"endchar": 5,
						"char": 5,
						"parameters": [
							{
								"deco": "Aya",
								"name": "msg"
							},
							{
								"deco": "Aya",
								"default": "__FILE__",
								"name": "file"
							},
							{
								"deco": "m",
								"default": "cast(ulong)__LINE__",
								"name": "line"
							},
							{
								"deco": "C6object9Throwable",
								"default": "null",
								"name": "next"
							}
						],
						"name": "this",
						"comment": "\n",
						"originalType": "pure nothrow @safe (string msg, string file = __FILE__, size_t line = __LINE__, Throwable next = null)",
						"endline": 152
					},
					{
						"kind": "constructor",
						"line": 155,
						"deco": "FNaNbNfAyaC6object9ThrowableAyamZC3std6socket15SocketException",
						"endchar": 5,
						"char": 5,
						"parameters": [
							{
								"deco": "Aya",
								"name": "msg"
							},
							{
								"deco": "C6object9Throwable",
								"name": "next"
							},
							{
								"deco": "Aya",
								"default": "__FILE__",
								"name": "file"
							},
							{
								"deco": "m",
								"default": "cast(ulong)__LINE__",
								"name": "line"
							}
						],
						"name": "this",
						"comment": "\n",
						"originalType": "pure nothrow @safe (string msg, Throwable next, string file = __FILE__, size_t line = __LINE__)",
						"endline": 158
					}
				],
				"char": 1,
				"name": "SocketException",
				"comment": "Base exception thrown by $(D std.socket).\n"
			},
			{
				"kind": "function",
				"line": 229,
				"deco": "FNdNfZAya",
				"endchar": 1,
				"char": 18,
				"name": "lastSocketError",
				"comment": "Retrieve the error message for the most recently encountered network error.\n",
				"endline": 232
			},
			{
				"kind": "class",
				"line": 236,
				"base": "std.socket.SocketException",
				"members": [
					{
						"kind": "variable",
						"line": 238,
						"storageClass": [
							"@safe"
						],
						"deco": "i",
						"char": 9,
						"name": "errorCode",
						"comment": "Platform-specific error code.\n",
						"offset": 72
					},
					{
						"kind": "constructor",
						"line": 241,
						"deco": "FNfAyaAyamC6object9ThrowableiPFNeiZAyaZC3std6socket17SocketOSException",
						"endchar": 5,
						"char": 5,
						"parameters": [
							{
								"deco": "Aya",
								"name": "msg"
							},
							{
								"deco": "Aya",
								"default": "__FILE__",
								"name": "file"
							},
							{
								"deco": "m",
								"default": "cast(ulong)__LINE__",
								"name": "line"
							},
							{
								"deco": "C6object9Throwable",
								"default": "null",
								"name": "next"
							},
							{
								"deco": "i",
								"default": "_lasterr()",
								"name": "err"
							},
							{
								"deco": "PFNeiZAya",
								"default": "& formatSocketError",
								"name": "errorFormatter"
							}
						],
						"name": "this",
						"comment": "\n",
						"originalType": "@safe (string msg, string file = __FILE__, size_t line = __LINE__, Throwable next = null, int err = _lasterr(), string function(int) @trusted errorFormatter = &formatSocketError)",
						"endline": 254
					},
					{
						"kind": "constructor",
						"line": 257,
						"deco": "FNfAyaC6object9ThrowableAyamiPFNeiZAyaZC3std6socket17SocketOSException",
						"endchar": 5,
						"char": 5,
						"parameters": [
							{
								"deco": "Aya",
								"name": "msg"
							},
							{
								"deco": "C6object9Throwable",
								"name": "next"
							},
							{
								"deco": "Aya",
								"default": "__FILE__",
								"name": "file"
							},
							{
								"deco": "m",
								"default": "cast(ulong)__LINE__",
								"name": "line"
							},
							{
								"deco": "i",
								"default": "_lasterr()",
								"name": "err"
							},
							{
								"deco": "PFNeiZAya",
								"default": "& formatSocketError",
								"name": "errorFormatter"
							}
						],
						"name": "this",
						"comment": "\n",
						"originalType": "@safe (string msg, Throwable next, string file = __FILE__, size_t line = __LINE__, int err = _lasterr(), string function(int) @trusted errorFormatter = &formatSocketError)",
						"endline": 265
					},
					{
						"kind": "constructor",
						"line": 268,
						"deco": "FNfAyaiPFNeiZAyaAyamC6object9ThrowableZC3std6socket17SocketOSException",
						"endchar": 5,
						"char": 5,
						"parameters": [
							{
								"deco": "Aya",
								"name": "msg"
							},
							{
								"deco": "i",
								"name": "err"
							},
							{
								"deco": "PFNeiZAya",
								"default": "& formatSocketError",
								"name": "errorFormatter"
							},
							{
								"deco": "Aya",
								"default": "__FILE__",
								"name": "file"
							},
							{
								"deco": "m",
								"default": "cast(ulong)__LINE__",
								"name": "line"
							},
							{
								"deco": "C6object9Throwable",
								"default": "null",
								"name": "next"
							}
						],
						"name": "this",
						"comment": "\n",
						"originalType": "@safe (string msg, int err, string function(int) @trusted errorFormatter = &formatSocketError, string file = __FILE__, size_t line = __LINE__, Throwable next = null)",
						"endline": 276
					}
				],
				"char": 1,
				"name": "SocketOSException",
				"comment": "Socket exceptions representing network errors reported by the operating\n\nsystem.\n"
			},
			{
				"kind": "class",
				"line": 280,
				"base": "std.socket.SocketException",
				"members": [
					{
						"kind": "constructor",
						"line": 283,
						"deco": "FNaNbNfAyaAyamC6object9ThrowableZC3std6socket24SocketParameterException",
						"endchar": 5,
						"char": 5,
						"parameters": [
							{
								"deco": "Aya",
								"name": "msg"
							},
							{
								"deco": "Aya",
								"default": "__FILE__",
								"name": "file"
							},
							{
								"deco": "m",
								"default": "cast(ulong)__LINE__",
								"name": "line"
							},
							{
								"deco": "C6object9Throwable",
								"default": "null",
								"name": "next"
							}
						],
						"name": "this",
						"comment": "\n",
						"originalType": "pure nothrow @safe (string msg, string file = __FILE__, size_t line = __LINE__, Throwable next = null)",
						"endline": 286
					},
					{
						"kind": "constructor",
						"line": 289,
						"deco": "FNaNbNfAyaC6object9ThrowableAyamZC3std6socket24SocketParameterException",
						"endchar": 5,
						"char": 5,
						"parameters": [
							{
								"deco": "Aya",
								"name": "msg"
							},
							{
								"deco": "C6object9Throwable",
								"name": "next"
							},
							{
								"deco": "Aya",
								"default": "__FILE__",
								"name": "file"
							},
							{
								"deco": "m",
								"default": "cast(ulong)__LINE__",
								"name": "line"
							}
						],
						"name": "this",
						"comment": "\n",
						"originalType": "pure nothrow @safe (string msg, Throwable next, string file = __FILE__, size_t line = __LINE__)",
						"endline": 292
					}
				],
				"char": 1,
				"name": "SocketParameterException",
				"comment": "Socket exceptions representing invalid parameters specified by user code.\n"
			},
			{
				"kind": "class",
				"line": 297,
				"base": "std.socket.SocketException",
				"members": [
					{
						"kind": "constructor",
						"line": 300,
						"deco": "FNaNbNfAyaAyamC6object9ThrowableZC3std6socket22SocketFeatureException",
						"endchar": 5,
						"char": 5,
						"parameters": [
							{
								"deco": "Aya",
								"name": "msg"
							},
							{
								"deco": "Aya",
								"default": "__FILE__",
								"name": "file"
							},
							{
								"deco": "m",
								"default": "cast(ulong)__LINE__",
								"name": "line"
							},
							{
								"deco": "C6object9Throwable",
								"default": "null",
								"name": "next"
							}
						],
						"name": "this",
						"comment": "\n",
						"originalType": "pure nothrow @safe (string msg, string file = __FILE__, size_t line = __LINE__, Throwable next = null)",
						"endline": 303
					},
					{
						"kind": "constructor",
						"line": 306,
						"deco": "FNaNbNfAyaC6object9ThrowableAyamZC3std6socket22SocketFeatureException",
						"endchar": 5,
						"char": 5,
						"parameters": [
							{
								"deco": "Aya",
								"name": "msg"
							},
							{
								"deco": "C6object9Throwable",
								"name": "next"
							},
							{
								"deco": "Aya",
								"default": "__FILE__",
								"name": "file"
							},
							{
								"deco": "m",
								"default": "cast(ulong)__LINE__",
								"name": "line"
							}
						],
						"name": "this",
						"comment": "\n",
						"originalType": "pure nothrow @safe (string msg, Throwable next, string file = __FILE__, size_t line = __LINE__)",
						"endline": 309
					}
				],
				"char": 1,
				"name": "SocketFeatureException",
				"comment": "Socket exceptions representing attempts to use network capabilities not\n\navailable on the current system.\n"
			},
			{
				"kind": "function",
				"line": 315,
				"deco": "FNbNiNfZb",
				"endchar": 1,
				"char": 6,
				"name": "wouldHaveBlocked",
				"comment": "Return $(D true) if the last socket operation failed because the socket\n\nwas in non-blocking mode and the operation would have blocked.\n",
				"endline": 323
			},
			{
				"kind": "enum",
				"line": 379,
				"members": [
					{
						"kind": "enum member",
						"line": 381,
						"value": "0",
						"char": 5,
						"name": "UNSPEC",
						"comment": "Unspecified address family\n"
					},
					{
						"kind": "enum member",
						"line": 382,
						"value": "1",
						"char": 5,
						"name": "UNIX",
						"comment": "Local communication\n"
					},
					{
						"kind": "enum member",
						"line": 383,
						"value": "2",
						"char": 5,
						"name": "INET",
						"comment": "Internet Protocol version 4\n"
					},
					{
						"kind": "enum member",
						"line": 384,
						"value": "4",
						"char": 5,
						"name": "IPX",
						"comment": "Novell IPX\n"
					},
					{
						"kind": "enum member",
						"line": 385,
						"value": "5",
						"char": 5,
						"name": "APPLETALK",
						"comment": "AppleTalk\n"
					},
					{
						"kind": "enum member",
						"line": 386,
						"value": "10",
						"char": 5,
						"name": "INET6",
						"comment": "Internet Protocol version 6\n"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "AddressFamily",
				"comment": " The communication domain used to resolve an address.\n"
			},
			{
				"kind": "enum",
				"line": 393,
				"members": [
					{
						"kind": "enum member",
						"line": 395,
						"value": "1",
						"char": 5,
						"name": "STREAM",
						"comment": "Sequenced, reliable, two-way communication-based byte streams\n"
					},
					{
						"kind": "enum member",
						"line": 396,
						"value": "2",
						"char": 5,
						"name": "DGRAM",
						"comment": "Connectionless, unreliable datagrams with a fixed maximum length; data may be lost or arrive out of order\n"
					},
					{
						"kind": "enum member",
						"line": 397,
						"value": "3",
						"char": 5,
						"name": "RAW",
						"comment": "Raw protocol access\n"
					},
					{
						"kind": "enum member",
						"line": 398,
						"value": "4",
						"char": 5,
						"name": "RDM",
						"comment": "Reliably-delivered message datagrams\n"
					},
					{
						"kind": "enum member",
						"line": 399,
						"value": "5",
						"char": 5,
						"name": "SEQPACKET",
						"comment": "Sequenced, reliable, two-way connection-based datagrams with a fixed maximum length\n"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "SocketType",
				"comment": " Communication semantics\n"
			},
			{
				"kind": "enum",
				"line": 424,
				"members": [
					{
						"kind": "enum member",
						"line": 426,
						"value": "0",
						"char": 9,
						"name": "IP",
						"comment": "Internet Protocol version 4\n"
					},
					{
						"kind": "enum member",
						"line": 427,
						"value": "1",
						"char": 9,
						"name": "ICMP",
						"comment": "Internet Control Message Protocol\n"
					},
					{
						"kind": "enum member",
						"line": 428,
						"value": "2",
						"char": 9,
						"name": "IGMP",
						"comment": "Internet Group Management Protocol\n"
					},
					{
						"kind": "enum member",
						"line": 429,
						"value": "3",
						"char": 9,
						"name": "GGP",
						"comment": "Gateway to Gateway Protocol\n"
					},
					{
						"kind": "enum member",
						"line": 430,
						"value": "6",
						"char": 9,
						"name": "TCP",
						"comment": "Transmission Control Protocol\n"
					},
					{
						"kind": "enum member",
						"line": 431,
						"value": "12",
						"char": 9,
						"name": "PUP",
						"comment": "PARC Universal Packet Protocol\n"
					},
					{
						"kind": "enum member",
						"line": 432,
						"value": "17",
						"char": 9,
						"name": "UDP",
						"comment": "User Datagram Protocol\n"
					},
					{
						"kind": "enum member",
						"line": 433,
						"value": "22",
						"char": 9,
						"name": "IDP",
						"comment": "Xerox NS protocol\n"
					},
					{
						"kind": "enum member",
						"line": 434,
						"value": "255",
						"char": 9,
						"name": "RAW",
						"comment": "Raw IP packets\n"
					},
					{
						"kind": "enum member",
						"line": 435,
						"value": "41",
						"char": 9,
						"name": "IPV6",
						"comment": "Internet Protocol version 6\n"
					}
				],
				"char": 5,
				"baseDeco": "i",
				"name": "ProtocolType",
				"comment": " Protocol\n"
			},
			{
				"kind": "class",
				"line": 457,
				"members": [
					{
						"kind": "variable",
						"line": 460,
						"storageClass": [
							"@safe"
						],
						"deco": "E3std6socket12ProtocolType",
						"char": 18,
						"name": "type",
						"comment": "These members are populated when one of the following functions are called successfully:\n",
						"offset": 16
					},
					{
						"kind": "variable",
						"line": 461,
						"storageClass": [
							"@safe"
						],
						"deco": "Aya",
						"char": 12,
						"name": "name",
						"comment": "ditto\n",
						"offset": 24
					},
					{
						"kind": "variable",
						"line": 462,
						"storageClass": [
							"@safe"
						],
						"deco": "AAya",
						"char": 14,
						"name": "aliases",
						"comment": "ditto\n",
						"offset": 40
					},
					{
						"kind": "function",
						"line": 493,
						"deco": "FNbNexAaZb",
						"endchar": 5,
						"char": 10,
						"parameters": [
							{
								"deco": "xAa",
								"name": "name"
							}
						],
						"name": "getProtocolByName",
						"comment": " Returns: false on failure\n",
						"originalType": "nothrow @trusted bool(in char[] name)",
						"endline": 501
					},
					{
						"kind": "function",
						"line": 506,
						"deco": "FNbNeE3std6socket12ProtocolTypeZb",
						"endchar": 5,
						"char": 10,
						"parameters": [
							{
								"deco": "E3std6socket12ProtocolType",
								"name": "type"
							}
						],
						"name": "getProtocolByType",
						"comment": " Returns: false on failure\n",
						"endline": 514
					}
				],
				"char": 1,
				"name": "Protocol",
				"comment": " $(D Protocol) is a class for retrieving protocol information.\n\n Example:\n ---\n auto proto = new Protocol;\n writeln(\"About protocol TCP:\");\n if (proto.getProtocolByType(ProtocolType.TCP))\n {\n     writefln(\"  Name: %s\", proto.name);\n     foreach(string s; proto.aliases)\n          writefln(\"  Alias: %s\", s);\n }\n else\n     writeln(\"  No information found\");\n ---\n"
			},
			{
				"kind": "class",
				"line": 555,
				"members": [
					{
						"kind": "variable",
						"line": 558,
						"storageClass": [
							"@safe"
						],
						"deco": "Aya",
						"char": 12,
						"name": "name",
						"comment": "These members are populated when one of the following functions are called successfully:\n",
						"offset": 16
					},
					{
						"kind": "variable",
						"line": 559,
						"storageClass": [
							"@safe"
						],
						"deco": "AAya",
						"char": 14,
						"name": "aliases",
						"comment": "ditto\n",
						"offset": 32
					},
					{
						"kind": "variable",
						"line": 560,
						"storageClass": [
							"@safe"
						],
						"deco": "t",
						"char": 12,
						"name": "port",
						"comment": "ditto\n",
						"offset": 48
					},
					{
						"kind": "variable",
						"line": 561,
						"storageClass": [
							"@safe"
						],
						"deco": "Aya",
						"char": 12,
						"name": "protocolName",
						"comment": "ditto\n",
						"offset": 56
					},
					{
						"kind": "function",
						"line": 596,
						"deco": "FNbNexAaxAaZb",
						"endchar": 5,
						"char": 10,
						"parameters": [
							{
								"deco": "xAa",
								"name": "name"
							},
							{
								"deco": "xAa",
								"default": "null",
								"name": "protocolName"
							}
						],
						"name": "getServiceByName",
						"comment": " If a protocol name is omitted, any protocol will be matched.\n Returns: false on failure.\n",
						"originalType": "nothrow @trusted bool(in char[] name, in char[] protocolName = null)",
						"endline": 604
					},
					{
						"kind": "function",
						"line": 608,
						"deco": "FNbNetxAaZb",
						"endchar": 5,
						"char": 10,
						"parameters": [
							{
								"deco": "t",
								"name": "port"
							},
							{
								"deco": "xAa",
								"default": "null",
								"name": "protocolName"
							}
						],
						"name": "getServiceByPort",
						"comment": "ditto\n",
						"originalType": "nothrow @trusted bool(ushort port, in char[] protocolName = null)",
						"endline": 616
					}
				],
				"char": 1,
				"name": "Service",
				"comment": " $(D Service) is a class for retrieving service information.\n\n Example:\n ---\n auto serv = new Service;\n writeln(\"About service epmap:\");\n if (serv.getServiceByName(\"epmap\", \"tcp\"))\n {\n     writefln(\"  Service: %s\", serv.name);\n     writefln(\"  Port: %d\", serv.port);\n     writefln(\"  Protocol: %s\", serv.protocolName);\n     foreach (string s; serv.aliases)\n          writefln(\"  Alias: %s\", s);\n }\n else\n     writefln(\"  No service for epmap.\");\n ---\n"
			},
			{
				"kind": "class",
				"line": 650,
				"base": "std.socket.SocketOSException",
				"members": [
					{
						"kind": "constructor",
						"line": 653,
						"deco": "FNfAyaAyamC6object9ThrowableiZC3std6socket13HostException",
						"endchar": 5,
						"char": 5,
						"parameters": [
							{
								"deco": "Aya",
								"name": "msg"
							},
							{
								"deco": "Aya",
								"default": "__FILE__",
								"name": "file"
							},
							{
								"deco": "m",
								"default": "cast(ulong)__LINE__",
								"name": "line"
							},
							{
								"deco": "C6object9Throwable",
								"default": "null",
								"name": "next"
							},
							{
								"deco": "i",
								"default": "_lasterr()",
								"name": "err"
							}
						],
						"name": "this",
						"comment": "\n",
						"originalType": "@safe (string msg, string file = __FILE__, size_t line = __LINE__, Throwable next = null, int err = _lasterr())",
						"endline": 656
					},
					{
						"kind": "constructor",
						"line": 659,
						"deco": "FNfAyaC6object9ThrowableAyamiZC3std6socket13HostException",
						"endchar": 5,
						"char": 5,
						"parameters": [
							{
								"deco": "Aya",
								"name": "msg"
							},
							{
								"deco": "C6object9Throwable",
								"name": "next"
							},
							{
								"deco": "Aya",
								"default": "__FILE__",
								"name": "file"
							},
							{
								"deco": "m",
								"default": "cast(ulong)__LINE__",
								"name": "line"
							},
							{
								"deco": "i",
								"default": "_lasterr()",
								"name": "err"
							}
						],
						"name": "this",
						"comment": "\n",
						"originalType": "@safe (string msg, Throwable next, string file = __FILE__, size_t line = __LINE__, int err = _lasterr())",
						"endline": 662
					},
					{
						"kind": "constructor",
						"line": 665,
						"deco": "FNfAyaiAyamC6object9ThrowableZC3std6socket13HostException",
						"endchar": 5,
						"char": 5,
						"parameters": [
							{
								"deco": "Aya",
								"name": "msg"
							},
							{
								"deco": "i",
								"name": "err"
							},
							{
								"deco": "Aya",
								"default": "__FILE__",
								"name": "file"
							},
							{
								"deco": "m",
								"default": "cast(ulong)__LINE__",
								"name": "line"
							},
							{
								"deco": "C6object9Throwable",
								"default": "null",
								"name": "next"
							}
						],
						"name": "this",
						"comment": "\n",
						"originalType": "@safe (string msg, int err, string file = __FILE__, size_t line = __LINE__, Throwable next = null)",
						"endline": 668
					}
				],
				"char": 1,
				"name": "HostException",
				"comment": " Class for exceptions thrown from an $(D InternetHost).\n"
			},
			{
				"kind": "class",
				"line": 707,
				"members": [
					{
						"kind": "variable",
						"line": 710,
						"storageClass": [
							"@safe"
						],
						"deco": "Aya",
						"char": 12,
						"name": "name",
						"comment": "These members are populated when one of the following functions are called successfully:\n",
						"offset": 16
					},
					{
						"kind": "variable",
						"line": 711,
						"storageClass": [
							"@safe"
						],
						"deco": "AAya",
						"char": 14,
						"name": "aliases",
						"comment": "ditto\n",
						"offset": 32
					},
					{
						"kind": "variable",
						"line": 712,
						"storageClass": [
							"@safe"
						],
						"deco": "Ak",
						"char": 12,
						"name": "addrList",
						"comment": "ditto\n",
						"offset": 48
					},
					{
						"kind": "function",
						"line": 798,
						"deco": "FNexAaZb",
						"endchar": 5,
						"char": 10,
						"parameters": [
							{
								"deco": "xAa",
								"name": "name"
							}
						],
						"name": "getHostByName",
						"comment": " Resolve host name.\n Returns: false if unable to resolve.\n",
						"originalType": "@trusted bool(in char[] name)",
						"endline": 825
					},
					{
						"kind": "function",
						"line": 835,
						"deco": "FNekZb",
						"endchar": 5,
						"char": 10,
						"parameters": [
							{
								"deco": "k",
								"name": "addr"
							}
						],
						"name": "getHostByAddr",
						"comment": " Resolve IPv4 address number.\n\n Params:\n   addr = The IPv4 address to resolve, in host byte order.\n Returns:\n   false if unable to resolve.\n",
						"endline": 841
					},
					{
						"kind": "function",
						"line": 848,
						"deco": "FNexAaZb",
						"endchar": 5,
						"char": 10,
						"parameters": [
							{
								"deco": "xAa",
								"name": "addr"
							}
						],
						"name": "getHostByAddr",
						"comment": " Same as previous, but addr is an IPv4 address string in the\n dotted-decimal form $(I a.b.c.d).\n Returns: false if unable to resolve.\n",
						"originalType": "@trusted bool(in char[] addr)",
						"endline": 856
					}
				],
				"char": 1,
				"name": "InternetHost",
				"comment": " $(D InternetHost) is a class for resolving IPv4 addresses.\n\n Consider using $(D getAddress), $(D parseAddress) and $(D Address) methods\n instead of using this class directly.\n\n Example:\n ---\n auto ih = new InternetHost;\n\n // Forward lookup\n writeln(\"About www.digitalmars.com:\");\n if (ih.getHostByName(\"www.digitalmars.com\"))\n {\n     writefln(\"  Name: %s\", ih.name);\n     auto ip = InternetAddress.addrToString(ih.addrList[0]);\n     writefln(\"  IP address: %s\", ip);\n     foreach (string s; ih.aliases)\n          writefln(\"  Alias: %s\", s);\n     writeln(\"---\");\n\n     // Reverse lookup\n     writefln(\"About IP %s:\", ip);\n     if (ih.getHostByAddr(ih.addrList[0]))\n     {\n         writefln(\"  Name: %s\", ih.name);\n         foreach (string s; ih.aliases)\n              writefln(\"  Alias: %s\", s);\n     }\n     else\n         writeln(\"  Reverse lookup failed\");\n }\n else\n     writeln(\"  Can't resolve www.digitalmars.com\");\n ---\n"
			},
			{
				"kind": "struct",
				"line": 896,
				"members": [
					{
						"kind": "variable",
						"line": 898,
						"storageClass": [
							"@safe"
						],
						"deco": "E3std6socket13AddressFamily",
						"char": 19,
						"name": "family",
						"comment": "Address _family\n",
						"offset": 0
					},
					{
						"kind": "variable",
						"line": 899,
						"storageClass": [
							"@safe"
						],
						"deco": "E3std6socket10SocketType",
						"char": 16,
						"name": "type",
						"comment": "Socket _type\n",
						"offset": 4
					},
					{
						"kind": "variable",
						"line": 900,
						"storageClass": [
							"@safe"
						],
						"deco": "E3std6socket12ProtocolType",
						"char": 18,
						"name": "protocol",
						"comment": "Protocol\n",
						"offset": 8
					},
					{
						"kind": "variable",
						"line": 901,
						"storageClass": [
							"@safe"
						],
						"deco": "C3std6socket7Address",
						"char": 13,
						"name": "address",
						"comment": "Socket _address\n",
						"originalType": "Address",
						"offset": 16
					},
					{
						"kind": "variable",
						"line": 902,
						"storageClass": [
							"@safe"
						],
						"deco": "Aya",
						"char": 12,
						"name": "canonicalName",
						"comment": "Canonical name, when $(D AddressInfoFlags.CANONNAME) is used.\n",
						"offset": 24
					}
				],
				"char": 1,
				"name": "AddressInfo",
				"comment": "Holds information about a socket _address retrieved by $(D getAddressInfo).\n"
			},
			{
				"kind": "enum",
				"line": 907,
				"members": [
					{
						"kind": "enum member",
						"line": 910,
						"value": "1",
						"char": 5,
						"name": "PASSIVE",
						"comment": "The resulting addresses will be used in a call to $(D Socket.bind).\n"
					},
					{
						"kind": "enum member",
						"line": 913,
						"value": "2",
						"char": 5,
						"name": "CANONNAME",
						"comment": "The canonical name is returned in $(D canonicalName) member in the first $(D AddressInfo).\n"
					},
					{
						"kind": "enum member",
						"line": 917,
						"value": "4",
						"char": 5,
						"name": "NUMERICHOST",
						"comment": "The $(D node) parameter passed to $(D getAddressInfo) must be a numeric string.\n\nThis will suppress any potentially lengthy network host address lookups.\n"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "AddressInfoFlags",
				"comment": "Specifies option flags for $(D getAddressInfo).\n"
			},
			{
				"kind": "template",
				"line": 988,
				"members": [
					{
						"kind": "function",
						"line": 988,
						"endchar": 1,
						"char": 15,
						"type": "@trusted AddressInfo[](in char[] node, T options)",
						"parameters": [
							{
								"storageClass": [
									"in"
								],
								"type": "char[]",
								"name": "node"
							},
							{
								"type": "T",
								"name": "options"
							}
						],
						"name": "getAddressInfo",
						"endline": 1015
					}
				],
				"char": 15,
				"parameters": [
					{
						"kind": "tuple",
						"name": "T"
					}
				],
				"comment": " Provides _protocol-independent translation from host names to socket\n addresses. If advanced functionality is not required, consider using\n $(D getAddress) for compatibility with older systems.\n\n Returns: Array with one $(D AddressInfo) per socket address.\n\n Throws: $(D SocketOSException) on failure, or $(D SocketFeatureException)\n if this functionality is not available on the current system.\n\n Params:\n  node     = string containing host name or numeric address\n  options  = optional additional parameters, identified by type:\n             $(UL $(LI $(D string) - service name or port number)\n                  $(LI $(D AddressInfoFlags) - option flags)\n                  $(LI $(D AddressFamily) - address family to filter by)\n                  $(LI $(D SocketType) - socket type to filter by)\n                  $(LI $(D ProtocolType) - protocol to filter by))\n\n Example:\n ---\n // Roundtrip DNS resolution\n auto results = getAddressInfo(\"www.digitalmars.com\");\n assert(results[0].address.toHostNameString() ==\n     \"digitalmars.com\");\n\n // Canonical name\n results = getAddressInfo(\"www.digitalmars.com\",\n     AddressInfoFlags.CANONNAME);\n assert(results[0].canonicalName == \"digitalmars.com\");\n\n // IPv6 resolution\n results = getAddressInfo(\"ipv6.google.com\");\n assert(results[0].family == AddressFamily.INET6);\n\n // Multihomed resolution\n results = getAddressInfo(\"google.com\");\n assert(results.length > 1);\n\n // Parsing IPv4\n results = getAddressInfo(\"127.0.0.1\",\n     AddressInfoFlags.NUMERICHOST);\n assert(results.length && results[0].family ==\n     AddressFamily.INET);\n\n // Parsing IPv6\n results = getAddressInfo(\"::1\",\n     AddressInfoFlags.NUMERICHOST);\n assert(results.length && results[0].family ==\n     AddressFamily.INET6);\n ---\n",
				"name": "getAddressInfo"
			},
			{
				"kind": "function",
				"line": 1123,
				"deco": "FNfxAaxAaZAC3std6socket7Address",
				"endchar": 1,
				"char": 11,
				"parameters": [
					{
						"deco": "xAa",
						"name": "hostname"
					},
					{
						"deco": "xAa",
						"default": "null",
						"name": "service"
					}
				],
				"name": "getAddress",
				"comment": " Provides _protocol-independent translation from host names to socket\n addresses. Uses $(D getAddressInfo) if the current system supports it,\n and $(D InternetHost) otherwise.\n\n Returns: Array with one $(D Address) instance per socket address.\n\n Throws: $(D SocketOSException) on failure.\n\n Example:\n ---\n writeln(\"Resolving www.digitalmars.com:\");\n try\n {\n     auto addresses = getAddress(\"www.digitalmars.com\");\n     foreach (address; addresses)\n         writefln(\"  IP: %s\", address.toAddrString());\n }\n catch (SocketException e)\n     writefln(\"  Lookup failed: %s\", e.msg);\n ---\n",
				"originalType": "@safe Address[](in char[] hostname, in char[] service = null)",
				"endline": 1137
			},
			{
				"kind": "function",
				"line": 1140,
				"deco": "FNfxAatZAC3std6socket7Address",
				"endchar": 1,
				"char": 11,
				"parameters": [
					{
						"deco": "xAa",
						"name": "hostname"
					},
					{
						"deco": "t",
						"name": "port"
					}
				],
				"name": "getAddress",
				"comment": "ditto\n",
				"originalType": "@safe Address[](in char[] hostname, ushort port)",
				"endline": 1157
			},
			{
				"kind": "function",
				"line": 1217,
				"deco": "FNfxAaxAaZC3std6socket7Address",
				"endchar": 1,
				"char": 9,
				"parameters": [
					{
						"deco": "xAa",
						"name": "hostaddr"
					},
					{
						"deco": "xAa",
						"default": "null",
						"name": "service"
					}
				],
				"name": "parseAddress",
				"comment": " Provides _protocol-independent parsing of network addresses. Does not\n attempt name resolution. Uses $(D getAddressInfo) with\n $(D AddressInfoFlags.NUMERICHOST) if the current system supports it, and\n $(D InternetAddress) otherwise.\n\n Returns: An $(D Address) instance representing specified address.\n\n Throws: $(D SocketException) on failure.\n\n Example:\n ---\n writeln(\"Enter IP address:\");\n string ip = readln().chomp();\n try\n {\n     Address address = parseAddress(ip);\n     writefln(\"Looking up reverse of %s:\",\n         address.toAddrString());\n     try\n     {\n         string reverse = address.toHostNameString();\n         if (reverse)\n             writefln(\"  Reverse name: %s\", reverse);\n         else\n             writeln(\"  Reverse hostname not found.\");\n     }\n     catch (SocketException e)\n         writefln(\"  Lookup error: %s\", e.msg);\n }\n catch (SocketException e)\n {\n     writefln(\"  %s is not a valid IP address: %s\",\n         ip, e.msg);\n }\n ---\n",
				"originalType": "@safe Address(in char[] hostaddr, in char[] service = null)",
				"endline": 1223
			},
			{
				"kind": "function",
				"line": 1226,
				"deco": "FNfxAatZC3std6socket7Address",
				"endchar": 1,
				"char": 9,
				"parameters": [
					{
						"deco": "xAa",
						"name": "hostaddr"
					},
					{
						"deco": "t",
						"name": "port"
					}
				],
				"name": "parseAddress",
				"comment": "ditto\n",
				"originalType": "@safe Address(in char[] hostaddr, ushort port)",
				"endline": 1237
			},
			{
				"kind": "class",
				"line": 1265,
				"base": "std.socket.SocketOSException",
				"members": [
					{
						"kind": "constructor",
						"line": 1268,
						"deco": "FNfAyaAyamC6object9ThrowableiZC3std6socket16AddressException",
						"endchar": 5,
						"char": 5,
						"parameters": [
							{
								"deco": "Aya",
								"name": "msg"
							},
							{
								"deco": "Aya",
								"default": "__FILE__",
								"name": "file"
							},
							{
								"deco": "m",
								"default": "cast(ulong)__LINE__",
								"name": "line"
							},
							{
								"deco": "C6object9Throwable",
								"default": "null",
								"name": "next"
							},
							{
								"deco": "i",
								"default": "_lasterr()",
								"name": "err"
							}
						],
						"name": "this",
						"comment": "\n",
						"originalType": "@safe (string msg, string file = __FILE__, size_t line = __LINE__, Throwable next = null, int err = _lasterr())",
						"endline": 1271
					},
					{
						"kind": "constructor",
						"line": 1274,
						"deco": "FNfAyaC6object9ThrowableAyamiZC3std6socket16AddressException",
						"endchar": 5,
						"char": 5,
						"parameters": [
							{
								"deco": "Aya",
								"name": "msg"
							},
							{
								"deco": "C6object9Throwable",
								"name": "next"
							},
							{
								"deco": "Aya",
								"default": "__FILE__",
								"name": "file"
							},
							{
								"deco": "m",
								"default": "cast(ulong)__LINE__",
								"name": "line"
							},
							{
								"deco": "i",
								"default": "_lasterr()",
								"name": "err"
							}
						],
						"name": "this",
						"comment": "\n",
						"originalType": "@safe (string msg, Throwable next, string file = __FILE__, size_t line = __LINE__, int err = _lasterr())",
						"endline": 1277
					},
					{
						"kind": "constructor",
						"line": 1280,
						"deco": "FNfAyaiAyamC6object9ThrowableZC3std6socket16AddressException",
						"endchar": 5,
						"char": 5,
						"parameters": [
							{
								"deco": "Aya",
								"name": "msg"
							},
							{
								"deco": "i",
								"name": "err"
							},
							{
								"deco": "Aya",
								"default": "__FILE__",
								"name": "file"
							},
							{
								"deco": "m",
								"default": "cast(ulong)__LINE__",
								"name": "line"
							},
							{
								"deco": "C6object9Throwable",
								"default": "null",
								"name": "next"
							}
						],
						"name": "this",
						"comment": "\n",
						"originalType": "@safe (string msg, int err, string file = __FILE__, size_t line = __LINE__, Throwable next = null)",
						"endline": 1283
					}
				],
				"char": 1,
				"name": "AddressException",
				"comment": " Class for exceptions thrown from an $(D Address).\n"
			},
			{
				"kind": "class",
				"line": 1311,
				"members": [
					{
						"kind": "function",
						"line": 1314,
						"storageClass": [
							"abstract"
						],
						"deco": "FNaNbNdNiNfZPS4core3sys5posix3sys6socket8sockaddr",
						"char": 34,
						"name": "name",
						"comment": "Returns pointer to underlying $(D sockaddr) structure.\n"
					},
					{
						"kind": "function",
						"line": 1315,
						"storageClass": [
							"abstract"
						],
						"deco": "xFNaNbNdNiNfZPxS4core3sys5posix3sys6socket8sockaddr",
						"char": 41,
						"name": "name",
						"comment": "ditto\n"
					},
					{
						"kind": "function",
						"line": 1318,
						"storageClass": [
							"abstract"
						],
						"deco": "xFNaNbNdNiNfZk",
						"char": 34,
						"name": "nameLen",
						"comment": "Returns actual size of underlying $(D sockaddr) structure.\n",
						"originalType": "const pure nothrow @nogc @property @safe socklen_t()"
					},
					{
						"kind": "function",
						"line": 1321,
						"deco": "xFNaNbNdNiNfZE3std6socket13AddressFamily",
						"endchar": 5,
						"char": 29,
						"name": "addressFamily",
						"comment": "Family of this address.\n",
						"endline": 1324
					},
					{
						"kind": "function",
						"line": 1394,
						"deco": "xFNfZAya",
						"endchar": 5,
						"char": 12,
						"name": "toAddrString",
						"comment": " Attempts to retrieve the host address as a human-readable string.\n\n Throws: $(D AddressException) on failure, or $(D SocketFeatureException)\n if address retrieval for this address family is not available on the\n current system.\n",
						"endline": 1397
					},
					{
						"kind": "function",
						"line": 1409,
						"deco": "xFNfZAya",
						"endchar": 5,
						"char": 12,
						"name": "toHostNameString",
						"comment": " Attempts to retrieve the host name as a fully qualified domain name.\n\n Returns: The FQDN corresponding to this $(D Address), or $(D null) if\n the host name did not resolve.\n\n Throws: $(D AddressException) on error, or $(D SocketFeatureException)\n if host name lookup for this address family is not available on the\n current system.\n",
						"endline": 1412
					},
					{
						"kind": "function",
						"line": 1421,
						"deco": "xFNfZAya",
						"endchar": 5,
						"char": 12,
						"name": "toPortString",
						"comment": " Attempts to retrieve the numeric port number as a string.\n\n Throws: $(D AddressException) on failure, or $(D SocketFeatureException)\n if port number retrieval for this address family is not available on the\n current system.\n",
						"endline": 1424
					},
					{
						"kind": "function",
						"line": 1433,
						"deco": "xFNfZAya",
						"endchar": 5,
						"char": 12,
						"name": "toServiceNameString",
						"comment": " Attempts to retrieve the service name as a string.\n\n Throws: $(D AddressException) on failure, or $(D SocketFeatureException)\n if service name lookup for this address family is not available on the\n current system.\n",
						"endline": 1436
					},
					{
						"kind": "function",
						"line": 1439,
						"storageClass": [
							"override"
						],
						"deco": "xFNfZAya",
						"endchar": 5,
						"char": 21,
						"name": "toString",
						"comment": "Human readable string representing this address.\n",
						"endline": 1452,
						"overrides": [
							"object.Object.toString"
						]
					}
				],
				"char": 10,
				"name": "Address",
				"comment": " $(D Address) is an abstract class for representing a socket addresses.\n\n Example:\n ---\n writeln(\"About www.google.com port 80:\");\n try\n {\n     Address[] addresses = getAddress(\"www.google.com\", 80);\n     writefln(\"  %d addresses found.\", addresses.length);\n     foreach (int i, Address a; addresses)\n     {\n         writefln(\"  Address %d:\", i+1);\n         writefln(\"    IP address: %s\", a.toAddrString());\n         writefln(\"    Hostname: %s\", a.toHostNameString());\n         writefln(\"    Port: %s\", a.toPortString());\n         writefln(\"    Service name: %s\",\n             a.toServiceNameString());\n     }\n }\n catch (SocketException e)\n     writefln(\"  Lookup error: %s\", e.msg);\n ---\n"
			},
			{
				"kind": "class",
				"line": 1458,
				"base": "std.socket.Address",
				"members": [],
				"char": 1,
				"name": "UnknownAddress",
				"comment": " $(D UnknownAddress) encapsulates an unknown socket address.\n"
			},
			{
				"kind": "class",
				"line": 1488,
				"base": "std.socket.Address",
				"members": [
					{
						"kind": "constructor",
						"line": 1496,
						"deco": "FNaNbNiNfPS4core3sys5posix3sys6socket8sockaddrkZC3std6socket23UnknownAddressReference",
						"endchar": 5,
						"char": 5,
						"parameters": [
							{
								"deco": "PS4core3sys5posix3sys6socket8sockaddr",
								"name": "sa"
							},
							{
								"deco": "k",
								"name": "len"
							}
						],
						"name": "this",
						"comment": "Constructs an $(D Address) with a reference to the specified $(D sockaddr).\n",
						"originalType": "pure nothrow @nogc @safe (sockaddr* sa, socklen_t len)",
						"endline": 1500
					},
					{
						"kind": "constructor",
						"line": 1503,
						"deco": "FNaNbPxS4core3sys5posix3sys6socket8sockaddrkZC3std6socket23UnknownAddressReference",
						"endchar": 5,
						"char": 5,
						"parameters": [
							{
								"deco": "PxS4core3sys5posix3sys6socket8sockaddr",
								"name": "sa"
							},
							{
								"deco": "k",
								"name": "len"
							}
						],
						"name": "this",
						"comment": "Constructs an $(D Address) with a copy of the specified $(D sockaddr).\n",
						"originalType": "pure nothrow @system (const(sockaddr)* sa, socklen_t len)",
						"endline": 1507
					}
				],
				"char": 1,
				"name": "UnknownAddressReference",
				"comment": " $(D UnknownAddressReference) encapsulates a reference to an arbitrary\n socket address.\n"
			},
			{
				"kind": "class",
				"line": 1534,
				"base": "std.socket.Address",
				"members": [
					{
						"kind": "variable",
						"line": 1563,
						"init": "0u",
						"storageClass": [
							"enum",
							"@safe"
						],
						"deco": "k",
						"char": 15,
						"name": "ADDR_ANY",
						"comment": "Any IPv4 host address.\n"
					},
					{
						"kind": "variable",
						"line": 1564,
						"init": "4294967295u",
						"storageClass": [
							"enum",
							"@safe"
						],
						"deco": "k",
						"char": 15,
						"name": "ADDR_NONE",
						"comment": "An invalid IPv4 host address.\n"
					},
					{
						"kind": "variable",
						"line": 1565,
						"init": "cast(ushort)0u",
						"storageClass": [
							"enum",
							"@safe"
						],
						"deco": "t",
						"char": 17,
						"name": "PORT_ANY",
						"comment": "Any IPv4 port number.\n"
					},
					{
						"kind": "function",
						"line": 1568,
						"deco": "xFNaNbNdNiNfZt",
						"endchar": 5,
						"char": 22,
						"name": "port",
						"comment": "Returns the IPv4 _port number (in host byte order).\n",
						"endline": 1571
					},
					{
						"kind": "function",
						"line": 1574,
						"deco": "xFNaNbNdNiNfZk",
						"endchar": 5,
						"char": 20,
						"name": "addr",
						"comment": "Returns the IPv4 address number (in host byte order).\n",
						"endline": 1577
					},
					{
						"kind": "constructor",
						"line": 1587,
						"deco": "FNfxAatZC3std6socket15InternetAddress",
						"endchar": 5,
						"char": 5,
						"parameters": [
							{
								"deco": "xAa",
								"name": "addr"
							},
							{
								"deco": "t",
								"name": "port"
							}
						],
						"name": "this",
						"comment": " Construct a new $(D InternetAddress).\n Params:\n   addr = an IPv4 address string in the dotted-decimal form a.b.c.d,\n          or a host name which will be resolved using an $(D InternetHost)\n          object.\n   port = port number, may be $(D PORT_ANY).\n",
						"originalType": "@safe (in char[] addr, ushort port)",
						"endline": 1602
					},
					{
						"kind": "constructor",
						"line": 1610,
						"deco": "FNaNbNiNfktZC3std6socket15InternetAddress",
						"endchar": 5,
						"char": 5,
						"parameters": [
							{
								"deco": "k",
								"name": "addr"
							},
							{
								"deco": "t",
								"name": "port"
							}
						],
						"name": "this",
						"comment": " Construct a new $(D InternetAddress).\n Params:\n   addr = (optional) an IPv4 address in host byte order, may be $(D ADDR_ANY).\n   port = port number, may be $(D PORT_ANY).\n",
						"originalType": "pure nothrow @nogc @safe (uint addr, ushort port)",
						"endline": 1615
					},
					{
						"kind": "constructor",
						"line": 1618,
						"deco": "FNaNbNiNftZC3std6socket15InternetAddress",
						"endchar": 5,
						"char": 5,
						"parameters": [
							{
								"deco": "t",
								"name": "port"
							}
						],
						"name": "this",
						"comment": "ditto\n",
						"originalType": "pure nothrow @nogc @safe (ushort port)",
						"endline": 1623
					},
					{
						"kind": "function",
						"line": 1626,
						"storageClass": [
							"override"
						],
						"deco": "xFNeZAya",
						"endchar": 5,
						"char": 21,
						"name": "toAddrString",
						"comment": "Human readable string representing the IPv4 address in dotted-decimal form.\n",
						"endline": 1629,
						"overrides": [
							"std.socket.Address.toAddrString"
						]
					},
					{
						"kind": "function",
						"line": 1632,
						"storageClass": [
							"override"
						],
						"deco": "xFNfZAya",
						"endchar": 5,
						"char": 21,
						"name": "toPortString",
						"comment": "Human readable string representing the IPv4 port.\n",
						"endline": 1635,
						"overrides": [
							"std.socket.Address.toPortString"
						]
					},
					{
						"kind": "function",
						"line": 1645,
						"storageClass": [
							"override"
						],
						"deco": "xFNfZAya",
						"endchar": 5,
						"char": 21,
						"name": "toHostNameString",
						"comment": " Attempts to retrieve the host name as a fully qualified domain name.\n\n Returns: The FQDN corresponding to this $(D InternetAddress), or\n $(D null) if the host name did not resolve.\n\n Throws: $(D AddressException) on error.\n",
						"endline": 1664,
						"overrides": [
							"std.socket.Address.toHostNameString"
						]
					},
					{
						"kind": "function",
						"line": 1676,
						"storageClass": [
							"override"
						],
						"deco": "xFNfC6ObjectZb",
						"endchar": 5,
						"char": 19,
						"parameters": [
							{
								"deco": "C6Object",
								"name": "o"
							}
						],
						"name": "opEquals",
						"comment": " Compares with another InternetAddress of same type for equality\n Returns: true if the InternetAddresses share the same address and\n port number.\n Examples:\n --------------\n InternetAddress addr1,addr2;\n if (addr1 == addr2) { }\n --------------\n",
						"endline": 1681,
						"overrides": [
							"object.Object.opEquals"
						]
					},
					{
						"kind": "function",
						"line": 1689,
						"storageClass": [
							"static"
						],
						"deco": "FNbNexAaZk",
						"endchar": 5,
						"char": 17,
						"parameters": [
							{
								"deco": "xAa",
								"name": "addr"
							}
						],
						"name": "parse",
						"comment": " Parse an IPv4 address string in the dotted-decimal form $(I a.b.c.d)\n and return the number.\n Returns: If the string is not a legitimate IPv4 address,\n $(D ADDR_NONE) is returned.\n",
						"originalType": "nothrow @trusted uint(in char[] addr)",
						"endline": 1692
					},
					{
						"kind": "function",
						"line": 1698,
						"storageClass": [
							"static"
						],
						"deco": "FNbNekZAya",
						"endchar": 5,
						"char": 19,
						"parameters": [
							{
								"deco": "k",
								"name": "addr"
							}
						],
						"name": "addrToString",
						"comment": " Convert an IPv4 address number in host byte order to a human readable\n string representing the IPv4 address in dotted-decimal form.\n",
						"endline": 1703
					}
				],
				"char": 1,
				"name": "InternetAddress",
				"comment": " $(D InternetAddress) encapsulates an IPv4 (Internet Protocol version 4)\n socket address.\n\n Consider using $(D getAddress), $(D parseAddress) and $(D Address) methods\n instead of using this class directly.\n"
			},
			{
				"kind": "class",
				"line": 1760,
				"base": "std.socket.Address",
				"members": [
					{
						"kind": "function",
						"line": 1790,
						"storageClass": [
							"static"
						],
						"deco": "FNaNbNcNdNiNfZxG16h",
						"endchar": 5,
						"char": 43,
						"name": "ADDR_ANY",
						"comment": "Any IPv6 host address.\n",
						"originalType": "pure nothrow @nogc @property ref @safe const(ubyte)[16]()",
						"endline": 1805
					},
					{
						"kind": "variable",
						"line": 1808,
						"init": "cast(ushort)0u",
						"storageClass": [
							"enum",
							"@safe"
						],
						"deco": "t",
						"char": 17,
						"name": "PORT_ANY",
						"comment": "Any IPv6 port number.\n"
					},
					{
						"kind": "function",
						"line": 1811,
						"deco": "xFNaNbNdNiNfZt",
						"endchar": 5,
						"char": 22,
						"name": "port",
						"comment": "Returns the IPv6 port number.\n",
						"endline": 1814
					},
					{
						"kind": "function",
						"line": 1817,
						"deco": "xFNaNbNdNiNfZG16h",
						"endchar": 5,
						"char": 25,
						"name": "addr",
						"comment": "Returns the IPv6 address.\n",
						"endline": 1820
					},
					{
						"kind": "constructor",
						"line": 1829,
						"deco": "FNexAaxAaZC3std6socket16Internet6Address",
						"endchar": 5,
						"char": 5,
						"parameters": [
							{
								"deco": "xAa",
								"name": "addr"
							},
							{
								"deco": "xAa",
								"default": "null",
								"name": "service"
							}
						],
						"name": "this",
						"comment": " Construct a new $(D Internet6Address).\n Params:\n   addr    = an IPv6 host address string in the form described in RFC 2373,\n             or a host name which will be resolved using $(D getAddressInfo).\n   service = (optional) service name.\n",
						"originalType": "@trusted (in char[] addr, in char[] service = null)",
						"endline": 1834
					},
					{
						"kind": "constructor",
						"line": 1843,
						"deco": "FNfxAatZC3std6socket16Internet6Address",
						"endchar": 5,
						"char": 5,
						"parameters": [
							{
								"deco": "xAa",
								"name": "addr"
							},
							{
								"deco": "t",
								"name": "port"
							}
						],
						"name": "this",
						"comment": " Construct a new $(D Internet6Address).\n Params:\n   addr = an IPv6 host address string in the form described in RFC 2373,\n          or a host name which will be resolved using $(D getAddressInfo).\n   port = port number, may be $(D PORT_ANY).\n",
						"originalType": "@safe (in char[] addr, ushort port)",
						"endline": 1849
					},
					{
						"kind": "constructor",
						"line": 1858,
						"deco": "FNaNbNiNfG16htZC3std6socket16Internet6Address",
						"endchar": 5,
						"char": 5,
						"parameters": [
							{
								"deco": "G16h",
								"name": "addr"
							},
							{
								"deco": "t",
								"name": "port"
							}
						],
						"name": "this",
						"comment": " Construct a new $(D Internet6Address).\n Params:\n   addr = (optional) an IPv6 host address in host byte order, or\n          $(D ADDR_ANY).\n   port = port number, may be $(D PORT_ANY).\n",
						"originalType": "pure nothrow @nogc @safe (ubyte[16] addr, ushort port)",
						"endline": 1863
					},
					{
						"kind": "constructor",
						"line": 1866,
						"deco": "FNaNbNiNftZC3std6socket16Internet6Address",
						"endchar": 5,
						"char": 5,
						"parameters": [
							{
								"deco": "t",
								"name": "port"
							}
						],
						"name": "this",
						"comment": "ditto\n",
						"originalType": "pure nothrow @nogc @safe (ushort port)",
						"endline": 1871
					},
					{
						"kind": "function",
						"line": 1878,
						"storageClass": [
							"static"
						],
						"deco": "FNexAaZG16h",
						"endchar": 5,
						"char": 22,
						"parameters": [
							{
								"deco": "xAa",
								"name": "addr"
							}
						],
						"name": "parse",
						"comment": " Parse an IPv6 host address string as described in RFC 2373, and return the\n address.\n Throws: $(D SocketException) on error.\n",
						"originalType": "@trusted ubyte[16](in char[] addr)",
						"endline": 1887
					}
				],
				"char": 1,
				"name": "Internet6Address",
				"comment": " $(D Internet6Address) encapsulates an IPv6 (Internet Protocol version 6)\n socket address.\n\n Consider using $(D getAddress), $(D parseAddress) and $(D Address) methods\n instead of using this class directly.\n"
			},
			{
				"kind": "class",
				"line": 1906,
				"base": "std.socket.Address",
				"members": [
					{
						"kind": "constructor",
						"line": 1909,
						"deco": "FNfxAaZC3std6socket11UnixAddress",
						"char": 9,
						"parameters": [
							{
								"deco": "xAa",
								"name": "path"
							}
						],
						"name": "this",
						"comment": "Construct a new $(D UnixAddress) from the specified path.\n",
						"originalType": "@safe (in char[] path)"
					},
					{
						"kind": "function",
						"line": 1912,
						"deco": "xFNdNfZAya",
						"char": 26,
						"name": "path",
						"comment": "Get the underlying _path.\n"
					},
					{
						"kind": "function",
						"line": 1915,
						"storageClass": [
							"override"
						],
						"deco": "xFNfZAya",
						"char": 25,
						"name": "toString",
						"comment": "ditto\n",
						"overrides": [
							"std.socket.Address.toString"
						]
					}
				],
				"char": 5,
				"name": "UnixAddress",
				"comment": " $(D UnixAddress) encapsulates an address for a Unix domain socket\n ($(D AF_UNIX)). Available only on supported systems.\n"
			},
			{
				"kind": "class",
				"line": 2011,
				"base": "std.socket.SocketOSException",
				"members": [
					{
						"kind": "constructor",
						"line": 2014,
						"deco": "FNfAyaAyamC6object9ThrowableiZC3std6socket21SocketAcceptException",
						"endchar": 5,
						"char": 5,
						"parameters": [
							{
								"deco": "Aya",
								"name": "msg"
							},
							{
								"deco": "Aya",
								"default": "__FILE__",
								"name": "file"
							},
							{
								"deco": "m",
								"default": "cast(ulong)__LINE__",
								"name": "line"
							},
							{
								"deco": "C6object9Throwable",
								"default": "null",
								"name": "next"
							},
							{
								"deco": "i",
								"default": "_lasterr()",
								"name": "err"
							}
						],
						"name": "this",
						"comment": "\n",
						"originalType": "@safe (string msg, string file = __FILE__, size_t line = __LINE__, Throwable next = null, int err = _lasterr())",
						"endline": 2017
					},
					{
						"kind": "constructor",
						"line": 2020,
						"deco": "FNfAyaC6object9ThrowableAyamiZC3std6socket21SocketAcceptException",
						"endchar": 5,
						"char": 5,
						"parameters": [
							{
								"deco": "Aya",
								"name": "msg"
							},
							{
								"deco": "C6object9Throwable",
								"name": "next"
							},
							{
								"deco": "Aya",
								"default": "__FILE__",
								"name": "file"
							},
							{
								"deco": "m",
								"default": "cast(ulong)__LINE__",
								"name": "line"
							},
							{
								"deco": "i",
								"default": "_lasterr()",
								"name": "err"
							}
						],
						"name": "this",
						"comment": "\n",
						"originalType": "@safe (string msg, Throwable next, string file = __FILE__, size_t line = __LINE__, int err = _lasterr())",
						"endline": 2023
					},
					{
						"kind": "constructor",
						"line": 2026,
						"deco": "FNfAyaiAyamC6object9ThrowableZC3std6socket21SocketAcceptException",
						"endchar": 5,
						"char": 5,
						"parameters": [
							{
								"deco": "Aya",
								"name": "msg"
							},
							{
								"deco": "i",
								"name": "err"
							},
							{
								"deco": "Aya",
								"default": "__FILE__",
								"name": "file"
							},
							{
								"deco": "m",
								"default": "cast(ulong)__LINE__",
								"name": "line"
							},
							{
								"deco": "C6object9Throwable",
								"default": "null",
								"name": "next"
							}
						],
						"name": "this",
						"comment": "\n",
						"originalType": "@safe (string msg, int err, string file = __FILE__, size_t line = __LINE__, Throwable next = null)",
						"endline": 2029
					}
				],
				"char": 1,
				"name": "SocketAcceptException",
				"comment": " Class for exceptions thrown by $(D Socket.accept).\n"
			},
			{
				"kind": "enum",
				"line": 2033,
				"members": [
					{
						"kind": "enum member",
						"line": 2035,
						"value": "0",
						"char": 5,
						"name": "RECEIVE",
						"comment": "socket receives are disallowed\n"
					},
					{
						"kind": "enum member",
						"line": 2036,
						"value": "1",
						"char": 5,
						"name": "SEND",
						"comment": "socket sends are disallowed\n"
					},
					{
						"kind": "enum member",
						"line": 2037,
						"value": "2",
						"char": 5,
						"name": "BOTH",
						"comment": "both RECEIVE and SEND\n"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "SocketShutdown",
				"comment": "How a socket is shutdown:\n"
			},
			{
				"kind": "enum",
				"line": 2042,
				"members": [
					{
						"kind": "enum member",
						"line": 2044,
						"value": "0",
						"char": 5,
						"name": "NONE",
						"comment": "no flags specified\n"
					},
					{
						"kind": "enum member",
						"line": 2046,
						"value": "1",
						"char": 5,
						"name": "OOB",
						"comment": "out-of-band stream data\n"
					},
					{
						"kind": "enum member",
						"line": 2047,
						"value": "2",
						"char": 5,
						"name": "PEEK",
						"comment": "peek at incoming data without removing it from the queue, only for receiving\n"
					},
					{
						"kind": "enum member",
						"line": 2048,
						"value": "4",
						"char": 5,
						"name": "DONTROUTE",
						"comment": "data should not be subject to routing; this flag may be ignored. Only for sending\n"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "SocketFlags",
				"comment": "Flags may be OR'ed together:\n"
			},
			{
				"kind": "struct",
				"line": 2070,
				"members": [
					{
						"kind": "variable",
						"line": 2078,
						"storageClass": [
							"@safe"
						],
						"deco": "l",
						"char": 18,
						"name": "seconds",
						"comment": "Number of _seconds.\n",
						"originalType": "tv_sec_t",
						"offset": 16
					},
					{
						"kind": "variable",
						"line": 2079,
						"storageClass": [
							"@safe"
						],
						"deco": "l",
						"char": 19,
						"name": "microseconds",
						"comment": "Number of additional _microseconds.\n",
						"originalType": "tv_usec_t",
						"offset": 24
					}
				],
				"char": 1,
				"name": "TimeVal",
				"comment": "Duration timeout value.\n"
			},
			{
				"kind": "class",
				"line": 2097,
				"members": [
					{
						"kind": "constructor",
						"line": 2204,
						"deco": "FNaNbNfmZC3std6socket9SocketSet",
						"endchar": 5,
						"char": 5,
						"parameters": [
							{
								"deco": "m",
								"default": "1024LU",
								"name": "size"
							}
						],
						"name": "this",
						"comment": " Create a SocketSet with a specific initial capacity (defaults to\n $(D FD_SETSIZE), the system's default capacity).\n",
						"originalType": "pure nothrow @safe (size_t size = FD_SETSIZE)",
						"endline": 2208
					},
					{
						"kind": "function",
						"line": 2211,
						"deco": "FNaNbNiNfZv",
						"endchar": 5,
						"char": 10,
						"name": "reset",
						"comment": "Reset the $(D SocketSet) so that there are 0 $(D Socket)s in the collection.\n",
						"endline": 2220
					},
					{
						"kind": "function",
						"line": 2253,
						"deco": "FNaNbNfC3std6socket6SocketZv",
						"endchar": 5,
						"char": 10,
						"parameters": [
							{
								"deco": "C3std6socket6Socket",
								"name": "s"
							}
						],
						"name": "add",
						"comment": "Add a $(D Socket) to the collection.\n\nThe socket must not already be in the collection.\n",
						"endline": 2256
					},
					{
						"kind": "function",
						"line": 2281,
						"deco": "FNaNbNfC3std6socket6SocketZv",
						"endchar": 5,
						"char": 10,
						"parameters": [
							{
								"deco": "C3std6socket6Socket",
								"name": "s"
							}
						],
						"name": "remove",
						"comment": "Remove this $(D Socket) from the collection.\n\nDoes nothing if the socket is not in the collection already.\n",
						"endline": 2284
					},
					{
						"kind": "function",
						"line": 2304,
						"deco": "xFNaNbNiNfC3std6socket6SocketZi",
						"endchar": 5,
						"char": 9,
						"parameters": [
							{
								"deco": "C3std6socket6Socket",
								"name": "s"
							}
						],
						"name": "isSet",
						"comment": "Return nonzero if this $(D Socket) is in the collection.\n",
						"endline": 2307
					},
					{
						"kind": "function",
						"line": 2315,
						"deco": "xFNaNbNdNiNfZk",
						"endchar": 5,
						"char": 20,
						"name": "max",
						"comment": "Return the current capacity of this $(D SocketSet). The exact\n\nmeaning of the return value varies from platform to platform.\n\nNote that since D 2.065, this value does not indicate a\n\nrestriction, and $(D SocketSet) will grow its capacity as\n\nneeded automatically.\n",
						"endline": 2318
					}
				],
				"char": 1,
				"name": "SocketSet",
				"comment": " A collection of sockets for use with $(D Socket.select).\n\n $(D SocketSet) wraps the platform $(D fd_set) type. However, unlike\n $(D fd_set), $(D SocketSet) is not statically limited to $(D FD_SETSIZE)\n or any other limit, and grows as needed.\n"
			},
			{
				"kind": "enum",
				"line": 2468,
				"members": [
					{
						"kind": "enum member",
						"line": 2470,
						"value": "1",
						"char": 9,
						"name": "SOCKET",
						"comment": "Socket level\n"
					},
					{
						"kind": "enum member",
						"line": 2471,
						"value": "0",
						"char": 9,
						"name": "IP",
						"comment": "Internet Protocol version 4 level\n"
					},
					{
						"kind": "enum member",
						"line": 2472,
						"value": "1",
						"char": 9,
						"name": "ICMP",
						"comment": "Internet Control Message Protocol level\n"
					},
					{
						"kind": "enum member",
						"line": 2473,
						"value": "2",
						"char": 9,
						"name": "IGMP",
						"comment": "Internet Group Management Protocol level\n"
					},
					{
						"kind": "enum member",
						"line": 2474,
						"value": "3",
						"char": 9,
						"name": "GGP",
						"comment": "Gateway to Gateway Protocol level\n"
					},
					{
						"kind": "enum member",
						"line": 2475,
						"value": "6",
						"char": 9,
						"name": "TCP",
						"comment": "Transmission Control Protocol level\n"
					},
					{
						"kind": "enum member",
						"line": 2476,
						"value": "12",
						"char": 9,
						"name": "PUP",
						"comment": "PARC Universal Packet Protocol level\n"
					},
					{
						"kind": "enum member",
						"line": 2477,
						"value": "17",
						"char": 9,
						"name": "UDP",
						"comment": "User Datagram Protocol level\n"
					},
					{
						"kind": "enum member",
						"line": 2478,
						"value": "22",
						"char": 9,
						"name": "IDP",
						"comment": "Xerox NS protocol level\n"
					},
					{
						"kind": "enum member",
						"line": 2479,
						"value": "255",
						"char": 9,
						"name": "RAW",
						"comment": "Raw IP packet level\n"
					},
					{
						"kind": "enum member",
						"line": 2480,
						"value": "41",
						"char": 9,
						"name": "IPV6",
						"comment": "Internet Protocol version 6 level\n"
					}
				],
				"char": 5,
				"baseDeco": "i",
				"name": "SocketOptionLevel",
				"comment": "The level at which a socket option is defined:\n"
			},
			{
				"kind": "struct",
				"line": 2485,
				"members": [
					{
						"kind": "variable",
						"line": 2493,
						"storageClass": [
							"@safe"
						],
						"deco": "i",
						"char": 20,
						"name": "on",
						"comment": "Nonzero for _on.\n",
						"originalType": "l_onoff_t",
						"offset": 8
					},
					{
						"kind": "variable",
						"line": 2494,
						"storageClass": [
							"@safe"
						],
						"deco": "i",
						"char": 20,
						"name": "time",
						"comment": "Linger _time.\n",
						"originalType": "l_linger_t",
						"offset": 12
					}
				],
				"char": 1,
				"name": "Linger",
				"comment": "_Linger information for use with SocketOption.LINGER.\n"
			},
			{
				"kind": "enum",
				"line": 2505,
				"members": [
					{
						"kind": "enum member",
						"line": 2507,
						"value": "1",
						"char": 5,
						"name": "DEBUG",
						"comment": "Record debugging information\n"
					},
					{
						"kind": "enum member",
						"line": 2508,
						"value": "6",
						"char": 5,
						"name": "BROADCAST",
						"comment": "Allow transmission of broadcast messages\n"
					},
					{
						"kind": "enum member",
						"line": 2509,
						"value": "2",
						"char": 5,
						"name": "REUSEADDR",
						"comment": "Allow local reuse of address\n"
					},
					{
						"kind": "enum member",
						"line": 2510,
						"value": "13",
						"char": 5,
						"name": "LINGER",
						"comment": "Linger on close if unsent data is present\n"
					},
					{
						"kind": "enum member",
						"line": 2511,
						"value": "10",
						"char": 5,
						"name": "OOBINLINE",
						"comment": "Receive out-of-band data in band\n"
					},
					{
						"kind": "enum member",
						"line": 2512,
						"value": "7",
						"char": 5,
						"name": "SNDBUF",
						"comment": "Send buffer size\n"
					},
					{
						"kind": "enum member",
						"line": 2513,
						"value": "8",
						"char": 5,
						"name": "RCVBUF",
						"comment": "Receive buffer size\n"
					},
					{
						"kind": "enum member",
						"line": 2514,
						"value": "5",
						"char": 5,
						"name": "DONTROUTE",
						"comment": "Do not route\n"
					},
					{
						"kind": "enum member",
						"line": 2515,
						"value": "21",
						"char": 5,
						"name": "SNDTIMEO",
						"comment": "Send timeout\n"
					},
					{
						"kind": "enum member",
						"line": 2516,
						"value": "20",
						"char": 5,
						"name": "RCVTIMEO",
						"comment": "Receive timeout\n"
					},
					{
						"kind": "enum member",
						"line": 2517,
						"value": "4",
						"char": 5,
						"name": "ERROR",
						"comment": "Retrieve and clear error status\n"
					},
					{
						"kind": "enum member",
						"line": 2518,
						"value": "9",
						"char": 5,
						"name": "KEEPALIVE",
						"comment": "Enable keep-alive packets\n"
					},
					{
						"kind": "enum member",
						"line": 2519,
						"value": "30",
						"char": 5,
						"name": "ACCEPTCONN",
						"comment": "Listen\n"
					},
					{
						"kind": "enum member",
						"line": 2520,
						"value": "18",
						"char": 5,
						"name": "RCVLOWAT",
						"comment": "Minimum number of input bytes to process\n"
					},
					{
						"kind": "enum member",
						"line": 2521,
						"value": "19",
						"char": 5,
						"name": "SNDLOWAT",
						"comment": "Minimum number of output bytes to process\n"
					},
					{
						"kind": "enum member",
						"line": 2522,
						"value": "3",
						"char": 5,
						"name": "TYPE",
						"comment": "Socket type\n"
					},
					{
						"kind": "enum member",
						"line": 2525,
						"value": "1",
						"char": 5,
						"name": "TCP_NODELAY",
						"comment": "Disable the Nagle algorithm for send coalescing\n"
					},
					{
						"kind": "enum member",
						"line": 2528,
						"value": "16",
						"char": 5,
						"name": "IPV6_UNICAST_HOPS",
						"comment": "IP unicast hop limit\n"
					},
					{
						"kind": "enum member",
						"line": 2529,
						"value": "17",
						"char": 5,
						"name": "IPV6_MULTICAST_IF",
						"comment": "IP multicast interface\n"
					},
					{
						"kind": "enum member",
						"line": 2530,
						"value": "19",
						"char": 5,
						"name": "IPV6_MULTICAST_LOOP",
						"comment": "IP multicast loopback\n"
					},
					{
						"kind": "enum member",
						"line": 2531,
						"value": "18",
						"char": 5,
						"name": "IPV6_MULTICAST_HOPS",
						"comment": "IP multicast hops\n"
					},
					{
						"kind": "enum member",
						"line": 2532,
						"value": "20",
						"char": 5,
						"name": "IPV6_JOIN_GROUP",
						"comment": "Add an IP group membership\n"
					},
					{
						"kind": "enum member",
						"line": 2533,
						"value": "21",
						"char": 5,
						"name": "IPV6_LEAVE_GROUP",
						"comment": "Drop an IP group membership\n"
					},
					{
						"kind": "enum member",
						"line": 2534,
						"value": "26",
						"char": 5,
						"name": "IPV6_V6ONLY",
						"comment": "Treat wildcard bind as AF_INET6-only\n"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "SocketOption",
				"comment": "Specifies a socket option:\n"
			},
			{
				"kind": "class",
				"line": 2542,
				"members": [
					{
						"kind": "constructor",
						"line": 2610,
						"deco": "FNeE3std6socket13AddressFamilyE3std6socket10SocketTypeE3std6socket12ProtocolTypeZC3std6socket6Socket",
						"endchar": 5,
						"char": 5,
						"parameters": [
							{
								"deco": "E3std6socket13AddressFamily",
								"name": "af"
							},
							{
								"deco": "E3std6socket10SocketType",
								"name": "type"
							},
							{
								"deco": "E3std6socket12ProtocolType",
								"name": "protocol"
							}
						],
						"name": "this",
						"comment": " Create a blocking socket. If a single protocol type exists to support\n this socket type within the address family, the $(D ProtocolType) may be\n omitted.\n",
						"originalType": "@trusted (AddressFamily af, SocketType type, ProtocolType protocol)",
						"endline": 2617
					},
					{
						"kind": "constructor",
						"line": 2623,
						"deco": "FNfE3std6socket13AddressFamilyE3std6socket10SocketTypeZC3std6socket6Socket",
						"endchar": 5,
						"char": 5,
						"parameters": [
							{
								"deco": "E3std6socket13AddressFamily",
								"name": "af"
							},
							{
								"deco": "E3std6socket10SocketType",
								"name": "type"
							}
						],
						"name": "this",
						"comment": "ditto\n",
						"originalType": "@safe (AddressFamily af, SocketType type)",
						"endline": 2626
					},
					{
						"kind": "constructor",
						"line": 2630,
						"deco": "FNeE3std6socket13AddressFamilyE3std6socket10SocketTypexAaZC3std6socket6Socket",
						"endchar": 5,
						"char": 5,
						"parameters": [
							{
								"deco": "E3std6socket13AddressFamily",
								"name": "af"
							},
							{
								"deco": "E3std6socket10SocketType",
								"name": "type"
							},
							{
								"deco": "xAa",
								"name": "protocolName"
							}
						],
						"name": "this",
						"comment": "ditto\n",
						"originalType": "@trusted (AddressFamily af, SocketType type, in char[] protocolName)",
						"endline": 2637
					},
					{
						"kind": "constructor",
						"line": 2644,
						"deco": "FNfxS3std6socket11AddressInfoZC3std6socket6Socket",
						"endchar": 5,
						"char": 5,
						"parameters": [
							{
								"deco": "xS3std6socket11AddressInfo",
								"name": "info"
							}
						],
						"name": "this",
						"comment": " Create a blocking socket using the parameters from the specified\n $(D AddressInfo) structure.\n",
						"originalType": "@safe (in AddressInfo info)",
						"endline": 2647
					},
					{
						"kind": "constructor",
						"line": 2650,
						"deco": "FNaNbNiNfE3std6socket8socket_tE3std6socket13AddressFamilyZC3std6socket6Socket",
						"endchar": 5,
						"char": 5,
						"parameters": [
							{
								"deco": "E3std6socket8socket_t",
								"name": "sock"
							},
							{
								"deco": "E3std6socket13AddressFamily",
								"name": "af"
							}
						],
						"name": "this",
						"comment": "Use an existing socket handle.\n",
						"originalType": "pure nothrow @nogc @safe (socket_t sock, AddressFamily af)",
						"endline": 2655
					},
					{
						"kind": "function",
						"line": 2665,
						"deco": "xFNaNbNdNiNfZE3std6socket8socket_t",
						"endchar": 5,
						"char": 24,
						"name": "handle",
						"comment": "Get underlying socket handle.\n",
						"endline": 2668
					},
					{
						"kind": "function",
						"line": 2677,
						"deco": "xFNbNdNiNeZb",
						"endchar": 5,
						"char": 20,
						"name": "blocking",
						"comment": " Get/set socket's blocking flag.\n\n When a socket is blocking, calls to receive(), accept(), and send()\n will block and wait for data/action.\n A non-blocking socket will immediately return instead of blocking.\n",
						"endline": 2687
					},
					{
						"kind": "function",
						"line": 2690,
						"deco": "FNdNebZv",
						"endchar": 5,
						"char": 20,
						"parameters": [
							{
								"deco": "b",
								"name": "byes"
							}
						],
						"name": "blocking",
						"comment": "ditto\n",
						"endline": 2715
					},
					{
						"kind": "function",
						"line": 2719,
						"deco": "FNdNfZE3std6socket13AddressFamily",
						"endchar": 5,
						"char": 29,
						"name": "addressFamily",
						"comment": "Get the socket's address family.\n",
						"endline": 2722
					},
					{
						"kind": "function",
						"line": 2725,
						"deco": "xFNdNeZb",
						"endchar": 5,
						"char": 20,
						"name": "isAlive",
						"comment": "Property that indicates if this is a valid, alive socket.\n",
						"endline": 2730
					},
					{
						"kind": "function",
						"line": 2733,
						"deco": "FNeC3std6socket7AddressZv",
						"endchar": 5,
						"char": 10,
						"parameters": [
							{
								"deco": "C3std6socket7Address",
								"name": "addr"
							}
						],
						"name": "bind",
						"comment": "Associate a local address with this socket.\n",
						"endline": 2737
					},
					{
						"kind": "function",
						"line": 2744,
						"deco": "FNeC3std6socket7AddressZv",
						"endchar": 5,
						"char": 10,
						"parameters": [
							{
								"deco": "C3std6socket7Address",
								"name": "to"
							}
						],
						"name": "connect",
						"comment": " Establish a connection. If the socket is blocking, connect waits for\n the connection to be made. If the socket is nonblocking, connect\n returns immediately and the connection attempt is still in progress.\n",
						"endline": 2770
					},
					{
						"kind": "function",
						"line": 2777,
						"deco": "FNeiZv",
						"endchar": 5,
						"char": 10,
						"parameters": [
							{
								"deco": "i",
								"name": "backlog"
							}
						],
						"name": "listen",
						"comment": " Listen for an incoming connection. $(D bind) must be called before you\n can $(D listen). The $(D backlog) is a request of how many pending\n incoming connections are queued until $(D accept)ed.\n",
						"endline": 2781
					},
					{
						"kind": "function",
						"line": 2792,
						"protection": "protected",
						"deco": "FNaNbNfZC3std6socket6Socket",
						"endchar": 5,
						"char": 22,
						"name": "accepting",
						"comment": " Called by $(D accept) when a new $(D Socket) must be created for a new\n connection. To use a derived class, override this method and return an\n instance of your class. The returned $(D Socket)'s handle must not be\n set; $(D Socket) has a protected constructor $(D this()) to use in this\n situation.\n",
						"endline": 2795
					},
					{
						"kind": "function",
						"line": 2802,
						"deco": "FNeZC3std6socket6Socket",
						"endchar": 5,
						"char": 12,
						"name": "accept",
						"comment": " Accept an incoming connection. If the socket is blocking, $(D accept)\n waits for a connection request. Throws $(D SocketAcceptException) if\n unable to _accept. See $(D accepting) for use with derived classes.\n",
						"endline": 2826
					},
					{
						"kind": "function",
						"line": 2829,
						"deco": "FNbNiNeE3std6socket14SocketShutdownZv",
						"endchar": 5,
						"char": 10,
						"parameters": [
							{
								"deco": "E3std6socket14SocketShutdown",
								"name": "how"
							}
						],
						"name": "shutdown",
						"comment": "Disables sends and/or receives.\n",
						"endline": 2832
					},
					{
						"kind": "function",
						"line": 2856,
						"deco": "FNbNiNeZv",
						"endchar": 5,
						"char": 10,
						"name": "close",
						"comment": " Immediately drop any connections and release socket resources.\n Calling $(D shutdown) before $(D close) is recommended for\n connection-oriented sockets. The $(D Socket) object is no longer\n usable after $(D close).\n",
						"endline": 2860
					},
					{
						"kind": "function",
						"line": 2865,
						"storageClass": [
							"static"
						],
						"deco": "FNdNeZAya",
						"endchar": 5,
						"char": 29,
						"name": "hostName",
						"comment": "Returns the local machine's host name.\n",
						"endline": 2871
					},
					{
						"kind": "function",
						"line": 2874,
						"deco": "FNdNeZC3std6socket7Address",
						"endchar": 5,
						"char": 23,
						"name": "remoteAddress",
						"comment": "Remote endpoint $(D Address).\n",
						"endline": 2884
					},
					{
						"kind": "function",
						"line": 2887,
						"deco": "FNdNeZC3std6socket7Address",
						"endchar": 5,
						"char": 23,
						"name": "localAddress",
						"comment": "Local endpoint $(D Address).\n",
						"endline": 2897
					},
					{
						"kind": "variable",
						"line": 2904,
						"init": "-1",
						"storageClass": [
							"enum",
							"@safe"
						],
						"deco": "i",
						"char": 14,
						"name": "ERROR",
						"comment": " Send or receive error code. See $(D wouldHaveBlocked),\n $(D lastSocketError) and $(D Socket.getErrorText) for obtaining more\n information about the error.\n"
					},
					{
						"kind": "function",
						"line": 2913,
						"deco": "FNeAxvE3std6socket11SocketFlagsZl",
						"endchar": 5,
						"char": 15,
						"parameters": [
							{
								"deco": "Axv",
								"name": "buf"
							},
							{
								"deco": "E3std6socket11SocketFlags",
								"name": "flags"
							}
						],
						"name": "send",
						"comment": " Send data on the connection. If the socket is blocking and there is no\n buffer space left, $(D send) waits.\n Returns: The number of bytes actually sent, or $(D Socket.ERROR) on\n failure.\n",
						"originalType": "@trusted ptrdiff_t(const(void)[] buf, SocketFlags flags)",
						"endline": 2924
					},
					{
						"kind": "function",
						"line": 2927,
						"deco": "FNfAxvZl",
						"endchar": 5,
						"char": 15,
						"parameters": [
							{
								"deco": "Axv",
								"name": "buf"
							}
						],
						"name": "send",
						"comment": "ditto\n",
						"originalType": "@safe ptrdiff_t(const(void)[] buf)",
						"endline": 2930
					},
					{
						"kind": "function",
						"line": 2939,
						"deco": "FNeAxvE3std6socket11SocketFlagsC3std6socket7AddressZl",
						"endchar": 5,
						"char": 15,
						"parameters": [
							{
								"deco": "Axv",
								"name": "buf"
							},
							{
								"deco": "E3std6socket11SocketFlags",
								"name": "flags"
							},
							{
								"deco": "C3std6socket7Address",
								"name": "to"
							}
						],
						"name": "sendTo",
						"comment": " Send data to a specific destination Address. If the destination address is\n not specified, a connection must have been made and that address is used.\n If the socket is blocking and there is no buffer space left, $(D sendTo) waits.\n Returns: The number of bytes actually sent, or $(D Socket.ERROR) on\n failure.\n",
						"originalType": "@trusted ptrdiff_t(const(void)[] buf, SocketFlags flags, Address to)",
						"endline": 2952
					},
					{
						"kind": "function",
						"line": 2955,
						"deco": "FNfAxvC3std6socket7AddressZl",
						"endchar": 5,
						"char": 15,
						"parameters": [
							{
								"deco": "Axv",
								"name": "buf"
							},
							{
								"deco": "C3std6socket7Address",
								"name": "to"
							}
						],
						"name": "sendTo",
						"comment": "ditto\n",
						"originalType": "@safe ptrdiff_t(const(void)[] buf, Address to)",
						"endline": 2958
					},
					{
						"kind": "function",
						"line": 2963,
						"deco": "FNeAxvE3std6socket11SocketFlagsZl",
						"endchar": 5,
						"char": 15,
						"parameters": [
							{
								"deco": "Axv",
								"name": "buf"
							},
							{
								"deco": "E3std6socket11SocketFlags",
								"name": "flags"
							}
						],
						"name": "sendTo",
						"comment": "ditto\n",
						"originalType": "@trusted ptrdiff_t(const(void)[] buf, SocketFlags flags)",
						"endline": 2973
					},
					{
						"kind": "function",
						"line": 2978,
						"deco": "FNfAxvZl",
						"endchar": 5,
						"char": 15,
						"parameters": [
							{
								"deco": "Axv",
								"name": "buf"
							}
						],
						"name": "sendTo",
						"comment": "ditto\n",
						"originalType": "@safe ptrdiff_t(const(void)[] buf)",
						"endline": 2981
					},
					{
						"kind": "function",
						"line": 2991,
						"deco": "FNeAvE3std6socket11SocketFlagsZl",
						"endchar": 5,
						"char": 15,
						"parameters": [
							{
								"deco": "Av",
								"name": "buf"
							},
							{
								"deco": "E3std6socket11SocketFlags",
								"name": "flags"
							}
						],
						"name": "receive",
						"comment": " Receive data on the connection. If the socket is blocking, $(D receive)\n waits until there is data to be received.\n Returns: The number of bytes actually received, $(D 0) if the remote side\n has closed the connection, or $(D Socket.ERROR) on failure.\n",
						"originalType": "@trusted ptrdiff_t(void[] buf, SocketFlags flags)",
						"endline": 3003
					},
					{
						"kind": "function",
						"line": 3006,
						"deco": "FNfAvZl",
						"endchar": 5,
						"char": 15,
						"parameters": [
							{
								"deco": "Av",
								"name": "buf"
							}
						],
						"name": "receive",
						"comment": "ditto\n",
						"originalType": "@safe ptrdiff_t(void[] buf)",
						"endline": 3009
					},
					{
						"kind": "function",
						"line": 3018,
						"deco": "FNeAvE3std6socket11SocketFlagsKC3std6socket7AddressZl",
						"endchar": 5,
						"char": 15,
						"parameters": [
							{
								"deco": "Av",
								"name": "buf"
							},
							{
								"deco": "E3std6socket11SocketFlags",
								"name": "flags"
							},
							{
								"deco": "C3std6socket7Address",
								"storageClass": [
									"ref"
								],
								"name": "from"
							}
						],
						"name": "receiveFrom",
						"comment": " Receive data and get the remote endpoint $(D Address).\n If the socket is blocking, $(D receiveFrom) waits until there is data to\n be received.\n Returns: The number of bytes actually received, $(D 0) if the remote side\n has closed the connection, or $(D Socket.ERROR) on failure.\n",
						"originalType": "@trusted ptrdiff_t(void[] buf, SocketFlags flags, ref Address from)",
						"endline": 3037
					},
					{
						"kind": "function",
						"line": 3041,
						"deco": "FNfAvKC3std6socket7AddressZl",
						"endchar": 5,
						"char": 15,
						"parameters": [
							{
								"deco": "Av",
								"name": "buf"
							},
							{
								"deco": "C3std6socket7Address",
								"storageClass": [
									"ref"
								],
								"name": "from"
							}
						],
						"name": "receiveFrom",
						"comment": "ditto\n",
						"originalType": "@safe ptrdiff_t(void[] buf, ref Address from)",
						"endline": 3044
					},
					{
						"kind": "function",
						"line": 3049,
						"deco": "FNeAvE3std6socket11SocketFlagsZl",
						"endchar": 5,
						"char": 15,
						"parameters": [
							{
								"deco": "Av",
								"name": "buf"
							},
							{
								"deco": "E3std6socket11SocketFlags",
								"name": "flags"
							}
						],
						"name": "receiveFrom",
						"comment": "ditto\n",
						"originalType": "@trusted ptrdiff_t(void[] buf, SocketFlags flags)",
						"endline": 3063
					},
					{
						"kind": "function",
						"line": 3068,
						"deco": "FNfAvZl",
						"endchar": 5,
						"char": 15,
						"parameters": [
							{
								"deco": "Av",
								"name": "buf"
							}
						],
						"name": "receiveFrom",
						"comment": "ditto\n",
						"originalType": "@safe ptrdiff_t(void[] buf)",
						"endline": 3071
					},
					{
						"kind": "function",
						"line": 3077,
						"deco": "FNeE3std6socket17SocketOptionLevelE3std6socket12SocketOptionAvZi",
						"endchar": 5,
						"char": 9,
						"parameters": [
							{
								"deco": "E3std6socket17SocketOptionLevel",
								"name": "level"
							},
							{
								"deco": "E3std6socket12SocketOption",
								"name": "option"
							},
							{
								"deco": "Av",
								"name": "result"
							}
						],
						"name": "getOption",
						"comment": "Get a socket option.\n\nReturns: The number of bytes written to $(D result).\n",
						"endline": 3083
					},
					{
						"kind": "function",
						"line": 3087,
						"deco": "FNeE3std6socket17SocketOptionLevelE3std6socket12SocketOptionJiZi",
						"endchar": 5,
						"char": 9,
						"parameters": [
							{
								"deco": "E3std6socket17SocketOptionLevel",
								"name": "level"
							},
							{
								"deco": "E3std6socket12SocketOption",
								"name": "option"
							},
							{
								"deco": "i",
								"storageClass": [
									"out"
								],
								"name": "result"
							}
						],
						"name": "getOption",
						"comment": "Common case of getting integer and boolean options.\n",
						"originalType": "@trusted int(SocketOptionLevel level, SocketOption option, out int32_t result)",
						"endline": 3090
					},
					{
						"kind": "function",
						"line": 3094,
						"deco": "FNeE3std6socket17SocketOptionLevelE3std6socket12SocketOptionJS3std6socket6LingerZi",
						"endchar": 5,
						"char": 9,
						"parameters": [
							{
								"deco": "E3std6socket17SocketOptionLevel",
								"name": "level"
							},
							{
								"deco": "E3std6socket12SocketOption",
								"name": "option"
							},
							{
								"deco": "S3std6socket6Linger",
								"storageClass": [
									"out"
								],
								"name": "result"
							}
						],
						"name": "getOption",
						"comment": "Get the linger option.\n",
						"endline": 3098
					},
					{
						"kind": "function",
						"line": 3101,
						"deco": "FNeE3std6socket17SocketOptionLevelE3std6socket12SocketOptionJS4core4time8DurationZv",
						"endchar": 5,
						"char": 10,
						"parameters": [
							{
								"deco": "E3std6socket17SocketOptionLevel",
								"name": "level"
							},
							{
								"deco": "E3std6socket12SocketOption",
								"name": "option"
							},
							{
								"deco": "S4core4time8Duration",
								"storageClass": [
									"out"
								],
								"name": "result"
							}
						],
						"name": "getOption",
						"comment": "Get a timeout (duration) option.\n",
						"endline": 3122
					},
					{
						"kind": "function",
						"line": 3125,
						"deco": "FNeE3std6socket17SocketOptionLevelE3std6socket12SocketOptionAvZv",
						"endchar": 5,
						"char": 10,
						"parameters": [
							{
								"deco": "E3std6socket17SocketOptionLevel",
								"name": "level"
							},
							{
								"deco": "E3std6socket12SocketOption",
								"name": "option"
							},
							{
								"deco": "Av",
								"name": "value"
							}
						],
						"name": "setOption",
						"comment": "Set a socket option.\n",
						"endline": 3130
					},
					{
						"kind": "function",
						"line": 3134,
						"deco": "FNeE3std6socket17SocketOptionLevelE3std6socket12SocketOptioniZv",
						"endchar": 5,
						"char": 10,
						"parameters": [
							{
								"deco": "E3std6socket17SocketOptionLevel",
								"name": "level"
							},
							{
								"deco": "E3std6socket12SocketOption",
								"name": "option"
							},
							{
								"deco": "i",
								"name": "value"
							}
						],
						"name": "setOption",
						"comment": "Common case for setting integer and boolean options.\n",
						"originalType": "@trusted void(SocketOptionLevel level, SocketOption option, int32_t value)",
						"endline": 3137
					},
					{
						"kind": "function",
						"line": 3141,
						"deco": "FNeE3std6socket17SocketOptionLevelE3std6socket12SocketOptionS3std6socket6LingerZv",
						"endchar": 5,
						"char": 10,
						"parameters": [
							{
								"deco": "E3std6socket17SocketOptionLevel",
								"name": "level"
							},
							{
								"deco": "E3std6socket12SocketOption",
								"name": "option"
							},
							{
								"deco": "S3std6socket6Linger",
								"name": "value"
							}
						],
						"name": "setOption",
						"comment": "Set the linger option.\n",
						"endline": 3145
					},
					{
						"kind": "function",
						"line": 3188,
						"deco": "FNeE3std6socket17SocketOptionLevelE3std6socket12SocketOptionS4core4time8DurationZv",
						"endchar": 5,
						"char": 10,
						"parameters": [
							{
								"deco": "E3std6socket17SocketOptionLevel",
								"name": "level"
							},
							{
								"deco": "E3std6socket12SocketOption",
								"name": "option"
							},
							{
								"deco": "S4core4time8Duration",
								"name": "value"
							}
						],
						"name": "setOption",
						"comment": " Sets a timeout (duration) option, i.e. $(D SocketOption.SNDTIMEO) or\n $(D RCVTIMEO). Zero indicates no timeout.\n\n In a typical application, you might also want to consider using\n a non-blocking socket instead of setting a timeout on a blocking one.\n\n Note: While the receive timeout setting is generally quite accurate\n on *nix systems even for smaller durations, there are two issues to\n be aware of on Windows: First, although undocumented, the effective\n timeout duration seems to be the one set on the socket plus half\n a second. $(D setOption()) tries to compensate for that, but still,\n timeouts under 500ms are not possible on Windows. Second, be aware\n that the actual amount of time spent until a blocking call returns\n randomly varies on the order of 10ms.\n\n Params:\n   level  = The level at which a socket option is defined.\n   option = Either $(D SocketOption.SNDTIMEO) or $(D SocketOption.RCVTIMEO).\n   value  = The timeout duration to set. Must not be negative.\n\n Throws: $(D SocketException) if setting the options fails.\n\n Example:\n ---\n import std.datetime;\n auto pair = socketPair();\n scope(exit) foreach (s; pair) s.close();\n\n // Set a receive timeout, and then wait at one end of\n // the socket pair, knowing that no data will arrive.\n pair[0].setOption(SocketOptionLevel.SOCKET,\n     SocketOption.RCVTIMEO, dur!\"seconds\"(1));\n\n auto sw = StopWatch(AutoStart.yes);\n ubyte[1] buffer;\n pair[0].receive(buffer);\n writefln(\"Waited %s ms until the socket timed out.\",\n     sw.peek.msecs);\n ---\n",
						"endline": 3210
					},
					{
						"kind": "function",
						"line": 3214,
						"deco": "FNfZAya",
						"endchar": 5,
						"char": 12,
						"name": "getErrorText",
						"comment": "Get a text description of this socket's error status, and clear the\n\nsocket's error status.\n",
						"endline": 3219
					},
					{
						"kind": "function",
						"line": 3234,
						"deco": "FNeiiZv",
						"endchar": 5,
						"char": 10,
						"parameters": [
							{
								"deco": "i",
								"name": "time"
							},
							{
								"deco": "i",
								"name": "interval"
							}
						],
						"name": "setKeepAlive",
						"comment": " Enables TCP keep-alive with the specified parameters.\n\n Params:\n   time     = Number of seconds with no activity until the first\n              keep-alive packet is sent.\n   interval = Number of seconds between when successive keep-alive\n              packets are sent if no acknowledgement is received.\n\n Throws: $(D SocketOSException) if setting the options fails, or\n $(D SocketFeatureException) if setting keep-alive parameters is\n unsupported on the current platform.\n",
						"endline": 3259
					},
					{
						"kind": "function",
						"line": 3279,
						"storageClass": [
							"static"
						],
						"deco": "FNeC3std6socket9SocketSetC3std6socket9SocketSetC3std6socket9SocketSetS4core4time8DurationZi",
						"endchar": 5,
						"char": 16,
						"parameters": [
							{
								"deco": "C3std6socket9SocketSet",
								"name": "checkRead"
							},
							{
								"deco": "C3std6socket9SocketSet",
								"name": "checkWrite"
							},
							{
								"deco": "C3std6socket9SocketSet",
								"name": "checkError"
							},
							{
								"deco": "S4core4time8Duration",
								"name": "timeout"
							}
						],
						"name": "select",
						"comment": " Wait for a socket to change status. A wait timeout of $(Duration) or\n $(D TimeVal), may be specified; if a timeout is not specified or the\n $(D TimeVal) is $(D null), the maximum timeout is used. The $(D TimeVal)\n timeout has an unspecified value when $(D select) returns.\n Returns: The number of sockets with status changes, $(D 0) on timeout,\n or $(D -1) on interruption. If the return value is greater than $(D 0),\n the $(D SocketSets) are updated to only contain the sockets having status\n changes. For a connecting socket, a write status change means the\n connection is established and it's able to send. For a listening socket,\n a read status change means there is an incoming connection request and\n it's able to accept.\n",
						"endline": 3286
					},
					{
						"kind": "function",
						"line": 3290,
						"storageClass": [
							"static"
						],
						"deco": "FNfC3std6socket9SocketSetC3std6socket9SocketSetC3std6socket9SocketSetZi",
						"endchar": 5,
						"char": 16,
						"parameters": [
							{
								"deco": "C3std6socket9SocketSet",
								"name": "checkRead"
							},
							{
								"deco": "C3std6socket9SocketSet",
								"name": "checkWrite"
							},
							{
								"deco": "C3std6socket9SocketSet",
								"name": "checkError"
							}
						],
						"name": "select",
						"comment": "ditto\n",
						"endline": 3293
					},
					{
						"kind": "function",
						"line": 3296,
						"storageClass": [
							"static"
						],
						"deco": "FNeC3std6socket9SocketSetC3std6socket9SocketSetC3std6socket9SocketSetPS3std6socket7TimeValZi",
						"endchar": 5,
						"char": 16,
						"parameters": [
							{
								"deco": "C3std6socket9SocketSet",
								"name": "checkRead"
							},
							{
								"deco": "C3std6socket9SocketSet",
								"name": "checkWrite"
							},
							{
								"deco": "C3std6socket9SocketSet",
								"name": "checkError"
							},
							{
								"deco": "PS3std6socket7TimeVal",
								"name": "timeout"
							}
						],
						"name": "select",
						"comment": "Ditto\n",
						"endline": 3388
					},
					{
						"kind": "function",
						"line": 3403,
						"protection": "protected",
						"deco": "FNaNbNfZC3std6socket7Address",
						"endchar": 5,
						"char": 23,
						"name": "createAddress",
						"comment": "Returns a new Address object for the current address family.\n\nCan be overridden to support other addresses.\n",
						"endline": 3420
					}
				],
				"char": 1,
				"name": "Socket",
				"comment": " $(D Socket) is a class that creates a network communication endpoint using\n the Berkeley sockets interface.\n"
			},
			{
				"kind": "class",
				"line": 3426,
				"base": "std.socket.Socket",
				"members": [
					{
						"kind": "constructor",
						"line": 3429,
						"deco": "FNfE3std6socket13AddressFamilyZC3std6socket9TcpSocket",
						"endchar": 5,
						"char": 5,
						"parameters": [
							{
								"deco": "E3std6socket13AddressFamily",
								"name": "family"
							}
						],
						"name": "this",
						"comment": "Constructs a blocking TCP Socket.\n",
						"originalType": "@safe (AddressFamily family)",
						"endline": 3432
					},
					{
						"kind": "constructor",
						"line": 3435,
						"deco": "FNfZC3std6socket9TcpSocket",
						"endchar": 5,
						"char": 5,
						"name": "this",
						"comment": "Constructs a blocking IPv4 TCP Socket.\n",
						"originalType": "@safe ()",
						"endline": 3438
					},
					{
						"kind": "constructor",
						"line": 3443,
						"deco": "FNfC3std6socket7AddressZC3std6socket9TcpSocket",
						"endchar": 5,
						"char": 5,
						"parameters": [
							{
								"deco": "C3std6socket7Address",
								"name": "connectTo"
							}
						],
						"name": "this",
						"comment": "Constructs a blocking TCP Socket and connects to an $(D Address).\n",
						"originalType": "@safe (Address connectTo)",
						"endline": 3447
					}
				],
				"char": 1,
				"name": "TcpSocket",
				"comment": "$(D TcpSocket) is a shortcut class for a TCP Socket.\n"
			},
			{
				"kind": "class",
				"line": 3452,
				"base": "std.socket.Socket",
				"members": [
					{
						"kind": "constructor",
						"line": 3455,
						"deco": "FNfE3std6socket13AddressFamilyZC3std6socket9UdpSocket",
						"endchar": 5,
						"char": 5,
						"parameters": [
							{
								"deco": "E3std6socket13AddressFamily",
								"name": "family"
							}
						],
						"name": "this",
						"comment": "Constructs a blocking UDP Socket.\n",
						"originalType": "@safe (AddressFamily family)",
						"endline": 3458
					},
					{
						"kind": "constructor",
						"line": 3462,
						"deco": "FNfZC3std6socket9UdpSocket",
						"endchar": 5,
						"char": 5,
						"name": "this",
						"comment": "Constructs a blocking IPv4 UDP Socket.\n",
						"originalType": "@safe ()",
						"endline": 3465
					}
				],
				"char": 1,
				"name": "UdpSocket",
				"comment": "$(D UdpSocket) is a shortcut class for a UDP Socket.\n"
			},
			{
				"kind": "function",
				"line": 3488,
				"deco": "FNeZG2C3std6socket6Socket",
				"endchar": 1,
				"char": 11,
				"name": "socketPair",
				"comment": " Creates a pair of connected sockets.\n\n The two sockets are indistinguishable.\n\n Throws: $(D SocketException) if creation of the sockets fails.\n\n Example:\n ---\n immutable ubyte[] data = [1, 2, 3, 4];\n auto pair = socketPair();\n scope(exit) foreach (s; pair) s.close();\n\n pair[0].send(data);\n\n auto buf = new ubyte[data.length];\n pair[1].receive(buf);\n assert(buf == data);\n ---\n",
				"endline": 3526
			}
		],
		"name": "std.socket",
		"comment": " Socket primitives.\n Example: See $(SAMPLESRC listener.d) and $(SAMPLESRC htmlget.d)\n License: $(WEB www.boost.org/LICENSE_1_0.txt, Boost License 1.0).\n Authors: Christopher E. Miller, $(WEB klickverbot.at, David Nadlinger),\n      $(WEB thecybershadow.net, Vladimir Panteleev)\n Source:  $(PHOBOSSRC std/_socket.d)\n Macros:\n      WIKI=Phobos/StdSocket\n"
	},
	{
		"kind": "module",
		"file": "../phobos/std/uri.d",
		"members": [
			{
				"kind": "class",
				"line": 44,
				"base": "object.Exception",
				"members": [],
				"char": 1,
				"name": "URIException",
				"comment": " This Exception is thrown if something goes wrong when encoding or\ndecoding a URI.\n"
			},
			{
				"kind": "template",
				"line": 348,
				"constraint": "isSomeChar!Char",
				"members": [
					{
						"kind": "function",
						"line": 348,
						"endchar": 1,
						"char": 8,
						"type": "string(in Char[] encodedURI)",
						"parameters": [
							{
								"storageClass": [
									"in"
								],
								"type": "Char[]",
								"name": "encodedURI"
							}
						],
						"name": "decode",
						"endline": 352
					}
				],
				"char": 8,
				"parameters": [
					{
						"kind": "type",
						"name": "Char"
					}
				],
				"comment": " Decodes the URI string encodedURI into a UTF-8 string and returns it.\n Escape sequences that resolve to reserved URI characters are not replaced.\n Escape sequences that resolve to the '#' character are not replaced.\n",
				"name": "decode"
			},
			{
				"kind": "template",
				"line": 359,
				"constraint": "isSomeChar!Char",
				"members": [
					{
						"kind": "function",
						"line": 359,
						"endchar": 1,
						"char": 8,
						"type": "string(in Char[] encodedURIComponent)",
						"parameters": [
							{
								"storageClass": [
									"in"
								],
								"type": "Char[]",
								"name": "encodedURIComponent"
							}
						],
						"name": "decodeComponent",
						"endline": 363
					}
				],
				"char": 8,
				"parameters": [
					{
						"kind": "type",
						"name": "Char"
					}
				],
				"comment": " Decodes the URI string encodedURI into a UTF-8 string and returns it. All\n escape sequences are decoded.\n",
				"name": "decodeComponent"
			},
			{
				"kind": "template",
				"line": 370,
				"constraint": "isSomeChar!Char",
				"members": [
					{
						"kind": "function",
						"line": 370,
						"endchar": 1,
						"char": 8,
						"type": "string(in Char[] uri)",
						"parameters": [
							{
								"storageClass": [
									"in"
								],
								"type": "Char[]",
								"name": "uri"
							}
						],
						"name": "encode",
						"endline": 374
					}
				],
				"char": 8,
				"parameters": [
					{
						"kind": "type",
						"name": "Char"
					}
				],
				"comment": " Encodes the UTF-8 string uri into a URI and returns that URI. Any character\n not a valid URI character is escaped. The '#' character is not escaped.\n",
				"name": "encode"
			},
			{
				"kind": "template",
				"line": 381,
				"constraint": "isSomeChar!Char",
				"members": [
					{
						"kind": "function",
						"line": 381,
						"endchar": 1,
						"char": 8,
						"type": "string(in Char[] uriComponent)",
						"parameters": [
							{
								"storageClass": [
									"in"
								],
								"type": "Char[]",
								"name": "uriComponent"
							}
						],
						"name": "encodeComponent",
						"endline": 385
					}
				],
				"char": 8,
				"parameters": [
					{
						"kind": "type",
						"name": "Char"
					}
				],
				"comment": " Encodes the UTF-8 string uriComponent into a URI and returns that URI.\n Any character not a letter, digit, or one of -_.!~*'() is escaped.\n",
				"name": "encodeComponent"
			},
			{
				"kind": "template",
				"line": 394,
				"constraint": "isSomeChar!Char",
				"members": [
					{
						"kind": "function",
						"line": 394,
						"endchar": 1,
						"char": 8,
						"type": "size_t(in Char[] s)",
						"parameters": [
							{
								"storageClass": [
									"in"
								],
								"type": "Char[]",
								"name": "s"
							}
						],
						"name": "uriLength",
						"endline": 444
					}
				],
				"char": 8,
				"parameters": [
					{
						"kind": "type",
						"name": "Char"
					}
				],
				"comment": " Does string s[] start with a URL?\n Returns:\n  -1   it does not\n  len  it does, and s[0..len] is the slice of s[] that is that URL\nExample:\n\n---\nstring s1 = \"http://www.digitalmars.com/~fred/fredsRX.html#foo end!\";\nassert (uriLength(s1) == 49);\nstring s2 = \"no uri here\";\nassert (uriLength(s2) == -1);\n\n---\n",
				"name": "uriLength"
			},
			{
				"kind": "template",
				"line": 464,
				"constraint": "isSomeChar!Char",
				"members": [
					{
						"kind": "function",
						"line": 464,
						"endchar": 1,
						"char": 8,
						"type": "size_t(in Char[] s)",
						"parameters": [
							{
								"storageClass": [
									"in"
								],
								"type": "Char[]",
								"name": "s"
							}
						],
						"name": "emailLength",
						"endline": 507
					}
				],
				"char": 8,
				"parameters": [
					{
						"kind": "type",
						"name": "Char"
					}
				],
				"comment": " Does string s[] start with an email address?\n Returns:\n  -1    it does not\n  len   it does, and s[0..i] is the slice of s[] that is that email address\n References:\n  RFC2822\nExample:\n\n---\nstring s1 = \"my.e-mail@www.example-domain.com with garbage added\";\nassert (emailLength(s1) == 32);\nstring s2 = \"no email address here\";\nassert (emailLength(s2) == -1);\n\n---\n",
				"name": "emailLength"
			}
		],
		"name": "std.uri",
		"comment": " Encode and decode Uniform Resource Identifiers (URIs).\n URIs are used in internet transfer protocols.\n Valid URI characters consist of letters, digits,\n and the characters $(B ;/?:@&amp;=+$,-_.!~*'())\n Reserved URI characters are $(B ;/?:@&amp;=+$,)\n Escape sequences consist of $(B %) followed by two hex digits.\n\n See_Also:\n  $(LINK2 http://www.ietf.org/rfc/rfc3986.txt, RFC 3986)<br>\n  $(LINK2 http://en.wikipedia.org/wiki/Uniform_resource_identifier, Wikipedia)\n Macros:\n  WIKI = Phobos/StdUri\n\n Copyright: Copyright Digital Mars 2000 - 2009.\n License:   $(WEB www.boost.org/LICENSE_1_0.txt, Boost License 1.0).\n Authors:   $(WEB digitalmars.com, Walter Bright)\n Source:    $(PHOBOSSRC std/_uri.d)\n"
	},
	{
		"kind": "module",
		"file": "../phobos/std/variant.d",
		"members": [
			{
				"kind": "template",
				"line": 76,
				"members": [],
				"char": 1,
				"parameters": [
					{
						"kind": "tuple",
						"name": "T"
					}
				],
				"comment": "    Gives the $(D sizeof) the largest type given.\n",
				"name": "maxSize"
			},
			{
				"kind": "template",
				"line": 161,
				"members": [
					{
						"kind": "struct",
						"line": 161,
						"members": [
							{
								"kind": "template",
								"line": 178,
								"members": [
									{
										"kind": "variable",
										"line": 180,
										"init": "is(T == VariantN) || (AllowedTypes.length == 0 || staticIndexOf!(T, AllowedTypes) >= 0)",
										"storageClass": [
											"enum"
										],
										"deco": "b",
										"char": 19,
										"name": "allowed"
									}
								],
								"char": 12,
								"parameters": [
									{
										"kind": "type",
										"name": "T"
									}
								],
								"comment": " Tells whether a type $(D_PARAM T) is statically allowed for\n storage inside a $(D_PARAM VariantN) object by looking\n $(D_PARAM T) up in $(D_PARAM AllowedTypes).\n",
								"name": "allowed"
							},
							{
								"kind": "template",
								"line": 577,
								"members": [
									{
										"kind": "constructor",
										"line": 577,
										"endchar": 5,
										"char": 5,
										"type": "(T value)",
										"parameters": [
											{
												"type": "T",
												"name": "value"
											}
										],
										"name": "this",
										"endline": 582
									}
								],
								"char": 5,
								"parameters": [
									{
										"kind": "type",
										"name": "T"
									}
								],
								"comment": " Constructs a $(D_PARAM VariantN) value given an argument of a\n generic type. Statically rejects disallowed types.\n",
								"name": "this"
							},
							{
								"kind": "template",
								"line": 603,
								"members": [
									{
										"kind": "function",
										"line": 603,
										"endchar": 5,
										"char": 14,
										"type": "VariantN(T rhs)",
										"parameters": [
											{
												"type": "T",
												"name": "rhs"
											}
										],
										"name": "opAssign",
										"endline": 661
									}
								],
								"char": 14,
								"parameters": [
									{
										"kind": "type",
										"name": "T"
									}
								],
								"comment": " Assigns a $(D_PARAM VariantN) from a generic\n argument. Statically rejects disallowed types.\n",
								"name": "opAssign"
							},
							{
								"kind": "function",
								"line": 679,
								"endchar": 5,
								"char": 20,
								"type": "const pure nothrow @property bool()",
								"name": "hasValue",
								"comment": " Returns true if and only if the $(D_PARAM VariantN) object\n holds a valid value (has been initialized with, or assigned\n from, a valid value).\nExample:\n\n---\nVariant a;\nassert(!a.hasValue);\nVariant b;\na = b;\nassert(!a.hasValue); // still no value\na = 5;\nassert(a.hasValue);\n\n\n---\n",
								"endline": 683
							},
							{
								"kind": "template",
								"line": 704,
								"members": [
									{
										"kind": "function",
										"line": 704,
										"endchar": 5,
										"char": 25,
										"type": "inout @property inout(T)*()",
										"name": "peek",
										"endline": 715
									}
								],
								"char": 25,
								"parameters": [
									{
										"kind": "type",
										"name": "T"
									}
								],
								"comment": " If the $(D_PARAM VariantN) object holds a value of the\n $(I exact) type $(D_PARAM T), returns a pointer to that\n value. Otherwise, returns $(D_PARAM null). In cases\n where $(D_PARAM T) is statically disallowed, $(D_PARAM\n peek) will not compile.\nExample:\n\n---\nVariant a = 5;\nauto b = a.peek!(int);\nassert(b !is null);\n*b = 6;\nassert(a == 6);\n\n\n---\n",
								"name": "peek"
							},
							{
								"kind": "function",
								"line": 731,
								"endchar": 5,
								"char": 24,
								"type": "const nothrow @property @trusted TypeInfo()",
								"name": "type",
								"comment": " Returns the $(D_PARAM typeid) of the currently held value.\n",
								"endline": 738
							},
							{
								"kind": "template",
								"line": 747,
								"members": [
									{
										"kind": "function",
										"line": 747,
										"endchar": 5,
										"char": 20,
										"type": "const @property bool()",
										"name": "convertsTo",
										"endline": 751
									}
								],
								"char": 20,
								"parameters": [
									{
										"kind": "type",
										"name": "T"
									}
								],
								"comment": " Returns $(D_PARAM true) if and only if the $(D_PARAM VariantN)\n object holds an object implicitly convertible to type $(D_PARAM\n U). Implicit convertibility is defined as per\n $(LINK2 std_traits.html#ImplicitConversionTargets,ImplicitConversionTargets).\n",
								"name": "convertsTo"
							},
							{
								"kind": "template",
								"line": 761,
								"constraint": "!is(T == const)",
								"members": [
									{
										"kind": "function",
										"line": 761,
										"endchar": 5,
										"char": 17,
										"type": "@property T()",
										"name": "get",
										"endline": 784
									}
								],
								"char": 17,
								"parameters": [
									{
										"kind": "type",
										"name": "T"
									}
								],
								"comment": " Returns the value stored in the $(D_PARAM VariantN) object,\n implicitly converted to the requested type $(D_PARAM T), in\n fact $(D_PARAM DecayStaticToDynamicArray!(T)). If an implicit\n conversion is not possible, throws a $(D_PARAM\n VariantException).\n",
								"name": "get"
							},
							{
								"kind": "template",
								"line": 825,
								"members": [
									{
										"kind": "function",
										"line": 825,
										"endchar": 5,
										"char": 17,
										"type": "@property T()",
										"name": "coerce",
										"endline": 867
									}
								],
								"char": 17,
								"parameters": [
									{
										"kind": "type",
										"name": "T"
									}
								],
								"comment": " Returns the value stored in the $(D_PARAM VariantN) object,\n explicitly converted (coerced) to the requested type $(D_PARAM\n T). If $(D_PARAM T) is a string type, the value is formatted as\n a string. If the $(D_PARAM VariantN) object is a string, a\n parse of the string to type $(D_PARAM T) is attempted. If a\n conversion is not possible, throws a $(D_PARAM\n VariantException).\n",
								"name": "coerce"
							},
							{
								"kind": "function",
								"line": 873,
								"endchar": 5,
								"char": 12,
								"type": "string()",
								"name": "toString",
								"comment": " Formats the stored value as a string.\n",
								"endline": 878
							},
							{
								"kind": "template",
								"line": 885,
								"members": [
									{
										"kind": "function",
										"line": 885,
										"endchar": 5,
										"char": 10,
										"type": "const bool(auto ref T rhs)",
										"parameters": [
											{
												"storageClass": [
													"auto",
													"ref"
												],
												"type": "T",
												"name": "rhs"
											}
										],
										"name": "opEquals",
										"endline": 893
									}
								],
								"char": 10,
								"parameters": [
									{
										"kind": "type",
										"name": "T"
									}
								],
								"comment": " Comparison for equality used by the \"==\" and \"!=\"  operators.\n",
								"name": "opEquals"
							},
							{
								"kind": "template",
								"line": 907,
								"members": [
									{
										"kind": "function",
										"line": 907,
										"endchar": 5,
										"char": 9,
										"type": "int(T rhs)",
										"parameters": [
											{
												"type": "T",
												"name": "rhs"
											}
										],
										"name": "opCmp",
										"endline": 921
									}
								],
								"char": 9,
								"parameters": [
									{
										"kind": "type",
										"name": "T"
									}
								],
								"comment": " Ordering comparison used by the \"<\", \"<=\", \">\", and \">=\"\n operators. In case comparison is not sensible between the held\n value and $(D_PARAM rhs), an exception is thrown.\n",
								"name": "opCmp"
							},
							{
								"kind": "function",
								"line": 927,
								"endchar": 5,
								"char": 12,
								"type": "const nothrow @safe size_t()",
								"name": "toHash",
								"comment": " Computes the hash of the held value.\n",
								"endline": 930
							},
							{
								"kind": "template",
								"line": 1016,
								"members": [
									{
										"kind": "function",
										"line": 1016,
										"endchar": 67,
										"char": 14,
										"type": "VariantN(T rhs)",
										"parameters": [
											{
												"type": "T",
												"name": "rhs"
											}
										],
										"name": "opAdd",
										"endline": 1016
									}
								],
								"char": 14,
								"parameters": [
									{
										"kind": "type",
										"name": "T"
									}
								],
								"comment": " Arithmetic between $(D_PARAM VariantN) objects and numeric\n values. All arithmetic operations return a $(D_PARAM VariantN)\n object typed depending on the types of both values\n involved. The conversion rules mimic D's built-in rules for\n arithmetic conversions.\n",
								"name": "opAdd"
							},
							{
								"kind": "template",
								"line": 1018,
								"members": [
									{
										"kind": "function",
										"line": 1018,
										"endchar": 67,
										"char": 14,
										"type": "VariantN(T rhs)",
										"parameters": [
											{
												"type": "T",
												"name": "rhs"
											}
										],
										"name": "opSub",
										"endline": 1018
									}
								],
								"char": 14,
								"parameters": [
									{
										"kind": "type",
										"name": "T"
									}
								],
								"comment": "ditto\n",
								"name": "opSub"
							},
							{
								"kind": "template",
								"line": 1029,
								"members": [
									{
										"kind": "function",
										"line": 1029,
										"endchar": 67,
										"char": 14,
										"type": "VariantN(T rhs)",
										"parameters": [
											{
												"type": "T",
												"name": "rhs"
											}
										],
										"name": "opMul",
										"endline": 1029
									}
								],
								"char": 14,
								"parameters": [
									{
										"kind": "type",
										"name": "T"
									}
								],
								"comment": "ditto\n",
								"name": "opMul"
							},
							{
								"kind": "template",
								"line": 1031,
								"members": [
									{
										"kind": "function",
										"line": 1031,
										"endchar": 67,
										"char": 14,
										"type": "VariantN(T rhs)",
										"parameters": [
											{
												"type": "T",
												"name": "rhs"
											}
										],
										"name": "opDiv",
										"endline": 1031
									}
								],
								"char": 14,
								"parameters": [
									{
										"kind": "type",
										"name": "T"
									}
								],
								"comment": "ditto\n",
								"name": "opDiv"
							},
							{
								"kind": "template",
								"line": 1038,
								"members": [
									{
										"kind": "function",
										"line": 1038,
										"endchar": 67,
										"char": 14,
										"type": "VariantN(T rhs)",
										"parameters": [
											{
												"type": "T",
												"name": "rhs"
											}
										],
										"name": "opMod",
										"endline": 1038
									}
								],
								"char": 14,
								"parameters": [
									{
										"kind": "type",
										"name": "T"
									}
								],
								"comment": "ditto\n",
								"name": "opMod"
							},
							{
								"kind": "template",
								"line": 1045,
								"members": [
									{
										"kind": "function",
										"line": 1045,
										"endchar": 62,
										"char": 14,
										"type": "VariantN(T rhs)",
										"parameters": [
											{
												"type": "T",
												"name": "rhs"
											}
										],
										"name": "opAnd",
										"endline": 1045
									}
								],
								"char": 14,
								"parameters": [
									{
										"kind": "type",
										"name": "T"
									}
								],
								"comment": "ditto\n",
								"name": "opAnd"
							},
							{
								"kind": "template",
								"line": 1047,
								"members": [
									{
										"kind": "function",
										"line": 1047,
										"endchar": 61,
										"char": 14,
										"type": "VariantN(T rhs)",
										"parameters": [
											{
												"type": "T",
												"name": "rhs"
											}
										],
										"name": "opOr",
										"endline": 1047
									}
								],
								"char": 14,
								"parameters": [
									{
										"kind": "type",
										"name": "T"
									}
								],
								"comment": "ditto\n",
								"name": "opOr"
							},
							{
								"kind": "template",
								"line": 1049,
								"members": [
									{
										"kind": "function",
										"line": 1049,
										"endchar": 62,
										"char": 14,
										"type": "VariantN(T rhs)",
										"parameters": [
											{
												"type": "T",
												"name": "rhs"
											}
										],
										"name": "opXor",
										"endline": 1049
									}
								],
								"char": 14,
								"parameters": [
									{
										"kind": "type",
										"name": "T"
									}
								],
								"comment": "ditto\n",
								"name": "opXor"
							},
							{
								"kind": "template",
								"line": 1051,
								"members": [
									{
										"kind": "function",
										"line": 1051,
										"endchar": 63,
										"char": 14,
										"type": "VariantN(T rhs)",
										"parameters": [
											{
												"type": "T",
												"name": "rhs"
											}
										],
										"name": "opShl",
										"endline": 1051
									}
								],
								"char": 14,
								"parameters": [
									{
										"kind": "type",
										"name": "T"
									}
								],
								"comment": "ditto\n",
								"name": "opShl"
							},
							{
								"kind": "template",
								"line": 1058,
								"members": [
									{
										"kind": "function",
										"line": 1058,
										"endchar": 63,
										"char": 14,
										"type": "VariantN(T rhs)",
										"parameters": [
											{
												"type": "T",
												"name": "rhs"
											}
										],
										"name": "opShr",
										"endline": 1058
									}
								],
								"char": 14,
								"parameters": [
									{
										"kind": "type",
										"name": "T"
									}
								],
								"comment": "ditto\n",
								"name": "opShr"
							},
							{
								"kind": "template",
								"line": 1065,
								"members": [
									{
										"kind": "function",
										"line": 1065,
										"endchar": 65,
										"char": 14,
										"type": "VariantN(T rhs)",
										"parameters": [
											{
												"type": "T",
												"name": "rhs"
											}
										],
										"name": "opUShr",
										"endline": 1065
									}
								],
								"char": 14,
								"parameters": [
									{
										"kind": "type",
										"name": "T"
									}
								],
								"comment": "ditto\n",
								"name": "opUShr"
							},
							{
								"kind": "template",
								"line": 1072,
								"members": [
									{
										"kind": "function",
										"line": 1072,
										"endchar": 5,
										"char": 14,
										"type": "VariantN(T rhs)",
										"parameters": [
											{
												"type": "T",
												"name": "rhs"
											}
										],
										"name": "opCat",
										"endline": 1077
									}
								],
								"char": 14,
								"parameters": [
									{
										"kind": "type",
										"name": "T"
									}
								],
								"comment": "ditto\n",
								"name": "opCat"
							},
							{
								"kind": "template",
								"line": 1087,
								"members": [
									{
										"kind": "function",
										"line": 1087,
										"endchar": 65,
										"char": 14,
										"type": "VariantN(T rhs)",
										"parameters": [
											{
												"type": "T",
												"name": "rhs"
											}
										],
										"name": "opAddAssign",
										"endline": 1087
									}
								],
								"char": 14,
								"parameters": [
									{
										"kind": "type",
										"name": "T"
									}
								],
								"comment": "ditto\n",
								"name": "opAddAssign"
							},
							{
								"kind": "template",
								"line": 1089,
								"members": [
									{
										"kind": "function",
										"line": 1089,
										"endchar": 65,
										"char": 14,
										"type": "VariantN(T rhs)",
										"parameters": [
											{
												"type": "T",
												"name": "rhs"
											}
										],
										"name": "opSubAssign",
										"endline": 1089
									}
								],
								"char": 14,
								"parameters": [
									{
										"kind": "type",
										"name": "T"
									}
								],
								"comment": "ditto\n",
								"name": "opSubAssign"
							},
							{
								"kind": "template",
								"line": 1091,
								"members": [
									{
										"kind": "function",
										"line": 1091,
										"endchar": 65,
										"char": 14,
										"type": "VariantN(T rhs)",
										"parameters": [
											{
												"type": "T",
												"name": "rhs"
											}
										],
										"name": "opMulAssign",
										"endline": 1091
									}
								],
								"char": 14,
								"parameters": [
									{
										"kind": "type",
										"name": "T"
									}
								],
								"comment": "ditto\n",
								"name": "opMulAssign"
							},
							{
								"kind": "template",
								"line": 1093,
								"members": [
									{
										"kind": "function",
										"line": 1093,
										"endchar": 65,
										"char": 14,
										"type": "VariantN(T rhs)",
										"parameters": [
											{
												"type": "T",
												"name": "rhs"
											}
										],
										"name": "opDivAssign",
										"endline": 1093
									}
								],
								"char": 14,
								"parameters": [
									{
										"kind": "type",
										"name": "T"
									}
								],
								"comment": "ditto\n",
								"name": "opDivAssign"
							},
							{
								"kind": "template",
								"line": 1095,
								"members": [
									{
										"kind": "function",
										"line": 1095,
										"endchar": 65,
										"char": 14,
										"type": "VariantN(T rhs)",
										"parameters": [
											{
												"type": "T",
												"name": "rhs"
											}
										],
										"name": "opModAssign",
										"endline": 1095
									}
								],
								"char": 14,
								"parameters": [
									{
										"kind": "type",
										"name": "T"
									}
								],
								"comment": "ditto\n",
								"name": "opModAssign"
							},
							{
								"kind": "template",
								"line": 1097,
								"members": [
									{
										"kind": "function",
										"line": 1097,
										"endchar": 65,
										"char": 14,
										"type": "VariantN(T rhs)",
										"parameters": [
											{
												"type": "T",
												"name": "rhs"
											}
										],
										"name": "opAndAssign",
										"endline": 1097
									}
								],
								"char": 14,
								"parameters": [
									{
										"kind": "type",
										"name": "T"
									}
								],
								"comment": "ditto\n",
								"name": "opAndAssign"
							},
							{
								"kind": "template",
								"line": 1099,
								"members": [
									{
										"kind": "function",
										"line": 1099,
										"endchar": 65,
										"char": 14,
										"type": "VariantN(T rhs)",
										"parameters": [
											{
												"type": "T",
												"name": "rhs"
											}
										],
										"name": "opOrAssign",
										"endline": 1099
									}
								],
								"char": 14,
								"parameters": [
									{
										"kind": "type",
										"name": "T"
									}
								],
								"comment": "ditto\n",
								"name": "opOrAssign"
							},
							{
								"kind": "template",
								"line": 1101,
								"members": [
									{
										"kind": "function",
										"line": 1101,
										"endchar": 65,
										"char": 14,
										"type": "VariantN(T rhs)",
										"parameters": [
											{
												"type": "T",
												"name": "rhs"
											}
										],
										"name": "opXorAssign",
										"endline": 1101
									}
								],
								"char": 14,
								"parameters": [
									{
										"kind": "type",
										"name": "T"
									}
								],
								"comment": "ditto\n",
								"name": "opXorAssign"
							},
							{
								"kind": "template",
								"line": 1103,
								"members": [
									{
										"kind": "function",
										"line": 1103,
										"endchar": 66,
										"char": 14,
										"type": "VariantN(T rhs)",
										"parameters": [
											{
												"type": "T",
												"name": "rhs"
											}
										],
										"name": "opShlAssign",
										"endline": 1103
									}
								],
								"char": 14,
								"parameters": [
									{
										"kind": "type",
										"name": "T"
									}
								],
								"comment": "ditto\n",
								"name": "opShlAssign"
							},
							{
								"kind": "template",
								"line": 1105,
								"members": [
									{
										"kind": "function",
										"line": 1105,
										"endchar": 66,
										"char": 14,
										"type": "VariantN(T rhs)",
										"parameters": [
											{
												"type": "T",
												"name": "rhs"
											}
										],
										"name": "opShrAssign",
										"endline": 1105
									}
								],
								"char": 14,
								"parameters": [
									{
										"kind": "type",
										"name": "T"
									}
								],
								"comment": "ditto\n",
								"name": "opShrAssign"
							},
							{
								"kind": "template",
								"line": 1107,
								"members": [
									{
										"kind": "function",
										"line": 1107,
										"endchar": 67,
										"char": 14,
										"type": "VariantN(T rhs)",
										"parameters": [
											{
												"type": "T",
												"name": "rhs"
											}
										],
										"name": "opUShrAssign",
										"endline": 1107
									}
								],
								"char": 14,
								"parameters": [
									{
										"kind": "type",
										"name": "T"
									}
								],
								"comment": "ditto\n",
								"name": "opUShrAssign"
							},
							{
								"kind": "template",
								"line": 1109,
								"members": [
									{
										"kind": "function",
										"line": 1109,
										"endchar": 5,
										"char": 14,
										"type": "VariantN(T rhs)",
										"parameters": [
											{
												"type": "T",
												"name": "rhs"
											}
										],
										"name": "opCatAssign",
										"endline": 1114
									}
								],
								"char": 14,
								"parameters": [
									{
										"kind": "type",
										"name": "T"
									}
								],
								"comment": "ditto\n",
								"name": "opCatAssign"
							},
							{
								"kind": "template",
								"line": 1121,
								"members": [
									{
										"kind": "function",
										"line": 1121,
										"endchar": 5,
										"char": 13,
										"type": "Variant(K i)",
										"parameters": [
											{
												"type": "K",
												"name": "i"
											}
										],
										"name": "opIndex",
										"endline": 1126
									}
								],
								"char": 13,
								"parameters": [
									{
										"kind": "type",
										"name": "K"
									}
								],
								"comment": " Array and associative array operations. If a $(D_PARAM\n VariantN) contains an (associative) array, it can be indexed\n into. Otherwise, an exception is thrown.\nExample:\n\n---\nauto a = Variant(new int[10]);\na[5] = 42;\nassert(a[5] == 42);\nint[int] hash = [ 42:24 ];\na = hash;\nassert(a[42] == 24);\n\n\n---\nExample:\nCaveat:\n    Due to limitations in current language, read-modify-write\n    operations $(D_PARAM op=) will not work properly:\n---\nVariant a = new int[10];\na[5] = 42;\na[5] += 8;\n//assert(a[5] == 50); // will fail, a[5] is still 42\n\n\n---\n",
								"name": "opIndex"
							},
							{
								"kind": "template",
								"line": 1161,
								"members": [
									{
										"kind": "function",
										"line": 1161,
										"endchar": 5,
										"char": 13,
										"type": "Variant(T value, N i)",
										"parameters": [
											{
												"type": "T",
												"name": "value"
											},
											{
												"type": "N",
												"name": "i"
											}
										],
										"name": "opIndexAssign",
										"endline": 1166
									}
								],
								"char": 13,
								"parameters": [
									{
										"kind": "type",
										"name": "T"
									},
									{
										"kind": "type",
										"name": "N"
									}
								],
								"comment": "ditto\n",
								"name": "opIndexAssign"
							},
							{
								"kind": "function",
								"line": 1172,
								"endchar": 5,
								"char": 22,
								"type": "@property size_t()",
								"name": "length",
								"comment": " If the $(D_PARAM VariantN) contains an (associative) array,\n returns the length of that array. Otherwise, throws an\n exception.\n",
								"endline": 1175
							},
							{
								"kind": "template",
								"line": 1181,
								"constraint": "is(Delegate == delegate)",
								"members": [
									{
										"kind": "function",
										"line": 1181,
										"endchar": 5,
										"char": 9,
										"type": "int(scope Delegate dg)",
										"parameters": [
											{
												"storageClass": [
													"scope"
												],
												"type": "Delegate",
												"name": "dg"
											}
										],
										"name": "opApply",
										"endline": 1211
									}
								],
								"char": 9,
								"parameters": [
									{
										"kind": "type",
										"name": "Delegate"
									}
								],
								"comment": "       If the $(D VariantN) contains an array, applies $(D dg) to each\n       element of the array in turn. Otherwise, throws an exception.\n",
								"name": "opApply"
							}
						],
						"char": 1,
						"name": "VariantN"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "value",
						"deco": "m",
						"name": "maxDataSize"
					},
					{
						"kind": "tuple",
						"name": "AllowedTypesX"
					}
				],
				"comment": " $(D_PARAM VariantN) is a back-end type seldom used directly by user\n code. Two commonly-used types using $(D_PARAM VariantN) as\n back-end are:\n\n $(OL $(LI $(B Algebraic): A closed discriminated union with a\n limited type universe (e.g., $(D_PARAM Algebraic!(int, double,\n string)) only accepts these three types and rejects anything\n else).) $(LI $(B Variant): An open discriminated union allowing an\n unbounded set of types. If any of the types in the $(D_PARAM Variant)\n are larger than the largest built-in type, they will automatically\n be boxed. This means that even large types will only be the size\n of a pointer within the $(D_PARAM Variant), but this also implies some\n overhead. $(D_PARAM Variant) can accommodate all primitive types and\n all user-defined types.))\n\n Both $(D_PARAM Algebraic) and $(D_PARAM Variant) share $(D_PARAM\n VariantN)'s interface. (See their respective documentations below.)\n\n $(D_PARAM VariantN) is a discriminated union type parameterized\n with the largest size of the types stored ($(D_PARAM maxDataSize))\n and with the list of allowed types ($(D_PARAM AllowedTypes)). If\n the list is empty, then any type up of size up to $(D_PARAM\n maxDataSize) (rounded up for alignment) can be stored in a\n $(D_PARAM VariantN) object without being boxed (types larger\n than this will be boxed).\n\n",
				"name": "VariantN"
			},
			{
				"kind": "template",
				"line": 1346,
				"members": [
					{
						"kind": "alias",
						"line": 1348,
						"char": 5,
						"type": "VariantN!(maxSize!T, T)",
						"name": "Algebraic"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "tuple",
						"name": "T"
					}
				],
				"comment": " Algebraic data type restricted to a closed set of possible\n types. It's an alias for a $(D_PARAM VariantN) with an\n appropriately-constructed maximum size. $(D_PARAM Algebraic) is\n useful when it is desirable to restrict what a discriminated type\n could hold to the end of defining simpler and more efficient\n manipulation.\n\n Future additions to $(D_PARAM Algebraic) will allow compile-time\n checking that all possible types are handled by user code,\n eliminating a large class of errors.\n\n Bugs:\n\n Currently, $(D_PARAM Algebraic) does not allow recursive data\n types. They will be allowed in a future iteration of the\n implementation.\nExample:\n\n---\nauto v = Algebraic!(int, double, string)(5);\nassert(v.peek!(int));\nv = 3.14;\nassert(v.peek!(double));\n// auto x = v.peek!(long); // won't compile, type long not allowed\n// v = '1'; // won't compile, type char not allowed\n\n---\n",
				"name": "Algebraic"
			},
			{
				"kind": "alias",
				"line": 1372,
				"deco": "S3std7variant18__T8VariantNVmi32Z8VariantN",
				"char": 1,
				"name": "Variant",
				"comment": "$(D_PARAM Variant) is an alias for $(D_PARAM VariantN) instantiated\nwith the largest of $(D_PARAM creal), $(D_PARAM char[]), and $(D_PARAM\nvoid delegate()). This ensures that $(D_PARAM Variant) is large enough\nto hold all of D's predefined types unboxed, including all numeric types,\npointers, delegates, and class references.  You may want to use\n$(D_PARAM VariantN) directly with a different maximum size either for\nstoring larger types unboxed, or for saving memory.\n"
			},
			{
				"kind": "template",
				"line": 1381,
				"members": [
					{
						"kind": "function",
						"line": 1381,
						"endchar": 1,
						"char": 11,
						"type": "Variant[](T args)",
						"parameters": [
							{
								"type": "T",
								"name": "args"
							}
						],
						"name": "variantArray",
						"endline": 1389
					}
				],
				"char": 11,
				"parameters": [
					{
						"kind": "tuple",
						"name": "T"
					}
				],
				"comment": " Returns an array of variants constructed from $(D_PARAM args).\n\n This is by design. During construction the $(D_PARAM Variant) needs\n static type information about the type being held, so as to store a\n pointer to function for fast retrieval.\nExample:\n\n---\nauto a = variantArray(1, 3.14, \"Hi!\");\nassert(a[1] == 3.14);\nauto b = Variant(a); // variant array as variant\nassert(b[1] == 3.14);\n\n---\nExample:\nCode that needs functionality similar to the $(D_PARAM boxArray)\nfunction in the $(D_PARAM std.boxer) module can achieve it like this:\n---\n/* old\nBox[] fun(...)\n{\n    // ...\n    return boxArray(_arguments, _argptr);\n}\n*/\n// new\nVariant[] fun(T...)(T args)\n{\n    // ...\n    return variantArray(args);\n}\n\n---\n",
				"name": "variantArray"
			},
			{
				"kind": "class",
				"line": 1434,
				"base": "object.Exception",
				"members": [
					{
						"kind": "variable",
						"line": 1437,
						"storageClass": [
							"@trusted"
						],
						"deco": "C8TypeInfo",
						"char": 14,
						"name": "source",
						"comment": "The source type in the conversion or comparison\n",
						"originalType": "TypeInfo",
						"offset": 72
					},
					{
						"kind": "variable",
						"line": 1439,
						"storageClass": [
							"@trusted"
						],
						"deco": "C8TypeInfo",
						"char": 14,
						"name": "target",
						"comment": "The target type in the conversion or comparison\n",
						"originalType": "TypeInfo",
						"offset": 80
					}
				],
				"char": 8,
				"name": "VariantException",
				"comment": "\n/**\n Thrown in three cases:\n\n $(OL $(LI An uninitialized Variant is used in any way except\n assignment and $(D_PARAM hasValue);) $(LI A $(D_PARAM get) or\n $(D_PARAM coerce) is attempted with an incompatible target type;)\n $(LI A comparison between $(D_PARAM Variant) objects of\n incompatible types is attempted.))\n\n"
			},
			{
				"kind": "template",
				"line": 1976,
				"constraint": "Handler.length > 0",
				"members": [
					{
						"kind": "template",
						"line": 1979,
						"constraint": "isAlgebraic!VariantType",
						"members": [
							{
								"kind": "function",
								"line": 1979,
								"storageClass": [
									"auto"
								],
								"endchar": 5,
								"char": 10,
								"type": "(VariantType variant)",
								"parameters": [
									{
										"type": "VariantType",
										"name": "variant"
									}
								],
								"name": "visit",
								"endline": 1983
							}
						],
						"char": 10,
						"parameters": [
							{
								"kind": "type",
								"name": "VariantType"
							}
						],
						"name": "visit"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "tuple",
						"name": "Handler"
					}
				],
				"comment": " Applies a delegate or function to the given Algebraic depending on the held type,\n ensuring that all types are handled by the visiting functions.\n\n The delegate or function having the currently held value as parameter is called\n with $(D_PARAM variant)'s current value. Visiting handlers are passed\n in the template parameter list.\n It is statically ensured that all types of\n $(D_PARAM variant) are handled across all handlers.\n $(D_PARAM visit) allows delegates and static functions to be passed\n as parameters.\n\n If a function without parameters is specified, this function is called\n when variant doesn't hold a value. Exactly one parameter-less function\n is allowed.\n\n Duplicate overloads matching the same type in one of the visitors are disallowed.\n\n Returns: The return type of visit is deduced from the visiting functions and must be\n the same across all overloads.\n Throws: If no parameter-less, error function is specified:\n $(D_PARAM VariantException) if $(D_PARAM variant) doesn't hold a value.\nExample:\n\n---\nAlgebraic!(int, string) variant;\n\nvariant = 10;\nassert(variant.visit!((string s) => cast(int)s.length,\n                      (int i)    => i)()\n                      == 10);\nvariant = \"string\";\nassert(variant.visit!((int i) => i,\n                      (string s) => cast(int)s.length)()\n                      == 6);\n\n// Error function usage\nAlgebraic!(int, string) emptyVar;\nauto rslt = emptyVar.visit!((string s) => cast(int)s.length,\n                      (int i)    => i,\n                      () => -1)();\nassert(rslt == -1);\n\n---\n",
				"name": "visit"
			},
			{
				"kind": "template",
				"line": 2082,
				"constraint": "Handler.length > 0",
				"members": [
					{
						"kind": "template",
						"line": 2085,
						"constraint": "isAlgebraic!VariantType",
						"members": [
							{
								"kind": "function",
								"line": 2085,
								"storageClass": [
									"auto"
								],
								"endchar": 5,
								"char": 10,
								"type": "(VariantType variant)",
								"parameters": [
									{
										"type": "VariantType",
										"name": "variant"
									}
								],
								"name": "tryVisit",
								"endline": 2089
							}
						],
						"char": 10,
						"parameters": [
							{
								"kind": "type",
								"name": "VariantType"
							}
						],
						"name": "tryVisit"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "tuple",
						"name": "Handler"
					}
				],
				"comment": " Behaves as $(D_PARAM visit) but doesn't enforce that all types are handled\n by the visiting functions.\n\n If a parameter-less function is specified it is called when\n either $(D_PARAM variant) doesn't hold a value or holds a type\n which isn't handled by the visiting functions.\n\n Returns: The return type of tryVisit is deduced from the visiting functions and must be\n the same across all overloads.\n Throws: If no parameter-less, error function is specified: $(D_PARAM VariantException) if\n         $(D_PARAM variant) doesn't hold a value or\n         if $(D_PARAM variant) holds a value which isn't handled by the visiting\n         functions.\nExample:\n\n---\nAlgebraic!(int, string) variant;\n\nvariant = 10;\nauto which = -1;\nvariant.tryVisit!((int i) { which = 0; })();\nassert(which == 0);\n\n// Error function usage\nvariant = \"test\";\nvariant.tryVisit!((int i) { which = 0; },\n                  ()      { which = -100; })();\nassert(which == -100);\n\n---\n",
				"name": "tryVisit"
			}
		],
		"name": "std.variant",
		"comment": " This module implements a\n $(LINK2 http://erdani.org/publications/cuj-04-2002.html,discriminated union)\n type (a.k.a.\n $(LINK2 http://en.wikipedia.org/wiki/Tagged_union,tagged union),\n $(LINK2 http://en.wikipedia.org/wiki/Algebraic_data_type,algebraic type)).\n Such types are useful\n for type-uniform binary interfaces, interfacing with scripting\n languages, and comfortable exploratory programming.\n\n Macros:\n  WIKI = Phobos/StdVariant\n\n Synopsis:\n\n ----\n Variant a; // Must assign before use, otherwise exception ensues\n // Initialize with an integer; make the type int\n Variant b = 42;\n assert(b.type == typeid(int));\n // Peek at the value\n assert(b.peek!(int) !is null && *b.peek!(int) == 42);\n // Automatically convert per language rules\n auto x = b.get!(real);\n // Assign any other type, including other variants\n a = b;\n a = 3.14;\n assert(a.type == typeid(double));\n // Implicit conversions work just as with built-in types\n assert(a < b);\n // Check for convertibility\n assert(!a.convertsTo!(int)); // double not convertible to int\n // Strings and all other arrays are supported\n a = \"now I'm a string\";\n assert(a == \"now I'm a string\");\n a = new int[42]; // can also assign arrays\n assert(a.length == 42);\n a[5] = 7;\n assert(a[5] == 7);\n // Can also assign class values\n class Foo {}\n auto foo = new Foo;\n a = foo;\n assert(*a.peek!(Foo) == foo); // and full type information is preserved\n ----\n\n Credits:\n\n Reviewed by Brad Roberts. Daniel Keep provided a detailed code\n review prompting the following improvements: (1) better support for\n arrays; (2) support for associative arrays; (3) friendlier behavior\n towards the garbage collector.\n\n Copyright: Copyright Andrei Alexandrescu 2007 - 2009.\n License:   $(WEB www.boost.org/LICENSE_1_0.txt, Boost License 1.0).\n Authors:   $(WEB erdani.org, Andrei Alexandrescu)\n Source:    $(PHOBOSSRC std/_variant.d)\n"
	},
	{
		"kind": "module",
		"file": "../phobos/std/json.d",
		"members": [
			{
				"kind": "enum",
				"line": 64,
				"members": [
					{
						"kind": "enum member",
						"line": 66,
						"value": "\"NaN\"",
						"char": 5,
						"name": "nan",
						"comment": "string representation of floating-point NaN\n"
					},
					{
						"kind": "enum member",
						"line": 67,
						"value": "\"Infinite\"",
						"char": 5,
						"name": "inf",
						"comment": "string representation of floating-point Infinity\n"
					},
					{
						"kind": "enum member",
						"line": 68,
						"value": "\"-Infinite\"",
						"char": 5,
						"name": "negativeInf",
						"comment": "string representation of floating-point negative Infinity\n"
					}
				],
				"char": 1,
				"baseDeco": "Aya",
				"name": "JSONFloatLiteral",
				"comment": "String literals used to represent special float values within JSON strings.\n"
			},
			{
				"kind": "enum",
				"line": 74,
				"members": [
					{
						"kind": "enum member",
						"line": 75,
						"value": "0",
						"char": 5,
						"name": "none",
						"comment": "standard parsing\n"
					},
					{
						"kind": "enum member",
						"line": 76,
						"value": "1",
						"char": 5,
						"name": "specialFloatLiterals",
						"comment": "encode NaN and Inf float values as strings\n"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "JsonOptions",
				"comment": "Flags that control how json is encoded and parsed.\n"
			},
			{
				"kind": "enum",
				"line": 82,
				"members": [
					{
						"kind": "enum member",
						"line": 85,
						"value": "cast(byte)0",
						"char": 5,
						"name": "NULL",
						"comment": "Indicates the type of a $(D JSONValue).\n"
					},
					{
						"kind": "enum member",
						"line": 86,
						"value": "1",
						"char": 5,
						"name": "STRING",
						"comment": "ditto\n"
					},
					{
						"kind": "enum member",
						"line": 87,
						"value": "2",
						"char": 5,
						"name": "INTEGER",
						"comment": "ditto\n"
					},
					{
						"kind": "enum member",
						"line": 88,
						"value": "3",
						"char": 5,
						"name": "UINTEGER",
						"comment": "ditto\n"
					},
					{
						"kind": "enum member",
						"line": 89,
						"value": "4",
						"char": 5,
						"name": "FLOAT",
						"comment": "ditto\n"
					},
					{
						"kind": "enum member",
						"line": 90,
						"value": "5",
						"char": 5,
						"name": "OBJECT",
						"comment": "ditto\n"
					},
					{
						"kind": "enum member",
						"line": 91,
						"value": "6",
						"char": 5,
						"name": "ARRAY",
						"comment": "ditto\n"
					},
					{
						"kind": "enum member",
						"line": 92,
						"value": "7",
						"char": 5,
						"name": "TRUE",
						"comment": "ditto\n"
					},
					{
						"kind": "enum member",
						"line": 93,
						"value": "8",
						"char": 5,
						"name": "FALSE",
						"comment": "ditto\n"
					}
				],
				"char": 1,
				"baseDeco": "g",
				"name": "JSON_TYPE",
				"comment": "JSON type enumeration\n"
			},
			{
				"kind": "struct",
				"line": 99,
				"members": [
					{
						"kind": "function",
						"line": 118,
						"deco": "xFNdZE3std4json9JSON_TYPE",
						"endchar": 5,
						"char": 25,
						"name": "type",
						"comment": "      Returns the JSON_TYPE of the value stored in this structure.\nExample:\n\n---\nstring s = \"{ \\\"language\\\": \\\"D\\\" }\";\nJSONValue j = parseJSON(s);\nassert(j.type == JSON_TYPE.OBJECT);\nassert(j[\"language\"].type == JSON_TYPE.STRING);\n\n\n---\n",
						"endline": 121
					},
					{
						"kind": "function",
						"line": 139,
						"storageClass": [
							"deprecated"
						],
						"deco": "FNdE3std4json9JSON_TYPEZE3std4json9JSON_TYPE",
						"endchar": 5,
						"char": 25,
						"parameters": [
							{
								"deco": "E3std4json9JSON_TYPE",
								"name": "newType"
							}
						],
						"name": "type",
						"comment": "        $(RED Deprecated. Instead, please assign the value with the adequate\n              type to $(D JSONValue) directly. This will be removed in\n              June 2015.)\n\n        Sets the _type of this $(D JSONValue). Previous content is cleared.\n",
						"endline": 172
					},
					{
						"kind": "function",
						"line": 176,
						"deco": "NgFNdZNgAya",
						"endchar": 5,
						"char": 29,
						"name": "str",
						"comment": "Value getter/setter for $(D JSON_TYPE.STRING).\n\nThrows $(D JSONException) for read access if $(D type) is not $(D JSON_TYPE.STRING).\nExample:\n\n---\nJSONValue j = [ \"language\": \"D\" ];\n\n// get value\nassert(j[\"language\"].str == \"D\");\n\n// change existing key to new string\nj[\"language\"].str = \"Perl\";\nassert(j[\"language\"].str == \"Perl\");\n\n\n---\n",
						"endline": 181
					},
					{
						"kind": "function",
						"line": 183,
						"deco": "FNdAyaZAya",
						"endchar": 5,
						"char": 22,
						"parameters": [
							{
								"deco": "Aya",
								"name": "v"
							}
						],
						"name": "str",
						"comment": "ditto\n",
						"endline": 187
					},
					{
						"kind": "function",
						"line": 203,
						"deco": "NgFNdZNgl",
						"endchar": 5,
						"char": 27,
						"name": "integer",
						"comment": "Value getter/setter for $(D JSON_TYPE.INTEGER).\n\nThrows $(D JSONException) for read access if $(D type) is not $(D JSON_TYPE.INTEGER).\n",
						"endline": 208
					},
					{
						"kind": "function",
						"line": 210,
						"deco": "FNdlZl",
						"endchar": 5,
						"char": 20,
						"parameters": [
							{
								"deco": "l",
								"name": "v"
							}
						],
						"name": "integer",
						"comment": "ditto\n",
						"endline": 214
					},
					{
						"kind": "function",
						"line": 218,
						"deco": "NgFNdZNgm",
						"endchar": 5,
						"char": 28,
						"name": "uinteger",
						"comment": "Value getter/setter for $(D JSON_TYPE.UINTEGER).\n\nThrows $(D JSONException) for read access if $(D type) is not $(D JSON_TYPE.UINTEGER).\n",
						"endline": 223
					},
					{
						"kind": "function",
						"line": 225,
						"deco": "FNdmZm",
						"endchar": 5,
						"char": 21,
						"parameters": [
							{
								"deco": "m",
								"name": "v"
							}
						],
						"name": "uinteger",
						"comment": "ditto\n",
						"endline": 229
					},
					{
						"kind": "function",
						"line": 233,
						"deco": "NgFNdZNgd",
						"endchar": 5,
						"char": 29,
						"name": "floating",
						"comment": "Value getter/setter for $(D JSON_TYPE.FLOAT).\n\nThrows $(D JSONException) for read access if $(D type) is not $(D JSON_TYPE.FLOAT).\n",
						"endline": 238
					},
					{
						"kind": "function",
						"line": 240,
						"deco": "FNddZd",
						"endchar": 5,
						"char": 22,
						"parameters": [
							{
								"deco": "d",
								"name": "v"
							}
						],
						"name": "floating",
						"comment": "ditto\n",
						"endline": 244
					},
					{
						"kind": "function",
						"line": 248,
						"deco": "NgFNcNdZNgHAyaS3std4json9JSONValue",
						"endchar": 5,
						"char": 44,
						"name": "object",
						"comment": "Value getter/setter for $(D JSON_TYPE.OBJECT).\n\nThrows $(D JSONException) for read access if $(D type) is not $(D JSON_TYPE.OBJECT).\n",
						"endline": 253
					},
					{
						"kind": "function",
						"line": 255,
						"deco": "FNdHAyaS3std4json9JSONValueZHAyaS3std4json9JSONValue",
						"endchar": 5,
						"char": 33,
						"parameters": [
							{
								"deco": "HAyaS3std4json9JSONValue",
								"name": "v"
							}
						],
						"name": "object",
						"comment": "ditto\n",
						"endline": 259
					},
					{
						"kind": "function",
						"line": 263,
						"deco": "NgFNcNdZNgAS3std4json9JSONValue",
						"endchar": 5,
						"char": 38,
						"name": "array",
						"comment": "Value getter/setter for $(D JSON_TYPE.ARRAY).\n\nThrows $(D JSONException) for read access if $(D type) is not $(D JSON_TYPE.ARRAY).\n",
						"endline": 268
					},
					{
						"kind": "function",
						"line": 270,
						"deco": "FNdAS3std4json9JSONValueZAS3std4json9JSONValue",
						"endchar": 5,
						"char": 27,
						"parameters": [
							{
								"deco": "AS3std4json9JSONValue",
								"name": "v"
							}
						],
						"name": "array",
						"comment": "ditto\n",
						"endline": 274
					},
					{
						"kind": "function",
						"line": 277,
						"deco": "xFNdZb",
						"endchar": 5,
						"char": 20,
						"name": "isNull",
						"comment": "Test whether the type is $(D JSON_TYPE.NULL)\n",
						"endline": 280
					},
					{
						"kind": "template",
						"line": 381,
						"constraint": "!isStaticArray!T",
						"members": [
							{
								"kind": "constructor",
								"line": 381,
								"endchar": 5,
								"char": 5,
								"type": "(T arg)",
								"parameters": [
									{
										"type": "T",
										"name": "arg"
									}
								],
								"name": "this",
								"endline": 384
							}
						],
						"char": 5,
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"comment": " Constructor for $(D JSONValue). If $(D arg) is a $(D JSONValue)\n its value and type will be copied to the new $(D JSONValue).\n Note that this is a shallow copy: if type is $(D JSON_TYPE.OBJECT)\n or $(D JSON_TYPE.ARRAY) then only the reference to the data will\n be copied.\n Otherwise, $(D arg) must be implicitly convertible to one of the\n following types: $(D typeof(null)), $(D string), $(D ulong),\n $(D long), $(D double), an associative array $(D V[K]) for any $(D V)\n and $(D K) i.e. a JSON object, any array or $(D bool). The type will\n be set accordingly.\nExample:\n\n---\nJSONValue j = JSONValue( \"a string\" );\nj = JSONValue(42);\n\nj = JSONValue( [1, 2, 3] );\nassert(j.type == JSON_TYPE.ARRAY);\n\nj = JSONValue( [\"language\": \"D\"] );\nassert(j.type == JSON_TYPE.OBJECT);\n\n\n---\n",
						"name": "this"
					},
					{
						"kind": "template",
						"line": 386,
						"constraint": "isStaticArray!T",
						"members": [
							{
								"kind": "constructor",
								"line": 386,
								"endchar": 5,
								"char": 5,
								"type": "(ref T arg)",
								"parameters": [
									{
										"storageClass": [
											"ref"
										],
										"type": "T",
										"name": "arg"
									}
								],
								"name": "this",
								"endline": 389
							}
						],
						"char": 5,
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"comment": "Ditto\n",
						"name": "this"
					},
					{
						"kind": "template",
						"line": 391,
						"members": [
							{
								"kind": "constructor",
								"line": 391,
								"endchar": 5,
								"char": 5,
								"type": "inout (inout T arg)",
								"parameters": [
									{
										"storageClass": [
											"inout"
										],
										"type": "T",
										"name": "arg"
									}
								],
								"name": "this",
								"endline": 395
							}
						],
						"char": 5,
						"parameters": [
							{
								"kind": "type",
								"deco": "S3std4json9JSONValue",
								"name": "T"
							}
						],
						"comment": "Ditto\n",
						"name": "this"
					},
					{
						"kind": "function",
						"line": 421,
						"deco": "NgFNcmZNgS3std4json9JSONValue",
						"endchar": 5,
						"char": 26,
						"parameters": [
							{
								"deco": "m",
								"name": "i"
							}
						],
						"name": "opIndex",
						"comment": "Array syntax for json arrays.\n\nThrows $(D JSONException) if $(D type) is not $(D JSON_TYPE.ARRAY).\nExample:\n\n---\nJSONValue j = JSONValue( [42, 43, 44] );\nassert( j[0].integer == 42 );\nassert( j[1].integer == 43 );\n\n\n---\n",
						"originalType": "inout ref inout(JSONValue)(size_t i)",
						"endline": 428
					},
					{
						"kind": "function",
						"line": 439,
						"deco": "NgFNcAyaZNgS3std4json9JSONValue",
						"endchar": 5,
						"char": 26,
						"parameters": [
							{
								"deco": "Aya",
								"name": "k"
							}
						],
						"name": "opIndex",
						"comment": "Hash syntax for json objects.\n\nThrows $(D JSONException) if $(D type) is not $(D JSON_TYPE.OBJECT).\nExample:\n\n---\nJSONValue j = JSONValue( [\"language\": \"D\"] );\nassert( j[\"language\"].str == \"D\" );\n\n\n---\n",
						"endline": 445
					},
					{
						"kind": "template",
						"line": 458,
						"members": [
							{
								"kind": "function",
								"line": 458,
								"endchar": 5,
								"char": 10,
								"type": "void(auto ref T value, string key)",
								"parameters": [
									{
										"storageClass": [
											"auto",
											"ref"
										],
										"type": "T",
										"name": "value"
									},
									{
										"type": "string",
										"name": "key"
									}
								],
								"name": "opIndexAssign",
								"endline": 467
							}
						],
						"char": 10,
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"comment": "Operator sets $(D value) for element of JSON object by $(D key)\n\nIf JSON value is null, then operator initializes it with object and then\n\nsets $(D value) for it.\n\nThrows $(D JSONException) if $(D type) is not $(D JSON_TYPE.OBJECT)\n\nor $(D JSON_TYPE.NULL).\nExample:\n\n---\nJSONValue j = JSONValue( [\"language\": \"D\"] );\nj[\"language\"].str = \"Perl\";\nassert( j[\"language\"].str == \"Perl\" );\n\n\n---\nExample:\n\n---\nJSONValue j = JSONValue( [\"Perl\", \"C\"] );\nj[1].str = \"D\";\nassert( j[1].str == \"D\" );\n\n\n---\nExample:\n\n---\nJSONValue j = [ \"language\": \"D\", \"author\": \"walter\" ];\nstring a = (\"author\" in j).str;\n\n\n---\n",
						"name": "opIndexAssign"
					},
					{
						"kind": "function",
						"line": 582,
						"deco": "FDFmKS3std4json9JSONValueZiZi",
						"endchar": 5,
						"char": 9,
						"parameters": [
							{
								"deco": "DFmKS3std4json9JSONValueZi",
								"name": "dg"
							}
						],
						"name": "opApply",
						"comment": "Implements the foreach $(D opApply) interface for json arrays.\n",
						"originalType": "int(int delegate(size_t index, ref JSONValue) dg)",
						"endline": 596
					},
					{
						"kind": "function",
						"line": 599,
						"deco": "FDFAyaKS3std4json9JSONValueZiZi",
						"endchar": 5,
						"char": 9,
						"parameters": [
							{
								"deco": "DFAyaKS3std4json9JSONValueZi",
								"name": "dg"
							}
						],
						"name": "opApply",
						"comment": "Implements the foreach $(D opApply) interface for json objects.\n",
						"endline": 613
					},
					{
						"kind": "function",
						"line": 617,
						"deco": "xFxE3std4json11JsonOptionsZAya",
						"endchar": 5,
						"char": 12,
						"parameters": [
							{
								"deco": "xE3std4json11JsonOptions",
								"default": "cast(JsonOptions)0",
								"name": "options"
							}
						],
						"name": "toString",
						"comment": "Implicitly calls $(D toJSON) on this JSONValue.\n\n$(I options) can be used to tweak the conversion behavior.\n",
						"originalType": "const string(in JsonOptions options = JsonOptions.none)",
						"endline": 620
					},
					{
						"kind": "function",
						"line": 625,
						"deco": "xFxE3std4json11JsonOptionsZAya",
						"endchar": 5,
						"char": 12,
						"parameters": [
							{
								"deco": "xE3std4json11JsonOptions",
								"default": "cast(JsonOptions)0",
								"name": "options"
							}
						],
						"name": "toPrettyString",
						"comment": "Implicitly calls $(D toJSON) on this JSONValue, like $(D toString), but\n\nalso passes $(I true) as $(I pretty) argument.\n\n$(I options) can be used to tweak the conversion behavior\n",
						"originalType": "const string(in JsonOptions options = JsonOptions.none)",
						"endline": 628
					}
				],
				"char": 1,
				"name": "JSONValue",
				"comment": "JSON value node\n"
			},
			{
				"kind": "template",
				"line": 639,
				"constraint": "isInputRange!T",
				"members": [
					{
						"kind": "function",
						"line": 639,
						"endchar": 1,
						"char": 11,
						"type": "JSONValue(T json, int maxDepth = -1, JsonOptions options = JsonOptions.none)",
						"parameters": [
							{
								"type": "T",
								"name": "json"
							},
							{
								"deco": "i",
								"default": "-1",
								"name": "maxDepth"
							},
							{
								"default": "JsonOptions.none",
								"type": "JsonOptions",
								"name": "options"
							}
						],
						"name": "parseJSON",
						"endline": 959
					}
				],
				"char": 11,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": "Parses a serialized string and returns a tree of JSON values.\nThrows a $(XREF json,JSONException) if the depth exceeds the max depth.\nParams:\n    json = json-formatted string to parse\n    maxDepth = maximum depth of nesting allowed, -1 disables depth checking\n    options = enable decoding string representations of NaN/Inf as float values\n",
				"name": "parseJSON"
			},
			{
				"kind": "template",
				"line": 968,
				"constraint": "isInputRange!T",
				"members": [
					{
						"kind": "function",
						"line": 968,
						"endchar": 1,
						"char": 11,
						"type": "JSONValue(T json, JsonOptions options)",
						"parameters": [
							{
								"type": "T",
								"name": "json"
							},
							{
								"type": "JsonOptions",
								"name": "options"
							}
						],
						"name": "parseJSON",
						"endline": 972
					}
				],
				"char": 11,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": "Parses a serialized string and returns a tree of JSON values.\nThrows a $(XREF json,JSONException) if the depth exceeds the max depth.\nParams:\n    json = json-formatted string to parse\n    options = enable decoding string representations of NaN/Inf as float values\n",
				"name": "parseJSON"
			},
			{
				"kind": "function",
				"line": 983,
				"deco": "FxPS3std4json9JSONValuexbxE3std4json11JsonOptionsZAya",
				"endchar": 1,
				"char": 8,
				"parameters": [
					{
						"deco": "xPS3std4json9JSONValue",
						"name": "root"
					},
					{
						"deco": "xb",
						"default": "false",
						"name": "pretty"
					},
					{
						"deco": "xE3std4json11JsonOptions",
						"default": "cast(JsonOptions)0",
						"name": "options"
					}
				],
				"name": "toJSON",
				"comment": "Takes a tree of JSON values and returns the serialized string.\n\nAny Object types will be serialized in a key-sorted order.\n\nIf $(D pretty) is false no whitespaces are generated.\nIf $(D pretty) is true serialized string is formatted to be human-readable.\nSet the $(specialFloatLiterals) flag is set in $(D options) to encode NaN/Infinity as strings.\n",
				"originalType": "string(in JSONValue* root, in bool pretty = false, in JsonOptions options = JsonOptions.none)",
				"endline": 1148
			},
			{
				"kind": "class",
				"line": 1163,
				"base": "object.Exception",
				"members": [],
				"char": 1,
				"name": "JSONException",
				"comment": "Exception thrown on JSON errors\n"
			}
		],
		"name": "std.json",
		"comment": "JavaScript Object Notation\n\nSynopsis:\n----\n    //parse a file or string of json into a usable structure\n    string s = \"{ \\\"language\\\": \\\"D\\\", \\\"rating\\\": 3.14, \\\"code\\\": \\\"42\\\" }\";\n    JSONValue j = parseJSON(s);\n    writeln(\"Language: \", j[\"language\"].str(),\n            \" Rating: \", j[\"rating\"].floating()\n    );\n\n    // j and j[\"language\"] return JSONValue,\n    // j[\"language\"].str returns a string\n\n    //check a type\n    long x;\n    if (j[\"code\"].type() == JSON_TYPE.INTEGER)\n    {\n        x = j[\"code\"].integer;\n    }\n    else\n    {\n        x = to!int(j[\"code\"].str);\n    }\n\n    // create a json struct\n    JSONValue jj = [ \"language\": \"D\" ];\n    // rating doesnt exist yet, so use .object to assign\n    jj.object[\"rating\"] = JSONValue(3.14);\n    // create an array to assign to list\n    jj.object[\"list\"] = JSONValue( [\"a\", \"b\", \"c\"] );\n    // list already exists, so .object optional\n    jj[\"list\"].array ~= JSONValue(\"D\");\n\n    s = j.toString();\n    writeln(s);\n----\n\nCopyright: Copyright Jeremie Pelletier 2008 - 2009.\nLicense:   $(WEB www.boost.org/LICENSE_1_0.txt, Boost License 1.0).\nAuthors:   Jeremie Pelletier, David Herberth\nReferences: $(LINK http://json.org/)\nSource:    $(PHOBOSSRC std/_json.d)\n"
	},
	{
		"kind": "module",
		"file": "../phobos/std/utf.d",
		"members": [
			{
				"kind": "class",
				"line": 35,
				"base": "object.Exception",
				"members": [],
				"char": 1,
				"name": "UTFException",
				"comment": "    Exception thrown on errors in std.utf functions.\n"
			},
			{
				"kind": "function",
				"line": 95,
				"deco": "FNaNbNiNfwZb",
				"endchar": 1,
				"char": 19,
				"parameters": [
					{
						"deco": "w",
						"name": "c"
					}
				],
				"name": "isValidDchar",
				"comment": "    Returns whether $(D c) is a valid UTF-32 character.\n\n    $(D '\\uFFFE') and $(D '\\uFFFF') are considered valid by $(D isValidDchar),\n    as they are permitted for internal use by an application, but they are\n    not allowed for interchange by the Unicode standard.\n",
				"endline": 105
			},
			{
				"kind": "template",
				"line": 154,
				"constraint": "is(S : const(char[])) || isRandomAccessRange!S && is(Unqual!(ElementType!S) == char)",
				"members": [
					{
						"kind": "function",
						"line": 154,
						"endchar": 1,
						"char": 6,
						"type": "uint(auto ref S str, size_t index)",
						"parameters": [
							{
								"storageClass": [
									"auto",
									"ref"
								],
								"type": "S",
								"name": "str"
							},
							{
								"type": "size_t",
								"name": "index"
							}
						],
						"name": "stride",
						"endline": 166
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "S"
					}
				],
				"comment": "    $(D stride) returns the length of the UTF-8 sequence starting at $(D index)\n    in $(D str).\n\n    $(D stride) works with both UTF-8 strings and ranges of $(D char). If no\n    index is passed, then an input range will work, but if an index is passed,\n    then a random-access range is required.\n\n    $(D index) defaults to $(D 0) if none is passed.\n\n    Returns:\n        The number of bytes in the UTF-8 sequence, a value between 1 and 4\n        (as per $(WEB tools.ietf.org/html/rfc3629#section-3, RFC 3629$(COMMA) section 3)).\n\n    Throws:\n        May throw a $(D UTFException) if $(D str[index]) is not the start of a\n        valid UTF-8 sequence.\n\n    Notes:\n        $(D stride) will only analyze the first $(D str[index]) element. It\n        will not fully verify the validity of UTF-8 sequence, nor even verify\n        the presence of the sequence: it will not actually guarantee that\n        $(D index + stride(str, index) <= str.length).\n",
				"name": "stride"
			},
			{
				"kind": "template",
				"line": 169,
				"constraint": "is(S : const(char[])) || isInputRange!S && is(Unqual!(ElementType!S) == char)",
				"members": [
					{
						"kind": "function",
						"line": 169,
						"endchar": 1,
						"char": 6,
						"type": "uint(auto ref S str)",
						"parameters": [
							{
								"storageClass": [
									"auto",
									"ref"
								],
								"type": "S",
								"name": "str"
							}
						],
						"name": "stride",
						"endline": 182
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "S"
					}
				],
				"comment": "Ditto\n",
				"name": "stride"
			},
			{
				"kind": "template",
				"line": 299,
				"constraint": "is(S : const(char[])) || isRandomAccessRange!S && is(Unqual!(ElementType!S) == char)",
				"members": [
					{
						"kind": "function",
						"line": 299,
						"endchar": 1,
						"char": 6,
						"type": "uint(auto ref S str, size_t index)",
						"parameters": [
							{
								"storageClass": [
									"auto",
									"ref"
								],
								"type": "S",
								"name": "str"
							},
							{
								"type": "size_t",
								"name": "index"
							}
						],
						"name": "strideBack",
						"endline": 327
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "S"
					}
				],
				"comment": "    $(D strideBack) returns the length of the UTF-8 sequence ending one code\n    unit before $(D index) in $(D str).\n\n    $(D strideBack) works with both UTF-8 strings and bidirectional ranges of\n    $(D char). If no index is passed, then a bidirectional range will work, but\n    if an index is passed, then a random-access range is required.\n\n    $(D index) defaults to $(D str.length) if none is passed.\n\n    Returns:\n        The number of bytes in the UTF-8 sequence.\n\n    Throws:\n        May throw a $(D UTFException) if $(D str[index]) is not one past the\n        end of a valid UTF-8 sequence.\n\n    Notes:\n        $(D strideBack) will not fully verify the validity of the UTF-8\n        sequence. It will, however, guarantee that\n        $(D index - stride(str, index)) is a valid index.\n",
				"name": "strideBack"
			},
			{
				"kind": "template",
				"line": 330,
				"constraint": "is(S : const(char[])) || isRandomAccessRange!S && hasLength!S && is(Unqual!(ElementType!S) == char)",
				"members": [
					{
						"kind": "function",
						"line": 330,
						"endchar": 1,
						"char": 6,
						"type": "uint(auto ref S str)",
						"parameters": [
							{
								"storageClass": [
									"auto",
									"ref"
								],
								"type": "S",
								"name": "str"
							}
						],
						"name": "strideBack",
						"endline": 335
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "S"
					}
				],
				"comment": "Ditto\n",
				"name": "strideBack"
			},
			{
				"kind": "template",
				"line": 444,
				"constraint": "is(S : const(wchar[])) || isRandomAccessRange!S && is(Unqual!(ElementType!S) == wchar)",
				"members": [
					{
						"kind": "function",
						"line": 444,
						"endchar": 1,
						"char": 6,
						"type": "uint(auto ref S str, size_t index)",
						"parameters": [
							{
								"storageClass": [
									"auto",
									"ref"
								],
								"type": "S",
								"name": "str"
							},
							{
								"type": "size_t",
								"name": "index"
							}
						],
						"name": "stride",
						"endline": 452
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "S"
					}
				],
				"comment": "    $(D stride) returns the length of the UTF-16 sequence starting at $(D index)\n    in $(D str).\n\n    $(D stride) works with both UTF-16 strings and ranges of $(D wchar). If no\n    index is passed, then an input range will work, but if an index is passed,\n    then a random-access range is required.\n\n    $(D index) defaults to $(D 0) if none is passed.\n\n    Returns:\n        The number of bytes in the UTF-16 sequence.\n\n    Throws:\n        May throw a $(D UTFException) if $(D str[index]) is not the start of a\n        valid UTF-16 sequence.\n\n    Notes:\n        $(D stride) will only analyze the first $(D str[index]) element. It\n        will not fully verify the validity of UTF-16 sequence, nor even verify\n        the presence of the sequence: it will not actually guarantee that\n        $(D index + stride(str, index) <= str.length).\n",
				"name": "stride"
			},
			{
				"kind": "template",
				"line": 455,
				"constraint": "is(S : const(wchar[]))",
				"members": [
					{
						"kind": "function",
						"line": 455,
						"endchar": 1,
						"char": 6,
						"type": "pure @safe uint(auto ref S str)",
						"parameters": [
							{
								"storageClass": [
									"auto",
									"ref"
								],
								"type": "S",
								"name": "str"
							}
						],
						"name": "stride",
						"endline": 459
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "S"
					}
				],
				"comment": "Ditto\n",
				"name": "stride"
			},
			{
				"kind": "template",
				"line": 562,
				"constraint": "is(S : const(wchar[])) || isRandomAccessRange!S && is(Unqual!(ElementType!S) == wchar)",
				"members": [
					{
						"kind": "function",
						"line": 562,
						"endchar": 1,
						"char": 6,
						"type": "uint(auto ref S str, size_t index)",
						"parameters": [
							{
								"storageClass": [
									"auto",
									"ref"
								],
								"type": "S",
								"name": "str"
							},
							{
								"type": "size_t",
								"name": "index"
							}
						],
						"name": "strideBack",
						"endline": 572
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "S"
					}
				],
				"comment": "    $(D strideBack) returns the length of the UTF-16 sequence ending one code\n    unit before $(D index) in $(D str).\n\n    $(D strideBack) works with both UTF-16 strings and ranges of $(D wchar). If\n    no index is passed, then a bidirectional range will work, but if an index is\n    passed, then a random-access range is required.\n\n    $(D index) defaults to $(D str.length) if none is passed.\n\n    Returns:\n        The number of bytes in the UTF-16 sequence.\n\n    Throws:\n        May throw a $(D UTFException) if $(D str[index]) is not one past the\n        end of a valid UTF-16 sequence.\n\n    Notes:\n        $(D stride) will only analyze the element at $(D str[index - 1])\n        element. It will not fully verify the validity of UTF-16 sequence, nor\n        even verify the presence of the sequence: it will not actually\n        guarantee that $(D stride(str, index) <= index).\n",
				"name": "strideBack"
			},
			{
				"kind": "template",
				"line": 575,
				"constraint": "is(S : const(wchar[])) || isBidirectionalRange!S && is(Unqual!(ElementType!S) == wchar)",
				"members": [
					{
						"kind": "function",
						"line": 575,
						"endchar": 1,
						"char": 6,
						"type": "uint(auto ref S str)",
						"parameters": [
							{
								"storageClass": [
									"auto",
									"ref"
								],
								"type": "S",
								"name": "str"
							}
						],
						"name": "strideBack",
						"endline": 587
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "S"
					}
				],
				"comment": "Ditto\n",
				"name": "strideBack"
			},
			{
				"kind": "template",
				"line": 669,
				"constraint": "is(S : const(dchar[])) || isInputRange!S && is(Unqual!(ElementEncodingType!S) == dchar)",
				"members": [
					{
						"kind": "function",
						"line": 669,
						"endchar": 1,
						"char": 6,
						"type": "uint(auto ref S str, size_t index = 0)",
						"parameters": [
							{
								"storageClass": [
									"auto",
									"ref"
								],
								"type": "S",
								"name": "str"
							},
							{
								"default": "0",
								"type": "size_t",
								"name": "index"
							}
						],
						"name": "stride",
						"endline": 678
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "S"
					}
				],
				"comment": "    $(D stride) returns the length of the UTF-32 sequence starting at $(D index)\n    in $(D str).\n\n    $(D stride) works with both UTF-32 strings and ranges of $(D dchar).\n\n    Returns:\n        The number of bytes in the UTF-32 sequence (always $(D 1)).\n\n    Throws:\n        Never.\n",
				"name": "stride"
			},
			{
				"kind": "template",
				"line": 764,
				"constraint": "isRandomAccessRange!S && is(Unqual!(ElementEncodingType!S) == dchar)",
				"members": [
					{
						"kind": "function",
						"line": 764,
						"endchar": 1,
						"char": 6,
						"type": "uint(auto ref S str, size_t index)",
						"parameters": [
							{
								"storageClass": [
									"auto",
									"ref"
								],
								"type": "S",
								"name": "str"
							},
							{
								"type": "size_t",
								"name": "index"
							}
						],
						"name": "strideBack",
						"endline": 771
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "S"
					}
				],
				"comment": "    $(D strideBack) returns the length of the UTF-32 sequence ending one code\n    unit before $(D index) in $(D str).\n\n    $(D strideBack) works with both UTF-32 strings and ranges of $(D dchar). If\n    no index is passed, then a bidirectional range will work, but if an index is\n    passed, then a random-access range is required.\n\n    $(D index) defaults to $(D str.length) if none is passed.\n\n    Returns:\n        The number of bytes in the UTF-32 sequence (always $(D 1)).\n\n    Throws:\n        Never.\n",
				"name": "strideBack"
			},
			{
				"kind": "template",
				"line": 774,
				"constraint": "isBidirectionalRange!S && is(Unqual!(ElementEncodingType!S) == dchar)",
				"members": [
					{
						"kind": "function",
						"line": 774,
						"endchar": 1,
						"char": 6,
						"type": "uint(auto ref S str)",
						"parameters": [
							{
								"storageClass": [
									"auto",
									"ref"
								],
								"type": "S",
								"name": "str"
							}
						],
						"name": "strideBack",
						"endline": 779
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "S"
					}
				],
				"comment": "Ditto\n",
				"name": "strideBack"
			},
			{
				"kind": "template",
				"line": 856,
				"constraint": "isSomeChar!C",
				"members": [
					{
						"kind": "function",
						"line": 856,
						"endchar": 1,
						"char": 8,
						"type": "pure @safe size_t(const(C)[] str, size_t index)",
						"parameters": [
							{
								"type": "const(C)[]",
								"name": "str"
							},
							{
								"type": "size_t",
								"name": "index"
							}
						],
						"name": "toUCSindex",
						"endline": 879
					}
				],
				"char": 8,
				"parameters": [
					{
						"kind": "type",
						"name": "C"
					}
				],
				"comment": "    Given $(D index) into $(D str) and assuming that $(D index) is at the start\n    of a UTF sequence, $(D toUCSindex) determines the number of UCS characters\n    up to $(D index). So, $(D index) is the index of a code unit at the\n    beginning of a code point, and the return value is how many code points into\n    the string that that code point is.\nExample:\n\n---\nassert(toUCSindex(`hello world`, 7) == 7);\nassert(toUCSindex(`hello world`w, 7) == 7);\nassert(toUCSindex(`hello world`d, 7) == 7);\n\nassert(toUCSindex(`Ma Chérie`, 7) == 6);\nassert(toUCSindex(`Ma Chérie`w, 7) == 7);\nassert(toUCSindex(`Ma Chérie`d, 7) == 7);\n\nassert(toUCSindex(`さいごの果実 / ミツバチと科学者`, 9) == 3);\nassert(toUCSindex(`さいごの果実 / ミツバチと科学者`w, 9) == 9);\nassert(toUCSindex(`さいごの果実 / ミツバチと科学者`d, 9) == 9);\n\n---\n",
				"name": "toUCSindex"
			},
			{
				"kind": "template",
				"line": 903,
				"constraint": "isSomeChar!C",
				"members": [
					{
						"kind": "function",
						"line": 903,
						"endchar": 1,
						"char": 8,
						"type": "pure @safe size_t(const(C)[] str, size_t n)",
						"parameters": [
							{
								"type": "const(C)[]",
								"name": "str"
							},
							{
								"type": "size_t",
								"name": "n"
							}
						],
						"name": "toUTFindex",
						"endline": 919
					}
				],
				"char": 8,
				"parameters": [
					{
						"kind": "type",
						"name": "C"
					}
				],
				"comment": "    Given a UCS index $(D n) into $(D str), returns the UTF index.\n    So, $(D n) is how many code points into the string the code point is, and\n    the array index of the code unit is returned.\nExample:\n\n---\nassert(toUTFindex(`hello world`, 7) == 7);\nassert(toUTFindex(`hello world`w, 7) == 7);\nassert(toUTFindex(`hello world`d, 7) == 7);\n\nassert(toUTFindex(`Ma Chérie`, 6) == 7);\nassert(toUTFindex(`Ma Chérie`w, 7) == 7);\nassert(toUTFindex(`Ma Chérie`d, 7) == 7);\n\nassert(toUTFindex(`さいごの果実 / ミツバチと科学者`, 3) == 9);\nassert(toUTFindex(`さいごの果実 / ミツバチと科学者`w, 9) == 9);\nassert(toUTFindex(`さいごの果実 / ミツバチと科学者`d, 9) == 9);\n\n---\n",
				"name": "toUTFindex"
			},
			{
				"kind": "template",
				"line": 954,
				"constraint": "!isSomeString!S && isRandomAccessRange!S && hasSlicing!S && hasLength!S && isSomeChar!(ElementType!S)",
				"members": [
					{
						"kind": "function",
						"line": 954,
						"endchar": 1,
						"char": 7,
						"type": "dchar(auto ref S str, ref size_t index)",
						"parameters": [
							{
								"storageClass": [
									"auto",
									"ref"
								],
								"type": "S",
								"name": "str"
							},
							{
								"storageClass": [
									"ref"
								],
								"type": "size_t",
								"name": "index"
							}
						],
						"name": "decode",
						"endline": 971
					}
				],
				"char": 7,
				"parameters": [
					{
						"kind": "type",
						"name": "S"
					}
				],
				"comment": "    Decodes and returns the code point starting at $(D str[index]). $(D index)\n    is advanced to one past the decoded code point. If the code point is not\n    well-formed, then a $(D UTFException) is thrown and $(D index) remains\n    unchanged.\n\n    decode will only work with strings and random access ranges of code units\n    with length and slicing, whereas $(LREF decodeFront) will work with any\n    input range of code units.\n\n    Throws:\n        $(LREF UTFException) if $(D str[index]) is not the start of a valid UTF\n        sequence.\n",
				"name": "decode"
			},
			{
				"kind": "template",
				"line": 1006,
				"constraint": "!isSomeString!S && isInputRange!S && isSomeChar!(ElementType!S)",
				"members": [
					{
						"kind": "function",
						"line": 1006,
						"endchar": 1,
						"char": 7,
						"type": "dchar(ref S str, out size_t numCodeUnits)",
						"parameters": [
							{
								"storageClass": [
									"ref"
								],
								"type": "S",
								"name": "str"
							},
							{
								"storageClass": [
									"out"
								],
								"type": "size_t",
								"name": "numCodeUnits"
							}
						],
						"name": "decodeFront",
						"endline": 1040
					}
				],
				"char": 7,
				"parameters": [
					{
						"kind": "type",
						"name": "S"
					}
				],
				"comment": "    $(D decodeFront) is a variant of $(LREF decode) which specifically decodes\n    the first code point. Unlike $(LREF decode), $(D decodeFront) accepts any\n    input range of code units (rather than just a string or random access\n    range). It also takes the range by $(D ref) and pops off the elements as it\n    decodes them. If $(D numCodeUnits) is passed in, it gets set to the number\n    of code units which were in the code point which was decoded.\n\n    Throws:\n        $(LREF UTFException) if $(D str.front) is not the start of a valid UTF\n        sequence. If an exception is thrown, then there is no guarantee as to\n        the number of code units which were popped off, as it depends on the\n        type of range being used and how many code units had to be popped off\n        before the code point was determined to be invalid.\n",
				"name": "decodeFront"
			},
			{
				"kind": "template",
				"line": 1070,
				"constraint": "isInputRange!S && isSomeChar!(ElementType!S)",
				"members": [
					{
						"kind": "function",
						"line": 1070,
						"endchar": 1,
						"char": 7,
						"type": "dchar(ref S str)",
						"parameters": [
							{
								"storageClass": [
									"ref"
								],
								"type": "S",
								"name": "str"
							}
						],
						"name": "decodeFront",
						"endline": 1075
					}
				],
				"char": 7,
				"parameters": [
					{
						"kind": "type",
						"name": "S"
					}
				],
				"comment": " Ditto\n",
				"name": "decodeFront"
			},
			{
				"kind": "function",
				"line": 1608,
				"deco": "FNaNfKG4awZm",
				"endchar": 1,
				"char": 8,
				"parameters": [
					{
						"deco": "G4a",
						"storageClass": [
							"ref"
						],
						"name": "buf"
					},
					{
						"deco": "w",
						"name": "c"
					}
				],
				"name": "encode",
				"comment": "    Encodes $(D c) into the static array, $(D buf), and returns the actual\n    length of the encoded character (a number between $(D 1) and $(D 4) for\n    $(D char[4]) buffers and a number between $(D 1) and $(D 2) for\n    $(D wchar[2]) buffers).\n\n    Throws:\n        $(D UTFException) if $(D c) is not a valid UTF code point.\n",
				"originalType": "pure @safe size_t(ref char[4] buf, dchar c)",
				"endline": 1646
			},
			{
				"kind": "function",
				"line": 1677,
				"deco": "FNaNfKG2uwZm",
				"endchar": 1,
				"char": 8,
				"parameters": [
					{
						"deco": "G2u",
						"storageClass": [
							"ref"
						],
						"name": "buf"
					},
					{
						"deco": "w",
						"name": "c"
					}
				],
				"name": "encode",
				"comment": "Ditto\n",
				"originalType": "pure @safe size_t(ref wchar[2] buf, dchar c)",
				"endline": 1698
			},
			{
				"kind": "function",
				"line": 1730,
				"deco": "FNaNfKAawZv",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "Aa",
						"storageClass": [
							"ref"
						],
						"name": "str"
					},
					{
						"deco": "w",
						"name": "c"
					}
				],
				"name": "encode",
				"comment": "    Encodes $(D c) in $(D str)'s encoding and appends it to $(D str).\n\n    Throws:\n        $(D UTFException) if $(D c) is not a valid UTF code point.\n",
				"endline": 1779
			},
			{
				"kind": "function",
				"line": 1832,
				"deco": "FNaNfKAuwZv",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "Au",
						"storageClass": [
							"ref"
						],
						"name": "str"
					},
					{
						"deco": "w",
						"name": "c"
					}
				],
				"name": "encode",
				"comment": "ditto\n",
				"endline": 1860
			},
			{
				"kind": "function",
				"line": 1886,
				"deco": "FNaNfKAwwZv",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "Aw",
						"storageClass": [
							"ref"
						],
						"name": "str"
					},
					{
						"deco": "w",
						"name": "c"
					}
				],
				"name": "encode",
				"comment": "ditto\n",
				"endline": 1893
			},
			{
				"kind": "template",
				"line": 1922,
				"constraint": "isSomeChar!C",
				"members": [
					{
						"kind": "function",
						"line": 1922,
						"endchar": 1,
						"char": 7,
						"type": "pure nothrow @nogc @safe ubyte(dchar c)",
						"parameters": [
							{
								"deco": "w",
								"name": "c"
							}
						],
						"name": "codeLength",
						"endline": 1942
					}
				],
				"char": 7,
				"parameters": [
					{
						"kind": "type",
						"name": "C"
					}
				],
				"comment": "    Returns the number of code units that are required to encode the code point\n    $(D c) when $(D C) is the character type used to encode it.\nExample:\n\n---\nassert(codeLength!char('a') == 1);\nassert(codeLength!wchar('a') == 1);\nassert(codeLength!dchar('a') == 1);\n\nassert(codeLength!char('\\U0010FFFF') == 4);\nassert(codeLength!wchar('\\U0010FFFF') == 2);\nassert(codeLength!dchar('\\U0010FFFF') == 1);\n\n---\n",
				"name": "codeLength"
			},
			{
				"kind": "template",
				"line": 1963,
				"constraint": "isInputRange!InputRange && is(ElementType!InputRange : dchar)",
				"members": [
					{
						"kind": "function",
						"line": 1963,
						"endchar": 1,
						"char": 8,
						"type": "size_t(InputRange input)",
						"parameters": [
							{
								"type": "InputRange",
								"name": "input"
							}
						],
						"name": "codeLength",
						"endline": 1978
					}
				],
				"char": 8,
				"parameters": [
					{
						"kind": "type",
						"name": "C"
					},
					{
						"kind": "type",
						"name": "InputRange"
					}
				],
				"comment": "    Returns the number of code units that are required to encode $(D str)\n    in a string whose character type is $(D C). This is particularly useful\n    when slicing one string with the length of another and the two string\n    types use different character types.\nExample:\n\n---\nimport std.conv : to;\nassert(codeLength!char(\"hello world\") ==\n       to!string(\"hello world\").length);\nassert(codeLength!wchar(\"hello world\") ==\n       to!wstring(\"hello world\").length);\nassert(codeLength!dchar(\"hello world\") ==\n       to!dstring(\"hello world\").length);\n\nassert(codeLength!char(`プログラミング`) ==\n       to!string(`プログラミング`).length);\nassert(codeLength!wchar(`プログラミング`) ==\n       to!wstring(`プログラミング`).length);\nassert(codeLength!dchar(`プログラミング`) ==\n       to!dstring(`プログラミング`).length);\n\nstring haystack = `Être sans la verité, ça, ce ne serait pas bien.`;\nwstring needle = `Être sans la verité`;\nassert(haystack[codeLength!char(needle) .. $] ==\n       `, ça, ce ne serait pas bien.`);\n\n---\n",
				"name": "codeLength"
			},
			{
				"kind": "template",
				"line": 2077,
				"constraint": "isSomeString!S",
				"members": [
					{
						"kind": "function",
						"line": 2077,
						"endchar": 1,
						"char": 6,
						"type": "pure @safe void(in S str)",
						"parameters": [
							{
								"storageClass": [
									"in"
								],
								"type": "S",
								"name": "str"
							}
						],
						"name": "validate",
						"endline": 2085
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "S"
					}
				],
				"comment": "    Checks to see if $(D str) is well-formed unicode or not.\n\n    Throws:\n        $(D UTFException) if $(D str) is not well-formed.\n",
				"name": "validate"
			},
			{
				"kind": "function",
				"line": 2143,
				"deco": "FNaNfxAaZAya",
				"endchar": 1,
				"char": 8,
				"parameters": [
					{
						"deco": "xAa",
						"name": "s"
					}
				],
				"name": "toUTF8",
				"comment": " Encodes string $(D_PARAM s) into UTF-8 and returns the encoded string.\n",
				"originalType": "pure @safe string(in char[] s)",
				"endline": 2147
			},
			{
				"kind": "function",
				"line": 2150,
				"deco": "FNaNexAuZAya",
				"endchar": 1,
				"char": 8,
				"parameters": [
					{
						"deco": "xAu",
						"name": "s"
					}
				],
				"name": "toUTF8",
				"comment": "ditto\n",
				"originalType": "pure @trusted string(in wchar[] s)",
				"endline": 2175
			},
			{
				"kind": "function",
				"line": 2178,
				"deco": "FNaNexAwZAya",
				"endchar": 1,
				"char": 8,
				"parameters": [
					{
						"deco": "xAw",
						"name": "s"
					}
				],
				"name": "toUTF8",
				"comment": "ditto\n",
				"originalType": "pure @trusted string(in dchar[] s)",
				"endline": 2205
			},
			{
				"kind": "function",
				"line": 2233,
				"deco": "FNaNexAaZAyu",
				"endchar": 1,
				"char": 9,
				"parameters": [
					{
						"deco": "xAa",
						"name": "s"
					}
				],
				"name": "toUTF16",
				"comment": " Encodes string $(D s) into UTF-16 and returns the encoded string.\n",
				"originalType": "pure @trusted wstring(in char[] s)",
				"endline": 2258
			},
			{
				"kind": "function",
				"line": 2261,
				"deco": "FNaNfxAuZAyu",
				"endchar": 1,
				"char": 9,
				"parameters": [
					{
						"deco": "xAu",
						"name": "s"
					}
				],
				"name": "toUTF16",
				"comment": "ditto\n",
				"originalType": "pure @safe wstring(in wchar[] s)",
				"endline": 2265
			},
			{
				"kind": "function",
				"line": 2268,
				"deco": "FNaNexAwZAyu",
				"endchar": 1,
				"char": 14,
				"parameters": [
					{
						"deco": "xAw",
						"name": "s"
					}
				],
				"name": "toUTF16",
				"comment": "ditto\n",
				"originalType": "pure @trusted wstring(in dchar[] s)",
				"endline": 2283
			},
			{
				"kind": "function",
				"line": 2291,
				"deco": "FNaNexAaZAyw",
				"endchar": 1,
				"char": 9,
				"parameters": [
					{
						"deco": "xAa",
						"name": "s"
					}
				],
				"name": "toUTF32",
				"comment": " Encodes string $(D_PARAM s) into UTF-32 and returns the encoded string.\n",
				"originalType": "pure @trusted dstring(in char[] s)",
				"endline": 2311
			},
			{
				"kind": "function",
				"line": 2314,
				"deco": "FNaNexAuZAyw",
				"endchar": 1,
				"char": 9,
				"parameters": [
					{
						"deco": "xAu",
						"name": "s"
					}
				],
				"name": "toUTF32",
				"comment": "ditto\n",
				"originalType": "pure @trusted dstring(in wchar[] s)",
				"endline": 2334
			},
			{
				"kind": "function",
				"line": 2337,
				"deco": "FNaNfxAwZAyw",
				"endchar": 1,
				"char": 9,
				"parameters": [
					{
						"deco": "xAw",
						"name": "s"
					}
				],
				"name": "toUTF32",
				"comment": "ditto\n",
				"originalType": "pure @safe dstring(in dchar[] s)",
				"endline": 2341
			},
			{
				"kind": "template",
				"line": 2385,
				"members": [
					{
						"kind": "template",
						"line": 2387,
						"members": [
							{
								"kind": "function",
								"line": 2387,
								"endchar": 5,
								"char": 7,
								"type": "pure @safe P(S str)",
								"parameters": [
									{
										"type": "S",
										"name": "str"
									}
								],
								"name": "toUTFz",
								"endline": 2390
							}
						],
						"char": 7,
						"parameters": [
							{
								"kind": "type",
								"name": "S"
							}
						],
						"name": "toUTFz"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "P"
					}
				],
				"comment": "    Returns a C-style zero-terminated string equivalent to $(D str). $(D str)\n    must not contain embedded $(D '\\0')'s as any C function will treat the first\n    $(D '\\0') that it sees as the end of the string. If $(D str.empty) is\n    $(D true), then a string containing only $(D '\\0') is returned.\n\n    $(D toUTFz) accepts any type of string and is templated on the type of\n    character pointer that you wish to convert to. It will avoid allocating a\n    new string if it can, but there's a decent chance that it will end up having\n    to allocate a new string - particularly when dealing with character types\n    other than $(D char).\n\n    $(RED Warning 1:) If the result of $(D toUTFz) equals $(D str.ptr), then if\n    anything alters the character one past the end of $(D str) (which is the\n    $(D '\\0') character terminating the string), then the string won't be\n    zero-terminated anymore. The most likely scenarios for that are if you\n    append to $(D str) and no reallocation takes place or when $(D str) is a\n    slice of a larger array, and you alter the character in the larger array\n    which is one character past the end of $(D str). Another case where it could\n    occur would be if you had a mutable character array immediately after\n    $(D str) in memory (for example, if they're member variables in a\n    user-defined type with one declared right after the other) and that\n    character array happened to start with $(D '\\0'). Such scenarios will never\n    occur if you immediately use the zero-terminated string after calling\n    $(D toUTFz) and the C function using it doesn't keep a reference to it.\n    Also, they are unlikely to occur even if you save the zero-terminated string\n    (the cases above would be among the few examples of where it could happen).\n    However, if you save the zero-terminate string and want to be absolutely\n    certain that the string stays zero-terminated, then simply append a\n    $(D '\\0') to the string and use its $(D ptr) property rather than calling\n    $(D toUTFz).\n\n    $(RED Warning 2:) When passing a character pointer to a C function, and the\n    C function keeps it around for any reason, make sure that you keep a\n    reference to it in your D code. Otherwise, it may go away during a garbage\n    collection cycle and cause a nasty bug when the C code tries to use it.\nExample:\n\n---\nauto p1 = toUTFz!(char*)(\"hello world\");\nauto p2 = toUTFz!(const(char)*)(\"hello world\");\nauto p3 = toUTFz!(immutable(char)*)(\"hello world\");\nauto p4 = toUTFz!(char*)(\"hello world\"d);\nauto p5 = toUTFz!(const(wchar)*)(\"hello world\");\nauto p6 = toUTFz!(immutable(dchar)*)(\"hello world\"w);\n\n---\n",
				"name": "toUTFz"
			},
			{
				"kind": "template",
				"line": 2598,
				"constraint": "isSomeChar!C",
				"members": [
					{
						"kind": "function",
						"line": 2598,
						"endchar": 1,
						"char": 15,
						"type": "pure @safe const(wchar)*(const(C)[] str)",
						"parameters": [
							{
								"type": "const(C)[]",
								"name": "str"
							}
						],
						"name": "toUTF16z",
						"endline": 2602
					}
				],
				"char": 15,
				"parameters": [
					{
						"kind": "type",
						"name": "C"
					}
				],
				"comment": "    $(D toUTF16z) is a convenience function for $(D toUTFz!(const(wchar)*)).\n\n    Encodes string $(D s) into UTF-16 and returns the encoded string.\n    $(D toUTF16z) is suitable for calling the 'W' functions in the Win32 API\n    that take an $(D LPWSTR) or $(D LPCWSTR) argument.\n",
				"name": "toUTF16z"
			},
			{
				"kind": "template",
				"line": 2657,
				"constraint": "isSomeChar!C",
				"members": [
					{
						"kind": "function",
						"line": 2657,
						"endchar": 1,
						"char": 8,
						"type": "pure nothrow @nogc @trusted size_t(const(C)[] str)",
						"parameters": [
							{
								"type": "const(C)[]",
								"name": "str"
							}
						],
						"name": "count",
						"endline": 2661
					}
				],
				"char": 8,
				"parameters": [
					{
						"kind": "type",
						"name": "C"
					}
				],
				"comment": "    Returns the total number of code points encoded in $(D str).\n\n    Supercedes: This function supercedes $(LREF toUCSindex).\n\n    Standards: Unicode 5.0, ASCII, ISO-8859-1, WINDOWS-1252\n\n    Throws:\n        $(D UTFException) if $(D str) is not well-formed.\n",
				"name": "count"
			},
			{
				"kind": "variable",
				"line": 2782,
				"init": "'\\U0000fffd'",
				"storageClass": [
					"enum"
				],
				"deco": "w",
				"char": 12,
				"name": "replacementDchar",
				"comment": " Inserted in place of invalid UTF sequences.\n\n References:\n      $(LINK http://en.wikipedia.org/wiki/Replacement_character#Replacement_character)\n"
			},
			{
				"kind": "template",
				"line": 2795,
				"constraint": "isNarrowString!R",
				"members": [
					{
						"kind": "function",
						"line": 2795,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "(R r)",
						"parameters": [
							{
								"type": "R",
								"name": "r"
							}
						],
						"name": "byCodeUnit",
						"endline": 2841
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"comment": " Iterate a range of char, wchar, or dchars by code unit.\n\n The purpose is to bypass the special case decoding that\n $(XREF array,front) does to character arrays.\n Params:\n      r = input range of characters, or array of characters\n Returns:\n      input range\n",
				"name": "byCodeUnit"
			},
			{
				"kind": "template",
				"line": 2844,
				"constraint": "!isNarrowString!R && isInputRange!R && isSomeChar!(ElementEncodingType!R)",
				"members": [
					{
						"kind": "function",
						"line": 2844,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 10,
						"type": "ref (R r)",
						"parameters": [
							{
								"type": "R",
								"name": "r"
							}
						],
						"name": "byCodeUnit",
						"endline": 2849
					}
				],
				"char": 10,
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"comment": "Ditto\n",
				"name": "byCodeUnit"
			},
			{
				"kind": "template",
				"line": 2936,
				"constraint": "isNarrowString!R",
				"members": [
					{
						"kind": "function",
						"line": 2936,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "(R r)",
						"parameters": [
							{
								"type": "R",
								"name": "r"
							}
						],
						"name": "byChar",
						"endline": 2952
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"comment": " Iterate an input range of characters by char, wchar, or dchar.\n\n UTF sequences that cannot be converted to UTF-8 are replaced by U+FFFD\n per \"5.22 Best Practice for U+FFFD Substitution\" of the Unicode Standard 6.2.\n Hence, byChar, byWchar, and byDchar are not symmetric.\n This algorithm is lazy, and does not allocate memory.\n Purity, nothrow, and safety are inferred from the r parameter.\n Params:\n      r = input range of characters, or array of characters\n Returns:\n      input range\n",
				"name": "byChar"
			},
			{
				"kind": "template",
				"line": 2955,
				"constraint": "isNarrowString!R",
				"members": [
					{
						"kind": "function",
						"line": 2955,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "(R r)",
						"parameters": [
							{
								"type": "R",
								"name": "r"
							}
						],
						"name": "byWchar",
						"endline": 2967
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"comment": "Ditto\n",
				"name": "byWchar"
			},
			{
				"kind": "template",
				"line": 2970,
				"constraint": "isNarrowString!R",
				"members": [
					{
						"kind": "function",
						"line": 2970,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "(R r)",
						"parameters": [
							{
								"type": "R",
								"name": "r"
							}
						],
						"name": "byDchar",
						"endline": 2975
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"comment": "Ditto\n",
				"name": "byDchar"
			},
			{
				"kind": "template",
				"line": 2979,
				"constraint": "!isNarrowString!R && isInputRange!R && isSomeChar!(ElementEncodingType!R)",
				"members": [
					{
						"kind": "function",
						"line": 2979,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 10,
						"type": "ref (R r)",
						"parameters": [
							{
								"type": "R",
								"name": "r"
							}
						],
						"name": "byChar",
						"endline": 3091
					}
				],
				"char": 10,
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"comment": "Ditto\n",
				"name": "byChar"
			},
			{
				"kind": "template",
				"line": 3142,
				"constraint": "!isNarrowString!R && isInputRange!R && isSomeChar!(ElementEncodingType!R)",
				"members": [
					{
						"kind": "function",
						"line": 3142,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 10,
						"type": "ref (R r)",
						"parameters": [
							{
								"type": "R",
								"name": "r"
							}
						],
						"name": "byWchar",
						"endline": 3233
					}
				],
				"char": 10,
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"comment": "Ditto\n",
				"name": "byWchar"
			},
			{
				"kind": "template",
				"line": 3279,
				"constraint": "!isNarrowString!R && isInputRange!R && isSomeChar!(ElementEncodingType!R)",
				"members": [
					{
						"kind": "function",
						"line": 3279,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 10,
						"type": "ref (R r)",
						"parameters": [
							{
								"type": "R",
								"name": "r"
							}
						],
						"name": "byDchar",
						"endline": 3461
					}
				],
				"char": 10,
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"comment": "Ditto\n",
				"name": "byDchar"
			}
		],
		"name": "std.utf",
		"comment": "    Encode and decode UTF-8, UTF-16 and UTF-32 strings.\n\n    UTF character support is restricted to\n    $(D '\\u0000' &lt;= character &lt;= '\\U0010FFFF').\n\n    See_Also:\n        $(LINK2 http://en.wikipedia.org/wiki/Unicode, Wikipedia)<br>\n        $(LINK http://www.cl.cam.ac.uk/~mgk25/unicode.html#utf-8)<br>\n        $(LINK http://anubis.dkuug.dk/JTC1/SC2/WG2/docs/n1335)\n    Macros:\n        WIKI = Phobos/StdUtf\n\n    Copyright: Copyright Digital Mars 2000 - 2012.\n    License:   $(WEB www.boost.org/LICENSE_1_0.txt, Boost License 1.0).\n    Authors:   $(WEB digitalmars.com, Walter Bright) and Jonathan M Davis\n    Source:    $(PHOBOSSRC std/_utf.d)\n"
	},
	{
		"kind": "module",
		"file": "../phobos/std/system.d",
		"members": [
			{
				"kind": "enum",
				"line": 30,
				"members": [
					{
						"kind": "enum member",
						"line": 32,
						"value": "1",
						"char": 9,
						"name": "win32",
						"comment": "Microsoft 32 bit Windows systems\n"
					},
					{
						"kind": "enum member",
						"line": 33,
						"value": "2",
						"char": 9,
						"name": "win64",
						"comment": "Microsoft 64 bit Windows systems\n"
					},
					{
						"kind": "enum member",
						"line": 34,
						"value": "3",
						"char": 9,
						"name": "linux",
						"comment": "All Linux Systems\n"
					},
					{
						"kind": "enum member",
						"line": 35,
						"value": "4",
						"char": 9,
						"name": "osx",
						"comment": "Mac OS X\n"
					},
					{
						"kind": "enum member",
						"line": 36,
						"value": "5",
						"char": 9,
						"name": "freeBSD",
						"comment": "FreeBSD\n"
					},
					{
						"kind": "enum member",
						"line": 37,
						"value": "6",
						"char": 9,
						"name": "solaris",
						"comment": "Solaris\n"
					},
					{
						"kind": "enum member",
						"line": 38,
						"value": "7",
						"char": 9,
						"name": "android",
						"comment": "Android\n"
					},
					{
						"kind": "enum member",
						"line": 39,
						"value": "8",
						"char": 9,
						"name": "otherPosix",
						"comment": "Other Posix Systems\n"
					}
				],
				"char": 5,
				"baseDeco": "i",
				"name": "OS",
				"comment": "        Operating system.\n\n        Note:\n            This is for cases where you need a value representing the OS at\n            runtime. If you're doing something which should compile differently\n            on different OSes, then please use $(D version(Windows)),\n            $(D version(linux)), etc.\n\n        See_Also:\n            <a href=\"../version.html#PredefinedVersions\">Predefined Versions</a>\n"
			},
			{
				"kind": "variable",
				"line": 45,
				"init": "cast(OS)3",
				"storageClass": [
					"immutable"
				],
				"deco": "yE3std6system2OS",
				"char": 30,
				"name": "os",
				"comment": "The OS that the program was compiled for.\n",
				"originalType": "OS"
			},
			{
				"kind": "enum",
				"line": 65,
				"members": [
					{
						"kind": "enum member",
						"line": 67,
						"value": "0",
						"char": 9,
						"name": "bigEndian",
						"comment": "Big endian byte order\n"
					},
					{
						"kind": "enum member",
						"line": 68,
						"value": "1",
						"char": 9,
						"name": "littleEndian",
						"comment": "Little endian byte order\n"
					}
				],
				"char": 5,
				"baseDeco": "i",
				"name": "Endian",
				"comment": "        Byte order endianness.\n\n        Note:\n            This is intended for cases where you need to deal with endianness at\n            runtime. If you're doing something which should compile differently\n            depending on whether you're compiling on a big endian or little\n            endian machine, then please use $(D version(BigEndian)) and\n            $(D version(LittleEndian)).\n\n        See_Also:\n            <a href=\"../version.html#PredefinedVersions\">Predefined Versions</a>\n"
			},
			{
				"kind": "variable",
				"line": 72,
				"init": "cast(Endian)1",
				"storageClass": [
					"immutable"
				],
				"deco": "yE3std6system6Endian",
				"char": 34,
				"name": "endian",
				"comment": "The endianness that the program was compiled for.\n",
				"originalType": "Endian"
			}
		],
		"name": "std.system",
		"comment": " Information about the target operating system, environment, and CPU.\n\n Macros:\n      WIKI = Phobos/StdSystem\n\n  Copyright: Copyright Digital Mars 2000 - 2011\n  License:   $(WEB www.boost.org/LICENSE_1_0.txt, Boost License 1.0).\n  Authors:   $(WEB digitalmars.com, Walter Bright) and Jonathan M Davis\n  Source:    $(PHOBOSSRC std/_system.d)\n"
	},
	{
		"kind": "module",
		"file": "../phobos/std/string.d",
		"members": [
			{
				"kind": "class",
				"line": 176,
				"base": "object.Exception",
				"members": [
					{
						"kind": "constructor",
						"line": 185,
						"deco": "FNaNbNfAyaAyamC6object9ThrowableZC3std6string15StringException",
						"endchar": 5,
						"char": 5,
						"parameters": [
							{
								"deco": "Aya",
								"name": "msg"
							},
							{
								"deco": "Aya",
								"default": "__FILE__",
								"name": "file"
							},
							{
								"deco": "m",
								"default": "cast(ulong)__LINE__",
								"name": "line"
							},
							{
								"deco": "C6object9Throwable",
								"default": "null",
								"name": "next"
							}
						],
						"name": "this",
						"comment": "        Params:\n            msg  = The message for the exception.\n            file = The file where the exception occurred.\n            line = The line number where the exception occurred.\n            next = The previous exception in the chain of exceptions, if any.\n",
						"originalType": "pure nothrow @safe (string msg, string file = __FILE__, size_t line = __LINE__, Throwable next = null)",
						"endline": 191
					}
				],
				"char": 1,
				"name": "StringException",
				"comment": "    Exception thrown on errors in std.string functions.\n"
			},
			{
				"kind": "function",
				"line": 203,
				"deco": "FNaPNgaZANga",
				"endchar": 1,
				"char": 15,
				"parameters": [
					{
						"deco": "PNga",
						"name": "cString"
					}
				],
				"name": "fromStringz",
				"comment": "    Returns a D-style array of $(D char) given a zero-terminated C-style string.\n    The returned array will retain the same type qualifiers as the input.\n\n    $(RED Important Note:) The returned array is a slice of the original buffer.\n    The original data is not changed and not copied.\nExample:\n\n---\nassert(fromStringz(null) == null);\nassert(fromStringz(\"foo\") == \"foo\");\n\n---\n",
				"endline": 206
			},
			{
				"kind": "function",
				"line": 226,
				"deco": "FNaNbNeAxaZPya",
				"endchar": 1,
				"char": 18,
				"parameters": [
					{
						"deco": "Axa",
						"name": "s"
					}
				],
				"name": "toStringz",
				"comment": "    Returns a C-style zero-terminated string equivalent to $(D s). $(D s)\n    must not contain embedded $(D '\\0')'s as any C function will treat the first\n    $(D '\\0') that it sees as the end of the string. If $(D s.empty) is\n    $(D true), then a string containing only $(D '\\0') is returned.\n\n    $(RED Important Note:) When passing a $(D char*) to a C function, and the C\n    function keeps it around for any reason, make sure that you keep a reference\n    to it in your D code. Otherwise, it may go away during a garbage collection\n    cycle and cause a nasty bug when the C code tries to use it.\n",
				"endline": 268
			},
			{
				"kind": "function",
				"line": 271,
				"deco": "FNaNbNexAyaZPya",
				"endchar": 1,
				"char": 18,
				"parameters": [
					{
						"deco": "xAya",
						"name": "s"
					}
				],
				"name": "toStringz",
				"comment": " Ditto\n",
				"originalType": "pure nothrow @trusted immutable(char)*(in string s)",
				"endline": 288
			},
			{
				"kind": "alias",
				"line": 328,
				"deco": "E3std8typecons43__T4FlagVAyaa13_6361736553656e736974697665Z4Flag",
				"char": 1,
				"name": "CaseSensitive",
				"comment": "   Flag indicating whether a search is case-sensitive.\n"
			},
			{
				"kind": "template",
				"line": 344,
				"constraint": "isInputRange!Range && isSomeChar!(ElementEncodingType!Range)",
				"members": [
					{
						"kind": "function",
						"line": 344,
						"endchar": 1,
						"char": 11,
						"type": "pure @safe ptrdiff_t(Range s, in dchar c, in CaseSensitive cs = CaseSensitive.yes)",
						"parameters": [
							{
								"type": "Range",
								"name": "s"
							},
							{
								"deco": "w",
								"storageClass": [
									"in"
								],
								"name": "c"
							},
							{
								"storageClass": [
									"in"
								],
								"default": "CaseSensitive.yes",
								"type": "CaseSensitive",
								"name": "cs"
							}
						],
						"name": "indexOf",
						"endline": 467
					}
				],
				"char": 11,
				"parameters": [
					{
						"kind": "type",
						"name": "Range"
					}
				],
				"comment": "    Searches for character in range.\n\n    Params:\n        s = string or InputRange of characters to search in correct UTF format\n        c = character to search for\n        cs = CaseSensitive.yes or CaseSensitive.no\n\n    Returns:\n        the index of the first occurrence of $(D c) in $(D s). If $(D c)\n        is not found, then $(D -1) is returned.\n        If the parameters are not valid UTF, the result will still\n        be in the range [-1 .. s.length], but will not be reliable otherwise.\n",
				"name": "indexOf"
			},
			{
				"kind": "template",
				"line": 527,
				"constraint": "isSomeChar!Char",
				"members": [
					{
						"kind": "function",
						"line": 527,
						"endchar": 1,
						"char": 11,
						"type": "pure @safe ptrdiff_t(const(Char)[] s, in dchar c, in size_t startIdx, in CaseSensitive cs = CaseSensitive.yes)",
						"parameters": [
							{
								"type": "const(Char)[]",
								"name": "s"
							},
							{
								"deco": "w",
								"storageClass": [
									"in"
								],
								"name": "c"
							},
							{
								"storageClass": [
									"in"
								],
								"type": "size_t",
								"name": "startIdx"
							},
							{
								"storageClass": [
									"in"
								],
								"default": "CaseSensitive.yes",
								"type": "CaseSensitive",
								"name": "cs"
							}
						],
						"name": "indexOf",
						"endline": 540
					}
				],
				"char": 11,
				"parameters": [
					{
						"kind": "type",
						"name": "Char"
					}
				],
				"comment": "    Returns the index of the first occurrence of $(D c) in $(D s) with respect\n    to the start index $(D startIdx). If $(D c) is not found, then $(D -1) is\n    returned. If $(D c) is found the value of the returned index is at least\n    $(D startIdx). $(D startIdx) represents a codeunit index in $(D s). If the\n    sequence starting at $(D startIdx) does not represent a well formed codepoint,\n    then a $(XREF utf,UTFException) may be thrown.\n\n    $(D cs) indicates whether the comparisons are case sensitive.\n",
				"name": "indexOf"
			},
			{
				"kind": "template",
				"line": 589,
				"constraint": "isSomeChar!Char1 && isSomeChar!Char2",
				"members": [
					{
						"kind": "function",
						"line": 589,
						"endchar": 1,
						"char": 11,
						"type": "@trusted ptrdiff_t(const(Char1)[] s, const(Char2)[] sub, in CaseSensitive cs = CaseSensitive.yes)",
						"parameters": [
							{
								"type": "const(Char1)[]",
								"name": "s"
							},
							{
								"type": "const(Char2)[]",
								"name": "sub"
							},
							{
								"storageClass": [
									"in"
								],
								"default": "CaseSensitive.yes",
								"type": "CaseSensitive",
								"name": "cs"
							}
						],
						"name": "indexOf",
						"endline": 607
					}
				],
				"char": 11,
				"parameters": [
					{
						"kind": "type",
						"name": "Char1"
					},
					{
						"kind": "type",
						"name": "Char2"
					}
				],
				"comment": "    Returns the index of the first occurrence of $(D sub) in $(D s). If $(D sub)\n    is not found, then $(D -1) is returned.\n\n    $(D cs) indicates whether the comparisons are case sensitive.\n",
				"name": "indexOf"
			},
			{
				"kind": "template",
				"line": 672,
				"constraint": "isSomeChar!Char1 && isSomeChar!Char2",
				"members": [
					{
						"kind": "function",
						"line": 672,
						"endchar": 1,
						"char": 11,
						"type": "@safe ptrdiff_t(const(Char1)[] s, const(Char2)[] sub, in size_t startIdx, in CaseSensitive cs = CaseSensitive.yes)",
						"parameters": [
							{
								"type": "const(Char1)[]",
								"name": "s"
							},
							{
								"type": "const(Char2)[]",
								"name": "sub"
							},
							{
								"storageClass": [
									"in"
								],
								"type": "size_t",
								"name": "startIdx"
							},
							{
								"storageClass": [
									"in"
								],
								"default": "CaseSensitive.yes",
								"type": "CaseSensitive",
								"name": "cs"
							}
						],
						"name": "indexOf",
						"endline": 685
					}
				],
				"char": 11,
				"parameters": [
					{
						"kind": "type",
						"name": "Char1"
					},
					{
						"kind": "type",
						"name": "Char2"
					}
				],
				"comment": "    Returns the index of the first occurrence of $(D sub) in $(D s) with\n    respect to the start index $(D startIdx). If $(D sub) is not found, then\n    $(D -1) is returned. If $(D sub) is found the value of the returned index\n    is at least $(D startIdx). $(D startIdx) represents a codeunit index in\n    $(D s). If the sequence starting at $(D startIdx) does not represent a well\n    formed codepoint, then a $(XREF utf,UTFException) may be thrown.\n\n    $(D cs) indicates whether the comparisons are case sensitive.\n",
				"name": "indexOf"
			},
			{
				"kind": "template",
				"line": 752,
				"constraint": "isSomeChar!Char",
				"members": [
					{
						"kind": "function",
						"line": 752,
						"endchar": 1,
						"char": 11,
						"type": "pure @safe ptrdiff_t(const(Char)[] s, in dchar c, in CaseSensitive cs = CaseSensitive.yes)",
						"parameters": [
							{
								"type": "const(Char)[]",
								"name": "s"
							},
							{
								"deco": "w",
								"storageClass": [
									"in"
								],
								"name": "c"
							},
							{
								"storageClass": [
									"in"
								],
								"default": "CaseSensitive.yes",
								"type": "CaseSensitive",
								"name": "cs"
							}
						],
						"name": "lastIndexOf",
						"endline": 812
					}
				],
				"char": 11,
				"parameters": [
					{
						"kind": "type",
						"name": "Char"
					}
				],
				"comment": "    Returns the index of the last occurrence of $(D c) in $(D s). If $(D c)\n    is not found, then $(D -1) is returned.\n\n    $(D cs) indicates whether the comparisons are case sensitive.\n",
				"name": "lastIndexOf"
			},
			{
				"kind": "template",
				"line": 864,
				"constraint": "isSomeChar!Char",
				"members": [
					{
						"kind": "function",
						"line": 864,
						"endchar": 1,
						"char": 11,
						"type": "pure @safe ptrdiff_t(const(Char)[] s, in dchar c, in size_t startIdx, in CaseSensitive cs = CaseSensitive.yes)",
						"parameters": [
							{
								"type": "const(Char)[]",
								"name": "s"
							},
							{
								"deco": "w",
								"storageClass": [
									"in"
								],
								"name": "c"
							},
							{
								"storageClass": [
									"in"
								],
								"type": "size_t",
								"name": "startIdx"
							},
							{
								"storageClass": [
									"in"
								],
								"default": "CaseSensitive.yes",
								"type": "CaseSensitive",
								"name": "cs"
							}
						],
						"name": "lastIndexOf",
						"endline": 874
					}
				],
				"char": 11,
				"parameters": [
					{
						"kind": "type",
						"name": "Char"
					}
				],
				"comment": "    Returns the index of the last occurrence of $(D c) in $(D s). If $(D c) is\n    not found, then $(D -1) is returned. The $(D startIdx) slices $(D s) in\n    the following way $(D s[0 .. startIdx]). $(D startIdx) represents a\n    codeunit index in $(D s). If the sequence ending at $(D startIdx) does not\n    represent a well formed codepoint, then a $(XREF utf,UTFException) may be\n    thrown.\n\n    $(D cs) indicates whether the comparisons are case sensitive.\n",
				"name": "lastIndexOf"
			},
			{
				"kind": "template",
				"line": 916,
				"constraint": "isSomeChar!Char1 && isSomeChar!Char2",
				"members": [
					{
						"kind": "function",
						"line": 916,
						"endchar": 1,
						"char": 11,
						"type": "pure @safe ptrdiff_t(const(Char1)[] s, const(Char2)[] sub, in CaseSensitive cs = CaseSensitive.yes)",
						"parameters": [
							{
								"type": "const(Char1)[]",
								"name": "s"
							},
							{
								"type": "const(Char2)[]",
								"name": "sub"
							},
							{
								"storageClass": [
									"in"
								],
								"default": "CaseSensitive.yes",
								"type": "CaseSensitive",
								"name": "cs"
							}
						],
						"name": "lastIndexOf",
						"endline": 991
					}
				],
				"char": 11,
				"parameters": [
					{
						"kind": "type",
						"name": "Char1"
					},
					{
						"kind": "type",
						"name": "Char2"
					}
				],
				"comment": "    Returns the index of the last occurrence of $(D sub) in $(D s). If $(D sub)\n    is not found, then $(D -1) is returned.\n\n    $(D cs) indicates whether the comparisons are case sensitive.\n",
				"name": "lastIndexOf"
			},
			{
				"kind": "template",
				"line": 1081,
				"constraint": "isSomeChar!Char1 && isSomeChar!Char2",
				"members": [
					{
						"kind": "function",
						"line": 1081,
						"endchar": 1,
						"char": 11,
						"type": "pure @safe ptrdiff_t(const(Char1)[] s, const(Char2)[] sub, in size_t startIdx, in CaseSensitive cs = CaseSensitive.yes)",
						"parameters": [
							{
								"type": "const(Char1)[]",
								"name": "s"
							},
							{
								"type": "const(Char2)[]",
								"name": "sub"
							},
							{
								"storageClass": [
									"in"
								],
								"type": "size_t",
								"name": "startIdx"
							},
							{
								"storageClass": [
									"in"
								],
								"default": "CaseSensitive.yes",
								"type": "CaseSensitive",
								"name": "cs"
							}
						],
						"name": "lastIndexOf",
						"endline": 1091
					}
				],
				"char": 11,
				"parameters": [
					{
						"kind": "type",
						"name": "Char1"
					},
					{
						"kind": "type",
						"name": "Char2"
					}
				],
				"comment": "    Returns the index of the last occurrence of $(D sub) in $(D s). If $(D sub)\n    is not found, then $(D -1) is returned. The $(D startIdx) slices $(D s) in\n    the following way $(D s[0 .. startIdx]). $(D startIdx) represents a\n    codeunit index in $(D s). If the sequence ending at $(D startIdx) does not\n    represent a well formed codepoint, then a $(XREF utf,UTFException) may be\n    thrown.\n\n    $(D cs) indicates whether the comparisons are case sensitive.\n",
				"name": "lastIndexOf"
			},
			{
				"kind": "template",
				"line": 1270,
				"constraint": "isSomeChar!Char && isSomeChar!Char2",
				"members": [
					{
						"kind": "function",
						"line": 1270,
						"endchar": 1,
						"char": 11,
						"type": "pure @safe ptrdiff_t(const(Char)[] haystack, const(Char2)[] needles, in CaseSensitive cs = CaseSensitive.yes)",
						"parameters": [
							{
								"type": "const(Char)[]",
								"name": "haystack"
							},
							{
								"type": "const(Char2)[]",
								"name": "needles"
							},
							{
								"storageClass": [
									"in"
								],
								"default": "CaseSensitive.yes",
								"type": "CaseSensitive",
								"name": "cs"
							}
						],
						"name": "indexOfAny",
						"endline": 1275
					}
				],
				"char": 11,
				"parameters": [
					{
						"kind": "type",
						"name": "Char"
					},
					{
						"kind": "type",
						"name": "Char2"
					}
				],
				"comment": "    Returns the index of the first occurence of any of the elements in $(D\n    needles) in $(D haystack). If no element of $(D needles) is found,\n    then $(D -1) is returned.\n\n    Params:\n    haystack = String to search for needles in.\n    needles = Strings to search for in haystack.\n        cs = Indicates whether the comparisons are case sensitive.\nExample:\n\n---\nimport std.conv : to;\n\nptrdiff_t i = \"helloWorld\".indexOfAny(\"Wr\");\nassert(i == 5);\ni = \"öällo world\".indexOfAny(\"lo \");\nassert(i == 4, to!string(i));\n\n---\n",
				"name": "indexOfAny"
			},
			{
				"kind": "template",
				"line": 1345,
				"constraint": "isSomeChar!Char && isSomeChar!Char2",
				"members": [
					{
						"kind": "function",
						"line": 1345,
						"endchar": 1,
						"char": 11,
						"type": "pure @safe ptrdiff_t(const(Char)[] haystack, const(Char2)[] needles, in size_t startIdx, in CaseSensitive cs = CaseSensitive.yes)",
						"parameters": [
							{
								"type": "const(Char)[]",
								"name": "haystack"
							},
							{
								"type": "const(Char2)[]",
								"name": "needles"
							},
							{
								"storageClass": [
									"in"
								],
								"type": "size_t",
								"name": "startIdx"
							},
							{
								"storageClass": [
									"in"
								],
								"default": "CaseSensitive.yes",
								"type": "CaseSensitive",
								"name": "cs"
							}
						],
						"name": "indexOfAny",
						"endline": 1359
					}
				],
				"char": 11,
				"parameters": [
					{
						"kind": "type",
						"name": "Char"
					},
					{
						"kind": "type",
						"name": "Char2"
					}
				],
				"comment": "    Returns the index of the first occurence of any of the elements in $(D\n    needles) in $(D haystack). If no element of $(D needles) is found,\n    then $(D -1) is returned. The $(D startIdx) slices $(D s) in the following\n    way $(D haystack[startIdx .. $]). $(D startIdx) represents a codeunit\n    index in $(D haystack). If the sequence ending at $(D startIdx) does not\n    represent a well formed codepoint, then a $(XREF utf,UTFException) may be\n    thrown.\n\n    Params:\n    haystack = String to search for needles in.\n    needles = Strings to search for in haystack.\n        startIdx = slices haystack like this $(D haystack[startIdx .. $]). If\n        the startIdx is greater equal the length of haystack the functions\n        returns $(D -1).\n        cs = Indicates whether the comparisons are case sensitive.\nExample:\n\n---\nimport std.conv : to;\n\nptrdiff_t i = \"helloWorld\".indexOfAny(\"Wr\", 4);\nassert(i == 5);\n\ni = \"Foo öällo world\".indexOfAny(\"lh\", 3);\nassert(i == 8, to!string(i));\n\n---\n",
				"name": "indexOfAny"
			},
			{
				"kind": "template",
				"line": 1431,
				"constraint": "isSomeChar!Char && isSomeChar!Char2",
				"members": [
					{
						"kind": "function",
						"line": 1431,
						"endchar": 1,
						"char": 11,
						"type": "pure @safe ptrdiff_t(const(Char)[] haystack, const(Char2)[] needles, in CaseSensitive cs = CaseSensitive.yes)",
						"parameters": [
							{
								"type": "const(Char)[]",
								"name": "haystack"
							},
							{
								"type": "const(Char2)[]",
								"name": "needles"
							},
							{
								"storageClass": [
									"in"
								],
								"default": "CaseSensitive.yes",
								"type": "CaseSensitive",
								"name": "cs"
							}
						],
						"name": "lastIndexOfAny",
						"endline": 1436
					}
				],
				"char": 11,
				"parameters": [
					{
						"kind": "type",
						"name": "Char"
					},
					{
						"kind": "type",
						"name": "Char2"
					}
				],
				"comment": "    Returns the index of the last occurence of any of the elements in $(D\n    needles) in $(D haystack). If no element of $(D needles) is found,\n    then $(D -1) is returned.\n\n    Params:\n    haystack = String to search for needles in.\n    needles = Strings to search for in haystack.\n        cs = Indicates whether the comparisons are case sensitive.\nExample:\n\n---\nptrdiff_t i = \"helloWorld\".lastIndexOfAny(\"Wlo\");\nassert(i == 8);\n\ni = \"Foo öäöllo world\".lastIndexOfAny(\"öF\");\nassert(i == 8);\n\n---\n",
				"name": "lastIndexOfAny"
			},
			{
				"kind": "template",
				"line": 1519,
				"constraint": "isSomeChar!Char && isSomeChar!Char2",
				"members": [
					{
						"kind": "function",
						"line": 1519,
						"endchar": 1,
						"char": 11,
						"type": "pure @safe ptrdiff_t(const(Char)[] haystack, const(Char2)[] needles, in size_t stopIdx, in CaseSensitive cs = CaseSensitive.yes)",
						"parameters": [
							{
								"type": "const(Char)[]",
								"name": "haystack"
							},
							{
								"type": "const(Char2)[]",
								"name": "needles"
							},
							{
								"storageClass": [
									"in"
								],
								"type": "size_t",
								"name": "stopIdx"
							},
							{
								"storageClass": [
									"in"
								],
								"default": "CaseSensitive.yes",
								"type": "CaseSensitive",
								"name": "cs"
							}
						],
						"name": "lastIndexOfAny",
						"endline": 1530
					}
				],
				"char": 11,
				"parameters": [
					{
						"kind": "type",
						"name": "Char"
					},
					{
						"kind": "type",
						"name": "Char2"
					}
				],
				"comment": "    Returns the index of the last occurence of any of the elements in $(D\n    needles) in $(D haystack). If no element of $(D needles) is found,\n    then $(D -1) is returned. The $(D stopIdx) slices $(D s) in the following\n    way $(D s[0 .. stopIdx]). $(D stopIdx) represents a codeunit index in\n    $(D s). If the sequence ending at $(D startIdx) does not represent a well\n    formed codepoint, then a $(XREF utf,UTFException) may be thrown.\n\n    Params:\n    haystack = String to search for needles in.\n    needles = Strings to search for in haystack.\n        stopIdx = slices haystack like this $(D haystack[0 .. stopIdx]). If\n        the stopIdx is greater equal the length of haystack the functions\n        returns $(D -1).\n        cs = Indicates whether the comparisons are case sensitive.\nExample:\n\n---\nimport std.conv : to;\n\nptrdiff_t i = \"helloWorld\".lastIndexOfAny(\"Wlo\", 4);\nassert(i == 3);\n\ni = \"Foo öäöllo world\".lastIndexOfAny(\"öF\", 3);\nassert(i == 0);\n\n---\n",
				"name": "lastIndexOfAny"
			},
			{
				"kind": "template",
				"line": 1608,
				"constraint": "isSomeChar!Char && isSomeChar!Char2",
				"members": [
					{
						"kind": "function",
						"line": 1608,
						"endchar": 1,
						"char": 11,
						"type": "pure @safe ptrdiff_t(const(Char)[] haystack, const(Char2)[] needles, in CaseSensitive cs = CaseSensitive.yes)",
						"parameters": [
							{
								"type": "const(Char)[]",
								"name": "haystack"
							},
							{
								"type": "const(Char2)[]",
								"name": "needles"
							},
							{
								"storageClass": [
									"in"
								],
								"default": "CaseSensitive.yes",
								"type": "CaseSensitive",
								"name": "cs"
							}
						],
						"name": "indexOfNeither",
						"endline": 1614
					}
				],
				"char": 11,
				"parameters": [
					{
						"kind": "type",
						"name": "Char"
					},
					{
						"kind": "type",
						"name": "Char2"
					}
				],
				"comment": "    Returns the index of the first occurence of any character not an elements\n    in $(D needles) in $(D haystack). If all element of $(D haystack) are\n    element of $(D needles) $(D -1) is returned.\n\n    Params:\n    haystack = String to search for needles in.\n    needles = Strings to search for in haystack.\n        cs = Indicates whether the comparisons are case sensitive.\nExample:\n\n---\nassert(indexOfNeither(\"def\", \"a\") == 0);\nassert(indexOfNeither(\"def\", \"de\") == 2);\nassert(indexOfNeither(\"dfefffg\", \"dfe\") == 6);\n\n---\n",
				"name": "indexOfNeither"
			},
			{
				"kind": "template",
				"line": 1683,
				"constraint": "isSomeChar!Char && isSomeChar!Char2",
				"members": [
					{
						"kind": "function",
						"line": 1683,
						"endchar": 1,
						"char": 11,
						"type": "pure @safe ptrdiff_t(const(Char)[] haystack, const(Char2)[] needles, in size_t startIdx, in CaseSensitive cs = CaseSensitive.yes)",
						"parameters": [
							{
								"type": "const(Char)[]",
								"name": "haystack"
							},
							{
								"type": "const(Char2)[]",
								"name": "needles"
							},
							{
								"storageClass": [
									"in"
								],
								"type": "size_t",
								"name": "startIdx"
							},
							{
								"storageClass": [
									"in"
								],
								"default": "CaseSensitive.yes",
								"type": "CaseSensitive",
								"name": "cs"
							}
						],
						"name": "indexOfNeither",
						"endline": 1699
					}
				],
				"char": 11,
				"parameters": [
					{
						"kind": "type",
						"name": "Char"
					},
					{
						"kind": "type",
						"name": "Char2"
					}
				],
				"comment": "    Returns the index of the first occurence of any character not an elements\n    in $(D needles) in $(D haystack). If all element of $(D haystack) are\n    element of $(D needles) $(D -1) is returned.\n\n    Params:\n    haystack = String to search for needles in.\n    needles = Strings to search for in haystack.\n        startIdx = slices haystack like this $(D haystack[startIdx .. $]). If\n        the startIdx is greater equal the length of haystack the functions\n        returns $(D -1).\n        cs = Indicates whether the comparisons are case sensitive.\nExample:\n\n---\nassert(indexOfNeither(\"abba\", \"a\", 2) == 2);\nassert(indexOfNeither(\"def\", \"de\", 1) == 2);\nassert(indexOfNeither(\"dfefffg\", \"dfe\", 4) == 6);\n\n---\n",
				"name": "indexOfNeither"
			},
			{
				"kind": "template",
				"line": 1764,
				"constraint": "isSomeChar!Char && isSomeChar!Char2",
				"members": [
					{
						"kind": "function",
						"line": 1764,
						"endchar": 1,
						"char": 11,
						"type": "pure @safe ptrdiff_t(const(Char)[] haystack, const(Char2)[] needles, in CaseSensitive cs = CaseSensitive.yes)",
						"parameters": [
							{
								"type": "const(Char)[]",
								"name": "haystack"
							},
							{
								"type": "const(Char2)[]",
								"name": "needles"
							},
							{
								"storageClass": [
									"in"
								],
								"default": "CaseSensitive.yes",
								"type": "CaseSensitive",
								"name": "cs"
							}
						],
						"name": "lastIndexOfNeither",
						"endline": 1770
					}
				],
				"char": 11,
				"parameters": [
					{
						"kind": "type",
						"name": "Char"
					},
					{
						"kind": "type",
						"name": "Char2"
					}
				],
				"comment": "    Returns the last index of the first occurence of any character that is not\n    an elements in $(D needles) in $(D haystack). If all element of\n    $(D haystack) are element of $(D needles) $(D -1) is returned.\n\n    Params:\n    haystack = String to search for needles in.\n    needles = Strings to search for in haystack.\n        cs = Indicates whether the comparisons are case sensitive.\nExample:\n\n---\nassert(lastIndexOfNeither(\"abba\", \"a\") == 2);\nassert(lastIndexOfNeither(\"def\", \"f\") == 1);\n\n---\n",
				"name": "lastIndexOfNeither"
			},
			{
				"kind": "template",
				"line": 1839,
				"constraint": "isSomeChar!Char && isSomeChar!Char2",
				"members": [
					{
						"kind": "function",
						"line": 1839,
						"endchar": 1,
						"char": 11,
						"type": "pure @safe ptrdiff_t(const(Char)[] haystack, const(Char2)[] needles, in size_t stopIdx, in CaseSensitive cs = CaseSensitive.yes)",
						"parameters": [
							{
								"type": "const(Char)[]",
								"name": "haystack"
							},
							{
								"type": "const(Char2)[]",
								"name": "needles"
							},
							{
								"storageClass": [
									"in"
								],
								"type": "size_t",
								"name": "stopIdx"
							},
							{
								"storageClass": [
									"in"
								],
								"default": "CaseSensitive.yes",
								"type": "CaseSensitive",
								"name": "cs"
							}
						],
						"name": "lastIndexOfNeither",
						"endline": 1851
					}
				],
				"char": 11,
				"parameters": [
					{
						"kind": "type",
						"name": "Char"
					},
					{
						"kind": "type",
						"name": "Char2"
					}
				],
				"comment": "    Returns the last index of the first occurence of any character that is not\n    an elements in $(D needles) in $(D haystack). If all element of\n    $(D haystack) are element of $(D needles) $(D -1) is returned.\n\n    Params:\n    haystack = String to search for needles in.\n    needles = Strings to search for in haystack.\n        stopIdx = slices haystack like this $(D haystack[0 .. stopIdx]) If\n        the stopIdx is greater equal the length of haystack the functions\n        returns $(D -1).\n        cs = Indicates whether the comparisons are case sensitive.\nExample:\n\n---\nassert(lastIndexOfNeither(\"def\", \"rsa\", 3) == -1);\nassert(lastIndexOfNeither(\"abba\", \"a\", 2) == 1);\n\n---\n",
				"name": "lastIndexOfNeither"
			},
			{
				"kind": "template",
				"line": 1912,
				"constraint": "isSomeChar!Char",
				"members": [
					{
						"kind": "function",
						"line": 1912,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "pure nothrow @nogc @safe (Char[] s)",
						"parameters": [
							{
								"type": "Char[]",
								"name": "s"
							}
						],
						"name": "representation",
						"endline": 1917
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "Char"
					}
				],
				"comment": " Returns the representation of a string, which has the same type\n as the string except the character type is replaced by $(D ubyte),\n $(D ushort), or $(D uint) depending on the character width.\nExample:\n\n---\nstring s = \"hello\";\nstatic assert(is(typeof(representation(s)) == immutable(ubyte)[]));\nassert(representation(s) is cast(immutable(ubyte)[]) s);\nassert(representation(s) == [0x68, 0x65, 0x6c, 0x6c, 0x6f]);\n\n---\n",
				"name": "representation"
			},
			{
				"kind": "template",
				"line": 1963,
				"constraint": "isSomeString!S",
				"members": [
					{
						"kind": "function",
						"line": 1963,
						"endchar": 1,
						"char": 3,
						"type": "pure @trusted S(S s)",
						"parameters": [
							{
								"type": "S",
								"name": "s"
							}
						],
						"name": "capitalize",
						"endline": 1999
					}
				],
				"char": 3,
				"parameters": [
					{
						"kind": "type",
						"name": "S"
					}
				],
				"comment": "    Capitalize the first character of $(D s) and convert the rest of $(D s)\n    to lowercase.\n",
				"name": "capitalize"
			},
			{
				"kind": "alias",
				"line": 2064,
				"deco": "E3std8typecons45__T4FlagVAyaa14_6b6565705465726d696e61746f72Z4Flag",
				"char": 1,
				"name": "KeepTerminator",
				"comment": "    Split $(D s) into an array of lines according to the unicode standard using\n    $(D '\\r'), $(D '\\n'), $(D \"\\r\\n\"), $(XREF uni, lineSep),\n    $(XREF uni, paraSep), $(D U+0085) (NEL), $(D '\\v')  and $(D '\\f')\n    as delimiters. If $(D keepTerm) is set to $(D KeepTerminator.yes), then the\n    delimiter is included in the strings returned.\n\n    Does not throw on invalid UTF; such is simply passed unchanged\n    to the output.\n\n    Allocates memory; use $(LREF lineSplitter) for an alternative that\n    does not.\n\n    Adheres to $(WEB http://www.unicode.org/versions/Unicode7.0.0/ch05.pdf, Unicode 7.0).\n\n  Params:\n    s = a string of $(D chars), $(D wchars), or $(D dchars)\n    keepTerm = whether delimiter is included or not in the results\n  Returns:\n    array of strings, each element is a line that is a slice of $(D s)\n  See_Also:\n    $(LREF lineSplitter)\n    $(XREF algorithm, splitter)\n    $(XREF regex, splitter)\n"
			},
			{
				"kind": "template",
				"line": 2066,
				"constraint": "isSomeString!S",
				"members": [
					{
						"kind": "function",
						"line": 2066,
						"endchar": 1,
						"char": 5,
						"type": "pure @safe S[](S s, in KeepTerminator keepTerm = KeepTerminator.no)",
						"parameters": [
							{
								"type": "S",
								"name": "s"
							},
							{
								"storageClass": [
									"in"
								],
								"default": "KeepTerminator.no",
								"type": "KeepTerminator",
								"name": "keepTerm"
							}
						],
						"name": "splitLines",
						"endline": 2147
					}
				],
				"char": 5,
				"parameters": [
					{
						"kind": "type",
						"name": "S"
					}
				],
				"comment": "ditto\n",
				"name": "splitLines"
			},
			{
				"kind": "template",
				"line": 2240,
				"constraint": "hasSlicing!Range && hasLength!Range || isSomeString!Range",
				"members": [
					{
						"kind": "function",
						"line": 2240,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "(Range r)",
						"parameters": [
							{
								"type": "Range",
								"name": "r"
							}
						],
						"name": "lineSplitter",
						"endline": 2377
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "value",
						"defaultValue": "KeepTerminator.no",
						"deco": "E3std8typecons45__T4FlagVAyaa14_6b6565705465726d696e61746f72Z4Flag",
						"name": "keepTerm"
					},
					{
						"kind": "type",
						"name": "Range"
					}
				],
				"comment": "  Split an array or slicable range of characters into a range of lines\n    using $(D '\\r'), $(D '\\n'), $(D '\\v'), $(D '\\f'), $(D \"\\r\\n\"),\n    $(XREF uni, lineSep), $(XREF uni, paraSep) and $(D '\\u0085') (NEL)\n    as delimiters. If $(D keepTerm) is set to $(D KeepTerminator.yes), then the\n    delimiter is included in the slices returned.\n\n    Does not throw on invalid UTF; such is simply passed unchanged\n    to the output.\n\n    Adheres to $(WEB http://www.unicode.org/versions/Unicode7.0.0/ch05.pdf, Unicode 7.0).\n\n    Does not allocate memory.\n\n  Params:\n    r = array of $(D chars), $(D wchars), or $(D dchars) or a slicable range\n    keepTerm = whether delimiter is included or not in the results\n  Returns:\n    range of slices of the input range $(D r)\n\n  See_Also:\n    $(LREF splitLines)\n    $(XREF algorithm, splitter)\n    $(XREF regex, splitter)\nExample:\n\n---\nauto s = \"\\rpeter\\n\\rpaul\\r\\njerry\\u2028ice\\u2029cream\\n\\nsunday\\nmon\\u2030day\\n\";\nauto lines = s.lineSplitter();\nstatic immutable witness = [\"\", \"peter\", \"\", \"paul\", \"jerry\", \"ice\", \"cream\", \"\", \"sunday\", \"mon\\u2030day\"];\nuint i;\nforeach (line; lines)\n{\n    assert(line == witness[i++]);\n}\nassert(i == witness.length);\n\n---\n",
				"name": "lineSplitter"
			},
			{
				"kind": "template",
				"line": 2468,
				"constraint": "isSomeChar!C",
				"members": [
					{
						"kind": "function",
						"line": 2468,
						"endchar": 1,
						"char": 5,
						"type": "pure @nogc @safe C[](C[] str)",
						"parameters": [
							{
								"type": "C[]",
								"name": "str"
							}
						],
						"name": "stripLeft",
						"endline": 2478
					}
				],
				"char": 5,
				"parameters": [
					{
						"kind": "type",
						"name": "C"
					}
				],
				"comment": "    Strips leading whitespace (as defined by $(XREF uni, isWhite)).\n\n    Returns: $(D str) stripped of leading whitespace.\n\n    Postconditions: $(D str) and the returned value\n    will share the same tail (see $(XREF array, sameTail)).\nExample:\n\n---\nimport std.uni : lineSep, paraSep;\nassert(stripLeft(\"     hello world     \") ==\n       \"hello world     \");\nassert(stripLeft(\"\\n\\t\\v\\rhello world\\n\\t\\v\\r\") ==\n       \"hello world\\n\\t\\v\\r\");\nassert(stripLeft(\"hello world\") ==\n       \"hello world\");\nassert(stripLeft([lineSep] ~ \"hello world\" ~ lineSep) ==\n       \"hello world\" ~ [lineSep]);\nassert(stripLeft([paraSep] ~ \"hello world\" ~ paraSep) ==\n       \"hello world\" ~ [paraSep]);\n\n---\n",
				"name": "stripLeft"
			},
			{
				"kind": "template",
				"line": 2505,
				"constraint": "isSomeChar!C",
				"members": [
					{
						"kind": "function",
						"line": 2505,
						"endchar": 1,
						"char": 5,
						"type": "pure @nogc @safe C[](C[] str)",
						"parameters": [
							{
								"type": "C[]",
								"name": "str"
							}
						],
						"name": "stripRight",
						"endline": 2516
					}
				],
				"char": 5,
				"parameters": [
					{
						"kind": "type",
						"name": "C"
					}
				],
				"comment": "    Strips trailing whitespace (as defined by $(XREF uni, isWhite)).\n\n    Returns: $(D str) stripped of trailing whitespace.\n\n    Postconditions: $(D str) and the returned value\n    will share the same head (see $(XREF array, sameHead)).\nExample:\n\n---\nimport std.uni : lineSep, paraSep;\nassert(stripRight(\"     hello world     \") ==\n       \"     hello world\");\nassert(stripRight(\"\\n\\t\\v\\rhello world\\n\\t\\v\\r\") ==\n       \"\\n\\t\\v\\rhello world\");\nassert(stripRight(\"hello world\") ==\n       \"hello world\");\nassert(stripRight([lineSep] ~ \"hello world\" ~ lineSep) ==\n       [lineSep] ~ \"hello world\");\nassert(stripRight([paraSep] ~ \"hello world\" ~ paraSep) ==\n       [paraSep] ~ \"hello world\");\n\n---\n",
				"name": "stripRight"
			},
			{
				"kind": "template",
				"line": 2541,
				"constraint": "isSomeChar!C",
				"members": [
					{
						"kind": "function",
						"line": 2541,
						"endchar": 1,
						"char": 5,
						"type": "pure @safe C[](C[] str)",
						"parameters": [
							{
								"type": "C[]",
								"name": "str"
							}
						],
						"name": "strip",
						"endline": 2545
					}
				],
				"char": 5,
				"parameters": [
					{
						"kind": "type",
						"name": "C"
					}
				],
				"comment": "    Strips both leading and trailing whitespace (as defined by\n    $(XREF uni, isWhite)).\n\n    Returns: $(D str) stripped of trailing whitespace.\nExample:\n\n---\nimport std.uni : lineSep, paraSep;\nassert(strip(\"     hello world     \") ==\n       \"hello world\");\nassert(strip(\"\\n\\t\\v\\rhello world\\n\\t\\v\\r\") ==\n       \"hello world\");\nassert(strip(\"hello world\") ==\n       \"hello world\");\nassert(strip([lineSep] ~ \"hello world\" ~ [lineSep]) ==\n       \"hello world\");\nassert(strip([paraSep] ~ \"hello world\" ~ [paraSep]) ==\n       \"hello world\");\n\n---\n",
				"name": "strip"
			},
			{
				"kind": "template",
				"line": 2630,
				"constraint": "isRandomAccessRange!Range && isSomeChar!(ElementEncodingType!Range) || isSomeString!Range",
				"members": [
					{
						"kind": "function",
						"line": 2630,
						"endchar": 1,
						"char": 7,
						"type": "Range(Range str)",
						"parameters": [
							{
								"type": "Range",
								"name": "str"
							}
						],
						"name": "chomp",
						"endline": 2682
					}
				],
				"char": 7,
				"parameters": [
					{
						"kind": "type",
						"name": "Range"
					}
				],
				"comment": "    If $(D str) ends with $(D delimiter), then $(D str) is returned without\n    $(D delimiter) on its end. If it $(D str) does $(I not) end with\n    $(D delimiter), then it is returned unchanged.\n\n    If no $(D delimiter) is given, then one trailing  $(D '\\r'), $(D '\\n'),\n    $(D \"\\r\\n\"), $(D '\\f'), $(D '\\v'), $(XREF uni, lineSep), $(XREF uni, paraSep), or $(XREF uni, nelSep)\n    is removed from the end of $(D str). If $(D str) does not end with any of those characters,\n    then it is returned unchanged.\n\n    Params:\n        str = string or indexable range of characters\n        delimiter = string of characters to be sliced off end of str[]\n\n    Returns:\n        slice of str\nExample:\n\n---\nimport std.utf : decode;\nimport std.uni : lineSep, paraSep, nelSep;\nassert(chomp(\" hello world  \\n\\r\") == \" hello world  \\n\");\nassert(chomp(\" hello world  \\r\\n\") == \" hello world  \");\nassert(chomp(\" hello world  \\f\") == \" hello world  \");\nassert(chomp(\" hello world  \\v\") == \" hello world  \");\nassert(chomp(\" hello world  \\n\\n\") == \" hello world  \\n\");\nassert(chomp(\" hello world  \\n\\n \") == \" hello world  \\n\\n \");\nassert(chomp(\" hello world  \\n\\n\" ~ [lineSep]) == \" hello world  \\n\\n\");\nassert(chomp(\" hello world  \\n\\n\" ~ [paraSep]) == \" hello world  \\n\\n\");\nassert(chomp(\" hello world  \\n\\n\" ~ [ nelSep]) == \" hello world  \\n\\n\");\nassert(chomp(\" hello world\") == \" hello world\");\nassert(chomp(\"\") == \"\");\n\nassert(chomp(\" hello world\", \"orld\") == \" hello w\");\nassert(chomp(\" hello world\", \" he\") == \" hello world\");\nassert(chomp(\"\", \"hello\") == \"\");\n\n// Don't decode pointlessly\nassert(chomp(\"hello\\xFE\", \"\\r\") == \"hello\\xFE\");\n\n---\n",
				"name": "chomp"
			},
			{
				"kind": "template",
				"line": 2685,
				"constraint": "(isRandomAccessRange!Range && isSomeChar!(ElementEncodingType!Range) || isSomeString!Range) && isSomeChar!C2",
				"members": [
					{
						"kind": "function",
						"line": 2685,
						"endchar": 1,
						"char": 7,
						"type": "Range(Range str, const(C2)[] delimiter)",
						"parameters": [
							{
								"type": "Range",
								"name": "str"
							},
							{
								"type": "const(C2)[]",
								"name": "delimiter"
							}
						],
						"name": "chomp",
						"endline": 2721
					}
				],
				"char": 7,
				"parameters": [
					{
						"kind": "type",
						"name": "Range"
					},
					{
						"kind": "type",
						"name": "C2"
					}
				],
				"comment": "Ditto\n",
				"name": "chomp"
			},
			{
				"kind": "template",
				"line": 2810,
				"constraint": "isSomeChar!C1 && isSomeChar!C2",
				"members": [
					{
						"kind": "function",
						"line": 2810,
						"endchar": 1,
						"char": 6,
						"type": "pure @safe C1[](C1[] str, C2[] delimiter)",
						"parameters": [
							{
								"type": "C1[]",
								"name": "str"
							},
							{
								"type": "C2[]",
								"name": "delimiter"
							}
						],
						"name": "chompPrefix",
						"endline": 2835
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "C1"
					},
					{
						"kind": "type",
						"name": "C2"
					}
				],
				"comment": "    If $(D str) starts with $(D delimiter), then the part of $(D str) following\n    $(D delimiter) is returned. If it $(D str) does $(I not) start with\n    $(D delimiter), then it is returned unchanged.\nExample:\n\n---\nassert(chompPrefix(\"hello world\", \"he\") == \"llo world\");\nassert(chompPrefix(\"hello world\", \"hello w\") == \"orld\");\nassert(chompPrefix(\"hello world\", \" world\") == \"hello world\");\nassert(chompPrefix(\"\", \"hello\") == \"\");\n\n---\n",
				"name": "chompPrefix"
			},
			{
				"kind": "template",
				"line": 2873,
				"constraint": "isSomeString!S",
				"members": [
					{
						"kind": "function",
						"line": 2873,
						"endchar": 1,
						"char": 3,
						"type": "pure @safe S(S str)",
						"parameters": [
							{
								"type": "S",
								"name": "str"
							}
						],
						"name": "chop",
						"endline": 2885
					}
				],
				"char": 3,
				"parameters": [
					{
						"kind": "type",
						"name": "S"
					}
				],
				"comment": "    Returns $(D str) without its last character, if there is one. If $(D str)\n    ends with $(D \"\\r\\n\"), then both are removed. If $(D str) is empty, then\n    then it is returned unchanged.\nExample:\n\n---\nassert(chop(\"hello world\") == \"hello worl\");\nassert(chop(\"hello world\\n\") == \"hello world\");\nassert(chop(\"hello world\\r\") == \"hello world\");\nassert(chop(\"hello world\\n\\r\") == \"hello world\\n\");\nassert(chop(\"hello world\\r\\n\") == \"hello world\");\nassert(chop(\"Walter Bright\") == \"Walter Brigh\");\nassert(chop(\"\") == \"\");\n\n---\n",
				"name": "chop"
			},
			{
				"kind": "template",
				"line": 2928,
				"constraint": "isSomeString!S",
				"members": [
					{
						"kind": "function",
						"line": 2928,
						"endchar": 1,
						"char": 3,
						"type": "pure @trusted S(S s, size_t width, dchar fillChar = ' ')",
						"parameters": [
							{
								"type": "S",
								"name": "s"
							},
							{
								"type": "size_t",
								"name": "width"
							},
							{
								"deco": "w",
								"default": "' '",
								"name": "fillChar"
							}
						],
						"name": "leftJustify",
						"endline": 2958
					}
				],
				"char": 3,
				"parameters": [
					{
						"kind": "type",
						"name": "S"
					}
				],
				"comment": "    Left justify $(D s) in a field $(D width) characters wide. $(D fillChar)\n    is the character that will be used to fill up the space in the field that\n    $(D s) doesn't fill.\n",
				"name": "leftJustify"
			},
			{
				"kind": "template",
				"line": 2966,
				"constraint": "isSomeString!S",
				"members": [
					{
						"kind": "function",
						"line": 2966,
						"endchar": 1,
						"char": 3,
						"type": "pure @trusted S(S s, size_t width, dchar fillChar = ' ')",
						"parameters": [
							{
								"type": "S",
								"name": "s"
							},
							{
								"type": "size_t",
								"name": "width"
							},
							{
								"deco": "w",
								"default": "' '",
								"name": "fillChar"
							}
						],
						"name": "rightJustify",
						"endline": 2996
					}
				],
				"char": 3,
				"parameters": [
					{
						"kind": "type",
						"name": "S"
					}
				],
				"comment": "    Right justify $(D s) in a field $(D width) characters wide. $(D fillChar)\n    is the character that will be used to fill up the space in the field that\n    $(D s) doesn't fill.\n",
				"name": "rightJustify"
			},
			{
				"kind": "template",
				"line": 3004,
				"constraint": "isSomeString!S",
				"members": [
					{
						"kind": "function",
						"line": 3004,
						"endchar": 1,
						"char": 3,
						"type": "pure @trusted S(S s, size_t width, dchar fillChar = ' ')",
						"parameters": [
							{
								"type": "S",
								"name": "s"
							},
							{
								"type": "size_t",
								"name": "width"
							},
							{
								"deco": "w",
								"default": "' '",
								"name": "fillChar"
							}
						],
						"name": "center",
						"endline": 3038
					}
				],
				"char": 3,
				"parameters": [
					{
						"kind": "type",
						"name": "S"
					}
				],
				"comment": "    Center $(D s) in a field $(D width) characters wide. $(D fillChar)\n    is the character that will be used to fill up the space in the field that\n    $(D s) doesn't fill.\n",
				"name": "center"
			},
			{
				"kind": "template",
				"line": 3082,
				"constraint": "isSomeString!S",
				"members": [
					{
						"kind": "function",
						"line": 3082,
						"endchar": 1,
						"char": 3,
						"type": "pure @trusted S(S s, size_t tabSize = 8)",
						"parameters": [
							{
								"type": "S",
								"name": "s"
							},
							{
								"default": "8",
								"type": "size_t",
								"name": "tabSize"
							}
						],
						"name": "detab",
						"endline": 3138
					}
				],
				"char": 3,
				"parameters": [
					{
						"kind": "type",
						"name": "S"
					}
				],
				"comment": "    Replace each tab character in $(D s) with the number of spaces necessary\n    to align the following character at the next tab stop where $(D tabSize)\n    is the distance between tab stops.\n",
				"name": "detab"
			},
			{
				"kind": "template",
				"line": 3175,
				"constraint": "isSomeString!S",
				"members": [
					{
						"kind": "function",
						"line": 3175,
						"endchar": 1,
						"char": 3,
						"type": "pure @trusted S(S s, size_t tabSize = 8)",
						"parameters": [
							{
								"type": "S",
								"name": "s"
							},
							{
								"default": "8",
								"type": "size_t",
								"name": "tabSize"
							}
						],
						"name": "entab",
						"endline": 3273
					}
				],
				"char": 3,
				"parameters": [
					{
						"kind": "type",
						"name": "S"
					}
				],
				"comment": "    Replaces spaces in $(D s) with the optimal number of tabs.\n    All spaces and tabs at the end of a line are removed.\n\n    Params:\n        s       = String to convert.\n        tabSize = Tab columns are $(D tabSize) spaces apart.\n",
				"name": "entab"
			},
			{
				"kind": "template",
				"line": 3336,
				"constraint": "isSomeChar!C1 && isSomeChar!C2",
				"members": [
					{
						"kind": "function",
						"line": 3336,
						"endchar": 1,
						"char": 6,
						"type": "pure @safe C1[](C1[] str, in dchar[dchar] transTable, const(C2)[] toRemove = null)",
						"parameters": [
							{
								"type": "C1[]",
								"name": "str"
							},
							{
								"storageClass": [
									"in"
								],
								"type": "dchar[dchar]",
								"name": "transTable"
							},
							{
								"default": "null",
								"type": "const(C2)[]",
								"name": "toRemove"
							}
						],
						"name": "translate",
						"endline": 3345
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "C1"
					},
					{
						"kind": "type",
						"defaultDeco": "ya",
						"name": "C2"
					}
				],
				"comment": "    Replaces the characters in $(D str) which are keys in $(D transTable) with\n    their corresponding values in $(D transTable). $(D transTable) is an AA\n    where its keys are $(D dchar) and its values are either $(D dchar) or some\n    type of string. Also, if $(D toRemove) is given, the characters in it are\n    removed from $(D str) prior to translation. $(D str) itself is unaltered.\n    A copy with the changes is returned.\n\n    See_Also:\n        $(LREF tr)\n        $(XREF array, replace)\n\n    Params:\n        str        = The original string.\n        transTable = The AA indicating which characters to replace and what to\n                     replace them with.\n        toRemove   = The characters to remove from the string.\nExample:\n\n---\ndchar[dchar] transTable1 = ['e' : '5', 'o' : '7', '5': 'q'];\nassert(translate(\"hello world\", transTable1) == \"h5ll7 w7rld\");\n\nassert(translate(\"hello world\", transTable1, \"low\") == \"h5 rd\");\n\nstring[dchar] transTable2 = ['e' : \"5\", 'o' : \"orange\"];\nassert(translate(\"hello world\", transTable2) == \"h5llorange worangerld\");\n\n---\n",
				"name": "translate"
			},
			{
				"kind": "template",
				"line": 3416,
				"constraint": "isSomeChar!C1 && isSomeString!S && isSomeChar!C2",
				"members": [
					{
						"kind": "function",
						"line": 3416,
						"endchar": 1,
						"char": 6,
						"type": "pure @safe C1[](C1[] str, in S[dchar] transTable, const(C2)[] toRemove = null)",
						"parameters": [
							{
								"type": "C1[]",
								"name": "str"
							},
							{
								"storageClass": [
									"in"
								],
								"type": "S[dchar]",
								"name": "transTable"
							},
							{
								"default": "null",
								"type": "const(C2)[]",
								"name": "toRemove"
							}
						],
						"name": "translate",
						"endline": 3425
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "C1"
					},
					{
						"kind": "type",
						"name": "S"
					},
					{
						"kind": "type",
						"defaultDeco": "ya",
						"name": "C2"
					}
				],
				"comment": " Ditto\n",
				"name": "translate"
			},
			{
				"kind": "template",
				"line": 3491,
				"constraint": "isSomeChar!C1 && isSomeChar!C2 && isOutputRange!(Buffer, C1)",
				"members": [
					{
						"kind": "function",
						"line": 3491,
						"endchar": 1,
						"char": 6,
						"type": "void(C1[] str, in dchar[dchar] transTable, const(C2)[] toRemove, Buffer buffer)",
						"parameters": [
							{
								"type": "C1[]",
								"name": "str"
							},
							{
								"storageClass": [
									"in"
								],
								"type": "dchar[dchar]",
								"name": "transTable"
							},
							{
								"type": "const(C2)[]",
								"name": "toRemove"
							},
							{
								"type": "Buffer",
								"name": "buffer"
							}
						],
						"name": "translate",
						"endline": 3498
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "C1"
					},
					{
						"kind": "type",
						"defaultDeco": "ya",
						"name": "C2"
					},
					{
						"kind": "type",
						"name": "Buffer"
					}
				],
				"comment": "    This is an overload of $(D translate) which takes an existing buffer to write the contents to.\n\n    Params:\n        str        = The original string.\n        transTable = The AA indicating which characters to replace and what to\n                     replace them with.\n        toRemove   = The characters to remove from the string.\n        buffer     = An output range to write the contents to.\nExample:\n\n---\nimport std.array : appender;\ndchar[dchar] transTable1 = ['e' : '5', 'o' : '7', '5': 'q'];\nauto buffer = appender!(dchar[])();\ntranslate(\"hello world\", transTable1, null, buffer);\nassert(buffer.data == \"h5ll7 w7rld\");\n\nbuffer.clear();\ntranslate(\"hello world\", transTable1, \"low\", buffer);\nassert(buffer.data == \"h5 rd\");\n\nbuffer.clear();\nstring[dchar] transTable2 = ['e' : \"5\", 'o' : \"orange\"];\ntranslate(\"hello world\", transTable2, null, buffer);\nassert(buffer.data == \"h5llorange worangerld\");\n\n---\n",
				"name": "translate"
			},
			{
				"kind": "template",
				"line": 3538,
				"constraint": "isSomeChar!C1 && isSomeString!S && isSomeChar!C2 && isOutputRange!(Buffer, S)",
				"members": [
					{
						"kind": "function",
						"line": 3538,
						"endchar": 1,
						"char": 6,
						"type": "void(C1[] str, in S[dchar] transTable, const(C2)[] toRemove, Buffer buffer)",
						"parameters": [
							{
								"type": "C1[]",
								"name": "str"
							},
							{
								"storageClass": [
									"in"
								],
								"type": "S[dchar]",
								"name": "transTable"
							},
							{
								"type": "const(C2)[]",
								"name": "toRemove"
							},
							{
								"type": "Buffer",
								"name": "buffer"
							}
						],
						"name": "translate",
						"endline": 3545
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "C1"
					},
					{
						"kind": "type",
						"name": "S"
					},
					{
						"kind": "type",
						"defaultDeco": "ya",
						"name": "C2"
					},
					{
						"kind": "type",
						"name": "Buffer"
					}
				],
				"comment": " Ditto\n",
				"name": "translate"
			},
			{
				"kind": "template",
				"line": 3604,
				"constraint": "is(Unqual!C == char)",
				"members": [
					{
						"kind": "function",
						"line": 3604,
						"endchar": 1,
						"char": 5,
						"type": "pure nothrow @trusted C[](in char[] str, in char[] transTable, in char[] toRemove = null)",
						"parameters": [
							{
								"storageClass": [
									"in"
								],
								"type": "char[]",
								"name": "str"
							},
							{
								"storageClass": [
									"in"
								],
								"type": "char[]",
								"name": "transTable"
							},
							{
								"storageClass": [
									"in"
								],
								"default": "null",
								"type": "char[]",
								"name": "toRemove"
							}
						],
						"name": "translate",
						"endline": 3627
					}
				],
				"char": 5,
				"parameters": [
					{
						"kind": "type",
						"defaultDeco": "ya",
						"name": "C"
					}
				],
				"comment": "    This is an $(I $(RED ASCII-only)) overload of $(LREF _translate). It\n    will $(I not) work with Unicode. It exists as an optimization for the\n    cases where Unicode processing is not necessary.\n\n    Unlike the other overloads of $(LREF _translate), this one does not take\n    an AA. Rather, it takes a $(D string) generated by $(LREF makeTrans).\n\n    The array generated by $(D makeTrans) is $(D 256) elements long such that\n    the index is equal to the ASCII character being replaced and the value is\n    equal to the character that it's being replaced with. Note that translate\n    does not decode any of the characters, so you can actually pass it Extended\n    ASCII characters if you want to (ASCII only actually uses $(D 128)\n    characters), but be warned that Extended ASCII characters are not valid\n    Unicode and therefore will result in a $(D UTFException) being thrown from\n    most other Phobos functions.\n\n    Also, because no decoding occurs, it is possible to use this overload to\n    translate ASCII characters within a proper UTF-8 string without altering the\n    other, non-ASCII characters. It's replacing any code unit greater than\n    $(D 127) with another code unit or replacing any code unit with another code\n    unit greater than $(D 127) which will cause UTF validation issues.\n\n    See_Also:\n        $(LREF tr)\n        $(XREF array, replace)\n\n    Params:\n        str        = The original string.\n        transTable = The string indicating which characters to replace and what\n                     to replace them with. It is generated by $(LREF makeTrans).\n        toRemove   = The characters to remove from the string.\nExample:\n\n---\nauto transTable1 = makeTrans(\"eo5\", \"57q\");\nassert(translate(\"hello world\", transTable1) == \"h5ll7 w7rld\");\n\nassert(translate(\"hello world\", transTable1, \"low\") == \"h5 rd\");\n\n---\n",
				"name": "translate"
			},
			{
				"kind": "function",
				"line": 3631,
				"deco": "FNaNbNexAaxAaZAya",
				"endchar": 1,
				"char": 8,
				"parameters": [
					{
						"deco": "xAa",
						"name": "from"
					},
					{
						"deco": "xAa",
						"name": "to"
					}
				],
				"name": "makeTrans",
				"comment": " Ditto\n",
				"originalType": "pure nothrow @trusted string(in char[] from, in char[] to)",
				"endline": 3654
			},
			{
				"kind": "template",
				"line": 3717,
				"constraint": "is(Unqual!C == char) && isOutputRange!(Buffer, char)",
				"members": [
					{
						"kind": "function",
						"line": 3717,
						"endchar": 1,
						"char": 6,
						"type": "pure @trusted void(in char[] str, in char[] transTable, in char[] toRemove, Buffer buffer)",
						"parameters": [
							{
								"storageClass": [
									"in"
								],
								"type": "char[]",
								"name": "str"
							},
							{
								"storageClass": [
									"in"
								],
								"type": "char[]",
								"name": "transTable"
							},
							{
								"storageClass": [
									"in"
								],
								"type": "char[]",
								"name": "toRemove"
							},
							{
								"type": "Buffer",
								"name": "buffer"
							}
						],
						"name": "translate",
						"endline": 3732
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"defaultDeco": "ya",
						"name": "C"
					},
					{
						"kind": "type",
						"name": "Buffer"
					}
				],
				"comment": "    This is an $(I $(RED ASCII-only)) overload of $(D translate) which takes an existing buffer to write the contents to.\n\n    Params:\n        str        = The original string.\n        transTable = The string indicating which characters to replace and what\n                     to replace them with. It is generated by $(LREF makeTrans).\n        toRemove   = The characters to remove from the string.\n        buffer     = An output range to write the contents to.\nExample:\n\n---\nimport std.array : appender;\nauto buffer = appender!(char[])();\nauto transTable1 = makeTrans(\"eo5\", \"57q\");\ntranslate(\"hello world\", transTable1, null, buffer);\nassert(buffer.data == \"h5ll7 w7rld\");\n\nbuffer.clear();\ntranslate(\"hello world\", transTable1, \"low\", buffer);\nassert(buffer.data == \"h5 rd\");\n\n---\n",
				"name": "translate"
			},
			{
				"kind": "template",
				"line": 3790,
				"constraint": "isSomeString!S",
				"members": [
					{
						"kind": "function",
						"line": 3790,
						"endchar": 1,
						"char": 6,
						"type": "pure @nogc @safe bool(dchar c, in S pattern)",
						"parameters": [
							{
								"deco": "w",
								"name": "c"
							},
							{
								"storageClass": [
									"in"
								],
								"type": "S",
								"name": "pattern"
							}
						],
						"name": "inPattern",
						"endline": 3820
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "S"
					}
				],
				"comment": " See if character c is in the pattern.\n Patterns:\n\n  A <i>pattern</i> is an array of characters much like a <i>character\n  class</i> in regular expressions. A sequence of characters\n  can be given, such as \"abcde\". The '-' can represent a range\n  of characters, as \"a-e\" represents the same pattern as \"abcde\".\n  \"a-fA-F0-9\" represents all the hex characters.\n  If the first character of a pattern is '^', then the pattern\n  is negated, i.e. \"^0-9\" means any character except a digit.\n  The functions inPattern, <b>countchars</b>, <b>removeschars</b>,\n  and <b>squeeze</b>\n  use patterns.\n\n Note: In the future, the pattern syntax may be improved\n  to be more like regular expression character classes.\n",
				"name": "inPattern"
			},
			{
				"kind": "template",
				"line": 3859,
				"constraint": "isSomeString!S",
				"members": [
					{
						"kind": "function",
						"line": 3859,
						"endchar": 1,
						"char": 6,
						"type": "pure @nogc @safe bool(dchar c, S[] patterns)",
						"parameters": [
							{
								"deco": "w",
								"name": "c"
							},
							{
								"type": "S[]",
								"name": "patterns"
							}
						],
						"name": "inPattern",
						"endline": 3869
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "S"
					}
				],
				"comment": " See if character c is in the intersection of the patterns.\n",
				"name": "inPattern"
			},
			{
				"kind": "template",
				"line": 3876,
				"constraint": "isSomeString!S && isSomeString!S1",
				"members": [
					{
						"kind": "function",
						"line": 3876,
						"endchar": 1,
						"char": 8,
						"type": "pure @nogc @safe size_t(S s, in S1 pattern)",
						"parameters": [
							{
								"type": "S",
								"name": "s"
							},
							{
								"storageClass": [
									"in"
								],
								"type": "S1",
								"name": "pattern"
							}
						],
						"name": "countchars",
						"endline": 3884
					}
				],
				"char": 8,
				"parameters": [
					{
						"kind": "type",
						"name": "S"
					},
					{
						"kind": "type",
						"name": "S1"
					}
				],
				"comment": " Count characters in s that match pattern.\n",
				"name": "countchars"
			},
			{
				"kind": "template",
				"line": 3905,
				"constraint": "isSomeString!S",
				"members": [
					{
						"kind": "function",
						"line": 3905,
						"endchar": 1,
						"char": 3,
						"type": "pure @safe S(S s, in S pattern)",
						"parameters": [
							{
								"type": "S",
								"name": "s"
							},
							{
								"storageClass": [
									"in"
								],
								"type": "S",
								"name": "pattern"
							}
						],
						"name": "removechars",
						"endline": 3932
					}
				],
				"char": 3,
				"parameters": [
					{
						"kind": "type",
						"name": "S"
					}
				],
				"comment": " Return string that is s with all characters removed that match pattern.\n",
				"name": "removechars"
			},
			{
				"kind": "template",
				"line": 3957,
				"members": [
					{
						"kind": "function",
						"line": 3957,
						"endchar": 1,
						"char": 3,
						"type": "S(S s, in S pattern = null)",
						"parameters": [
							{
								"type": "S",
								"name": "s"
							},
							{
								"storageClass": [
									"in"
								],
								"default": "null",
								"type": "S",
								"name": "pattern"
							}
						],
						"name": "squeeze",
						"endline": 3998
					}
				],
				"char": 3,
				"parameters": [
					{
						"kind": "type",
						"name": "S"
					}
				],
				"comment": " Return string where sequences of a character in s[] from pattern[]\n are replaced with a single instance of that character.\n If pattern is null, it defaults to all characters.\n",
				"name": "squeeze"
			},
			{
				"kind": "template",
				"line": 4034,
				"members": [
					{
						"kind": "function",
						"line": 4034,
						"endchar": 1,
						"char": 4,
						"type": "pure @nogc @safe S1(ref S1 s, S2 pattern)",
						"parameters": [
							{
								"storageClass": [
									"ref"
								],
								"type": "S1",
								"name": "s"
							},
							{
								"type": "S2",
								"name": "pattern"
							}
						],
						"name": "munch",
						"endline": 4047
					}
				],
				"char": 4,
				"parameters": [
					{
						"kind": "type",
						"name": "S1"
					},
					{
						"kind": "type",
						"name": "S2"
					}
				],
				"comment": " Finds the position $(D_PARAM pos) of the first character in $(D_PARAM\n s) that does not match $(D_PARAM pattern) (in the terminology used by\n $(LINK2 std_string.html,inPattern)). Updates $(D_PARAM s =\n s[pos..$]). Returns the slice from the beginning of the original\n (before update) string up to, and excluding, $(D_PARAM pos).\n\nThe $(D_PARAM munch) function is mostly convenient for skipping\ncertain category of characters (e.g. whitespace) when parsing\nstrings. (In such cases, the return value is not used.)\nExample:\n\n---\nstring s = \"123abc\";\nstring t = munch(s, \"0123456789\");\nassert(t == \"123\" && s == \"abc\");\nt = munch(s, \"0123456789\");\nassert(t == \"\" && s == \"abc\");\n\n---\n",
				"name": "munch"
			},
			{
				"kind": "template",
				"line": 4078,
				"constraint": "isSomeString!S",
				"members": [
					{
						"kind": "function",
						"line": 4078,
						"endchar": 1,
						"char": 3,
						"type": "pure @safe S(S s)",
						"parameters": [
							{
								"type": "S",
								"name": "s"
							}
						],
						"name": "succ",
						"endline": 4122
					}
				],
				"char": 3,
				"parameters": [
					{
						"kind": "type",
						"name": "S"
					}
				],
				"comment": " Return string that is the 'successor' to s[].\n If the rightmost character is a-zA-Z0-9, it is incremented within\n its case or digits. If it generates a carry, the process is\n repeated with the one to its immediate left.\nExample:\n\n---\nassert(succ(\"1\") == \"2\");\nassert(succ(\"9\") == \"10\");\nassert(succ(\"999\") == \"1000\");\nassert(succ(\"zz99\") == \"aaa00\");\n\n---\n",
				"name": "succ"
			},
			{
				"kind": "template",
				"line": 4191,
				"members": [
					{
						"kind": "function",
						"line": 4191,
						"endchar": 1,
						"char": 6,
						"type": "C1[](C1[] str, const(C2)[] from, const(C3)[] to, const(C4)[] modifiers = null)",
						"parameters": [
							{
								"type": "C1[]",
								"name": "str"
							},
							{
								"type": "const(C2)[]",
								"name": "from"
							},
							{
								"type": "const(C3)[]",
								"name": "to"
							},
							{
								"default": "null",
								"type": "const(C4)[]",
								"name": "modifiers"
							}
						],
						"name": "tr",
						"endline": 4303
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "C1"
					},
					{
						"kind": "type",
						"name": "C2"
					},
					{
						"kind": "type",
						"name": "C3"
					},
					{
						"kind": "type",
						"defaultDeco": "ya",
						"name": "C4"
					}
				],
				"comment": "    Replaces the characters in $(D str) which are in $(D from) with the\n    the corresponding characters in $(D to) and returns the resulting string.\n\n    $(D tr) is based on\n    $(WEB pubs.opengroup.org/onlinepubs/9699919799/utilities/_tr.html, Posix's tr),\n    though it doesn't do everything that the Posix utility does.\n\n    Params:\n        str       = The original string.\n        from      = The characters to replace.\n        to        = The characters to replace with.\n        modifiers = String containing modifiers.\n\n    Modifiers:\n        $(BOOKTABLE,\n        $(TR $(TD Modifier) $(TD Description))\n        $(TR $(TD $(D 'c')) $(TD Complement the list of characters in $(D from)))\n        $(TR $(TD $(D 'd')) $(TD Removes matching characters with no corresponding\n                              replacement in $(D to)))\n        $(TR $(TD $(D 's')) $(TD Removes adjacent duplicates in the replaced\n                              characters))\n        )\n\n    If the modifier $(D 'd') is present, then the number of characters in\n    $(D to) may be only $(D 0) or $(D 1).\n\n    If the modifier $(D 'd') is $(I not) present, and $(D to) is empty, then\n    $(D to) is taken to be the same as $(D from).\n\n    If the modifier $(D 'd') is $(I not) present, and $(D to) is shorter than\n    $(D from), then $(D to) is extended by replicating the last character in\n    $(D to).\n\n    Both $(D from) and $(D to) may contain ranges using the $(D '-') character\n    (e.g. $(D \"a-d\") is synonymous with $(D \"abcd\").) Neither accept a leading\n    $(D '^') as meaning the complement of the string (use the $(D 'c') modifier\n    for that).\n",
				"name": "tr"
			},
			{
				"kind": "function",
				"line": 4398,
				"deco": "FNaNfAxaxbZb",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "Axa",
						"name": "s"
					},
					{
						"deco": "xb",
						"default": "false",
						"name": "bAllowSep"
					}
				],
				"name": "isNumeric",
				"comment": " [in] string s can be formatted in the following ways:\n\n Integer Whole Number:\n (for byte, ubyte, short, ushort, int, uint, long, and ulong)\n ['+'|'-']digit(s)[U|L|UL]\n\n examples: 123, 123UL, 123L, +123U, -123L\n\n Floating-Point Number:\n (for float, double, real, ifloat, idouble, and ireal)\n ['+'|'-']digit(s)[.][digit(s)][[e-|e+]digit(s)][i|f|L|Li|fi]]\n      or [nan|nani|inf|-inf]\n\n examples: +123., -123.01, 123.3e-10f, 123.3e-10fi, 123.3e-10L\n\n (for cfloat, cdouble, and creal)\n ['+'|'-']digit(s)[.][digit(s)][[e-|e+]digit(s)][+]\n         [digit(s)[.][digit(s)][[e-|e+]digit(s)][i|f|L|Li|fi]]\n      or [nan|nani|nan+nani|inf|-inf]\n\n examples: nan, -123e-1+456.9e-10Li, +123e+10+456i, 123+456\n\n [in] bool bAllowSep\n False by default, but when set to true it will accept the\n separator characters $(D ',') and $(D '__') within the string, but these\n characters should be stripped from the string before using any\n of the conversion functions like toInt(), toFloat(), and etc\n else an error will occur.\n\n Also please note, that no spaces are allowed within the string\n anywhere whether it's a leading, trailing, or embedded space(s),\n thus they too must be stripped from the string before using this\n function, or any of the conversion functions.\n",
				"originalType": "pure @safe bool(const(char)[] s, in bool bAllowSep = false)",
				"endline": 4505
			},
			{
				"kind": "template",
				"line": 4606,
				"constraint": "isInputRange!Range && isSomeChar!(ElementEncodingType!Range)",
				"members": [
					{
						"kind": "function",
						"line": 4606,
						"endchar": 1,
						"char": 9,
						"type": "char[4](Range str)",
						"parameters": [
							{
								"type": "Range",
								"name": "str"
							}
						],
						"name": "soundexer",
						"endline": 4659
					}
				],
				"char": 9,
				"parameters": [
					{
						"kind": "type",
						"name": "Range"
					}
				],
				"comment": " Soundex algorithm.\n\n The Soundex algorithm converts a word into 4 characters\n based on how the word sounds phonetically. The idea is that\n two spellings that sound alike will have the same Soundex\n value, which means that Soundex can be used for fuzzy matching\n of names.\n\n Params:\n  str = String or InputRange to convert to Soundex representation.\n\n Returns:\n  The four character array with the Soundex result in it.\n  The array has zero's in it if there is no Soundex representation for the string.\n\n See_Also:\n  $(LINK2 http://en.wikipedia.org/wiki/Soundex, Wikipedia),\n  $(LUCKY The Soundex Indexing System)\n  $(LREF soundex)\n\n Bugs:\n  Only works well with English names.\n  There are other arguably better Soundex algorithms,\n  but this one is the standard one.\n",
				"name": "soundexer"
			},
			{
				"kind": "function",
				"line": 4676,
				"deco": "FNaNbNfAxaAaZAa",
				"endchar": 1,
				"char": 8,
				"parameters": [
					{
						"deco": "Axa",
						"name": "str"
					},
					{
						"deco": "Aa",
						"default": "null",
						"name": "buffer"
					}
				],
				"name": "soundex",
				"comment": " Like $(LREF soundexer), but with different parameters\n and return value.\n\n Params:\n  str = String to convert to Soundex representation.\n  buffer = Optional 4 char array to put the resulting Soundex\n      characters into. If null, the return value\n      buffer will be allocated on the heap.\n Returns:\n  The four character array with the Soundex result in it.\n  Returns null if there is no Soundex representation for the string.\n See_Also:\n  $(LREF soundexer)\n",
				"endline": 4701
			},
			{
				"kind": "function",
				"line": 4792,
				"deco": "FNaNfAAyaZHAyaAya",
				"endchar": 1,
				"char": 16,
				"parameters": [
					{
						"deco": "AAya",
						"name": "values"
					}
				],
				"name": "abbrev",
				"comment": " Construct an associative array consisting of all\n abbreviations that uniquely map to the strings in values.\n\n This is useful in cases where the user is expected to type\n in one of a known set of strings, and the program will helpfully\n autocomplete the string once sufficient characters have been\n entered that uniquely identify it.\n Example:\n ---\n import std.stdio;\n import std.string;\n\n void main()\n {\n    static string[] list = [ \"food\", \"foxy\" ];\n\n    auto abbrevs = std.string.abbrev(list);\n\n    foreach (key, value; abbrevs)\n    {\n       writefln(\"%s => %s\", key, value);\n    }\n }\n ---\n produces the output:\n <pre>\n fox =&gt; foxy\n food =&gt; food\n foxy =&gt; foxy\n foo =&gt; food\n </pre>\n",
				"endline": 4837
			},
			{
				"kind": "template",
				"line": 4892,
				"constraint": "isSomeString!Range || isInputRange!Range && isSomeChar!(Unqual!(ElementEncodingType!Range))",
				"members": [
					{
						"kind": "function",
						"line": 4892,
						"endchar": 1,
						"char": 8,
						"type": "size_t(Range str, in size_t tabsize = 8)",
						"parameters": [
							{
								"type": "Range",
								"name": "str"
							},
							{
								"storageClass": [
									"in"
								],
								"default": "8",
								"type": "size_t",
								"name": "tabsize"
							}
						],
						"name": "column",
						"endline": 4933
					}
				],
				"char": 8,
				"parameters": [
					{
						"kind": "type",
						"name": "Range"
					}
				],
				"comment": " Compute _column number at the end of the printed form of the string,\n assuming the string starts in the leftmost _column, which is numbered\n starting from 0.\n\n Tab characters are expanded into enough spaces to bring the _column number\n to the next multiple of tabsize.\n If there are multiple lines in the string, the _column number of the last\n line is returned.\n\n Params:\n    str = string or InputRange to be analyzed\n    tabsize = number of columns a tab character represents\n\n Returns:\n    column number\nExample:\n\n---\nimport std.utf : byChar, byWchar, byDchar;\n\nassert(column(\"1234 \") == 5);\nassert(column(\"1234 \"w) == 5);\nassert(column(\"1234 \"d) == 5);\n\nassert(column(\"1234 \".byChar()) == 5);\nassert(column(\"1234 \"w.byWchar()) == 5);\nassert(column(\"1234 \"d.byDchar()) == 5);\n\n// Tab stops are set at 8 spaces by default; tab characters insert enough\n// spaces to bring the column position to the next multiple of 8.\nassert(column(\"\\t\") == 8);\nassert(column(\"1\\t\") == 8);\nassert(column(\"\\t1\") == 9);\nassert(column(\"123\\t\") == 8);\n\n// Other tab widths are possible by specifying it explicitly:\nassert(column(\"\\t\", 4) == 4);\nassert(column(\"1\\t\", 4) == 4);\nassert(column(\"\\t1\", 4) == 5);\nassert(column(\"123\\t\", 4) == 4);\n\n// New lines reset the column number.\nassert(column(\"abc\\n\") == 0);\nassert(column(\"abc\\n1\") == 1);\nassert(column(\"abcdefg\\r1234\") == 4);\nassert(column(\"abc\\u20281\") == 1);\nassert(column(\"abc\\u20291\") == 1);\nassert(column(\"abc\\u00851\") == 1);\nassert(column(\"abc\\u00861\") == 5);\n\n---\n",
				"name": "column"
			},
			{
				"kind": "template",
				"line": 5006,
				"constraint": "isSomeString!S",
				"members": [
					{
						"kind": "function",
						"line": 5006,
						"endchar": 1,
						"char": 3,
						"type": "pure @safe S(S s, in size_t columns = 80, S firstindent = null, S indent = null, in size_t tabsize = 8)",
						"parameters": [
							{
								"type": "S",
								"name": "s"
							},
							{
								"storageClass": [
									"in"
								],
								"default": "80",
								"type": "size_t",
								"name": "columns"
							},
							{
								"default": "null",
								"type": "S",
								"name": "firstindent"
							},
							{
								"default": "null",
								"type": "S",
								"name": "indent"
							},
							{
								"storageClass": [
									"in"
								],
								"default": "8",
								"type": "size_t",
								"name": "tabsize"
							}
						],
						"name": "wrap",
						"endline": 5070
					}
				],
				"char": 3,
				"parameters": [
					{
						"kind": "type",
						"name": "S"
					}
				],
				"comment": " Wrap text into a paragraph.\n\n The input text string s is formed into a paragraph\n by breaking it up into a sequence of lines, delineated\n by \\n, such that the number of columns is not exceeded\n on each line.\n The last line is terminated with a \\n.\n Params:\n  s = text string to be wrapped\n  columns = maximum number of _columns in the paragraph\n  firstindent = string used to _indent first line of the paragraph\n  indent = string to use to _indent following lines of the paragraph\n  tabsize = column spacing of tabs in firstindent[] and indent[]\n Returns:\n  resulting paragraph as an allocated string\n",
				"name": "wrap"
			},
			{
				"kind": "template",
				"line": 5111,
				"constraint": "isSomeString!S",
				"members": [
					{
						"kind": "function",
						"line": 5111,
						"endchar": 1,
						"char": 3,
						"type": "pure @safe S(S str)",
						"parameters": [
							{
								"type": "S",
								"name": "str"
							}
						],
						"name": "outdent",
						"endline": 5114
					}
				],
				"char": 3,
				"parameters": [
					{
						"kind": "type",
						"name": "S"
					}
				],
				"comment": " Removes one level of indentation from a multi-line string.\n\n This uniformly outdents the text as much as possible.\n Whitespace-only lines are always converted to blank lines.\n\n Does not allocate memory if it does not throw.\n\n Params:\n     str = multi-line string\n\n Returns:\n      outdented string\n\n Throws:\n     StringException if indentation is done with different sequences\n     of whitespace characters.\nExample:\n\n---\nenum pretty = q{\n   import std.stdio;\n   void main() {\n       writeln(\"Hello\");\n   }\n}.outdent();\n\nenum ugly = q{\nimport std.stdio;\nvoid main() {\nwriteln(\"Hello\");\n}\n};\n\nassert(pretty == ugly);\n\n---\n",
				"name": "outdent"
			},
			{
				"kind": "template",
				"line": 5153,
				"constraint": "isSomeString!S",
				"members": [
					{
						"kind": "function",
						"line": 5153,
						"endchar": 1,
						"char": 5,
						"type": "pure @safe S[](S[] lines)",
						"parameters": [
							{
								"type": "S[]",
								"name": "lines"
							}
						],
						"name": "outdent",
						"endline": 5210
					}
				],
				"char": 5,
				"parameters": [
					{
						"kind": "type",
						"name": "S"
					}
				],
				"comment": " Removes one level of indentation from an array of single-line strings.\n\n This uniformly outdents the text as much as possible.\n Whitespace-only lines are always converted to blank lines.\n\n Params:\n     lines = array of single-line strings\n\n Returns:\n      lines[] is rewritten in place with outdented lines\n\n Throws:\n     StringException if indentation is done with different sequences\n     of whitespace characters.\n",
				"name": "outdent"
			},
			{
				"kind": "template",
				"line": 5321,
				"constraint": "staticIndexOf!(Unqual!T, ubyte, ushort, uint) != -1",
				"members": [
					{
						"kind": "function",
						"line": 5321,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "pure (T[] arr)",
						"parameters": [
							{
								"type": "T[]",
								"name": "arr"
							}
						],
						"name": "assumeUTF",
						"endline": 5329
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": " Assume the given array of integers $(D arr) is a well-formed UTF string and\nreturn it typed as a UTF string.\n\n$(D ubyte) becomes $(D char), $(D ushort) becomes $(D wchar) and $(D uint)\nbecomes $(D dchar). Type qualifiers are preserved.\n\nParams:\n    arr = array of bytes, ubytes, shorts, ushorts, ints, or uints\n\nReturns:\n    arr retyped as an array of chars, wchars, or dchars\n\nSee_Also: $(LREF representation)\nExample:\n\n---\nstring a = \"Hölo World\";\nimmutable(ubyte)[] b = a.representation;\nstring c = b.assumeUTF;\n\nassert(a == c);\n\n---\n",
				"name": "assumeUTF"
			}
		],
		"name": "std.string",
		"comment": "String handling functions.\n\n$(SCRIPT inhibitQuickIndex = 1;)\n\n$(DIVC quickindex,\n$(BOOKTABLE ,\n$(TR $(TH Category) $(TH Functions) )\n$(TR $(TDNW Searching)\n    $(TD\n         $(MYREF column)\n         $(MYREF inPattern)\n         $(MYREF indexOf)\n         $(MYREF indexOfAny)\n         $(MYREF indexOfNeither)\n         $(MYREF lastIndexOf)\n         $(MYREF lastIndexOfAny)\n         $(MYREF lastIndexOfNeither)\n    )\n)\n$(TR $(TDNW Comparison)\n    $(TD\n         $(MYREF countchars)\n         $(MYREF isNumeric)\n    )\n)\n$(TR $(TDNW Mutation)\n    $(TD\n         $(MYREF capitalize)\n         $(MYREF munch)\n         $(MYREF removechars)\n         $(MYREF squeeze)\n    )\n)\n$(TR $(TDNW Pruning and Filling)\n    $(TD\n         $(MYREF center)\n         $(MYREF chomp)\n         $(MYREF chompPrefix)\n         $(MYREF chop)\n         $(MYREF detab)\n         $(MYREF entab)\n         $(MYREF leftJustify)\n         $(MYREF outdent)\n         $(MYREF rightJustify)\n         $(MYREF strip)\n         $(MYREF stripLeft)\n         $(MYREF stripRight)\n         $(MYREF wrap)\n    )\n)\n$(TR $(TDNW Substitution)\n    $(TD\n         $(MYREF abbrev)\n         $(MYREF soundex)\n         $(MYREF soundexer)\n         $(MYREF succ)\n         $(MYREF tr)\n         $(MYREF translate)\n    )\n)\n$(TR $(TDNW Miscellaneous)\n    $(TD\n         $(MYREF assumeUTF)\n         $(MYREF fromStringz)\n         $(MYREF lineSplitter)\n         $(MYREF representation)\n         $(MYREF splitLines)\n         $(MYREF toStringz)\n    )\n)))\n\nObjects of types $(D _string), $(D wstring), and $(D dstring) are value types\nand cannot be mutated element-by-element. For using mutation during building\nstrings, use $(D char[]), $(D wchar[]), or $(D dchar[]). The $(D xxxstring)\ntypes are preferable because they don't exhibit undesired aliasing, thus\nmaking code more robust.\n\nThe following functions are publicly imported:\n\n$(BOOKTABLE ,\n$(TR $(TH Module) $(TH Functions) )\n$(LEADINGROW Publicly imported functions)\n    $(TR $(TD std.algorithm)\n        $(TD\n         $(SHORTXREF algorithm, cmp)\n         $(SHORTXREF algorithm, count)\n         $(SHORTXREF algorithm, endsWith)\n         $(SHORTXREF algorithm, startsWith)\n    ))\n    $(TR $(TD std.array)\n        $(TD\n         $(SHORTXREF array, join)\n         $(SHORTXREF array, replace)\n         $(SHORTXREF array, replaceInPlace)\n         $(SHORTXREF array, split)\n    ))\n    $(TR $(TD std.format)\n        $(TD\n         $(SHORTXREF format, format)\n         $(SHORTXREF format, sformat)\n    ))\n    $(TR $(TD std.uni)\n        $(TD\n         $(SHORTXREF uni, icmp)\n         $(SHORTXREF uni, toLower)\n         $(SHORTXREF uni, toLowerInPlace)\n         $(SHORTXREF uni, toUpper)\n         $(SHORTXREF uni, toUpperInPlace)\n    ))\n)\n\nThere is a rich set of functions for _string handling defined in other modules.\nFunctions related to Unicode and ASCII are found in $(LINK2 std_uni.html, std.uni)\nand $(LINK2 std_ascii.html, std.ascii), respectively. Other functions that have a\nwider generality than just strings can be found in $(LINK2 std_algorithm.html,\nstd.algorithm) and $(LINK2 std_range.html, std.range).\n\nSee_Also:\n    $(LIST\n    $(LINK2 std_algorithm.html, std.algorithm) and\n    $(LINK2 std_range.html, std.range)\n    for generic range algorithms\n    ,\n    $(LINK2 std_ascii.html, std.ascii)\n    for functions that work with ASCII strings\n    ,\n    $(LINK2 std_uni.html, std.uni)\n    for functions that work with unicode strings\n    )\n\nMacros: WIKI = Phobos/StdString\n        SHORTXREF=$(XREF2 $1, $2, $(TT $2))\n\nCopyright: Copyright Digital Mars 2007-.\n\nLicense: $(WEB boost.org/LICENSE_1_0.txt, Boost License 1.0).\n\nAuthors: $(WEB digitalmars.com, Walter Bright),\n         $(WEB erdani.org, Andrei Alexandrescu),\n         and Jonathan M Davis\n\nSource:    $(PHOBOSSRC std/_string.d)\n\n"
	},
	{
		"kind": "module",
		"file": "../phobos/std/typecons.d",
		"members": [
			{
				"kind": "template",
				"line": 59,
				"members": [
					{
						"kind": "struct",
						"line": 59,
						"members": [
							{
								"kind": "constructor",
								"line": 100,
								"endchar": 5,
								"char": 5,
								"type": "(RefT p)",
								"parameters": [
									{
										"type": "RefT",
										"name": "p"
									}
								],
								"name": "this",
								"comment": "    Constructor that takes an rvalue.\n    It will ensure uniqueness, as long as the rvalue\n    isn't just a view on an lvalue (e.g., a cast).\n    Typical usage:\n    ----\n    Unique!Foo f = new Foo;\n    ----\n",
								"endline": 104
							},
							{
								"kind": "constructor",
								"line": 110,
								"endchar": 5,
								"char": 5,
								"type": "(ref RefT p)",
								"parameters": [
									{
										"storageClass": [
											"ref"
										],
										"type": "RefT",
										"name": "p"
									}
								],
								"name": "this",
								"comment": "    Constructor that takes an lvalue. It nulls its source.\n    The nulling will ensure uniqueness as long as there\n    are no previous aliases to the source.\n",
								"endline": 116
							},
							{
								"kind": "template",
								"line": 130,
								"constraint": "is(u.RefT : RefT)",
								"members": [
									{
										"kind": "constructor",
										"line": 130,
										"endchar": 5,
										"char": 5,
										"type": "(Unique!U u)",
										"parameters": [
											{
												"type": "Unique!U",
												"name": "u"
											}
										],
										"name": "this",
										"endline": 136
									}
								],
								"char": 5,
								"parameters": [
									{
										"kind": "type",
										"name": "U"
									}
								],
								"comment": "    Constructor that takes a $(D Unique) of a type that is convertible to our type.\n\n    Typically used to transfer a $(D Unique) rvalue of derived type to\n    a $(D Unique) of base type.\n    Example:\n    ---\n    class C : Object {}\n\n    Unique!C uc = new C;\n    Unique!Object uo = uc.release;\n    ---\n",
								"name": "this"
							},
							{
								"kind": "template",
								"line": 139,
								"constraint": "is(u.RefT : RefT)",
								"members": [
									{
										"kind": "function",
										"line": 139,
										"endchar": 5,
										"char": 10,
										"type": "void(Unique!U u)",
										"parameters": [
											{
												"type": "Unique!U",
												"name": "u"
											}
										],
										"name": "opAssign",
										"endline": 147
									}
								],
								"char": 10,
								"parameters": [
									{
										"kind": "type",
										"name": "U"
									}
								],
								"comment": "Transfer ownership from a $(D Unique) of a type that is convertible to our type.\n",
								"name": "opAssign"
							},
							{
								"kind": "function",
								"line": 156,
								"endchar": 5,
								"char": 20,
								"type": "const @property bool()",
								"name": "isEmpty",
								"comment": " Returns whether the resource exists.\n",
								"endline": 159
							},
							{
								"kind": "function",
								"line": 161,
								"endchar": 5,
								"char": 12,
								"type": "Unique()",
								"name": "release",
								"comment": " Transfer ownership to a $(D Unique) rvalue. Nullifies the current contents.\n",
								"endline": 168
							},
							{
								"kind": "function",
								"line": 170,
								"endchar": 31,
								"char": 10,
								"type": "RefT()",
								"name": "opDot",
								"comment": " Forwards member access to contents.\n",
								"endline": 170
							}
						],
						"char": 1,
						"name": "Unique"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": "Encapsulates unique ownership of a resource.  Resource of type $(D T) is\ndeleted at the end of the scope, unless it is transferred.  The\ntransfer can be explicit, by calling $(D release), or implicit, when\nreturning Unique from a function. The resource can be a polymorphic\nclass object, in which case Unique behaves polymorphically too.\nExample:\n\n---\nstatic struct S\n{\n    int i;\n    this(int i){this.i = i;}\n}\nUnique!S produce()\n{\n    // Construct a unique instance of S on the heap\n    Unique!S ut = new S(5);\n    // Implicit transfer of ownership\n    return ut;\n}\n// Borrow a unique resource by ref\nvoid increment(ref Unique!S ur)\n{\n    ur.i++;\n}\nvoid consume(Unique!S u2)\n{\n    assert(u2.i == 6);\n    // Resource automatically deleted here\n}\nUnique!S u1;\nassert(u1.isEmpty);\nu1 = produce();\nincrement(u1);\nassert(u1.i == 6);\n//consume(u1); // Error: u1 is not copyable\n// Transfer ownership of the resource\nconsume(u1.release);\nassert(u1.isEmpty);\n\n---\n",
				"name": "Unique"
			},
			{
				"kind": "template",
				"line": 311,
				"members": [
					{
						"kind": "struct",
						"line": 431,
						"members": [
							{
								"kind": "alias",
								"line": 436,
								"char": 9,
								"type": "staticMap!(extractType, fieldSpecs)",
								"name": "Types",
								"comment": " The types of the `Tuple`'s components.\nExample:\n\n---\nalias Fields = Tuple!(int, \"id\", string, float);\nstatic assert(is(Fields.Types == TypeTuple!(int, string, float)));\n\n\n---\n"
							},
							{
								"kind": "alias",
								"line": 448,
								"char": 9,
								"type": "staticMap!(extractName, fieldSpecs)",
								"name": "fieldNames",
								"comment": " The names of the `Tuple`'s components. Unnamed fields have empty names.\nExample:\n\n---\nalias Fields = Tuple!(int, \"id\", string, float);\nstatic assert(Fields.fieldNames == TypeTuple!(\"id\", \"\", \"\"));\n\n\n---\n"
							},
							{
								"kind": "variable",
								"line": 463,
								"char": 15,
								"type": "Types",
								"name": "expand",
								"comment": " Use $(D t.expand) for a `Tuple` $(D t) to expand it into its\n components. The result of $(D expand) acts as if the `Tuple`'s components\n were listed as a list of values. (Ordinarily, a $(D Tuple) acts as a\n single value.)\nExample:\n\n---\nauto t1 = tuple(1, \" hello \", 2.3);\nassert(t1.toString() == `Tuple!(int, string, double)(1, \" hello \", 2.3)`);\n\nvoid takeSeveralTypes(int n, string s, bool b) \n{\n    assert(n == 4 && s == \"test\" && b == false);\n}\n\nauto t2 = tuple(4, \"test\", false);\n//t.expand acting as a list of values\ntakeSeveralTypes(t2.expand);\n\n\n---\nExample:\n\n---\nalias ISD = Tuple!(int, string, double);\nauto tup = ISD(1, \"test\", 3.2);\nassert(tup.toString() == `Tuple!(int, string, double)(1, \"test\", 3.2)`);\n\n\n---\n"
							},
							{
								"kind": "template",
								"line": 539,
								"constraint": "n == Types.length && allSatisfy!(isBuildableFrom!U, Types)",
								"members": [
									{
										"kind": "constructor",
										"line": 539,
										"endchar": 9,
										"char": 9,
										"type": "(U[n] values)",
										"parameters": [
											{
												"type": "U[n]",
												"name": "values"
											}
										],
										"name": "this",
										"endline": 546
									}
								],
								"char": 9,
								"parameters": [
									{
										"kind": "type",
										"name": "U"
									},
									{
										"kind": "value",
										"type": "size_t",
										"name": "n"
									}
								],
								"comment": " Constructor taking a compatible array.\n\n Params:\n     values = A compatible static array to build the `Tuple` from.\n              Array slices are not supported.\nExample:\n\n---\nint[2] ints;\nTuple!(int, int) t = ints;\n\n\n---\n",
								"name": "this"
							},
							{
								"kind": "template",
								"line": 565,
								"constraint": "areBuildCompatibleTuples!(typeof(this), U)",
								"members": [
									{
										"kind": "constructor",
										"line": 565,
										"endchar": 9,
										"char": 9,
										"type": "(U another)",
										"parameters": [
											{
												"type": "U",
												"name": "another"
											}
										],
										"name": "this",
										"endline": 569
									}
								],
								"char": 9,
								"parameters": [
									{
										"kind": "type",
										"name": "U"
									}
								],
								"comment": " Constructor taking a compatible `Tuple`. Two `Tuple`s are compatible\n $(B iff) they are both of the same length, and, for each type `T` on the\n left-hand side, the corresponding type `U` on the right-hand side can\n implicitly convert to `T`.\n\n Params:\n     another = A compatible `Tuple` to build from. Its type must be\n               compatible with the target `Tuple`'s type.\nExample:\n\n---\nalias IntVec = Tuple!(int, int, int);\nalias DubVec = Tuple!(double, double, double);\n\nIntVec iv = tuple(1, 1, 1);\n\n//Ok, int can implicitly convert to double\nDubVec dv = iv;\n//Error: double cannot implicitly convert to int\n//IntVec iv2 = dv;\n\n\n---\n",
								"name": "this"
							},
							{
								"kind": "template",
								"line": 605,
								"constraint": "areCompatibleTuples!(typeof(this), R, \"==\")",
								"members": [
									{
										"kind": "function",
										"line": 605,
										"endchar": 9,
										"char": 14,
										"type": "bool(R rhs)",
										"parameters": [
											{
												"type": "R",
												"name": "rhs"
											}
										],
										"name": "opEquals",
										"endline": 609
									}
								],
								"char": 14,
								"parameters": [
									{
										"kind": "type",
										"name": "R"
									}
								],
								"comment": " Comparison for equality. Two `Tuple`s are considered equal\n $(B iff) they fulfill the following criteria:\n\n $(UL\n   $(LI Each `Tuple` is the same length.)\n   $(LI For each type `T` on the left-hand side and each type\n        `U` on the right-hand side, values of type `T` can be\n        compared with values of type `U`.)\n   $(LI For each value `v1` on the left-hand side and each value\n        `v2` on the right-hand side, the expression `v1 == v2` is\n        true.))\n\n Params:\n     rhs = The `Tuple` to compare against. It must meeting the criteria\n           for comparison between `Tuple`s.\n\n Returns:\n     true if both `Tuple`s are equal, otherwise false.\nExample:\n\n---\nTuple!(int, string) t1 = tuple(1, \"test\");\nTuple!(double, string) t2 =  tuple(1.0, \"test\");\n//Ok, int can be compared with double and\n//both have a value of 1\nassert(t1 == t2);\n\n\n---\n",
								"name": "opEquals"
							},
							{
								"kind": "template",
								"line": 612,
								"constraint": "areCompatibleTuples!(typeof(this), R, \"==\")",
								"members": [
									{
										"kind": "function",
										"line": 612,
										"endchar": 9,
										"char": 14,
										"type": "const bool(R rhs)",
										"parameters": [
											{
												"type": "R",
												"name": "rhs"
											}
										],
										"name": "opEquals",
										"endline": 616
									}
								],
								"char": 14,
								"parameters": [
									{
										"kind": "type",
										"name": "R"
									}
								],
								"comment": "ditto\n",
								"name": "opEquals"
							},
							{
								"kind": "template",
								"line": 644,
								"constraint": "areCompatibleTuples!(typeof(this), R, \"<\")",
								"members": [
									{
										"kind": "function",
										"line": 644,
										"endchar": 9,
										"char": 13,
										"type": "int(R rhs)",
										"parameters": [
											{
												"type": "R",
												"name": "rhs"
											}
										],
										"name": "opCmp",
										"endline": 655
									}
								],
								"char": 13,
								"parameters": [
									{
										"kind": "type",
										"name": "R"
									}
								],
								"comment": " Comparison for ordering.\n\n Params:\n     rhs = The `Tuple` to compare against. It must meet the criteria\n           for comparison between `Tuple`s.\n\n Returns:\n For any values `v1` on the right-hand side and `v2` on the\n left-hand side:\n\n $(UL\n   $(LI A negative integer if the expression `v1 < v2` is true.)\n   $(LI A positive integer if the expression `v1 > v2` is true.)\n   $(LI 0 if the expression `v1 == v2` is true.))\nExample:\nThe first `v1` for which `v1 > v2` is true determines\n            the result. This could lead to unexpected behaviour.\n---\nauto tup1 = tuple(1, 1, 1);\nauto tup2 = tuple(1, 100, 100);\nassert(tup1 < tup2);\n\n//Only the first result matters for comparison\ntup1[0] = 2;\nassert(tup1 > tup2);\n\n\n---\n",
								"name": "opCmp"
							},
							{
								"kind": "template",
								"line": 658,
								"constraint": "areCompatibleTuples!(typeof(this), R, \"<\")",
								"members": [
									{
										"kind": "function",
										"line": 658,
										"endchar": 9,
										"char": 13,
										"type": "const int(R rhs)",
										"parameters": [
											{
												"type": "R",
												"name": "rhs"
											}
										],
										"name": "opCmp",
										"endline": 669
									}
								],
								"char": 13,
								"parameters": [
									{
										"kind": "type",
										"name": "R"
									}
								],
								"comment": "ditto\n",
								"name": "opCmp"
							},
							{
								"kind": "template",
								"line": 694,
								"constraint": "areCompatibleTuples!(typeof(this), R, \"=\")",
								"members": [
									{
										"kind": "function",
										"line": 694,
										"endchar": 9,
										"char": 14,
										"type": "void(auto ref R rhs)",
										"parameters": [
											{
												"storageClass": [
													"auto",
													"ref"
												],
												"type": "R",
												"name": "rhs"
											}
										],
										"name": "opAssign",
										"endline": 717
									}
								],
								"char": 14,
								"parameters": [
									{
										"kind": "type",
										"name": "R"
									}
								],
								"comment": " Assignment from another `Tuple`.\n\n Params:\n     rhs = The source `Tuple` to assign from. Each element of the\n           source `Tuple` must be implicitly assignable to each\n           respective element of the target `Tuple`.\n",
								"name": "opAssign"
							},
							{
								"kind": "template",
								"line": 732,
								"constraint": "from <= to && to <= Types.length",
								"members": [
									{
										"kind": "function",
										"line": 732,
										"endchar": 9,
										"char": 43,
										"type": "@property ref @trusted Tuple!(sliceSpecs!(from, to))()",
										"name": "slice",
										"endline": 736
									}
								],
								"char": 43,
								"parameters": [
									{
										"kind": "value",
										"type": "size_t",
										"name": "from"
									},
									{
										"kind": "value",
										"type": "size_t",
										"name": "to"
									}
								],
								"comment": " Takes a slice of this `Tuple`.\n\n Params:\n     from = A `size_t` designating the starting position of the slice.\n     to = A `size_t` designating the ending position (exclusive) of the slice.\n\n Returns:\n     A new `Tuple` that is a slice from `[from, to$(RPAREN)` of the original.\n     It has the same types and values as the range `[from, to$(RPAREN)` in\n     the original.\nExample:\n\n---\nTuple!(int, string, float, double) a;\na[1] = \"abc\";\na[2] = 4.5;\nauto s = a.slice!(1, 3);\nstatic assert(is(typeof(s) == Tuple!(string, float)));\nassert(s[0] == \"abc\" && s[1] == 4.5);\n\n\n---\n",
								"name": "slice"
							},
							{
								"kind": "function",
								"line": 755,
								"endchar": 9,
								"char": 16,
								"type": "const nothrow @trusted size_t()",
								"name": "toHash",
								"comment": "            Creates a hash of this `Tuple`.\n\n            Returns:\n                A `size_t` representing the hash of this `Tuple`.\n",
								"endline": 761
							},
							{
								"kind": "template",
								"line": 796,
								"members": [
									{
										"kind": "function",
										"line": 796,
										"endchar": 9,
										"char": 16,
										"type": "string()",
										"name": "toString",
										"endline": 800
									}
								],
								"char": 16,
								"parameters": [],
								"comment": " Converts to string.\n\n Returns:\n     The string representation of this `Tuple`.\n",
								"name": "toString"
							}
						],
						"char": 5,
						"name": "Tuple"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "tuple",
						"name": "Specs"
					}
				],
				"comment": "Tuple of values, for example $(D Tuple!(int, string)) is a record that\nstores an $(D int) and a $(D string). $(D Tuple) can be used to bundle\nvalues together, notably when returning multiple values from a\nfunction. If $(D obj) is a `Tuple`, the individual members are\naccessible with the syntax $(D obj[0]) for the first field, $(D obj[1])\nfor the second, and so on.\n\nThe choice of zero-based indexing instead of one-base indexing was\nmotivated by the ability to use value `Tuple`s with various compile-time\nloop constructs (e.g. $(XREF typetuple, TypeTuple) iteration), all of which use\nzero-based indexing.\n\nParams:\n    Specs = A list of types (and optionally, member names) that the `Tuple` contains.\nExample:\n\n---\nTuple!(int, int) point;\n// assign coordinates\npoint[0] = 5;\npoint[1] = 6;\n// read coordinates\nauto x = point[0];\nauto y = point[1];\n\n---\nExample:\n`Tuple` members can be named. It is legal to mix named and unnamed\n    members. The method above is still applicable to all fields.\n---\nalias Entry = Tuple!(int, \"index\", string, \"value\");\nEntry e;\ne.index = 4;\ne.value = \"Hello\";\nassert(e[1] == \"Hello\");\nassert(e[0] == 4);\n\n---\nExample:\nA `Tuple` with named fields is a distinct type from a `Tuple` with unnamed\n    fields, i.e. each naming imparts a separate type for the `Tuple`. Two\n    `Tuple`s differing in naming only are still distinct, even though they\n    might have the same structure.\n---\nTuple!(int, \"x\", int, \"y\") point1;\nTuple!(int, int) point2;\nassert(!is(typeof(point1) == typeof(point2)));\n\n---\n",
				"name": "Tuple"
			},
			{
				"kind": "template",
				"line": 852,
				"constraint": "isTuple!T",
				"members": [
					{
						"kind": "function",
						"line": 852,
						"endchar": 1,
						"char": 20,
						"type": "ReverseTupleType!T(T t)",
						"parameters": [
							{
								"type": "T",
								"name": "t"
							}
						],
						"name": "reverse",
						"endline": 865
					}
				],
				"char": 20,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": "    Create a copy of a `Tuple` with its fields in reverse order.\n\n    Params:\n        t = The `Tuple` to copy.\n\n    Returns:\n        A copy of `t` with its fields in reverse order.\nExample:\n\n---\nauto tup = tuple(1, \"2\");\nassert(tup.reverse == tuple(\"2\", 1));\n\n---\n",
				"name": "reverse"
			},
			{
				"kind": "template",
				"line": 1298,
				"members": [
					{
						"kind": "template",
						"line": 1300,
						"members": [
							{
								"kind": "function",
								"line": 1300,
								"storageClass": [
									"auto"
								],
								"endchar": 5,
								"char": 10,
								"type": "(Args args)",
								"parameters": [
									{
										"type": "Args",
										"name": "args"
									}
								],
								"name": "tuple",
								"endline": 1336
							}
						],
						"char": 10,
						"parameters": [
							{
								"kind": "tuple",
								"name": "Args"
							}
						],
						"name": "tuple"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "tuple",
						"name": "Names"
					}
				],
				"comment": "    Constructs a $(D Tuple) object instantiated and initialized according to\n    the given arguments.\n\n    Params:\n        Names = A list of strings naming each successive field of the `Tuple`.\n                Each name matches up with the corresponding field given by `Args`.\n                A name does not have to be provided for every field, but as\n                the names must proceed in order, it is not possible to skip\n                one field and name the next after it.\n\n        args = Values to initialize the `Tuple` with. The `Tuple`'s type will\n               be inferred from the types of the values given.\n\n    Returns:\n        A new `Tuple` with its type inferred from the arguments given.\nExample:\n\n---\nauto value = tuple(5, 6.7, \"hello\");\nassert(value[0] == 5);\nassert(value[1] == 6.7);\nassert(value[2] == \"hello\");\n\n// Field names can be provided.\nauto entry = tuple!(\"index\", \"value\")(4, \"Hello\");\nassert(entry.index == 4);\nassert(entry.value == \"Hello\");\n\n---\n",
				"name": "tuple"
			},
			{
				"kind": "template",
				"line": 1362,
				"members": [],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": "    Returns $(D true) if and only if $(D T) is an instance of $(D std.typecons.Tuple).\n\n    Params:\n        T = The type to check.\n\n    Returns:\n        true if `T` is a `Tuple` type, false otherwise.\nExample:\n\n---\nstatic assert(isTuple!(Tuple!()));\nstatic assert(isTuple!(Tuple!(int)));\nstatic assert(isTuple!(Tuple!(int, real, string)));\nstatic assert(isTuple!(Tuple!(int, \"x\", real, \"y\")));\nstatic assert(isTuple!(Tuple!(int, Tuple!(real), string)));\n\n---\n",
				"name": "isTuple"
			},
			{
				"kind": "template",
				"line": 1457,
				"constraint": "is(T == class) || is(T == interface) || isDynamicArray!T",
				"members": [],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": "$(D Rebindable!(T)) is a simple, efficient wrapper that behaves just\nlike an object of type $(D T), except that you can reassign it to\nrefer to another object. For completeness, $(D Rebindable!(T)) aliases\nitself away to $(D T) if $(D T) is a non-const object type. However,\n$(D Rebindable!(T)) does not compile if $(D T) is a non-class type.\n\nYou may want to use $(D Rebindable) when you want to have mutable\nstorage referring to $(D const) objects, for example an array of\nreferences that must be sorted in place. $(D Rebindable) does not\nbreak the soundness of D's type system and does not incur any of the\nrisks usually associated with $(D cast).\n\nParams:\n    T = An object, interface, or array slice type.\nExample:\nRegular $(D const) object references cannot be reassigned.\n---\nclass Widget { int x; int y() const { return x; } }\nconst a = new Widget;\n// Fine\na.y();\n// error! can't modify const a\n// a.x = 5;\n// error! can't modify const a\n// a = new Widget;\n\n---\nExample:\nHowever, $(D Rebindable!(Widget)) does allow reassignment,\n    while otherwise behaving exactly like a $(D const Widget).\n---\nclass Widget { int x; int y() const { return x; } }\nauto a = Rebindable!(const Widget)(new Widget);\n// Fine\na.y();\n// error! can't modify const a\n// a.x = 5;\n// Fine\na = new Widget;\n\n---\n",
				"name": "Rebindable"
			},
			{
				"kind": "template",
				"line": 1520,
				"constraint": "is(T == class) || is(T == interface) || isDynamicArray!T",
				"members": [
					{
						"kind": "function",
						"line": 1520,
						"endchar": 1,
						"char": 14,
						"type": "Rebindable!T(T obj)",
						"parameters": [
							{
								"type": "T",
								"name": "obj"
							}
						],
						"name": "rebindable",
						"endline": 1526
					}
				],
				"char": 14,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": "Convenience function for creating a $(D Rebindable) using automatic type\ninference.\n\nParams:\n    obj = A reference to an object or interface, or an array slice\n          to initialize the `Rebindable` with.\n\nReturns:\n    A newly constructed `Rebindable` initialized with the given reference.\n",
				"name": "rebindable"
			},
			{
				"kind": "template",
				"line": 1539,
				"members": [
					{
						"kind": "function",
						"line": 1539,
						"endchar": 1,
						"char": 14,
						"type": "Rebindable!T(Rebindable!T obj)",
						"parameters": [
							{
								"type": "Rebindable!T",
								"name": "obj"
							}
						],
						"name": "rebindable",
						"endline": 1542
					}
				],
				"char": 14,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": "This function simply returns the $(D Rebindable) object passed in.  It's useful\nin generic programming cases when a given object may be either a regular\n$(D class) or a $(D Rebindable).\n\nParams:\n    obj = An instance of Rebindable!T.\n\nReturns:\n    `obj` without any modification.\n",
				"name": "rebindable"
			},
			{
				"kind": "template",
				"line": 1635,
				"constraint": "is(T == class) || is(T == interface)",
				"members": [],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": "    Similar to $(D Rebindable!(T)) but strips all qualifiers from the reference as\n    opposed to just constness / immutability. Primary intended use case is with\n    shared (having thread-local reference to shared class data)\n\n    Params:\n        T = A class or interface type.\nExample:\n\n---\nclass Data {}\n\nstatic shared(Data) a;\nstatic UnqualRef!(shared Data) b;\n\nimport core.thread;\n\nauto thread = new core.thread.Thread({\n    a = new shared Data();\n    b = new shared Data();\n});\n\nthread.start();\nthread.join();\n\nassert(a !is null);\nassert(b is null);\n\n---\n",
				"name": "UnqualRef"
			},
			{
				"kind": "template",
				"line": 1699,
				"members": [
					{
						"kind": "function",
						"line": 1699,
						"endchar": 1,
						"char": 8,
						"type": "string(string[] names...)",
						"parameters": [
							{
								"type": "string[]",
								"name": "names"
							}
						],
						"name": "alignForSize",
						"endline": 1725
					}
				],
				"char": 8,
				"parameters": [
					{
						"kind": "tuple",
						"name": "E"
					}
				],
				"comment": "  Order the provided members to minimize size while preserving alignment.\n  Alignment is not always optimal for 80-bit reals, nor for structs declared\n  as align(1).\n\n  Params:\n      E = A list of the types to be aligned, representing fields\n          of an aggregate such as a `struct` or `class`.\n\n      names = The names of the fields that are to be aligned.\n\n  Returns:\n      A string to be mixed in to an aggregate, such as a `struct` or `class`.\nExample:\n\n---\nstruct Banner {\n    mixin(alignForSize!(byte[6], double)([\"name\", \"height\"]));\n}\n\n---\n",
				"name": "alignForSize"
			},
			{
				"kind": "template",
				"line": 1760,
				"members": [
					{
						"kind": "struct",
						"line": 1760,
						"members": [
							{
								"kind": "constructor",
								"line": 1768,
								"endchar": 5,
								"char": 5,
								"type": "inout (inout T value)",
								"parameters": [
									{
										"storageClass": [
											"inout"
										],
										"type": "T",
										"name": "value"
									}
								],
								"name": "this",
								"comment": "Constructor initializing $(D this) with $(D value).\n",
								"endline": 1772
							},
							{
								"kind": "function",
								"line": 1794,
								"endchar": 5,
								"char": 20,
								"type": "const pure nothrow @property @safe bool()",
								"name": "isNull",
								"comment": "Returns $(D true) if and only if $(D this) is in the null state.\n",
								"endline": 1797
							},
							{
								"kind": "template",
								"line": 1802,
								"members": [
									{
										"kind": "function",
										"line": 1802,
										"endchar": 5,
										"char": 10,
										"type": "void()",
										"name": "nullify",
										"endline": 1806
									}
								],
								"char": 10,
								"parameters": [],
								"comment": "Forces $(D this) to the null state.\n",
								"name": "nullify"
							},
							{
								"kind": "template",
								"line": 1812,
								"members": [
									{
										"kind": "function",
										"line": 1812,
										"endchar": 5,
										"char": 10,
										"type": "void(T value)",
										"parameters": [
											{
												"type": "T",
												"name": "value"
											}
										],
										"name": "opAssign",
										"endline": 1816
									}
								],
								"char": 10,
								"parameters": [],
								"comment": "Assigns $(D value) to the internally-held state. If the assignment\nsucceeds, $(D this) becomes non-null.\n",
								"name": "opAssign"
							},
							{
								"kind": "function",
								"line": 1822,
								"endchar": 5,
								"char": 28,
								"type": "inout pure nothrow @property ref @safe inout(T)()",
								"name": "get",
								"comment": "Gets the value. $(D this) must not be in the null state.\nThis function is also called for the implicit conversion to $(D T).\n",
								"endline": 1827
							}
						],
						"char": 1,
						"name": "Nullable"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": "Defines a value paired with a distinctive \"null\" state that denotes\nthe absence of a value. If default constructed, a $(D\nNullable!T) object starts in the null state. Assigning it renders it\nnon-null. Calling $(D nullify) can nullify it again.\n\nPractically $(D Nullable!T) stores a $(D T) and a $(D bool).\nExample:\n\n---\nNullable!int a;\nassert(a.isNull);\na = 5;\nassert(!a.isNull);\nassert(a == 5);\n\n---\n",
				"name": "Nullable"
			},
			{
				"kind": "template",
				"line": 2125,
				"members": [
					{
						"kind": "struct",
						"line": 2125,
						"members": [
							{
								"kind": "constructor",
								"line": 2132,
								"endchar": 5,
								"char": 5,
								"type": "(T value)",
								"parameters": [
									{
										"type": "T",
										"name": "value"
									}
								],
								"name": "this",
								"comment": "Constructor initializing $(D this) with $(D value).\n",
								"endline": 2135
							},
							{
								"kind": "function",
								"line": 2157,
								"endchar": 5,
								"char": 20,
								"type": "const @property bool()",
								"name": "isNull",
								"comment": "Returns $(D true) if and only if $(D this) is in the null state.\n",
								"endline": 2169
							},
							{
								"kind": "template",
								"line": 2174,
								"members": [
									{
										"kind": "function",
										"line": 2174,
										"endchar": 5,
										"char": 10,
										"type": "void()",
										"name": "nullify",
										"endline": 2177
									}
								],
								"char": 10,
								"parameters": [],
								"comment": "Forces $(D this) to the null state.\n",
								"name": "nullify"
							},
							{
								"kind": "template",
								"line": 2183,
								"members": [
									{
										"kind": "function",
										"line": 2183,
										"endchar": 5,
										"char": 10,
										"type": "void(T value)",
										"parameters": [
											{
												"type": "T",
												"name": "value"
											}
										],
										"name": "opAssign",
										"endline": 2186
									}
								],
								"char": 10,
								"parameters": [],
								"comment": "Assigns $(D value) to the internally-held state. No null checks are\nmade. Note that the assignment may leave $(D this) in the null state.\n",
								"name": "opAssign"
							},
							{
								"kind": "function",
								"line": 2192,
								"endchar": 5,
								"char": 28,
								"type": "inout @property ref inout(T)()",
								"name": "get",
								"comment": "Gets the value. $(D this) must not be in the null state.\nThis function is also called for the implicit conversion to $(D T).\n",
								"endline": 2199
							}
						],
						"char": 1,
						"name": "Nullable"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "value",
						"type": "T",
						"name": "nullValue"
					}
				],
				"comment": "Just like $(D Nullable!T), except that the null state is defined as a\nparticular value. For example, $(D Nullable!(uint, uint.max)) is an\n$(D uint) that sets aside the value $(D uint.max) to denote a null\nstate. $(D Nullable!(T, nullValue)) is more storage-efficient than $(D\nNullable!T) because it does not need to store an extra $(D bool).\n",
				"name": "Nullable"
			},
			{
				"kind": "template",
				"line": 2341,
				"members": [
					{
						"kind": "struct",
						"line": 2341,
						"members": [
							{
								"kind": "constructor",
								"line": 2351,
								"endchar": 5,
								"char": 5,
								"type": "pure nothrow @safe (T* value)",
								"parameters": [
									{
										"type": "T*",
										"name": "value"
									}
								],
								"name": "this",
								"comment": "Constructor binding $(D this) to $(D value).\n\nParams:\n    value = The value to bind to.\n",
								"endline": 2354
							},
							{
								"kind": "function",
								"line": 2379,
								"endchar": 5,
								"char": 10,
								"type": "pure nothrow @safe void(T* value)",
								"parameters": [
									{
										"type": "T*",
										"name": "value"
									}
								],
								"name": "bind",
								"comment": "Binds the internal state to $(D value).\n\nParams:\n    value = A pointer to a value of type `T` to bind this `NullableRef` to.\nExample:\n\n---\nNullableRef!int nr = new int(42);\nassert(nr == 42);\n\nint* n = new int(1);\nnr.bind(n);\nassert(nr == 1);\n\n\n---\n",
								"endline": 2382
							},
							{
								"kind": "function",
								"line": 2401,
								"endchar": 5,
								"char": 20,
								"type": "const pure nothrow @property @safe bool()",
								"name": "isNull",
								"comment": "Returns $(D true) if and only if $(D this) is in the null state.\n\nReturns:\n    true if `this` is in the null state, otherwise false.\nExample:\n\n---\nNullableRef!int nr;\nassert(nr.isNull);\n\nint* n = new int(42);\nnr.bind(n);\nassert(!nr.isNull && nr == 42);\n\n\n---\n",
								"endline": 2404
							},
							{
								"kind": "function",
								"line": 2420,
								"endchar": 5,
								"char": 10,
								"type": "pure nothrow @safe void()",
								"name": "nullify",
								"comment": "Forces $(D this) to the null state.\nExample:\n\n---\nNullableRef!int nr = new int(42);\nassert(!nr.isNull);\n\nnr.nullify();\nassert(nr.isNull);\n\n\n---\n",
								"endline": 2423
							},
							{
								"kind": "template",
								"line": 2444,
								"constraint": "isAssignable!T",
								"members": [
									{
										"kind": "function",
										"line": 2444,
										"endchar": 5,
										"char": 10,
										"type": "void(T value)",
										"parameters": [
											{
												"type": "T",
												"name": "value"
											}
										],
										"name": "opAssign",
										"endline": 2450
									}
								],
								"char": 10,
								"parameters": [],
								"comment": "Assigns $(D value) to the internally-held state.\n\nParams:\n    value = A value of type `T` to assign to this `NullableRef`.\n            If the internal state of this `NullableRef` has not\n            been initialized, an error will be thrown in\n            non-release mode.\nExample:\n\n---\nimport std.exception: assertThrown, assertNotThrown;\n\nNullableRef!int nr;\nassert(nr.isNull);\nassertThrown!Throwable(nr = 42);\n\nnr.bind(new int(0));\nassert(!nr.isNull);\nassertNotThrown!Throwable(nr = 42);\nassert(nr == 42);\n\n\n---\n",
								"name": "opAssign"
							},
							{
								"kind": "function",
								"line": 2471,
								"endchar": 5,
								"char": 28,
								"type": "inout pure nothrow @property ref @safe inout(T)()",
								"name": "get",
								"comment": "Gets the value. $(D this) must not be in the null state.\nThis function is also called for the implicit conversion to $(D T).\nExample:\n\n---\nimport std.exception: assertThrown, assertNotThrown;\n\nNullableRef!int nr;\n//`get` is implicitly called. Will throw \n//an error in non-release mode\nassertThrown!Throwable(nr == 0);\n\nnr.bind(new int(0));\nassertNotThrown!Throwable(nr == 0);\n\n\n---\n",
								"endline": 2476
							}
						],
						"char": 1,
						"name": "NullableRef"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": "Just like $(D Nullable!T), except that the object refers to a value\nsitting elsewhere in memory. This makes assignments overwrite the\ninitially assigned value. Internally $(D NullableRef!T) only stores a\npointer to $(D T) (i.e., $(D Nullable!T.sizeof == (T*).sizeof)).\n",
				"name": "NullableRef"
			},
			{
				"kind": "template",
				"line": 2650,
				"members": [
					{
						"kind": "alias",
						"line": 2650,
						"char": 1,
						"type": "AutoImplement!(Base, generateEmptyFunction, isAbstractFunction)",
						"name": "BlackHole"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "Base"
					}
				],
				"comment": "$(D BlackHole!Base) is a subclass of $(D Base) which automatically implements\nall abstract member functions in $(D Base) as do-nothing functions.  Each\nauto-implemented function just returns the default value of the return type\nwithout doing anything.\n\nThe name came from\n$(WEB search.cpan.org/~sburke/Class-_BlackHole-0.04/lib/Class/_BlackHole.pm, Class::_BlackHole)\nPerl module by Sean M. Burke.\n\nParams:\n    Base = A non-final class for `BlackHole` to inherit from.\n\nSee_Also:\n  $(LREF AutoImplement), $(LREF generateEmptyFunction)\nExample:\n\n---\nimport std.math: isNaN;\n\nstatic abstract class C\n{\n    int m_value;\n    this(int v) { m_value = v; }\n    int value() @property { return m_value; }\n\n    abstract real realValue() @property;\n    abstract void doSomething();\n}\n\nauto c = new BlackHole!C(42);\nassert(c.value == 42);\n\n// Returns real.init which is NaN\nassert(c.realValue.isNaN);\n// Abstract functions are implemented as do-nothing\nc.doSomething();\n\n---\n",
				"name": "BlackHole"
			},
			{
				"kind": "template",
				"line": 2735,
				"members": [
					{
						"kind": "alias",
						"line": 2735,
						"char": 1,
						"type": "AutoImplement!(Base, generateAssertTrap, isAbstractFunction)",
						"name": "WhiteHole"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "Base"
					}
				],
				"comment": "$(D WhiteHole!Base) is a subclass of $(D Base) which automatically implements\nall abstract member functions as functions that always fail. These functions\nsimply throw an $(D Error) and never return. `Whitehole` is useful for\ntrapping the use of class member functions that haven't been implemented.\n\nThe name came from\n$(WEB search.cpan.org/~mschwern/Class-_WhiteHole-0.04/lib/Class/_WhiteHole.pm, Class::_WhiteHole)\nPerl module by Michael G Schwern.\n\nParams:\n    Base = A non-final class for `WhiteHole` to inherit from.\n\nSee_Also:\n  $(LREF AutoImplement), $(LREF generateAssertTrap)\nExample:\n\n---\nimport std.exception: assertThrown;\n\nstatic class C\n{\n    abstract void notYetImplemented();\n}\n\nauto c = new WhiteHole!C;\nassertThrown!NotImplementedError(c.notYetImplemented()); // throws an Error\n\n---\n",
				"name": "WhiteHole"
			},
			{
				"kind": "template",
				"line": 2875,
				"members": [
					{
						"kind": "class",
						"line": 2875,
						"members": [],
						"char": 1,
						"name": "AutoImplement"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "Base"
					},
					{
						"kind": "alias",
						"name": "how"
					},
					{
						"kind": "alias",
						"name": "what",
						"defaultAlias": "isAbstractFunction"
					}
				],
				"comment": "$(D AutoImplement) automatically implements (by default) all abstract member\nfunctions in the class or interface $(D Base) in specified way.\n\nParams:\n  how  = template which specifies _how functions will be implemented/overridden.\n\n         Two arguments are passed to $(D how): the type $(D Base) and an alias\n         to an implemented function.  Then $(D how) must return an implemented\n         function body as a string.\n\n         The generated function body can use these keywords:\n         $(UL\n            $(LI $(D a0), $(D a1), &hellip;: arguments passed to the function;)\n            $(LI $(D args): a tuple of the arguments;)\n            $(LI $(D self): an alias to the function itself;)\n            $(LI $(D parent): an alias to the overridden function (if any).)\n         )\n\n        You may want to use templated property functions (instead of Implicit\n        Template Properties) to generate complex functions:\n--------------------\n// Prints log messages for each call to overridden functions.\nstring generateLogger(C, alias fun)() @property\n{\n    import std.traits;\n    enum qname = C.stringof ~ \".\" ~ __traits(identifier, fun);\n    string stmt;\n\n    stmt ~= q{ struct Importer { import std.stdio; } };\n    stmt ~= `Importer.writeln(\"Log: ` ~ qname ~ `(\", args, \")\");`;\n    static if (!__traits(isAbstractFunction, fun))\n    {\n        static if (is(ReturnType!fun == void))\n            stmt ~= q{ parent(args); };\n        else\n            stmt ~= q{\n                auto r = parent(args);\n                Importer.writeln(\"--> \", r);\n                return r;\n            };\n    }\n    return stmt;\n}\n--------------------\n\n  what = template which determines _what functions should be\n         implemented/overridden.\n\n         An argument is passed to $(D what): an alias to a non-final member\n         function in $(D Base).  Then $(D what) must return a boolean value.\n         Return $(D true) to indicate that the passed function should be\n         implemented/overridden.\n\n--------------------\n// Sees if fun returns something.\nenum bool hasValue(alias fun) = !is(ReturnType!(fun) == void);\n--------------------\n\n\nNote:\n\nGenerated code is inserted in the scope of $(D std.typecons) module.  Thus,\nany useful functions outside $(D std.typecons) cannot be used in the generated\ncode.  To workaround this problem, you may $(D import) necessary things in a\nlocal struct, as done in the $(D generateLogger()) template in the above\nexample.\n\n\nBUGS:\n\n$(UL\n $(LI Variadic arguments to constructors are not forwarded to super.)\n $(LI Deep interface inheritance causes compile error with messages like\n      \"Error: function std.typecons._AutoImplement!(Foo)._AutoImplement.bar\n      does not override any function\".  [$(BUGZILLA 2525), $(BUGZILLA 3525)] )\n $(LI The $(D parent) keyword is actually a delegate to the super class'\n      corresponding member function.  [$(BUGZILLA 2540)] )\n $(LI Using alias template parameter in $(D how) and/or $(D what) may cause\n     strange compile error.  Use template tuple parameter instead to workaround\n     this problem.  [$(BUGZILLA 4217)] )\n)\n",
				"name": "AutoImplement"
			},
			{
				"kind": "template",
				"line": 3502,
				"members": [],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "C"
					},
					{
						"kind": "tuple",
						"name": "func"
					}
				],
				"comment": "Predefined how-policies for $(D AutoImplement).  These templates are also used by\n$(D BlackHole) and $(D WhiteHole), respectively.\n",
				"name": "generateEmptyFunction"
			},
			{
				"kind": "template",
				"line": 3519,
				"members": [
					{
						"kind": "variable",
						"line": 3521,
						"init": "\"throw new NotImplementedError(\\\"\" ~ C.stringof ~ \".\" ~ __traits(identifier, func) ~ \"\\\");\"",
						"storageClass": [
							"enum"
						],
						"char": 17,
						"type": "string",
						"name": "generateAssertTrap"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "C"
					},
					{
						"kind": "tuple",
						"name": "func"
					}
				],
				"comment": "ditto\n",
				"name": "generateAssertTrap"
			},
			{
				"kind": "template",
				"line": 3581,
				"constraint": "Targets.length >= 1 && allSatisfy!(isMutable, Targets)",
				"members": [
					{
						"kind": "template",
						"line": 3587,
						"constraint": "Targets.length == 1 && is(Source : Targets[0])",
						"members": [
							{
								"kind": "function",
								"line": 3587,
								"storageClass": [
									"auto"
								],
								"endchar": 5,
								"char": 10,
								"type": "pure nothrow @trusted (inout Source src)",
								"parameters": [
									{
										"storageClass": [
											"inout"
										],
										"type": "Source",
										"name": "src"
									}
								],
								"name": "wrap",
								"endline": 3592
							}
						],
						"char": 10,
						"parameters": [
							{
								"kind": "type",
								"name": "Source"
							}
						],
						"name": "wrap"
					},
					{
						"kind": "template",
						"line": 3594,
						"constraint": "!allSatisfy!(Bind!(isImplicitlyConvertible, Source), Targets)",
						"members": [
							{
								"kind": "function",
								"line": 3597,
								"storageClass": [
									"auto"
								],
								"endchar": 9,
								"char": 14,
								"type": "(inout Source src)",
								"parameters": [
									{
										"storageClass": [
											"inout"
										],
										"type": "Source",
										"name": "src"
									}
								],
								"name": "wrap",
								"endline": 3606
							}
						],
						"char": 5,
						"parameters": [
							{
								"kind": "type",
								"name": "Source"
							}
						],
						"name": "wrap"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "tuple",
						"name": "Targets"
					}
				],
				"comment": " Supports structural based typesafe conversion.\n\n If $(D Source) has structural conformance with the $(D interface) $(D Targets),\n wrap creates internal wrapper class which inherits $(D Targets) and\n wrap $(D src) object, then return it.\n",
				"name": "wrap"
			},
			{
				"kind": "template",
				"line": 3754,
				"constraint": "Targets.length >= 1 && !allSatisfy!(isMutable, Targets)",
				"members": [
					{
						"kind": "alias",
						"line": 3759,
						"char": 5,
						"type": ".wrap!(staticMap!(Unqual, Targets))",
						"name": "wrap"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "tuple",
						"name": "Targets"
					}
				],
				"comment": "ditto\n",
				"name": "wrap"
			},
			{
				"kind": "template",
				"line": 3771,
				"constraint": "isMutable!Target",
				"members": [
					{
						"kind": "template",
						"line": 3775,
						"constraint": "is(Target : Source)",
						"members": [
							{
								"kind": "function",
								"line": 3775,
								"storageClass": [
									"auto"
								],
								"endchar": 5,
								"char": 10,
								"type": "pure nothrow @trusted (inout Source src)",
								"parameters": [
									{
										"storageClass": [
											"inout"
										],
										"type": "Source",
										"name": "src"
									}
								],
								"name": "unwrap",
								"endline": 3780
							}
						],
						"char": 10,
						"parameters": [
							{
								"kind": "type",
								"name": "Source"
							}
						],
						"name": "unwrap"
					},
					{
						"kind": "template",
						"line": 3782,
						"constraint": "!is(Target : Source)",
						"members": [
							{
								"kind": "function",
								"line": 3782,
								"storageClass": [
									"auto"
								],
								"endchar": 5,
								"char": 10,
								"type": "pure nothrow @trusted (inout Source src)",
								"parameters": [
									{
										"storageClass": [
											"inout"
										],
										"type": "Source",
										"name": "src"
									}
								],
								"name": "unwrap",
								"endline": 3800
							}
						],
						"char": 10,
						"parameters": [
							{
								"kind": "type",
								"name": "Source"
							}
						],
						"name": "unwrap"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "Target"
					}
				],
				"comment": " Extract object which wrapped by $(D wrap).\nExample:\n\n---\ninterface Quack\n{\n    int quack();\n    @property int height();\n}\ninterface Flyer\n{\n    @property int height();\n}\nclass Duck : Quack\n{\n    int quack() { return 1; }\n    @property int height() { return 10; }\n}\nclass Human\n{\n    int quack() { return 2; }\n    @property int height() { return 20; }\n}\n\nDuck d1 = new Duck();\nHuman h1 = new Human();\n\ninterface Refleshable\n{\n    int reflesh();\n}\n// does not have structural conformance\nstatic assert(!__traits(compiles, d1.wrap!Refleshable));\nstatic assert(!__traits(compiles, h1.wrap!Refleshable));\n\n// strict upcast\nQuack qd = d1.wrap!Quack;\nassert(qd is d1);\nassert(qd.quack() == 1);    // calls Duck.quack\n// strict downcast\nDuck d2 = qd.unwrap!Duck;\nassert(d2 is d1);\n\n// structural upcast\nQuack qh = h1.wrap!Quack;\nassert(qh.quack() == 2);    // calls Human.quack\n// structural downcast\nHuman h2 = qh.unwrap!Human;\nassert(h2 is h1);\n\n// structural upcast (two steps)\nQuack qx = h1.wrap!Quack;   // Human -> Quack\nFlyer fx = qx.wrap!Flyer;   // Quack -> Flyer\nassert(fx.height == 20);    // calls Human.height\n// strucural downcast (two steps)\nQuack qy = fx.unwrap!Quack; // Flyer -> Quack\nHuman hy = qy.unwrap!Human; // Quack -> Human\nassert(hy is h1);\n// strucural downcast (one step)\nHuman hz = fx.unwrap!Human; // Flyer -> Human\nassert(hz is h1);\n\n---\nExample:\n\n---\ninterface A { int run(); }\ninterface B { int stop(); @property int status(); }\nclass X\n{\n    int run() { return 1; }\n    int stop() { return 2; }\n    @property int status() { return 3; }\n}\n\nauto x = new X();\nauto ab = x.wrap!(A, B);\nA a = ab;\nB b = ab;\nassert(a.run() == 1);\nassert(b.stop() == 2);\nassert(b.status == 3);\nstatic assert(functionAttributes!(typeof(ab).status) & FunctionAttribute.property);\n\n---\n",
				"name": "unwrap"
			},
			{
				"kind": "template",
				"line": 3803,
				"constraint": "!isMutable!Target",
				"members": [
					{
						"kind": "alias",
						"line": 3806,
						"char": 5,
						"type": ".unwrap!(Unqual!Target)",
						"name": "unwrap"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "Target"
					}
				],
				"comment": "ditto\n",
				"name": "unwrap"
			},
			{
				"kind": "enum",
				"line": 4287,
				"members": [
					{
						"kind": "enum member",
						"line": 4290,
						"value": "0",
						"char": 5,
						"name": "no",
						"comment": "Do not auto-initialize the object\n"
					},
					{
						"kind": "enum member",
						"line": 4292,
						"value": "1",
						"char": 5,
						"name": "yes",
						"comment": "Auto-initialize the object\n"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "RefCountedAutoInitialize",
				"comment": "Options regarding auto-initialization of a $(D RefCounted) object (see\nthe definition of $(D RefCounted) below).\n"
			},
			{
				"kind": "template",
				"line": 4313,
				"constraint": "!is(T == class) && !is(T == interface)",
				"members": [
					{
						"kind": "struct",
						"line": 4313,
						"members": [
							{
								"kind": "struct",
								"line": 4318,
								"members": [
									{
										"kind": "function",
										"line": 4347,
										"endchar": 9,
										"char": 14,
										"type": "const nothrow @property @safe bool()",
										"name": "isInitialized",
										"comment": "           Returns $(D true) if and only if the underlying store has been\n           allocated and initialized.\n",
										"endline": 4350
									},
									{
										"kind": "function",
										"line": 4357,
										"endchar": 9,
										"char": 16,
										"type": "const nothrow @property @safe size_t()",
										"name": "refCount",
										"comment": "           Returns underlying reference count if it is allocated and initialized\n           (a positive integer), and $(D 0) otherwise.\n",
										"endline": 4360
									},
									{
										"kind": "function",
										"line": 4366,
										"endchar": 9,
										"char": 14,
										"type": "void()",
										"name": "ensureInitialized",
										"comment": "           Makes sure the payload was properly initialized. Such a\n           call is typically inserted before using the payload.\n",
										"endline": 4369
									}
								],
								"char": 5,
								"name": "RefCountedStore",
								"comment": "$(D RefCounted) storage implementation.\n"
							},
							{
								"kind": "function",
								"line": 4376,
								"endchar": 5,
								"char": 32,
								"type": "inout nothrow @property ref @safe inout(RefCountedStore)()",
								"name": "refCountedStore",
								"comment": "Returns storage implementation struct.\n",
								"endline": 4379
							},
							{
								"kind": "template",
								"line": 4386,
								"constraint": "A.length > 0",
								"members": [
									{
										"kind": "constructor",
										"line": 4386,
										"endchar": 5,
										"char": 5,
										"type": "(auto ref A args)",
										"parameters": [
											{
												"storageClass": [
													"auto",
													"ref"
												],
												"type": "A",
												"name": "args"
											}
										],
										"name": "this",
										"endline": 4389
									}
								],
								"char": 5,
								"parameters": [
									{
										"kind": "tuple",
										"name": "A"
									}
								],
								"comment": "Constructor that initializes the payload.\n\nPostcondition: $(D refCountedStore.isInitialized)\n",
								"name": "this"
							},
							{
								"kind": "destructor",
								"line": 4407,
								"endchar": 5,
								"char": 5,
								"name": "~this",
								"comment": "Destructor that tracks the reference count appropriately. If $(D\n!refCountedStore.isInitialized), does nothing. When the reference count goes\ndown to zero, calls $(D destroy) agaist the payload and calls $(D free)\nto deallocate the corresponding resource.\n",
								"endline": 4423
							},
							{
								"kind": "function",
								"line": 4428,
								"endchar": 5,
								"char": 10,
								"type": "void(typeof(this) rhs)",
								"parameters": [
									{
										"type": "typeof(this)",
										"name": "rhs"
									}
								],
								"name": "opAssign",
								"comment": "Assignment operators\n",
								"endline": 4433
							},
							{
								"kind": "function",
								"line": 4436,
								"endchar": 5,
								"char": 10,
								"type": "void(T rhs)",
								"parameters": [
									{
										"type": "T",
										"name": "rhs"
									}
								],
								"name": "opAssign",
								"comment": "Ditto\n",
								"endline": 4449
							},
							{
								"kind": "function",
								"line": 4469,
								"char": 15,
								"type": "@property ref T()",
								"name": "refCountedPayload",
								"comment": "        Returns a reference to the payload. If (autoInit ==\n        RefCountedAutoInitialize.yes), calls $(D\n        refCountedStore.ensureInitialized). Otherwise, just issues $(D\n        assert(refCountedStore.isInitialized)). Used with $(D alias\n        refCountedPayload this;), so callers can just use the $(D RefCounted)\n        object as a $(D T).\n\n        $(BLUE The first overload exists only if $(D autoInit == RefCountedAutoInitialize.yes).)\n        So if $(D autoInit == RefCountedAutoInitialize.no)\n        or called for a constant or immutable object, then\n        $(D refCountedPayload) will also be qualified as safe and nothrow\n        (but will still assert if not initialized).\n"
							},
							{
								"kind": "function",
								"line": 4473,
								"char": 22,
								"type": "inout nothrow @property ref @safe inout(T)()",
								"name": "refCountedPayload",
								"comment": "ditto\n"
							}
						],
						"char": 1,
						"name": "RefCounted"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "value",
						"defaultValue": "RefCountedAutoInitialize.yes",
						"deco": "E3std8typecons24RefCountedAutoInitialize",
						"name": "autoInit"
					}
				],
				"comment": "Defines a reference-counted object containing a $(D T) value as\npayload. $(D RefCounted) keeps track of all references of an object,\nand when the reference count goes down to zero, frees the underlying\nstore. $(D RefCounted) uses $(D malloc) and $(D free) for operation.\n\n$(D RefCounted) is unsafe and should be used with care. No references\nto the payload should be escaped outside the $(D RefCounted) object.\n\nThe $(D autoInit) option makes the object ensure the store is\nautomatically initialized. Leaving $(D autoInit ==\nRefCountedAutoInitialize.yes) (the default option) is convenient but\nhas the cost of a test whenever the payload is accessed. If $(D\nautoInit == RefCountedAutoInitialize.no), user code must call either\n$(D refCountedStore.isInitialized) or $(D refCountedStore.ensureInitialized)\nbefore attempting to access the payload. Not doing so results in null\npointer dereference.\nExample:\n\n---\n// A pair of an $(D int) and a $(D size_t) - the latter being the\n// reference count - will be dynamically allocated\nauto rc1 = RefCounted!int(5);\nassert(rc1 == 5);\n// No more allocation, add just one extra reference count\nauto rc2 = rc1;\n// Reference semantics\nrc2 = 42;\nassert(rc1 == 42);\n// the pair will be freed when rc1 and rc2 go out of scope\n\n---\n",
				"name": "RefCounted"
			},
			{
				"kind": "template",
				"line": 4618,
				"members": [],
				"char": 7,
				"parameters": [
					{
						"kind": "alias",
						"name": "a"
					}
				],
				"comment": "    Creates a proxy for the value `a` that will forward all operations\n    while disabling implicit conversions. The aliased item `a` must be\n    an $(B lvalue). This is useful for creating a new type from the\n    \"base\" type (though this is $(B not) a subtype-supertype\n    relationship; the new type is not related to the old type in any way,\n    by design).\n\n    The new type supports all operations that the underlying type does,\n    including all operators such as `+`, `--`, `<`, `[]`, etc.\n\n    Params:\n        a = The value to act as a proxy for all operations. It must\n            be an lvalue.\nExample:\n\n---\nstruct MyInt\n{\n    private int value;\n    mixin Proxy!value;\n\n    this(int n){ value = n; }\n}\n\nMyInt n = 10;\n\n// Enable operations that original type has.\n++n;\nassert(n == 11);\nassert(n * 2 == 22);\n\nvoid func(int n) { }\n\n// Disable implicit conversions to original type.\n//int x = n;\n//func(n);\n\n---\nExample:\nThe proxied value must be an $(B lvalue).\n---\nstruct NewIntType\n{\n    //Won't work; the literal '1' is\n    //is an rvalue, not an lvalue\n    //mixin Proxy!1; \n    \n    //Okay, n is an lvalue\n    int n;\n    mixin Proxy!n;\n    \n    this(int n) { this.n = n; }\n}\n\nNewIntType nit = 0;\nnit++;\nassert(nit == 1);\n\n\nstruct NewObjectType\n{\n    Object obj;\n    //Ok, obj is an lvalue\n    mixin Proxy!obj;\n    \n    this (Object o) { obj = o; }\n}\n\nNewObjectType not = new Object();\nassert(__traits(compiles, not.toHash()));\n\n---\nExample:\nThere is one exception to the fact that the new type is not related to the\n    old type. $(LINK2 http://dlang.org/function.html#pseudo-member, Pseudo-member)\n    functions are usable with the new type; they will be forwarded on to the\n    proxied value.\n---\nimport std.math;\n\nfloat f = 1.0;\nassert(!f.isInfinity);\n\nstruct NewFloat\n{\n    float _;\n    mixin Proxy!_;\n    \n    this(float f) { _ = f; }\n}\n\nNewFloat nf = 1.0f;\nassert(!nf.isInfinity);\n\n---\n",
				"name": "Proxy"
			},
			{
				"kind": "template",
				"line": 5302,
				"members": [
					{
						"kind": "struct",
						"line": 5302,
						"members": [],
						"char": 1,
						"name": "Typedef"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "value",
						"defaultValue": "T.init",
						"type": "T",
						"name": "init"
					},
					{
						"kind": "value",
						"defaultValue": "null",
						"deco": "Aya",
						"name": "cookie"
					}
				],
				"comment": "$(B Typedef) allows the creation of a unique type which is\nbased on an existing type. Unlike the $(D alias) feature,\n$(B Typedef) ensures the two types are not considered as equals.\n\nExample:\n----\nalias MyInt = Typedef!int;\nstatic void takeInt(int) { }\nstatic void takeMyInt(MyInt) { }\n\nint i;\ntakeInt(i);    // ok\ntakeMyInt(i);  // fails\n\nMyInt myInt;\ntakeInt(myInt);    // fails\ntakeMyInt(myInt);  // ok\n----\n\nParams:\n\ninit = Optional initial value for the new type. For example:\n\n----\nalias MyInt = Typedef!(int, 10);\nMyInt myInt;\nassert(myInt == 10);  // default-initialized to 10\n----\n\ncookie = Optional, used to create multiple unique types which are\nbased on the same origin type $(D T). For example:\n\n----\nalias TypeInt1 = Typedef!int;\nalias TypeInt2 = Typedef!int;\n\n// The two Typedefs are the same type.\nstatic assert(is(TypeInt1 == TypeInt2));\n\nalias MoneyEuros = Typedef!(float, float.init, \"euros\");\nalias MoneyDollars = Typedef!(float, float.init, \"dollars\");\n\n// The two Typedefs are _not_ the same type.\nstatic assert(!is(MoneyEuros == MoneyDollars));\n----\n\nNote: If a library routine cannot handle the Typedef type,\nyou can use the $(D TypedefType) template to extract the\ntype which the Typedef wraps.\n",
				"name": "Typedef"
			},
			{
				"kind": "template",
				"line": 5335,
				"members": [],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": "Get the underlying type which a $(D Typedef) wraps.\nIf $(D T) is not a $(D Typedef) it will alias itself to $(D T).\nExample:\n\n---\nimport std.typecons: Typedef, TypedefType;\nimport std.conv: to;\n\nalias MyInt = Typedef!int;\nstatic assert(is(TypedefType!MyInt == int));\n\n/// Instantiating with a non-Typedef will return that type\nstatic assert(is(TypedefType!int == int));\n\nstring num = \"5\";\n\n// extract the needed type\nMyInt myInt = MyInt( num.to!(TypedefType!MyInt) );\nassert(myInt == 5);\n\n// cast to the underlying type to get the value that's being wrapped\nint x = cast(TypedefType!MyInt)myInt;\n\nalias MyIntInit = Typedef!(int, 42);\nstatic assert(is(TypedefType!MyIntInit == int));\nstatic assert(MyIntInit() == 42);\n\n---\n",
				"name": "TypedefType"
			},
			{
				"kind": "template",
				"line": 5537,
				"constraint": "is(T == class)",
				"members": [
					{
						"kind": "template",
						"line": 5578,
						"members": [
							{
								"kind": "function",
								"line": 5578,
								"storageClass": [
									"auto"
								],
								"endchar": 5,
								"char": 18,
								"type": "@system (auto ref Args args)",
								"parameters": [
									{
										"storageClass": [
											"auto",
											"ref"
										],
										"type": "Args",
										"name": "args"
									}
								],
								"name": "scoped",
								"endline": 5588
							}
						],
						"char": 18,
						"parameters": [
							{
								"kind": "tuple",
								"name": "Args"
							}
						],
						"comment": "Returns the scoped object\n",
						"name": "scoped"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": "Allocates a $(D class) object right inside the current scope,\ntherefore avoiding the overhead of $(D new). This facility is unsafe;\nit is the responsibility of the user to not escape a reference to the\nobject outside the scope.\n\nNote: it's illegal to move a class reference even if you are sure there\nare no pointers to it. As such, it is illegal to move a scoped object.\nExample:\n\n---\nclass A\n{\n    int x;\n    this()     {x = 0;}\n    this(int i){x = i;}\n}\n\n// Standard usage\nauto a1 = scoped!A();\nauto a2 = scoped!A(1);\na1.x = 42;\nassert(a1.x == 42);\nassert(a2.x ==  1);\n\n// Restrictions\nstatic assert(!is(typeof({\n    auto e1 = a1; // illegal, scoped objects can't be copied\n    assert([a2][0].x == 42); // ditto\n    alias ScopedObject = typeof(a1);\n    auto e2 = ScopedObject();  //Illegal, must be built via scoped!A\n    auto e3 = ScopedObject(1); //Illegal, must be built via scoped!A\n})));\n\n// Use as member variable\nstruct B\n{\n    typeof(scoped!A()) a; // note the trailing parentheses\n}\n\n// Use with alias\nalias makeScopedA = scoped!A;\nauto a6 = makeScopedA();\nauto a7 = makeScopedA();\n\n---\n",
				"name": "scoped"
			},
			{
				"kind": "template",
				"line": 5943,
				"members": [
					{
						"kind": "enum",
						"line": 5945,
						"members": [
							{
								"kind": "enum member",
								"line": 5952,
								"value": "false",
								"char": 9,
								"name": "no",
								"comment": "         When creating a value of type $(D Flag!\"Name\"), use $(D\n         Flag!\"Name\".no) for the negative option. When using a value\n         of type $(D Flag!\"Name\"), compare it against $(D\n         Flag!\"Name\".no) or just $(D false) or $(D 0).\n"
							},
							{
								"kind": "enum member",
								"line": 5959,
								"value": "true",
								"char": 9,
								"name": "yes",
								"comment": " When creating a value of type $(D Flag!\"Name\"), use $(D\n         Flag!\"Name\".yes) for the affirmative option. When using a\n         value of type $(D Flag!\"Name\"), compare it against $(D\n         Flag!\"Name\".yes).\n"
							}
						],
						"char": 5,
						"baseDeco": "b",
						"name": "Flag",
						"comment": "\n"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "value",
						"deco": "Aya",
						"name": "name"
					}
				],
				"comment": "Defines a simple, self-documenting yes/no flag. This makes it easy for\nAPIs to define functions accepting flags without resorting to $(D\nbool), which is opaque in calls, and without needing to define an\nenumerated type separately. Using $(D Flag!\"Name\") instead of $(D\nbool) makes the flag's meaning visible in calls. Each yes/no flag has\nits own type, which makes confusions and mix-ups impossible.\n\nExample:\n\nCode calling $(D getLine) (usually far away from its definition) can't be\nunderstood without looking at the documentation, even by users familiar with\nthe API:\n----\nstring getLine(bool keepTerminator)\n{\n    ...\n    if (keepTerminator) ...\n    ...\n}\n...\nauto line = getLine(false);\n----\n\nAssuming the reverse meaning (i.e. \"ignoreTerminator\") and inserting the wrong\ncode compiles and runs with erroneous results.\n\nAfter replacing the boolean parameter with an instantiation of $(D Flag), code\ncalling $(D getLine) can be easily read and understood even by people not\nfluent with the API:\n\n----\nstring getLine(Flag!\"keepTerminator\" keepTerminator)\n{\n    ...\n    if (keepTerminator) ...\n    ...\n}\n...\nauto line = getLine(Flag!\"keepTerminator\".yes);\n----\n\nPassing categorical data by means of unstructured $(D bool)\nparameters is classified under \"simple-data coupling\" by Steve\nMcConnell in the $(LUCKY Code Complete) book, along with three other\nkinds of coupling. The author argues citing several studies that\ncoupling has a negative effect on code quality. $(D Flag) offers a\nsimple structuring method for passing yes/no flags to APIs.\n\nAn alias can be used to reduce the verbosity of the flag's type:\n----\nalias KeepTerminator = Flag!\"keepTerminator\";\nstring getline(KeepTerminator keepTerminator)\n{\n    ...\n    if (keepTerminator) ...\n    ...\n}\n...\n// Code calling getLine can now refer to flag values using the shorter name:\nauto line = getLine(KeepTerminator.yes);\n----\n",
				"name": "Flag"
			},
			{
				"kind": "struct",
				"line": 5968,
				"members": [],
				"char": 1,
				"name": "Yes",
				"comment": "Convenience names that allow using e.g. $(D Yes.encryption) instead of\n$(D Flag!\"encryption\".yes) and $(D No.encryption) instead of $(D\nFlag!\"encryption\".no).\nExample:\n\n---\nFlag!\"abc\" flag1;\nassert(flag1 == Flag!\"abc\".no);\nassert(flag1 == No.abc);\nassert(!flag1);\nif (flag1) assert(false);\nflag1 = Yes.abc;\nassert(flag1);\nif (!flag1) assert(false);\nif (flag1) {} else assert(false);\nassert(flag1 == Yes.abc);\n\n---\n"
			},
			{
				"kind": "struct",
				"line": 5978,
				"members": [],
				"char": 1,
				"name": "No",
				"comment": "Ditto\n"
			},
			{
				"kind": "template",
				"line": 6007,
				"members": [],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "E"
					}
				],
				"comment": "Detect whether an enum is of integral type and has only \"flag\" values\n(i.e. values with a bit count of exactly 1).\nAdditionally, a zero value is allowed for compatibility with enums including\na \"None\" value.\nExample:\n\n---\nenum A\n{\n    None,\n    A = 1<<0,\n    B = 1<<1,\n    C = 1<<2,\n    D = 1<<3,\n}\n\nstatic assert(isBitFlagEnum!A);\n\nenum B\n{\n    A,\n    B,\n    C,\n    D // D == 3\n}\n\nstatic assert(!isBitFlagEnum!B);\n\nenum C: double\n{\n    A = 1<<0,\n    B = 1<<1\n}\n\nstatic assert(!isBitFlagEnum!C);\n}\n\n/**\nA typesafe structure for storing combination of enum values.\n\nThis template defines a simple struct to represent bitwise OR combinations of\nenum values. It can be used if all the enum values are integral constants with\na bit count of at most 1, or if the $(D unsafe) parameter is explicitly set to\nYes.\nThis is much safer than using the enum itself to store\nthe OR combination, which can produce surprising effects like this:\n----\nenum E\n{\nA = 1<<0,\nB = 1<<1\n}\nE e = E.A | E.B;\n// will throw SwitchError\nfinal switch(e)\n{\ncase E.A:\n    return;\ncase E.B:\n    return;\n\n---\n",
				"name": "isBitFlagEnum"
			},
			{
				"kind": "template",
				"line": 6087,
				"constraint": "unsafe || isBitFlagEnum!E",
				"members": [
					{
						"kind": "struct",
						"line": 6087,
						"members": [],
						"char": 1,
						"name": "BitFlags"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "E"
					},
					{
						"kind": "value",
						"defaultValue": "No.unsafe",
						"deco": "E3std8typecons28__T4FlagVAyaa6_756e73616665Z4Flag",
						"name": "unsafe"
					}
				],
				"comment": "A typesafe structure for storing combination of enum values.\n\nThis template defines a simple struct to represent bitwise OR combinations of\nenum values. It can be used if all the enum values are integral constants with\na bit count of at most 1, or if the $(D unsafe) parameter is explicitly set to\nYes.\nThis is much safer than using the enum itself to store\nthe OR combination, which can produce surprising effects like this:\n----\nenum E\n{\n    A = 1<<0,\n    B = 1<<1\n}\nE e = E.A | E.B;\n// will throw SwitchError\nfinal switch(e)\n{\n    case E.A:\n        return;\n    case E.B:\n        return;\n}\n----\nExample:\nBitFlags can be manipulated with the usual operators\n---\n// You can use such an enum with BitFlags straight away\nenum Enum\n{\n    None,\n    A = 1<<0,\n    B = 1<<1,\n    C = 1<<2\n}\nstatic assert(__traits(compiles, BitFlags!Enum));\n\n// You need to specify the $(D unsafe) parameter for enum with custom values\nenum UnsafeEnum\n{\n    A,\n    B,\n    C,\n    D = B|C\n}\nstatic assert(!__traits(compiles, BitFlags!UnsafeEnum));\nstatic assert(__traits(compiles, BitFlags!(UnsafeEnum, Yes.unsafe)));\n\nimmutable BitFlags!Enum flags_empty;\n// A default constructed BitFlags has no value set\nassert(!(flags_empty & Enum.A) && !(flags_empty & Enum.B) && !(flags_empty & Enum.C));\n\n// Value can be set with the | operator\nimmutable BitFlags!Enum flags_A = flags_empty | Enum.A;\n\n// And tested with the & operator\nassert(flags_A & Enum.A);\n\n// Which commutes\nassert(Enum.A & flags_A);\n\n// BitFlags can be variadically initialized\nimmutable BitFlags!Enum flags_AB = BitFlags!Enum(Enum.A, Enum.B);\nassert((flags_AB & Enum.A) && (flags_AB & Enum.B) && !(flags_AB & Enum.C));\n\n// Use the ~ operator for subtracting flags\nimmutable BitFlags!Enum flags_B = flags_AB & ~BitFlags!Enum(Enum.A);\nassert(!(flags_B & Enum.A) && (flags_B & Enum.B) && !(flags_B & Enum.C));\n\n// You can use the EnumMembers template to set all flags\nimmutable BitFlags!Enum flags_all = EnumMembers!Enum;\n\n// use & between BitFlags for intersection\nimmutable BitFlags!Enum flags_BC = BitFlags!Enum(Enum.B, Enum.C);\nassert (flags_B == (flags_BC & flags_AB));\n\n// All the binary operators work in their assignment version\nBitFlags!Enum temp = flags_empty;\ntemp |= flags_AB;\nassert(temp == (flags_empty | flags_AB));\ntemp = flags_empty;\ntemp |= Enum.B;\nassert(temp == (flags_empty | Enum.B));\ntemp = flags_empty;\ntemp &= flags_AB;\nassert(temp == (flags_empty & flags_AB));\ntemp = flags_empty;\ntemp &= Enum.A;\nassert(temp == (flags_empty & Enum.A));\n\n// BitFlags with no value set evaluate to false\nassert(!flags_empty);\n\n// BitFlags with at least one value set evaluate to true\nassert(flags_A);\n\n// This can be useful to check intersection between BitFlags\nassert(flags_A & flags_AB);\nassert(flags_AB & Enum.A);\n\n// Finally, you can of course get you raw value out of flags\nauto value = cast(int)flags_A;\nassert(value == Enum.A);\n\n---\n",
				"name": "BitFlags"
			}
		],
		"name": "std.typecons",
		"comment": "This module implements a variety of type constructors, i.e., templates\nthat allow construction of new, useful general-purpose types.\n\nSource:    $(PHOBOSSRC std/_typecons.d)\n\nMacros:\n\nWIKI = Phobos/StdVariant\n\nSynopsis:\n\n----\n// value tuples\nalias Coord = Tuple!(float, \"x\", float, \"y\", float, \"z\");\nCoord c;\nc[1] = 1;       // access by index\nc.z = 1;        // access by given name\nalias DicEntry = Tuple!(string, string); // names can be omitted\n\n// Rebindable references to const and immutable objects\nvoid bar()\n{\n    const w1 = new Widget, w2 = new Widget;\n    w1.foo();\n    // w1 = w2 would not work; can't rebind const object\n    auto r = Rebindable!(const Widget)(w1);\n    // invoke method as if r were a Widget object\n    r.foo();\n    // rebind r to refer to another object\n    r = w2;\n}\n----\n\nCopyright: Copyright the respective authors, 2008-\nLicense:   $(WEB boost.org/LICENSE_1_0.txt, Boost License 1.0).\nAuthors:   $(WEB erdani.org, Andrei Alexandrescu),\n           $(WEB bartoszmilewski.wordpress.com, Bartosz Milewski),\n           Don Clugston,\n           Shin Fujishiro,\n           Kenji Hara\n"
	},
	{
		"kind": "module",
		"file": "../phobos/std/concurrency.d",
		"members": [
			{
				"kind": "class",
				"line": 220,
				"base": "object.Exception",
				"members": [],
				"char": 1,
				"name": "MessageMismatch",
				"comment": "\n\n\n\n Thrown on calls to $(D receiveOnly) if a message other than the type\n the receiving thread expected is sent.\n"
			},
			{
				"kind": "class",
				"line": 233,
				"base": "object.Exception",
				"members": [],
				"char": 1,
				"name": "OwnerTerminated",
				"comment": " Thrown on calls to $(D receive) if the thread that spawned the receiving\n thread has terminated and no more messages exist.\n"
			},
			{
				"kind": "class",
				"line": 248,
				"base": "object.Exception",
				"members": [],
				"char": 1,
				"name": "LinkTerminated",
				"comment": " Thrown if a linked thread has terminated.\n"
			},
			{
				"kind": "class",
				"line": 265,
				"base": "object.Exception",
				"members": [
					{
						"kind": "variable",
						"line": 276,
						"deco": "S3std7variant18__T8VariantNVmi32Z8VariantN",
						"char": 13,
						"name": "message",
						"comment": " The message that was sent.\n",
						"originalType": "Variant",
						"offset": 72
					}
				],
				"char": 1,
				"name": "PriorityMessageException",
				"comment": " Thrown if a message was sent to a thread via\n $(XREF concurrency, prioritySend) and the receiver does not have a handler\n for a message of this type.\n"
			},
			{
				"kind": "class",
				"line": 284,
				"base": "object.Exception",
				"members": [],
				"char": 1,
				"name": "MailboxFull",
				"comment": " Thrown on mailbox crowding if the mailbox is configured with\n $(D OnCrowding.throwException).\n"
			},
			{
				"kind": "class",
				"line": 300,
				"base": "object.Exception",
				"members": [],
				"char": 1,
				"name": "TidMissingException",
				"comment": " Thrown when a Tid is missing, e.g. when $(D ownerTid) doesn't\n find an owner thread.\n"
			},
			{
				"kind": "struct",
				"line": 317,
				"members": [
					{
						"kind": "function",
						"line": 337,
						"deco": "FMDFAxaZvZv",
						"endchar": 5,
						"char": 10,
						"parameters": [
							{
								"deco": "DFAxaZv",
								"storageClass": [
									"scope"
								],
								"name": "sink"
							}
						],
						"name": "toString",
						"comment": " Generate a convenient string for identifying this Tid.  This is only\n useful to see if Tid's that are currently executing are the same or\n different, e.g. for logging and debugging.  It is potentially possible\n that a Tid executed in the future will have the same toString() output\n as another Tid that has already terminated.\n",
						"endline": 341
					}
				],
				"char": 1,
				"name": "Tid",
				"comment": "\n\n\n\n An opaque type used to represent a logical thread.\n"
			},
			{
				"kind": "function",
				"line": 349,
				"deco": "FNdNfZS3std11concurrency3Tid",
				"endchar": 1,
				"char": 15,
				"name": "thisTid",
				"comment": " Returns the caller's Tid.\n",
				"endline": 361
			},
			{
				"kind": "function",
				"line": 369,
				"deco": "FNdZS3std11concurrency3Tid",
				"endchar": 1,
				"char": 15,
				"name": "ownerTid",
				"comment": " Return the Tid of the thread which spawned the caller's thread.\n\n Throws: A $(D TidMissingException) exception if\n there is no owner thread.\n",
				"endline": 374
			},
			{
				"kind": "template",
				"line": 466,
				"constraint": "isSpawnable!(F, T)",
				"members": [
					{
						"kind": "function",
						"line": 466,
						"endchar": 1,
						"char": 5,
						"type": "Tid(F fn, T args)",
						"parameters": [
							{
								"type": "F",
								"name": "fn"
							},
							{
								"type": "T",
								"name": "args"
							}
						],
						"name": "spawn",
						"endline": 472
					}
				],
				"char": 5,
				"parameters": [
					{
						"kind": "type",
						"name": "F"
					},
					{
						"kind": "tuple",
						"name": "T"
					}
				],
				"comment": " Starts fn(args) in a new logical thread.\n\n Executes the supplied function in a new logical thread represented by\n $(D Tid).  The calling thread is designated as the owner of the new thread.\n When the owner thread terminates an $(D OwnerTerminated) message will be\n sent to the new thread, causing an $(D OwnerTerminated) exception to be\n thrown on $(D receive()).\n\n Params:\n  fn   = The function to execute.\n  args = Arguments to the function.\n\n Returns:\n  A Tid representing the new logical thread.\n\n Notes:\n  $(D args) must not have unshared aliasing.  In other words, all arguments\n  to $(D fn) must either be $(D shared) or $(D immutable) or have no\n  pointer indirection.  This is necessary for enforcing isolation among\n  threads.\n\n Example:\n ---\n import std.stdio, std.concurrency;\n\n void f1(string str)\n {\n     writeln(str);\n }\n\n void f2(char[] str)\n {\n     writeln(str);\n }\n\n void main()\n {\n     auto str = \"Hello, world\";\n\n     // Works:  string is immutable.\n     auto tid1 = spawn(&f1, str);\n\n     // Fails:  char[] has mutable aliasing.\n     auto tid2 = spawn(&f2, str.dup);\n }\n ---\n",
				"name": "spawn"
			},
			{
				"kind": "template",
				"line": 494,
				"constraint": "isSpawnable!(F, T)",
				"members": [
					{
						"kind": "function",
						"line": 494,
						"endchar": 1,
						"char": 5,
						"type": "Tid(F fn, T args)",
						"parameters": [
							{
								"type": "F",
								"name": "fn"
							},
							{
								"type": "T",
								"name": "args"
							}
						],
						"name": "spawnLinked",
						"endline": 500
					}
				],
				"char": 5,
				"parameters": [
					{
						"kind": "type",
						"name": "F"
					},
					{
						"kind": "tuple",
						"name": "T"
					}
				],
				"comment": " Starts fn(args) in a logical thread and will receive a LinkTerminated\n message when the operation terminates.\n\n Executes the supplied function in a new logical thread represented by\n Tid.  This new thread is linked to the calling thread so that if either\n it or the calling thread terminates a LinkTerminated message will be sent\n to the other, causing a LinkTerminated exception to be thrown on receive().\n The owner relationship from spawn() is preserved as well, so if the link\n between threads is broken, owner termination will still result in an\n OwnerTerminated exception to be thrown on receive().\n\n Params:\n  fn   = The function to execute.\n  args = Arguments to the function.\n\n Returns:\n  A Tid representing the new thread.\n",
				"name": "spawnLinked"
			},
			{
				"kind": "template",
				"line": 590,
				"members": [
					{
						"kind": "function",
						"line": 590,
						"endchar": 1,
						"char": 6,
						"type": "void(Tid tid, T vals)",
						"parameters": [
							{
								"type": "Tid",
								"name": "tid"
							},
							{
								"type": "T",
								"name": "vals"
							}
						],
						"name": "send",
						"endline": 595
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "tuple",
						"name": "T"
					}
				],
				"comment": "\n\n\n\n Places the values as a message at the back of tid's message queue.\n\n Sends the supplied value to the thread represented by tid.  As with\n $(XREF concurrency, spawn), $(D T) must not have unshared aliasing.\n",
				"name": "send"
			},
			{
				"kind": "template",
				"line": 605,
				"members": [
					{
						"kind": "function",
						"line": 605,
						"endchar": 1,
						"char": 6,
						"type": "void(Tid tid, T vals)",
						"parameters": [
							{
								"type": "Tid",
								"name": "tid"
							},
							{
								"type": "T",
								"name": "vals"
							}
						],
						"name": "prioritySend",
						"endline": 610
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "tuple",
						"name": "T"
					}
				],
				"comment": " Places the values as a message on the front of tid's message queue.\n\n Send a message to $(D tid) but place it at the front of $(D tid)'s message\n queue instead of at the back.  This function is typically used for\n out-of-band communication, to signal exceptional conditions, etc.\n",
				"name": "prioritySend"
			},
			{
				"kind": "template",
				"line": 668,
				"members": [
					{
						"kind": "function",
						"line": 668,
						"endchar": 1,
						"char": 6,
						"type": "void(T ops)",
						"parameters": [
							{
								"type": "T",
								"name": "ops"
							}
						],
						"name": "receive",
						"endline": 680
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "tuple",
						"name": "T"
					}
				],
				"comment": " Receives a message from another thread.\n\n Receive a message from another thread, or block if no messages of the\n specified types are available.  This function works by pattern matching\n a message against a set of delegates and executing the first match found.\n\n If a delegate that accepts a $(XREF variant, Variant) is included as\n the last argument to $(D receive), it will match any message that was not\n matched by an earlier delegate.  If more than one argument is sent,\n the $(D Variant) will contain a $(XREF typecons, Tuple) of all values\n sent.\n\n Example:\n ---\n import std.stdio;\n import std.variant;\n import std.concurrency;\n\n void spawnedFunction()\n {\n     receive(\n         (int i) { writeln(\"Received an int.\"); },\n         (float f) { writeln(\"Received a float.\"); },\n         (Variant v) { writeln(\"Received some other type.\"); }\n     );\n }\n\n void main()\n {\n      auto tid = spawn(&spawnedFunction);\n      send(tid, 42);\n }\n ---\n",
				"name": "receive"
			},
			{
				"kind": "template",
				"line": 752,
				"members": [
					{
						"kind": "function",
						"line": 752,
						"endchar": 1,
						"char": 20,
						"type": "receiveOnlyRet!T()",
						"name": "receiveOnly",
						"endline": 792
					}
				],
				"char": 20,
				"parameters": [
					{
						"kind": "tuple",
						"name": "T"
					}
				],
				"comment": " Receives only messages with arguments of types $(D T).\n\n Throws:  $(D MessageMismatch) if a message of types other than $(D T)\n          is received.\n\n Returns: The received message.  If $(D T.length) is greater than one,\n          the message will be packed into a $(XREF typecons, Tuple).\n\n Example:\n ---\n import std.concurrency;\n\n void spawnedFunc()\n {\n     auto msg = receiveOnly!(int, string)();\n     assert(msg[0] == 42);\n     assert(msg[1] == \"42\");\n }\n\n void main()\n {\n     auto tid = spawn(&spawnedFunc);\n     send(tid, 42, \"42\");\n }\n ---\n",
				"name": "receiveOnly"
			},
			{
				"kind": "template",
				"line": 823,
				"members": [
					{
						"kind": "function",
						"line": 823,
						"endchar": 1,
						"char": 6,
						"type": "bool(Duration duration, T ops)",
						"parameters": [
							{
								"type": "Duration",
								"name": "duration"
							},
							{
								"type": "T",
								"name": "ops"
							}
						],
						"name": "receiveTimeout",
						"endline": 835
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "tuple",
						"name": "T"
					}
				],
				"comment": " Tries to receive but will give up if no matches arrive within duration.\n\n Same as $(D receive) except that rather than wait forever for a message,\n it waits until either it receives a message or the given\n $(CXREF time, Duration) has passed. It returns $(D true) if it received a\n message and $(D false) if it timed out waiting for one.\n",
				"name": "receiveTimeout"
			},
			{
				"kind": "enum",
				"line": 870,
				"members": [
					{
						"kind": "enum member",
						"line": 872,
						"value": "0",
						"char": 5,
						"name": "block",
						"comment": "Wait until room is available.\n"
					},
					{
						"kind": "enum member",
						"line": 873,
						"value": "1",
						"char": 5,
						"name": "throwException",
						"comment": "Throw a MailboxFull exception.\n"
					},
					{
						"kind": "enum member",
						"line": 874,
						"value": "2",
						"char": 5,
						"name": "ignore",
						"comment": "Abort the send and return.\n"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "OnCrowding",
				"comment": "\n\n\n\n These behaviors may be specified when a mailbox is full.\n"
			},
			{
				"kind": "function",
				"line": 913,
				"deco": "FS3std11concurrency3TidmE3std11concurrency10OnCrowdingZv",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "S3std11concurrency3Tid",
						"name": "tid"
					},
					{
						"deco": "m",
						"name": "messages"
					},
					{
						"deco": "E3std11concurrency10OnCrowding",
						"name": "doThis"
					}
				],
				"name": "setMaxMailboxSize",
				"comment": " Sets a maximum mailbox size.\n\n Sets a limit on the maximum number of user messages allowed in the mailbox.\n If this limit is reached, the caller attempting to add a new message will\n execute the behavior specified by doThis.  If messages is zero, the mailbox\n is unbounded.\n\n Params:\n  tid      = The Tid of the thread for which this limit should be set.\n  messages = The maximum number of messages or zero if no limit.\n  doThis   = The behavior executed when a message is sent to a full\n             mailbox.\n",
				"originalType": "void(Tid tid, size_t messages, OnCrowding doThis)",
				"endline": 924
			},
			{
				"kind": "function",
				"line": 940,
				"deco": "FS3std11concurrency3TidmPFS3std11concurrency3TidZbZv",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "S3std11concurrency3Tid",
						"name": "tid"
					},
					{
						"deco": "m",
						"name": "messages"
					},
					{
						"deco": "PFS3std11concurrency3TidZb",
						"name": "onCrowdingDoThis"
					}
				],
				"name": "setMaxMailboxSize",
				"comment": " Sets a maximum mailbox size.\n\n Sets a limit on the maximum number of user messages allowed in the mailbox.\n If this limit is reached, the caller attempting to add a new message will\n execute onCrowdingDoThis.  If messages is zero, the mailbox is unbounded.\n\n Params:\n  tid      = The Tid of the thread for which this limit should be set.\n  messages = The maximum number of messages or zero if no limit.\n  onCrowdingDoThis = The routine called when a message is sent to a full\n                     mailbox.\n",
				"originalType": "void(Tid tid, size_t messages, bool function(Tid) onCrowdingDoThis)",
				"endline": 943
			},
			{
				"kind": "function",
				"line": 996,
				"deco": "FAyaS3std11concurrency3TidZb",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "Aya",
						"name": "name"
					},
					{
						"deco": "S3std11concurrency3Tid",
						"name": "tid"
					}
				],
				"name": "register",
				"comment": " Associates name with tid.\n\n Associates name with tid in a process-local map.  When the thread\n represented by tid terminates, any names associated with it will be\n automatically unregistered.\n\n Params:\n  name = The name to associate with tid.\n  tid  = The tid register by name.\n\n Returns:\n  true if the name is available and tid is not known to represent a\n  defunct thread.\n",
				"endline": 1008
			},
			{
				"kind": "function",
				"line": 1020,
				"deco": "FAyaZb",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "Aya",
						"name": "name"
					}
				],
				"name": "unregister",
				"comment": " Removes the registered name associated with a tid.\n\n Params:\n  name = The name to unregister.\n\n Returns:\n  true if the name is registered, false if not.\n",
				"endline": 1034
			},
			{
				"kind": "function",
				"line": 1046,
				"deco": "FAyaZS3std11concurrency3Tid",
				"endchar": 1,
				"char": 5,
				"parameters": [
					{
						"deco": "Aya",
						"name": "name"
					}
				],
				"name": "locate",
				"comment": " Gets the Tid associated with name.\n\n Params:\n  name = The name to locate within the registry.\n\n Returns:\n  The associated Tid or Tid.init if name is not registered.\n",
				"endline": 1054
			},
			{
				"kind": "struct",
				"line": 1069,
				"members": [
					{
						"kind": "function",
						"line": 1082,
						"storageClass": [
							"static"
						],
						"deco": "FNbNcNdZS3std11concurrency10ThreadInfo",
						"endchar": 5,
						"char": 26,
						"name": "thisInfo",
						"comment": " Gets a thread-local instance of ThreadInfo.\n\n Gets a thread-local instance of ThreadInfo, which should be used as the\n default instance when info is requested for a thread not created by the\n Scheduler.\n",
						"originalType": "nothrow @property ref ()",
						"endline": 1086
					},
					{
						"kind": "function",
						"line": 1096,
						"deco": "FZv",
						"endchar": 5,
						"char": 10,
						"name": "cleanup",
						"comment": " Cleans up this ThreadInfo.\n\n This must be called when a scheduled thread terminates.  It tears down\n the messaging system for the thread and notifies interested parties of\n the thread's termination.\n",
						"endline": 1105
					}
				],
				"char": 1,
				"name": "ThreadInfo",
				"comment": "\n\n\n\n Encapsulates all implementation-level data needed for scheduling.\n\n When definining a Scheduler, an instance of this struct must be associated\n with each logical thread.  It contains all implementation-level information\n needed by the internal API.\n"
			},
			{
				"kind": "interface",
				"line": 1141,
				"members": [
					{
						"kind": "function",
						"line": 1157,
						"storageClass": [
							"abstract"
						],
						"deco": "FDFZvZv",
						"char": 10,
						"parameters": [
							{
								"deco": "DFZv",
								"name": "op"
							}
						],
						"name": "start",
						"comment": " Spawns the supplied op and starts the Scheduler.\n\n This is intended to be called at the start of the program to yield all\n scheduling to the active Scheduler instance.  This is necessary for\n schedulers that explicitly dispatch threads rather than simply relying\n on the operating system to do so, and so start should always be called\n within main() to begin normal program execution.\n\n Params:\n  op = A wrapper for whatever the main thread would have done in the\n       absence of a custom scheduler.  It will be automatically executed\n       via a call to spawn by the Scheduler.\n"
					},
					{
						"kind": "function",
						"line": 1172,
						"storageClass": [
							"abstract"
						],
						"deco": "FDFZvZv",
						"char": 10,
						"parameters": [
							{
								"deco": "DFZv",
								"name": "op"
							}
						],
						"name": "spawn",
						"comment": " Assigns a logical thread to execute the supplied op.\n\n This routine is called by spawn.  It is expected to instantiate a new\n logical thread and run the supplied operation.  This thread must call\n thisInfo.cleanup() when the thread terminates if the scheduled thread\n is not a kernel thread--all kernel threads will have their ThreadInfo\n cleaned up automatically by a thread-local destructor.\n\n Params:\n  op = The function to execute.  This may be the actual function passed\n       by the user to spawn itself, or may be a wrapper function.\n"
					},
					{
						"kind": "function",
						"line": 1183,
						"storageClass": [
							"abstract"
						],
						"deco": "FNbZv",
						"char": 10,
						"name": "yield",
						"comment": " Yields execution to another logical thread.\n\n This routine is called at various points within concurrency-aware APIs\n to provide a scheduler a chance to yield execution when using some sort\n of cooperative multithreading model.  If this is not appropriate, such\n as when each logical thread is backed by a dedicated kernel thread,\n this routine may be a no-op.\n"
					},
					{
						"kind": "function",
						"line": 1192,
						"storageClass": [
							"abstract"
						],
						"deco": "FNbNcNdZS3std11concurrency10ThreadInfo",
						"char": 30,
						"name": "thisInfo",
						"comment": " Returns an appropriate ThreadInfo instance.\n\n Returns an instance of ThreadInfo specific to the logical thread that\n is calling this routine or, if the calling thread was not create by\n this scheduler, returns ThreadInfo.thisInfo instead.\n"
					},
					{
						"kind": "function",
						"line": 1209,
						"storageClass": [
							"abstract"
						],
						"deco": "FNbC4core4sync5mutex5MutexZC4core4sync9condition9Condition",
						"char": 15,
						"parameters": [
							{
								"deco": "C4core4sync5mutex5Mutex",
								"name": "m"
							}
						],
						"name": "newCondition",
						"comment": " Creates a Condition varialbe analog for signaling.\n\n Creates a new Condition variable analog which is used to check for and\n to signal the addition of messages to a thread's message queue.  Like\n yield, some schedulers may need to define custom behavior so that calls\n to Condition.wait() yield to another thread when no new messages are\n available instead of blocking.\n\n Params:\n  m = The Mutex that will be associated with this condition.  It will be\n      locked prior to any operation on the condition, and so in some\n      cases a Scheduler may need to hold this reference and unlock the\n      mutex before yielding execution to another logical thread.\n"
					}
				],
				"char": 1,
				"name": "Scheduler",
				"comment": " A Scheduler controls how threading is performed by spawn.\n\n Implementing a Scheduler allows the concurrency mechanism used by this\n module to be customized according to different needs.  By default, a call\n to spawn will create a new kernel thread that executes the supplied routine\n and terminates when finished.  But it is possible to create Schedulers that\n reuse threads, that multiplex Fibers (coroutines) across a single thread,\n or any number of other approaches.  By making the choice of Scheduler a\n user-level option, std.concurrency may be used for far more types of\n application than if this behavior were predefined.\n\n Example:\n ---\n import std.concurrency;\n import std.stdio;\n\n void main()\n {\n     scheduler = new FiberScheduler;\n     scheduler.start(\n     {\n         writeln(\"the rest of main goes here\");\n     });\n }\n ---\n\n Some schedulers have a dispatching loop that must run if they are to work\n properly, so for the sake of consistency, when using a scheduler, start()\n must be called within main().  This yields control to the scheduler and\n will ensure that any spawned threads are executed in an expected manner.\n"
			},
			{
				"kind": "class",
				"line": 1221,
				"members": [
					{
						"kind": "function",
						"line": 1228,
						"deco": "FDFZvZv",
						"endchar": 5,
						"char": 10,
						"parameters": [
							{
								"deco": "DFZv",
								"name": "op"
							}
						],
						"name": "start",
						"comment": " This simply runs op directly, since no real scheduling is needed by\n this approach.\n",
						"endline": 1231,
						"overrides": [
							"std.concurrency.Scheduler.start"
						]
					},
					{
						"kind": "function",
						"line": 1237,
						"deco": "FDFZvZv",
						"endchar": 5,
						"char": 10,
						"parameters": [
							{
								"deco": "DFZv",
								"name": "op"
							}
						],
						"name": "spawn",
						"comment": " Creates a new kernel thread and assigns it to run the supplied op.\n",
						"endline": 1241,
						"overrides": [
							"std.concurrency.Scheduler.spawn"
						]
					},
					{
						"kind": "function",
						"line": 1247,
						"deco": "FNbZv",
						"endchar": 5,
						"char": 10,
						"name": "yield",
						"comment": " This scheduler does no explicit multiplexing, so this is a no-op.\n",
						"endline": 1250,
						"overrides": [
							"std.concurrency.Scheduler.yield"
						]
					},
					{
						"kind": "function",
						"line": 1257,
						"deco": "FNbNcNdZS3std11concurrency10ThreadInfo",
						"endchar": 5,
						"char": 30,
						"name": "thisInfo",
						"comment": " Returns ThreadInfo.thisInfo, since it is a thread-local instance of\n ThreadInfo, which is the correct behavior for this scheduler.\n",
						"endline": 1260,
						"overrides": [
							"std.concurrency.Scheduler.thisInfo"
						]
					},
					{
						"kind": "function",
						"line": 1266,
						"deco": "FNbC4core4sync5mutex5MutexZC4core4sync9condition9Condition",
						"endchar": 5,
						"char": 15,
						"parameters": [
							{
								"deco": "C4core4sync5mutex5Mutex",
								"name": "m"
							}
						],
						"name": "newCondition",
						"comment": " Creates a new Condition variable.  No custom behavior is needed here.\n",
						"endline": 1269,
						"overrides": [
							"std.concurrency.Scheduler.newCondition"
						]
					}
				],
				"char": 1,
				"interfaces": [
					"std.concurrency.Scheduler"
				],
				"name": "ThreadScheduler",
				"comment": " An example Scheduler using kernel threads.\n\n This is an example Scheduler that mirrors the default scheduling behavior\n of creating one kernel thread per call to spawn.  It is fully functional\n and may be instantiated and used, but is not a necessary part of the\n default functioning of this module.\n"
			},
			{
				"kind": "class",
				"line": 1279,
				"members": [
					{
						"kind": "function",
						"line": 1286,
						"deco": "FDFZvZv",
						"endchar": 5,
						"char": 10,
						"parameters": [
							{
								"deco": "DFZv",
								"name": "op"
							}
						],
						"name": "start",
						"comment": " This creates a new Fiber for the supplied op and then starts the\n dispatcher.\n",
						"endline": 1290,
						"overrides": [
							"std.concurrency.Scheduler.start"
						]
					},
					{
						"kind": "function",
						"line": 1297,
						"deco": "FNbDFZvZv",
						"endchar": 5,
						"char": 10,
						"parameters": [
							{
								"deco": "DFZv",
								"name": "op"
							}
						],
						"name": "spawn",
						"comment": " This created a new Fiber for the supplied op and adds it to the\n dispatch list.\n",
						"endline": 1301,
						"overrides": [
							"std.concurrency.Scheduler.spawn"
						]
					},
					{
						"kind": "function",
						"line": 1308,
						"deco": "FNbZv",
						"endchar": 5,
						"char": 10,
						"name": "yield",
						"comment": " If the caller is a scheduled Fiber, this yields execution to another\n scheduled Fiber.\n",
						"endline": 1315,
						"overrides": [
							"std.concurrency.Scheduler.yield"
						]
					},
					{
						"kind": "function",
						"line": 1325,
						"deco": "FNbNcNdZS3std11concurrency10ThreadInfo",
						"endchar": 5,
						"char": 30,
						"name": "thisInfo",
						"comment": " Returns an appropriate ThreadInfo instance.\n\n Returns a ThreadInfo instance specific to the calling Fiber if the\n Fiber was created by this dispatcher, otherwise it returns\n ThreadInfo.thisInfo.\n",
						"endline": 1332,
						"overrides": [
							"std.concurrency.Scheduler.thisInfo"
						]
					},
					{
						"kind": "function",
						"line": 1338,
						"deco": "FNbC4core4sync5mutex5MutexZC4core4sync9condition9Condition",
						"endchar": 5,
						"char": 15,
						"parameters": [
							{
								"deco": "C4core4sync5mutex5Mutex",
								"name": "m"
							}
						],
						"name": "newCondition",
						"comment": " Returns a Condition analog that yields when wait or notify is called.\n",
						"endline": 1341,
						"overrides": [
							"std.concurrency.Scheduler.newCondition"
						]
					}
				],
				"char": 1,
				"interfaces": [
					"std.concurrency.Scheduler"
				],
				"name": "FiberScheduler",
				"comment": " An example Scheduler using Fibers.\n\n This is an example scheduler that creates a new Fiber per call to spawn\n and multiplexes the execution of all fibers within the main thread.\n"
			},
			{
				"kind": "variable",
				"line": 1505,
				"storageClass": [
					"__gshared"
				],
				"deco": "C3std11concurrency9Scheduler",
				"char": 21,
				"name": "scheduler",
				"comment": " Sets the Scheduler behavior within the program.\n\n This variable sets the Scheduler behavior within this program.  Typically,\n when setting a Scheduler, scheduler.start() should be called in main.  This\n routine will not return until program execution is complete.\n",
				"originalType": "Scheduler"
			},
			{
				"kind": "function",
				"line": 1517,
				"deco": "FNbZv",
				"endchar": 1,
				"char": 6,
				"name": "yield",
				"comment": "\n\n\n\n If the caller is a Fiber and is not a Generator, this function will call\n scheduler.yield() or Fiber.yield(), as appropriate.\n",
				"endline": 1529
			},
			{
				"kind": "template",
				"line": 1569,
				"members": [
					{
						"kind": "class",
						"line": 1569,
						"members": [
							{
								"kind": "constructor",
								"line": 1583,
								"endchar": 5,
								"char": 5,
								"type": "(void function() fn)",
								"parameters": [
									{
										"type": "void function()",
										"name": "fn"
									}
								],
								"name": "this",
								"comment": " Initializes a generator object which is associated with a static\n D function.  The function will be called once to prepare the range\n for iteration.\n\n Params:\n  fn = The fiber function.\n\n In:\n  fn must not be null.\n",
								"endline": 1587
							},
							{
								"kind": "constructor",
								"line": 1602,
								"endchar": 5,
								"char": 5,
								"type": "(void function() fn, size_t sz)",
								"parameters": [
									{
										"type": "void function()",
										"name": "fn"
									},
									{
										"type": "size_t",
										"name": "sz"
									}
								],
								"name": "this",
								"comment": " Initializes a generator object which is associated with a static\n D function.  The function will be called once to prepare the range\n for iteration.\n\n Params:\n  fn = The fiber function.\n  sz = The stack size for this fiber.\n\n In:\n  fn must not be null.\n",
								"endline": 1606
							},
							{
								"kind": "constructor",
								"line": 1620,
								"endchar": 5,
								"char": 5,
								"type": "(void delegate() dg)",
								"parameters": [
									{
										"type": "void delegate()",
										"name": "dg"
									}
								],
								"name": "this",
								"comment": " Initializes a generator object which is associated with a dynamic\n D function.  The function will be called once to prepare the range\n for iteration.\n\n Params:\n  dg = The fiber function.\n\n In:\n  dg must not be null.\n",
								"endline": 1624
							},
							{
								"kind": "constructor",
								"line": 1639,
								"endchar": 5,
								"char": 5,
								"type": "(void delegate() dg, size_t sz)",
								"parameters": [
									{
										"type": "void delegate()",
										"name": "dg"
									},
									{
										"type": "size_t",
										"name": "sz"
									}
								],
								"name": "this",
								"comment": " Initializes a generator object which is associated with a dynamic\n D function.  The function will be called once to prepare the range\n for iteration.\n\n Params:\n  dg = The fiber function.\n  sz = The stack size for this fiber.\n\n In:\n  dg must not be null.\n",
								"endline": 1643
							},
							{
								"kind": "function",
								"line": 1649,
								"storageClass": [
									"final"
								],
								"endchar": 5,
								"char": 16,
								"type": "@property bool()",
								"name": "empty",
								"comment": " Returns true if the generator is empty.\n",
								"endline": 1652
							},
							{
								"kind": "function",
								"line": 1658,
								"storageClass": [
									"final"
								],
								"endchar": 5,
								"char": 16,
								"type": "void()",
								"name": "popFront",
								"comment": " Obtains the next value from the underlying function.\n",
								"endline": 1661
							},
							{
								"kind": "function",
								"line": 1667,
								"storageClass": [
									"final"
								],
								"endchar": 5,
								"char": 13,
								"type": "@property T()",
								"name": "front",
								"comment": " Returns the most recently generated value.\n",
								"endline": 1670
							}
						],
						"char": 1,
						"name": "Generator"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": " A Generator is a Fiber that periodically returns values of type T to the\n caller via yield.  This is represented as an InputRange.\n\n Example:\n ---\n import std.concurrency;\n import std.stdio;\n\n\n void main()\n {\n     auto tid = spawn(\n     {\n         while (true)\n         {\n             writeln(receiveOnly!int());\n         }\n     });\n\n     auto r = new Generator!int(\n     {\n         foreach (i; 1 .. 10)\n             yield(i);\n     });\n\n     foreach (e; r)\n     {\n         tid.send(e);\n     }\n }\n ---\n",
				"name": "Generator"
			},
			{
				"kind": "template",
				"line": 1685,
				"members": [
					{
						"kind": "function",
						"line": 1685,
						"endchar": 1,
						"char": 6,
						"type": "void(ref T value)",
						"parameters": [
							{
								"storageClass": [
									"ref"
								],
								"type": "T",
								"name": "value"
							}
						],
						"name": "yield",
						"endline": 1695
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": " Yields a value of type T to the caller of the currently executing\n generator.\n\n Params:\n  value = The value to yield.\n",
				"name": "yield"
			},
			{
				"kind": "template",
				"line": 1699,
				"members": [
					{
						"kind": "function",
						"line": 1699,
						"endchar": 1,
						"char": 6,
						"type": "void(T value)",
						"parameters": [
							{
								"type": "T",
								"name": "value"
							}
						],
						"name": "yield",
						"endline": 1702
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": "ditto\n",
				"name": "yield"
			},
			{
				"kind": "template",
				"line": 2543,
				"members": [
					{
						"kind": "function",
						"line": 2543,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 10,
						"type": "ref (lazy typeof(var) init)",
						"parameters": [
							{
								"storageClass": [
									"lazy"
								],
								"type": "typeof(var)",
								"name": "init"
							}
						],
						"name": "initOnce",
						"endline": 2546
					}
				],
				"char": 10,
				"parameters": [
					{
						"kind": "alias",
						"name": "var"
					}
				],
				"comment": " Initializes $(D_PARAM var) with the lazy $(D_PARAM init) value in a\n thread-safe manner.\n\n The implementation guarantees that all threads simultaneously calling\n initOnce with the same $(D_PARAM var) argument block until $(D_PARAM var) is\n fully initialized. All side-effects of $(D_PARAM init) are globally visible\n afterwards.\n\n Params:\n   var = The variable to initialize\n   init = The lazy initializer value\n\n Returns:\n   A reference to the initialized variable\nExample:\nA typical use-case is to perform lazy but thread-safe initialization.\n---\nstatic class MySingleton\n{\n    static MySingleton instance()\n    {\n        static __gshared MySingleton inst;\n        return initOnce!inst(new MySingleton);\n    }\n}\nassert(MySingleton.instance !is null);\n\n---\n",
				"name": "initOnce"
			},
			{
				"kind": "template",
				"line": 2600,
				"members": [
					{
						"kind": "function",
						"line": 2600,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 10,
						"type": "ref (lazy typeof(var) init, Mutex mutex)",
						"parameters": [
							{
								"storageClass": [
									"lazy"
								],
								"type": "typeof(var)",
								"name": "init"
							},
							{
								"type": "Mutex",
								"name": "mutex"
							}
						],
						"name": "initOnce",
						"endline": 2619
					}
				],
				"char": 10,
				"parameters": [
					{
						"kind": "alias",
						"name": "var"
					}
				],
				"comment": " Same as above, but takes a separate mutex instead of sharing one among\n all initOnce instances.\n\n This should be used to avoid dead-locks when the $(D_PARAM init)\n expression waits for the result of another thread that might also\n call initOnce. Use with care.\n\n Params:\n   var = The variable to initialize\n   init = The lazy initializer value\n   mutex = A mutex to prevent race conditions\n\n Returns:\n   A reference to the initialized variable\nExample:\nUse a separate mutex when init blocks on another thread that might also call initOnce.\n---\nstatic shared bool varA, varB;\n__gshared Mutex m;\nm = new Mutex;\n\nspawn({\n    // use a different mutex for varB to avoid a dead-lock\n    initOnce!varB(true, m);\n    ownerTid.send(true);\n});\n// init depends on the result of the spawned thread\ninitOnce!varA(receiveOnly!bool);\nassert(varA == true);\nassert(varB == true);\n\n---\n",
				"name": "initOnce"
			}
		],
		"name": "std.concurrency",
		"comment": " This is a low-level messaging API upon which more structured or restrictive\n APIs may be built.  The general idea is that every messageable entity is\n represented by a common handle type called a Tid, which allows messages to\n be sent to logical threads that are executing in both the current process\n and in external processes using the same interface.  This is an important\n aspect of scalability because it allows the components of a program to be\n spread across available resources with few to no changes to the actual\n implementation.\n\n A logical thread is an execution context that has its own stack and which\n runs asynchronously to other logical threads.  These may be preemptively\n scheduled kernel threads, fibers (cooperative user-space threads), or some\n other concept with similar behavior.\n\n The type of concurrency used when logical threads are created is determined\n by the Scheduler selected at initialization time.  The default behavior is\n currently to create a new kernel thread per call to spawn, but other\n schedulers are available that multiplex fibers across the main thread or\n use some combination of the two approaches.\n\n Synposis:\n ---\n import std.stdio;\n import std.concurrency;\n\n void spawnedFunc(Tid ownerTid)\n {\n     // Receive a message from the owner thread.\n     receive(\n         (int i) { writeln(\"Received the number \", i);}\n     );\n\n     // Send a message back to the owner thread\n     // indicating success.\n     send(ownerTid, true);\n }\n\n void main()\n {\n     // Start spawnedFunc in a new thread.\n     auto childTid = spawn(&spawnedFunc, thisTid);\n\n     // Send the number 42 to this new thread.\n     send(childTid, 42);\n\n     // Receive the result code.\n     auto wasSuccessful = receiveOnly!(bool);\n     assert(wasSuccessful);\n     writeln(\"Successfully printed number.\");\n }\n ---\n\n Copyright: Copyright Sean Kelly 2009 - 2014.\n License:   <a href=\"http://www.boost.org/LICENSE_1_0.txt\">Boost License 1.0</a>.\n Authors:   Sean Kelly, Alex Rønne Petersen, Martin Nowak\n Source:    $(PHOBOSSRC std/_concurrency.d)\n"
	},
	{
		"kind": "module",
		"file": "../phobos/std/container/dlist.d",
		"members": [
			{
				"kind": "template",
				"line": 140,
				"members": [
					{
						"kind": "struct",
						"line": 140,
						"members": [
							{
								"kind": "template",
								"line": 193,
								"constraint": "isImplicitlyConvertible!(U, T)",
								"members": [
									{
										"kind": "constructor",
										"line": 193,
										"endchar": 5,
										"char": 5,
										"type": "(U[] values...)",
										"parameters": [
											{
												"type": "U[]",
												"name": "values"
											}
										],
										"name": "this",
										"endline": 196
									}
								],
								"char": 5,
								"parameters": [
									{
										"kind": "type",
										"name": "U"
									}
								],
								"comment": "Constructor taking a number of nodes\n",
								"name": "this"
							},
							{
								"kind": "template",
								"line": 201,
								"constraint": "isInputRange!Stuff && isImplicitlyConvertible!(ElementType!Stuff, T)",
								"members": [
									{
										"kind": "constructor",
										"line": 201,
										"endchar": 5,
										"char": 5,
										"type": "(Stuff stuff)",
										"parameters": [
											{
												"type": "Stuff",
												"name": "stuff"
											}
										],
										"name": "this",
										"endline": 205
									}
								],
								"char": 5,
								"parameters": [
									{
										"kind": "type",
										"name": "Stuff"
									}
								],
								"comment": "Constructor taking an input range\n",
								"name": "this"
							},
							{
								"kind": "template",
								"line": 213,
								"constraint": "is(typeof(front == front))",
								"members": [
									{
										"kind": "function",
										"line": 213,
										"endchar": 5,
										"char": 10,
										"type": "const bool(ref const DList rhs)",
										"parameters": [
											{
												"storageClass": [
													"const",
													"ref"
												],
												"type": "DList",
												"name": "rhs"
											}
										],
										"name": "opEquals",
										"endline": 237
									}
								],
								"char": 10,
								"parameters": [],
								"comment": "Comparison for equality.\n\nComplexity: $(BIGOH min(n, n1)) where $(D n1) is the number of\nelements in $(D rhs).\n",
								"name": "opEquals"
							},
							{
								"kind": "struct",
								"line": 242,
								"members": [],
								"char": 5,
								"name": "Range",
								"comment": "    Defines the container's primary range, which embodies a bidirectional range.\n"
							},
							{
								"kind": "function",
								"line": 279,
								"endchar": 5,
								"char": 10,
								"type": "const nothrow @property bool()",
								"name": "empty",
								"comment": "Property returning $(D true) if and only if the container has no\nelements.\n\nComplexity: $(BIGOH 1)\n",
								"endline": 282
							},
							{
								"kind": "function",
								"line": 291,
								"endchar": 5,
								"char": 10,
								"type": "void()",
								"name": "clear",
								"comment": "Removes all contents from the $(D DList).\n\nPostcondition: $(D empty)\n\nComplexity: $(BIGOH 1)\n",
								"endline": 295
							},
							{
								"kind": "function",
								"line": 303,
								"endchar": 5,
								"char": 21,
								"type": "@property DList()",
								"name": "dup",
								"comment": "Duplicates the container. The elements themselves are not transitively\nduplicated.\n\nComplexity: $(BIGOH n).\n",
								"endline": 306
							},
							{
								"kind": "function",
								"line": 314,
								"endchar": 5,
								"char": 11,
								"type": "Range()",
								"name": "opSlice",
								"comment": "Returns a range that iterates over all elements of the container, in\nforward order.\n\nComplexity: $(BIGOH 1)\n",
								"endline": 320
							},
							{
								"kind": "function",
								"line": 327,
								"endchar": 5,
								"char": 28,
								"type": "inout @property ref inout(T)()",
								"name": "front",
								"comment": "Forward to $(D opSlice().front).\n\nComplexity: $(BIGOH 1)\n",
								"endline": 331
							},
							{
								"kind": "function",
								"line": 338,
								"endchar": 5,
								"char": 28,
								"type": "inout @property ref inout(T)()",
								"name": "back",
								"comment": "Forward to $(D opSlice().back).\n\nComplexity: $(BIGOH 1)\n",
								"endline": 342
							},
							{
								"kind": "template",
								"line": 352,
								"constraint": "op == \"~\" && is(typeof(insertBack(rhs)))",
								"members": [
									{
										"kind": "function",
										"line": 352,
										"endchar": 5,
										"char": 11,
										"type": "DList(Stuff rhs)",
										"parameters": [
											{
												"type": "Stuff",
												"name": "rhs"
											}
										],
										"name": "opBinary",
										"endline": 358
									}
								],
								"char": 11,
								"parameters": [
									{
										"kind": "value",
										"type": "string",
										"name": "op"
									},
									{
										"kind": "type",
										"name": "Stuff"
									}
								],
								"comment": "Returns a new $(D DList) that's the concatenation of $(D this) and its\nargument $(D rhs).\n",
								"name": "opBinary"
							},
							{
								"kind": "template",
								"line": 364,
								"constraint": "op == \"~\" && is(typeof(insertFront(lhs)))",
								"members": [
									{
										"kind": "function",
										"line": 364,
										"endchar": 5,
										"char": 11,
										"type": "DList(Stuff lhs)",
										"parameters": [
											{
												"type": "Stuff",
												"name": "lhs"
											}
										],
										"name": "opBinaryRight",
										"endline": 370
									}
								],
								"char": 11,
								"parameters": [
									{
										"kind": "value",
										"type": "string",
										"name": "op"
									},
									{
										"kind": "type",
										"name": "Stuff"
									}
								],
								"comment": "Returns a new $(D DList) that's the concatenation of the argument $(D lhs)\nand $(D this).\n",
								"name": "opBinaryRight"
							},
							{
								"kind": "template",
								"line": 375,
								"constraint": "op == \"~\" && is(typeof(insertBack(rhs)))",
								"members": [
									{
										"kind": "function",
										"line": 375,
										"endchar": 5,
										"char": 11,
										"type": "DList(Stuff rhs)",
										"parameters": [
											{
												"type": "Stuff",
												"name": "rhs"
											}
										],
										"name": "opOpAssign",
										"endline": 380
									}
								],
								"char": 11,
								"parameters": [
									{
										"kind": "value",
										"type": "string",
										"name": "op"
									},
									{
										"kind": "type",
										"name": "Stuff"
									}
								],
								"comment": "Appends the contents of the argument $(D rhs) into $(D this).\n",
								"name": "opOpAssign"
							},
							{
								"kind": "template",
								"line": 384,
								"constraint": "op == \"~\"",
								"members": [
									{
										"kind": "function",
										"line": 384,
										"endchar": 5,
										"char": 11,
										"type": "DList(DList rhs)",
										"parameters": [
											{
												"type": "DList",
												"name": "rhs"
											}
										],
										"name": "opOpAssign",
										"endline": 388
									}
								],
								"char": 11,
								"parameters": [
									{
										"kind": "value",
										"type": "string",
										"name": "op"
									}
								],
								"comment": "ditto\n",
								"name": "opOpAssign"
							},
							{
								"kind": "template",
								"line": 404,
								"members": [
									{
										"kind": "function",
										"line": 404,
										"endchar": 5,
										"char": 12,
										"type": "size_t(Stuff stuff)",
										"parameters": [
											{
												"type": "Stuff",
												"name": "stuff"
											}
										],
										"name": "insertFront",
										"endline": 408
									}
								],
								"char": 12,
								"parameters": [
									{
										"kind": "type",
										"name": "Stuff"
									}
								],
								"comment": "Inserts $(D stuff) to the front/back of the container. $(D stuff) can be a\nvalue convertible to $(D T) or a range of objects convertible to $(D\nT). The stable version behaves the same, but guarantees that ranges\niterating over the container are never invalidated.\n\nReturns: The number of elements inserted\n\nComplexity: $(BIGOH log(n))\n",
								"name": "insertFront"
							},
							{
								"kind": "template",
								"line": 411,
								"members": [
									{
										"kind": "function",
										"line": 411,
										"endchar": 5,
										"char": 12,
										"type": "size_t(Stuff stuff)",
										"parameters": [
											{
												"type": "Stuff",
												"name": "stuff"
											}
										],
										"name": "insertBack",
										"endline": 415
									}
								],
								"char": 12,
								"parameters": [
									{
										"kind": "type",
										"name": "Stuff"
									}
								],
								"comment": "ditto\n",
								"name": "insertBack"
							},
							{
								"kind": "alias",
								"line": 418,
								"char": 5,
								"type": "insertBack",
								"name": "insert",
								"comment": "ditto\n"
							},
							{
								"kind": "alias",
								"line": 421,
								"char": 5,
								"type": "insert",
								"name": "stableInsert",
								"comment": "ditto\n"
							},
							{
								"kind": "alias",
								"line": 424,
								"char": 5,
								"type": "insertFront",
								"name": "stableInsertFront",
								"comment": "ditto\n"
							},
							{
								"kind": "alias",
								"line": 427,
								"char": 5,
								"type": "insertBack",
								"name": "stableInsertBack",
								"comment": "ditto\n"
							},
							{
								"kind": "template",
								"line": 443,
								"members": [
									{
										"kind": "function",
										"line": 443,
										"endchar": 5,
										"char": 12,
										"type": "size_t(Range r, Stuff stuff)",
										"parameters": [
											{
												"type": "Range",
												"name": "r"
											},
											{
												"type": "Stuff",
												"name": "stuff"
											}
										],
										"name": "insertBefore",
										"endline": 452
									}
								],
								"char": 12,
								"parameters": [
									{
										"kind": "type",
										"name": "Stuff"
									}
								],
								"comment": "Inserts $(D stuff) after range $(D r), which must be a non-empty range\npreviously extracted from this container.\n\n$(D stuff) can be a value convertible to $(D T) or a range of objects\nconvertible to $(D T). The stable version behaves the same, but\nguarantees that ranges iterating over the container are never\ninvalidated.\n\nReturns: The number of values inserted.\n\nComplexity: $(BIGOH k + m), where $(D k) is the number of elements in\n$(D r) and $(D m) is the length of $(D stuff).\n",
								"name": "insertBefore"
							},
							{
								"kind": "alias",
								"line": 455,
								"char": 5,
								"type": "insertBefore",
								"name": "stableInsertBefore",
								"comment": "ditto\n"
							},
							{
								"kind": "template",
								"line": 458,
								"members": [
									{
										"kind": "function",
										"line": 458,
										"endchar": 5,
										"char": 12,
										"type": "size_t(Range r, Stuff stuff)",
										"parameters": [
											{
												"type": "Range",
												"name": "r"
											},
											{
												"type": "Stuff",
												"name": "stuff"
											}
										],
										"name": "insertAfter",
										"endline": 467
									}
								],
								"char": 12,
								"parameters": [
									{
										"kind": "type",
										"name": "Stuff"
									}
								],
								"comment": "ditto\n",
								"name": "insertAfter"
							},
							{
								"kind": "alias",
								"line": 470,
								"char": 5,
								"type": "insertAfter",
								"name": "stableInsertAfter",
								"comment": "ditto\n"
							},
							{
								"kind": "function",
								"line": 487,
								"endchar": 5,
								"char": 7,
								"type": "T()",
								"name": "removeAny",
								"comment": "Picks one value in an unspecified position in the container, removes\nit from the container, and returns it. The stable version behaves the same,\nbut guarantees that ranges iterating over the container are never invalidated.\n\nPrecondition: $(D !empty)\n\nReturns: The element removed.\n\nComplexity: $(BIGOH 1).\n",
								"endline": 495
							},
							{
								"kind": "alias",
								"line": 497,
								"char": 5,
								"type": "removeAny",
								"name": "stableRemoveAny",
								"comment": "ditto\n"
							},
							{
								"kind": "function",
								"line": 508,
								"endchar": 5,
								"char": 10,
								"type": "void()",
								"name": "removeFront",
								"comment": "Removes the value at the front/back of the container. The stable version\nbehaves the same, but guarantees that ranges iterating over the\ncontainer are never invalidated.\n\nPrecondition: $(D !empty)\n\nComplexity: $(BIGOH 1).\n",
								"endline": 513
							},
							{
								"kind": "alias",
								"line": 516,
								"char": 5,
								"type": "removeFront",
								"name": "stableRemoveFront",
								"comment": "ditto\n"
							},
							{
								"kind": "function",
								"line": 519,
								"endchar": 5,
								"char": 10,
								"type": "void()",
								"name": "removeBack",
								"comment": "ditto\n",
								"endline": 524
							},
							{
								"kind": "alias",
								"line": 527,
								"char": 5,
								"type": "removeBack",
								"name": "stableRemoveBack",
								"comment": "ditto\n"
							},
							{
								"kind": "function",
								"line": 542,
								"endchar": 5,
								"char": 12,
								"type": "size_t(size_t howMany)",
								"parameters": [
									{
										"type": "size_t",
										"name": "howMany"
									}
								],
								"name": "removeFront",
								"comment": "Removes $(D howMany) values at the front or back of the\ncontainer. Unlike the unparameterized versions above, these functions\ndo not throw if they could not remove $(D howMany) elements. Instead,\nif $(D howMany > n), all elements are removed. The returned value is\nthe effective number of elements removed. The stable version behaves\nthe same, but guarantees that ranges iterating over the container are\nnever invalidated.\n\nReturns: The number of elements removed\n\nComplexity: $(BIGOH howMany).\n",
								"endline": 554
							},
							{
								"kind": "alias",
								"line": 557,
								"char": 5,
								"type": "removeFront",
								"name": "stableRemoveFront",
								"comment": "ditto\n"
							},
							{
								"kind": "function",
								"line": 560,
								"endchar": 5,
								"char": 12,
								"type": "size_t(size_t howMany)",
								"parameters": [
									{
										"type": "size_t",
										"name": "howMany"
									}
								],
								"name": "removeBack",
								"comment": "ditto\n",
								"endline": 572
							},
							{
								"kind": "alias",
								"line": 575,
								"char": 5,
								"type": "removeBack",
								"name": "stableRemoveBack",
								"comment": "ditto\n"
							},
							{
								"kind": "function",
								"line": 586,
								"endchar": 5,
								"char": 11,
								"type": "Range(Range r)",
								"parameters": [
									{
										"type": "Range",
										"name": "r"
									}
								],
								"name": "remove",
								"comment": "Removes all elements belonging to $(D r), which must be a range\nobtained originally from this container.\n\nReturns: A range spanning the remaining elements in the container that\ninitially were right after $(D r).\n\nComplexity: $(BIGOH 1)\n",
								"endline": 600
							},
							{
								"kind": "function",
								"line": 603,
								"endchar": 5,
								"char": 11,
								"type": "Range(Range r)",
								"parameters": [
									{
										"type": "Range",
										"name": "r"
									}
								],
								"name": "linearRemove",
								"comment": "ditto\n",
								"endline": 606
							},
							{
								"kind": "function",
								"line": 615,
								"endchar": 5,
								"char": 11,
								"type": "Range(Take!Range r)",
								"parameters": [
									{
										"type": "Take!Range",
										"name": "r"
									}
								],
								"name": "linearRemove",
								"comment": "$(D linearRemove) functions as $(D remove), but also accepts ranges that are\nresult the of a $(D take) operation. This is a convenient way to remove a\nfixed amount of elements from the range.\n\nComplexity: $(BIGOH r.walkLength)\n",
								"endline": 629
							},
							{
								"kind": "alias",
								"line": 632,
								"char": 5,
								"type": "remove",
								"name": "stableRemove",
								"comment": "ditto\n"
							},
							{
								"kind": "alias",
								"line": 634,
								"char": 5,
								"type": "linearRemove",
								"name": "stableLinearRemove",
								"comment": "ditto\n"
							}
						],
						"char": 1,
						"name": "DList"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": "Implements a doubly-linked list.\n\n$(D DList) uses reference semantics.\n",
				"name": "DList"
			}
		],
		"name": "std.container.dlist",
		"comment": "This module implements a generic doubly-linked list container.\n\nThis module is a submodule of $(LINK2 std_container.html, std.container).\n\nSource: $(PHOBOSSRC std/container/_dlist.d)\nMacros:\nWIKI = Phobos/StdContainer\nTEXTWITHCOMMAS = $0\n\nCopyright: Red-black tree code copyright (C) 2008- by Steven Schveighoffer. Other code\ncopyright 2010- Andrei Alexandrescu. All rights reserved by the respective holders.\n\nLicense: Distributed under the Boost Software License, Version 1.0.\n(See accompanying file LICENSE_1_0.txt or copy at $(WEB\nboost.org/LICENSE_1_0.txt)).\n\nAuthors: Steven Schveighoffer, $(WEB erdani.com, Andrei Alexandrescu)\n"
	},
	{
		"kind": "module",
		"file": "../phobos/std/container/package.d",
		"members": [],
		"name": "std.container",
		"comment": "This module defines generic containers.\n\nConstruction:\n\nTo implement the different containers both struct and class based\napproaches have been used. $(XREF container_util, make) allows for\nuniform construction with either approach.\n\n---\nimport std.container;\n// Construct a red-black tree and an array both containing the values 1, 2, 3.\n// RedBlackTree should typically be allocated using `new`\nRedBlackTree!int rbTree = new RedBlackTree!int(1, 2, 3);\n// But `new` should not be used with Array\nArray!int array = Array!int(1, 2, 3);\n// `make` hides the differences\nRedBlackTree!int rbTree2 = make!(RedBlackTree!int)(1, 2, 3);\nArray!int array2 = make!(Array!int)(1, 2, 3);\n---\n\nNote that $(D make) can infer the element type from the given arguments.\n\n---\nimport std.container;\nauto rbTree = make!RedBlackTree(1, 2, 3); // RedBlackTree!int\nauto array = make!Array(\"1\", \"2\", \"3\"); // Array!string\n---\n\nReference_semantics:\n\nAll containers have reference semantics, which means that after\nassignment both variables refer to the same underlying data.\n\nTo make a copy of a _container, use the $(D c._dup) _container primitive.\n---\nimport std.container, std.range;\nArray!int originalArray = make!(Array!int)(1, 2, 3);\nArray!int secondArray = originalArray;\nassert(equal(originalArray[], secondArray[]));\n\n// changing one instance changes the other one as well!\noriginalArray[0] = 12;\nassert(secondArray[0] == 12);\n\n// secondArray now refers to an independent copy of originalArray\nsecondArray = originalArray.dup;\nsecondArray[0] = 1;\n// assert that originalArray has not been effected\nassert(originalArray[0] == 12);\n---\n\n$(B Attention:) If the _container is implemented as a class, using an\nuninitialized instance can cause a null pointer dereference.\n\n---\nimport std.container;\n\nRedBlackTree!int rbTree;\nrbTree.insert(5); // null pointer dereference\n---\n\nUsing an uninitialized struct-based _container will work, because the struct\nintializes itself upon use; however, up to this point the _container will not\nhave an identity and assignment does not create two references to the same\ndata.\n\n---\nimport std.container;\n\n// create an uninitialized array\nArray!int array1;\n// array2 does _not_ refer to array1\nArray!int array2 = array1;\narray2.insertBack(42);\n// thus array1 will not be affected\nassert(array1.empty);\n\n// after initialization reference semantics work as expected\narray1 = array2;\n// now effects array2 as well\narray1.removeBack();\nassert(array2.empty);\n---\nIt is therefore recommended to always construct containers using $(XREF container_util, make).\n\nThis is in fact necessary to put containers into another _container.\nFor example, to construct an $(D Array) of ten empty $(D Array)s, use\nthe following that calls $(D make) ten times.\n\n---\nimport std.range, std.container, std.algorithm;\n\nArray!(Array!int) arrayOfArrays = make!(Array!(Array!int))(\n    repeat(0, 10).map!(x => make!(Array!int))\n);\n---\n\nSubmodules:\n\nThis module consists of the following submodules:\n\n$(UL\n    $(LI\n        The $(LINK2 std_container_array.html, std._container.array) module provides\n        an array type with deterministic control of memory, not reliant on\n        the GC unlike built-in arrays.\n    )\n    $(LI\n        The $(LINK2 std_container_binaryheap.html, std._container.binaryheap) module\n        provides a binary heap implementation that can be applied to any\n        user-provided random-access range.\n    )\n    $(LI\n        The $(LINK2 std_container_dlist.html, std._container.dlist) module provides\n        a doubly-linked list implementation.\n    )\n    $(LI\n        The $(LINK2 std_container_rbtree.html, std._container.rbtree) module\n        implements red-black trees.\n    )\n    $(LI\n        The $(LINK2 std_container_slist.html, std._container.slist) module\n        implements singly-linked lists.\n    )\n    $(LI\n        The $(LINK2 std_container_util.html, std._container.util) module contains\n        some generic tools commonly used by _container implementations.\n    )\n)\n\nThe_primary_range_of_a_container:\n\nWhile some _containers offer direct access to their elements e.g. via\n$(D opIndex), $(D c.front) or $(D c.back), access\nand modification of a _container's contents is generally done through\nits primary $(LINK2 std_range.html, range) type,\nwhich is aliased as $(D C.Range). For example, the primary range type of\n$(D Array!int) is $(D Array!int.Range).\n\nIf the documentation of a member function of a _container takes a\na parameter of type $(D Range), then it refers to the primary range type of\nthis _container. Oftentimes $(D Take!Range) will be used, in which case\nthe range refers to a span of the elements in the _container. Arguments to\nthese parameters $(B must) be obtained from the same _container instance\nas the one being worked with. It is important to note that many generic range\nalgorithms return the same range type as their input range.\n\n---\nimport std.algorithm : equal, find;\nimport std.container;\nimport std.range : takeOne;\n\nauto array = make!Array(1, 2, 3);\n\n// `find` returns an Array!int.Range advanced to the element \"2\"\narray.linearRemove(array[].find(2));\n\nassert(array[].equal([1]));\n\narray = make!Array(1, 2, 3);\n\n// the range given to `linearRemove` is a Take!(Array!int.Range)\n// spanning just the element \"2\"\narray.linearRemove(array[].find(2).takeOne());\n\nassert(array[].equal([1, 3]));\n---\n\nWhen any $(LINK2 std_range.html, range) can be passed as an argument to\na member function, the documention usually refers to the parameter's templated\ntype as $(D Stuff).\n\n---\nimport std.algorithm : equal;\nimport std.container;\nimport std.range : iota;\n\nauto array = make!Array(1, 2);\n\n// the range type returned by `iota` is completely unrelated to Array,\n// which is fine for Array.insertBack:\narray.insertBack(iota(3, 10));\n\nassert(array[].equal([1, 2, 3, 4, 5, 6, 7, 8, 9]));\n---\n\nContainer_primitives:\n\nContainers do not form a class hierarchy, instead they implement a\ncommon set of primitives (see table below). These primitives each guarantee\na specific worst case complexity and thus allow generic code to be written\nindependently of the _container implementation.\n\nFor example the primitives $(D c.remove(r)) and $(D c.linearRemove(r)) both\nremove the sequence of elements in range $(D r) from the _container $(D c).\nThe primitive $(D c.remove(r)) guarantees $(BIGOH 1) complexity and\n$(D c.linearRemove(r)) relaxes this guarantee to $(BIGOH n) (where $(D n)\nis the length of the _container $(D c)).\n\nSince a sequence of elements can be removed from a $(LINK2 std_container_dlist.html, doubly linked list)\nin constant time, $(D DList) provides the primitive $(D c.remove(r))\nas well as $(D c.linearRemove(r)). On the other hand a\n$(LINK2 std_container_array.html, Array) only offers $(D c.linearRemove(r)).\n\nThe following table describes the common set of primitives that containers\nimplement.  A _container need not implement all primitives, but if a\nprimitive is implemented, it must support the syntax described in the $(B\nsyntax) column with the semantics described in the $(B description) column, and\nit must not have a worst-case complexity worse than denoted in big-O notation in\nthe $(BIGOH &middot;) column.  Below, $(D C) means a _container type, $(D c) is\na value of _container type, $(D n$(SUBSCRIPT x)) represents the effective length of\nvalue $(D x), which could be a single element (in which case $(D n$(SUBSCRIPT x)) is\n$(D 1)), a _container, or a range.\n\n$(BOOKTABLE Container primitives,\n\n$(TR $(TH Syntax) $(TH $(BIGOH &middot;)) $(TH Description))\n\n$(TR $(TDNW $(D C(x))) $(TDNW $(D n$(SUBSCRIPT x))) $(TD Creates a\n_container of type $(D C) from either another _container or a range. The created _container must not be a null reference even if x is empty.))\n\n$(TR $(TDNW $(D c.dup)) $(TDNW $(D n$(SUBSCRIPT c))) $(TD Returns a\nduplicate of the _container.))\n\n$(TR $(TDNW $(D c ~ x)) $(TDNW $(D n$(SUBSCRIPT c) + n$(SUBSCRIPT x))) $(TD\nReturns the concatenation of $(D c) and $(D r). $(D x) may be a single\nelement or an input range.))\n\n$(TR $(TDNW $(D x ~ c)) $(TDNW $(D n$(SUBSCRIPT c) + n$(SUBSCRIPT x))) $(TD\nReturns the concatenation of $(D x) and $(D c).  $(D x) may be a\nsingle element or an input range type.))\n\n$(LEADINGROW Iteration)\n\n$(TR  $(TD $(D c.Range)) $(TD) $(TD The primary range\ntype associated with the _container.))\n\n$(TR $(TD $(D c[])) $(TDNW $(D log n$(SUBSCRIPT c))) $(TD Returns a range\niterating over the entire _container, in a _container-defined order.))\n\n$(TR $(TDNW $(D c[a .. b])) $(TDNW $(D log n$(SUBSCRIPT c))) $(TD Fetches a\nportion of the _container from key $(D a) to key $(D b).))\n\n$(LEADINGROW Capacity)\n\n$(TR $(TD $(D c.empty)) $(TD $(D 1)) $(TD Returns $(D true) if the\n_container has no elements, $(D false) otherwise.))\n\n$(TR  $(TD $(D c.length)) $(TDNW $(D log n$(SUBSCRIPT c))) $(TD Returns the\nnumber of elements in the _container.))\n\n$(TR $(TDNW $(D c.length = n)) $(TDNW $(D n$(SUBSCRIPT c) + n)) $(TD Forces\nthe number of elements in the _container to $(D n). If the _container\nends up growing, the added elements are initialized in a\n_container-dependent manner (usually with $(D T.init)).))\n\n$(TR $(TD $(D c.capacity)) $(TDNW $(D log n$(SUBSCRIPT c))) $(TD Returns the\nmaximum number of elements that can be stored in the _container\nwithout triggering a reallocation.))\n\n$(TR $(TD $(D c.reserve(x))) $(TD $(D n$(SUBSCRIPT c))) $(TD Forces $(D\ncapacity) to at least $(D x) without reducing it.))\n\n$(LEADINGROW Access)\n\n$(TR $(TDNW $(D c.front)) $(TDNW $(D log n$(SUBSCRIPT c))) $(TD Returns the\nfirst element of the _container, in a _container-defined order.))\n\n$(TR $(TDNW $(D c.moveFront)) $(TDNW $(D log n$(SUBSCRIPT c))) $(TD\nDestructively reads and returns the first element of the\n_container. The slot is not removed from the _container; it is left\ninitialized with $(D T.init). This routine need not be defined if $(D\nfront) returns a $(D ref).))\n\n$(TR $(TDNW $(D c.front = v)) $(TDNW $(D log n$(SUBSCRIPT c))) $(TD Assigns\n$(D v) to the first element of the _container.))\n\n$(TR $(TDNW $(D c.back)) $(TDNW $(D log n$(SUBSCRIPT c))) $(TD Returns the\nlast element of the _container, in a _container-defined order.))\n\n$(TR $(TDNW $(D c.moveBack)) $(TDNW $(D log n$(SUBSCRIPT c))) $(TD\nDestructively reads and returns the last element of the\n_container. The slot is not removed from the _container; it is left\ninitialized with $(D T.init). This routine need not be defined if $(D\nfront) returns a $(D ref).))\n\n$(TR $(TDNW $(D c.back = v)) $(TDNW $(D log n$(SUBSCRIPT c))) $(TD Assigns\n$(D v) to the last element of the _container.))\n\n$(TR $(TDNW $(D c[x])) $(TDNW $(D log n$(SUBSCRIPT c))) $(TD Provides\nindexed access into the _container. The index type is\n_container-defined. A _container may define several index types (and\nconsequently overloaded indexing).))\n\n$(TR  $(TDNW $(D c.moveAt(x))) $(TDNW $(D log n$(SUBSCRIPT c))) $(TD\nDestructively reads and returns the value at position $(D x). The slot\nis not removed from the _container; it is left initialized with $(D\nT.init).))\n\n$(TR  $(TDNW $(D c[x] = v)) $(TDNW $(D log n$(SUBSCRIPT c))) $(TD Sets\nelement at specified index into the _container.))\n\n$(TR  $(TDNW $(D c[x] $(I op)= v)) $(TDNW $(D log n$(SUBSCRIPT c)))\n$(TD Performs read-modify-write operation at specified index into the\n_container.))\n\n$(LEADINGROW Operations)\n\n$(TR $(TDNW $(D e in c)) $(TDNW $(D log n$(SUBSCRIPT c))) $(TD\nReturns nonzero if e is found in $(D c).))\n\n$(TR  $(TDNW $(D c.lowerBound(v))) $(TDNW $(D log n$(SUBSCRIPT c))) $(TD\nReturns a range of all elements strictly less than $(D v).))\n\n$(TR  $(TDNW $(D c.upperBound(v))) $(TDNW $(D log n$(SUBSCRIPT c))) $(TD\nReturns a range of all elements strictly greater than $(D v).))\n\n$(TR  $(TDNW $(D c.equalRange(v))) $(TDNW $(D log n$(SUBSCRIPT c))) $(TD\nReturns a range of all elements in $(D c) that are equal to $(D v).))\n\n$(LEADINGROW Modifiers)\n\n$(TR $(TDNW $(D c ~= x)) $(TDNW $(D n$(SUBSCRIPT c) + n$(SUBSCRIPT x)))\n$(TD Appends $(D x) to $(D c). $(D x) may be a single element or an\ninput range type.))\n\n$(TR  $(TDNW $(D c.clear())) $(TDNW $(D n$(SUBSCRIPT c))) $(TD Removes all\nelements in $(D c).))\n\n$(TR  $(TDNW $(D c.insert(x))) $(TDNW $(D n$(SUBSCRIPT x) * log n$(SUBSCRIPT c)))\n$(TD Inserts $(D x) in $(D c) at a position (or positions) chosen by $(D c).))\n\n$(TR  $(TDNW $(D c.stableInsert(x)))\n$(TDNW $(D n$(SUBSCRIPT x) * log n$(SUBSCRIPT c))) $(TD Same as $(D c.insert(x)),\nbut is guaranteed to not invalidate any ranges.))\n\n$(TR  $(TDNW $(D c.linearInsert(v))) $(TDNW $(D n$(SUBSCRIPT c))) $(TD Same\nas $(D c.insert(v)) but relaxes complexity to linear.))\n\n$(TR  $(TDNW $(D c.stableLinearInsert(v))) $(TDNW $(D n$(SUBSCRIPT c)))\n$(TD Same as $(D c.stableInsert(v)) but relaxes complexity to linear.))\n\n$(TR  $(TDNW $(D c.removeAny())) $(TDNW $(D log n$(SUBSCRIPT c)))\n$(TD Removes some element from $(D c) and returns it.))\n\n$(TR  $(TDNW $(D c.stableRemoveAny())) $(TDNW $(D log n$(SUBSCRIPT c)))\n$(TD Same as $(D c.removeAny()), but is guaranteed to not invalidate any\niterators.))\n\n$(TR  $(TDNW $(D c.insertFront(v))) $(TDNW $(D log n$(SUBSCRIPT c)))\n$(TD Inserts $(D v) at the front of $(D c).))\n\n$(TR  $(TDNW $(D c.stableInsertFront(v))) $(TDNW $(D log n$(SUBSCRIPT c)))\n$(TD Same as $(D c.insertFront(v)), but guarantees no ranges will be\ninvalidated.))\n\n$(TR  $(TDNW $(D c.insertBack(v))) $(TDNW $(D log n$(SUBSCRIPT c)))\n$(TD Inserts $(D v) at the back of $(D c).))\n\n$(TR  $(TDNW $(D c.stableInsertBack(v))) $(TDNW $(D log n$(SUBSCRIPT c)))\n$(TD Same as $(D c.insertBack(v)), but guarantees no ranges will be\ninvalidated.))\n\n$(TR  $(TDNW $(D c.removeFront())) $(TDNW $(D log n$(SUBSCRIPT c)))\n$(TD Removes the element at the front of $(D c).))\n\n$(TR  $(TDNW $(D c.stableRemoveFront())) $(TDNW $(D log n$(SUBSCRIPT c)))\n$(TD Same as $(D c.removeFront()), but guarantees no ranges will be\ninvalidated.))\n\n$(TR  $(TDNW $(D c.removeBack())) $(TDNW $(D log n$(SUBSCRIPT c)))\n$(TD Removes the value at the back of $(D c).))\n\n$(TR  $(TDNW $(D c.stableRemoveBack())) $(TDNW $(D log n$(SUBSCRIPT c)))\n$(TD Same as $(D c.removeBack()), but guarantees no ranges will be\ninvalidated.))\n\n$(TR  $(TDNW $(D c.remove(r))) $(TDNW $(D n$(SUBSCRIPT r) * log n$(SUBSCRIPT c)))\n$(TD Removes range $(D r) from $(D c).))\n\n$(TR  $(TDNW $(D c.stableRemove(r)))\n$(TDNW $(D n$(SUBSCRIPT r) * log n$(SUBSCRIPT c)))\n$(TD Same as $(D c.remove(r)), but guarantees iterators are not\ninvalidated.))\n\n$(TR  $(TDNW $(D c.linearRemove(r))) $(TDNW $(D n$(SUBSCRIPT c)))\n$(TD Removes range $(D r) from $(D c).))\n\n$(TR  $(TDNW $(D c.stableLinearRemove(r))) $(TDNW $(D n$(SUBSCRIPT c)))\n$(TD Same as $(D c.linearRemove(r)), but guarantees iterators are not\ninvalidated.))\n\n$(TR  $(TDNW $(D c.removeKey(k))) $(TDNW $(D log n$(SUBSCRIPT c)))\n$(TD Removes an element from $(D c) by using its key $(D k).\nThe key's type is defined by the _container.))\n\n$(TR  $(TDNW $(D )) $(TDNW $(D )) $(TD ))\n\n)\n\nSource: $(PHOBOSSRC std/_container/package.d)\nMacros:\nWIKI = Phobos/StdContainer\nTEXTWITHCOMMAS = $0\n\nCopyright: Red-black tree code copyright (C) 2008- by Steven Schveighoffer. Other code\ncopyright 2010- Andrei Alexandrescu. All rights reserved by the respective holders.\n\nLicense: Distributed under the Boost Software License, Version 1.0.\n(See accompanying file LICENSE_1_0.txt or copy at $(WEB\nboost.org/LICENSE_1_0.txt)).\n\nAuthors: Steven Schveighoffer, $(WEB erdani.com, Andrei Alexandrescu)\n"
	},
	{
		"kind": "module",
		"file": "../phobos/std/container/util.d",
		"members": [
			{
				"kind": "template",
				"line": 27,
				"constraint": "is(T == struct) || is(T == class)",
				"members": [
					{
						"kind": "template",
						"line": 30,
						"constraint": "is(T == struct) && __traits(compiles, T(arguments))",
						"members": [
							{
								"kind": "function",
								"line": 30,
								"endchar": 5,
								"char": 7,
								"type": "T(Args arguments)",
								"parameters": [
									{
										"type": "Args",
										"name": "arguments"
									}
								],
								"name": "make",
								"endline": 46
							}
						],
						"char": 7,
						"parameters": [
							{
								"kind": "tuple",
								"name": "Args"
							}
						],
						"name": "make"
					},
					{
						"kind": "template",
						"line": 48,
						"constraint": "is(T == class) && __traits(compiles, new T(arguments))",
						"members": [
							{
								"kind": "function",
								"line": 48,
								"endchar": 5,
								"char": 7,
								"type": "T(Args arguments)",
								"parameters": [
									{
										"type": "Args",
										"name": "arguments"
									}
								],
								"name": "make",
								"endline": 52
							}
						],
						"char": 7,
						"parameters": [
							{
								"kind": "tuple",
								"name": "Args"
							}
						],
						"name": "make"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": "Returns an initialized object. This function is mainly for eliminating\nconstruction differences between structs and classes. It allows code to not\nworry about whether the type it's constructing is a struct or a class.\nExample:\n\n---\nimport std.container;\nimport std.algorithm : equal;\nimport std.algorithm : equal;\n\nauto arr = make!(Array!int)([4, 2, 3, 1]);\nassert(equal(arr[], [4, 2, 3, 1]));\n\nauto rbt = make!(RedBlackTree!(int, \"a > b\"))([4, 2, 3, 1]);\nassert(equal(rbt[], [4, 3, 2, 1]));\n\nalias makeList = make!(SList!int);\nauto slist = makeList(1, 2, 3);\nassert(equal(slist[], [1, 2, 3]));\n\n---\n",
				"name": "make"
			},
			{
				"kind": "template",
				"line": 108,
				"constraint": "!is(Container)",
				"members": [
					{
						"kind": "template",
						"line": 114,
						"constraint": "!isDynamicArray!Range && isInputRange!Range",
						"members": [
							{
								"kind": "function",
								"line": 114,
								"storageClass": [
									"auto"
								],
								"endchar": 5,
								"char": 10,
								"type": "(Range range)",
								"parameters": [
									{
										"type": "Range",
										"name": "range"
									}
								],
								"name": "make",
								"endline": 119
							}
						],
						"char": 10,
						"parameters": [
							{
								"kind": "type",
								"name": "Range"
							}
						],
						"name": "make"
					},
					{
						"kind": "template",
						"line": 121,
						"members": [
							{
								"kind": "function",
								"line": 121,
								"storageClass": [
									"auto"
								],
								"endchar": 5,
								"char": 10,
								"type": "(T[] items...)",
								"parameters": [
									{
										"type": "T[]",
										"name": "items"
									}
								],
								"name": "make",
								"endline": 124
							}
						],
						"char": 10,
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"name": "make"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "alias",
						"name": "Container"
					},
					{
						"kind": "tuple",
						"name": "Args"
					}
				],
				"comment": " Convenience function for constructing a generic container.\nExample:\n\n---\nimport std.container.array, std.container.rbtree, std.container.slist;\nimport std.range : iota;\nimport std.algorithm : equal;\n\nauto arr = make!Array(iota(5));\nassert(equal(arr[], [0, 1, 2, 3, 4]));\n\nauto rbtmax = make!(RedBlackTree, \"a > b\")(iota(5));\nassert(equal(rbtmax[], [4, 3, 2, 1, 0]));\n\nauto rbtmin = make!RedBlackTree(4, 1, 3, 2);\nassert(equal(rbtmin[], [1, 2, 3, 4]));\n\nalias makeList = make!SList;\nauto list = makeList(1, 7, 42);\nassert(equal(list[], [1, 7, 42]));\n\n---\n",
				"name": "make"
			}
		],
		"name": "std.container.util",
		"comment": "This module contains some common utilities used by containers.\n\nThis module is a submodule of $(LINK2 std_container.html, std.container).\n\nSource: $(PHOBOSSRC std/container/_util.d)\nMacros:\nWIKI = Phobos/StdContainer\nTEXTWITHCOMMAS = $0\n\nCopyright: Red-black tree code copyright (C) 2008- by Steven Schveighoffer. Other code\ncopyright 2010- Andrei Alexandrescu. All rights reserved by the respective holders.\n\nLicense: Distributed under the Boost Software License, Version 1.0.\n(See accompanying file LICENSE_1_0.txt or copy at $(WEB\nboost.org/LICENSE_1_0.txt)).\n\nAuthors: Steven Schveighoffer, $(WEB erdani.com, Andrei Alexandrescu)\n"
	},
	{
		"kind": "module",
		"file": "../phobos/std/container/binaryheap.d",
		"members": [
			{
				"kind": "template",
				"line": 57,
				"constraint": "isRandomAccessRange!Store || isRandomAccessRange!(typeof(Store.init[]))",
				"members": [
					{
						"kind": "struct",
						"line": 57,
						"members": [
							{
								"kind": "constructor",
								"line": 174,
								"endchar": 5,
								"char": 5,
								"type": "(Store s, size_t initialSize = size_t.max)",
								"parameters": [
									{
										"type": "Store",
										"name": "s"
									},
									{
										"default": "size_t.max",
										"type": "size_t",
										"name": "initialSize"
									}
								],
								"name": "this",
								"comment": "       Converts the store $(D s) into a heap. If $(D initialSize) is\n       specified, only the first $(D initialSize) elements in $(D s)\n       are transformed into a heap, after which the heap can grow up\n       to $(D r.length) (if $(D Store) is a range) or indefinitely (if\n       $(D Store) is a container with $(D insertBack)). Performs\n       $(BIGOH min(r.length, initialSize)) evaluations of $(D less).\n",
								"endline": 177
							},
							{
								"kind": "function",
								"line": 183,
								"endchar": 5,
								"char": 10,
								"type": "void(Store s, size_t initialSize = size_t.max)",
								"parameters": [
									{
										"type": "Store",
										"name": "s"
									},
									{
										"default": "size_t.max",
										"type": "size_t",
										"name": "initialSize"
									}
								],
								"name": "acquire",
								"comment": "Takes ownership of a store. After this, manipulating $(D s) may make\nthe heap work incorrectly.\n",
								"endline": 195
							},
							{
								"kind": "function",
								"line": 201,
								"endchar": 5,
								"char": 10,
								"type": "void(Store s, size_t initialSize = size_t.max)",
								"parameters": [
									{
										"type": "Store",
										"name": "s"
									},
									{
										"default": "size_t.max",
										"type": "size_t",
										"name": "initialSize"
									}
								],
								"name": "assume",
								"comment": "Takes ownership of a store assuming it already was organized as a\nheap.\n",
								"endline": 207
							},
							{
								"kind": "function",
								"line": 213,
								"storageClass": [
									"auto"
								],
								"endchar": 5,
								"char": 10,
								"type": "()",
								"name": "release",
								"comment": "Clears the heap. Returns the portion of the store from $(D 0) up to\n$(D length), which satisfies the $(LUCKY heap property).\n",
								"endline": 223
							},
							{
								"kind": "function",
								"line": 228,
								"endchar": 5,
								"char": 20,
								"type": "@property bool()",
								"name": "empty",
								"comment": "Returns $(D true) if the heap is _empty, $(D false) otherwise.\n",
								"endline": 231
							},
							{
								"kind": "function",
								"line": 237,
								"endchar": 5,
								"char": 26,
								"type": "@property BinaryHeap()",
								"name": "dup",
								"comment": "Returns a duplicate of the heap. The underlying store must also\nsupport a $(D dup) method.\n",
								"endline": 243
							},
							{
								"kind": "function",
								"line": 248,
								"endchar": 5,
								"char": 22,
								"type": "@property size_t()",
								"name": "length",
								"comment": "Returns the _length of the heap.\n",
								"endline": 251
							},
							{
								"kind": "function",
								"line": 258,
								"endchar": 5,
								"char": 22,
								"type": "@property size_t()",
								"name": "capacity",
								"comment": "Returns the _capacity of the heap, which is the length of the\nunderlying store (if the store is a range) or the _capacity of the\nunderlying store (if the store is a container).\n",
								"endline": 269
							},
							{
								"kind": "function",
								"line": 275,
								"endchar": 5,
								"char": 33,
								"type": "@property ElementType!Store()",
								"name": "front",
								"comment": "Returns a copy of the _front of the heap, which is the largest element\naccording to $(D less).\n",
								"endline": 279
							},
							{
								"kind": "function",
								"line": 284,
								"endchar": 5,
								"char": 10,
								"type": "void()",
								"name": "clear",
								"comment": "Clears the heap by detaching it from the underlying store.\n",
								"endline": 287
							},
							{
								"kind": "function",
								"line": 293,
								"endchar": 5,
								"char": 12,
								"type": "size_t(ElementType!Store value)",
								"parameters": [
									{
										"type": "ElementType!Store",
										"name": "value"
									}
								],
								"name": "insert",
								"comment": "Inserts $(D value) into the store. If the underlying store is a range\nand $(D length == capacity), throws an exception.\n",
								"endline": 329
							},
							{
								"kind": "function",
								"line": 334,
								"endchar": 5,
								"char": 10,
								"type": "void()",
								"name": "removeFront",
								"comment": "Removes the largest element from the heap.\n",
								"endline": 346
							},
							{
								"kind": "alias",
								"line": 349,
								"char": 5,
								"type": "removeFront",
								"name": "popFront",
								"comment": "ditto\n"
							},
							{
								"kind": "function",
								"line": 357,
								"endchar": 5,
								"char": 23,
								"type": "ElementType!Store()",
								"name": "removeAny",
								"comment": "Removes the largest element from the heap and returns a copy of\nit. The element still resides in the heap's store. For performance\nreasons you may want to use $(D removeFront) with heaps of objects\nthat are expensive to copy.\n",
								"endline": 361
							},
							{
								"kind": "function",
								"line": 366,
								"endchar": 5,
								"char": 10,
								"type": "void(ElementType!Store value)",
								"parameters": [
									{
										"type": "ElementType!Store",
										"name": "value"
									}
								],
								"name": "replaceFront",
								"comment": "Replaces the largest element in the store with $(D value).\n",
								"endline": 373
							},
							{
								"kind": "function",
								"line": 383,
								"endchar": 5,
								"char": 10,
								"type": "bool(ElementType!Store value)",
								"parameters": [
									{
										"type": "ElementType!Store",
										"name": "value"
									}
								],
								"name": "conditionalInsert",
								"comment": "If the heap has room to grow, inserts $(D value) into the store and\nreturns $(D true). Otherwise, if $(D less(value, front)), calls $(D\nreplaceFront(value)) and returns again $(D true). Otherwise, leaves\nthe heap unaffected and returns $(D false). This method is useful in\nscenarios where the smallest $(D k) elements of a set of candidates\nmust be collected.\n",
								"endline": 398
							}
						],
						"char": 1,
						"name": "BinaryHeap"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "Store"
					},
					{
						"kind": "alias",
						"name": "less",
						"defaultAlias": "\"a < b\""
					}
				],
				"comment": "Implements a $(WEB en.wikipedia.org/wiki/Binary_heap, binary heap)\ncontainer on top of a given random-access range type (usually $(D\nT[])) or a random-access container type (usually $(D Array!T)). The\ndocumentation of $(D BinaryHeap) will refer to the underlying range or\ncontainer as the $(I store) of the heap.\n\nThe binary heap induces structure over the underlying store such that\naccessing the largest element (by using the $(D front) property) is a\n$(BIGOH 1) operation and extracting it (by using the $(D\nremoveFront()) method) is done fast in $(BIGOH log n) time.\n\nIf $(D less) is the less-than operator, which is the default option,\nthen $(D BinaryHeap) defines a so-called max-heap that optimizes\nextraction of the $(I largest) elements. To define a min-heap,\ninstantiate BinaryHeap with $(D \"a > b\") as its predicate.\n\nSimply extracting elements from a $(D BinaryHeap) container is\ntantamount to lazily fetching elements of $(D Store) in descending\norder. Extracting elements from the $(D BinaryHeap) to completion\nleaves the underlying store sorted in ascending order but, again,\nyields elements in descending order.\n\nIf $(D Store) is a range, the $(D BinaryHeap) cannot grow beyond the\nsize of that range. If $(D Store) is a container that supports $(D\ninsertBack), the $(D BinaryHeap) may grow by adding elements to the\ncontainer.\nExample:\nExample from \"Introduction to Algorithms\" Cormen et al, p 146\n---\nimport std.algorithm : equal;\nint[] a = [ 4, 1, 3, 2, 16, 9, 10, 14, 8, 7 ];\nauto h = heapify(a);\n// largest element\nassert(h.front == 16);\n// a has the heap property\nassert(equal(a, [ 16, 14, 10, 8, 7, 9, 3, 2, 4, 1 ]));\n\n---\nExample:\n$(D BinaryHeap) implements the standard input range interface, allowing\n\nlazy iteration of the underlying range in descending order.\n---\nimport std.algorithm : equal;\nimport std.range : take;\nint[] a = [4, 1, 3, 2, 16, 9, 10, 14, 8, 7];\nauto top5 = heapify(a).take(5);\nassert(top5.equal([16, 14, 10, 9, 8]));\n\n---\n",
				"name": "BinaryHeap"
			},
			{
				"kind": "template",
				"line": 428,
				"members": [
					{
						"kind": "function",
						"line": 428,
						"endchar": 1,
						"char": 26,
						"type": "BinaryHeap!(Store, less)(Store s, size_t initialSize = size_t.max)",
						"parameters": [
							{
								"type": "Store",
								"name": "s"
							},
							{
								"default": "size_t.max",
								"type": "size_t",
								"name": "initialSize"
							}
						],
						"name": "heapify",
						"endline": 432
					}
				],
				"char": 26,
				"parameters": [
					{
						"kind": "alias",
						"name": "less",
						"defaultAlias": "\"a < b\""
					},
					{
						"kind": "type",
						"name": "Store"
					}
				],
				"comment": "Convenience function that returns a $(D BinaryHeap!Store) object\ninitialized with $(D s) and $(D initialSize).\n",
				"name": "heapify"
			}
		],
		"name": "std.container.binaryheap",
		"comment": "This module provides a $(D BinaryHeap) adaptor that makes a binary heap out of\nany user-provided random-access range.\n\nThis module is a submodule of $(LINK2 std_container.html, std.container).\n\nSource: $(PHOBOSSRC std/container/_binaryheap.d)\nMacros:\nWIKI = Phobos/StdContainer\nTEXTWITHCOMMAS = $0\n\nCopyright: Red-black tree code copyright (C) 2008- by Steven Schveighoffer. Other code\ncopyright 2010- Andrei Alexandrescu. All rights reserved by the respective holders.\n\nLicense: Distributed under the Boost Software License, Version 1.0.\n(See accompanying file LICENSE_1_0.txt or copy at $(WEB\nboost.org/LICENSE_1_0.txt)).\n\nAuthors: Steven Schveighoffer, $(WEB erdani.com, Andrei Alexandrescu)\n"
	},
	{
		"kind": "module",
		"file": "../phobos/std/container/slist.d",
		"members": [
			{
				"kind": "template",
				"line": 29,
				"members": [
					{
						"kind": "struct",
						"line": 29,
						"members": [
							{
								"kind": "template",
								"line": 102,
								"constraint": "isImplicitlyConvertible!(U, T)",
								"members": [
									{
										"kind": "constructor",
										"line": 102,
										"endchar": 5,
										"char": 5,
										"type": "(U[] values...)",
										"parameters": [
											{
												"type": "U[]",
												"name": "values"
											}
										],
										"name": "this",
										"endline": 105
									}
								],
								"char": 5,
								"parameters": [
									{
										"kind": "type",
										"name": "U"
									}
								],
								"comment": "Constructor taking a number of nodes\n",
								"name": "this"
							},
							{
								"kind": "template",
								"line": 110,
								"constraint": "isInputRange!Stuff && isImplicitlyConvertible!(ElementType!Stuff, T) && !is(Stuff == T[])",
								"members": [
									{
										"kind": "constructor",
										"line": 110,
										"endchar": 5,
										"char": 5,
										"type": "(Stuff stuff)",
										"parameters": [
											{
												"type": "Stuff",
												"name": "stuff"
											}
										],
										"name": "this",
										"endline": 116
									}
								],
								"char": 5,
								"parameters": [
									{
										"kind": "type",
										"name": "Stuff"
									}
								],
								"comment": "Constructor taking an input range\n",
								"name": "this"
							},
							{
								"kind": "function",
								"line": 124,
								"endchar": 5,
								"char": 10,
								"type": "const bool(const SList rhs)",
								"parameters": [
									{
										"storageClass": [
											"const"
										],
										"type": "SList",
										"name": "rhs"
									}
								],
								"name": "opEquals",
								"comment": "Comparison for equality.\n\nComplexity: $(BIGOH min(n, n1)) where $(D n1) is the number of\nelements in $(D rhs).\n",
								"endline": 127
							},
							{
								"kind": "function",
								"line": 130,
								"endchar": 5,
								"char": 10,
								"type": "const bool(ref const SList rhs)",
								"parameters": [
									{
										"storageClass": [
											"const",
											"ref"
										],
										"type": "SList",
										"name": "rhs"
									}
								],
								"name": "opEquals",
								"comment": "ditto\n",
								"endline": 143
							},
							{
								"kind": "struct",
								"line": 148,
								"members": [
									{
										"kind": "function",
										"line": 154,
										"endchar": 55,
										"char": 24,
										"type": "const @property bool()",
										"name": "empty",
										"comment": "Input range primitives.\n",
										"endline": 154
									},
									{
										"kind": "function",
										"line": 157,
										"endchar": 9,
										"char": 25,
										"type": "@property ref T()",
										"name": "front",
										"comment": "ditto\n",
										"endline": 161
									},
									{
										"kind": "function",
										"line": 164,
										"endchar": 9,
										"char": 14,
										"type": "void()",
										"name": "popFront",
										"comment": "ditto\n",
										"endline": 168
									},
									{
										"kind": "function",
										"line": 171,
										"endchar": 47,
										"char": 25,
										"type": "@property Range()",
										"name": "save",
										"comment": "Forward range primitive.\n",
										"endline": 171
									}
								],
								"char": 5,
								"name": "Range",
								"comment": "Defines the container's primary range, which embodies a forward range.\n"
							},
							{
								"kind": "function",
								"line": 198,
								"endchar": 5,
								"char": 20,
								"type": "const @property bool()",
								"name": "empty",
								"comment": "Property returning $(D true) if and only if the container has no\nelements.\n\nComplexity: $(BIGOH 1)\n",
								"endline": 201
							},
							{
								"kind": "function",
								"line": 209,
								"endchar": 5,
								"char": 21,
								"type": "@property SList()",
								"name": "dup",
								"comment": "Duplicates the container. The elements themselves are not transitively\nduplicated.\n\nComplexity: $(BIGOH n).\n",
								"endline": 212
							},
							{
								"kind": "function",
								"line": 220,
								"endchar": 5,
								"char": 11,
								"type": "Range()",
								"name": "opSlice",
								"comment": "Returns a range that iterates over all elements of the container, in\nforward order.\n\nComplexity: $(BIGOH 1)\n",
								"endline": 226
							},
							{
								"kind": "function",
								"line": 233,
								"endchar": 5,
								"char": 21,
								"type": "@property ref T()",
								"name": "front",
								"comment": "Forward to $(D opSlice().front).\n\nComplexity: $(BIGOH 1)\n",
								"endline": 237
							},
							{
								"kind": "template",
								"line": 251,
								"constraint": "op == \"~\" && is(typeof(SList(rhs)))",
								"members": [
									{
										"kind": "function",
										"line": 251,
										"endchar": 5,
										"char": 11,
										"type": "SList(Stuff rhs)",
										"parameters": [
											{
												"type": "Stuff",
												"name": "rhs"
											}
										],
										"name": "opBinary",
										"endline": 261
									}
								],
								"char": 11,
								"parameters": [
									{
										"kind": "value",
										"type": "string",
										"name": "op"
									},
									{
										"kind": "type",
										"name": "Stuff"
									}
								],
								"comment": "Returns a new $(D SList) that's the concatenation of $(D this) and its\nargument. $(D opBinaryRight) is only defined if $(D Stuff) does not\ndefine $(D opBinary).\n",
								"name": "opBinary"
							},
							{
								"kind": "template",
								"line": 264,
								"constraint": "op == \"~\" && !is(typeof(lhs.opBinary!\"~\"(this))) && is(typeof(SList(lhs)))",
								"members": [
									{
										"kind": "function",
										"line": 264,
										"endchar": 5,
										"char": 11,
										"type": "SList(Stuff lhs)",
										"parameters": [
											{
												"type": "Stuff",
												"name": "lhs"
											}
										],
										"name": "opBinaryRight",
										"endline": 272
									}
								],
								"char": 11,
								"parameters": [
									{
										"kind": "value",
										"type": "string",
										"name": "op"
									},
									{
										"kind": "type",
										"name": "Stuff"
									}
								],
								"comment": "ditto\n",
								"name": "opBinaryRight"
							},
							{
								"kind": "function",
								"line": 281,
								"endchar": 5,
								"char": 10,
								"type": "void()",
								"name": "clear",
								"comment": "Removes all contents from the $(D SList).\n\nPostcondition: $(D empty)\n\nComplexity: $(BIGOH 1)\n",
								"endline": 284
							},
							{
								"kind": "template",
								"line": 296,
								"constraint": "isInputRange!Stuff && isImplicitlyConvertible!(ElementType!Stuff, T)",
								"members": [
									{
										"kind": "function",
										"line": 296,
										"endchar": 5,
										"char": 12,
										"type": "size_t(Stuff stuff)",
										"parameters": [
											{
												"type": "Stuff",
												"name": "stuff"
											}
										],
										"name": "insertFront",
										"endline": 314
									}
								],
								"char": 12,
								"parameters": [
									{
										"kind": "type",
										"name": "Stuff"
									}
								],
								"comment": "Inserts $(D stuff) to the front of the container. $(D stuff) can be a\nvalue convertible to $(D T) or a range of objects convertible to $(D\nT). The stable version behaves the same, but guarantees that ranges\niterating over the container are never invalidated.\n\nReturns: The number of elements inserted\n\nComplexity: $(BIGOH m), where $(D m) is the length of $(D stuff)\n",
								"name": "insertFront"
							},
							{
								"kind": "template",
								"line": 317,
								"constraint": "isImplicitlyConvertible!(Stuff, T)",
								"members": [
									{
										"kind": "function",
										"line": 317,
										"endchar": 5,
										"char": 12,
										"type": "size_t(Stuff stuff)",
										"parameters": [
											{
												"type": "Stuff",
												"name": "stuff"
											}
										],
										"name": "insertFront",
										"endline": 324
									}
								],
								"char": 12,
								"parameters": [
									{
										"kind": "type",
										"name": "Stuff"
									}
								],
								"comment": "ditto\n",
								"name": "insertFront"
							},
							{
								"kind": "alias",
								"line": 327,
								"char": 5,
								"type": "insertFront",
								"name": "insert",
								"comment": "ditto\n"
							},
							{
								"kind": "alias",
								"line": 330,
								"char": 5,
								"type": "insert",
								"name": "stableInsert",
								"comment": "ditto\n"
							},
							{
								"kind": "alias",
								"line": 333,
								"char": 5,
								"type": "insertFront",
								"name": "stableInsertFront",
								"comment": "ditto\n"
							},
							{
								"kind": "function",
								"line": 346,
								"endchar": 5,
								"char": 7,
								"type": "T()",
								"name": "removeAny",
								"comment": "Picks one value in an unspecified position in the container, removes\nit from the container, and returns it. The stable version behaves the same,\nbut guarantees that ranges iterating over the container are never invalidated.\n\nPrecondition: $(D !empty)\n\nReturns: The element removed.\n\nComplexity: $(BIGOH 1).\n",
								"endline": 354
							},
							{
								"kind": "alias",
								"line": 356,
								"char": 5,
								"type": "removeAny",
								"name": "stableRemoveAny",
								"comment": "ditto\n"
							},
							{
								"kind": "function",
								"line": 367,
								"endchar": 5,
								"char": 10,
								"type": "void()",
								"name": "removeFront",
								"comment": "Removes the value at the front of the container. The stable version\nbehaves the same, but guarantees that ranges iterating over the\ncontainer are never invalidated.\n\nPrecondition: $(D !empty)\n\nComplexity: $(BIGOH 1).\n",
								"endline": 371
							},
							{
								"kind": "alias",
								"line": 374,
								"char": 5,
								"type": "removeFront",
								"name": "stableRemoveFront",
								"comment": "ditto\n"
							},
							{
								"kind": "function",
								"line": 389,
								"endchar": 5,
								"char": 12,
								"type": "size_t(size_t howMany)",
								"parameters": [
									{
										"type": "size_t",
										"name": "howMany"
									}
								],
								"name": "removeFront",
								"comment": "Removes $(D howMany) values at the front or back of the\ncontainer. Unlike the unparameterized versions above, these functions\ndo not throw if they could not remove $(D howMany) elements. Instead,\nif $(D howMany > n), all elements are removed. The returned value is\nthe effective number of elements removed. The stable version behaves\nthe same, but guarantees that ranges iterating over the container are\nnever invalidated.\n\nReturns: The number of elements removed\n\nComplexity: $(BIGOH howMany * log(n)).\n",
								"endline": 398
							},
							{
								"kind": "alias",
								"line": 401,
								"char": 5,
								"type": "removeFront",
								"name": "stableRemoveFront",
								"comment": "ditto\n"
							},
							{
								"kind": "template",
								"line": 431,
								"members": [
									{
										"kind": "function",
										"line": 431,
										"endchar": 5,
										"char": 12,
										"type": "size_t(Range r, Stuff stuff)",
										"parameters": [
											{
												"type": "Range",
												"name": "r"
											},
											{
												"type": "Stuff",
												"name": "stuff"
											}
										],
										"name": "insertAfter",
										"endline": 444
									}
								],
								"char": 12,
								"parameters": [
									{
										"kind": "type",
										"name": "Stuff"
									}
								],
								"comment": "Inserts $(D stuff) after range $(D r), which must be a range\npreviously extracted from this container. Given that all ranges for a\nlist end at the end of the list, this function essentially appends to\nthe list and uses $(D r) as a potentially fast way to reach the last\nnode in the list. Ideally $(D r) is positioned near or at the last\nelement of the list.\n\n$(D stuff) can be a value convertible to $(D T) or a range of objects\nconvertible to $(D T). The stable version behaves the same, but\nguarantees that ranges iterating over the container are never\ninvalidated.\n\nReturns: The number of values inserted.\n\nComplexity: $(BIGOH k + m), where $(D k) is the number of elements in\n$(D r) and $(D m) is the length of $(D stuff).\n\nExamples:\n--------------------\nauto sl = SList!string([\"a\", \"b\", \"d\"]);\nsl.insertAfter(sl[], \"e\"); // insert at the end (slowest)\nassert(std.algorithm.equal(sl[], [\"a\", \"b\", \"d\", \"e\"]));\nsl.insertAfter(std.range.take(sl[], 2), \"c\"); // insert after \"b\"\nassert(std.algorithm.equal(sl[], [\"a\", \"b\", \"c\", \"d\", \"e\"]));\n--------------------\n",
								"name": "insertAfter"
							},
							{
								"kind": "template",
								"line": 460,
								"members": [
									{
										"kind": "function",
										"line": 460,
										"endchar": 5,
										"char": 12,
										"type": "size_t(Take!Range r, Stuff stuff)",
										"parameters": [
											{
												"type": "Take!Range",
												"name": "r"
											},
											{
												"type": "Stuff",
												"name": "stuff"
											}
										],
										"name": "insertAfter",
										"endline": 483
									}
								],
								"char": 12,
								"parameters": [
									{
										"kind": "type",
										"name": "Stuff"
									}
								],
								"comment": "Similar to $(D insertAfter) above, but accepts a range bounded in\ncount. This is important for ensuring fast insertions in the middle of\nthe list.  For fast insertions after a specified position $(D r), use\n$(D insertAfter(take(r, 1), stuff)). The complexity of that operation\nonly depends on the number of elements in $(D stuff).\n\nPrecondition: $(D r.original.empty || r.maxLength > 0)\n\nReturns: The number of values inserted.\n\nComplexity: $(BIGOH k + m), where $(D k) is the number of elements in\n$(D r) and $(D m) is the length of $(D stuff).\n",
								"name": "insertAfter"
							},
							{
								"kind": "alias",
								"line": 486,
								"char": 5,
								"type": "insertAfter",
								"name": "stableInsertAfter",
								"comment": "ditto\n"
							},
							{
								"kind": "function",
								"line": 495,
								"endchar": 5,
								"char": 11,
								"type": "Range(Range r)",
								"parameters": [
									{
										"type": "Range",
										"name": "r"
									}
								],
								"name": "linearRemove",
								"comment": "Removes a range from the list in linear time.\n\nReturns: An empty range.\n\nComplexity: $(BIGOH n)\n",
								"endline": 505
							},
							{
								"kind": "function",
								"line": 514,
								"endchar": 5,
								"char": 11,
								"type": "Range(Take!Range r)",
								"parameters": [
									{
										"type": "Take!Range",
										"name": "r"
									}
								],
								"name": "linearRemove",
								"comment": "Removes a $(D Take!Range) from the list in linear time.\n\nReturns: A range comprehending the elements after the removed range.\n\nComplexity: $(BIGOH n)\n",
								"endline": 538
							},
							{
								"kind": "alias",
								"line": 541,
								"char": 5,
								"type": "linearRemove",
								"name": "stableLinearRemove",
								"comment": "ditto\n"
							}
						],
						"char": 1,
						"name": "SList"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": "   Implements a simple and fast singly-linked list.\n\n   $(D SList) uses reference semantics.\n",
				"name": "SList"
			}
		],
		"name": "std.container.slist",
		"comment": "This module implements a singly-linked list container.\n\nThis module is a submodule of $(LINK2 std_container.html, std.container).\n\nSource: $(PHOBOSSRC std/container/_slist.d)\nMacros:\nWIKI = Phobos/StdContainer\nTEXTWITHCOMMAS = $0\n\nCopyright: Red-black tree code copyright (C) 2008- by Steven Schveighoffer. Other code\ncopyright 2010- Andrei Alexandrescu. All rights reserved by the respective holders.\n\nLicense: Distributed under the Boost Software License, Version 1.0.\n(See accompanying file LICENSE_1_0.txt or copy at $(WEB\nboost.org/LICENSE_1_0.txt)).\n\nAuthors: Steven Schveighoffer, $(WEB erdani.com, Andrei Alexandrescu)\n"
	},
	{
		"kind": "module",
		"file": "../phobos/std/container/rbtree.d",
		"members": [
			{
				"kind": "template",
				"line": 624,
				"constraint": "is(typeof(binaryFun!less(T.init, T.init)))",
				"members": [
					{
						"kind": "class",
						"line": 624,
						"members": [
							{
								"kind": "alias",
								"line": 749,
								"char": 5,
								"type": "T",
								"name": "Elem",
								"comment": " Element type for the tree\n"
							},
							{
								"kind": "struct",
								"line": 779,
								"members": [
									{
										"kind": "function",
										"line": 793,
										"endchar": 9,
										"char": 24,
										"type": "const @property bool()",
										"name": "empty",
										"comment": " Returns $(D true) if the range is _empty\n",
										"endline": 796
									},
									{
										"kind": "function",
										"line": 801,
										"endchar": 9,
										"char": 24,
										"type": "@property Elem()",
										"name": "front",
										"comment": " Returns the first element in the range\n",
										"endline": 804
									},
									{
										"kind": "function",
										"line": 809,
										"endchar": 9,
										"char": 24,
										"type": "@property Elem()",
										"name": "back",
										"comment": " Returns the last element in the range\n",
										"endline": 812
									},
									{
										"kind": "function",
										"line": 819,
										"endchar": 9,
										"char": 14,
										"type": "void()",
										"name": "popFront",
										"comment": " pop the front element from the range\n\n complexity: amortized $(BIGOH 1)\n",
										"endline": 822
									},
									{
										"kind": "function",
										"line": 829,
										"endchar": 9,
										"char": 14,
										"type": "void()",
										"name": "popBack",
										"comment": " pop the back element from the range\n\n complexity: amortized $(BIGOH 1)\n",
										"endline": 832
									},
									{
										"kind": "function",
										"line": 837,
										"endchar": 9,
										"char": 25,
										"type": "@property Range()",
										"name": "save",
										"comment": " Trivial _save implementation, needed for $(D isForwardRange).\n",
										"endline": 840
									}
								],
								"char": 5,
								"name": "Range",
								"comment": " The range type for $(D RedBlackTree)\n"
							},
							{
								"kind": "function",
								"line": 911,
								"endchar": 5,
								"char": 20,
								"type": "@property bool()",
								"name": "empty",
								"comment": " Check if any elements exist in the container.  Returns $(D false) if at least\n one element exists.\n",
								"endline": 914
							},
							{
								"kind": "function",
								"line": 921,
								"endchar": 5,
								"char": 22,
								"type": "const @property size_t()",
								"name": "length",
								"comment": "        Returns the number of elements in the container.\n\n        Complexity: $(BIGOH 1).\n",
								"endline": 924
							},
							{
								"kind": "function",
								"line": 932,
								"endchar": 5,
								"char": 28,
								"type": "@property RedBlackTree()",
								"name": "dup",
								"comment": " Duplicate this container.  The resulting container contains a shallow\n copy of the elements.\n\n Complexity: $(BIGOH n)\n",
								"endline": 935
							},
							{
								"kind": "function",
								"line": 955,
								"endchar": 5,
								"char": 11,
								"type": "Range()",
								"name": "opSlice",
								"comment": " Fetch a range that spans all the elements in the container.\n\n Complexity: $(BIGOH 1)\n",
								"endline": 958
							},
							{
								"kind": "function",
								"line": 965,
								"endchar": 5,
								"char": 10,
								"type": "Elem()",
								"name": "front",
								"comment": " The front element in the container\n\n Complexity: $(BIGOH 1)\n",
								"endline": 968
							},
							{
								"kind": "function",
								"line": 975,
								"endchar": 5,
								"char": 10,
								"type": "Elem()",
								"name": "back",
								"comment": " The last element in the container\n\n Complexity: $(BIGOH log(n))\n",
								"endline": 978
							},
							{
								"kind": "template",
								"line": 986,
								"constraint": "op == \"in\"",
								"members": [
									{
										"kind": "function",
										"line": 986,
										"endchar": 5,
										"char": 10,
										"type": "bool(Elem e)",
										"parameters": [
											{
												"type": "Elem",
												"name": "e"
											}
										],
										"name": "opBinaryRight",
										"endline": 989
									}
								],
								"char": 10,
								"parameters": [
									{
										"kind": "value",
										"type": "string",
										"name": "op"
									}
								],
								"comment": "        $(D in) operator. Check to see if the given element exists in the\n        container.\n\n       Complexity: $(BIGOH log(n))\n",
								"name": "opBinaryRight"
							},
							{
								"kind": "function",
								"line": 1003,
								"storageClass": [
									"override"
								],
								"endchar": 5,
								"char": 19,
								"type": "bool(Object rhs)",
								"parameters": [
									{
										"type": "Object",
										"name": "rhs"
									}
								],
								"name": "opEquals",
								"comment": " Compares two trees for equality.\n\n Complexity: $(BIGOH n*log(n))\n",
								"endline": 1017
							},
							{
								"kind": "function",
								"line": 1038,
								"endchar": 5,
								"char": 10,
								"type": "void()",
								"name": "clear",
								"comment": " Removes all elements from the container.\n\n Complexity: $(BIGOH 1)\n",
								"endline": 1043
							},
							{
								"kind": "template",
								"line": 1059,
								"constraint": "isImplicitlyConvertible!(Stuff, Elem)",
								"members": [
									{
										"kind": "function",
										"line": 1059,
										"endchar": 5,
										"char": 12,
										"type": "size_t(Stuff stuff)",
										"parameters": [
											{
												"type": "Stuff",
												"name": "stuff"
											}
										],
										"name": "stableInsert",
										"endline": 1070
									}
								],
								"char": 12,
								"parameters": [
									{
										"kind": "type",
										"name": "Stuff"
									}
								],
								"comment": " Insert a single element in the container.  Note that this does not\n invalidate any ranges currently iterating the container.\n\n Complexity: $(BIGOH log(n))\n",
								"name": "stableInsert"
							},
							{
								"kind": "template",
								"line": 1078,
								"constraint": "isInputRange!Stuff && isImplicitlyConvertible!(ElementType!Stuff, Elem)",
								"members": [
									{
										"kind": "function",
										"line": 1078,
										"endchar": 5,
										"char": 12,
										"type": "size_t(Stuff stuff)",
										"parameters": [
											{
												"type": "Stuff",
												"name": "stuff"
											}
										],
										"name": "stableInsert",
										"endline": 1098
									}
								],
								"char": 12,
								"parameters": [
									{
										"kind": "type",
										"name": "Stuff"
									}
								],
								"comment": " Insert a range of elements in the container.  Note that this does not\n invalidate any ranges currently iterating the container.\n\n Complexity: $(BIGOH m * log(n))\n",
								"name": "stableInsert"
							},
							{
								"kind": "alias",
								"line": 1101,
								"char": 5,
								"type": "stableInsert",
								"name": "insert",
								"comment": "ditto\n"
							},
							{
								"kind": "function",
								"line": 1139,
								"endchar": 5,
								"char": 10,
								"type": "Elem()",
								"name": "removeAny",
								"comment": " Remove an element from the container and return its value.\n\n Complexity: $(BIGOH log(n))\n",
								"endline": 1149
							},
							{
								"kind": "function",
								"line": 1168,
								"endchar": 5,
								"char": 10,
								"type": "void()",
								"name": "removeFront",
								"comment": " Remove the front element from the container.\n\n Complexity: $(BIGOH log(n))\n",
								"endline": 1175
							},
							{
								"kind": "function",
								"line": 1182,
								"endchar": 5,
								"char": 10,
								"type": "void()",
								"name": "removeBack",
								"comment": " Remove the back element from the container.\n\n Complexity: $(BIGOH log(n))\n",
								"endline": 1193
							},
							{
								"kind": "function",
								"line": 1220,
								"endchar": 5,
								"char": 11,
								"type": "Range(Range r)",
								"parameters": [
									{
										"type": "Range",
										"name": "r"
									}
								],
								"name": "remove",
								"comment": "        Removes the given range from the container.\n\n        Returns: A range containing all of the elements that were after the\n                 given range.\n\n        Complexity: $(BIGOH m * log(n)) (where m is the number of elements in\n                    the range)\n",
								"endline": 1234
							},
							{
								"kind": "function",
								"line": 1264,
								"endchar": 5,
								"char": 11,
								"type": "Range(Take!Range r)",
								"parameters": [
									{
										"type": "Take!Range",
										"name": "r"
									}
								],
								"name": "remove",
								"comment": "        Removes the given $(D Take!Range) from the container\n\n        Returns: A range containing all of the elements that were after the\n                 given range.\n\n        Complexity: $(BIGOH m * log(n)) (where m is the number of elements in\n                    the range)\n",
								"endline": 1280
							},
							{
								"kind": "template",
								"line": 1327,
								"constraint": "allSatisfy!(isImplicitlyConvertibleToElem, U)",
								"members": [
									{
										"kind": "function",
										"line": 1327,
										"endchar": 5,
										"char": 12,
										"type": "size_t(U elems)",
										"parameters": [
											{
												"type": "U",
												"name": "elems"
											}
										],
										"name": "removeKey",
										"endline": 1336
									}
								],
								"char": 12,
								"parameters": [
									{
										"kind": "tuple",
										"name": "U"
									}
								],
								"comment": "       Removes elements from the container that are equal to the given values\n       according to the less comparator. One element is removed for each value\n       given which is in the container. If $(D allowDuplicates) is true,\n       duplicates are removed only if duplicate values are given.\n\n       Returns: The number of elements removed.\n\n       Complexity: $(BIGOH m log(n)) (where m is the number of elements to remove)\n\n       Examples:\n--------------------\nauto rbt = redBlackTree!true(0, 1, 1, 1, 4, 5, 7);\nrbt.removeKey(1, 4, 7);\nassert(equal(rbt[], [0, 1, 1, 5]));\nrbt.removeKey(1, 1, 0);\nassert(equal(rbt[], [5]));\n--------------------\n",
								"name": "removeKey"
							},
							{
								"kind": "template",
								"line": 1339,
								"constraint": "isImplicitlyConvertible!(U, Elem)",
								"members": [
									{
										"kind": "function",
										"line": 1339,
										"endchar": 5,
										"char": 12,
										"type": "size_t(U[] elems)",
										"parameters": [
											{
												"type": "U[]",
												"name": "elems"
											}
										],
										"name": "removeKey",
										"endline": 1358
									}
								],
								"char": 12,
								"parameters": [
									{
										"kind": "type",
										"name": "U"
									}
								],
								"comment": " Ditto\n",
								"name": "removeKey"
							},
							{
								"kind": "template",
								"line": 1361,
								"constraint": "isInputRange!Stuff && isImplicitlyConvertible!(ElementType!Stuff, Elem) && !isDynamicArray!Stuff",
								"members": [
									{
										"kind": "function",
										"line": 1361,
										"endchar": 5,
										"char": 12,
										"type": "size_t(Stuff stuff)",
										"parameters": [
											{
												"type": "Stuff",
												"name": "stuff"
											}
										],
										"name": "removeKey",
										"endline": 1370
									}
								],
								"char": 12,
								"parameters": [
									{
										"kind": "type",
										"name": "Stuff"
									}
								],
								"comment": " Ditto\n",
								"name": "removeKey"
							},
							{
								"kind": "function",
								"line": 1468,
								"endchar": 5,
								"char": 11,
								"type": "Range(Elem e)",
								"parameters": [
									{
										"type": "Elem",
										"name": "e"
									}
								],
								"name": "upperBound",
								"comment": " Get a range from the container with all elements that are > e according\n to the less comparator\n\n Complexity: $(BIGOH log(n))\n",
								"endline": 1471
							},
							{
								"kind": "function",
								"line": 1479,
								"endchar": 5,
								"char": 11,
								"type": "Range(Elem e)",
								"parameters": [
									{
										"type": "Elem",
										"name": "e"
									}
								],
								"name": "lowerBound",
								"comment": " Get a range from the container with all elements that are < e according\n to the less comparator\n\n Complexity: $(BIGOH log(n))\n",
								"endline": 1482
							},
							{
								"kind": "function",
								"line": 1490,
								"endchar": 5,
								"char": 11,
								"type": "Range(Elem e)",
								"parameters": [
									{
										"type": "Elem",
										"name": "e"
									}
								],
								"name": "equalRange",
								"comment": " Get a range from the container with all elements that are == e according\n to the less comparator\n\n Complexity: $(BIGOH log(n))\n",
								"endline": 1506
							},
							{
								"kind": "constructor",
								"line": 1619,
								"endchar": 5,
								"char": 5,
								"type": "(Elem[] elems...)",
								"parameters": [
									{
										"type": "Elem[]",
										"name": "elems"
									}
								],
								"name": "this",
								"comment": " Constructor. Pass in an array of elements, or individual elements to\n initialize the tree with.\n",
								"endline": 1623
							},
							{
								"kind": "template",
								"line": 1628,
								"constraint": "isInputRange!Stuff && isImplicitlyConvertible!(ElementType!Stuff, Elem)",
								"members": [
									{
										"kind": "constructor",
										"line": 1628,
										"endchar": 5,
										"char": 5,
										"type": "(Stuff stuff)",
										"parameters": [
											{
												"type": "Stuff",
												"name": "stuff"
											}
										],
										"name": "this",
										"endline": 1632
									}
								],
								"char": 5,
								"parameters": [
									{
										"kind": "type",
										"name": "Stuff"
									}
								],
								"comment": " Constructor. Pass in a range of elements to initialize the tree with.\n",
								"name": "this"
							},
							{
								"kind": "constructor",
								"line": 1635,
								"endchar": 5,
								"char": 5,
								"type": "()",
								"name": "this",
								"comment": "\n",
								"endline": 1638
							}
						],
						"char": 7,
						"name": "RedBlackTree"
					}
				],
				"char": 7,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "alias",
						"name": "less",
						"defaultAlias": "\"a < b\""
					},
					{
						"kind": "value",
						"defaultValue": "false",
						"deco": "b",
						"name": "allowDuplicates"
					}
				],
				"comment": " Implementation of a $(LUCKY red-black tree) container.\n\n All inserts, removes, searches, and any function in general has complexity\n of $(BIGOH lg(n)).\n\n To use a different comparison than $(D \"a < b\"), pass a different operator string\n that can be used by $(XREF functional, binaryFun), or pass in a\n function, delegate, functor, or any type where $(D less(a, b)) results in a $(D bool)\n value.\n\n Note that less should produce a strict ordering.  That is, for two unequal\n elements $(D a) and $(D b), $(D less(a, b) == !less(b, a)). $(D less(a, a)) should\n always equal $(D false).\n\n If $(D allowDuplicates) is set to $(D true), then inserting the same element more than\n once continues to add more elements.  If it is $(D false), duplicate elements are\n ignored on insertion.  If duplicates are allowed, then new elements are\n inserted after all existing duplicate elements.\n",
				"name": "RedBlackTree"
			},
			{
				"kind": "template",
				"line": 1714,
				"members": [
					{
						"kind": "function",
						"line": 1714,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "(E[] elems...)",
						"parameters": [
							{
								"type": "E[]",
								"name": "elems"
							}
						],
						"name": "redBlackTree",
						"endline": 1717
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "E"
					}
				],
				"comment": "    Convenience function for creating a $(D RedBlackTree!E) from a list of\n    values.\nExample:\n\n---\nauto rbt1 = redBlackTree(0, 1, 5, 7);\nauto rbt2 = redBlackTree!string(\"hello\", \"world\");\nauto rbt3 = redBlackTree!true(0, 1, 5, 7, 5);\nauto rbt4 = redBlackTree!\"a > b\"(0, 1, 5, 7);\nauto rbt5 = redBlackTree!(\"a > b\", true)(0.1, 1.3, 5.9, 7.2, 5.9);\n\n---\n",
				"name": "redBlackTree"
			},
			{
				"kind": "template",
				"line": 1720,
				"members": [
					{
						"kind": "function",
						"line": 1720,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "(E[] elems...)",
						"parameters": [
							{
								"type": "E[]",
								"name": "elems"
							}
						],
						"name": "redBlackTree",
						"endline": 1723
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "value",
						"deco": "b",
						"name": "allowDuplicates"
					},
					{
						"kind": "type",
						"name": "E"
					}
				],
				"comment": " Ditto\n",
				"name": "redBlackTree"
			},
			{
				"kind": "template",
				"line": 1726,
				"members": [
					{
						"kind": "function",
						"line": 1726,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "(E[] elems...)",
						"parameters": [
							{
								"type": "E[]",
								"name": "elems"
							}
						],
						"name": "redBlackTree",
						"endline": 1729
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "alias",
						"name": "less"
					},
					{
						"kind": "type",
						"name": "E"
					}
				],
				"comment": " Ditto\n",
				"name": "redBlackTree"
			},
			{
				"kind": "template",
				"line": 1732,
				"constraint": "is(typeof(binaryFun!less(E.init, E.init)))",
				"members": [
					{
						"kind": "function",
						"line": 1732,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "(E[] elems...)",
						"parameters": [
							{
								"type": "E[]",
								"name": "elems"
							}
						],
						"name": "redBlackTree",
						"endline": 1739
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "alias",
						"name": "less"
					},
					{
						"kind": "value",
						"deco": "b",
						"name": "allowDuplicates"
					},
					{
						"kind": "type",
						"name": "E"
					}
				],
				"comment": " Ditto\n",
				"name": "redBlackTree"
			}
		],
		"name": "std.container.rbtree",
		"comment": "This module implements a red-black tree container.\n\nThis module is a submodule of $(LINK2 std_container.html, std.container).\n\nSource: $(PHOBOSSRC std/container/_rbtree.d)\nMacros:\nWIKI = Phobos/StdContainer\nTEXTWITHCOMMAS = $0\n\nCopyright: Red-black tree code copyright (C) 2008- by Steven Schveighoffer. Other code\ncopyright 2010- Andrei Alexandrescu. All rights reserved by the respective holders.\n\nLicense: Distributed under the Boost Software License, Version 1.0.\n(See accompanying file LICENSE_1_0.txt or copy at $(WEB\nboost.org/LICENSE_1_0.txt)).\n\nAuthors: Steven Schveighoffer, $(WEB erdani.com, Andrei Alexandrescu)\n"
	},
	{
		"kind": "module",
		"file": "../phobos/std/container/array.d",
		"members": [
			{
				"kind": "template",
				"line": 198,
				"constraint": "!is(Unqual!T == bool)",
				"members": [
					{
						"kind": "struct",
						"line": 198,
						"members": [
							{
								"kind": "template",
								"line": 368,
								"constraint": "isImplicitlyConvertible!(U, T)",
								"members": [
									{
										"kind": "constructor",
										"line": 368,
										"endchar": 5,
										"char": 5,
										"type": "(U[] values...)",
										"parameters": [
											{
												"type": "U[]",
												"name": "values"
											}
										],
										"name": "this",
										"endline": 384
									}
								],
								"char": 5,
								"parameters": [
									{
										"kind": "type",
										"name": "U"
									}
								],
								"comment": "Constructor taking a number of items\n",
								"name": "this"
							},
							{
								"kind": "template",
								"line": 389,
								"constraint": "isInputRange!Stuff && isImplicitlyConvertible!(ElementType!Stuff, T) && !is(Stuff == T[])",
								"members": [
									{
										"kind": "constructor",
										"line": 389,
										"endchar": 5,
										"char": 5,
										"type": "(Stuff stuff)",
										"parameters": [
											{
												"type": "Stuff",
												"name": "stuff"
											}
										],
										"name": "this",
										"endline": 393
									}
								],
								"char": 5,
								"parameters": [
									{
										"kind": "type",
										"name": "Stuff"
									}
								],
								"comment": "Constructor taking an input range\n",
								"name": "this"
							},
							{
								"kind": "function",
								"line": 399,
								"endchar": 5,
								"char": 10,
								"type": "const bool(const Array rhs)",
								"parameters": [
									{
										"storageClass": [
											"const"
										],
										"type": "Array",
										"name": "rhs"
									}
								],
								"name": "opEquals",
								"comment": "Comparison for equality.\n",
								"endline": 402
							},
							{
								"kind": "function",
								"line": 405,
								"endchar": 5,
								"char": 10,
								"type": "const bool(ref const Array rhs)",
								"parameters": [
									{
										"storageClass": [
											"const",
											"ref"
										],
										"type": "Array",
										"name": "rhs"
									}
								],
								"name": "opEquals",
								"comment": "ditto\n",
								"endline": 410
							},
							{
								"kind": "alias",
								"line": 418,
								"char": 5,
								"type": "RangeT!Array",
								"name": "Range",
								"comment": "   Defines the container's primary range, which is a random-access range.\n\n   ConstRange is a variant with const elements.\n   ImmutableRange is a variant with immutable elements.\n"
							},
							{
								"kind": "alias",
								"line": 419,
								"char": 5,
								"type": "RangeT!(const(Array))",
								"name": "ConstRange",
								"comment": "ditto\n"
							},
							{
								"kind": "alias",
								"line": 420,
								"char": 5,
								"type": "RangeT!(immutable(Array))",
								"name": "ImmutableRange",
								"comment": "ditto\n"
							},
							{
								"kind": "function",
								"line": 428,
								"endchar": 5,
								"char": 21,
								"type": "@property Array()",
								"name": "dup",
								"comment": "Duplicates the container. The elements themselves are not transitively\nduplicated.\n\nComplexity: $(BIGOH n).\n",
								"endline": 432
							},
							{
								"kind": "function",
								"line": 440,
								"endchar": 5,
								"char": 20,
								"type": "const @property bool()",
								"name": "empty",
								"comment": "Property returning $(D true) if and only if the container has no\nelements.\n\nComplexity: $(BIGOH 1)\n",
								"endline": 443
							},
							{
								"kind": "function",
								"line": 450,
								"endchar": 5,
								"char": 22,
								"type": "const @property size_t()",
								"name": "length",
								"comment": "Returns the number of elements in the container.\n\nComplexity: $(BIGOH 1).\n",
								"endline": 453
							},
							{
								"kind": "function",
								"line": 456,
								"endchar": 5,
								"char": 12,
								"type": "const size_t()",
								"name": "opDollar",
								"comment": "ditto\n",
								"endline": 459
							},
							{
								"kind": "function",
								"line": 467,
								"endchar": 5,
								"char": 22,
								"type": "@property size_t()",
								"name": "capacity",
								"comment": "Returns the maximum number of elements the container can store without\n   (a) allocating memory, (b) invalidating iterators upon insertion.\n\nComplexity: $(BIGOH 1)\n",
								"endline": 470
							},
							{
								"kind": "function",
								"line": 479,
								"endchar": 5,
								"char": 10,
								"type": "void(size_t elements)",
								"parameters": [
									{
										"type": "size_t",
										"name": "elements"
									}
								],
								"name": "reserve",
								"comment": "Ensures sufficient capacity to accommodate $(D e) elements.\n\nPostcondition: $(D capacity >= e)\n\nComplexity: $(BIGOH 1)\n",
								"endline": 497
							},
							{
								"kind": "function",
								"line": 505,
								"endchar": 5,
								"char": 11,
								"type": "Range()",
								"name": "opSlice",
								"comment": "Returns a range that iterates over elements of the container, in\nforward order.\n\nComplexity: $(BIGOH 1)\n",
								"endline": 508
							},
							{
								"kind": "function",
								"line": 526,
								"endchar": 5,
								"char": 11,
								"type": "Range(size_t i, size_t j)",
								"parameters": [
									{
										"type": "size_t",
										"name": "i"
									},
									{
										"type": "size_t",
										"name": "j"
									}
								],
								"name": "opSlice",
								"comment": "Returns a range that iterates over elements of the container from\nindex $(D a) up to (excluding) index $(D b).\n\nPrecondition: $(D a <= b && b <= length)\n\nComplexity: $(BIGOH 1)\n",
								"endline": 530
							},
							{
								"kind": "function",
								"line": 549,
								"endchar": 5,
								"char": 28,
								"type": "inout @property ref inout(T)()",
								"name": "front",
								"comment": "Forward to $(D opSlice().front) and $(D opSlice().back), respectively.\n\nPrecondition: $(D !empty)\n\nComplexity: $(BIGOH 1)\n",
								"endline": 553
							},
							{
								"kind": "function",
								"line": 556,
								"endchar": 5,
								"char": 28,
								"type": "inout @property ref inout(T)()",
								"name": "back",
								"comment": "ditto\n",
								"endline": 560
							},
							{
								"kind": "function",
								"line": 569,
								"endchar": 5,
								"char": 18,
								"type": "inout ref inout(T)(size_t i)",
								"parameters": [
									{
										"type": "size_t",
										"name": "i"
									}
								],
								"name": "opIndex",
								"comment": "Indexing operators yield or modify the value at a specified index.\n\nPrecondition: $(D i < length)\n\nComplexity: $(BIGOH 1)\n",
								"endline": 573
							},
							{
								"kind": "function",
								"line": 582,
								"endchar": 5,
								"char": 10,
								"type": "void(T value)",
								"parameters": [
									{
										"type": "T",
										"name": "value"
									}
								],
								"name": "opSliceAssign",
								"comment": "Slicing operations execute an operation on an entire slice.\n\nPrecondition: $(D i < j && j < length)\n\nComplexity: $(BIGOH slice.length)\n",
								"endline": 586
							},
							{
								"kind": "function",
								"line": 589,
								"endchar": 5,
								"char": 10,
								"type": "void(T value, size_t i, size_t j)",
								"parameters": [
									{
										"type": "T",
										"name": "value"
									},
									{
										"type": "size_t",
										"name": "i"
									},
									{
										"type": "size_t",
										"name": "j"
									}
								],
								"name": "opSliceAssign",
								"comment": "ditto\n",
								"endline": 595
							},
							{
								"kind": "template",
								"line": 598,
								"constraint": "op == \"++\" || op == \"--\"",
								"members": [
									{
										"kind": "function",
										"line": 598,
										"endchar": 5,
										"char": 10,
										"type": "void()",
										"name": "opSliceUnary",
										"endline": 603
									}
								],
								"char": 10,
								"parameters": [
									{
										"kind": "value",
										"type": "string",
										"name": "op"
									}
								],
								"comment": "ditto\n",
								"name": "opSliceUnary"
							},
							{
								"kind": "template",
								"line": 606,
								"constraint": "op == \"++\" || op == \"--\"",
								"members": [
									{
										"kind": "function",
										"line": 606,
										"endchar": 5,
										"char": 10,
										"type": "void(size_t i, size_t j)",
										"parameters": [
											{
												"type": "size_t",
												"name": "i"
											},
											{
												"type": "size_t",
												"name": "j"
											}
										],
										"name": "opSliceUnary",
										"endline": 611
									}
								],
								"char": 10,
								"parameters": [
									{
										"kind": "value",
										"type": "string",
										"name": "op"
									}
								],
								"comment": "ditto\n",
								"name": "opSliceUnary"
							},
							{
								"kind": "template",
								"line": 614,
								"members": [
									{
										"kind": "function",
										"line": 614,
										"endchar": 5,
										"char": 10,
										"type": "void(T value)",
										"parameters": [
											{
												"type": "T",
												"name": "value"
											}
										],
										"name": "opSliceOpAssign",
										"endline": 618
									}
								],
								"char": 10,
								"parameters": [
									{
										"kind": "value",
										"type": "string",
										"name": "op"
									}
								],
								"comment": "ditto\n",
								"name": "opSliceOpAssign"
							},
							{
								"kind": "template",
								"line": 621,
								"members": [
									{
										"kind": "function",
										"line": 621,
										"endchar": 5,
										"char": 10,
										"type": "void(T value, size_t i, size_t j)",
										"parameters": [
											{
												"type": "T",
												"name": "value"
											},
											{
												"type": "size_t",
												"name": "i"
											},
											{
												"type": "size_t",
												"name": "j"
											}
										],
										"name": "opSliceOpAssign",
										"endline": 625
									}
								],
								"char": 10,
								"parameters": [
									{
										"kind": "value",
										"type": "string",
										"name": "op"
									}
								],
								"comment": "ditto\n",
								"name": "opSliceOpAssign"
							},
							{
								"kind": "template",
								"line": 635,
								"constraint": "op == \"~\"",
								"members": [
									{
										"kind": "function",
										"line": 635,
										"endchar": 5,
										"char": 11,
										"type": "Array(Stuff stuff)",
										"parameters": [
											{
												"type": "Stuff",
												"name": "stuff"
											}
										],
										"name": "opBinary",
										"endline": 646
									}
								],
								"char": 11,
								"parameters": [
									{
										"kind": "value",
										"type": "string",
										"name": "op"
									},
									{
										"kind": "type",
										"name": "Stuff"
									}
								],
								"comment": "Returns a new container that's the concatenation of $(D this) and its\nargument. $(D opBinaryRight) is only defined if $(D Stuff) does not\ndefine $(D opBinary).\n\nComplexity: $(BIGOH n + m), where m is the number of elements in $(D\nstuff)\n",
								"name": "opBinary"
							},
							{
								"kind": "template",
								"line": 651,
								"constraint": "op == \"~\"",
								"members": [
									{
										"kind": "function",
										"line": 651,
										"endchar": 5,
										"char": 10,
										"type": "void(Stuff stuff)",
										"parameters": [
											{
												"type": "Stuff",
												"name": "stuff"
											}
										],
										"name": "opOpAssign",
										"endline": 662
									}
								],
								"char": 10,
								"parameters": [
									{
										"kind": "value",
										"type": "string",
										"name": "op"
									},
									{
										"kind": "type",
										"name": "Stuff"
									}
								],
								"comment": "Forwards to $(D insertBack(stuff)).\n",
								"name": "opOpAssign"
							},
							{
								"kind": "function",
								"line": 672,
								"endchar": 5,
								"char": 10,
								"type": "void()",
								"name": "clear",
								"comment": "Removes all contents from the container. The container decides how $(D\ncapacity) is affected.\n\nPostcondition: $(D empty)\n\nComplexity: $(BIGOH n)\n",
								"endline": 675
							},
							{
								"kind": "function",
								"line": 687,
								"endchar": 5,
								"char": 20,
								"type": "@property void(size_t newLength)",
								"parameters": [
									{
										"type": "size_t",
										"name": "newLength"
									}
								],
								"name": "length",
								"comment": "Sets the number of elements in the container to $(D newSize). If $(D\nnewSize) is greater than $(D length), the added elements are added to\nunspecified positions in the container and initialized with $(D\nT.init).\n\nComplexity: $(BIGOH abs(n - newLength))\n\nPostcondition: $(D length == newLength)\n",
								"endline": 691
							},
							{
								"kind": "function",
								"line": 704,
								"endchar": 5,
								"char": 7,
								"type": "T()",
								"name": "removeAny",
								"comment": "Picks one value in an unspecified position in the container, removes\nit from the container, and returns it. The stable version behaves the same,\nbut guarantees that ranges iterating over the container are never invalidated.\n\nPrecondition: $(D !empty)\n\nReturns: The element removed.\n\nComplexity: $(BIGOH log(n)).\n",
								"endline": 709
							},
							{
								"kind": "alias",
								"line": 711,
								"char": 5,
								"type": "removeAny",
								"name": "stableRemoveAny",
								"comment": "ditto\n"
							},
							{
								"kind": "template",
								"line": 724,
								"constraint": "isImplicitlyConvertible!(Stuff, T) || isInputRange!Stuff && isImplicitlyConvertible!(ElementType!Stuff, T)",
								"members": [
									{
										"kind": "function",
										"line": 724,
										"endchar": 5,
										"char": 12,
										"type": "size_t(Stuff stuff)",
										"parameters": [
											{
												"type": "Stuff",
												"name": "stuff"
											}
										],
										"name": "insertBack",
										"endline": 730
									}
								],
								"char": 12,
								"parameters": [
									{
										"kind": "type",
										"name": "Stuff"
									}
								],
								"comment": "Inserts $(D value) to the front or back of the container. $(D stuff)\ncan be a value convertible to $(D T) or a range of objects convertible\nto $(D T). The stable version behaves the same, but guarantees that\nranges iterating over the container are never invalidated.\n\nReturns: The number of elements inserted\n\nComplexity: $(BIGOH m * log(n)), where $(D m) is the number of\nelements in $(D stuff)\n",
								"name": "insertBack"
							},
							{
								"kind": "alias",
								"line": 732,
								"char": 5,
								"type": "insertBack",
								"name": "insert",
								"comment": "ditto\n"
							},
							{
								"kind": "function",
								"line": 743,
								"endchar": 5,
								"char": 10,
								"type": "void()",
								"name": "removeBack",
								"comment": "Removes the value at the back of the container. The stable version\nbehaves the same, but guarantees that ranges iterating over the\ncontainer are never invalidated.\n\nPrecondition: $(D !empty)\n\nComplexity: $(BIGOH log(n)).\n",
								"endline": 750
							},
							{
								"kind": "alias",
								"line": 752,
								"char": 5,
								"type": "removeBack",
								"name": "stableRemoveBack",
								"comment": "ditto\n"
							},
							{
								"kind": "function",
								"line": 767,
								"endchar": 5,
								"char": 12,
								"type": "size_t(size_t howMany)",
								"parameters": [
									{
										"type": "size_t",
										"name": "howMany"
									}
								],
								"name": "removeBack",
								"comment": "Removes $(D howMany) values at the front or back of the\ncontainer. Unlike the unparameterized versions above, these functions\ndo not throw if they could not remove $(D howMany) elements. Instead,\nif $(D howMany > n), all elements are removed. The returned value is\nthe effective number of elements removed. The stable version behaves\nthe same, but guarantees that ranges iterating over the container are\nnever invalidated.\n\nReturns: The number of elements removed\n\nComplexity: $(BIGOH howMany).\n",
								"endline": 776
							},
							{
								"kind": "alias",
								"line": 778,
								"char": 5,
								"type": "removeBack",
								"name": "stableRemoveBack",
								"comment": "ditto\n"
							},
							{
								"kind": "template",
								"line": 791,
								"constraint": "isImplicitlyConvertible!(Stuff, T)",
								"members": [
									{
										"kind": "function",
										"line": 791,
										"endchar": 5,
										"char": 12,
										"type": "size_t(Range r, Stuff stuff)",
										"parameters": [
											{
												"type": "Range",
												"name": "r"
											},
											{
												"type": "Stuff",
												"name": "stuff"
											}
										],
										"name": "insertBefore",
										"endline": 805
									}
								],
								"char": 12,
								"parameters": [
									{
										"kind": "type",
										"name": "Stuff"
									}
								],
								"comment": "Inserts $(D stuff) before, after, or instead range $(D r), which must\nbe a valid range previously extracted from this container. $(D stuff)\ncan be a value convertible to $(D T) or a range of objects convertible\nto $(D T). The stable version behaves the same, but guarantees that\nranges iterating over the container are never invalidated.\n\nReturns: The number of values inserted.\n\nComplexity: $(BIGOH n + m), where $(D m) is the length of $(D stuff)\n",
								"name": "insertBefore"
							},
							{
								"kind": "template",
								"line": 808,
								"constraint": "isInputRange!Stuff && isImplicitlyConvertible!(ElementType!Stuff, T)",
								"members": [
									{
										"kind": "function",
										"line": 808,
										"endchar": 5,
										"char": 12,
										"type": "size_t(Range r, Stuff stuff)",
										"parameters": [
											{
												"type": "Range",
												"name": "r"
											},
											{
												"type": "Stuff",
												"name": "stuff"
											}
										],
										"name": "insertBefore",
										"endline": 845
									}
								],
								"char": 12,
								"parameters": [
									{
										"kind": "type",
										"name": "Stuff"
									}
								],
								"comment": "ditto\n",
								"name": "insertBefore"
							},
							{
								"kind": "template",
								"line": 848,
								"members": [
									{
										"kind": "function",
										"line": 848,
										"endchar": 5,
										"char": 12,
										"type": "size_t(Range r, Stuff stuff)",
										"parameters": [
											{
												"type": "Range",
												"name": "r"
											},
											{
												"type": "Stuff",
												"name": "stuff"
											}
										],
										"name": "insertAfter",
										"endline": 859
									}
								],
								"char": 12,
								"parameters": [
									{
										"kind": "type",
										"name": "Stuff"
									}
								],
								"comment": "ditto\n",
								"name": "insertAfter"
							},
							{
								"kind": "template",
								"line": 862,
								"constraint": "isInputRange!Stuff && isImplicitlyConvertible!(ElementType!Stuff, T)",
								"members": [
									{
										"kind": "function",
										"line": 862,
										"endchar": 5,
										"char": 12,
										"type": "size_t(Range r, Stuff stuff)",
										"parameters": [
											{
												"type": "Range",
												"name": "r"
											},
											{
												"type": "Stuff",
												"name": "stuff"
											}
										],
										"name": "replace",
										"endline": 881
									}
								],
								"char": 12,
								"parameters": [
									{
										"kind": "type",
										"name": "Stuff"
									}
								],
								"comment": "ditto\n",
								"name": "replace"
							},
							{
								"kind": "template",
								"line": 884,
								"constraint": "isImplicitlyConvertible!(Stuff, T)",
								"members": [
									{
										"kind": "function",
										"line": 884,
										"endchar": 5,
										"char": 12,
										"type": "size_t(Range r, Stuff stuff)",
										"parameters": [
											{
												"type": "Range",
												"name": "r"
											},
											{
												"type": "Stuff",
												"name": "stuff"
											}
										],
										"name": "replace",
										"endline": 899
									}
								],
								"char": 12,
								"parameters": [
									{
										"kind": "type",
										"name": "Stuff"
									}
								],
								"comment": "ditto\n",
								"name": "replace"
							},
							{
								"kind": "function",
								"line": 913,
								"endchar": 5,
								"char": 11,
								"type": "Range(Range r)",
								"parameters": [
									{
										"type": "Range",
										"name": "r"
									}
								],
								"name": "linearRemove",
								"comment": "Removes all elements belonging to $(D r), which must be a range\nobtained originally from this container. The stable version behaves\nthe same, but guarantees that ranges iterating over the container are\nnever invalidated.\n\nReturns: A range spanning the remaining elements in the container that\ninitially were right after $(D r).\n\nComplexity: $(BIGOH n - m), where $(D m) is the number of elements in\n$(D r)\n",
								"endline": 925
							}
						],
						"char": 1,
						"name": "Array"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": "Array type with deterministic control of memory. The memory allocated\nfor the array is reclaimed as soon as possible; there is no reliance\non the garbage collector. $(D Array) uses $(D malloc) and $(D free)\nfor managing its own memory.\n\nThis means that pointers to elements of an $(D Array) will become\ndangling as soon as the element is removed from the $(D Array). On the other hand\nthe memory allocated by an $(D Array) will be scanned by the GC and\nGC managed objects referenced from an $(D Array) will be kept alive.\n\nNote:\n\nWhen using $(D Array) with range-based functions like those in $(D std.algorithm),\n$(D Array) must be sliced to get a range (for example, use $(D array[].map!)\ninstead of $(D array.map!)). The container itself is not a range.\n",
				"name": "Array"
			},
			{
				"kind": "template",
				"line": 1360,
				"constraint": "is(Unqual!T == bool)",
				"members": [
					{
						"kind": "struct",
						"line": 1360,
						"members": [
							{
								"kind": "struct",
								"line": 1383,
								"members": [
									{
										"kind": "function",
										"line": 1388,
										"endchar": 9,
										"char": 25,
										"type": "@property Range()",
										"name": "save",
										"comment": "Range primitives\n",
										"endline": 1399
									},
									{
										"kind": "function",
										"line": 1401,
										"endchar": 9,
										"char": 24,
										"type": "@property bool()",
										"name": "empty",
										"comment": "Ditto\n",
										"endline": 1404
									},
									{
										"kind": "function",
										"line": 1406,
										"endchar": 9,
										"char": 21,
										"type": "@property T()",
										"name": "front",
										"comment": "Ditto\n",
										"endline": 1410
									},
									{
										"kind": "function",
										"line": 1412,
										"endchar": 9,
										"char": 24,
										"type": "@property void(bool value)",
										"parameters": [
											{
												"deco": "b",
												"name": "value"
											}
										],
										"name": "front",
										"comment": "Ditto\n",
										"endline": 1416
									},
									{
										"kind": "function",
										"line": 1418,
										"endchar": 9,
										"char": 11,
										"type": "T()",
										"name": "moveFront",
										"comment": "Ditto\n",
										"endline": 1422
									},
									{
										"kind": "function",
										"line": 1424,
										"endchar": 9,
										"char": 14,
										"type": "void()",
										"name": "popFront",
										"comment": "Ditto\n",
										"endline": 1428
									},
									{
										"kind": "function",
										"line": 1430,
										"endchar": 9,
										"char": 21,
										"type": "@property T()",
										"name": "back",
										"comment": "Ditto\n",
										"endline": 1434
									},
									{
										"kind": "function",
										"line": 1436,
										"endchar": 9,
										"char": 24,
										"type": "@property void(bool value)",
										"parameters": [
											{
												"deco": "b",
												"name": "value"
											}
										],
										"name": "back",
										"comment": "Ditto\n",
										"endline": 1440
									},
									{
										"kind": "function",
										"line": 1442,
										"endchar": 9,
										"char": 11,
										"type": "T()",
										"name": "moveBack",
										"comment": "Ditto\n",
										"endline": 1446
									},
									{
										"kind": "function",
										"line": 1448,
										"endchar": 9,
										"char": 14,
										"type": "void()",
										"name": "popBack",
										"comment": "Ditto\n",
										"endline": 1452
									},
									{
										"kind": "function",
										"line": 1454,
										"endchar": 9,
										"char": 11,
										"type": "T(size_t i)",
										"parameters": [
											{
												"type": "size_t",
												"name": "i"
											}
										],
										"name": "opIndex",
										"comment": "Ditto\n",
										"endline": 1457
									},
									{
										"kind": "function",
										"line": 1459,
										"endchar": 9,
										"char": 14,
										"type": "void(T value, size_t i)",
										"parameters": [
											{
												"type": "T",
												"name": "value"
											},
											{
												"type": "size_t",
												"name": "i"
											}
										],
										"name": "opIndexAssign",
										"comment": "Ditto\n",
										"endline": 1462
									},
									{
										"kind": "function",
										"line": 1464,
										"endchar": 9,
										"char": 11,
										"type": "T(size_t i)",
										"parameters": [
											{
												"type": "size_t",
												"name": "i"
											}
										],
										"name": "moveAt",
										"comment": "Ditto\n",
										"endline": 1467
									},
									{
										"kind": "function",
										"line": 1469,
										"endchar": 9,
										"char": 26,
										"type": "const @property size_t()",
										"name": "length",
										"comment": "Ditto\n",
										"endline": 1473
									},
									{
										"kind": "function",
										"line": 1476,
										"endchar": 9,
										"char": 15,
										"type": "Range(size_t low, size_t high)",
										"parameters": [
											{
												"type": "size_t",
												"name": "low"
											},
											{
												"type": "size_t",
												"name": "high"
											}
										],
										"name": "opSlice",
										"comment": "ditto\n",
										"endline": 1480
									}
								],
								"char": 5,
								"name": "Range",
								"comment": "       Defines the container's primary range.\n"
							},
							{
								"kind": "function",
								"line": 1489,
								"endchar": 5,
								"char": 20,
								"type": "@property bool()",
								"name": "empty",
								"comment": "       Property returning $(D true) if and only if the container has\n       no elements.\n\n       Complexity: $(BIGOH 1)\n",
								"endline": 1492
							},
							{
								"kind": "function",
								"line": 1509,
								"endchar": 5,
								"char": 21,
								"type": "@property Array()",
								"name": "dup",
								"comment": "       Returns a duplicate of the container. The elements themselves\n       are not transitively duplicated.\n\n       Complexity: $(BIGOH n).\n",
								"endline": 1514
							},
							{
								"kind": "function",
								"line": 1531,
								"endchar": 5,
								"char": 22,
								"type": "const @property size_t()",
								"name": "length",
								"comment": "       Returns the number of elements in the container.\n\n       Complexity: $(BIGOH log(n)).\n",
								"endline": 1534
							},
							{
								"kind": "function",
								"line": 1556,
								"endchar": 5,
								"char": 22,
								"type": "@property size_t()",
								"name": "capacity",
								"comment": "       Returns the maximum number of elements the container can store\n       without (a) allocating memory, (b) invalidating iterators upon\n       insertion.\n\n       Complexity: $(BIGOH log(n)).\n",
								"endline": 1561
							},
							{
								"kind": "function",
								"line": 1583,
								"endchar": 5,
								"char": 10,
								"type": "void(size_t e)",
								"parameters": [
									{
										"type": "size_t",
										"name": "e"
									}
								],
								"name": "reserve",
								"comment": "       Ensures sufficient capacity to accommodate $(D n) elements.\n\n       Postcondition: $(D capacity >= n)\n\n       Complexity: $(BIGOH log(e - capacity)) if $(D e > capacity),\n       otherwise $(BIGOH 1).\n",
								"endline": 1588
							},
							{
								"kind": "function",
								"line": 1606,
								"endchar": 5,
								"char": 11,
								"type": "Range()",
								"name": "opSlice",
								"comment": "       Returns a range that iterates over all elements of the\n       container, in a container-defined order. The container should\n       choose the most convenient and fast method of iteration for $(D\n       opSlice()).\n\n       Complexity: $(BIGOH log(n))\n",
								"endline": 1609
							},
							{
								"kind": "function",
								"line": 1624,
								"endchar": 5,
								"char": 11,
								"type": "Range(size_t a, size_t b)",
								"parameters": [
									{
										"type": "size_t",
										"name": "a"
									},
									{
										"type": "size_t",
										"name": "b"
									}
								],
								"name": "opSlice",
								"comment": "       Returns a range that iterates the container between two\n       specified positions.\n\n       Complexity: $(BIGOH log(n))\n",
								"endline": 1628
							},
							{
								"kind": "function",
								"line": 1643,
								"endchar": 5,
								"char": 20,
								"type": "@property bool()",
								"name": "front",
								"comment": "       Equivalent to $(D opSlice().front) and $(D opSlice().back),\n       respectively.\n\n       Complexity: $(BIGOH log(n))\n",
								"endline": 1647
							},
							{
								"kind": "function",
								"line": 1650,
								"endchar": 5,
								"char": 20,
								"type": "@property void(bool value)",
								"parameters": [
									{
										"deco": "b",
										"name": "value"
									}
								],
								"name": "front",
								"comment": "Ditto\n",
								"endline": 1655
							},
							{
								"kind": "function",
								"line": 1667,
								"endchar": 5,
								"char": 20,
								"type": "@property bool()",
								"name": "back",
								"comment": "Ditto\n",
								"endline": 1671
							},
							{
								"kind": "function",
								"line": 1674,
								"endchar": 5,
								"char": 20,
								"type": "@property void(bool value)",
								"parameters": [
									{
										"deco": "b",
										"name": "value"
									}
								],
								"name": "back",
								"comment": "Ditto\n",
								"endline": 1686
							},
							{
								"kind": "function",
								"line": 1700,
								"endchar": 5,
								"char": 10,
								"type": "bool(size_t i)",
								"parameters": [
									{
										"type": "size_t",
										"name": "i"
									}
								],
								"name": "opIndex",
								"comment": "       Indexing operators yield or modify the value at a specified index.\n",
								"endline": 1706
							},
							{
								"kind": "function",
								"line": 1708,
								"endchar": 5,
								"char": 10,
								"type": "void(bool value, size_t i)",
								"parameters": [
									{
										"deco": "b",
										"name": "value"
									},
									{
										"type": "size_t",
										"name": "i"
									}
								],
								"name": "opIndexAssign",
								"comment": "ditto\n",
								"endline": 1715
							},
							{
								"kind": "template",
								"line": 1717,
								"members": [
									{
										"kind": "function",
										"line": 1717,
										"endchar": 5,
										"char": 10,
										"type": "void(bool value, size_t i)",
										"parameters": [
											{
												"deco": "b",
												"name": "value"
											},
											{
												"type": "size_t",
												"name": "i"
											}
										],
										"name": "opIndexOpAssign",
										"endline": 1731
									}
								],
								"char": 10,
								"parameters": [
									{
										"kind": "value",
										"type": "string",
										"name": "op"
									}
								],
								"comment": "ditto\n",
								"name": "opIndexOpAssign"
							},
							{
								"kind": "function",
								"line": 1733,
								"endchar": 5,
								"char": 7,
								"type": "T(size_t i)",
								"parameters": [
									{
										"type": "size_t",
										"name": "i"
									}
								],
								"name": "moveAt",
								"comment": "Ditto\n",
								"endline": 1736
							},
							{
								"kind": "template",
								"line": 1754,
								"constraint": "op == \"~\"",
								"members": [
									{
										"kind": "function",
										"line": 1754,
										"endchar": 5,
										"char": 16,
										"type": "Array!bool(Stuff rhs)",
										"parameters": [
											{
												"type": "Stuff",
												"name": "rhs"
											}
										],
										"name": "opBinary",
										"endline": 1758
									}
								],
								"char": 16,
								"parameters": [
									{
										"kind": "value",
										"type": "string",
										"name": "op"
									},
									{
										"kind": "type",
										"name": "Stuff"
									}
								],
								"comment": "       Returns a new container that's the concatenation of $(D this)\n       and its argument.\n\n       Complexity: $(BIGOH n + m), where m is the number of elements\n       in $(D stuff)\n",
								"name": "opBinary"
							},
							{
								"kind": "template",
								"line": 1782,
								"constraint": "op == \"~\"",
								"members": [
									{
										"kind": "function",
										"line": 1782,
										"endchar": 5,
										"char": 16,
										"type": "Array!bool(Stuff stuff)",
										"parameters": [
											{
												"type": "Stuff",
												"name": "stuff"
											}
										],
										"name": "opOpAssign",
										"endline": 1787
									}
								],
								"char": 16,
								"parameters": [
									{
										"kind": "value",
										"type": "string",
										"name": "op"
									},
									{
										"kind": "type",
										"name": "Stuff"
									}
								],
								"comment": "       Forwards to $(D insertAfter(this[], stuff)).\n",
								"name": "opOpAssign"
							},
							{
								"kind": "function",
								"line": 1810,
								"endchar": 5,
								"char": 10,
								"type": "void()",
								"name": "clear",
								"comment": "       Removes all contents from the container. The container decides\n       how $(D capacity) is affected.\n\n       Postcondition: $(D empty)\n\n       Complexity: $(BIGOH n)\n",
								"endline": 1813
							},
							{
								"kind": "function",
								"line": 1833,
								"endchar": 5,
								"char": 20,
								"type": "@property void(size_t newLength)",
								"parameters": [
									{
										"type": "size_t",
										"name": "newLength"
									}
								],
								"name": "length",
								"comment": "       Sets the number of elements in the container to $(D\n       newSize). If $(D newSize) is greater than $(D length), the\n       added elements are added to the container and initialized with\n       $(D ElementType.init).\n\n       Complexity: $(BIGOH abs(n - newLength))\n\n       Postcondition: $(D _length == newLength)\n",
								"endline": 1841
							},
							{
								"kind": "alias",
								"line": 1868,
								"char": 5,
								"type": "insertBack",
								"name": "insert",
								"comment": "       Inserts $(D stuff) in the container. $(D stuff) can be a value\n       convertible to $(D ElementType) or a range of objects\n       convertible to $(D ElementType).\n\n       The $(D stable) version guarantees that ranges iterating over\n       the container are never invalidated. Client code that counts on\n       non-invalidating insertion should use $(D stableInsert).\n\n       Returns: The number of elements added.\n\n       Complexity: $(BIGOH m * log(n)), where $(D m) is the number of\n       elements in $(D stuff)\n"
							},
							{
								"kind": "alias",
								"line": 1870,
								"char": 5,
								"type": "insertBack",
								"name": "stableInsert",
								"comment": "ditto\n"
							},
							{
								"kind": "alias",
								"line": 1876,
								"char": 5,
								"type": "insertBack",
								"name": "linearInsert",
								"comment": "       Same as $(D insert(stuff)) and $(D stableInsert(stuff))\n       respectively, but relax the complexity constraint to linear.\n"
							},
							{
								"kind": "alias",
								"line": 1878,
								"char": 5,
								"type": "insertBack",
								"name": "stableLinearInsert",
								"comment": "ditto\n"
							},
							{
								"kind": "function",
								"line": 1892,
								"endchar": 5,
								"char": 7,
								"type": "T()",
								"name": "removeAny",
								"comment": "       Picks one value in the container, removes it from the\n       container, and returns it. The stable version behaves the same,\n       but guarantees that ranges iterating over the container are\n       never invalidated.\n\n       Precondition: $(D !empty)\n\n       Returns: The element removed.\n\n       Complexity: $(BIGOH log(n))\n",
								"endline": 1897
							},
							{
								"kind": "alias",
								"line": 1899,
								"char": 5,
								"type": "removeAny",
								"name": "stableRemoveAny",
								"comment": "ditto\n"
							},
							{
								"kind": "template",
								"line": 1924,
								"constraint": "is(Stuff : bool)",
								"members": [
									{
										"kind": "function",
										"line": 1924,
										"endchar": 5,
										"char": 12,
										"type": "size_t(Stuff stuff)",
										"parameters": [
											{
												"type": "Stuff",
												"name": "stuff"
											}
										],
										"name": "insertBack",
										"endline": 1947
									}
								],
								"char": 12,
								"parameters": [
									{
										"kind": "type",
										"name": "Stuff"
									}
								],
								"comment": "       Inserts $(D value) to the back of the container. $(D stuff) can\n       be a value convertible to $(D ElementType) or a range of\n       objects convertible to $(D ElementType). The stable version\n       behaves the same, but guarantees that ranges iterating over the\n       container are never invalidated.\n\n       Returns: The number of elements inserted\n\n       Complexity: $(BIGOH log(n))\n",
								"name": "insertBack"
							},
							{
								"kind": "template",
								"line": 1949,
								"constraint": "isInputRange!Stuff && is(ElementType!Stuff : bool)",
								"members": [
									{
										"kind": "function",
										"line": 1949,
										"endchar": 5,
										"char": 12,
										"type": "size_t(Stuff stuff)",
										"parameters": [
											{
												"type": "Stuff",
												"name": "stuff"
											}
										],
										"name": "insertBack",
										"endline": 1960
									}
								],
								"char": 12,
								"parameters": [
									{
										"kind": "type",
										"name": "Stuff"
									}
								],
								"comment": "Ditto\n",
								"name": "insertBack"
							},
							{
								"kind": "alias",
								"line": 1962,
								"char": 5,
								"type": "insertBack",
								"name": "stableInsertBack",
								"comment": "ditto\n"
							},
							{
								"kind": "function",
								"line": 1976,
								"endchar": 5,
								"char": 10,
								"type": "void()",
								"name": "removeBack",
								"comment": "       Removes the value at the front or back of the container. The\n       stable version behaves the same, but guarantees that ranges\n       iterating over the container are never invalidated. The\n       optional parameter $(D howMany) instructs removal of that many\n       elements. If $(D howMany > n), all elements are removed and no\n       exception is thrown.\n\n       Precondition: $(D !empty)\n\n       Complexity: $(BIGOH log(n)).\n",
								"endline": 1990
							},
							{
								"kind": "alias",
								"line": 1992,
								"char": 5,
								"type": "removeBack",
								"name": "stableRemoveBack",
								"comment": "ditto\n"
							},
							{
								"kind": "function",
								"line": 2008,
								"endchar": 5,
								"char": 12,
								"type": "size_t(size_t howMany)",
								"parameters": [
									{
										"type": "size_t",
										"name": "howMany"
									}
								],
								"name": "removeBack",
								"comment": "       Removes $(D howMany) values at the front or back of the\n       container. Unlike the unparameterized versions above, these\n       functions do not throw if they could not remove $(D howMany)\n       elements. Instead, if $(D howMany > n), all elements are\n       removed. The returned value is the effective number of elements\n       removed. The stable version behaves the same, but guarantees\n       that ranges iterating over the container are never invalidated.\n\n       Returns: The number of elements removed\n\n       Complexity: $(BIGOH howMany * log(n)).\n\nditto\n",
								"endline": 2020
							},
							{
								"kind": "template",
								"line": 2047,
								"members": [
									{
										"kind": "function",
										"line": 2047,
										"endchar": 5,
										"char": 12,
										"type": "size_t(Range r, Stuff stuff)",
										"parameters": [
											{
												"type": "Range",
												"name": "r"
											},
											{
												"type": "Stuff",
												"name": "stuff"
											}
										],
										"name": "insertBefore",
										"endline": 2057
									}
								],
								"char": 12,
								"parameters": [
									{
										"kind": "type",
										"name": "Stuff"
									}
								],
								"comment": "       Inserts $(D stuff) before, after, or instead range $(D r),\n       which must be a valid range previously extracted from this\n       container. $(D stuff) can be a value convertible to $(D\n       ElementType) or a range of objects convertible to $(D\n       ElementType). The stable version behaves the same, but\n       guarantees that ranges iterating over the container are never\n       invalidated.\n\n       Returns: The number of values inserted.\n\n       Complexity: $(BIGOH n + m), where $(D m) is the length of $(D stuff)\n",
								"name": "insertBefore"
							},
							{
								"kind": "alias",
								"line": 2059,
								"char": 5,
								"type": "insertBefore",
								"name": "stableInsertBefore",
								"comment": "ditto\n"
							},
							{
								"kind": "template",
								"line": 2076,
								"members": [
									{
										"kind": "function",
										"line": 2076,
										"endchar": 5,
										"char": 12,
										"type": "size_t(Range r, Stuff stuff)",
										"parameters": [
											{
												"type": "Range",
												"name": "r"
											},
											{
												"type": "Stuff",
												"name": "stuff"
											}
										],
										"name": "insertAfter",
										"endline": 2086
									}
								],
								"char": 12,
								"parameters": [
									{
										"kind": "type",
										"name": "Stuff"
									}
								],
								"comment": "ditto\n",
								"name": "insertAfter"
							},
							{
								"kind": "alias",
								"line": 2088,
								"char": 5,
								"type": "insertAfter",
								"name": "stableInsertAfter",
								"comment": "ditto\n"
							},
							{
								"kind": "template",
								"line": 2100,
								"constraint": "is(Stuff : bool)",
								"members": [
									{
										"kind": "function",
										"line": 2100,
										"endchar": 5,
										"char": 12,
										"type": "size_t(Range r, Stuff stuff)",
										"parameters": [
											{
												"type": "Range",
												"name": "r"
											},
											{
												"type": "Stuff",
												"name": "stuff"
											}
										],
										"name": "replace",
										"endline": 2115
									}
								],
								"char": 12,
								"parameters": [
									{
										"kind": "type",
										"name": "Stuff"
									}
								],
								"comment": "ditto\n",
								"name": "replace"
							},
							{
								"kind": "alias",
								"line": 2117,
								"char": 5,
								"type": "replace",
								"name": "stableReplace",
								"comment": "ditto\n"
							},
							{
								"kind": "function",
								"line": 2140,
								"endchar": 5,
								"char": 11,
								"type": "Range(Range r)",
								"parameters": [
									{
										"type": "Range",
										"name": "r"
									}
								],
								"name": "linearRemove",
								"comment": "       Removes all elements belonging to $(D r), which must be a range\n       obtained originally from this container. The stable version\n       behaves the same, but guarantees that ranges iterating over the\n       container are never invalidated.\n\n       Returns: A range spanning the remaining elements in the container that\n       initially were right after $(D r).\n\n       Complexity: $(BIGOH n)\n",
								"endline": 2146
							}
						],
						"char": 1,
						"name": "Array"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": "\n\n\n\n_Array specialized for $(D bool). Packs together values efficiently by\nallocating one bit per element.\n",
				"name": "Array"
			}
		],
		"name": "std.container.array",
		"comment": "This module provides an $(D Array) type with deterministic memory usage not\nreliant on the GC, as an alternative to the built-in arrays.\n\nThis module is a submodule of $(LINK2 std_container.html, std.container).\n\nSource: $(PHOBOSSRC std/container/_array.d)\nMacros:\nWIKI = Phobos/StdContainer\nTEXTWITHCOMMAS = $0\n\nCopyright: Red-black tree code copyright (C) 2008- by Steven Schveighoffer. Other code\ncopyright 2010- Andrei Alexandrescu. All rights reserved by the respective holders.\n\nLicense: Distributed under the Boost Software License, Version 1.0.\n(See accompanying file LICENSE_1_0.txt or copy at $(WEB\nboost.org/LICENSE_1_0.txt)).\n\nAuthors: Steven Schveighoffer, $(WEB erdani.com, Andrei Alexandrescu)\n"
	},
	{
		"kind": "module",
		"file": "../phobos/std/base64.d",
		"members": [
			{
				"kind": "alias",
				"line": 54,
				"char": 1,
				"name": "Base64",
				"comment": " The Base64\n"
			},
			{
				"kind": "alias",
				"line": 60,
				"char": 1,
				"name": "Base64URL",
				"comment": " The \"URL and Filename safe\" Base64\n"
			},
			{
				"kind": "template",
				"line": 75,
				"members": [
					{
						"kind": "variable",
						"line": 77,
						"init": "'\\x00'",
						"storageClass": [
							"enum"
						],
						"char": 10,
						"name": "NoPadding",
						"comment": "represents no-padding encoding\n"
					},
					{
						"kind": "function",
						"line": 113,
						"endchar": 5,
						"char": 25,
						"type": "pure nothrow @safe size_t(in size_t sourceLength)",
						"parameters": [
							{
								"storageClass": [
									"in"
								],
								"type": "size_t",
								"name": "sourceLength"
							}
						],
						"name": "encodeLength",
						"comment": " Calculates the minimum length for encoding.\n\n Params:\n  sourceLength = the length of source array.\n\n Returns:\n  the calculated length using $(D_PARAM sourceLength).\n",
						"endline": 119
					},
					{
						"kind": "template",
						"line": 136,
						"constraint": "isArray!R1 && is(ElementType!R1 : ubyte) && is(R2 == char[])",
						"members": [
							{
								"kind": "function",
								"line": 136,
								"endchar": 5,
								"char": 17,
								"type": "pure @trusted char[](in R1 source, R2 buffer)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "R1",
										"name": "source"
									},
									{
										"type": "R2",
										"name": "buffer"
									}
								],
								"name": "encode",
								"endline": 188
							}
						],
						"char": 17,
						"parameters": [
							{
								"kind": "type",
								"name": "R1"
							},
							{
								"kind": "type",
								"name": "R2"
							}
						],
						"comment": " Encodes $(D_PARAM source) into $(D_PARAM buffer).\n\n Params:\n  source = an $(D InputRange) to encode.\n  buffer = a buffer to store encoded result.\n\n Returns:\n  the encoded string that slices buffer.\n",
						"name": "encode"
					},
					{
						"kind": "template",
						"line": 197,
						"constraint": "!isArray!R1 && isInputRange!R1 && is(ElementType!R1 : ubyte) && hasLength!R1 && is(R2 == char[])",
						"members": [
							{
								"kind": "function",
								"line": 197,
								"endchar": 5,
								"char": 12,
								"type": "char[](R1 source, R2 buffer)",
								"parameters": [
									{
										"type": "R1",
										"name": "source"
									},
									{
										"type": "R2",
										"name": "buffer"
									}
								],
								"name": "encode",
								"endline": 260
							}
						],
						"char": 12,
						"parameters": [
							{
								"kind": "type",
								"name": "R1"
							},
							{
								"kind": "type",
								"name": "R2"
							}
						],
						"comment": " ditto\n",
						"name": "encode"
					},
					{
						"kind": "template",
						"line": 276,
						"constraint": "isArray!R1 && is(ElementType!R1 : ubyte) && !is(R2 == char[])",
						"members": [
							{
								"kind": "function",
								"line": 276,
								"endchar": 5,
								"char": 12,
								"type": "size_t(in R1 source, R2 range)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "R1",
										"name": "source"
									},
									{
										"type": "R2",
										"name": "range"
									}
								],
								"name": "encode",
								"endline": 330
							}
						],
						"char": 12,
						"parameters": [
							{
								"kind": "type",
								"name": "R1"
							},
							{
								"kind": "type",
								"name": "R2"
							}
						],
						"comment": " Encodes $(D_PARAM source) into $(D_PARAM range).\n\n Params:\n  source = an $(D InputRange) to encode.\n  range  = an $(D OutputRange) to put encoded result.\n\n Returns:\n  the number of calling put.\n",
						"name": "encode"
					},
					{
						"kind": "template",
						"line": 339,
						"constraint": "!isArray!R1 && isInputRange!R1 && is(ElementType!R1 : ubyte) && hasLength!R1 && !is(R2 == char[]) && isOutputRange!(R2, char)",
						"members": [
							{
								"kind": "function",
								"line": 339,
								"endchar": 5,
								"char": 12,
								"type": "size_t(R1 source, R2 range)",
								"parameters": [
									{
										"type": "R1",
										"name": "source"
									},
									{
										"type": "R2",
										"name": "range"
									}
								],
								"name": "encode",
								"endline": 404
							}
						],
						"char": 12,
						"parameters": [
							{
								"kind": "type",
								"name": "R1"
							},
							{
								"kind": "type",
								"name": "R2"
							}
						],
						"comment": " ditto\n",
						"name": "encode"
					},
					{
						"kind": "template",
						"line": 413,
						"constraint": "isArray!Range && is(ElementType!Range : ubyte)",
						"members": [
							{
								"kind": "function",
								"line": 413,
								"endchar": 5,
								"char": 17,
								"type": "pure @safe char[](Range source)",
								"parameters": [
									{
										"type": "Range",
										"name": "source"
									}
								],
								"name": "encode",
								"endline": 416
							}
						],
						"char": 17,
						"parameters": [
							{
								"kind": "type",
								"name": "Range"
							}
						],
						"comment": " Encodes $(D_PARAM source) to new buffer.\n\n Shortcut to encode(source, buffer) function.\n",
						"name": "encode"
					},
					{
						"kind": "template",
						"line": 422,
						"constraint": "!isArray!Range && isInputRange!Range && is(ElementType!Range : ubyte) && hasLength!Range",
						"members": [
							{
								"kind": "function",
								"line": 422,
								"endchar": 5,
								"char": 12,
								"type": "char[](Range source)",
								"parameters": [
									{
										"type": "Range",
										"name": "source"
									}
								],
								"name": "encode",
								"endline": 426
							}
						],
						"char": 12,
						"parameters": [
							{
								"kind": "type",
								"name": "Range"
							}
						],
						"comment": " ditto\n",
						"name": "encode"
					},
					{
						"kind": "template",
						"line": 432,
						"constraint": "isInputRange!Range && (is(ElementType!Range : const(ubyte)[]) || is(ElementType!Range : const(char)[]))",
						"members": [
							{
								"kind": "struct",
								"line": 432,
								"members": [
									{
										"kind": "function",
										"line": 455,
										"endchar": 9,
										"char": 14,
										"type": "@property @trusted bool()",
										"name": "empty",
										"comment": " Range primitive operation that checks iteration state.\n\n Returns:\n  true if there are no more elements to be iterated.\n",
										"endline": 458
									},
									{
										"kind": "function",
										"line": 468,
										"endchar": 9,
										"char": 24,
										"type": "nothrow @property @safe char[]()",
										"name": "front",
										"comment": " Range primitive operation that returns the currently iterated element.\n\n Returns:\n  the encoded string.\n",
										"endline": 471
									},
									{
										"kind": "function",
										"line": 480,
										"endchar": 9,
										"char": 14,
										"type": "void()",
										"name": "popFront",
										"comment": " Range primitive operation that advances the range to its next element.\n\n Throws:\n  an Exception when you try to call popFront on empty range.\n",
										"endline": 494
									}
								],
								"char": 5,
								"name": "Encoder"
							}
						],
						"char": 5,
						"parameters": [
							{
								"kind": "type",
								"name": "Range"
							}
						],
						"comment": " Range that encodes chunk data at a time.\n",
						"name": "Encoder"
					},
					{
						"kind": "template",
						"line": 534,
						"constraint": "isInputRange!Range && is(ElementType!Range : ubyte)",
						"members": [
							{
								"kind": "struct",
								"line": 534,
								"members": [
									{
										"kind": "function",
										"line": 563,
										"endchar": 9,
										"char": 22,
										"type": "const nothrow @property @safe bool()",
										"name": "empty",
										"comment": " Range primitive operation that checks iteration state.\n\n Returns:\n  true if there are no more elements to be iterated.\n",
										"endline": 569
									},
									{
										"kind": "function",
										"line": 579,
										"endchar": 9,
										"char": 23,
										"type": "nothrow @property @safe ubyte()",
										"name": "front",
										"comment": " Range primitive operation that returns the currently iterated element.\n\n Returns:\n  the encoded character.\n",
										"endline": 582
									},
									{
										"kind": "function",
										"line": 591,
										"endchar": 9,
										"char": 14,
										"type": "void()",
										"name": "popFront",
										"comment": " Range primitive operation that advances the range to its next element.\n\n Throws:\n  an Exception when you try to call popFront on empty range.\n",
										"endline": 641
									}
								],
								"char": 5,
								"name": "Encoder"
							}
						],
						"char": 5,
						"parameters": [
							{
								"kind": "type",
								"name": "Range"
							}
						],
						"comment": " Range that encodes single character at a time.\n",
						"name": "Encoder"
					},
					{
						"kind": "template",
						"line": 699,
						"constraint": "isInputRange!Range",
						"members": [
							{
								"kind": "function",
								"line": 699,
								"endchar": 5,
								"char": 21,
								"type": "Encoder!Range(Range range)",
								"parameters": [
									{
										"type": "Range",
										"name": "range"
									}
								],
								"name": "encoder",
								"endline": 702
							}
						],
						"char": 21,
						"parameters": [
							{
								"kind": "type",
								"name": "Range"
							}
						],
						"comment": " Iterates through an $(D InputRange) at a time by using $(D Encoder).\n\n Default $(D Encoder) encodes chunk data.\n\n Example:\n -----\n File f = File(\"text.txt\", \"r\");\n scope(exit) f.close();\n\n uint line = 0;\n foreach (encoded; Base64.encoder(f.byLine()))\n {\n     writeln(++line, \". \", encoded);\n }\n -----\n\n In addition, You can use $(D Encoder) that returns encoded single character.\n This $(D Encoder) performs Range-based and lazy encoding.\n\n Example:\n -----\n ubyte[] data = cast(ubyte[]) \"0123456789\";\n\n // The ElementType of data is not aggregation type\n foreach (encoded; Base64.encoder(data))\n {\n     writeln(encoded);\n }\n -----\n\n Params:\n  range = an $(D InputRange) to iterate.\n\n Returns:\n  a $(D Encoder) object instantiated and initialized according to the arguments.\n",
						"name": "encoder"
					},
					{
						"kind": "function",
						"line": 735,
						"endchar": 5,
						"char": 25,
						"type": "pure nothrow @safe size_t(in size_t sourceLength)",
						"parameters": [
							{
								"storageClass": [
									"in"
								],
								"type": "size_t",
								"name": "sourceLength"
							}
						],
						"name": "decodeLength",
						"comment": " Calculates the minimum length for decoding.\n\n Params:\n  sourceLength = the length of source array.\n\n Returns:\n  calculated length using $(D_PARAM sourceLength).\n",
						"endline": 741
					},
					{
						"kind": "template",
						"line": 780,
						"constraint": "isArray!R1 && is(ElementType!R1 : dchar) && is(R2 == ubyte[]) && isOutputRange!(R2, ubyte)",
						"members": [
							{
								"kind": "function",
								"line": 780,
								"endchar": 5,
								"char": 18,
								"type": "pure @trusted ubyte[](in R1 source, R2 buffer)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "R1",
										"name": "source"
									},
									{
										"type": "R2",
										"name": "buffer"
									}
								],
								"name": "decode",
								"endline": 837
							}
						],
						"char": 18,
						"parameters": [
							{
								"kind": "type",
								"name": "R1"
							},
							{
								"kind": "type",
								"name": "R2"
							}
						],
						"comment": " Decodes $(D_PARAM source) into $(D_PARAM buffer).\n\n Params:\n  source = an $(D InputRange) to decode.\n  buffer = a buffer to store decoded result.\n\n Returns:\n  the decoded string that slices buffer.\n\n Throws:\n  an Exception if $(D_PARAM source) has character outside base-alphabet.\n",
						"name": "decode"
					},
					{
						"kind": "template",
						"line": 846,
						"constraint": "!isArray!R1 && isInputRange!R1 && is(ElementType!R1 : dchar) && hasLength!R1 && is(R2 == ubyte[]) && isOutputRange!(R2, ubyte)",
						"members": [
							{
								"kind": "function",
								"line": 846,
								"endchar": 5,
								"char": 13,
								"type": "ubyte[](R1 source, R2 buffer)",
								"parameters": [
									{
										"type": "R1",
										"name": "source"
									},
									{
										"type": "R2",
										"name": "buffer"
									}
								],
								"name": "decode",
								"endline": 911
							}
						],
						"char": 13,
						"parameters": [
							{
								"kind": "type",
								"name": "R1"
							},
							{
								"kind": "type",
								"name": "R2"
							}
						],
						"comment": " ditto\n",
						"name": "decode"
					},
					{
						"kind": "template",
						"line": 930,
						"constraint": "isArray!R1 && is(ElementType!R1 : dchar) && !is(R2 == ubyte[]) && isOutputRange!(R2, ubyte)",
						"members": [
							{
								"kind": "function",
								"line": 930,
								"endchar": 5,
								"char": 12,
								"type": "size_t(in R1 source, R2 range)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "R1",
										"name": "source"
									},
									{
										"type": "R2",
										"name": "range"
									}
								],
								"name": "decode",
								"endline": 989
							}
						],
						"char": 12,
						"parameters": [
							{
								"kind": "type",
								"name": "R1"
							},
							{
								"kind": "type",
								"name": "R2"
							}
						],
						"comment": " Decodes $(D_PARAM source) into $(D_PARAM range).\n\n Params:\n  source = an $(D InputRange) to decode.\n  range  = an $(D OutputRange) to put decoded result\n\n Returns:\n  the number of calling put.\n\n Throws:\n  an Exception if $(D_PARAM source) has character outside base-alphabet.\n",
						"name": "decode"
					},
					{
						"kind": "template",
						"line": 998,
						"constraint": "!isArray!R1 && isInputRange!R1 && is(ElementType!R1 : dchar) && hasLength!R1 && !is(R2 == ubyte[]) && isOutputRange!(R2, ubyte)",
						"members": [
							{
								"kind": "function",
								"line": 998,
								"endchar": 5,
								"char": 12,
								"type": "size_t(R1 source, R2 range)",
								"parameters": [
									{
										"type": "R1",
										"name": "source"
									},
									{
										"type": "R2",
										"name": "range"
									}
								],
								"name": "decode",
								"endline": 1064
							}
						],
						"char": 12,
						"parameters": [
							{
								"kind": "type",
								"name": "R1"
							},
							{
								"kind": "type",
								"name": "R2"
							}
						],
						"comment": " ditto\n",
						"name": "decode"
					},
					{
						"kind": "template",
						"line": 1073,
						"constraint": "isArray!Range && is(ElementType!Range : dchar)",
						"members": [
							{
								"kind": "function",
								"line": 1073,
								"endchar": 5,
								"char": 18,
								"type": "pure @safe ubyte[](Range source)",
								"parameters": [
									{
										"type": "Range",
										"name": "source"
									}
								],
								"name": "decode",
								"endline": 1076
							}
						],
						"char": 18,
						"parameters": [
							{
								"kind": "type",
								"name": "Range"
							}
						],
						"comment": " Decodes $(D_PARAM source) into new buffer.\n\n Shortcut to decode(source, buffer) function.\n",
						"name": "decode"
					},
					{
						"kind": "template",
						"line": 1082,
						"constraint": "!isArray!Range && isInputRange!Range && is(ElementType!Range : dchar) && hasLength!Range",
						"members": [
							{
								"kind": "function",
								"line": 1082,
								"endchar": 5,
								"char": 13,
								"type": "ubyte[](Range source)",
								"parameters": [
									{
										"type": "Range",
										"name": "source"
									}
								],
								"name": "decode",
								"endline": 1086
							}
						],
						"char": 13,
						"parameters": [
							{
								"kind": "type",
								"name": "Range"
							}
						],
						"comment": " ditto\n",
						"name": "decode"
					},
					{
						"kind": "template",
						"line": 1092,
						"constraint": "isInputRange!Range && (is(ElementType!Range : const(char)[]) || is(ElementType!Range : const(ubyte)[]))",
						"members": [
							{
								"kind": "struct",
								"line": 1092,
								"members": [
									{
										"kind": "function",
										"line": 1115,
										"endchar": 9,
										"char": 14,
										"type": "@property @trusted bool()",
										"name": "empty",
										"comment": " Range primitive operation that checks iteration state.\n\n Returns:\n  true if there are no more elements to be iterated.\n",
										"endline": 1118
									},
									{
										"kind": "function",
										"line": 1128,
										"endchar": 9,
										"char": 25,
										"type": "nothrow @property @safe ubyte[]()",
										"name": "front",
										"comment": " Range primitive operation that returns the currently iterated element.\n\n Returns:\n  the decoded result.\n",
										"endline": 1131
									},
									{
										"kind": "function",
										"line": 1140,
										"endchar": 9,
										"char": 14,
										"type": "void()",
										"name": "popFront",
										"comment": " Range primitive operation that advances the range to its next element.\n\n Throws:\n  an Exception when you try to call popFront on empty range.\n",
										"endline": 1151
									}
								],
								"char": 5,
								"name": "Decoder"
							}
						],
						"char": 5,
						"parameters": [
							{
								"kind": "type",
								"name": "Range"
							}
						],
						"comment": " Range that decodes chunk data at a time.\n",
						"name": "Decoder"
					},
					{
						"kind": "template",
						"line": 1204,
						"constraint": "isInputRange!Range && is(ElementType!Range : char)",
						"members": [
							{
								"kind": "struct",
								"line": 1204,
								"members": [
									{
										"kind": "function",
										"line": 1236,
										"endchar": 9,
										"char": 22,
										"type": "const nothrow @property @safe bool()",
										"name": "empty",
										"comment": " Range primitive operation that checks iteration state.\n\n Returns:\n  true if there are no more elements to be iterated.\n",
										"endline": 1239
									},
									{
										"kind": "function",
										"line": 1249,
										"endchar": 9,
										"char": 23,
										"type": "nothrow @property @safe ubyte()",
										"name": "front",
										"comment": " Range primitive operation that returns the currently iterated element.\n\n Returns:\n  the decoded result.\n",
										"endline": 1252
									},
									{
										"kind": "function",
										"line": 1261,
										"endchar": 9,
										"char": 14,
										"type": "void()",
										"name": "popFront",
										"comment": " Range primitive operation that advances the range to its next element.\n\n Throws:\n  an Exception when you try to call popFront on empty range.\n",
										"endline": 1320
									}
								],
								"char": 5,
								"name": "Decoder"
							}
						],
						"char": 5,
						"parameters": [
							{
								"kind": "type",
								"name": "Range"
							}
						],
						"comment": " Range that decodes single character at a time.\n",
						"name": "Decoder"
					},
					{
						"kind": "template",
						"line": 1376,
						"constraint": "isInputRange!Range",
						"members": [
							{
								"kind": "function",
								"line": 1376,
								"endchar": 5,
								"char": 21,
								"type": "Decoder!Range(Range range)",
								"parameters": [
									{
										"type": "Range",
										"name": "range"
									}
								],
								"name": "decoder",
								"endline": 1379
							}
						],
						"char": 21,
						"parameters": [
							{
								"kind": "type",
								"name": "Range"
							}
						],
						"comment": " Iterates through an $(D InputRange) at a time by using $(D Decoder).\n\n Default $(D Decoder) decodes chunk data.\n\n Example:\n -----\n foreach (decoded; Base64.decoder(stdin.byLine()))\n {\n     writeln(decoded);\n }\n -----\n\n In addition, You can use $(D Decoder) that returns decoded single character.\n This $(D Decoder) performs Range-based and lazy decoding.\n\n Example:\n -----\n auto encoded = Base64.encoder(cast(ubyte[])\"0123456789\");\n foreach (n; map!q{a - '0'}(Base64.decoder(encoded)))\n {\n     writeln(n);\n }\n -----\n\n NOTE:\n  If you use $(D ByChunk), chunk-size should be the multiple of 4.\n  $(D Decoder) can't judge a encode-boundary.\n\n Params:\n  range = an $(D InputRange) to iterate.\n\n Returns:\n  a $(D Decoder) object instantiated and initialized according to the arguments.\n",
						"name": "decoder"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "value",
						"deco": "a",
						"name": "Map62th"
					},
					{
						"kind": "value",
						"deco": "a",
						"name": "Map63th"
					},
					{
						"kind": "value",
						"defaultValue": "'='",
						"deco": "a",
						"name": "Padding"
					}
				],
				"comment": " Core implementation for Base64 format.\n\n Example:\n -----\n alias Base64   = Base64Impl!('+', '/');                    // The Base64 format(Already defined).\n alias Base64Re = Base64Impl!('!', '=', Base64.NoPadding);  // non-standard Base64 format for Regular expression\n -----\n\n NOTE:\n  encoded-string doesn't have padding character if set Padding parameter to NoPadding.\n",
				"name": "Base64Impl"
			},
			{
				"kind": "class",
				"line": 1411,
				"base": "object.Exception",
				"members": [],
				"char": 1,
				"name": "Base64Exception",
				"comment": " Exception thrown on Base64 errors.\n"
			}
		],
		"name": "std.base64",
		"comment": " Encoding / Decoding Base64 format.\n\n Implemented according to $(WEB tools.ietf.org/html/rfc4648,\n RFC 4648 - The Base16, Base32, and Base64 Data Encodings).\n\n Example:\n -----\n ubyte[] data = [0x14, 0xfb, 0x9c, 0x03, 0xd9, 0x7e];\n\n const(char)[] encoded = Base64.encode(data);\n assert(encoded == \"FPucA9l+\");\n\n ubyte[] decoded = Base64.decode(\"FPucA9l+\");\n assert(decoded == [0x14, 0xfb, 0x9c, 0x03, 0xd9, 0x7e]);\n -----\n\n Support Range interface using Encoder / Decoder.\n\n Example:\n -----\n // Create MIME Base64 with CRLF, per line 76.\n File f = File(\"./text.txt\", \"r\");\n scope(exit) f.close();\n\n Appender!string mime64 = appender!string;\n\n foreach (encoded; Base64.encoder(f.byChunk(57)))\n {\n     mime64.put(encoded);\n     mime64.put(\"\\r\\n\");\n }\n\n writeln(mime64.data);\n -----\n\n Copyright: Masahiro Nakagawa 2010-.\n License:   $(WEB boost.org/LICENSE_1_0.txt, Boost License 1.0).\n Authors:   Masahiro Nakagawa, Daniel Murphy (Single value Encoder and Decoder)\n Source:    $(PHOBOSSRC std/_base64.d)\n"
	},
	{
		"kind": "module",
		"file": "../phobos/std/compiler.d",
		"members": [
			{
				"kind": "variable",
				"line": 24,
				"init": "\"Digital Mars D\"",
				"storageClass": [
					"immutable"
				],
				"deco": "yAa",
				"char": 12,
				"name": "name",
				"comment": "Vendor specific string naming the compiler, for example: \"Digital Mars D\".\n",
				"originalType": "string"
			},
			{
				"kind": "enum",
				"line": 27,
				"members": [
					{
						"kind": "enum member",
						"line": 29,
						"value": "0",
						"char": 9,
						"name": "unknown",
						"comment": "Compiler vendor could not be detected\n"
					},
					{
						"kind": "enum member",
						"line": 30,
						"value": "1",
						"char": 9,
						"name": "digitalMars",
						"comment": "Digital Mars D (DMD)\n"
					},
					{
						"kind": "enum member",
						"line": 31,
						"value": "2",
						"char": 9,
						"name": "gnu",
						"comment": "GNU D Compiler (GDC)\n"
					},
					{
						"kind": "enum member",
						"line": 32,
						"value": "3",
						"char": 9,
						"name": "llvm",
						"comment": "LLVM D Compiler (LDC)\n"
					},
					{
						"kind": "enum member",
						"line": 33,
						"value": "4",
						"char": 9,
						"name": "dotNET",
						"comment": "D.NET\n"
					},
					{
						"kind": "enum member",
						"line": 34,
						"value": "5",
						"char": 9,
						"name": "sdc",
						"comment": "Stupid D Compiler (SDC)\n"
					}
				],
				"char": 5,
				"baseDeco": "i",
				"name": "Vendor",
				"comment": "Master list of D compiler vendors.\n"
			},
			{
				"kind": "variable",
				"line": 38,
				"storageClass": [
					"immutable"
				],
				"deco": "yE3std8compiler6Vendor",
				"char": 38,
				"name": "vendor",
				"comment": "Which vendor produced this compiler.\n",
				"originalType": "Vendor"
			},
			{
				"kind": "variable",
				"line": 51,
				"init": "2u",
				"storageClass": [
					"immutable"
				],
				"deco": "yk",
				"char": 10,
				"name": "version_major",
				"comment": " The vendor specific version number, as in\n version_major.version_minor\n",
				"originalType": "uint"
			},
			{
				"kind": "variable",
				"line": 52,
				"init": "67u",
				"storageClass": [
					"immutable"
				],
				"deco": "yk",
				"char": 10,
				"name": "version_minor",
				"comment": "ditto\n",
				"originalType": "uint"
			},
			{
				"kind": "variable",
				"line": 59,
				"init": "2u",
				"storageClass": [
					"immutable"
				],
				"deco": "yk",
				"char": 10,
				"name": "D_major",
				"comment": " The version of the D Programming Language Specification\n supported by the compiler.\n",
				"originalType": "uint"
			}
		],
		"name": "std.compiler",
		"comment": " Identify the compiler used and its various features.\n\n Macros:\n      WIKI = Phobos/StdCompiler\n\n Copyright: Copyright Digital Mars 2000 - 2011.\n License:   $(WEB www.boost.org/LICENSE_1_0.txt, Boost License 1.0).\n Authors:   $(WEB digitalmars.com, Walter Bright), Alex Rønne Petersen\n Source:    $(PHOBOSSRC std/_compiler.d)\n"
	},
	{
		"kind": "module",
		"file": "../phobos/std/datetime.d",
		"members": [
			{
				"kind": "enum",
				"line": 167,
				"members": [
					{
						"kind": "enum member",
						"line": 167,
						"value": "cast(ubyte)1u",
						"char": 22,
						"name": "jan",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 168,
						"value": "2",
						"char": 22,
						"name": "feb",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 169,
						"value": "3",
						"char": 22,
						"name": "mar",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 170,
						"value": "4",
						"char": 22,
						"name": "apr",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 171,
						"value": "5",
						"char": 22,
						"name": "may",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 172,
						"value": "6",
						"char": 22,
						"name": "jun",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 173,
						"value": "7",
						"char": 22,
						"name": "jul",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 174,
						"value": "8",
						"char": 22,
						"name": "aug",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 175,
						"value": "9",
						"char": 22,
						"name": "sep",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 176,
						"value": "10",
						"char": 22,
						"name": "oct",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 177,
						"value": "11",
						"char": 22,
						"name": "nov",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 178,
						"value": "12",
						"char": 22,
						"name": "dec",
						"comment": "\n"
					}
				],
				"char": 1,
				"baseDeco": "h",
				"name": "Month",
				"comment": "    Represents the 12 months of the Gregorian year (January is 1).\n"
			},
			{
				"kind": "enum",
				"line": 184,
				"members": [
					{
						"kind": "enum member",
						"line": 184,
						"value": "cast(ubyte)0u",
						"char": 26,
						"name": "sun",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 185,
						"value": "1",
						"char": 26,
						"name": "mon",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 186,
						"value": "2",
						"char": 26,
						"name": "tue",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 187,
						"value": "3",
						"char": 26,
						"name": "wed",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 188,
						"value": "4",
						"char": 26,
						"name": "thu",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 189,
						"value": "5",
						"char": 26,
						"name": "fri",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 190,
						"value": "6",
						"char": 26,
						"name": "sat",
						"comment": "\n"
					}
				],
				"char": 1,
				"baseDeco": "h",
				"name": "DayOfWeek",
				"comment": "    Represents the 7 days of the Gregorian week (Sunday is 0).\n"
			},
			{
				"kind": "enum",
				"line": 205,
				"members": [
					{
						"kind": "enum member",
						"line": 208,
						"value": "0",
						"char": 5,
						"name": "no",
						"comment": "No, don't allow day overflow.\n"
					},
					{
						"kind": "enum member",
						"line": 211,
						"value": "1",
						"char": 5,
						"name": "yes",
						"comment": "Yes, allow day overflow.\n"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "AllowDayOverflow",
				"comment": "    In some date calculations, adding months or years can cause the date to fall\n    on a day of the month which is not valid (e.g. February 29th 2001 or\n    June 31st 2000). If overflow is allowed (as is the default), then the month\n    will be incremented accordingly (so, February 29th 2001 would become\n    March 1st 2001, and June 31st 2000 would become July 1st 2000). If overflow\n    is not allowed, then the day will be adjusted to the last valid day in that\n    month (so, February 29th 2001 would become February 28th 2001 and\n    June 31st 2000 would become June 30th 2000).\n\n    AllowDayOverflow only applies to calculations involving months or years.\n"
			},
			{
				"kind": "enum",
				"line": 219,
				"members": [
					{
						"kind": "enum member",
						"line": 222,
						"value": "0",
						"char": 5,
						"name": "bwd",
						"comment": "Backward.\n"
					},
					{
						"kind": "enum member",
						"line": 225,
						"value": "1",
						"char": 5,
						"name": "fwd",
						"comment": "Forward.\n"
					},
					{
						"kind": "enum member",
						"line": 228,
						"value": "2",
						"char": 5,
						"name": "both",
						"comment": "Both backward and forward.\n"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "Direction",
				"comment": "    Indicates a direction in time. One example of its use is $(LREF2 .Interval, Interval)'s\n    $(LREF expand, expand) function which uses it to indicate whether the interval should\n    be expanded backwards (into the past), forwards (into the future), or both.\n"
			},
			{
				"kind": "enum",
				"line": 256,
				"members": [
					{
						"kind": "enum member",
						"line": 259,
						"value": "0",
						"char": 5,
						"name": "no",
						"comment": "No, don't call popFront() before returning the range.\n"
					},
					{
						"kind": "enum member",
						"line": 262,
						"value": "1",
						"char": 5,
						"name": "yes",
						"comment": "Yes, call popFront() before returning the range.\n"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "PopFirst",
				"comment": "    Used to indicate whether $(D popFront) should be called immediately upon\n    creating a range. The idea is that for some functions used to generate a\n    range for an interval, $(D front) is not necessarily a time point which\n    would ever be generated by the range. To get the first time point\n    in the range to match what the function generates, then use\n    $(D PopFirst.yes) to indicate that the range should have $(D popFront)\n    called on it before the range is returned so that $(D front) is a time point\n    which the function would generate.\n\n    For instance, if the function used to generate a range of time points\n    generated successive Easters (i.e. you're iterating over all of the Easters\n    within the interval), the initial date probably isn't an Easter. Using\n    $(D PopFirst.yes) would tell the function which returned the\n    range that $(D popFront) was to be called so that front would then be\n    an Easter - the next one generated by the function (which when\n    iterating forward would be the Easter following the original $(D front),\n    while when iterating backward, it would be the Easter prior to the\n    original $(D front)). If $(D PopFirst.no) were used, then $(D front) would\n    remain the original time point and it would not necessarily be a time point\n    which would be generated by the range-generating function (which in many\n    cases is exactly what is desired -\n    e.g. if iterating over every day starting at the beginning\n    of the interval).\n"
			},
			{
				"kind": "enum",
				"line": 269,
				"members": [
					{
						"kind": "enum member",
						"line": 272,
						"value": "0",
						"char": 5,
						"name": "no",
						"comment": "No, don't start the StopWatch when it is constructed.\n"
					},
					{
						"kind": "enum member",
						"line": 275,
						"value": "1",
						"char": 5,
						"name": "yes",
						"comment": "Yes, do start the StopWatch when it is constructed.\n"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "AutoStart",
				"comment": "   Used by StopWatch to indicate whether it should start immediately upon\n   construction.\n"
			},
			{
				"kind": "variable",
				"line": 287,
				"init": "[\"hnsecs\", \"usecs\", \"msecs\", \"seconds\", \"minutes\", \"hours\", \"days\", \"weeks\", \"months\", \"years\"]",
				"storageClass": [
					"immutable"
				],
				"deco": "yAAa",
				"char": 20,
				"name": "timeStrings",
				"comment": "    Array of the strings representing time units, starting with the smallest\n    unit and going to the largest. It does not include $(D \"nsecs\").\n\n   Includes $(D \"hnsecs\") (hecto-nanoseconds (100 ns)),\n   $(D \"usecs\") (microseconds), $(D \"msecs\") (milliseconds), $(D \"seconds\"),\n   $(D \"minutes\"), $(D \"hours\"), $(D \"days\"), $(D \"weeks\"), $(D \"months\"), and\n   $(D \"years\")\n",
				"originalType": "string[]"
			},
			{
				"kind": "alias",
				"line": 300,
				"deco": "C4core4time13TimeException",
				"char": 21,
				"name": "DateTimeException",
				"comment": "    Exception type used by std.datetime. It's an alias to $(CXREF time, TimeException).\n    Either can be caught without concern about which\n    module it came from.\n"
			},
			{
				"kind": "class",
				"line": 306,
				"members": [
					{
						"kind": "function",
						"line": 317,
						"storageClass": [
							"static"
						],
						"deco": "FNfyC3std8datetime8TimeZoneZS3std8datetime7SysTime",
						"endchar": 5,
						"char": 20,
						"parameters": [
							{
								"deco": "yC3std8datetime8TimeZone",
								"default": "opCall()",
								"name": "tz"
							}
						],
						"name": "currTime",
						"comment": "        Returns the current time in the given time zone.\n\n        Throws:\n            $(XREF exception, ErrnoException) (on Posix) or $(XREF exception, Exception) (on Windows)\n            if it fails to get the time of day.\n",
						"originalType": "@safe SysTime(immutable TimeZone tz = LocalTime())",
						"endline": 320
					},
					{
						"kind": "function",
						"line": 353,
						"storageClass": [
							"static"
						],
						"deco": "FNdNeZl",
						"endchar": 5,
						"char": 27,
						"name": "currStdTime",
						"comment": "        Returns the number of hnsecs since midnight, January 1st, 1 A.D. for the\n        current time.\n\n        Throws:\n            $(LREF DateTimeException) if it fails to get the time.\n",
						"endline": 389
					},
					{
						"kind": "function",
						"line": 407,
						"storageClass": [
							"static"
						],
						"deco": "FNbNdNfZS4core4time12TickDuration",
						"endchar": 5,
						"char": 35,
						"name": "currSystemTick",
						"comment": "        The current system tick. The number of ticks per second varies from\n        system to system. currSystemTick uses a monotonic clock, so it's\n        intended for precision timing by comparing relative time values, not\n        for getting the current system time.\n\n        Warning:\n            On some systems, the monotonic clock may stop counting when\n            the computer goes to sleep or hibernates. So, the monotonic\n            clock could be off if that occurs. This is known to happen\n            on Mac OS X. It has not been tested whether it occurs on\n            either Windows or Linux.\n\n        Throws:\n            $(LREF DateTimeException) if it fails to get the time.\n",
						"endline": 410
					},
					{
						"kind": "function",
						"line": 432,
						"storageClass": [
							"static"
						],
						"deco": "FNdNfZS4core4time12TickDuration",
						"endchar": 5,
						"char": 35,
						"name": "currAppTick",
						"comment": "        The current number of system ticks since the application started.\n        The number of ticks per second varies from system to system.\n        This uses a monotonic clock.\n\n        Warning:\n            On some systems, the monotonic clock may stop counting when\n            the computer goes to sleep or hibernates. So, the monotonic\n            clock could be off if that occurs. This is known to happen\n            on Mac OS X. It has not been tested whether it occurs on\n            either Windows or on Linux.\n\n        Throws:\n            $(LREF DateTimeException) if it fails to get the time.\n",
						"endline": 435
					}
				],
				"char": 7,
				"name": "Clock",
				"comment": "    Effectively a namespace to make it clear that the methods it contains are\n    getting the time from the system clock. It cannot be instantiated.\n"
			},
			{
				"kind": "struct",
				"line": 497,
				"members": [
					{
						"kind": "constructor",
						"line": 512,
						"deco": "FNbNcNfxS3std8datetime8DateTimeyC3std8datetime8TimeZoneZS3std8datetime7SysTime",
						"endchar": 5,
						"char": 5,
						"parameters": [
							{
								"deco": "xS3std8datetime8DateTime",
								"name": "dateTime"
							},
							{
								"deco": "yC3std8datetime8TimeZone",
								"default": "null",
								"name": "tz"
							}
						],
						"name": "this",
						"comment": "        Params:\n            dateTime = The $(LREF DateTime) to use to set this $(LREF SysTime)'s\n                       internal std time. As $(LREF DateTime) has no concept of\n                       time zone, tz is used as its time zone.\n            tz       = The $(LREF2 .TimeZone, TimeZone) to use for this $(LREF SysTime). If null,\n                       $(LREF LocalTime) will be used. The given $(LREF DateTime) is\n                       assumed to be in the given time zone.\n",
						"originalType": "nothrow ref @safe (in DateTime dateTime, immutable TimeZone tz = null)",
						"endline": 518
					},
					{
						"kind": "constructor",
						"line": 557,
						"deco": "FNcNfxS3std8datetime8DateTimexS4core4time8DurationyC3std8datetime8TimeZoneZS3std8datetime7SysTime",
						"endchar": 5,
						"char": 5,
						"parameters": [
							{
								"deco": "xS3std8datetime8DateTime",
								"name": "dateTime"
							},
							{
								"deco": "xS4core4time8Duration",
								"name": "fracSecs"
							},
							{
								"deco": "yC3std8datetime8TimeZone",
								"default": "null",
								"name": "tz"
							}
						],
						"name": "this",
						"comment": "        Params:\n            dateTime = The $(LREF DateTime) to use to set this $(LREF SysTime)'s\n                       internal std time. As $(LREF DateTime) has no concept of\n                       time zone, tz is used as its time zone.\n            fracSecs = The fractional seconds portion of the time.\n            tz       = The $(LREF2 .TimeZone, TimeZone) to use for this $(LREF SysTime). If null,\n                       $(LREF LocalTime) will be used. The given $(LREF DateTime) is\n                       assumed to be in the given time zone.\n\n        Throws:\n            $(LREF DateTimeException) if $(D fracSecs) is negative or if it's\n            greater than or equal to one second.\n",
						"originalType": "ref @safe (in DateTime dateTime, in Duration fracSecs, immutable TimeZone tz = null)",
						"endline": 570
					},
					{
						"kind": "constructor",
						"line": 615,
						"deco": "FNcNfxS3std8datetime8DateTimexS4core4time7FracSecyC3std8datetime8TimeZoneZS3std8datetime7SysTime",
						"endchar": 5,
						"char": 5,
						"parameters": [
							{
								"deco": "xS3std8datetime8DateTime",
								"name": "dateTime"
							},
							{
								"deco": "xS4core4time7FracSec",
								"name": "fracSec"
							},
							{
								"deco": "yC3std8datetime8TimeZone",
								"default": "null",
								"name": "tz"
							}
						],
						"name": "this",
						"comment": "        $(RED Scheduled for deprecation. Please use the overload which takes a\n              $(CXREF time, Duration) for the fractional seconds. This overload\n              will be deprecated in 2.068).\n\n        Params:\n            dateTime = The $(LREF DateTime) to use to set this $(LREF SysTime)'s\n                       internal std time. As $(LREF DateTime) has no concept of\n                       time zone, tz is used as its time zone.\n            fracSec  = The fractional seconds portion of the time.\n            tz       = The $(LREF2 .TimeZone, TimeZone) to use for this $(LREF SysTime). If null,\n                       $(LREF LocalTime) will be used. The given $(LREF DateTime) is\n                       assumed to be in the given time zone.\n\n        Throws:\n            $(LREF DateTimeException) if $(D fracSec) is negative.\n",
						"originalType": "ref @safe (in DateTime dateTime, in FracSec fracSec, immutable TimeZone tz = null)",
						"endline": 633
					},
					{
						"kind": "constructor",
						"line": 672,
						"deco": "FNbNcNfxS3std8datetime4DateyC3std8datetime8TimeZoneZS3std8datetime7SysTime",
						"endchar": 5,
						"char": 5,
						"parameters": [
							{
								"deco": "xS3std8datetime4Date",
								"name": "date"
							},
							{
								"deco": "yC3std8datetime8TimeZone",
								"default": "null",
								"name": "tz"
							}
						],
						"name": "this",
						"comment": "        Params:\n            date = The $(LREF Date) to use to set this $(LREF SysTime)'s internal std\n                   time. As $(LREF Date) has no concept of time zone, tz is used as\n                   its time zone.\n            tz   = The $(LREF2 .TimeZone, TimeZone) to use for this $(LREF SysTime). If null,\n                   $(LREF LocalTime) will be used. The given $(LREF Date) is assumed\n                   to be in the given time zone.\n",
						"originalType": "nothrow ref @safe (in Date date, immutable TimeZone tz = null)",
						"endline": 685
					},
					{
						"kind": "constructor",
						"line": 720,
						"deco": "FNaNbNcNflyC3std8datetime8TimeZoneZS3std8datetime7SysTime",
						"endchar": 5,
						"char": 5,
						"parameters": [
							{
								"deco": "l",
								"name": "stdTime"
							},
							{
								"deco": "yC3std8datetime8TimeZone",
								"default": "null",
								"name": "tz"
							}
						],
						"name": "this",
						"comment": "        Note:\n            Whereas the other constructors take in the given date/time, assume\n            that it's in the given time zone, and convert it to hnsecs in UTC\n            since midnight, January 1st, 1 A.D. UTC - i.e. std time - this\n            constructor takes a std time, which is specifically already in UTC,\n            so no conversion takes place. Of course, the various getter\n            properties and functions will use the given time zone's conversion\n            function to convert the results to that time zone, but no conversion\n            of the arguments to this constructor takes place.\n\n        Params:\n            stdTime = The number of hnsecs since midnight, January 1st, 1 A.D. UTC.\n            tz      = The $(LREF2 .TimeZone, TimeZone) to use for this $(LREF SysTime). If null,\n                      $(LREF LocalTime) will be used.\n",
						"originalType": "pure nothrow ref @safe (long stdTime, immutable TimeZone tz = null)",
						"endline": 724
					},
					{
						"kind": "function",
						"line": 748,
						"deco": "FNaNbNcNjNfKxS3std8datetime7SysTimeZS3std8datetime7SysTime",
						"endchar": 5,
						"char": 17,
						"parameters": [
							{
								"deco": "xS3std8datetime7SysTime",
								"storageClass": [
									"ref"
								],
								"name": "rhs"
							}
						],
						"name": "opAssign",
						"comment": "        Params:\n            rhs = The $(LREF SysTime) to assign to this one.\n",
						"originalType": "pure nothrow ref @safe SysTime(ref const SysTime rhs)return ",
						"endline": 754
					},
					{
						"kind": "function",
						"line": 760,
						"deco": "FNaNbNcNjNfS3std8datetime7SysTimeZS3std8datetime7SysTime",
						"endchar": 5,
						"char": 17,
						"parameters": [
							{
								"deco": "S3std8datetime7SysTime",
								"name": "rhs"
							}
						],
						"name": "opAssign",
						"comment": "        Params:\n            rhs = The $(LREF SysTime) to assign to this one.\n",
						"endline": 766
					},
					{
						"kind": "function",
						"line": 775,
						"deco": "xFNaNbNfxS3std8datetime7SysTimeZb",
						"endchar": 5,
						"char": 10,
						"parameters": [
							{
								"deco": "xS3std8datetime7SysTime",
								"name": "rhs"
							}
						],
						"name": "opEquals",
						"comment": "        Checks for equality between this $(LREF SysTime) and the given\n        $(LREF SysTime).\n\n        Note that the time zone is ignored. Only the internal\n        std times (which are in UTC) are compared.\n",
						"originalType": "const pure nothrow @safe bool(const SysTime rhs)",
						"endline": 778
					},
					{
						"kind": "function",
						"line": 781,
						"deco": "xFNaNbNfKxS3std8datetime7SysTimeZb",
						"endchar": 5,
						"char": 10,
						"parameters": [
							{
								"deco": "xS3std8datetime7SysTime",
								"storageClass": [
									"ref"
								],
								"name": "rhs"
							}
						],
						"name": "opEquals",
						"comment": "ditto\n",
						"originalType": "const pure nothrow @safe bool(ref const SysTime rhs)",
						"endline": 784
					},
					{
						"kind": "function",
						"line": 842,
						"deco": "xFNaNbNfxS3std8datetime7SysTimeZi",
						"endchar": 5,
						"char": 9,
						"parameters": [
							{
								"deco": "xS3std8datetime7SysTime",
								"name": "rhs"
							}
						],
						"name": "opCmp",
						"comment": "        Compares this $(LREF SysTime) with the given $(LREF SysTime).\n\n        Time zone is irrelevant when comparing $(LREF SysTime)s.\n\n        Returns:\n            $(BOOKTABLE,\n            $(TR $(TD this &lt; rhs) $(TD &lt; 0))\n            $(TR $(TD this == rhs) $(TD 0))\n            $(TR $(TD this &gt; rhs) $(TD &gt; 0))\n            )\n",
						"originalType": "const pure nothrow @safe int(in SysTime rhs)",
						"endline": 850
					},
					{
						"kind": "function",
						"line": 915,
						"deco": "xFNbNdNfZs",
						"endchar": 5,
						"char": 21,
						"name": "year",
						"comment": "        Year of the Gregorian Calendar. Positive numbers are A.D. Non-positive\n        are B.C.\n",
						"endline": 918
					},
					{
						"kind": "function",
						"line": 968,
						"deco": "FNdNfiZv",
						"endchar": 5,
						"char": 20,
						"parameters": [
							{
								"deco": "i",
								"name": "year"
							}
						],
						"name": "year",
						"comment": "        Year of the Gregorian Calendar. Positive numbers are A.D. Non-positive\n        are B.C.\n\n        Params:\n            year = The year to set this $(LREF SysTime)'s year to.\n\n        Throws:\n            $(LREF DateTimeException) if the new year is not a leap year and the\n            resulting date would be on February 29th.\nExample:\n\n---\nassert(SysTime(DateTime(1999, 7, 6, 9, 7, 5)).year == 1999);\nassert(SysTime(DateTime(2010, 10, 4, 0, 0, 30)).year == 2010);\nassert(SysTime(DateTime(-7, 4, 5, 7, 45, 2)).year == -7);\n\n\n---\n",
						"endline": 984
					},
					{
						"kind": "function",
						"line": 1048,
						"deco": "xFNdNfZt",
						"endchar": 5,
						"char": 22,
						"name": "yearBC",
						"comment": "        Year B.C. of the Gregorian Calendar counting year 0 as 1 B.C.\n\n        Throws:\n            $(LREF DateTimeException) if $(D isAD) is true.\nExample:\n\n---\nassert(SysTime(DateTime(0, 1, 1, 12, 30, 33)).yearBC == 1);\nassert(SysTime(DateTime(-1, 1, 1, 10, 7, 2)).yearBC == 2);\nassert(SysTime(DateTime(-100, 1, 1, 4, 59, 0)).yearBC == 101);\n\n\n---\n",
						"endline": 1051
					},
					{
						"kind": "function",
						"line": 1092,
						"deco": "FNdNfiZv",
						"endchar": 5,
						"char": 20,
						"parameters": [
							{
								"deco": "i",
								"name": "year"
							}
						],
						"name": "yearBC",
						"comment": "        Year B.C. of the Gregorian Calendar counting year 0 as 1 B.C.\n\n        Params:\n            year = The year B.C. to set this $(LREF SysTime)'s year to.\n\n        Throws:\n            $(LREF DateTimeException) if a non-positive value is given.\n",
						"endline": 1108
					},
					{
						"kind": "function",
						"line": 1181,
						"deco": "xFNbNdNfZE3std8datetime5Month",
						"endchar": 5,
						"char": 21,
						"name": "month",
						"comment": "        Month of a Gregorian Year.\nExample:\n\n---\nassert(SysTime(DateTime(1999, 7, 6, 9, 7, 5)).month == 7);\nassert(SysTime(DateTime(2010, 10, 4, 0, 0, 30)).month == 10);\nassert(SysTime(DateTime(-7, 4, 5, 7, 45, 2)).month == 4);\n\n\n---\n",
						"endline": 1184
					},
					{
						"kind": "function",
						"line": 1241,
						"deco": "FNdNfE3std8datetime5MonthZv",
						"endchar": 5,
						"char": 20,
						"parameters": [
							{
								"deco": "E3std8datetime5Month",
								"name": "month"
							}
						],
						"name": "month",
						"comment": "        Month of a Gregorian Year.\n\n        Params:\n            month = The month to set this $(LREF SysTime)'s month to.\n\n        Throws:\n            $(LREF DateTimeException) if the given month is not a valid month.\n",
						"endline": 1257
					},
					{
						"kind": "function",
						"line": 1341,
						"deco": "xFNbNdNfZh",
						"endchar": 5,
						"char": 21,
						"name": "day",
						"comment": "        Day of a Gregorian Month.\nExample:\n\n---\nassert(SysTime(DateTime(1999, 7, 6, 9, 7, 5)).day == 6);\nassert(SysTime(DateTime(2010, 10, 4, 0, 0, 30)).day == 4);\nassert(SysTime(DateTime(-7, 4, 5, 7, 45, 2)).day == 5);\n\n\n---\n",
						"endline": 1344
					},
					{
						"kind": "function",
						"line": 1403,
						"deco": "FNdNfiZv",
						"endchar": 5,
						"char": 20,
						"parameters": [
							{
								"deco": "i",
								"name": "day"
							}
						],
						"name": "day",
						"comment": "        Day of a Gregorian Month.\n\n        Params:\n            day = The day of the month to set this $(LREF SysTime)'s day to.\n\n        Throws:\n            $(LREF DateTimeException) if the given day is not a valid day of the\n            current month.\n",
						"endline": 1419
					},
					{
						"kind": "function",
						"line": 1496,
						"deco": "xFNbNdNfZh",
						"endchar": 5,
						"char": 21,
						"name": "hour",
						"comment": "        Hours past midnight.\n",
						"endline": 1508
					},
					{
						"kind": "function",
						"line": 1566,
						"deco": "FNdNfiZv",
						"endchar": 5,
						"char": 20,
						"parameters": [
							{
								"deco": "i",
								"name": "hour"
							}
						],
						"name": "hour",
						"comment": "        Hours past midnight.\n\n        Params:\n            hour = The hours to set this $(LREF SysTime)'s hour to.\n\n        Throws:\n            $(LREF DateTimeException) if the given hour are not a valid hour of\n            the day.\n",
						"endline": 1585
					},
					{
						"kind": "function",
						"line": 1619,
						"deco": "xFNbNdNfZh",
						"endchar": 5,
						"char": 21,
						"name": "minute",
						"comment": "        Minutes past the current hour.\n",
						"endline": 1633
					},
					{
						"kind": "function",
						"line": 1691,
						"deco": "FNdNfiZv",
						"endchar": 5,
						"char": 20,
						"parameters": [
							{
								"deco": "i",
								"name": "minute"
							}
						],
						"name": "minute",
						"comment": "        Minutes past the current hour.\n\n        Params:\n            minute = The minute to set this $(LREF SysTime)'s minute to.\n\n        Throws:\n            $(LREF DateTimeException) if the given minute are not a valid minute\n            of an hour.\n",
						"endline": 1713
					},
					{
						"kind": "function",
						"line": 1747,
						"deco": "xFNbNdNfZh",
						"endchar": 5,
						"char": 21,
						"name": "second",
						"comment": "        Seconds past the current minute.\n",
						"endline": 1762
					},
					{
						"kind": "function",
						"line": 1820,
						"deco": "FNdNfiZv",
						"endchar": 5,
						"char": 20,
						"parameters": [
							{
								"deco": "i",
								"name": "second"
							}
						],
						"name": "second",
						"comment": "        Seconds past the current minute.\n\n        Params:\n            second = The second to set this $(LREF SysTime)'s second to.\n\n        Throws:\n            $(LREF DateTimeException) if the given second are not a valid second\n            of a minute.\n",
						"endline": 1844
					},
					{
						"kind": "function",
						"line": 1879,
						"deco": "xFNbNdNfZS4core4time8Duration",
						"endchar": 5,
						"char": 24,
						"name": "fracSecs",
						"comment": "        Fractional seconds past the second (i.e. the portion of a\n        $(LREF SysTime) which is less than a second).\nExample:\n\n---\nauto dt = DateTime(1982, 4, 1, 20, 59, 22);\nassert(SysTime(dt, msecs(213)).fracSecs == msecs(213));\nassert(SysTime(dt, usecs(5202)).fracSecs == usecs(5202));\nassert(SysTime(dt, hnsecs(1234567)).fracSecs == hnsecs(1234567));\n\n// SysTime and Duration both have a precision of hnsecs (100 ns),\n// so nsecs are going to be truncated.\nassert(SysTime(dt, nsecs(123456789)).fracSecs == nsecs(123456700));\n\n\n---\n",
						"endline": 1887
					},
					{
						"kind": "function",
						"line": 1951,
						"deco": "FNdNfS4core4time8DurationZv",
						"endchar": 5,
						"char": 20,
						"parameters": [
							{
								"deco": "S4core4time8Duration",
								"name": "fracSecs"
							}
						],
						"name": "fracSecs",
						"comment": "        Fractional seconds past the second (i.e. the portion of a\n        $(LREF SysTime) which is less than a second).\n\n        Params:\n            fracSecs = The duration to set this $(LREF SysTime)'s fractional\n                       seconds to.\n\n        Throws:\n            $(LREF DateTimeException) if the given duration is negative or if\n            it's greater than or equal to one second.\nExample:\n\n---\nauto st = SysTime(DateTime(1982, 4, 1, 20, 59, 22));\nassert(st.fracSecs == Duration.zero);\n\nst.fracSecs = msecs(213);\nassert(st.fracSecs == msecs(213));\n\nst.fracSecs = hnsecs(1234567);\nassert(st.fracSecs == hnsecs(1234567));\n\n// SysTime has a precision of hnsecs (100 ns), so nsecs are\n// going to be truncated.\nst.fracSecs = nsecs(123456789);\nassert(st.fracSecs == hnsecs(1234567));\n\n\n---\n",
						"endline": 1972
					},
					{
						"kind": "function",
						"line": 2028,
						"deco": "xFNbNdNfZS4core4time7FracSec",
						"endchar": 5,
						"char": 23,
						"name": "fracSec",
						"comment": "        $(RED Scheduled for deprecation. Please use $(LREF fracSecs) instead of\n              fracSec. It uses a $(CXREF time, Duration) to represent the\n              fractional seconds instead of a $(CXREF time, FracSec). This\n              overload will be deprecated in 2.068).\n\n        Fractional seconds past the second.\n",
						"endline": 2043
					},
					{
						"kind": "function",
						"line": 2107,
						"deco": "FNdNfS4core4time7FracSecZv",
						"endchar": 5,
						"char": 20,
						"parameters": [
							{
								"deco": "S4core4time7FracSec",
								"name": "fracSec"
							}
						],
						"name": "fracSec",
						"comment": "        $(RED Scheduled for deprecation. Please use $(LREF fracSecs) instead of\n              fracSec. It uses a $(CXREF time, Duration) to represent the\n              fractional seconds instead of a $(CXREF time, FracSec). This\n              overload will be deprecated in 2.068).\n\n        Fractional seconds past the second.\n\n        Params:\n            fracSec = The fractional seconds to set this $(LREF SysTime)'s\n                      fractional seconds to.\n\n        Throws:\n            $(LREF DateTimeException) if $(D fracSec) is negative.\n",
						"endline": 2133
					},
					{
						"kind": "function",
						"line": 2165,
						"deco": "xFNaNbNdNfZl",
						"endchar": 5,
						"char": 20,
						"name": "stdTime",
						"comment": "        The total hnsecs from midnight, January 1st, 1 A.D. UTC. This is the\n        internal representation of $(LREF SysTime).\n",
						"endline": 2168
					},
					{
						"kind": "function",
						"line": 2192,
						"deco": "FNaNbNdNflZv",
						"endchar": 5,
						"char": 20,
						"parameters": [
							{
								"deco": "l",
								"name": "stdTime"
							}
						],
						"name": "stdTime",
						"comment": "        The total hnsecs from midnight, January 1st, 1 A.D. UTC. This is the\n        internal representation of $(LREF SysTime).\n\n        Params:\n            stdTime = The number of hnsecs since January 1st, 1 A.D. UTC.\n",
						"endline": 2195
					},
					{
						"kind": "function",
						"line": 2225,
						"deco": "xFNaNbNdNfZyC3std8datetime8TimeZone",
						"endchar": 5,
						"char": 35,
						"name": "timezone",
						"comment": "        The current time zone of this $(LREF SysTime). Its internal time is always\n        kept in UTC, so there are no conversion issues between time zones due to\n        DST. Functions which return all or part of the time - such as hours -\n        adjust the time to this $(LREF SysTime)'s time zone before returning.\n",
						"endline": 2228
					},
					{
						"kind": "function",
						"line": 2240,
						"deco": "FNaNbNdNfyC3std8datetime8TimeZoneZv",
						"endchar": 5,
						"char": 20,
						"parameters": [
							{
								"deco": "yC3std8datetime8TimeZone",
								"name": "timezone"
							}
						],
						"name": "timezone",
						"comment": "        The current time zone of this $(LREF SysTime). It's internal time is always\n        kept in UTC, so there are no conversion issues between time zones due to\n        DST. Functions which return all or part of the time - such as hours -\n        adjust the time to this $(LREF SysTime)'s time zone before returning.\n\n        Params:\n            timezone = The $(LREF2 .TimeZone, TimeZone) to set this $(LREF SysTime)'s time zone to.\n",
						"originalType": "pure nothrow @property @safe void(immutable TimeZone timezone)",
						"endline": 2246
					},
					{
						"kind": "function",
						"line": 2252,
						"deco": "xFNbNdNfZb",
						"endchar": 5,
						"char": 20,
						"name": "dstInEffect",
						"comment": "        Returns whether DST is in effect for this $(LREF SysTime).\n",
						"endline": 2256
					},
					{
						"kind": "function",
						"line": 2263,
						"deco": "xFNbNdNfZS4core4time8Duration",
						"endchar": 5,
						"char": 24,
						"name": "utcOffset",
						"comment": "        Returns what the offset from UTC is for this $(LREF SysTime).\n        It includes the DST offset in effect at that time (if any).\n",
						"endline": 2266
					},
					{
						"kind": "function",
						"line": 2273,
						"deco": "xFNaNbNfZS3std8datetime7SysTime",
						"endchar": 5,
						"char": 13,
						"name": "toLocalTime",
						"comment": "        Returns a $(LREF SysTime) with the same std time as this one, but with\n        $(LREF LocalTime) as its time zone.\n",
						"endline": 2276
					},
					{
						"kind": "function",
						"line": 2305,
						"deco": "xFNaNbNfZS3std8datetime7SysTime",
						"endchar": 5,
						"char": 13,
						"name": "toUTC",
						"comment": "        Returns a $(LREF SysTime) with the same std time as this one, but with\n        $(D UTC) as its time zone.\n",
						"endline": 2308
					},
					{
						"kind": "function",
						"line": 2325,
						"deco": "xFNaNbNfyC3std8datetime8TimeZoneZS3std8datetime7SysTime",
						"endchar": 5,
						"char": 13,
						"parameters": [
							{
								"deco": "yC3std8datetime8TimeZone",
								"name": "tz"
							}
						],
						"name": "toOtherTZ",
						"comment": "        Returns a $(LREF SysTime) with the same std time as this one, but with\n        given time zone as its time zone.\n",
						"originalType": "const pure nothrow @safe SysTime(immutable TimeZone tz)",
						"endline": 2331
					},
					{
						"kind": "function",
						"line": 2357,
						"deco": "xFNaNbNfZl",
						"endchar": 5,
						"char": 12,
						"name": "toUnixTime",
						"comment": "        Returns a $(D time_t) which represents the same time as this\n        $(LREF SysTime).\n\n        Note that like all conversions in std.datetime, this is a truncating\n        conversion.\n\n        If $(D time_t) is 32 bits, rather than 64, and the result can't fit in a\n        32-bit value, then the closest value that can be held in 32 bits will be\n        used (so $(D time_t.max) if it goes over and $(D time_t.min) if it goes\n        under).\n",
						"originalType": "const pure nothrow @safe time_t()",
						"endline": 2360
					},
					{
						"kind": "function",
						"line": 2387,
						"deco": "xFNaNbNfZS4core3sys5posix3sys4time7timeval",
						"endchar": 5,
						"char": 13,
						"name": "toTimeVal",
						"comment": "        Returns a $(D timeval) which represents this $(LREF SysTime).\n\n        Note that like all conversions in std.datetime, this is a truncating\n        conversion.\n\n        If $(D time_t) is 32 bits, rather than 64, and the result can't fit in a\n        32-bit value, then the closest value that can be held in 32 bits will be\n        used for $(D tv_sec). (so $(D time_t.max) if it goes over and\n        $(D time_t.min) if it goes under).\n",
						"endline": 2395
					},
					{
						"kind": "function",
						"line": 2423,
						"deco": "xFNbNfZS4core4stdc4time2tm",
						"endchar": 5,
						"char": 8,
						"name": "toTM",
						"comment": "        Returns a $(D tm) which represents this $(LREF SysTime).\n",
						"endline": 2447
					},
					{
						"kind": "template",
						"line": 2527,
						"constraint": "units == \"years\" || units == \"months\"",
						"members": [
							{
								"kind": "function",
								"line": 2527,
								"endchar": 5,
								"char": 17,
								"type": "nothrow ref @safe SysTime(long value, AllowDayOverflow allowOverflow = AllowDayOverflow.yes)",
								"parameters": [
									{
										"deco": "l",
										"name": "value"
									},
									{
										"default": "AllowDayOverflow.yes",
										"type": "AllowDayOverflow",
										"name": "allowOverflow"
									}
								],
								"name": "add",
								"endline": 2555
							}
						],
						"char": 17,
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "units"
							}
						],
						"comment": "        Adds the given number of years or months to this $(LREF SysTime). A\n        negative number will subtract.\n\n        Note that if day overflow is allowed, and the date with the adjusted\n        year/month overflows the number of days in the new month, then the month\n        will be incremented by one, and the day set to the number of days\n        overflowed. (e.g. if the day were 31 and the new month were June, then\n        the month would be incremented to July, and the new day would be 1). If\n        day overflow is not allowed, then the day will be set to the last valid\n        day in the month (e.g. June 31st would become June 30th).\n\n        Params:\n            units         = The type of units to add (\"years\" or \"months\").\n            value         = The number of months or years to add to this\n                            $(LREF SysTime).\n            allowOverflow = Whether the days should be allowed to overflow,\n                            causing the month to increment.\n",
						"name": "add"
					},
					{
						"kind": "template",
						"line": 3690,
						"constraint": "units == \"years\"",
						"members": [
							{
								"kind": "function",
								"line": 3690,
								"endchar": 5,
								"char": 17,
								"type": "nothrow ref @safe SysTime(long value, AllowDayOverflow allowOverflow = AllowDayOverflow.yes)",
								"parameters": [
									{
										"deco": "l",
										"name": "value"
									},
									{
										"default": "AllowDayOverflow.yes",
										"type": "AllowDayOverflow",
										"name": "allowOverflow"
									}
								],
								"name": "roll",
								"endline": 3694
							}
						],
						"char": 17,
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "units"
							}
						],
						"comment": "        Adds the given number of years or months to this $(LREF SysTime). A\n        negative number will subtract.\n\n        The difference between rolling and adding is that rolling does not\n        affect larger units. Rolling a $(LREF SysTime) 12 months\n        gets the exact same $(LREF SysTime). However, the days can still be affected\n        due to the differing number of days in each month.\n\n        Because there are no units larger than years, there is no difference\n        between adding and rolling years.\n\n        Params:\n            units         = The type of units to add (\"years\" or \"months\").\n            value         = The number of months or years to add to this\n                            $(LREF SysTime).\n            allowOverflow = Whether the days should be allowed to overflow,\n                            causing the month to increment.\nExample:\n\n---\nauto st1 = SysTime(DateTime(2010, 1, 1, 12, 33, 33));\nst1.roll!\"months\"(1);\nassert(st1 == SysTime(DateTime(2010, 2, 1, 12, 33, 33)));\n\nauto st2 = SysTime(DateTime(2010, 1, 1, 12, 33, 33));\nst2.roll!\"months\"(-1);\nassert(st2 == SysTime(DateTime(2010, 12, 1, 12, 33, 33)));\n\nauto st3 = SysTime(DateTime(1999, 1, 29, 12, 33, 33));\nst3.roll!\"months\"(1);\nassert(st3 == SysTime(DateTime(1999, 3, 1, 12, 33, 33)));\n\nauto st4 = SysTime(DateTime(1999, 1, 29, 12, 33, 33));\nst4.roll!\"months\"(1, AllowDayOverflow.no);\nassert(st4 == SysTime(DateTime(1999, 2, 28, 12, 33, 33)));\n\nauto st5 = SysTime(DateTime(2000, 2, 29, 12, 30, 33));\nst5.roll!\"years\"(1);\nassert(st5 == SysTime(DateTime(2001, 3, 1, 12, 30, 33)));\n\nauto st6 = SysTime(DateTime(2000, 2, 29, 12, 30, 33));\nst6.roll!\"years\"(1, AllowDayOverflow.no);\nassert(st6 == SysTime(DateTime(2001, 2, 28, 12, 30, 33)));\n\n\n---\n",
						"name": "roll"
					},
					{
						"kind": "template",
						"line": 4535,
						"constraint": "units == \"days\"",
						"members": [
							{
								"kind": "function",
								"line": 4535,
								"endchar": 5,
								"char": 17,
								"type": "nothrow ref @safe SysTime(long value)",
								"parameters": [
									{
										"deco": "l",
										"name": "value"
									}
								],
								"name": "roll",
								"endline": 4560
							}
						],
						"char": 17,
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "units"
							}
						],
						"comment": "        Adds the given number of units to this $(LREF SysTime). A negative number\n        will subtract.\n\n        The difference between rolling and adding is that rolling does not\n        affect larger units. For instance, rolling a $(LREF SysTime) one\n        year's worth of days gets the exact same $(LREF SysTime).\n\n        Accepted units are $(D \"days\"), $(D \"minutes\"), $(D \"hours\"),\n        $(D \"minutes\"), $(D \"seconds\"), $(D \"msecs\"), $(D \"usecs\"), and\n        $(D \"hnsecs\").\n\n        Note that when rolling msecs, usecs or hnsecs, they all add up to a\n        second. So, for example, rolling 1000 msecs is exactly the same as\n        rolling 100,000 usecs.\n\n        Params:\n            units = The units to add.\n            value = The number of $(D_PARAM units) to add to this $(LREF SysTime).\nExample:\n\n---\nauto st1 = SysTime(DateTime(2010, 1, 1, 11, 23, 12));\nst1.roll!\"days\"(1);\nassert(st1 == SysTime(DateTime(2010, 1, 2, 11, 23, 12)));\nst1.roll!\"days\"(365);\nassert(st1 == SysTime(DateTime(2010, 1, 26, 11, 23, 12)));\nst1.roll!\"days\"(-32);\nassert(st1 == SysTime(DateTime(2010, 1, 25, 11, 23, 12)));\n\nauto st2 = SysTime(DateTime(2010, 7, 4, 12, 0, 0));\nst2.roll!\"hours\"(1);\nassert(st2 == SysTime(DateTime(2010, 7, 4, 13, 0, 0)));\n\nauto st3 = SysTime(DateTime(2010, 2, 12, 12, 0, 0));\nst3.roll!\"hours\"(-1);\nassert(st3 == SysTime(DateTime(2010, 2, 12, 11, 0, 0)));\n\nauto st4 = SysTime(DateTime(2009, 12, 31, 0, 0, 0));\nst4.roll!\"minutes\"(1);\nassert(st4 == SysTime(DateTime(2009, 12, 31, 0, 1, 0)));\n\nauto st5 = SysTime(DateTime(2010, 1, 1, 0, 0, 0));\nst5.roll!\"minutes\"(-1);\nassert(st5 == SysTime(DateTime(2010, 1, 1, 0, 59, 0)));\n\nauto st6 = SysTime(DateTime(2009, 12, 31, 0, 0, 0));\nst6.roll!\"seconds\"(1);\nassert(st6 == SysTime(DateTime(2009, 12, 31, 0, 0, 1)));\n\nauto st7 = SysTime(DateTime(2010, 1, 1, 0, 0, 0));\nst7.roll!\"seconds\"(-1);\nassert(st7 == SysTime(DateTime(2010, 1, 1, 0, 0, 59)));\n\nauto dt = DateTime(2010, 1, 1, 0, 0, 0);\nauto st8 = SysTime(dt);\nst8.roll!\"msecs\"(1);\nassert(st8 == SysTime(dt, msecs(1)));\n\nauto st9 = SysTime(dt);\nst9.roll!\"msecs\"(-1);\nassert(st9 == SysTime(dt, msecs(999)));\n\nauto st10 = SysTime(dt);\nst10.roll!\"hnsecs\"(1);\nassert(st10 == SysTime(dt, hnsecs(1)));\n\nauto st11 = SysTime(dt);\nst11.roll!\"hnsecs\"(-1);\nassert(st11 == SysTime(dt, hnsecs(9_999_999)));\n\n\n---\n",
						"name": "roll"
					},
					{
						"kind": "template",
						"line": 5976,
						"constraint": "(op == \"+\" || op == \"-\") && (is(Unqual!D == Duration) || is(Unqual!D == TickDuration))",
						"members": [
							{
								"kind": "function",
								"line": 5976,
								"endchar": 5,
								"char": 13,
								"type": "const pure nothrow @safe SysTime(in D duration)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "D",
										"name": "duration"
									}
								],
								"name": "opBinary",
								"endline": 5992
							}
						],
						"char": 13,
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "op"
							},
							{
								"kind": "type",
								"name": "D"
							}
						],
						"comment": "        Gives the result of adding or subtracting a duration from this\n        $(LREF SysTime).\n\n        The legal types of arithmetic for $(LREF SysTime) using this operator are\n\n        $(BOOKTABLE,\n        $(TR $(TD SysTime) $(TD +) $(TD duration) $(TD -->) $(TD SysTime))\n        $(TR $(TD SysTime) $(TD -) $(TD duration) $(TD -->) $(TD SysTime))\n        )\n\n        Params:\n            duration = The duration to add to or subtract from this\n                       $(LREF SysTime).\n",
						"name": "opBinary"
					},
					{
						"kind": "template",
						"line": 6196,
						"constraint": "(op == \"+\" || op == \"-\") && (is(Unqual!D == Duration) || is(Unqual!D == TickDuration))",
						"members": [
							{
								"kind": "function",
								"line": 6196,
								"endchar": 5,
								"char": 17,
								"type": "pure nothrow ref @safe SysTime(in D duration)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "D",
										"name": "duration"
									}
								],
								"name": "opOpAssign",
								"endline": 6210
							}
						],
						"char": 17,
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "op"
							},
							{
								"kind": "type",
								"name": "D"
							}
						],
						"comment": "        Gives the result of adding or subtracting a duration from this\n        $(LREF SysTime), as well as assigning the result to this $(LREF SysTime).\n\n        The legal types of arithmetic for $(LREF SysTime) using this operator are\n\n        $(BOOKTABLE,\n        $(TR $(TD SysTime) $(TD +) $(TD duration) $(TD -->) $(TD SysTime))\n        $(TR $(TD SysTime) $(TD -) $(TD duration) $(TD -->) $(TD SysTime))\n        )\n\n        Params:\n            duration = The duration to add to or subtract from this\n                       $(LREF SysTime).\n",
						"name": "opOpAssign"
					},
					{
						"kind": "template",
						"line": 6402,
						"constraint": "op == \"-\"",
						"members": [
							{
								"kind": "function",
								"line": 6402,
								"endchar": 5,
								"char": 14,
								"type": "const pure nothrow @safe Duration(in SysTime rhs)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "SysTime",
										"name": "rhs"
									}
								],
								"name": "opBinary",
								"endline": 6406
							}
						],
						"char": 14,
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "op"
							}
						],
						"comment": "        Gives the difference between two $(LREF SysTime)s.\n\n        The legal types of arithmetic for $(LREF SysTime) using this operator are\n\n        $(BOOKTABLE,\n        $(TR $(TD SysTime) $(TD -) $(TD SysTime) $(TD -->) $(TD duration))\n        )\n",
						"name": "opBinary"
					},
					{
						"kind": "function",
						"line": 6510,
						"deco": "xFNbNfxS3std8datetime7SysTimeZi",
						"endchar": 5,
						"char": 9,
						"parameters": [
							{
								"deco": "xS3std8datetime7SysTime",
								"name": "rhs"
							}
						],
						"name": "diffMonths",
						"comment": "        Returns the difference between the two $(LREF SysTime)s in months.\n\n        To get the difference in years, subtract the year property\n        of two $(LREF SysTime)s. To get the difference in days or weeks,\n        subtract the $(LREF SysTime)s themselves and use the $(CXREF time, Duration)\n        that results. Because converting between months and smaller\n        units requires a specific date (which $(CXREF time, Duration)s don't have),\n        getting the difference in months requires some math using both\n        the year and month properties, so this is a convenience function for\n        getting the difference in months.\n\n        Note that the number of days in the months or how far into the month\n        either date is is irrelevant. It is the difference in the month property\n        combined with the difference in years * 12. So, for instance,\n        December 31st and January 1st are one month apart just as December 1st\n        and January 31st are one month apart.\n\n        Params:\n            rhs = The $(LREF SysTime) to subtract from this one.\nExample:\n\n---\nassert(SysTime(Date(1999, 2, 1)).diffMonths(\n            SysTime(Date(1999, 1, 31))) == 1);\n\nassert(SysTime(Date(1999, 1, 31)).diffMonths(\n            SysTime(Date(1999, 2, 1))) == -1);\n\nassert(SysTime(Date(1999, 3, 1)).diffMonths(\n            SysTime(Date(1999, 1, 1))) == 2);\n\nassert(SysTime(Date(1999, 1, 1)).diffMonths(\n            SysTime(Date(1999, 3, 31))) == -2);\n\n\n---\n",
						"originalType": "const nothrow @safe int(in SysTime rhs)",
						"endline": 6513
					},
					{
						"kind": "function",
						"line": 6553,
						"deco": "xFNbNdNfZb",
						"endchar": 5,
						"char": 20,
						"name": "isLeapYear",
						"comment": "        Whether this $(LREF SysTime) is in a leap year.\n",
						"endline": 6556
					},
					{
						"kind": "function",
						"line": 6572,
						"deco": "xFNbNdNfZE3std8datetime9DayOfWeek",
						"endchar": 5,
						"char": 25,
						"name": "dayOfWeek",
						"comment": "        Day of the week this $(LREF SysTime) is on.\n",
						"endline": 6575
					},
					{
						"kind": "function",
						"line": 6591,
						"deco": "xFNbNdNfZt",
						"endchar": 5,
						"char": 22,
						"name": "dayOfYear",
						"comment": "        Day of the year this $(LREF SysTime) is on.\nExample:\n\n---\nassert(SysTime(DateTime(1999, 1, 1, 12, 22, 7)).dayOfYear == 1);\nassert(SysTime(DateTime(1999, 12, 31, 7, 2, 59)).dayOfYear == 365);\nassert(SysTime(DateTime(2000, 12, 31, 21, 20, 0)).dayOfYear == 366);\n\n\n---\n",
						"endline": 6594
					},
					{
						"kind": "function",
						"line": 6622,
						"deco": "FNdNfiZv",
						"endchar": 5,
						"char": 20,
						"parameters": [
							{
								"deco": "i",
								"name": "day"
							}
						],
						"name": "dayOfYear",
						"comment": "        Day of the year.\n\n        Params:\n            day = The day of the year to set which day of the year this\n                  $(LREF SysTime) is on.\n",
						"endline": 6634
					},
					{
						"kind": "function",
						"line": 6650,
						"deco": "xFNbNdNfZi",
						"endchar": 5,
						"char": 19,
						"name": "dayOfGregorianCal",
						"comment": "        The Xth day of the Gregorian Calendar that this $(LREF SysTime) is on.\nExample:\n\n---\nassert(SysTime(DateTime(1, 1, 1, 0, 0, 0)).dayOfGregorianCal == 1);\nassert(SysTime(DateTime(1, 12, 31, 23, 59, 59)).dayOfGregorianCal == 365);\nassert(SysTime(DateTime(2, 1, 1, 2, 2, 2)).dayOfGregorianCal == 366);\n\nassert(SysTime(DateTime(0, 12, 31, 7, 7, 7)).dayOfGregorianCal == 0);\nassert(SysTime(DateTime(0, 1, 1, 19, 30, 0)).dayOfGregorianCal == -365);\nassert(SysTime(DateTime(-1, 12, 31, 4, 7, 0)).dayOfGregorianCal == -366);\n\nassert(SysTime(DateTime(2000, 1, 1, 9, 30, 20)).dayOfGregorianCal == 730_120);\nassert(SysTime(DateTime(2010, 12, 31, 15, 45, 50)).dayOfGregorianCal == 734_137);\n\n\n---\n",
						"endline": 6664
					},
					{
						"kind": "function",
						"line": 7021,
						"deco": "FNbNdNfiZv",
						"endchar": 5,
						"char": 20,
						"parameters": [
							{
								"deco": "i",
								"name": "days"
							}
						],
						"name": "dayOfGregorianCal",
						"comment": "        The Xth day of the Gregorian Calendar that this $(LREF SysTime) is on.\n        Setting this property does not affect the time portion of $(LREF SysTime).\n\n        Params:\n            days = The day of the Gregorian Calendar to set this $(LREF SysTime)\n                   to.\nExample:\n\n---\nauto st = SysTime(DateTime(0, 1, 1, 12, 0, 0));\nst.dayOfGregorianCal = 1;\nassert(st == SysTime(DateTime(1, 1, 1, 12, 0, 0)));\n\nst.dayOfGregorianCal = 365;\nassert(st == SysTime(DateTime(1, 12, 31, 12, 0, 0)));\n\nst.dayOfGregorianCal = 366;\nassert(st == SysTime(DateTime(2, 1, 1, 12, 0, 0)));\n\nst.dayOfGregorianCal = 0;\nassert(st == SysTime(DateTime(0, 12, 31, 12, 0, 0)));\n\nst.dayOfGregorianCal = -365;\nassert(st == SysTime(DateTime(-0, 1, 1, 12, 0, 0)));\n\nst.dayOfGregorianCal = -366;\nassert(st == SysTime(DateTime(-1, 12, 31, 12, 0, 0)));\n\nst.dayOfGregorianCal = 730_120;\nassert(st == SysTime(DateTime(2000, 1, 1, 12, 0, 0)));\n\nst.dayOfGregorianCal = 734_137;\nassert(st == SysTime(DateTime(2010, 12, 31, 12, 0, 0)));\n\n\n---\n",
						"endline": 7038
					},
					{
						"kind": "function",
						"line": 7279,
						"deco": "xFNbNdNfZh",
						"endchar": 5,
						"char": 21,
						"name": "isoWeek",
						"comment": "        The ISO 8601 week of the year that this $(LREF SysTime) is in.\n\n        See_Also:\n            $(WEB en.wikipedia.org/wiki/ISO_week_date, ISO Week Date).\n",
						"endline": 7282
					},
					{
						"kind": "function",
						"line": 7299,
						"deco": "xFNbNdNfZS3std8datetime7SysTime",
						"endchar": 5,
						"char": 23,
						"name": "endOfMonth",
						"comment": "        $(LREF SysTime) for the last day in the month that this Date is in.\n        The time portion of endOfMonth is always 23:59:59.9999999.\nExample:\n\n---\nassert(SysTime(DateTime(1999, 1, 6, 0, 0, 0)).endOfMonth ==\n       SysTime(DateTime(1999, 1, 31, 23, 59, 59),\n               hnsecs(9_999_999)));\n\nassert(SysTime(DateTime(1999, 2, 7, 19, 30, 0),\n               msecs(24)).endOfMonth ==\n       SysTime(DateTime(1999, 2, 28, 23, 59, 59),\n               hnsecs(9_999_999)));\n\nassert(SysTime(DateTime(2000, 2, 7, 5, 12, 27),\n               usecs(5203)).endOfMonth ==\n       SysTime(DateTime(2000, 2, 29, 23, 59, 59),\n               hnsecs(9_999_999)));\n\nassert(SysTime(DateTime(2000, 6, 4, 12, 22, 9),\n               hnsecs(12345)).endOfMonth ==\n       SysTime(DateTime(2000, 6, 30, 23, 59, 59),\n               hnsecs(9_999_999)));\n\n\n---\n",
						"endline": 7322
					},
					{
						"kind": "function",
						"line": 7392,
						"deco": "xFNbNdNfZh",
						"endchar": 5,
						"char": 21,
						"name": "daysInMonth",
						"comment": "        The last day in the month that this $(LREF SysTime) is in.\nExample:\n\n---\nassert(SysTime(DateTime(1999, 1, 6, 0, 0, 0)).daysInMonth == 31);\nassert(SysTime(DateTime(1999, 2, 7, 19, 30, 0)).daysInMonth == 28);\nassert(SysTime(DateTime(2000, 2, 7, 5, 12, 27)).daysInMonth == 29);\nassert(SysTime(DateTime(2000, 6, 4, 12, 22, 9)).daysInMonth == 30);\n\n\n---\n",
						"endline": 7395
					},
					{
						"kind": "function",
						"line": 7448,
						"deco": "xFNbNdNfZb",
						"endchar": 5,
						"char": 20,
						"name": "isAD",
						"comment": "        Whether the current year is a date in A.D.\nExample:\n\n---\nassert(SysTime(DateTime(1, 1, 1, 12, 7, 0)).isAD);\nassert(SysTime(DateTime(2010, 12, 31, 0, 0, 0)).isAD);\nassert(!SysTime(DateTime(0, 12, 31, 23, 59, 59)).isAD);\nassert(!SysTime(DateTime(-2010, 1, 1, 2, 2, 2)).isAD);\n\n\n---\n",
						"endline": 7451
					},
					{
						"kind": "function",
						"line": 7485,
						"deco": "xFNbNdNfZl",
						"endchar": 5,
						"char": 20,
						"name": "julianDay",
						"comment": "        The $(WEB en.wikipedia.org/wiki/Julian_day, Julian day)\n        for this $(LREF SysTime) at the given time. For example,\n        prior to noon, 1996-03-31 would be the Julian day number 2_450_173, so\n        this function returns 2_450_173, while from noon onward, the Julian\n        day number would be 2_450_174, so this function returns 2_450_174.\n",
						"endline": 7490
					},
					{
						"kind": "function",
						"line": 7529,
						"deco": "xFNbNdNfZl",
						"endchar": 5,
						"char": 20,
						"name": "modJulianDay",
						"comment": "        The modified $(WEB en.wikipedia.org/wiki/Julian_day, Julian day) for any time on this date (since, the modified\n        Julian day changes at midnight).\n",
						"endline": 7532
					},
					{
						"kind": "template",
						"line": 7552,
						"constraint": "is(Unqual!T == Date)",
						"members": [
							{
								"kind": "function",
								"line": 7552,
								"endchar": 5,
								"char": 10,
								"type": "const nothrow @safe Date()",
								"name": "opCast",
								"endline": 7556
							}
						],
						"char": 10,
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"comment": "        Returns a $(LREF Date) equivalent to this $(LREF SysTime).\n",
						"name": "opCast"
					},
					{
						"kind": "template",
						"line": 7586,
						"constraint": "is(Unqual!T == DateTime)",
						"members": [
							{
								"kind": "function",
								"line": 7586,
								"endchar": 5,
								"char": 14,
								"type": "const nothrow @safe DateTime()",
								"name": "opCast",
								"endline": 7608
							}
						],
						"char": 14,
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"comment": "        Returns a $(LREF DateTime) equivalent to this $(LREF SysTime).\n",
						"name": "opCast"
					},
					{
						"kind": "template",
						"line": 7645,
						"constraint": "is(Unqual!T == TimeOfDay)",
						"members": [
							{
								"kind": "function",
								"line": 7645,
								"endchar": 5,
								"char": 15,
								"type": "const nothrow @safe TimeOfDay()",
								"name": "opCast",
								"endline": 7664
							}
						],
						"char": 15,
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"comment": "        Returns a $(LREF TimeOfDay) equivalent to this $(LREF SysTime).\n",
						"name": "opCast"
					},
					{
						"kind": "function",
						"line": 7721,
						"deco": "xFNbNfZAya",
						"endchar": 5,
						"char": 12,
						"name": "toISOString",
						"comment": "        Converts this $(LREF SysTime) to a string with the format\n        YYYYMMDDTHHMMSS.FFFFFFFTZ (where F is fractional seconds and TZ is time\n        zone).\n\n        Note that the number of digits in the fractional seconds varies with the\n        number of fractional seconds. It's a maximum of 7 (which would be\n        hnsecs), but only has as many as are necessary to hold the correct value\n        (so no trailing zeroes), and if there are no fractional seconds, then\n        there is no decimal point.\n\n        If this $(LREF SysTime)'s time zone is $(LREF LocalTime), then TZ is empty.\n        If its time zone is $(D UTC), then it is \"Z\". Otherwise, it is the\n        offset from UTC (e.g. +1:00 or -7:00). Note that the offset from UTC\n        is $(I not) enough to uniquely identify the time zone.\n\n        Time zone offsets will be in the form +HH:MM or -HH:MM.\nExample:\n\n---\nassert(SysTime(DateTime(2010, 7, 4, 7, 6, 12)).toISOString() ==\n       \"20100704T070612\");\n\nassert(SysTime(DateTime(1998, 12, 25, 2, 15, 0),\n               msecs(24)).toISOString() ==\n       \"19981225T021500.024\");\n\nassert(SysTime(DateTime(0, 1, 5, 23, 9, 59)).toISOString() ==\n       \"00000105T230959\");\n\nassert(SysTime(DateTime(-4, 1, 5, 0, 0, 2),\n               hnsecs(520_920)).toISOString() ==\n       \"-00040105T000002.052092\");\n\n\n---\n",
						"endline": 7759
					},
					{
						"kind": "function",
						"line": 7851,
						"deco": "xFNbNfZAya",
						"endchar": 5,
						"char": 12,
						"name": "toISOExtString",
						"comment": "        Converts this $(LREF SysTime) to a string with the format\n        YYYY-MM-DDTHH:MM:SS.FFFFFFFTZ (where F is fractional seconds and TZ\n        is the time zone).\n\n        Note that the number of digits in the fractional seconds varies with the\n        number of fractional seconds. It's a maximum of 7 (which would be\n        hnsecs), but only has as many as are necessary to hold the correct value\n        (so no trailing zeroes), and if there are no fractional seconds, then\n        there is no decimal point.\n\n        If this $(LREF SysTime)'s time zone is $(LREF LocalTime), then TZ is empty. If\n        its time zone is $(D UTC), then it is \"Z\". Otherwise, it is the offset\n        from UTC (e.g. +1:00 or -7:00). Note that the offset from UTC is\n        $(I not) enough to uniquely identify the time zone.\n\n        Time zone offsets will be in the form +HH:MM or -HH:MM.\nExample:\n\n---\nassert(SysTime(DateTime(2010, 7, 4, 7, 6, 12)).toISOExtString() ==\n       \"2010-07-04T07:06:12\");\n\nassert(SysTime(DateTime(1998, 12, 25, 2, 15, 0),\n               msecs(24)).toISOExtString() ==\n       \"1998-12-25T02:15:00.024\");\n\nassert(SysTime(DateTime(0, 1, 5, 23, 9, 59)).toISOExtString() ==\n       \"0000-01-05T23:09:59\");\n\nassert(SysTime(DateTime(-4, 1, 5, 0, 0, 2),\n               hnsecs(520_920)).toISOExtString() ==\n       \"-0004-01-05T00:00:02.052092\");\n\n\n---\n",
						"endline": 7889
					},
					{
						"kind": "function",
						"line": 7985,
						"deco": "xFNbNfZAya",
						"endchar": 5,
						"char": 12,
						"name": "toSimpleString",
						"comment": "        Converts this $(LREF SysTime) to a string with the format\n        YYYY-Mon-DD HH:MM:SS.FFFFFFFTZ (where F is fractional seconds and TZ\n        is the time zone).\n\n        Note that the number of digits in the fractional seconds varies with the\n        number of fractional seconds. It's a maximum of 7 (which would be\n        hnsecs), but only has as many as are necessary to hold the correct value\n        (so no trailing zeroes), and if there are no fractional seconds, then\n        there is no decimal point.\n\n        If this $(LREF SysTime)'s time zone is $(LREF LocalTime), then TZ is empty. If\n        its time zone is $(D UTC), then it is \"Z\". Otherwise, it is the offset\n        from UTC (e.g. +1:00 or -7:00). Note that the offset from UTC is\n        $(I not) enough to uniquely identify the time zone.\n\n        Time zone offsets will be in the form +HH:MM or -HH:MM.\nExample:\n\n---\nassert(SysTime(DateTime(2010, 7, 4, 7, 6, 12)).toSimpleString() ==\n       \"2010-Jul-04 07:06:12\");\n\nassert(SysTime(DateTime(1998, 12, 25, 2, 15, 0),\n               msecs(24)).toSimpleString() ==\n       \"1998-Dec-25 02:15:00.024\");\n\nassert(SysTime(DateTime(0, 1, 5, 23, 9, 59)).toSimpleString() ==\n       \"0000-Jan-05 23:09:59\");\n\nassert(SysTime(DateTime(-4, 1, 5, 0, 0, 2),\n               hnsecs(520_920)).toSimpleString() ==\n        \"-0004-Jan-05 00:00:02.052092\");\n\n\n---\n",
						"endline": 8023
					},
					{
						"kind": "function",
						"line": 8106,
						"deco": "xFNbNfZAya",
						"endchar": 5,
						"char": 12,
						"name": "toString",
						"comment": "        Converts this $(LREF SysTime) to a string.\n",
						"endline": 8109
					},
					{
						"kind": "template",
						"line": 8152,
						"constraint": "isSomeString!S",
						"members": [
							{
								"kind": "function",
								"line": 8152,
								"endchar": 5,
								"char": 20,
								"type": "@safe SysTime(in S isoString, immutable TimeZone tz = null)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "S",
										"name": "isoString"
									},
									{
										"storageClass": [
											"immutable"
										],
										"default": "null",
										"type": "TimeZone",
										"name": "tz"
									}
								],
								"name": "fromISOString",
								"endline": 8209
							}
						],
						"char": 20,
						"parameters": [
							{
								"kind": "type",
								"name": "S"
							}
						],
						"comment": "        Creates a $(LREF SysTime) from a string with the format\n        YYYYMMDDTHHMMSS.FFFFFFFTZ (where F is fractional seconds is the time\n        zone). Whitespace is stripped from the given string.\n\n        The exact format is exactly as described in $(D toISOString) except that\n        trailing zeroes are permitted - including having fractional seconds with\n        all zeroes. However, a decimal point with nothing following it is\n        invalid.\n\n        If there is no time zone in the string, then $(LREF LocalTime) is used. If\n        the time zone is \"Z\", then $(D UTC) is used. Otherwise, a\n        $(LREF SimpleTimeZone) which corresponds to the given offset from UTC is\n        used. To get the returned $(LREF SysTime) to be a particular time\n        zone, pass in that time zone and the $(LREF SysTime) to be returned\n        will be converted to that time zone (though it will still be read in as\n        whatever time zone is in its string).\n\n        The accepted formats for time zone offsets\n        are +H, -H, +HH, -HH, +H:MM, -H:MM, +HH:MM, and -HH:MM.\n\n        Params:\n            isoString = A string formatted in the ISO format for dates and times.\n            tz        = The time zone to convert the given time to (no\n                        conversion occurs if null).\n\n        Throws:\n            $(LREF DateTimeException) if the given string is not in the ISO format\n            or if the resulting $(LREF SysTime) would not be valid.\nExample:\n\n---\nassert(SysTime.fromISOString(\"20100704T070612\") ==\n       SysTime(DateTime(2010, 7, 4, 7, 6, 12)));\nassert(SysTime.fromISOString(\"19981225T021500.007\") ==\n       SysTime(DateTime(1998, 12, 25, 2, 15, 0), msecs(7)));\nassert(SysTime.fromISOString(\"00000105T230959.00002\") ==\n       SysTime(DateTime(0, 1, 5, 23, 9, 59), usecs(20)));\nassert(SysTime.fromISOString(\"-00040105T000002\") ==\n       SysTime(DateTime(-4, 1, 5, 0, 0, 2)));\nassert(SysTime.fromISOString(\" 20100704T070612 \") ==\n       SysTime(DateTime(2010, 7, 4, 7, 6, 12)));\n\nassert(SysTime.fromISOString(\"20100704T070612Z\") ==\n       SysTime(DateTime(2010, 7, 4, 7, 6, 12), UTC()));\nassert(SysTime.fromISOString(\"20100704T070612-8:00\") ==\n       SysTime(DateTime(2010, 7, 4, 7, 6, 12),\n               new immutable SimpleTimeZone(dur!\"hours\"(-8))));\nassert(SysTime.fromISOString(\"20100704T070612+8:00\") ==\n       SysTime(DateTime(2010, 7, 4, 7, 6, 12),\n               new immutable SimpleTimeZone(dur!\"hours\"(8))));\n\n\n---\n",
						"name": "fromISOString"
					},
					{
						"kind": "template",
						"line": 8373,
						"constraint": "isSomeString!S",
						"members": [
							{
								"kind": "function",
								"line": 8373,
								"endchar": 5,
								"char": 20,
								"type": "@safe SysTime(in S isoExtString, immutable TimeZone tz = null)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "S",
										"name": "isoExtString"
									},
									{
										"storageClass": [
											"immutable"
										],
										"default": "null",
										"type": "TimeZone",
										"name": "tz"
									}
								],
								"name": "fromISOExtString",
								"endline": 8432
							}
						],
						"char": 20,
						"parameters": [
							{
								"kind": "type",
								"name": "S"
							}
						],
						"comment": "        Creates a $(LREF SysTime) from a string with the format\n        YYYY-MM-DDTHH:MM:SS.FFFFFFFTZ (where F is fractional seconds is the\n        time zone). Whitespace is stripped from the given string.\n\n        The exact format is exactly as described in $(D toISOExtString)\n        except that trailing zeroes are permitted - including having fractional\n        seconds with all zeroes. However, a decimal point with nothing following\n        it is invalid.\n\n        If there is no time zone in the string, then $(LREF LocalTime) is used. If\n        the time zone is \"Z\", then $(D UTC) is used. Otherwise, a\n        $(LREF SimpleTimeZone) which corresponds to the given offset from UTC is\n        used. To get the returned $(LREF SysTime) to be a particular time\n        zone, pass in that time zone and the $(LREF SysTime) to be returned\n        will be converted to that time zone (though it will still be read in as\n        whatever time zone is in its string).\n\n        The accepted formats for time zone offsets\n        are +H, -H, +HH, -HH, +H:MM, -H:MM, +HH:MM, and -HH:MM.\n\n        Params:\n            isoExtString = A string formatted in the ISO Extended format for dates\n                           and times.\n            tz           = The time zone to convert the given time to (no\n                           conversion occurs if null).\n\n        Throws:\n            $(LREF DateTimeException) if the given string is not in the ISO format\n            or if the resulting $(LREF SysTime) would not be valid.\nExample:\n\n---\nassert(SysTime.fromISOExtString(\"2010-07-04T07:06:12\") ==\n       SysTime(DateTime(2010, 7, 4, 7, 6, 12)));\nassert(SysTime.fromISOExtString(\"1998-12-25T02:15:00.007\") ==\n       SysTime(DateTime(1998, 12, 25, 2, 15, 0), msecs(7)));\nassert(SysTime.fromISOExtString(\"0000-01-05T23:09:59.00002\") ==\n       SysTime(DateTime(0, 1, 5, 23, 9, 59), usecs(20)));\nassert(SysTime.fromISOExtString(\"-0004-01-05T00:00:02\") ==\n       SysTime(DateTime(-4, 1, 5, 0, 0, 2)));\nassert(SysTime.fromISOExtString(\" 2010-07-04T07:06:12 \") ==\n       SysTime(DateTime(2010, 7, 4, 7, 6, 12)));\n\nassert(SysTime.fromISOExtString(\"2010-07-04T07:06:12Z\") ==\n       SysTime(DateTime(2010, 7, 4, 7, 6, 12), UTC()));\nassert(SysTime.fromISOExtString(\"2010-07-04T07:06:12-8:00\") ==\n       SysTime(DateTime(2010, 7, 4, 7, 6, 12),\n               new immutable SimpleTimeZone(dur!\"hours\"(-8))));\nassert(SysTime.fromISOExtString(\"2010-07-04T07:06:12+8:00\") ==\n       SysTime(DateTime(2010, 7, 4, 7, 6, 12),\n               new immutable SimpleTimeZone(dur!\"hours\"(8))));\n\n\n---\n",
						"name": "fromISOExtString"
					},
					{
						"kind": "template",
						"line": 8599,
						"constraint": "isSomeString!S",
						"members": [
							{
								"kind": "function",
								"line": 8599,
								"endchar": 5,
								"char": 20,
								"type": "@safe SysTime(in S simpleString, immutable TimeZone tz = null)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "S",
										"name": "simpleString"
									},
									{
										"storageClass": [
											"immutable"
										],
										"default": "null",
										"type": "TimeZone",
										"name": "tz"
									}
								],
								"name": "fromSimpleString",
								"endline": 8658
							}
						],
						"char": 20,
						"parameters": [
							{
								"kind": "type",
								"name": "S"
							}
						],
						"comment": "        Creates a $(LREF SysTime) from a string with the format\n        YYYY-MM-DD HH:MM:SS.FFFFFFFTZ (where F is fractional seconds is the\n        time zone). Whitespace is stripped from the given string.\n\n        The exact format is exactly as described in $(D toSimpleString) except\n        that trailing zeroes are permitted - including having fractional seconds\n        with all zeroes. However, a decimal point with nothing following it is\n        invalid.\n\n        If there is no time zone in the string, then $(LREF LocalTime) is used. If\n        the time zone is \"Z\", then $(D UTC) is used. Otherwise, a\n        $(LREF SimpleTimeZone) which corresponds to the given offset from UTC is\n        used. To get the returned $(LREF SysTime) to be a particular time\n        zone, pass in that time zone and the $(LREF SysTime) to be returned\n        will be converted to that time zone (though it will still be read in as\n        whatever time zone is in its string).\n\n        The accepted formats for time zone offsets\n        are +H, -H, +HH, -HH, +H:MM, -H:MM, +HH:MM, and -HH:MM.\n\n\n        Params:\n            simpleString = A string formatted in the way that\n                           $(D toSimpleString) formats dates and times.\n            tz           = The time zone to convert the given time to (no\n                           conversion occurs if null).\n\n        Throws:\n            $(LREF DateTimeException) if the given string is not in the ISO format\n            or if the resulting $(LREF SysTime) would not be valid.\nExample:\n\n---\nassert(SysTime.fromSimpleString(\"2010-Jul-04 07:06:12\") ==\n       SysTime(DateTime(2010, 7, 4, 7, 6, 12)));\nassert(SysTime.fromSimpleString(\"1998-Dec-25 02:15:00.007\") ==\n       SysTime(DateTime(1998, 12, 25, 2, 15, 0), msecs(7)));\nassert(SysTime.fromSimpleString(\"0000-Jan-05 23:09:59.00002\") ==\n       SysTime(DateTime(0, 1, 5, 23, 9, 59), usecs(20)));\nassert(SysTime.fromSimpleString(\"-0004-Jan-05 00:00:02\") ==\n       SysTime(DateTime(-4, 1, 5, 0, 0, 2)));\nassert(SysTime.fromSimpleString(\" 2010-Jul-04 07:06:12 \") ==\n       SysTime(DateTime(2010, 7, 4, 7, 6, 12)));\n\nassert(SysTime.fromSimpleString(\"2010-Jul-04 07:06:12Z\") ==\n       SysTime(DateTime(2010, 7, 4, 7, 6, 12), UTC()));\nassert(SysTime.fromSimpleString(\"2010-Jul-04 07:06:12-8:00\") ==\n       SysTime(DateTime(2010, 7, 4, 7, 6, 12),\n               new immutable SimpleTimeZone(dur!\"hours\"(-8))));\nassert(SysTime.fromSimpleString(\"2010-Jul-04 07:06:12+8:00\") ==\n       SysTime(DateTime(2010, 7, 4, 7, 6, 12),\n               new immutable SimpleTimeZone(dur!\"hours\"(8))));\n\n\n---\n",
						"name": "fromSimpleString"
					},
					{
						"kind": "function",
						"line": 8799,
						"storageClass": [
							"static"
						],
						"deco": "FNaNbNdNfZS3std8datetime7SysTime",
						"endchar": 5,
						"char": 30,
						"name": "min",
						"comment": "        Returns the $(LREF SysTime) farthest in the past which is representable\n        by $(LREF SysTime).\n\n        The $(LREF SysTime) which is returned is in UTC.\n",
						"endline": 8802
					},
					{
						"kind": "function",
						"line": 8817,
						"storageClass": [
							"static"
						],
						"deco": "FNaNbNdNfZS3std8datetime7SysTime",
						"endchar": 5,
						"char": 30,
						"name": "max",
						"comment": "        Returns the $(LREF SysTime) farthest in the future which is representable\n        by $(LREF SysTime).\n\n        The $(LREF SysTime) which is returned is in UTC.\n",
						"endline": 8820
					}
				],
				"char": 1,
				"name": "SysTime",
				"comment": "    $(D SysTime) is the type used to get the current time from the\n    system or doing anything that involves time zones. Unlike\n    $(LREF DateTime), the time zone is an integral part of $(D SysTime) (though for\n    local time applications, time zones can be ignored and\n    it will work, since it defaults to using the local time zone). It holds its\n    internal time in std time (hnsecs since midnight, January 1st, 1 A.D. UTC),\n    so it interfaces well with the system time. However, that means that, unlike\n    $(LREF DateTime), it is not optimized for calendar-based operations, and\n    getting individual units from it such as years or days is going to involve\n    conversions and be less efficient.\n\n    For calendar-based operations that don't\n    care about time zones, then $(LREF DateTime) would be the type to\n    use. For system time, use $(D SysTime).\n\n    $(LREF2 .Clock.currTime, Clock.currTime) will return the current time as a $(D SysTime).\n    To convert a $(D SysTime) to a $(LREF Date) or $(LREF DateTime), simply cast\n    it. To convert a $(LREF Date) or $(LREF DateTime) to a\n    $(D SysTime), use $(D SysTime)'s constructor, and pass in the\n    intended time zone with it (or don't pass in a $(LREF2 .TimeZone, TimeZone), and the local\n    time zone will be used). Be aware, however, that converting from a\n    $(LREF DateTime) to a $(D SysTime) will not necessarily be 100% accurate due to\n    DST (one hour of the year doesn't exist and another occurs twice).\n    To not risk any conversion errors, keep times as\n    $(D SysTime)s. Aside from DST though, there shouldn't be any conversion\n    problems.\n\n    For using time zones other than local time or UTC, use\n    $(LREF PosixTimeZone) on Posix systems (or on Windows, if providing the TZ\n    Database files), and use $(LREF WindowsTimeZone) on Windows systems.\n    The time in $(D SysTime) is kept internally in hnsecs from midnight,\n    January 1st, 1 A.D. UTC. Conversion error cannot happen when changing\n    the time zone of a $(D SysTime). $(LREF LocalTime) is the $(LREF2 .TimeZone, TimeZone) class\n    which represents the local time, and $(D UTC) is the $(LREF2 .TimeZone, TimeZone) class\n    which represents UTC. $(D SysTime) uses $(LREF LocalTime) if no $(LREF2 .TimeZone, TimeZone)\n    is provided. For more details on time zones, see the documentation for\n    $(LREF2 .TimeZone, TimeZone), $(LREF PosixTimeZone), and $(LREF WindowsTimeZone).\n\n    $(D SysTime)'s range is from approximately 29,000 B.C. to approximately\n    29,000 A.D.\n"
			},
			{
				"kind": "struct",
				"line": 8881,
				"members": [
					{
						"kind": "constructor",
						"line": 8896,
						"deco": "FNaNcNfiiiZS3std8datetime4Date",
						"endchar": 5,
						"char": 5,
						"parameters": [
							{
								"deco": "i",
								"name": "year"
							},
							{
								"deco": "i",
								"name": "month"
							},
							{
								"deco": "i",
								"name": "day"
							}
						],
						"name": "this",
						"comment": "        Throws:\n            $(LREF DateTimeException) if the resulting $(LREF Date) would not be valid.\n\n        Params:\n            year  = Year of the Gregorian Calendar. Positive values are A.D.\n                    Non-positive values are B.C. with year 0 being the year\n                    prior to 1 A.D.\n            month = Month of the year.\n            day   = Day of the month.\n",
						"originalType": "pure ref @safe (int year, int month, int day)",
						"endline": 8904
					},
					{
						"kind": "constructor",
						"line": 8971,
						"deco": "FNaNbNcNfiZS3std8datetime4Date",
						"endchar": 5,
						"char": 5,
						"parameters": [
							{
								"deco": "i",
								"name": "day"
							}
						],
						"name": "this",
						"comment": "        Params:\n            day = The Xth day of the Gregorian Calendar that the constructed\n                  $(LREF Date) will be for.\n",
						"originalType": "pure nothrow ref @safe (int day)",
						"endline": 9092
					},
					{
						"kind": "function",
						"line": 9114,
						"deco": "xFNaNbNfxS3std8datetime4DateZi",
						"endchar": 5,
						"char": 9,
						"parameters": [
							{
								"deco": "xS3std8datetime4Date",
								"name": "rhs"
							}
						],
						"name": "opCmp",
						"comment": "        Compares this $(LREF Date) with the given $(LREF Date).\n\n        Returns:\n            $(BOOKTABLE,\n            $(TR $(TD this &lt; rhs) $(TD &lt; 0))\n            $(TR $(TD this == rhs) $(TD 0))\n            $(TR $(TD this &gt; rhs) $(TD &gt; 0))\n            )\n",
						"originalType": "const pure nothrow @safe int(in Date rhs)",
						"endline": 9132
					},
					{
						"kind": "function",
						"line": 9222,
						"deco": "xFNaNbNdNfZs",
						"endchar": 5,
						"char": 21,
						"name": "year",
						"comment": "        Year of the Gregorian Calendar. Positive numbers are A.D. Non-positive\n        are B.C.\nExample:\n\n---\nassert(Date(1999, 7, 6).year == 1999);\nassert(Date(2010, 10, 4).year == 2010);\nassert(Date(-7, 4, 5).year == -7);\n\n\n---\n",
						"endline": 9225
					},
					{
						"kind": "function",
						"line": 9258,
						"deco": "FNaNdNfiZv",
						"endchar": 5,
						"char": 20,
						"parameters": [
							{
								"deco": "i",
								"name": "year"
							}
						],
						"name": "year",
						"comment": "        Year of the Gregorian Calendar. Positive numbers are A.D. Non-positive\n        are B.C.\n\n        Params:\n            year = The year to set this Date's year to.\n\n        Throws:\n            $(LREF DateTimeException) if the new year is not a leap year and the\n            resulting date would be on February 29th.\nExample:\n\n---\nassert(Date(1999, 7, 6).year == 1999);\nassert(Date(2010, 10, 4).year == 2010);\nassert(Date(-7, 4, 5).year == -7);\n\n\n---\n",
						"endline": 9262
					},
					{
						"kind": "function",
						"line": 9304,
						"deco": "xFNaNdNfZt",
						"endchar": 5,
						"char": 22,
						"name": "yearBC",
						"comment": "        Year B.C. of the Gregorian Calendar counting year 0 as 1 B.C.\n\n        Throws:\n            $(LREF DateTimeException) if $(D isAD) is true.\nExample:\n\n---\nassert(Date(0, 1, 1).yearBC == 1);\nassert(Date(-1, 1, 1).yearBC == 2);\nassert(Date(-100, 1, 1).yearBC == 101);\n\n\n---\n",
						"endline": 9311
					},
					{
						"kind": "function",
						"line": 9343,
						"deco": "FNaNdNfiZv",
						"endchar": 5,
						"char": 20,
						"parameters": [
							{
								"deco": "i",
								"name": "year"
							}
						],
						"name": "yearBC",
						"comment": "        Year B.C. of the Gregorian Calendar counting year 0 as 1 B.C.\n\n        Params:\n            year = The year B.C. to set this $(LREF Date)'s year to.\n\n        Throws:\n            $(LREF DateTimeException) if a non-positive value is given.\nExample:\n\n---\nauto date = Date(2010, 1, 1);\ndate.yearBC = 1;\nassert(date == Date(0, 1, 1));\n\ndate.yearBC = 10;\nassert(date == Date(-9, 1, 1));\n\n\n---\n",
						"endline": 9349
					},
					{
						"kind": "function",
						"line": 9378,
						"deco": "xFNaNbNdNfZE3std8datetime5Month",
						"endchar": 5,
						"char": 21,
						"name": "month",
						"comment": "        Month of a Gregorian Year.\nExample:\n\n---\nassert(Date(1999, 7, 6).month == 7);\nassert(Date(2010, 10, 4).month == 10);\nassert(Date(-7, 4, 5).month == 4);\n\n\n---\n",
						"endline": 9381
					},
					{
						"kind": "function",
						"line": 9413,
						"deco": "FNaNdNfE3std8datetime5MonthZv",
						"endchar": 5,
						"char": 20,
						"parameters": [
							{
								"deco": "E3std8datetime5Month",
								"name": "month"
							}
						],
						"name": "month",
						"comment": "        Month of a Gregorian Year.\n\n        Params:\n            month = The month to set this $(LREF Date)'s month to.\n\n        Throws:\n            $(LREF DateTimeException) if the given month is not a valid month or if\n            the current day would not be valid in the given month.\n",
						"endline": 9418
					},
					{
						"kind": "function",
						"line": 9447,
						"deco": "xFNaNbNdNfZh",
						"endchar": 5,
						"char": 21,
						"name": "day",
						"comment": "        Day of a Gregorian Month.\nExample:\n\n---\nassert(Date(1999, 7, 6).day == 6);\nassert(Date(2010, 10, 4).day == 4);\nassert(Date(-7, 4, 5).day == 5);\n\n\n---\n",
						"endline": 9450
					},
					{
						"kind": "function",
						"line": 9493,
						"deco": "FNaNdNfiZv",
						"endchar": 5,
						"char": 20,
						"parameters": [
							{
								"deco": "i",
								"name": "day"
							}
						],
						"name": "day",
						"comment": "        Day of a Gregorian Month.\n\n        Params:\n            day = The day of the month to set this $(LREF Date)'s day to.\n\n        Throws:\n            $(LREF DateTimeException) if the given day is not a valid day of the\n            current month.\n",
						"endline": 9497
					},
					{
						"kind": "template",
						"line": 9604,
						"constraint": "units == \"years\"",
						"members": [
							{
								"kind": "function",
								"line": 9604,
								"endchar": 5,
								"char": 14,
								"type": "pure nothrow ref @safe Date(long value, AllowDayOverflow allowOverflow = AllowDayOverflow.yes)",
								"parameters": [
									{
										"deco": "l",
										"name": "value"
									},
									{
										"default": "AllowDayOverflow.yes",
										"type": "AllowDayOverflow",
										"name": "allowOverflow"
									}
								],
								"name": "add",
								"endline": 9623
							}
						],
						"char": 14,
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "units"
							}
						],
						"comment": "        Adds the given number of years or months to this $(LREF Date). A negative\n        number will subtract.\n\n        Note that if day overflow is allowed, and the date with the adjusted\n        year/month overflows the number of days in the new month, then the month\n        will be incremented by one, and the day set to the number of days\n        overflowed. (e.g. if the day were 31 and the new month were June, then\n        the month would be incremented to July, and the new day would be 1). If\n        day overflow is not allowed, then the day will be set to the last valid\n        day in the month (e.g. June 31st would become June 30th).\n\n        Params:\n            units         = The type of units to add (\"years\" or \"months\").\n            value         = The number of months or years to add to this\n                            $(LREF Date).\n            allowOverflow = Whether the day should be allowed to overflow,\n                            causing the month to increment.\nExample:\n\n---\nauto d1 = Date(2010, 1, 1);\nd1.add!\"months\"(11);\nassert(d1 == Date(2010, 12, 1));\n\nauto d2 = Date(2010, 1, 1);\nd2.add!\"months\"(-11);\nassert(d2 == Date(2009, 2, 1));\n\nauto d3 = Date(2000, 2, 29);\nd3.add!\"years\"(1);\nassert(d3 == Date(2001, 3, 1));\n\nauto d4 = Date(2000, 2, 29);\nd4.add!\"years\"(1, AllowDayOverflow.no);\nassert(d4 == Date(2001, 2, 28));\n\n\n---\n",
						"name": "add"
					},
					{
						"kind": "template",
						"line": 10386,
						"constraint": "units == \"years\"",
						"members": [
							{
								"kind": "function",
								"line": 10386,
								"endchar": 5,
								"char": 14,
								"type": "pure nothrow ref @safe Date(long value, AllowDayOverflow allowOverflow = AllowDayOverflow.yes)",
								"parameters": [
									{
										"deco": "l",
										"name": "value"
									},
									{
										"default": "AllowDayOverflow.yes",
										"type": "AllowDayOverflow",
										"name": "allowOverflow"
									}
								],
								"name": "roll",
								"endline": 10390
							}
						],
						"char": 14,
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "units"
							}
						],
						"comment": "        Adds the given number of years or months to this $(LREF Date). A negative\n        number will subtract.\n\n        The difference between rolling and adding is that rolling does not\n        affect larger units. Rolling a $(LREF Date) 12 months gets\n        the exact same $(LREF Date). However, the days can still be affected due to\n        the differing number of days in each month.\n\n        Because there are no units larger than years, there is no difference\n        between adding and rolling years.\n\n        Params:\n            units         = The type of units to add (\"years\" or \"months\").\n            value         = The number of months or years to add to this\n                            $(LREF Date).\n            allowOverflow = Whether the day should be allowed to overflow,\n                            causing the month to increment.\nExample:\n\n---\nauto d1 = Date(2010, 1, 1);\nd1.roll!\"months\"(1);\nassert(d1 == Date(2010, 2, 1));\n\nauto d2 = Date(2010, 1, 1);\nd2.roll!\"months\"(-1);\nassert(d2 == Date(2010, 12, 1));\n\nauto d3 = Date(1999, 1, 29);\nd3.roll!\"months\"(1);\nassert(d3 == Date(1999, 3, 1));\n\nauto d4 = Date(1999, 1, 29);\nd4.roll!\"months\"(1, AllowDayOverflow.no);\nassert(d4 == Date(1999, 2, 28));\n\nauto d5 = Date(2000, 2, 29);\nd5.roll!\"years\"(1);\nassert(d5 == Date(2001, 3, 1));\n\nauto d6 = Date(2000, 2, 29);\nd6.roll!\"years\"(1, AllowDayOverflow.no);\nassert(d6 == Date(2001, 2, 28));\n\n\n---\n",
						"name": "roll"
					},
					{
						"kind": "template",
						"line": 11024,
						"constraint": "units == \"days\"",
						"members": [
							{
								"kind": "function",
								"line": 11024,
								"endchar": 5,
								"char": 14,
								"type": "pure nothrow ref @safe Date(long days)",
								"parameters": [
									{
										"deco": "l",
										"name": "days"
									}
								],
								"name": "roll",
								"endline": 11041
							}
						],
						"char": 14,
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "units"
							}
						],
						"comment": "        Adds the given number of units to this $(LREF Date). A negative number will\n        subtract.\n\n        The difference between rolling and adding is that rolling does not\n        affect larger units. For instance, rolling a $(LREF Date) one\n        year's worth of days gets the exact same $(LREF Date).\n\n        The only accepted units are $(D \"days\").\n\n        Params:\n            units = The units to add. Must be $(D \"days\").\n            days  = The number of days to add to this $(LREF Date).\nExample:\n\n---\nauto d = Date(2010, 1, 1);\nd.roll!\"days\"(1);\nassert(d == Date(2010, 1, 2));\nd.roll!\"days\"(365);\nassert(d == Date(2010, 1, 26));\nd.roll!\"days\"(-32);\nassert(d == Date(2010, 1, 25));\n\n\n---\n",
						"name": "roll"
					},
					{
						"kind": "template",
						"line": 11261,
						"constraint": "(op == \"+\" || op == \"-\") && (is(Unqual!D == Duration) || is(Unqual!D == TickDuration))",
						"members": [
							{
								"kind": "function",
								"line": 11261,
								"endchar": 5,
								"char": 10,
								"type": "const pure nothrow @safe Date(in D duration)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "D",
										"name": "duration"
									}
								],
								"name": "opBinary",
								"endline": 11276
							}
						],
						"char": 10,
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "op"
							},
							{
								"kind": "type",
								"name": "D"
							}
						],
						"comment": "        Gives the result of adding or subtracting a duration from this\n        $(LREF Date).\n\n        The legal types of arithmetic for Date using this operator are\n\n        $(BOOKTABLE,\n        $(TR $(TD Date) $(TD +) $(TD duration) $(TD -->) $(TD Date))\n        $(TR $(TD Date) $(TD -) $(TD duration) $(TD -->) $(TD Date))\n        )\n\n        Params:\n            duration = The duration to add to or subtract from this $(LREF Date).\n",
						"name": "opBinary"
					},
					{
						"kind": "template",
						"line": 11361,
						"constraint": "(op == \"+\" || op == \"-\") && (is(Unqual!D == Duration) || is(Unqual!D == TickDuration))",
						"members": [
							{
								"kind": "function",
								"line": 11361,
								"endchar": 5,
								"char": 14,
								"type": "pure nothrow ref @safe Date(in D duration)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "D",
										"name": "duration"
									}
								],
								"name": "opOpAssign",
								"endline": 11374
							}
						],
						"char": 14,
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "op"
							},
							{
								"kind": "type",
								"name": "D"
							}
						],
						"comment": "        Gives the result of adding or subtracting a duration from this\n        $(LREF Date), as well as assigning the result to this $(LREF Date).\n\n        The legal types of arithmetic for $(LREF Date) using this operator are\n\n        $(BOOKTABLE,\n        $(TR $(TD Date) $(TD +) $(TD duration) $(TD -->) $(TD Date))\n        $(TR $(TD Date) $(TD -) $(TD duration) $(TD -->) $(TD Date))\n        )\n\n        Params:\n            duration = The duration to add to or subtract from this $(LREF Date).\n",
						"name": "opOpAssign"
					},
					{
						"kind": "template",
						"line": 11443,
						"constraint": "op == \"-\"",
						"members": [
							{
								"kind": "function",
								"line": 11443,
								"endchar": 5,
								"char": 14,
								"type": "const pure nothrow @safe Duration(in Date rhs)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "Date",
										"name": "rhs"
									}
								],
								"name": "opBinary",
								"endline": 11447
							}
						],
						"char": 14,
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "op"
							}
						],
						"comment": "        Gives the difference between two $(LREF Date)s.\n\n        The legal types of arithmetic for Date using this operator are\n\n        $(BOOKTABLE,\n        $(TR $(TD Date) $(TD -) $(TD Date) $(TD -->) $(TD duration))\n        )\n",
						"name": "opBinary"
					},
					{
						"kind": "function",
						"line": 11497,
						"deco": "xFNaNbNfxS3std8datetime4DateZi",
						"endchar": 5,
						"char": 9,
						"parameters": [
							{
								"deco": "xS3std8datetime4Date",
								"name": "rhs"
							}
						],
						"name": "diffMonths",
						"comment": "        Returns the difference between the two $(LREF Date)s in months.\n\n        To get the difference in years, subtract the year property\n        of two $(LREF SysTime)s. To get the difference in days or weeks,\n        subtract the $(LREF SysTime)s themselves and use the $(CXREF time, Duration)\n        that results. Because converting between months and smaller\n        units requires a specific date (which $(CXREF time, Duration)s don't have),\n        getting the difference in months requires some math using both\n        the year and month properties, so this is a convenience function for\n        getting the difference in months.\n\n        Note that the number of days in the months or how far into the month\n        either $(LREF Date) is is irrelevant. It is the difference in the month\n        property combined with the difference in years * 12. So, for instance,\n        December 31st and January 1st are one month apart just as December 1st\n        and January 31st are one month apart.\n\n        Params:\n            rhs = The $(LREF Date) to subtract from this one.\nExample:\n\n---\nassert(Date(1999, 2, 1).diffMonths(Date(1999, 1, 31)) == 1);\nassert(Date(1999, 1, 31).diffMonths(Date(1999, 2, 1)) == -1);\nassert(Date(1999, 3, 1).diffMonths(Date(1999, 1, 1)) == 2);\nassert(Date(1999, 1, 1).diffMonths(Date(1999, 3, 31)) == -2);\n\n\n---\n",
						"originalType": "const pure nothrow @safe int(in Date rhs)",
						"endline": 11503
					},
					{
						"kind": "function",
						"line": 11735,
						"deco": "xFNaNbNdNfZb",
						"endchar": 5,
						"char": 20,
						"name": "isLeapYear",
						"comment": "        Whether this $(LREF Date) is in a leap year.\n",
						"endline": 11738
					},
					{
						"kind": "function",
						"line": 11754,
						"deco": "xFNaNbNdNfZE3std8datetime9DayOfWeek",
						"endchar": 5,
						"char": 25,
						"name": "dayOfWeek",
						"comment": "        Day of the week this $(LREF Date) is on.\n",
						"endline": 11757
					},
					{
						"kind": "function",
						"line": 11773,
						"deco": "xFNaNbNdNfZt",
						"endchar": 5,
						"char": 22,
						"name": "dayOfYear",
						"comment": "        Day of the year this $(LREF Date) is on.\nExample:\n\n---\nassert(Date(1999, 1, 1).dayOfYear == 1);\nassert(Date(1999, 12, 31).dayOfYear == 365);\nassert(Date(2000, 12, 31).dayOfYear == 366);\n\n\n---\n",
						"endline": 11783
					},
					{
						"kind": "function",
						"line": 11834,
						"deco": "FNaNdNfiZv",
						"endchar": 5,
						"char": 20,
						"parameters": [
							{
								"deco": "i",
								"name": "day"
							}
						],
						"name": "dayOfYear",
						"comment": "        Day of the year.\n\n        Params:\n            day = The day of the year to set which day of the year this\n                  $(LREF Date) is on.\n\n        Throws:\n            $(LREF DateTimeException) if the given day is an invalid day of the\n            year.\n",
						"endline": 11851
					},
					{
						"kind": "function",
						"line": 11884,
						"deco": "xFNaNbNdNfZi",
						"endchar": 5,
						"char": 19,
						"name": "dayOfGregorianCal",
						"comment": "        The Xth day of the Gregorian Calendar that this $(LREF Date) is on.\nExample:\n\n---\nassert(Date(1, 1, 1).dayOfGregorianCal == 1);\nassert(Date(1, 12, 31).dayOfGregorianCal == 365);\nassert(Date(2, 1, 1).dayOfGregorianCal == 366);\n\nassert(Date(0, 12, 31).dayOfGregorianCal == 0);\nassert(Date(0, 1, 1).dayOfGregorianCal == -365);\nassert(Date(-1, 12, 31).dayOfGregorianCal == -366);\n\nassert(Date(2000, 1, 1).dayOfGregorianCal == 730_120);\nassert(Date(2010, 12, 31).dayOfGregorianCal == 734_137);\n\n\n---\n",
						"endline": 11935
					},
					{
						"kind": "function",
						"line": 11973,
						"deco": "FNaNbNdNfiZv",
						"endchar": 5,
						"char": 20,
						"parameters": [
							{
								"deco": "i",
								"name": "day"
							}
						],
						"name": "dayOfGregorianCal",
						"comment": "        The Xth day of the Gregorian Calendar that this $(LREF Date) is on.\n\n        Params:\n            day = The day of the Gregorian Calendar to set this $(LREF Date) to.\nExample:\n\n---\nauto date = Date.init;\ndate.dayOfGregorianCal = 1;\nassert(date == Date(1, 1, 1));\n\ndate.dayOfGregorianCal = 365;\nassert(date == Date(1, 12, 31));\n\ndate.dayOfGregorianCal = 366;\nassert(date == Date(2, 1, 1));\n\ndate.dayOfGregorianCal = 0;\nassert(date == Date(0, 12, 31));\n\ndate.dayOfGregorianCal = -365;\nassert(date == Date(-0, 1, 1));\n\ndate.dayOfGregorianCal = -366;\nassert(date == Date(-1, 12, 31));\n\ndate.dayOfGregorianCal = 730_120;\nassert(date == Date(2000, 1, 1));\n\ndate.dayOfGregorianCal = 734_137;\nassert(date == Date(2010, 12, 31));\n\n\n---\n",
						"endline": 11976
					},
					{
						"kind": "function",
						"line": 12024,
						"deco": "xFNaNbNdNfZh",
						"endchar": 5,
						"char": 21,
						"name": "isoWeek",
						"comment": "        The ISO 8601 week of the year that this $(LREF Date) is in.\n\n        See_Also:\n            $(WEB en.wikipedia.org/wiki/ISO_week_date, ISO Week Date)\n",
						"endline": 12056
					},
					{
						"kind": "function",
						"line": 12123,
						"deco": "xFNaNbNdNfZS3std8datetime4Date",
						"endchar": 5,
						"char": 20,
						"name": "endOfMonth",
						"comment": "        $(LREF Date) for the last day in the month that this $(LREF Date) is in.\nExample:\n\n---\nassert(Date(1999, 1, 6).endOfMonth == Date(1999, 1, 31));\nassert(Date(1999, 2, 7).endOfMonth == Date(1999, 2, 28));\nassert(Date(2000, 2, 7).endOfMonth == Date(2000, 2, 29));\nassert(Date(2000, 6, 4).endOfMonth == Date(2000, 6, 30));\n\n\n---\n",
						"endline": 12129
					},
					{
						"kind": "function",
						"line": 12182,
						"deco": "xFNaNbNdNfZh",
						"endchar": 5,
						"char": 21,
						"name": "daysInMonth",
						"comment": "        The last day in the month that this $(LREF Date) is in.\nExample:\n\n---\nassert(Date(1999, 1, 6).daysInMonth == 31);\nassert(Date(1999, 2, 7).daysInMonth == 28);\nassert(Date(2000, 2, 7).daysInMonth == 29);\nassert(Date(2000, 6, 4).daysInMonth == 30);\n\n\n---\n",
						"endline": 12185
					},
					{
						"kind": "function",
						"line": 12238,
						"deco": "xFNaNbNdNfZb",
						"endchar": 5,
						"char": 20,
						"name": "isAD",
						"comment": "        Whether the current year is a date in A.D.\nExample:\n\n---\nassert(Date(1, 1, 1).isAD);\nassert(Date(2010, 12, 31).isAD);\nassert(!Date(0, 12, 31).isAD);\nassert(!Date(-2010, 1, 1).isAD);\n\n\n---\n",
						"endline": 12241
					},
					{
						"kind": "function",
						"line": 12271,
						"deco": "xFNaNbNdNfZl",
						"endchar": 5,
						"char": 20,
						"name": "julianDay",
						"comment": "        The $(WEB en.wikipedia.org/wiki/Julian_day, Julian day) for this $(LREF Date) at noon (since the Julian day changes\n        at noon).\n",
						"endline": 12274
					},
					{
						"kind": "function",
						"line": 12298,
						"deco": "xFNaNbNdNfZl",
						"endchar": 5,
						"char": 20,
						"name": "modJulianDay",
						"comment": "        The modified $(WEB en.wikipedia.org/wiki/Julian_day, Julian day) for any time on this date (since, the modified\n        Julian day changes at midnight).\n",
						"endline": 12301
					},
					{
						"kind": "function",
						"line": 12318,
						"deco": "xFNaNbNfZAya",
						"endchar": 5,
						"char": 12,
						"name": "toISOString",
						"comment": "        Converts this $(LREF Date) to a string with the format YYYYMMDD.\nExample:\n\n---\nassert(Date(2010, 7, 4).toISOString() == \"20100704\");\nassert(Date(1998, 12, 25).toISOString() == \"19981225\");\nassert(Date(0, 1, 5).toISOString() == \"00000105\");\nassert(Date(-4, 1, 5).toISOString() == \"-00040105\");\n\n\n---\n",
						"endline": 12337
					},
					{
						"kind": "function",
						"line": 12374,
						"deco": "xFNaNbNfZAya",
						"endchar": 5,
						"char": 12,
						"name": "toISOExtString",
						"comment": "        Converts this $(LREF Date) to a string with the format YYYY-MM-DD.\nExample:\n\n---\nassert(Date(2010, 7, 4).toISOExtString() == \"2010-07-04\");\nassert(Date(1998, 12, 25).toISOExtString() == \"1998-12-25\");\nassert(Date(0, 1, 5).toISOExtString() == \"0000-01-05\");\nassert(Date(-4, 1, 5).toISOExtString() == \"-0004-01-05\");\n\n\n---\n",
						"endline": 12393
					},
					{
						"kind": "function",
						"line": 12430,
						"deco": "xFNaNbNfZAya",
						"endchar": 5,
						"char": 12,
						"name": "toSimpleString",
						"comment": "        Converts this $(LREF Date) to a string with the format YYYY-Mon-DD.\nExample:\n\n---\nassert(Date(2010, 7, 4).toSimpleString() == \"2010-Jul-04\");\nassert(Date(1998, 12, 25).toSimpleString() == \"1998-Dec-25\");\nassert(Date(0, 1, 5).toSimpleString() == \"0000-Jan-05\");\nassert(Date(-4, 1, 5).toSimpleString() == \"-0004-Jan-05\");\n\n\n---\n",
						"endline": 12449
					},
					{
						"kind": "function",
						"line": 12487,
						"deco": "xFNaNbNfZAya",
						"endchar": 5,
						"char": 12,
						"name": "toString",
						"comment": "        Converts this $(LREF Date) to a string.\n",
						"endline": 12490
					},
					{
						"kind": "template",
						"line": 12514,
						"constraint": "isSomeString!S",
						"members": [
							{
								"kind": "function",
								"line": 12514,
								"endchar": 5,
								"char": 17,
								"type": "pure @safe Date(in S isoString)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "S",
										"name": "isoString"
									}
								],
								"name": "fromISOString",
								"endline": 12545
							}
						],
						"char": 17,
						"parameters": [
							{
								"kind": "type",
								"name": "S"
							}
						],
						"comment": "        Creates a $(LREF Date) from a string with the format YYYYMMDD. Whitespace\n        is stripped from the given string.\n\n        Params:\n            isoString = A string formatted in the ISO format for dates.\n\n        Throws:\n            $(LREF DateTimeException) if the given string is not in the ISO format\n            or if the resulting $(LREF Date) would not be valid.\nExample:\n\n---\nassert(Date.fromISOString(\"20100704\") == Date(2010, 7, 4));\nassert(Date.fromISOString(\"19981225\") == Date(1998, 12, 25));\nassert(Date.fromISOString(\"00000105\") == Date(0, 1, 5));\nassert(Date.fromISOString(\"-00040105\") == Date(-4, 1, 5));\nassert(Date.fromISOString(\" 20100704 \") == Date(2010, 7, 4));\n\n\n---\n",
						"name": "fromISOString"
					},
					{
						"kind": "template",
						"line": 12636,
						"constraint": "isSomeString!S",
						"members": [
							{
								"kind": "function",
								"line": 12636,
								"endchar": 5,
								"char": 17,
								"type": "pure @safe Date(in S isoExtString)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "S",
										"name": "isoExtString"
									}
								],
								"name": "fromISOExtString",
								"endline": 12672
							}
						],
						"char": 17,
						"parameters": [
							{
								"kind": "type",
								"name": "S"
							}
						],
						"comment": "        Creates a $(LREF Date) from a string with the format YYYY-MM-DD. Whitespace\n        is stripped from the given string.\n\n        Params:\n            isoExtString = A string formatted in the ISO Extended format for\n                           dates.\n\n        Throws:\n            $(LREF DateTimeException) if the given string is not in the ISO\n            Extended format or if the resulting $(LREF Date) would not be valid.\nExample:\n\n---\nassert(Date.fromISOExtString(\"2010-07-04\") == Date(2010, 7, 4));\nassert(Date.fromISOExtString(\"1998-12-25\") == Date(1998, 12, 25));\nassert(Date.fromISOExtString(\"0000-01-05\") == Date(0, 1, 5));\nassert(Date.fromISOExtString(\"-0004-01-05\") == Date(-4, 1, 5));\nassert(Date.fromISOExtString(\" 2010-07-04 \") == Date(2010, 7, 4));\n\n\n---\n",
						"name": "fromISOExtString"
					},
					{
						"kind": "template",
						"line": 12763,
						"constraint": "isSomeString!S",
						"members": [
							{
								"kind": "function",
								"line": 12763,
								"endchar": 5,
								"char": 17,
								"type": "pure @safe Date(in S simpleString)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "S",
										"name": "simpleString"
									}
								],
								"name": "fromSimpleString",
								"endline": 12796
							}
						],
						"char": 17,
						"parameters": [
							{
								"kind": "type",
								"name": "S"
							}
						],
						"comment": "        Creates a $(LREF Date) from a string with the format YYYY-Mon-DD.\n        Whitespace is stripped from the given string.\n\n        Params:\n            simpleString = A string formatted in the way that toSimpleString\n                           formats dates.\n\n        Throws:\n            $(LREF DateTimeException) if the given string is not in the correct\n            format or if the resulting $(LREF Date) would not be valid.\nExample:\n\n---\nassert(Date.fromSimpleString(\"2010-Jul-04\") == Date(2010, 7, 4));\nassert(Date.fromSimpleString(\"1998-Dec-25\") == Date(1998, 12, 25));\nassert(Date.fromSimpleString(\"0000-Jan-05\") == Date(0, 1, 5));\nassert(Date.fromSimpleString(\"-0004-Jan-05\") == Date(-4, 1, 5));\nassert(Date.fromSimpleString(\" 2010-Jul-04 \") == Date(2010, 7, 4));\n\n\n---\n",
						"name": "fromSimpleString"
					},
					{
						"kind": "function",
						"line": 12879,
						"storageClass": [
							"static"
						],
						"deco": "FNaNbNdNfZS3std8datetime4Date",
						"endchar": 5,
						"char": 27,
						"name": "min",
						"comment": "        Returns the $(LREF Date) farthest in the past which is representable by\n        $(LREF Date).\n",
						"endline": 12887
					},
					{
						"kind": "function",
						"line": 12900,
						"storageClass": [
							"static"
						],
						"deco": "FNaNbNdNfZS3std8datetime4Date",
						"endchar": 5,
						"char": 27,
						"name": "max",
						"comment": "        Returns the $(LREF Date) farthest in the future which is representable by\n        $(LREF Date).\n",
						"endline": 12908
					}
				],
				"char": 1,
				"name": "Date",
				"comment": "    Represents a date in the\n    $(WEB en.wikipedia.org/wiki/Proleptic_Gregorian_calendar, Proleptic Gregorian Calendar)\n    ranging from\n    32,768 B.C. to 32,767 A.D. Positive years are A.D. Non-positive years are\n    B.C.\n\n    Year, month, and day are kept separately internally so that $(D Date) is\n    optimized for calendar-based operations.\n\n    $(D Date) uses the Proleptic Gregorian Calendar, so it assumes the Gregorian\n    leap year calculations for its entire length. As per\n    $(WEB en.wikipedia.org/wiki/ISO_8601, ISO 8601), it treats 1 B.C. as\n    year 0, i.e. 1 B.C. is 0, 2 B.C. is -1, etc. Use $(LREF yearBC) to use B.C. as\n    a positive integer with 1 B.C. being the year prior to 1 A.D.\n\n    Year 0 is a leap year.\n"
			},
			{
				"kind": "struct",
				"line": 13137,
				"members": [
					{
						"kind": "constructor",
						"line": 13151,
						"deco": "FNaNcNfiiiZS3std8datetime9TimeOfDay",
						"endchar": 5,
						"char": 5,
						"parameters": [
							{
								"deco": "i",
								"name": "hour"
							},
							{
								"deco": "i",
								"name": "minute"
							},
							{
								"deco": "i",
								"default": "0",
								"name": "second"
							}
						],
						"name": "this",
						"comment": "        Params:\n            hour   = Hour of the day [0 - 24$(RPAREN).\n            minute = Minute of the hour [0 - 60$(RPAREN).\n            second = Second of the minute [0 - 60$(RPAREN).\n\n        Throws:\n            $(LREF DateTimeException) if the resulting $(LREF TimeOfDay) would be not\n            be valid.\n",
						"originalType": "pure ref @safe (int hour, int minute, int second = 0)",
						"endline": 13160
					},
					{
						"kind": "function",
						"line": 13203,
						"deco": "xFNaNbNfxS3std8datetime9TimeOfDayZi",
						"endchar": 5,
						"char": 9,
						"parameters": [
							{
								"deco": "xS3std8datetime9TimeOfDay",
								"name": "rhs"
							}
						],
						"name": "opCmp",
						"comment": "        Compares this $(LREF TimeOfDay) with the given $(LREF TimeOfDay).\n\n        Returns:\n            $(BOOKTABLE,\n            $(TR $(TD this &lt; rhs) $(TD &lt; 0))\n            $(TR $(TD this == rhs) $(TD 0))\n            $(TR $(TD this &gt; rhs) $(TD &gt; 0))\n            )\n",
						"originalType": "const pure nothrow @safe int(in TimeOfDay rhs)",
						"endline": 13221
					},
					{
						"kind": "function",
						"line": 13263,
						"deco": "xFNaNbNdNfZh",
						"endchar": 5,
						"char": 21,
						"name": "hour",
						"comment": "        Hours past midnight.\n",
						"endline": 13266
					},
					{
						"kind": "function",
						"line": 13290,
						"deco": "FNaNdNfiZv",
						"endchar": 5,
						"char": 20,
						"parameters": [
							{
								"deco": "i",
								"name": "hour"
							}
						],
						"name": "hour",
						"comment": "        Hours past midnight.\n\n        Params:\n            hour = The hour of the day to set this $(LREF TimeOfDay)'s hour to.\n\n        Throws:\n            $(LREF DateTimeException) if the given hour would result in an invalid\n            $(LREF TimeOfDay).\n",
						"endline": 13294
					},
					{
						"kind": "function",
						"line": 13314,
						"deco": "xFNaNbNdNfZh",
						"endchar": 5,
						"char": 21,
						"name": "minute",
						"comment": "        Minutes past the hour.\n",
						"endline": 13317
					},
					{
						"kind": "function",
						"line": 13341,
						"deco": "FNaNdNfiZv",
						"endchar": 5,
						"char": 20,
						"parameters": [
							{
								"deco": "i",
								"name": "minute"
							}
						],
						"name": "minute",
						"comment": "        Minutes past the hour.\n\n        Params:\n            minute = The minute to set this $(LREF TimeOfDay)'s minute to.\n\n        Throws:\n            $(LREF DateTimeException) if the given minute would result in an\n            invalid $(LREF TimeOfDay).\n",
						"endline": 13345
					},
					{
						"kind": "function",
						"line": 13365,
						"deco": "xFNaNbNdNfZh",
						"endchar": 5,
						"char": 21,
						"name": "second",
						"comment": "        Seconds past the minute.\n",
						"endline": 13368
					},
					{
						"kind": "function",
						"line": 13392,
						"deco": "FNaNdNfiZv",
						"endchar": 5,
						"char": 20,
						"parameters": [
							{
								"deco": "i",
								"name": "second"
							}
						],
						"name": "second",
						"comment": "        Seconds past the minute.\n\n        Params:\n            second = The second to set this $(LREF TimeOfDay)'s second to.\n\n        Throws:\n            $(LREF DateTimeException) if the given second would result in an\n            invalid $(LREF TimeOfDay).\n",
						"endline": 13396
					},
					{
						"kind": "template",
						"line": 13429,
						"constraint": "units == \"hours\"",
						"members": [
							{
								"kind": "function",
								"line": 13429,
								"endchar": 5,
								"char": 19,
								"type": "pure nothrow ref @safe TimeOfDay(long value)",
								"parameters": [
									{
										"deco": "l",
										"name": "value"
									}
								],
								"name": "roll",
								"endline": 13433
							}
						],
						"char": 19,
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "units"
							}
						],
						"comment": "        Adds the given number of units to this $(LREF TimeOfDay). A negative number\n        will subtract.\n\n        The difference between rolling and adding is that rolling does not\n        affect larger units. For instance, rolling a $(LREF TimeOfDay)\n        one hours's worth of minutes gets the exact same\n        $(LREF TimeOfDay).\n\n        Accepted units are $(D \"hours\"), $(D \"minutes\"), and $(D \"seconds\").\n\n        Params:\n            units = The units to add.\n            value = The number of $(D_PARAM units) to add to this\n                    $(LREF TimeOfDay).\nExample:\n\n---\nauto tod1 = TimeOfDay(7, 12, 0);\ntod1.roll!\"hours\"(1);\nassert(tod1 == TimeOfDay(8, 12, 0));\n\nauto tod2 = TimeOfDay(7, 12, 0);\ntod2.roll!\"hours\"(-1);\nassert(tod2 == TimeOfDay(6, 12, 0));\n\nauto tod3 = TimeOfDay(23, 59, 0);\ntod3.roll!\"minutes\"(1);\nassert(tod3 == TimeOfDay(23, 0, 0));\n\nauto tod4 = TimeOfDay(0, 0, 0);\ntod4.roll!\"minutes\"(-1);\nassert(tod4 == TimeOfDay(0, 59, 0));\n\nauto tod5 = TimeOfDay(23, 59, 59);\ntod5.roll!\"seconds\"(1);\nassert(tod5 == TimeOfDay(23, 59, 0));\n\nauto tod6 = TimeOfDay(0, 0, 0);\ntod6.roll!\"seconds\"(-1);\nassert(tod6 == TimeOfDay(0, 0, 59));\n\n\n---\n",
						"name": "roll"
					},
					{
						"kind": "template",
						"line": 13672,
						"constraint": "(op == \"+\" || op == \"-\") && (is(Unqual!D == Duration) || is(Unqual!D == TickDuration))",
						"members": [
							{
								"kind": "function",
								"line": 13672,
								"endchar": 5,
								"char": 15,
								"type": "const pure nothrow @safe TimeOfDay(in D duration)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "D",
										"name": "duration"
									}
								],
								"name": "opBinary",
								"endline": 13687
							}
						],
						"char": 15,
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "op"
							},
							{
								"kind": "type",
								"name": "D"
							}
						],
						"comment": "        Gives the result of adding or subtracting a duration from this\n        $(LREF TimeOfDay).\n\n        The legal types of arithmetic for $(LREF TimeOfDay) using this operator are\n\n        $(BOOKTABLE,\n        $(TR $(TD TimeOfDay) $(TD +) $(TD duration) $(TD -->) $(TD TimeOfDay))\n        $(TR $(TD TimeOfDay) $(TD -) $(TD duration) $(TD -->) $(TD TimeOfDay))\n        )\n\n        Params:\n            duration = The duration to add to or subtract from this\n                       $(LREF TimeOfDay).\n",
						"name": "opBinary"
					},
					{
						"kind": "template",
						"line": 13766,
						"constraint": "(op == \"+\" || op == \"-\") && (is(Unqual!D == Duration) || is(Unqual!D == TickDuration))",
						"members": [
							{
								"kind": "function",
								"line": 13766,
								"endchar": 5,
								"char": 19,
								"type": "pure nothrow ref @safe TimeOfDay(in D duration)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "D",
										"name": "duration"
									}
								],
								"name": "opOpAssign",
								"endline": 13778
							}
						],
						"char": 19,
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "op"
							},
							{
								"kind": "type",
								"name": "D"
							}
						],
						"comment": "        Gives the result of adding or subtracting a duration from this\n        $(LREF TimeOfDay), as well as assigning the result to this\n        $(LREF TimeOfDay).\n\n        The legal types of arithmetic for $(LREF TimeOfDay) using this operator are\n\n        $(BOOKTABLE,\n        $(TR $(TD TimeOfDay) $(TD +) $(TD duration) $(TD -->) $(TD TimeOfDay))\n        $(TR $(TD TimeOfDay) $(TD -) $(TD duration) $(TD -->) $(TD TimeOfDay))\n        )\n\n        Params:\n            duration = The duration to add to or subtract from this\n                       $(LREF TimeOfDay).\n",
						"name": "opOpAssign"
					},
					{
						"kind": "template",
						"line": 13837,
						"constraint": "op == \"-\"",
						"members": [
							{
								"kind": "function",
								"line": 13837,
								"endchar": 5,
								"char": 14,
								"type": "const pure nothrow @safe Duration(in TimeOfDay rhs)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "TimeOfDay",
										"name": "rhs"
									}
								],
								"name": "opBinary",
								"endline": 13844
							}
						],
						"char": 14,
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "op"
							}
						],
						"comment": "        Gives the difference between two $(LREF TimeOfDay)s.\n\n        The legal types of arithmetic for $(LREF TimeOfDay) using this operator are\n\n        $(BOOKTABLE,\n        $(TR $(TD TimeOfDay) $(TD -) $(TD TimeOfDay) $(TD -->) $(TD duration))\n        )\n\n        Params:\n            rhs = The $(LREF TimeOfDay) to subtract from this one.\n",
						"name": "opBinary"
					},
					{
						"kind": "function",
						"line": 13878,
						"deco": "xFNaNbNfZAya",
						"endchar": 5,
						"char": 12,
						"name": "toISOString",
						"comment": "        Converts this $(LREF TimeOfDay) to a string with the format HHMMSS.\nExample:\n\n---\nassert(TimeOfDay(0, 0, 0).toISOString() == \"000000\");\nassert(TimeOfDay(12, 30, 33).toISOString() == \"123033\");\n\n\n---\n",
						"endline": 13885
					},
					{
						"kind": "function",
						"line": 13908,
						"deco": "xFNaNbNfZAya",
						"endchar": 5,
						"char": 12,
						"name": "toISOExtString",
						"comment": "        Converts this $(LREF TimeOfDay) to a string with the format HH:MM:SS.\nExample:\n\n---\nassert(TimeOfDay(0, 0, 0).toISOExtString() == \"00:00:00\");\nassert(TimeOfDay(12, 30, 33).toISOExtString() == \"12:30:33\");\n\n\n---\n",
						"endline": 13915
					},
					{
						"kind": "function",
						"line": 13938,
						"deco": "xFNaNbNfZAya",
						"endchar": 5,
						"char": 12,
						"name": "toString",
						"comment": "        Converts this TimeOfDay to a string.\n",
						"endline": 13941
					},
					{
						"kind": "template",
						"line": 13965,
						"constraint": "isSomeString!S",
						"members": [
							{
								"kind": "function",
								"line": 13965,
								"endchar": 5,
								"char": 22,
								"type": "pure @safe TimeOfDay(in S isoString)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "S",
										"name": "isoString"
									}
								],
								"name": "fromISOString",
								"endline": 13987
							}
						],
						"char": 22,
						"parameters": [
							{
								"kind": "type",
								"name": "S"
							}
						],
						"comment": "        Creates a $(LREF TimeOfDay) from a string with the format HHMMSS.\n        Whitespace is stripped from the given string.\n\n        Params:\n            isoString = A string formatted in the ISO format for times.\n\n        Throws:\n            $(LREF DateTimeException) if the given string is not in the ISO format\n            or if the resulting $(LREF TimeOfDay) would not be valid.\nExample:\n\n---\nassert(TimeOfDay.fromISOString(\"000000\") == TimeOfDay(0, 0, 0));\nassert(TimeOfDay.fromISOString(\"123033\") == TimeOfDay(12, 30, 33));\nassert(TimeOfDay.fromISOString(\" 123033 \") == TimeOfDay(12, 30, 33));\n\n\n---\n",
						"name": "fromISOString"
					},
					{
						"kind": "template",
						"line": 14073,
						"constraint": "isSomeString!S",
						"members": [
							{
								"kind": "function",
								"line": 14073,
								"endchar": 5,
								"char": 22,
								"type": "pure @safe TimeOfDay(in S isoExtString)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "S",
										"name": "isoExtString"
									}
								],
								"name": "fromISOExtString",
								"endline": 14100
							}
						],
						"char": 22,
						"parameters": [
							{
								"kind": "type",
								"name": "S"
							}
						],
						"comment": "        Creates a $(LREF TimeOfDay) from a string with the format HH:MM:SS.\n        Whitespace is stripped from the given string.\n\n        Params:\n            isoExtString = A string formatted in the ISO Extended format for times.\n\n        Throws:\n            $(LREF DateTimeException) if the given string is not in the ISO\n            Extended format or if the resulting $(LREF TimeOfDay) would not be\n            valid.\nExample:\n\n---\nassert(TimeOfDay.fromISOExtString(\"00:00:00\") == TimeOfDay(0, 0, 0));\nassert(TimeOfDay.fromISOExtString(\"12:30:33\") == TimeOfDay(12, 30, 33));\nassert(TimeOfDay.fromISOExtString(\" 12:30:33 \") == TimeOfDay(12, 30, 33));\n\n\n---\n",
						"name": "fromISOExtString"
					},
					{
						"kind": "function",
						"line": 14177,
						"storageClass": [
							"static"
						],
						"deco": "FNaNbNdNfZS3std8datetime9TimeOfDay",
						"endchar": 5,
						"char": 32,
						"name": "min",
						"comment": "        Returns midnight.\n",
						"endline": 14180
					},
					{
						"kind": "function",
						"line": 14194,
						"storageClass": [
							"static"
						],
						"deco": "FNaNbNdNfZS3std8datetime9TimeOfDay",
						"endchar": 5,
						"char": 32,
						"name": "max",
						"comment": "        Returns one second short of midnight.\n",
						"endline": 14202
					}
				],
				"char": 1,
				"name": "TimeOfDay",
				"comment": "    Represents a time of day with hours, minutes, and seconds. It uses 24 hour\n    time.\n"
			},
			{
				"kind": "struct",
				"line": 14360,
				"members": [
					{
						"kind": "constructor",
						"line": 14369,
						"deco": "FNaNbNcNfxS3std8datetime4DatexS3std8datetime9TimeOfDayZS3std8datetime8DateTime",
						"endchar": 5,
						"char": 5,
						"parameters": [
							{
								"deco": "xS3std8datetime4Date",
								"name": "date"
							},
							{
								"deco": "xS3std8datetime9TimeOfDay",
								"default": "TimeOfDay(cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u)",
								"name": "tod"
							}
						],
						"name": "this",
						"comment": "        Params:\n            date = The date portion of $(LREF DateTime).\n            tod  = The time portion of $(LREF DateTime).\n",
						"originalType": "pure nothrow ref @safe (in Date date, in TimeOfDay tod = TimeOfDay.init)",
						"endline": 14373
					},
					{
						"kind": "constructor",
						"line": 14406,
						"deco": "FNaNcNfiiiiiiZS3std8datetime8DateTime",
						"endchar": 5,
						"char": 5,
						"parameters": [
							{
								"deco": "i",
								"name": "year"
							},
							{
								"deco": "i",
								"name": "month"
							},
							{
								"deco": "i",
								"name": "day"
							},
							{
								"deco": "i",
								"default": "0",
								"name": "hour"
							},
							{
								"deco": "i",
								"default": "0",
								"name": "minute"
							},
							{
								"deco": "i",
								"default": "0",
								"name": "second"
							}
						],
						"name": "this",
						"comment": "        Params:\n            year   = The year portion of the date.\n            month  = The month portion of the date.\n            day    = The day portion of the date.\n            hour   = The hour portion of the time;\n            minute = The minute portion of the time;\n            second = The second portion of the time;\n",
						"originalType": "pure ref @safe (int year, int month, int day, int hour = 0, int minute = 0, int second = 0)",
						"endline": 14410
					},
					{
						"kind": "function",
						"line": 14438,
						"deco": "xFNaNbNfxS3std8datetime8DateTimeZi",
						"endchar": 5,
						"char": 9,
						"parameters": [
							{
								"deco": "xS3std8datetime8DateTime",
								"name": "rhs"
							}
						],
						"name": "opCmp",
						"comment": "        Compares this $(LREF DateTime) with the given $(D DateTime.).\n\n        Returns:\n            $(BOOKTABLE,\n            $(TR $(TD this &lt; rhs) $(TD &lt; 0))\n            $(TR $(TD this == rhs) $(TD 0))\n            $(TR $(TD this &gt; rhs) $(TD &gt; 0))\n            )\n",
						"originalType": "const pure nothrow @safe int(in DateTime rhs)",
						"endline": 14446
					},
					{
						"kind": "function",
						"line": 14648,
						"deco": "xFNaNbNdNfZS3std8datetime4Date",
						"endchar": 5,
						"char": 20,
						"name": "date",
						"comment": "        The date portion of $(LREF DateTime).\n",
						"endline": 14651
					},
					{
						"kind": "function",
						"line": 14678,
						"deco": "FNaNbNdNfxS3std8datetime4DateZv",
						"endchar": 5,
						"char": 20,
						"parameters": [
							{
								"deco": "xS3std8datetime4Date",
								"name": "date"
							}
						],
						"name": "date",
						"comment": "        The date portion of $(LREF DateTime).\n\n        Params:\n            date = The Date to set this $(LREF DateTime)'s date portion to.\n",
						"originalType": "pure nothrow @property @safe void(in Date date)",
						"endline": 14681
					},
					{
						"kind": "function",
						"line": 14700,
						"deco": "xFNaNbNdNfZS3std8datetime9TimeOfDay",
						"endchar": 5,
						"char": 25,
						"name": "timeOfDay",
						"comment": "        The time portion of $(LREF DateTime).\n",
						"endline": 14703
					},
					{
						"kind": "function",
						"line": 14731,
						"deco": "FNaNbNdNfxS3std8datetime9TimeOfDayZv",
						"endchar": 5,
						"char": 20,
						"parameters": [
							{
								"deco": "xS3std8datetime9TimeOfDay",
								"name": "tod"
							}
						],
						"name": "timeOfDay",
						"comment": "        The time portion of $(LREF DateTime).\n\n        Params:\n            tod = The $(LREF TimeOfDay) to set this $(LREF DateTime)'s time portion\n                  to.\n",
						"originalType": "pure nothrow @property @safe void(in TimeOfDay tod)",
						"endline": 14734
					},
					{
						"kind": "function",
						"line": 14754,
						"deco": "xFNaNbNdNfZs",
						"endchar": 5,
						"char": 21,
						"name": "year",
						"comment": "        Year of the Gregorian Calendar. Positive numbers are A.D. Non-positive\n        are B.C.\n",
						"endline": 14757
					},
					{
						"kind": "function",
						"line": 14783,
						"deco": "FNaNdNfiZv",
						"endchar": 5,
						"char": 20,
						"parameters": [
							{
								"deco": "i",
								"name": "year"
							}
						],
						"name": "year",
						"comment": "        Year of the Gregorian Calendar. Positive numbers are A.D. Non-positive\n        are B.C.\n\n        Params:\n            year = The year to set this $(LREF DateTime)'s year to.\n\n        Throws:\n            $(LREF DateTimeException) if the new year is not a leap year and if the\n            resulting date would be on February 29th.\nExample:\n\n---\nassert(DateTime(Date(1999, 7, 6), TimeOfDay(9, 7, 5)).year == 1999);\nassert(DateTime(Date(2010, 10, 4), TimeOfDay(0, 0, 30)).year == 2010);\nassert(DateTime(Date(-7, 4, 5), TimeOfDay(7, 45, 2)).year == -7);\n\n\n---\n",
						"endline": 14786
					},
					{
						"kind": "function",
						"line": 14821,
						"deco": "xFNaNdNfZs",
						"endchar": 5,
						"char": 21,
						"name": "yearBC",
						"comment": "        Year B.C. of the Gregorian Calendar counting year 0 as 1 B.C.\n\n        Throws:\n            $(LREF DateTimeException) if $(D isAD) is true.\nExample:\n\n---\nassert(DateTime(Date(0, 1, 1), TimeOfDay(12, 30, 33)).yearBC == 1);\nassert(DateTime(Date(-1, 1, 1), TimeOfDay(10, 7, 2)).yearBC == 2);\nassert(DateTime(Date(-100, 1, 1), TimeOfDay(4, 59, 0)).yearBC == 101);\n\n\n---\n",
						"endline": 14824
					},
					{
						"kind": "function",
						"line": 14856,
						"deco": "FNaNdNfiZv",
						"endchar": 5,
						"char": 20,
						"parameters": [
							{
								"deco": "i",
								"name": "year"
							}
						],
						"name": "yearBC",
						"comment": "        Year B.C. of the Gregorian Calendar counting year 0 as 1 B.C.\n\n        Params:\n            year = The year B.C. to set this $(LREF DateTime)'s year to.\n\n        Throws:\n            $(LREF DateTimeException) if a non-positive value is given.\nExample:\n\n---\nauto dt = DateTime(Date(2010, 1, 1), TimeOfDay(7, 30, 0));\ndt.yearBC = 1;\nassert(dt == DateTime(Date(0, 1, 1), TimeOfDay(7, 30, 0)));\n\ndt.yearBC = 10;\nassert(dt == DateTime(Date(-9, 1, 1), TimeOfDay(7, 30, 0)));\n\n\n---\n",
						"endline": 14859
					},
					{
						"kind": "function",
						"line": 14888,
						"deco": "xFNaNbNdNfZE3std8datetime5Month",
						"endchar": 5,
						"char": 21,
						"name": "month",
						"comment": "        Month of a Gregorian Year.\nExample:\n\n---\nassert(DateTime(Date(1999, 7, 6), TimeOfDay(9, 7, 5)).month == 7);\nassert(DateTime(Date(2010, 10, 4), TimeOfDay(0, 0, 30)).month == 10);\nassert(DateTime(Date(-7, 4, 5), TimeOfDay(7, 45, 2)).month == 4);\n\n\n---\n",
						"endline": 14891
					},
					{
						"kind": "function",
						"line": 14923,
						"deco": "FNaNdNfE3std8datetime5MonthZv",
						"endchar": 5,
						"char": 20,
						"parameters": [
							{
								"deco": "E3std8datetime5Month",
								"name": "month"
							}
						],
						"name": "month",
						"comment": "        Month of a Gregorian Year.\n\n        Params:\n            month = The month to set this $(LREF DateTime)'s month to.\n\n        Throws:\n            $(LREF DateTimeException) if the given month is not a valid month.\n",
						"endline": 14926
					},
					{
						"kind": "function",
						"line": 14953,
						"deco": "xFNaNbNdNfZh",
						"endchar": 5,
						"char": 21,
						"name": "day",
						"comment": "        Day of a Gregorian Month.\nExample:\n\n---\nassert(DateTime(Date(1999, 7, 6), TimeOfDay(9, 7, 5)).day == 6);\nassert(DateTime(Date(2010, 10, 4), TimeOfDay(0, 0, 30)).day == 4);\nassert(DateTime(Date(-7, 4, 5), TimeOfDay(7, 45, 2)).day == 5);\n\n\n---\n",
						"endline": 14956
					},
					{
						"kind": "function",
						"line": 15002,
						"deco": "FNaNdNfiZv",
						"endchar": 5,
						"char": 20,
						"parameters": [
							{
								"deco": "i",
								"name": "day"
							}
						],
						"name": "day",
						"comment": "        Day of a Gregorian Month.\n\n        Params:\n            day = The day of the month to set this $(LREF DateTime)'s day to.\n\n        Throws:\n            $(LREF DateTimeException) if the given day is not a valid day of the\n            current month.\n",
						"endline": 15005
					},
					{
						"kind": "function",
						"line": 15094,
						"deco": "xFNaNbNdNfZh",
						"endchar": 5,
						"char": 21,
						"name": "hour",
						"comment": "        Hours past midnight.\n",
						"endline": 15097
					},
					{
						"kind": "function",
						"line": 15121,
						"deco": "FNaNdNfiZv",
						"endchar": 5,
						"char": 20,
						"parameters": [
							{
								"deco": "i",
								"name": "hour"
							}
						],
						"name": "hour",
						"comment": "        Hours past midnight.\n\n        Params:\n            hour = The hour of the day to set this $(LREF DateTime)'s hour to.\n\n        Throws:\n            $(LREF DateTimeException) if the given hour would result in an invalid\n            $(LREF DateTime).\n",
						"endline": 15124
					},
					{
						"kind": "function",
						"line": 15144,
						"deco": "xFNaNbNdNfZh",
						"endchar": 5,
						"char": 21,
						"name": "minute",
						"comment": "        Minutes past the hour.\n",
						"endline": 15147
					},
					{
						"kind": "function",
						"line": 15171,
						"deco": "FNaNdNfiZv",
						"endchar": 5,
						"char": 20,
						"parameters": [
							{
								"deco": "i",
								"name": "minute"
							}
						],
						"name": "minute",
						"comment": "        Minutes past the hour.\n\n        Params:\n            minute = The minute to set this $(LREF DateTime)'s minute to.\n\n        Throws:\n            $(LREF DateTimeException) if the given minute would result in an\n            invalid $(LREF DateTime).\n",
						"endline": 15174
					},
					{
						"kind": "function",
						"line": 15194,
						"deco": "xFNaNbNdNfZh",
						"endchar": 5,
						"char": 21,
						"name": "second",
						"comment": "        Seconds past the minute.\n",
						"endline": 15197
					},
					{
						"kind": "function",
						"line": 15221,
						"deco": "FNaNdNfiZv",
						"endchar": 5,
						"char": 20,
						"parameters": [
							{
								"deco": "i",
								"name": "second"
							}
						],
						"name": "second",
						"comment": "        Seconds past the minute.\n\n        Params:\n            second = The second to set this $(LREF DateTime)'s second to.\n\n        Throws:\n            $(LREF DateTimeException) if the given seconds would result in an\n            invalid $(LREF DateTime).\n",
						"endline": 15224
					},
					{
						"kind": "template",
						"line": 15260,
						"constraint": "units == \"years\" || units == \"months\"",
						"members": [
							{
								"kind": "function",
								"line": 15260,
								"endchar": 5,
								"char": 18,
								"type": "pure nothrow ref @safe DateTime(long value, AllowDayOverflow allowOverflow = AllowDayOverflow.yes)",
								"parameters": [
									{
										"deco": "l",
										"name": "value"
									},
									{
										"default": "AllowDayOverflow.yes",
										"type": "AllowDayOverflow",
										"name": "allowOverflow"
									}
								],
								"name": "add",
								"endline": 15267
							}
						],
						"char": 18,
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "units"
							}
						],
						"comment": "        Adds the given number of years or months to this $(LREF DateTime). A\n        negative number will subtract.\n\n        Note that if day overflow is allowed, and the date with the adjusted\n        year/month overflows the number of days in the new month, then the month\n        will be incremented by one, and the day set to the number of days\n        overflowed. (e.g. if the day were 31 and the new month were June, then\n        the month would be incremented to July, and the new day would be 1). If\n        day overflow is not allowed, then the day will be set to the last valid\n        day in the month (e.g. June 31st would become June 30th).\n\n        Params:\n            units         = The type of units to add (\"years\" or \"months\").\n            value         = The number of months or years to add to this\n                            $(LREF DateTime).\n            allowOverflow = Whether the days should be allowed to overflow,\n                            causing the month to increment.\nExample:\n\n---\nauto dt1 = DateTime(2010, 1, 1, 12, 30, 33);\ndt1.add!\"months\"(11);\nassert(dt1 == DateTime(2010, 12, 1, 12, 30, 33));\n\nauto dt2 = DateTime(2010, 1, 1, 12, 30, 33);\ndt2.add!\"months\"(-11);\nassert(dt2 == DateTime(2009, 2, 1, 12, 30, 33));\n\nauto dt3 = DateTime(2000, 2, 29, 12, 30, 33);\ndt3.add!\"years\"(1);\nassert(dt3 == DateTime(2001, 3, 1, 12, 30, 33));\n\nauto dt4 = DateTime(2000, 2, 29, 12, 30, 33);\ndt4.add!\"years\"(1, AllowDayOverflow.no);\nassert(dt4 == DateTime(2001, 2, 28, 12, 30, 33));\n\n\n---\n",
						"name": "add"
					},
					{
						"kind": "template",
						"line": 15323,
						"constraint": "units == \"years\" || units == \"months\"",
						"members": [
							{
								"kind": "function",
								"line": 15323,
								"endchar": 5,
								"char": 18,
								"type": "pure nothrow ref @safe DateTime(long value, AllowDayOverflow allowOverflow = AllowDayOverflow.yes)",
								"parameters": [
									{
										"deco": "l",
										"name": "value"
									},
									{
										"default": "AllowDayOverflow.yes",
										"type": "AllowDayOverflow",
										"name": "allowOverflow"
									}
								],
								"name": "roll",
								"endline": 15330
							}
						],
						"char": 18,
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "units"
							}
						],
						"comment": "        Adds the given number of years or months to this $(LREF DateTime). A\n        negative number will subtract.\n\n        The difference between rolling and adding is that rolling does not\n        affect larger units. Rolling a $(LREF DateTime) 12 months\n        gets the exact same $(LREF DateTime). However, the days can still be\n        affected due to the differing number of days in each month.\n\n        Because there are no units larger than years, there is no difference\n        between adding and rolling years.\n\n        Params:\n            units         = The type of units to add (\"years\" or \"months\").\n            value         = The number of months or years to add to this\n                            $(LREF DateTime).\n            allowOverflow = Whether the days should be allowed to overflow,\n                            causing the month to increment.\nExample:\n\n---\nauto dt1 = DateTime(2010, 1, 1, 12, 33, 33);\ndt1.roll!\"months\"(1);\nassert(dt1 == DateTime(2010, 2, 1, 12, 33, 33));\n\nauto dt2 = DateTime(2010, 1, 1, 12, 33, 33);\ndt2.roll!\"months\"(-1);\nassert(dt2 == DateTime(2010, 12, 1, 12, 33, 33));\n\nauto dt3 = DateTime(1999, 1, 29, 12, 33, 33);\ndt3.roll!\"months\"(1);\nassert(dt3 == DateTime(1999, 3, 1, 12, 33, 33));\n\nauto dt4 = DateTime(1999, 1, 29, 12, 33, 33);\ndt4.roll!\"months\"(1, AllowDayOverflow.no);\nassert(dt4 == DateTime(1999, 2, 28, 12, 33, 33));\n\nauto dt5 = DateTime(2000, 2, 29, 12, 30, 33);\ndt5.roll!\"years\"(1);\nassert(dt5 == DateTime(2001, 3, 1, 12, 30, 33));\n\nauto dt6 = DateTime(2000, 2, 29, 12, 30, 33);\ndt6.roll!\"years\"(1, AllowDayOverflow.no);\nassert(dt6 == DateTime(2001, 2, 28, 12, 30, 33));\n\n\n---\n",
						"name": "roll"
					},
					{
						"kind": "template",
						"line": 15390,
						"constraint": "units == \"days\"",
						"members": [
							{
								"kind": "function",
								"line": 15390,
								"endchar": 5,
								"char": 18,
								"type": "pure nothrow ref @safe DateTime(long value)",
								"parameters": [
									{
										"deco": "l",
										"name": "value"
									}
								],
								"name": "roll",
								"endline": 15395
							}
						],
						"char": 18,
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "units"
							}
						],
						"comment": "        Adds the given number of units to this $(LREF DateTime). A negative number\n        will subtract.\n\n        The difference between rolling and adding is that rolling does not\n        affect larger units. For instance, rolling a $(LREF DateTime) one\n        year's worth of days gets the exact same $(LREF DateTime).\n\n        Accepted units are $(D \"days\"), $(D \"minutes\"), $(D \"hours\"),\n        $(D \"minutes\"), and $(D \"seconds\").\n\n        Params:\n            units = The units to add.\n            value = The number of $(D_PARAM units) to add to this $(LREF DateTime).\nExample:\n\n---\nauto dt1 = DateTime(2010, 1, 1, 11, 23, 12);\ndt1.roll!\"days\"(1);\nassert(dt1 == DateTime(2010, 1, 2, 11, 23, 12));\ndt1.roll!\"days\"(365);\nassert(dt1 == DateTime(2010, 1, 26, 11, 23, 12));\ndt1.roll!\"days\"(-32);\nassert(dt1 == DateTime(2010, 1, 25, 11, 23, 12));\n\nauto dt2 = DateTime(2010, 7, 4, 12, 0, 0);\ndt2.roll!\"hours\"(1);\nassert(dt2 == DateTime(2010, 7, 4, 13, 0, 0));\n\nauto dt3 = DateTime(2010, 1, 1, 0, 0, 0);\ndt3.roll!\"seconds\"(-1);\nassert(dt3 == DateTime(2010, 1, 1, 0, 0, 59));\n\n\n---\n",
						"name": "roll"
					},
					{
						"kind": "template",
						"line": 15949,
						"constraint": "(op == \"+\" || op == \"-\") && (is(Unqual!D == Duration) || is(Unqual!D == TickDuration))",
						"members": [
							{
								"kind": "function",
								"line": 15949,
								"endchar": 5,
								"char": 14,
								"type": "const pure nothrow @safe DateTime(in D duration)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "D",
										"name": "duration"
									}
								],
								"name": "opBinary",
								"endline": 15964
							}
						],
						"char": 14,
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "op"
							},
							{
								"kind": "type",
								"name": "D"
							}
						],
						"comment": "        Gives the result of adding or subtracting a duration from this\n        $(LREF DateTime).\n\n        The legal types of arithmetic for $(LREF DateTime) using this operator are\n\n        $(BOOKTABLE,\n        $(TR $(TD DateTime) $(TD +) $(TD duration) $(TD -->) $(TD DateTime))\n        $(TR $(TD DateTime) $(TD -) $(TD duration) $(TD -->) $(TD DateTime))\n        )\n\n        Params:\n            duration = The duration to add to or subtract from this\n                       $(LREF DateTime).\n",
						"name": "opBinary"
					},
					{
						"kind": "template",
						"line": 16047,
						"constraint": "(op == \"+\" || op == \"-\") && (is(Unqual!D == Duration) || is(Unqual!D == TickDuration))",
						"members": [
							{
								"kind": "function",
								"line": 16047,
								"endchar": 5,
								"char": 18,
								"type": "pure nothrow ref @safe DateTime(in D duration)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "D",
										"name": "duration"
									}
								],
								"name": "opOpAssign",
								"endline": 16062
							}
						],
						"char": 18,
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "op"
							},
							{
								"kind": "type",
								"name": "D"
							}
						],
						"comment": "        Gives the result of adding or subtracting a duration from this\n        $(LREF DateTime), as well as assigning the result to this $(LREF DateTime).\n\n        The legal types of arithmetic for $(LREF DateTime) using this operator are\n\n        $(BOOKTABLE,\n        $(TR $(TD DateTime) $(TD +) $(TD duration) $(TD -->) $(TD DateTime))\n        $(TR $(TD DateTime) $(TD -) $(TD duration) $(TD -->) $(TD DateTime))\n        )\n\n        Params:\n            duration = The duration to add to or subtract from this\n                       $(LREF DateTime).\n",
						"name": "opOpAssign"
					},
					{
						"kind": "template",
						"line": 16125,
						"constraint": "op == \"-\"",
						"members": [
							{
								"kind": "function",
								"line": 16125,
								"endchar": 5,
								"char": 14,
								"type": "const pure nothrow @safe Duration(in DateTime rhs)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "DateTime",
										"name": "rhs"
									}
								],
								"name": "opBinary",
								"endline": 16132
							}
						],
						"char": 14,
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "op"
							}
						],
						"comment": "        Gives the difference between two $(LREF DateTime)s.\n\n        The legal types of arithmetic for $(LREF DateTime) using this operator are\n\n        $(BOOKTABLE,\n        $(TR $(TD DateTime) $(TD -) $(TD DateTime) $(TD -->) $(TD duration))\n        )\n",
						"name": "opBinary"
					},
					{
						"kind": "function",
						"line": 16222,
						"deco": "xFNaNbNfxS3std8datetime8DateTimeZi",
						"endchar": 5,
						"char": 9,
						"parameters": [
							{
								"deco": "xS3std8datetime8DateTime",
								"name": "rhs"
							}
						],
						"name": "diffMonths",
						"comment": "        Returns the difference between the two $(LREF DateTime)s in months.\n\n        To get the difference in years, subtract the year property\n        of two $(LREF SysTime)s. To get the difference in days or weeks,\n        subtract the $(LREF SysTime)s themselves and use the $(CXREF time, Duration)\n        that results. Because converting between months and smaller\n        units requires a specific date (which $(CXREF time, Duration)s don't have),\n        getting the difference in months requires some math using both\n        the year and month properties, so this is a convenience function for\n        getting the difference in months.\n\n        Note that the number of days in the months or how far into the month\n        either date is is irrelevant. It is the difference in the month property\n        combined with the difference in years * 12. So, for instance,\n        December 31st and January 1st are one month apart just as December 1st\n        and January 31st are one month apart.\n\n        Params:\n            rhs = The $(LREF DateTime) to subtract from this one.\nExample:\n\n---\nassert(DateTime(1999, 2, 1, 12, 2, 3).diffMonths(\n            DateTime(1999, 1, 31, 23, 59, 59)) == 1);\n\nassert(DateTime(1999, 1, 31, 0, 0, 0).diffMonths(\n            DateTime(1999, 2, 1, 12, 3, 42)) == -1);\n\nassert(DateTime(1999, 3, 1, 5, 30, 0).diffMonths(\n            DateTime(1999, 1, 1, 2, 4, 7)) == 2);\n\nassert(DateTime(1999, 1, 1, 7, 2, 4).diffMonths(\n            DateTime(1999, 3, 31, 0, 30, 58)) == -2);\n\n\n---\n",
						"originalType": "const pure nothrow @safe int(in DateTime rhs)",
						"endline": 16225
					},
					{
						"kind": "function",
						"line": 16265,
						"deco": "xFNaNbNdNfZb",
						"endchar": 5,
						"char": 20,
						"name": "isLeapYear",
						"comment": "        Whether this $(LREF DateTime) is in a leap year.\n",
						"endline": 16268
					},
					{
						"kind": "function",
						"line": 16284,
						"deco": "xFNaNbNdNfZE3std8datetime9DayOfWeek",
						"endchar": 5,
						"char": 25,
						"name": "dayOfWeek",
						"comment": "        Day of the week this $(LREF DateTime) is on.\n",
						"endline": 16287
					},
					{
						"kind": "function",
						"line": 16303,
						"deco": "xFNaNbNdNfZt",
						"endchar": 5,
						"char": 22,
						"name": "dayOfYear",
						"comment": "        Day of the year this $(LREF DateTime) is on.\nExample:\n\n---\nassert(DateTime(Date(1999, 1, 1), TimeOfDay(12, 22, 7)).dayOfYear == 1);\nassert(DateTime(Date(1999, 12, 31), TimeOfDay(7, 2, 59)).dayOfYear == 365);\nassert(DateTime(Date(2000, 12, 31), TimeOfDay(21, 20, 0)).dayOfYear == 366);\n\n\n---\n",
						"endline": 16306
					},
					{
						"kind": "function",
						"line": 16334,
						"deco": "FNaNdNfiZv",
						"endchar": 5,
						"char": 20,
						"parameters": [
							{
								"deco": "i",
								"name": "day"
							}
						],
						"name": "dayOfYear",
						"comment": "        Day of the year.\n\n        Params:\n            day = The day of the year to set which day of the year this\n                  $(LREF DateTime) is on.\n",
						"endline": 16337
					},
					{
						"kind": "function",
						"line": 16353,
						"deco": "xFNaNbNdNfZi",
						"endchar": 5,
						"char": 19,
						"name": "dayOfGregorianCal",
						"comment": "        The Xth day of the Gregorian Calendar that this $(LREF DateTime) is on.\nExample:\n\n---\nassert(DateTime(Date(1, 1, 1), TimeOfDay(0, 0, 0)).dayOfGregorianCal == 1);\nassert(DateTime(Date(1, 12, 31), TimeOfDay(23, 59, 59)).dayOfGregorianCal == 365);\nassert(DateTime(Date(2, 1, 1), TimeOfDay(2, 2, 2)).dayOfGregorianCal == 366);\n\nassert(DateTime(Date(0, 12, 31), TimeOfDay(7, 7, 7)).dayOfGregorianCal == 0);\nassert(DateTime(Date(0, 1, 1), TimeOfDay(19, 30, 0)).dayOfGregorianCal == -365);\nassert(DateTime(Date(-1, 12, 31), TimeOfDay(4, 7, 0)).dayOfGregorianCal == -366);\n\nassert(DateTime(Date(2000, 1, 1), TimeOfDay(9, 30, 20)).dayOfGregorianCal == 730_120);\nassert(DateTime(Date(2010, 12, 31), TimeOfDay(15, 45, 50)).dayOfGregorianCal == 734_137);\n\n\n---\n",
						"endline": 16356
					},
					{
						"kind": "function",
						"line": 16391,
						"deco": "FNaNbNdNfiZv",
						"endchar": 5,
						"char": 20,
						"parameters": [
							{
								"deco": "i",
								"name": "days"
							}
						],
						"name": "dayOfGregorianCal",
						"comment": "        The Xth day of the Gregorian Calendar that this $(LREF DateTime) is on.\n        Setting this property does not affect the time portion of\n        $(LREF DateTime).\n\n        Params:\n            days = The day of the Gregorian Calendar to set this $(LREF DateTime)\n                   to.\nExample:\n\n---\nauto dt = DateTime(Date.init, TimeOfDay(12, 0, 0));\ndt.dayOfGregorianCal = 1;\nassert(dt == DateTime(Date(1, 1, 1), TimeOfDay(12, 0, 0)));\n\ndt.dayOfGregorianCal = 365;\nassert(dt == DateTime(Date(1, 12, 31), TimeOfDay(12, 0, 0)));\n\ndt.dayOfGregorianCal = 366;\nassert(dt == DateTime(Date(2, 1, 1), TimeOfDay(12, 0, 0)));\n\ndt.dayOfGregorianCal = 0;\nassert(dt == DateTime(Date(0, 12, 31), TimeOfDay(12, 0, 0)));\n\ndt.dayOfGregorianCal = -365;\nassert(dt == DateTime(Date(-0, 1, 1), TimeOfDay(12, 0, 0)));\n\ndt.dayOfGregorianCal = -366;\nassert(dt == DateTime(Date(-1, 12, 31), TimeOfDay(12, 0, 0)));\n\ndt.dayOfGregorianCal = 730_120;\nassert(dt == DateTime(Date(2000, 1, 1), TimeOfDay(12, 0, 0)));\n\ndt.dayOfGregorianCal = 734_137;\nassert(dt == DateTime(Date(2010, 12, 31), TimeOfDay(12, 0, 0)));\n\n\n---\n",
						"endline": 16394
					},
					{
						"kind": "function",
						"line": 16440,
						"deco": "xFNaNbNdNfZh",
						"endchar": 5,
						"char": 21,
						"name": "isoWeek",
						"comment": "        The ISO 8601 week of the year that this $(LREF DateTime) is in.\n\n        See_Also:\n            $(WEB en.wikipedia.org/wiki/ISO_week_date, ISO Week Date)\n",
						"endline": 16443
					},
					{
						"kind": "function",
						"line": 16460,
						"deco": "xFNaNbNdNfZS3std8datetime8DateTime",
						"endchar": 5,
						"char": 24,
						"name": "endOfMonth",
						"comment": "        $(LREF DateTime) for the last day in the month that this $(LREF DateTime) is\n        in. The time portion of endOfMonth is always 23:59:59.\nExample:\n\n---\nassert(DateTime(Date(1999, 1, 6), TimeOfDay(0, 0, 0)).endOfMonth ==\n       DateTime(Date(1999, 1, 31), TimeOfDay(23, 59, 59)));\n\nassert(DateTime(Date(1999, 2, 7), TimeOfDay(19, 30, 0)).endOfMonth ==\n       DateTime(Date(1999, 2, 28), TimeOfDay(23, 59, 59)));\n\nassert(DateTime(Date(2000, 2, 7), TimeOfDay(5, 12, 27)).endOfMonth ==\n       DateTime(Date(2000, 2, 29), TimeOfDay(23, 59, 59)));\n\nassert(DateTime(Date(2000, 6, 4), TimeOfDay(12, 22, 9)).endOfMonth ==\n       DateTime(Date(2000, 6, 30), TimeOfDay(23, 59, 59)));\n\n\n---\n",
						"endline": 16466
					},
					{
						"kind": "function",
						"line": 16526,
						"deco": "xFNaNbNdNfZh",
						"endchar": 5,
						"char": 21,
						"name": "daysInMonth",
						"comment": "        The last day in the month that this $(LREF DateTime) is in.\nExample:\n\n---\nassert(DateTime(Date(1999, 1, 6), TimeOfDay(0, 0, 0)).daysInMonth == 31);\nassert(DateTime(Date(1999, 2, 7), TimeOfDay(19, 30, 0)).daysInMonth == 28);\nassert(DateTime(Date(2000, 2, 7), TimeOfDay(5, 12, 27)).daysInMonth == 29);\nassert(DateTime(Date(2000, 6, 4), TimeOfDay(12, 22, 9)).daysInMonth == 30);\n\n\n---\n",
						"endline": 16529
					},
					{
						"kind": "function",
						"line": 16552,
						"deco": "xFNaNbNdNfZb",
						"endchar": 5,
						"char": 20,
						"name": "isAD",
						"comment": "        Whether the current year is a date in A.D.\nExample:\n\n---\nassert(DateTime(Date(1, 1, 1), TimeOfDay(12, 7, 0)).isAD);\nassert(DateTime(Date(2010, 12, 31), TimeOfDay(0, 0, 0)).isAD);\nassert(!DateTime(Date(0, 12, 31), TimeOfDay(23, 59, 59)).isAD);\nassert(!DateTime(Date(-2010, 1, 1), TimeOfDay(2, 2, 2)).isAD);\n\n\n---\n",
						"endline": 16555
					},
					{
						"kind": "function",
						"line": 16582,
						"deco": "xFNaNbNdNfZl",
						"endchar": 5,
						"char": 20,
						"name": "julianDay",
						"comment": "        The $(WEB en.wikipedia.org/wiki/Julian_day, Julian day) for this\n        $(LREF DateTime) at the given time. For example, prior to noon,\n        1996-03-31 would be the Julian day number 2_450_173, so this function\n        returns 2_450_173, while from noon onward, the julian day number would\n        be 2_450_174, so this function returns 2_450_174.\n",
						"endline": 16588
					},
					{
						"kind": "function",
						"line": 16627,
						"deco": "xFNaNbNdNfZl",
						"endchar": 5,
						"char": 20,
						"name": "modJulianDay",
						"comment": "        The modified $(WEB en.wikipedia.org/wiki/Julian_day, Julian day) for any\n        time on this date (since, the modified Julian day changes at midnight).\n",
						"endline": 16630
					},
					{
						"kind": "function",
						"line": 16650,
						"deco": "xFNaNbNfZAya",
						"endchar": 5,
						"char": 12,
						"name": "toISOString",
						"comment": "        Converts this $(LREF DateTime) to a string with the format YYYYMMDDTHHMMSS.\nExample:\n\n---\nassert(DateTime(Date(2010, 7, 4), TimeOfDay(7, 6, 12)).toISOString() ==\n       \"20100704T070612\");\n\nassert(DateTime(Date(1998, 12, 25), TimeOfDay(2, 15, 0)).toISOString() ==\n       \"19981225T021500\");\n\nassert(DateTime(Date(0, 1, 5), TimeOfDay(23, 9, 59)).toISOString() ==\n       \"00000105T230959\");\n\nassert(DateTime(Date(-4, 1, 5), TimeOfDay(0, 0, 2)).toISOString() ==\n       \"-00040105T000002\");\n\n\n---\n",
						"endline": 16657
					},
					{
						"kind": "function",
						"line": 16703,
						"deco": "xFNaNbNfZAya",
						"endchar": 5,
						"char": 12,
						"name": "toISOExtString",
						"comment": "        Converts this $(LREF DateTime) to a string with the format\n        YYYY-MM-DDTHH:MM:SS.\nExample:\n\n---\nassert(DateTime(Date(2010, 7, 4), TimeOfDay(7, 6, 12)).toISOExtString() ==\n       \"2010-07-04T07:06:12\");\n\nassert(DateTime(Date(1998, 12, 25), TimeOfDay(2, 15, 0)).toISOExtString() ==\n       \"1998-12-25T02:15:00\");\n\nassert(DateTime(Date(0, 1, 5), TimeOfDay(23, 9, 59)).toISOExtString() ==\n       \"0000-01-05T23:09:59\");\n\nassert(DateTime(Date(-4, 1, 5), TimeOfDay(0, 0, 2)).toISOExtString() ==\n       \"-0004-01-05T00:00:02\");\n\n\n---\n",
						"endline": 16710
					},
					{
						"kind": "function",
						"line": 16755,
						"deco": "xFNaNbNfZAya",
						"endchar": 5,
						"char": 12,
						"name": "toSimpleString",
						"comment": "        Converts this $(LREF DateTime) to a string with the format\n        YYYY-Mon-DD HH:MM:SS.\nExample:\n\n---\nassert(DateTime(Date(2010, 7, 4), TimeOfDay(7, 6, 12)).toSimpleString() ==\n       \"2010-Jul-04 07:06:12\");\n\nassert(DateTime(Date(1998, 12, 25), TimeOfDay(2, 15, 0)).toSimpleString() ==\n       \"1998-Dec-25 02:15:00\");\n\nassert(DateTime(Date(0, 1, 5), TimeOfDay(23, 9, 59)).toSimpleString() ==\n       \"0000-Jan-05 23:09:59\");\n\nassert(DateTime(Date(-4, 1, 5), TimeOfDay(0, 0, 2)).toSimpleString() ==\n       \"-0004-Jan-05 00:00:02\");\n\n\n---\n",
						"endline": 16762
					},
					{
						"kind": "function",
						"line": 16807,
						"deco": "xFNaNbNfZAya",
						"endchar": 5,
						"char": 12,
						"name": "toString",
						"comment": "        Converts this $(LREF DateTime) to a string.\n",
						"endline": 16810
					},
					{
						"kind": "template",
						"line": 16835,
						"constraint": "isSomeString!S",
						"members": [
							{
								"kind": "function",
								"line": 16835,
								"endchar": 5,
								"char": 21,
								"type": "pure @safe DateTime(in S isoString)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "S",
										"name": "isoString"
									}
								],
								"name": "fromISOString",
								"endline": 16854
							}
						],
						"char": 21,
						"parameters": [
							{
								"kind": "type",
								"name": "S"
							}
						],
						"comment": "        Creates a $(LREF DateTime) from a string with the format YYYYMMDDTHHMMSS.\n        Whitespace is stripped from the given string.\n\n        Params:\n            isoString = A string formatted in the ISO format for dates and times.\n\n        Throws:\n            $(LREF DateTimeException) if the given string is not in the ISO format\n            or if the resulting $(LREF DateTime) would not be valid.\nExample:\n\n---\nassert(DateTime.fromISOString(\"20100704T070612\") ==\n       DateTime(Date(2010, 7, 4), TimeOfDay(7, 6, 12)));\n\nassert(DateTime.fromISOString(\"19981225T021500\") ==\n       DateTime(Date(1998, 12, 25), TimeOfDay(2, 15, 0)));\n\nassert(DateTime.fromISOString(\"00000105T230959\") ==\n       DateTime(Date(0, 1, 5), TimeOfDay(23, 9, 59)));\n\nassert(DateTime.fromISOString(\"-00040105T000002\") ==\n       DateTime(Date(-4, 1, 5), TimeOfDay(0, 0, 2)));\n\nassert(DateTime.fromISOString(\" 20100704T070612 \") ==\n       DateTime(Date(2010, 7, 4), TimeOfDay(7, 6, 12)));\n\n\n---\n",
						"name": "fromISOString"
					},
					{
						"kind": "template",
						"line": 16923,
						"constraint": "isSomeString!S",
						"members": [
							{
								"kind": "function",
								"line": 16923,
								"endchar": 5,
								"char": 21,
								"type": "pure @safe DateTime(in S isoExtString)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "S",
										"name": "isoExtString"
									}
								],
								"name": "fromISOExtString",
								"endline": 16942
							}
						],
						"char": 21,
						"parameters": [
							{
								"kind": "type",
								"name": "S"
							}
						],
						"comment": "        Creates a $(LREF DateTime) from a string with the format\n        YYYY-MM-DDTHH:MM:SS. Whitespace is stripped from the given string.\n\n        Params:\n            isoExtString = A string formatted in the ISO Extended format for dates\n                           and times.\n\n        Throws:\n            $(LREF DateTimeException) if the given string is not in the ISO\n            Extended format or if the resulting $(LREF DateTime) would not be\n            valid.\nExample:\n\n---\nassert(DateTime.fromISOExtString(\"2010-07-04T07:06:12\") ==\n       DateTime(Date(2010, 7, 4), TimeOfDay(7, 6, 12)));\n\nassert(DateTime.fromISOExtString(\"1998-12-25T02:15:00\") ==\n       DateTime(Date(1998, 12, 25), TimeOfDay(2, 15, 0)));\n\nassert(DateTime.fromISOExtString(\"0000-01-05T23:09:59\") ==\n       DateTime(Date(0, 1, 5), TimeOfDay(23, 9, 59)));\n\nassert(DateTime.fromISOExtString(\"-0004-01-05T00:00:02\") ==\n       DateTime(Date(-4, 1, 5), TimeOfDay(0, 0, 2)));\n\nassert(DateTime.fromISOExtString(\" 2010-07-04T07:06:12 \") ==\n       DateTime(Date(2010, 7, 4), TimeOfDay(7, 6, 12)));\n\n\n---\n",
						"name": "fromISOExtString"
					},
					{
						"kind": "template",
						"line": 17009,
						"constraint": "isSomeString!S",
						"members": [
							{
								"kind": "function",
								"line": 17009,
								"endchar": 5,
								"char": 21,
								"type": "pure @safe DateTime(in S simpleString)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "S",
										"name": "simpleString"
									}
								],
								"name": "fromSimpleString",
								"endline": 17028
							}
						],
						"char": 21,
						"parameters": [
							{
								"kind": "type",
								"name": "S"
							}
						],
						"comment": "        Creates a $(LREF DateTime) from a string with the format\n        YYYY-Mon-DD HH:MM:SS. Whitespace is stripped from the given string.\n\n        Params:\n            simpleString = A string formatted in the way that toSimpleString\n                           formats dates and times.\n\n        Throws:\n            $(LREF DateTimeException) if the given string is not in the correct\n            format or if the resulting $(LREF DateTime) would not be valid.\nExample:\n\n---\nassert(DateTime.fromSimpleString(\"2010-Jul-04 07:06:12\") ==\n       DateTime(Date(2010, 7, 4), TimeOfDay(7, 6, 12)));\nassert(DateTime.fromSimpleString(\"1998-Dec-25 02:15:00\") ==\n       DateTime(Date(1998, 12, 25), TimeOfDay(2, 15, 0)));\nassert(DateTime.fromSimpleString(\"0000-Jan-05 23:09:59\") ==\n       DateTime(Date(0, 1, 5), TimeOfDay(23, 9, 59)));\nassert(DateTime.fromSimpleString(\"-0004-Jan-05 00:00:02\") ==\n       DateTime(Date(-4, 1, 5), TimeOfDay(0, 0, 2)));\nassert(DateTime.fromSimpleString(\" 2010-Jul-04 07:06:12 \") ==\n       DateTime(Date(2010, 7, 4), TimeOfDay(7, 6, 12)));\n\n\n---\n",
						"name": "fromSimpleString"
					},
					{
						"kind": "function",
						"line": 17084,
						"storageClass": [
							"static"
						],
						"deco": "FNaNbNdNfZS3std8datetime8DateTime",
						"endchar": 5,
						"char": 31,
						"name": "min",
						"comment": "        Returns the $(LREF DateTime) farthest in the past which is representable by\n        $(LREF DateTime).\n",
						"endline": 17098
					},
					{
						"kind": "function",
						"line": 17111,
						"storageClass": [
							"static"
						],
						"deco": "FNaNbNdNfZS3std8datetime8DateTime",
						"endchar": 5,
						"char": 31,
						"name": "max",
						"comment": "        Returns the $(LREF DateTime) farthest in the future which is representable\n        by $(LREF DateTime).\n",
						"endline": 17128
					}
				],
				"char": 1,
				"name": "DateTime",
				"comment": "   Combines the $(LREF Date) and $(LREF TimeOfDay) structs to give an object\n   which holds both the date and the time. It is optimized for calendar-based\n   operations and has no concept of time zone. For an object which is\n   optimized for time operations based on the system time, use\n   $(LREF SysTime). $(LREF SysTime) has a concept of time zone and has much higher\n   precision (hnsecs). $(D DateTime) is intended primarily for calendar-based\n   uses rather than precise time operations.\n"
			},
			{
				"kind": "template",
				"line": 17373,
				"members": [
					{
						"kind": "struct",
						"line": 17373,
						"members": [
							{
								"kind": "template",
								"line": 17391,
								"constraint": "is(Unqual!TP == Unqual!U)",
								"members": [
									{
										"kind": "constructor",
										"line": 17391,
										"endchar": 5,
										"char": 5,
										"type": "pure (in TP begin, in U end)",
										"parameters": [
											{
												"storageClass": [
													"in"
												],
												"type": "TP",
												"name": "begin"
											},
											{
												"storageClass": [
													"in"
												],
												"type": "U",
												"name": "end"
											}
										],
										"name": "this",
										"endline": 17399
									}
								],
								"char": 5,
								"parameters": [
									{
										"kind": "type",
										"name": "U"
									}
								],
								"comment": "        Params:\n            begin = The time point which begins the interval.\n            end   = The time point which ends (but is not included in) the\n                    interval.\n\n        Throws:\n            $(LREF DateTimeException) if $(D_PARAM end) is before $(D_PARAM begin).\n\n        Examples:\n--------------------\nInterval!Date(Date(1996, 1, 2), Date(2012, 3, 1));\n--------------------\n",
								"name": "this"
							},
							{
								"kind": "template",
								"line": 17417,
								"constraint": "__traits(compiles, begin + duration)",
								"members": [
									{
										"kind": "constructor",
										"line": 17417,
										"endchar": 5,
										"char": 5,
										"type": "pure (in TP begin, in D duration)",
										"parameters": [
											{
												"storageClass": [
													"in"
												],
												"type": "TP",
												"name": "begin"
											},
											{
												"storageClass": [
													"in"
												],
												"type": "D",
												"name": "duration"
											}
										],
										"name": "this",
										"endline": 17425
									}
								],
								"char": 5,
								"parameters": [
									{
										"kind": "type",
										"name": "D"
									}
								],
								"comment": "        Params:\n            begin    = The time point which begins the interval.\n            duration = The duration from the starting point to the end point.\n\n        Throws:\n            $(LREF DateTimeException) if the resulting $(D end) is before\n            $(D begin).\n\n        Examples:\n--------------------\nassert(Interval!Date(Date(1996, 1, 2), dur!\"years\"(3)) ==\n       Interval!Date(Date(1996, 1, 2), Date(1999, 1, 2)));\n--------------------\n",
								"name": "this"
							},
							{
								"kind": "function",
								"line": 17432,
								"endchar": 5,
								"char": 18,
								"type": "pure nothrow ref Interval(ref const Interval rhs)",
								"parameters": [
									{
										"storageClass": [
											"const",
											"ref"
										],
										"type": "Interval",
										"name": "rhs"
									}
								],
								"name": "opAssign",
								"comment": "        Params:\n            rhs = The $(LREF2 .Interval, Interval) to assign to this one.\n",
								"endline": 17437
							},
							{
								"kind": "function",
								"line": 17444,
								"endchar": 5,
								"char": 18,
								"type": "pure nothrow ref Interval(Interval rhs)",
								"parameters": [
									{
										"type": "Interval",
										"name": "rhs"
									}
								],
								"name": "opAssign",
								"comment": "        Params:\n            rhs = The $(LREF2 .Interval, Interval) to assign to this one.\n",
								"endline": 17449
							},
							{
								"kind": "function",
								"line": 17461,
								"endchar": 5,
								"char": 18,
								"type": "const pure nothrow @property TP()",
								"name": "begin",
								"comment": "        The starting point of the interval. It is included in the interval.\n\n        Examples:\n--------------------\nassert(Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).begin ==\n       Date(1996, 1, 2));\n--------------------\n",
								"endline": 17464
							},
							{
								"kind": "function",
								"line": 17476,
								"endchar": 5,
								"char": 20,
								"type": "pure @property void(TP timePoint)",
								"parameters": [
									{
										"type": "TP",
										"name": "timePoint"
									}
								],
								"name": "begin",
								"comment": "        The starting point of the interval. It is included in the interval.\n\n        Params:\n            timePoint = The time point to set $(D begin) to.\n\n        Throws:\n            $(LREF DateTimeException) if the resulting interval would be invalid.\n",
								"endline": 17482
							},
							{
								"kind": "function",
								"line": 17494,
								"endchar": 5,
								"char": 18,
								"type": "const pure nothrow @property TP()",
								"name": "end",
								"comment": "        The end point of the interval. It is excluded from the interval.\n\n        Examples:\n--------------------\nassert(Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).end ==\n       Date(2012, 3, 1));\n--------------------\n",
								"endline": 17497
							},
							{
								"kind": "function",
								"line": 17509,
								"endchar": 5,
								"char": 20,
								"type": "pure @property void(TP timePoint)",
								"parameters": [
									{
										"type": "TP",
										"name": "timePoint"
									}
								],
								"name": "end",
								"comment": "        The end point of the interval. It is excluded from the interval.\n\n        Params:\n            timePoint = The time point to set end to.\n\n        Throws:\n            $(LREF DateTimeException) if the resulting interval would be invalid.\n",
								"endline": 17515
							},
							{
								"kind": "function",
								"line": 17527,
								"storageClass": [
									"auto"
								],
								"endchar": 5,
								"char": 20,
								"type": "const pure nothrow @property ()",
								"name": "length",
								"comment": "        Returns the duration between $(D begin) and $(D end).\n\n        Examples:\n--------------------\nassert(Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).length ==\n       dur!\"days\"(5903));\n--------------------\n",
								"endline": 17530
							},
							{
								"kind": "function",
								"line": 17542,
								"endchar": 5,
								"char": 20,
								"type": "const pure nothrow @property bool()",
								"name": "empty",
								"comment": "        Whether the interval's length is 0, that is, whether $(D begin == end).\n\n        Examples:\n--------------------\nassert(Interval!Date(Date(1996, 1, 2), Date(1996, 1, 2)).empty);\nassert(!Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).empty);\n--------------------\n",
								"endline": 17545
							},
							{
								"kind": "function",
								"line": 17568,
								"endchar": 5,
								"char": 10,
								"type": "const pure bool(in TP timePoint)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "TP",
										"name": "timePoint"
									}
								],
								"name": "contains",
								"comment": "        Whether the given time point is within this interval.\n\n        Params:\n            timePoint = The time point to check for inclusion in this interval.\n\n        Throws:\n            $(LREF DateTimeException) if this interval is empty.\n\n        Examples:\n--------------------\nassert(!Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).contains(\n            Date(1994, 12, 24)));\n\nassert(Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).contains(\n            Date(2000, 1, 5)));\nassert(!Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).contains(\n            Date(2012, 3, 1)));\n--------------------\n",
								"endline": 17573
							},
							{
								"kind": "function",
								"line": 17597,
								"endchar": 5,
								"char": 10,
								"type": "const pure bool(in Interval interval)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "Interval",
										"name": "interval"
									}
								],
								"name": "contains",
								"comment": "        Whether the given interval is completely within this interval.\n\n        Params:\n            interval = The interval to check for inclusion in this interval.\n\n        Throws:\n            $(LREF DateTimeException) if either interval is empty.\n\n        Examples:\n--------------------\nassert(!Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).contains(\n            Interval!Date(Date(1990, 7, 6), Date(2000, 8, 2))));\n\nassert(Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).contains(\n            Interval!Date(Date(1999, 1, 12), Date(2011, 9, 17))));\n\nassert(!Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).contains(\n            Interval!Date(Date(1998, 2, 28), Date(2013, 5, 1))));\n--------------------\n",
								"endline": 17605
							},
							{
								"kind": "function",
								"line": 17627,
								"endchar": 5,
								"char": 10,
								"type": "const pure bool(in PosInfInterval!TP interval)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "PosInfInterval!TP",
										"name": "interval"
									}
								],
								"name": "contains",
								"comment": "        Whether the given interval is completely within this interval.\n\n        Always returns false (unless this interval is empty), because an\n        interval going to positive infinity can never be contained in a finite\n        interval.\n\n        Params:\n            interval = The interval to check for inclusion in this interval.\n\n        Throws:\n            $(LREF DateTimeException) if this interval is empty.\n\n        Examples:\n--------------------\nassert(!Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).contains(\n            PosInfInterval!Date(Date(1999, 5, 4))));\n--------------------\n",
								"endline": 17632
							},
							{
								"kind": "function",
								"line": 17654,
								"endchar": 5,
								"char": 10,
								"type": "const pure bool(in NegInfInterval!TP interval)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "NegInfInterval!TP",
										"name": "interval"
									}
								],
								"name": "contains",
								"comment": "        Whether the given interval is completely within this interval.\n\n        Always returns false (unless this interval is empty), because an\n        interval beginning at negative infinity can never be contained in a\n        finite interval.\n\n        Params:\n            interval = The interval to check for inclusion in this interval.\n\n        Throws:\n            $(LREF DateTimeException) if this interval is empty.\n\n        Examples:\n--------------------\nassert(!Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).contains(\n            NegInfInterval!Date(Date(1996, 5, 4))));\n--------------------\n",
								"endline": 17659
							},
							{
								"kind": "function",
								"line": 17684,
								"endchar": 5,
								"char": 10,
								"type": "const pure bool(in TP timePoint)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "TP",
										"name": "timePoint"
									}
								],
								"name": "isBefore",
								"comment": "        Whether this interval is before the given time point.\n\n        Params:\n            timePoint = The time point to check whether this interval is before\n                        it.\n\n        Throws:\n            $(LREF DateTimeException) if this interval is empty.\n\n        Examples:\n--------------------\nassert(!Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).isBefore(\n            Date(1994, 12, 24)));\n\nassert(!Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).isBefore(\n            Date(2000, 1, 5)));\n\nassert(Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).isBefore(\n            Date(2012, 3, 1)));\n--------------------\n",
								"endline": 17689
							},
							{
								"kind": "function",
								"line": 17714,
								"endchar": 5,
								"char": 10,
								"type": "const pure bool(in Interval interval)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "Interval",
										"name": "interval"
									}
								],
								"name": "isBefore",
								"comment": "        Whether this interval is before the given interval and does not\n        intersect with it.\n\n        Params:\n            interval = The interval to check for against this interval.\n\n        Throws:\n            $(LREF DateTimeException) if either interval is empty.\n\n        Examples:\n--------------------\nassert(!Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).isBefore(\n            Interval!Date(Date(1990, 7, 6), Date(2000, 8, 2))));\n\nassert(!Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).isBefore(\n            Interval!Date(Date(1999, 1, 12), Date(2011, 9, 17))));\n\nassert(Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).isBefore(\n            Interval!Date(Date(2012, 3, 1), Date(2013, 5, 1))));\n--------------------\n",
								"endline": 17720
							},
							{
								"kind": "function",
								"line": 17742,
								"endchar": 5,
								"char": 10,
								"type": "const pure bool(in PosInfInterval!TP interval)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "PosInfInterval!TP",
										"name": "interval"
									}
								],
								"name": "isBefore",
								"comment": "        Whether this interval is before the given interval and does not\n        intersect with it.\n\n        Params:\n            interval = The interval to check for against this interval.\n\n        Throws:\n            $(LREF DateTimeException) if this interval is empty.\n\n        Examples:\n--------------------\nassert(!Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).isBefore(\n            PosInfInterval!Date(Date(1999, 5, 4))));\n\nassert(Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).isBefore(\n            PosInfInterval!Date(Date(2013, 3, 7))));\n--------------------\n",
								"endline": 17747
							},
							{
								"kind": "function",
								"line": 17769,
								"endchar": 5,
								"char": 10,
								"type": "const pure bool(in NegInfInterval!TP interval)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "NegInfInterval!TP",
										"name": "interval"
									}
								],
								"name": "isBefore",
								"comment": "        Whether this interval is before the given interval and does not\n        intersect with it.\n\n        Always returns false (unless this interval is empty) because a finite\n        interval can never be before an interval beginning at negative infinity.\n\n        Params:\n            interval = The interval to check for against this interval.\n\n        Throws:\n            $(LREF DateTimeException) if this interval is empty.\n\n        Examples:\n--------------------\nassert(!Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).isBefore(\n            NegInfInterval!Date(Date(1996, 5, 4))));\n--------------------\n",
								"endline": 17774
							},
							{
								"kind": "function",
								"line": 17799,
								"endchar": 5,
								"char": 10,
								"type": "const pure bool(in TP timePoint)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "TP",
										"name": "timePoint"
									}
								],
								"name": "isAfter",
								"comment": "        Whether this interval is after the given time point.\n\n        Params:\n            timePoint = The time point to check whether this interval is after\n                        it.\n\n        Throws:\n            $(LREF DateTimeException) if this interval is empty.\n\n        Examples:\n--------------------\nassert(Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).isAfter(\n            Date(1994, 12, 24)));\n\nassert(!Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).isAfter(\n            Date(2000, 1, 5)));\n\nassert(!Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).isAfter(\n            Date(2012, 3, 1)));\n--------------------\n",
								"endline": 17804
							},
							{
								"kind": "function",
								"line": 17829,
								"endchar": 5,
								"char": 10,
								"type": "const pure bool(in Interval interval)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "Interval",
										"name": "interval"
									}
								],
								"name": "isAfter",
								"comment": "        Whether this interval is after the given interval and does not intersect\n        it.\n\n        Params:\n            interval = The interval to check against this interval.\n\n        Throws:\n            $(LREF DateTimeException) if either interval is empty.\n\n        Examples:\n--------------------\nassert(!Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).isAfter(\n            Interval!Date(Date(1990, 7, 6), Date(2000, 8, 2))));\n\nassert(!Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).isAfter(\n            Interval!Date(Date(1999, 1, 12), Date(2011, 9, 17))));\n\nassert(Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).isAfter(\n            Interval!Date(Date(1989, 3, 1), Date(1996, 1, 2))));\n--------------------\n",
								"endline": 17835
							},
							{
								"kind": "function",
								"line": 17857,
								"endchar": 5,
								"char": 10,
								"type": "const pure bool(in PosInfInterval!TP interval)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "PosInfInterval!TP",
										"name": "interval"
									}
								],
								"name": "isAfter",
								"comment": "        Whether this interval is after the given interval and does not intersect\n        it.\n\n        Always returns false (unless this interval is empty) because a finite\n        interval can never be after an interval going to positive infinity.\n\n        Params:\n            interval = The interval to check against this interval.\n\n        Throws:\n            $(LREF DateTimeException) if this interval is empty.\n\n        Examples:\n--------------------\nassert(!Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).isAfter(\n            PosInfInterval!Date(Date(1999, 5, 4))));\n--------------------\n",
								"endline": 17862
							},
							{
								"kind": "function",
								"line": 17881,
								"endchar": 5,
								"char": 10,
								"type": "const pure bool(in NegInfInterval!TP interval)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "NegInfInterval!TP",
										"name": "interval"
									}
								],
								"name": "isAfter",
								"comment": "        Whether this interval is after the given interval and does not intersect\n        it.\n\n        Params:\n            interval = The interval to check against this interval.\n\n        Throws:\n            $(LREF DateTimeException) if this interval is empty.\n\n        Examples:\n--------------------\nassert(Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).isAfter(\n            NegInfInterval!Date(Date(1996, 1, 2))));\n--------------------\n",
								"endline": 17886
							},
							{
								"kind": "function",
								"line": 17910,
								"endchar": 5,
								"char": 10,
								"type": "const pure bool(in Interval interval)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "Interval",
										"name": "interval"
									}
								],
								"name": "intersects",
								"comment": "        Whether the given interval overlaps this interval.\n\n        Params:\n            interval = The interval to check for intersection with this interval.\n\n        Throws:\n            $(LREF DateTimeException) if either interval is empty.\n\n        Examples:\n--------------------\nassert(Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).intersects(\n            Interval!Date(Date(1990, 7, 6), Date(2000, 8, 2))));\n\nassert(Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).intersects(\n            Interval!Date(Date(1999, 1, 12), Date(2011, 9, 17))));\n\nassert(!Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).intersects(\n            Interval!Date(Date(1989, 3, 1), Date(1996, 1, 2))));\n--------------------\n",
								"endline": 17916
							},
							{
								"kind": "function",
								"line": 17937,
								"endchar": 5,
								"char": 10,
								"type": "const pure bool(in PosInfInterval!TP interval)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "PosInfInterval!TP",
										"name": "interval"
									}
								],
								"name": "intersects",
								"comment": "        Whether the given interval overlaps this interval.\n\n        Params:\n            interval = The interval to check for intersection with this interval.\n\n        Throws:\n            $(LREF DateTimeException) if this interval is empty.\n\n        Examples:\n--------------------\nassert(Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).intersects(\n            PosInfInterval!Date(Date(1999, 5, 4))));\n\nassert(!Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).intersects(\n            PosInfInterval!Date(Date(2012, 3, 1))));\n--------------------\n",
								"endline": 17942
							},
							{
								"kind": "function",
								"line": 17963,
								"endchar": 5,
								"char": 10,
								"type": "const pure bool(in NegInfInterval!TP interval)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "NegInfInterval!TP",
										"name": "interval"
									}
								],
								"name": "intersects",
								"comment": "        Whether the given interval overlaps this interval.\n\n        Params:\n            interval = The interval to check for intersection with this interval.\n\n        Throws:\n            $(LREF DateTimeException) if this interval is empty.\n\n        Examples:\n--------------------\nassert(!Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).intersects(\n            NegInfInterval!Date(Date(1996, 1, 2))));\n\nassert(Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).intersects(\n            NegInfInterval!Date(Date(2000, 1, 2))));\n--------------------\n",
								"endline": 17968
							},
							{
								"kind": "function",
								"line": 17992,
								"endchar": 5,
								"char": 14,
								"type": "const Interval(in Interval interval)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "Interval",
										"name": "interval"
									}
								],
								"name": "intersection",
								"comment": "        Returns the intersection of two intervals\n\n        Params:\n            interval = The interval to intersect with this interval.\n\n        Throws:\n            $(LREF DateTimeException) if the two intervals do not intersect or if\n            either interval is empty.\n\n        Examples:\n--------------------\nassert(Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).intersection(\n            Interval!Date(Date(1990, 7, 6), Date(2000, 8, 2))) ==\n       Interval!Date(Date(1996, 1 , 2), Date(2000, 8, 2)));\n\nassert(Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).intersection(\n            Interval!Date(Date(1999, 1, 12), Date(2011, 9, 17))) ==\n       Interval!Date(Date(1999, 1 , 12), Date(2011, 9, 17)));\n--------------------\n",
								"endline": 18002
							},
							{
								"kind": "function",
								"line": 18026,
								"endchar": 5,
								"char": 14,
								"type": "const Interval(in PosInfInterval!TP interval)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "PosInfInterval!TP",
										"name": "interval"
									}
								],
								"name": "intersection",
								"comment": "        Returns the intersection of two intervals\n\n        Params:\n            interval = The interval to intersect with this interval.\n\n        Throws:\n            $(LREF DateTimeException) if the two intervals do not intersect or if\n            this interval is empty.\n\n        Examples:\n--------------------\nassert(Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).intersection(\n            PosInfInterval!Date(Date(1990, 7, 6))) ==\n       Interval!Date(Date(1996, 1 , 2), Date(2012, 3, 1)));\n\nassert(Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).intersection(\n            PosInfInterval!Date(Date(1999, 1, 12))) ==\n       Interval!Date(Date(1999, 1 , 12), Date(2012, 3, 1)));\n--------------------\n",
								"endline": 18033
							},
							{
								"kind": "function",
								"line": 18057,
								"endchar": 5,
								"char": 14,
								"type": "const Interval(in NegInfInterval!TP interval)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "NegInfInterval!TP",
										"name": "interval"
									}
								],
								"name": "intersection",
								"comment": "        Returns the intersection of two intervals\n\n        Params:\n            interval = The interval to intersect with this interval.\n\n        Throws:\n            $(LREF DateTimeException) if the two intervals do not intersect or if\n            this interval is empty.\n\n        Examples:\n--------------------\nassert(Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).intersection(\n            NegInfInterval!Date(Date(1999, 7, 6))) ==\n       Interval!Date(Date(1996, 1 , 2), Date(1999, 7, 6)));\n\nassert(Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).intersection(\n            NegInfInterval!Date(Date(2013, 1, 12))) ==\n       Interval!Date(Date(1996, 1 , 2), Date(2012, 3, 1)));\n--------------------\n",
								"endline": 18064
							},
							{
								"kind": "function",
								"line": 18089,
								"endchar": 5,
								"char": 10,
								"type": "const pure bool(in Interval interval)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "Interval",
										"name": "interval"
									}
								],
								"name": "isAdjacent",
								"comment": "        Whether the given interval is adjacent to this interval.\n\n        Params:\n            interval = The interval to check whether its adjecent to this\n                       interval.\n\n        Throws:\n            $(LREF DateTimeException) if either interval is empty.\n\n        Examples:\n--------------------\nassert(Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).isAdjacent(\n            Interval!Date(Date(1990, 7, 6), Date(1996, 1, 2))));\n\nassert(Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).isAdjacent(\n            Interval!Date(Date(2012, 3, 1), Date(2013, 9, 17))));\n\nassert(!Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).isAdjacent(\n            Interval!Date(Date(1989, 3, 1), Date(2012, 3, 1))));\n--------------------\n",
								"endline": 18095
							},
							{
								"kind": "function",
								"line": 18117,
								"endchar": 5,
								"char": 10,
								"type": "const pure bool(in PosInfInterval!TP interval)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "PosInfInterval!TP",
										"name": "interval"
									}
								],
								"name": "isAdjacent",
								"comment": "        Whether the given interval is adjacent to this interval.\n\n        Params:\n            interval = The interval to check whether its adjecent to this\n                       interval.\n\n        Throws:\n            $(LREF DateTimeException) if this interval is empty.\n\n        Examples:\n--------------------\nassert(!Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).isAdjacent(\n            PosInfInterval!Date(Date(1999, 5, 4))));\n\nassert(Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).isAdjacent(\n            PosInfInterval!Date(Date(2012, 3, 1))));\n--------------------\n",
								"endline": 18122
							},
							{
								"kind": "function",
								"line": 18144,
								"endchar": 5,
								"char": 10,
								"type": "const pure bool(in NegInfInterval!TP interval)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "NegInfInterval!TP",
										"name": "interval"
									}
								],
								"name": "isAdjacent",
								"comment": "        Whether the given interval is adjacent to this interval.\n\n        Params:\n            interval = The interval to check whether its adjecent to this\n                       interval.\n\n        Throws:\n            $(LREF DateTimeException) if this interval is empty.\n\n        Examples:\n--------------------\nassert(Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).isAdjacent(\n            NegInfInterval!Date(Date(1996, 1, 2))));\n\nassert(!Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).isAdjacent(\n            NegInfInterval!Date(Date(2000, 1, 2))));\n--------------------\n",
								"endline": 18149
							},
							{
								"kind": "function",
								"line": 18173,
								"endchar": 5,
								"char": 14,
								"type": "const Interval(in Interval interval)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "Interval",
										"name": "interval"
									}
								],
								"name": "merge",
								"comment": "        Returns the union of two intervals\n\n        Params:\n            interval = The interval to merge with this interval.\n\n        Throws:\n            $(LREF DateTimeException) if the two intervals do not intersect and are\n            not adjacent or if either interval is empty.\n\n        Examples:\n--------------------\nassert(Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).merge(\n            Interval!Date(Date(1990, 7, 6), Date(2000, 8, 2))) ==\n       Interval!Date(Date(1990, 7 , 6), Date(2012, 3, 1)));\n\nassert(Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).merge(\n            Interval!Date(Date(2012, 3, 1), Date(2013, 5, 7))) ==\n       Interval!Date(Date(1996, 1 , 2), Date(2013, 5, 7)));\n--------------------\n",
								"endline": 18184
							},
							{
								"kind": "function",
								"line": 18208,
								"endchar": 5,
								"char": 23,
								"type": "const PosInfInterval!TP(in PosInfInterval!TP interval)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "PosInfInterval!TP",
										"name": "interval"
									}
								],
								"name": "merge",
								"comment": "        Returns the union of two intervals\n\n        Params:\n            interval = The interval to merge with this interval.\n\n        Throws:\n            $(LREF DateTimeException) if the two intervals do not intersect and are\n            not adjacent or if this interval is empty.\n\n        Examples:\n--------------------\nassert(Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).merge(\n            PosInfInterval!Date(Date(1990, 7, 6))) ==\n       PosInfInterval!Date(Date(1990, 7 , 6)));\n\nassert(Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).merge(\n            PosInfInterval!Date(Date(2012, 3, 1))) ==\n       PosInfInterval!Date(Date(1996, 1 , 2)));\n--------------------\n",
								"endline": 18216
							},
							{
								"kind": "function",
								"line": 18240,
								"endchar": 5,
								"char": 23,
								"type": "const NegInfInterval!TP(in NegInfInterval!TP interval)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "NegInfInterval!TP",
										"name": "interval"
									}
								],
								"name": "merge",
								"comment": "        Returns the union of two intervals\n\n        Params:\n            interval = The interval to merge with this interval.\n\n        Throws:\n            $(LREF DateTimeException) if the two intervals do not intersect and are not\n            adjacent or if this interval is empty.\n\n        Examples:\n--------------------\nassert(Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).merge(\n            NegInfInterval!Date(Date(1996, 1, 2))) ==\n       NegInfInterval!Date(Date(2012, 3 , 1)));\n\nassert(Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).merge(\n            NegInfInterval!Date(Date(2013, 1, 12))) ==\n       NegInfInterval!Date(Date(2013, 1 , 12)));\n--------------------\n",
								"endline": 18248
							},
							{
								"kind": "function",
								"line": 18273,
								"endchar": 5,
								"char": 14,
								"type": "const pure Interval(in Interval interval)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "Interval",
										"name": "interval"
									}
								],
								"name": "span",
								"comment": "        Returns an interval that covers from the earliest time point of two\n        intervals up to (but not including) the latest time point of two\n        intervals.\n\n        Params:\n            interval = The interval to create a span together with this interval.\n\n        Throws:\n            $(LREF DateTimeException) if either interval is empty.\n\n        Examples:\n--------------------\nassert(Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).span(\n            Interval!Date(Date(1990, 7, 6), Date(1991, 1, 8))) ==\n       Interval!Date(Date(1990, 7 , 6), Date(2012, 3, 1)));\n\nassert(Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).span(\n            Interval!Date(Date(2012, 3, 1), Date(2013, 5, 7))) ==\n       Interval!Date(Date(1996, 1 , 2), Date(2013, 5, 7)));\n--------------------\n",
								"endline": 18282
							},
							{
								"kind": "function",
								"line": 18307,
								"endchar": 5,
								"char": 23,
								"type": "const pure PosInfInterval!TP(in PosInfInterval!TP interval)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "PosInfInterval!TP",
										"name": "interval"
									}
								],
								"name": "span",
								"comment": "        Returns an interval that covers from the earliest time point of two\n        intervals up to (but not including) the latest time point of two\n        intervals.\n\n        Params:\n            interval = The interval to create a span together with this interval.\n\n        Throws:\n            $(LREF DateTimeException) if this interval is empty.\n\n        Examples:\n--------------------\nassert(Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).span(\n            PosInfInterval!Date(Date(1990, 7, 6))) ==\n       PosInfInterval!Date(Date(1990, 7 , 6)));\n\nassert(Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).span(\n            PosInfInterval!Date(Date(2050, 1, 1))) ==\n       PosInfInterval!Date(Date(1996, 1 , 2)));\n--------------------\n",
								"endline": 18312
							},
							{
								"kind": "function",
								"line": 18337,
								"endchar": 5,
								"char": 23,
								"type": "const pure NegInfInterval!TP(in NegInfInterval!TP interval)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "NegInfInterval!TP",
										"name": "interval"
									}
								],
								"name": "span",
								"comment": "        Returns an interval that covers from the earliest time point of two\n        intervals up to (but not including) the latest time point of two\n        intervals.\n\n        Params:\n            interval = The interval to create a span together with this interval.\n\n        Throws:\n            $(LREF DateTimeException) if this interval is empty.\n\n        Examples:\n--------------------\nassert(Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).span(\n            NegInfInterval!Date(Date(1602, 5, 21))) ==\n       NegInfInterval!Date(Date(2012, 3 , 1)));\n\nassert(Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1)).span(\n            NegInfInterval!Date(Date(2013, 1, 12))) ==\n       NegInfInterval!Date(Date(2013, 1 , 12)));\n--------------------\n",
								"endline": 18342
							},
							{
								"kind": "template",
								"line": 18370,
								"constraint": "__traits(compiles, begin + duration)",
								"members": [
									{
										"kind": "function",
										"line": 18370,
										"endchar": 5,
										"char": 10,
										"type": "pure void(D duration)",
										"parameters": [
											{
												"type": "D",
												"name": "duration"
											}
										],
										"name": "shift",
										"endline": 18383
									}
								],
								"char": 10,
								"parameters": [
									{
										"kind": "type",
										"name": "D"
									}
								],
								"comment": "        Shifts the interval forward or backwards in time by the given duration\n        (a positive duration shifts the interval forward; a negative duration\n        shifts it backward). Effectively, it does $(D begin += duration) and\n        $(D end += duration).\n\n        Params:\n            duration = The duration to shift the interval by.\n\n        Throws:\n            $(LREF DateTimeException) this interval is empty or if the resulting\n            interval would be invalid.\n\n        Examples:\n--------------------\nauto interval1 = Interval!Date(Date(1996, 1, 2), Date(2012, 4, 5));\nauto interval2 = Interval!Date(Date(1996, 1, 2), Date(2012, 4, 5));\n\ninterval1.shift(dur!\"days\"(50));\nassert(interval1 == Interval!Date(Date(1996, 2, 21), Date(2012, 5, 25)));\n\ninterval2.shift(dur!\"days\"(-50));\nassert(interval2 == Interval!Date(Date(1995, 11, 13), Date(2012, 2, 15)));\n--------------------\n",
								"name": "shift"
							},
							{
								"kind": "template",
								"line": 18467,
								"constraint": "__traits(compiles, begin + duration)",
								"members": [
									{
										"kind": "function",
										"line": 18467,
										"endchar": 5,
										"char": 10,
										"type": "pure void(D duration, Direction dir = Direction.both)",
										"parameters": [
											{
												"type": "D",
												"name": "duration"
											},
											{
												"default": "Direction.both",
												"type": "Direction",
												"name": "dir"
											}
										],
										"name": "expand",
										"endline": 18510
									}
								],
								"char": 10,
								"parameters": [
									{
										"kind": "type",
										"name": "D"
									}
								],
								"comment": "        Expands the interval forwards and/or backwards in time. Effectively,\n        it does $(D begin -= duration) and/or $(D end += duration). Whether\n        it expands forwards and/or backwards in time is determined by\n        $(D_PARAM dir).\n\n        Params:\n            duration = The duration to expand the interval by.\n            dir      = The direction in time to expand the interval.\n\n        Throws:\n            $(LREF DateTimeException) this interval is empty or if the resulting\n            interval would be invalid.\n\n        Examples:\n--------------------\nauto interval1 = Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1));\nauto interval2 = Interval!Date(Date(1996, 1, 2), Date(2012, 3, 1));\n\ninterval1.expand(2);\nassert(interval1 == Interval!Date(Date(1994, 1, 2), Date(2014, 3, 1)));\n\ninterval2.expand(-2);\nassert(interval2 == Interval!Date(Date(1998, 1, 2), Date(2010, 3, 1)));\n--------------------\n",
								"name": "expand"
							},
							{
								"kind": "function",
								"line": 18679,
								"endchar": 5,
								"char": 39,
								"type": "const IntervalRange!(TP, Direction.fwd)(TP delegate(in TP) func, PopFirst popFirst = PopFirst.no)",
								"parameters": [
									{
										"type": "TP delegate(in TP)",
										"name": "func"
									},
									{
										"default": "PopFirst.no",
										"type": "PopFirst",
										"name": "popFirst"
									}
								],
								"name": "fwdRange",
								"comment": "        Returns a range which iterates forward over the interval, starting\n        at $(D begin), using $(D_PARAM func) to generate each successive time\n        point.\n\n        The range's $(D front) is the interval's $(D begin). $(D_PARAM func) is\n        used to generate the next $(D front) when $(D popFront) is called. If\n        $(D_PARAM popFirst) is $(D PopFirst.yes), then $(D popFront) is called\n        before the range is returned (so that $(D front) is a time point which\n        $(D_PARAM func) would generate).\n\n        If $(D_PARAM func) ever generates a time point less than or equal to the\n        current $(D front) of the range, then a $(LREF DateTimeException) will be\n        thrown. The range will be empty and iteration complete when\n        $(D_PARAM func) generates a time point equal to or beyond the $(D end)\n        of the interval.\n\n        There are helper functions in this module which generate common\n        delegates to pass to $(D fwdRange). Their documentation starts with\n        \"Range-generating function,\" making them easily searchable.\n\n        Params:\n            func     = The function used to generate the time points of the\n                       range over the interval.\n            popFirst = Whether $(D popFront) should be called on the range\n                       before returning it.\n\n        Throws:\n            $(LREF DateTimeException) if this interval is empty.\n\n        Warning:\n            $(D_PARAM func) must be logically pure. Ideally, $(D_PARAM func)\n            would be a function pointer to a pure function, but forcing\n            $(D_PARAM func) to be pure is far too restrictive to be useful, and\n            in order to have the ease of use of having functions which generate\n            functions to pass to $(D fwdRange), $(D_PARAM func) must be a\n            delegate.\n\n            If $(D_PARAM func) retains state which changes as it is called, then\n            some algorithms will not work correctly, because the range's\n            $(D save) will have failed to have really saved the range's state.\n            To avoid such bugs, don't pass a delegate which is\n            not logically pure to $(D fwdRange). If $(D_PARAM func) is given the\n            same time point with two different calls, it must return the same\n            result both times.\n\n            Of course, none of the functions in this module have this problem,\n            so it's only relevant if when creating a custom delegate.\n\n        Examples:\n--------------------\nauto interval = Interval!Date(Date(2010, 9, 1), Date(2010, 9, 9));\nauto func = (in Date date) //For iterating over even-numbered days.\n            {\n                if((date.day & 1) == 0)\n                    return date + dur!\"days\"(2);\n\n                return date + dur!\"days\"(1);\n            };\nauto range = interval.fwdRange(func);\n\n //An odd day. Using PopFirst.yes would have made this Date(2010, 9, 2).\nassert(range.front == Date(2010, 9, 1));\n\nrange.popFront();\nassert(range.front == Date(2010, 9, 2));\n\nrange.popFront();\nassert(range.front == Date(2010, 9, 4));\n\nrange.popFront();\nassert(range.front == Date(2010, 9, 6));\n\nrange.popFront();\nassert(range.front == Date(2010, 9, 8));\n\nrange.popFront();\nassert(range.empty);\n--------------------\n",
								"endline": 18689
							},
							{
								"kind": "function",
								"line": 18772,
								"endchar": 5,
								"char": 39,
								"type": "const IntervalRange!(TP, Direction.bwd)(TP delegate(in TP) func, PopFirst popFirst = PopFirst.no)",
								"parameters": [
									{
										"type": "TP delegate(in TP)",
										"name": "func"
									},
									{
										"default": "PopFirst.no",
										"type": "PopFirst",
										"name": "popFirst"
									}
								],
								"name": "bwdRange",
								"comment": "        Returns a range which iterates backwards over the interval, starting\n        at $(D end), using $(D_PARAM func) to generate each successive time\n        point.\n\n        The range's $(D front) is the interval's $(D end). $(D_PARAM func) is\n        used to generate the next $(D front) when $(D popFront) is called. If\n        $(D_PARAM popFirst) is $(D PopFirst.yes), then $(D popFront) is called\n        before the range is returned (so that $(D front) is a time point which\n        $(D_PARAM func) would generate).\n\n        If $(D_PARAM func) ever generates a time point greater than or equal to\n        the current $(D front) of the range, then a $(LREF DateTimeException) will\n        be thrown. The range will be empty and iteration complete when\n        $(D_PARAM func) generates a time point equal to or less than the\n        $(D begin) of the interval.\n\n        There are helper functions in this module which generate common\n        delegates to pass to $(D bwdRange). Their documentation starts with\n        \"Range-generating function,\" making them easily searchable.\n\n        Params:\n            func     = The function used to generate the time points of the\n                       range over the interval.\n            popFirst = Whether $(D popFront) should be called on the range\n                       before returning it.\n\n        Throws:\n            $(LREF DateTimeException) if this interval is empty.\n\n        Warning:\n            $(D_PARAM func) must be logically pure. Ideally, $(D_PARAM func)\n            would be a function pointer to a pure function, but forcing\n            $(D_PARAM func) to be pure is far too restrictive to be useful, and\n            in order to have the ease of use of having functions which generate\n            functions to pass to $(D fwdRange), $(D_PARAM func) must be a\n            delegate.\n\n            If $(D_PARAM func) retains state which changes as it is called, then\n            some algorithms will not work correctly, because the range's\n            $(D save) will have failed to have really saved the range's state.\n            To avoid such bugs, don't pass a delegate which is\n            not logically pure to $(D fwdRange). If $(D_PARAM func) is given the\n            same time point with two different calls, it must return the same\n            result both times.\n\n            Of course, none of the functions in this module have this problem,\n            so it's only relevant for custom delegates.\n\n        Examples:\n--------------------\nauto interval = Interval!Date(Date(2010, 9, 1), Date(2010, 9, 9));\nauto func = (in Date date) //For iterating over even-numbered days.\n            {\n                if((date.day & 1) == 0)\n                    return date - dur!\"days\"(2);\n\n                return date - dur!\"days\"(1);\n            };\nauto range = interval.bwdRange(func);\n\n//An odd day. Using PopFirst.yes would have made this Date(2010, 9, 8).\nassert(range.front == Date(2010, 9, 9));\n\nrange.popFront();\nassert(range.front == Date(2010, 9, 8));\n\nrange.popFront();\nassert(range.front == Date(2010, 9, 6));\n\nrange.popFront();\nassert(range.front == Date(2010, 9, 4));\n\nrange.popFront();\nassert(range.front == Date(2010, 9, 2));\n\nrange.popFront();\nassert(range.empty);\n--------------------\n",
								"endline": 18782
							},
							{
								"kind": "function",
								"line": 18803,
								"endchar": 5,
								"char": 12,
								"type": "const nothrow string()",
								"name": "toString",
								"comment": "        Converts this interval to a string.\n",
								"endline": 18806
							}
						],
						"char": 1,
						"name": "Interval"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "TP"
					}
				],
				"comment": "    Represents an interval of time.\n\n    An $(D Interval) has a starting point and an end point. The interval of time\n    is therefore the time starting at the starting point up to, but not\n    including, the end point. e.g.\n\n    $(BOOKTABLE,\n    $(TR $(TD [January 5th, 2010 - March 10th, 2010$(RPAREN)))\n    $(TR $(TD [05:00:30 - 12:00:00$(RPAREN)))\n    $(TR $(TD [1982-01-04T08:59:00 - 2010-07-04T12:00:00$(RPAREN)))\n    )\n\n    A range can be obtained from an $(D Interval), allowing iteration over\n    that interval, with the exact time points which are iterated over depending\n    on the function which generates the range.\n",
				"name": "Interval"
			},
			{
				"kind": "template",
				"line": 20284,
				"members": [
					{
						"kind": "struct",
						"line": 20284,
						"members": [
							{
								"kind": "constructor",
								"line": 20297,
								"endchar": 5,
								"char": 5,
								"type": "pure nothrow (in TP begin)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "TP",
										"name": "begin"
									}
								],
								"name": "this",
								"comment": "        Params:\n            begin = The time point which begins the interval.\n\n        Examples:\n--------------------\nauto interval = PosInfInterval!Date(Date(1996, 1, 2));\n--------------------\n",
								"endline": 20300
							},
							{
								"kind": "function",
								"line": 20307,
								"endchar": 5,
								"char": 24,
								"type": "pure nothrow ref PosInfInterval(ref const PosInfInterval rhs)",
								"parameters": [
									{
										"storageClass": [
											"const",
											"ref"
										],
										"type": "PosInfInterval",
										"name": "rhs"
									}
								],
								"name": "opAssign",
								"comment": "        Params:\n            rhs = The $(D PosInfInterval) to assign to this one.\n",
								"endline": 20311
							},
							{
								"kind": "function",
								"line": 20318,
								"endchar": 5,
								"char": 24,
								"type": "pure nothrow ref PosInfInterval(PosInfInterval rhs)",
								"parameters": [
									{
										"type": "PosInfInterval",
										"name": "rhs"
									}
								],
								"name": "opAssign",
								"comment": "        Params:\n            rhs = The $(D PosInfInterval) to assign to this one.\n",
								"endline": 20322
							},
							{
								"kind": "function",
								"line": 20333,
								"endchar": 5,
								"char": 18,
								"type": "const pure nothrow @property TP()",
								"name": "begin",
								"comment": "        The starting point of the interval. It is included in the interval.\n\n        Examples:\n--------------------\nassert(PosInfInterval!Date(Date(1996, 1, 2)).begin == Date(1996, 1, 2));\n--------------------\n",
								"endline": 20336
							},
							{
								"kind": "function",
								"line": 20345,
								"endchar": 5,
								"char": 20,
								"type": "pure nothrow @property void(TP timePoint)",
								"parameters": [
									{
										"type": "TP",
										"name": "timePoint"
									}
								],
								"name": "begin",
								"comment": "        The starting point of the interval. It is included in the interval.\n\n        Params:\n            timePoint = The time point to set $(D begin) to.\n",
								"endline": 20348
							},
							{
								"kind": "function",
								"line": 20359,
								"endchar": 5,
								"char": 20,
								"type": "const pure nothrow @property bool()",
								"name": "empty",
								"comment": "        Whether the interval's length is 0. Always returns false.\n\n        Examples:\n--------------------\nassert(!PosInfInterval!Date(Date(1996, 1, 2)).empty);\n--------------------\n",
								"endline": 20362
							},
							{
								"kind": "function",
								"line": 20377,
								"endchar": 5,
								"char": 10,
								"type": "const pure nothrow bool(TP timePoint)",
								"parameters": [
									{
										"type": "TP",
										"name": "timePoint"
									}
								],
								"name": "contains",
								"comment": "        Whether the given time point is within this interval.\n\n        Params:\n            timePoint = The time point to check for inclusion in this interval.\n\n        Examples:\n--------------------\nassert(!PosInfInterval!Date(Date(1996, 1, 2)).contains(Date(1994, 12, 24)));\nassert(PosInfInterval!Date(Date(1996, 1, 2)).contains(Date(2000, 1, 5)));\n--------------------\n",
								"endline": 20380
							},
							{
								"kind": "function",
								"line": 20404,
								"endchar": 5,
								"char": 10,
								"type": "const pure bool(in Interval!TP interval)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "Interval!TP",
										"name": "interval"
									}
								],
								"name": "contains",
								"comment": "        Whether the given interval is completely within this interval.\n\n        Params:\n            interval = The interval to check for inclusion in this interval.\n\n        Throws:\n            $(LREF DateTimeException) if the given interval is empty.\n\n        Examples:\n--------------------\nassert(!PosInfInterval!Date(Date(1996, 1, 2)).contains(\n            Interval!Date(Date(1990, 7, 6), Date(2000, 8, 2))));\n\nassert(PosInfInterval!Date(Date(1996, 1, 2)).contains(\n            Interval!Date(Date(1999, 1, 12), Date(2011, 9, 17))));\n\nassert(PosInfInterval!Date(Date(1996, 1, 2)).contains(\n            Interval!Date(Date(1998, 2, 28), Date(2013, 5, 1))));\n--------------------\n",
								"endline": 20409
							},
							{
								"kind": "function",
								"line": 20427,
								"endchar": 5,
								"char": 10,
								"type": "const pure nothrow bool(in PosInfInterval interval)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "PosInfInterval",
										"name": "interval"
									}
								],
								"name": "contains",
								"comment": "        Whether the given interval is completely within this interval.\n\n        Params:\n            interval = The interval to check for inclusion in this interval.\n\n        Examples:\n--------------------\nassert(PosInfInterval!Date(Date(1996, 1, 2)).contains(\n            PosInfInterval!Date(Date(1999, 5, 4))));\n\nassert(!PosInfInterval!Date(Date(1996, 1, 2)).contains(\n            PosInfInterval!Date(Date(1995, 7, 2))));\n--------------------\n",
								"endline": 20430
							},
							{
								"kind": "function",
								"line": 20448,
								"endchar": 5,
								"char": 10,
								"type": "const pure nothrow bool(in NegInfInterval!TP interval)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "NegInfInterval!TP",
										"name": "interval"
									}
								],
								"name": "contains",
								"comment": "        Whether the given interval is completely within this interval.\n\n        Always returns false because an interval going to positive infinity\n        can never contain an interval beginning at negative infinity.\n\n        Params:\n            interval = The interval to check for inclusion in this interval.\n\n        Examples:\n--------------------\nassert(!PosInfInterval!Date(Date(1996, 1, 2)).contains(\n            NegInfInterval!Date(Date(1996, 5, 4))));\n--------------------\n",
								"endline": 20451
							},
							{
								"kind": "function",
								"line": 20470,
								"endchar": 5,
								"char": 10,
								"type": "const pure nothrow bool(in TP timePoint)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "TP",
										"name": "timePoint"
									}
								],
								"name": "isBefore",
								"comment": "        Whether this interval is before the given time point.\n\n        Always returns false because an interval going to positive infinity\n        can never be before any time point.\n\n        Params:\n            timePoint = The time point to check whether this interval is before\n                        it.\n\n        Examples:\n--------------------\nassert(!PosInfInterval!Date(Date(1996, 1, 2)).isBefore(Date(1994, 12, 24)));\nassert(!PosInfInterval!Date(Date(1996, 1, 2)).isBefore(Date(2000, 1, 5)));\n--------------------\n",
								"endline": 20473
							},
							{
								"kind": "function",
								"line": 20499,
								"endchar": 5,
								"char": 10,
								"type": "const pure bool(in Interval!TP interval)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "Interval!TP",
										"name": "interval"
									}
								],
								"name": "isBefore",
								"comment": "        Whether this interval is before the given interval and does not\n        intersect it.\n\n        Always returns false (unless the given interval is empty) because an\n        interval going to positive infinity can never be before any other\n        interval.\n\n        Params:\n            interval = The interval to check for against this interval.\n\n        Throws:\n            $(LREF DateTimeException) if the given interval is empty.\n\n        Examples:\n--------------------\nassert(!PosInfInterval!Date(Date(1996, 1, 2)).isBefore(\n            Interval!Date(Date(1990, 7, 6), Date(2000, 8, 2))));\n\nassert(!PosInfInterval!Date(Date(1996, 1, 2)).isBefore(\n            Interval!Date(Date(1999, 1, 12), Date(2011, 9, 17))));\n--------------------\n",
								"endline": 20504
							},
							{
								"kind": "function",
								"line": 20526,
								"endchar": 5,
								"char": 10,
								"type": "const pure nothrow bool(in PosInfInterval interval)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "PosInfInterval",
										"name": "interval"
									}
								],
								"name": "isBefore",
								"comment": "        Whether this interval is before the given interval and does not\n        intersect it.\n\n        Always returns false because an interval going to positive infinity can\n        never be before any other interval.\n\n        Params:\n            interval = The interval to check for against this interval.\n\n        Examples:\n--------------------\nassert(!PosInfInterval!Date(Date(1996, 1, 2)).isBefore(\n            PosInfInterval!Date(Date(1992, 5, 4))));\n\nassert(!PosInfInterval!Date(Date(1996, 1, 2)).isBefore(\n            PosInfInterval!Date(Date(2013, 3, 7))));\n--------------------\n",
								"endline": 20529
							},
							{
								"kind": "function",
								"line": 20548,
								"endchar": 5,
								"char": 10,
								"type": "const pure nothrow bool(in NegInfInterval!TP interval)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "NegInfInterval!TP",
										"name": "interval"
									}
								],
								"name": "isBefore",
								"comment": "        Whether this interval is before the given interval and does not\n        intersect it.\n\n        Always returns false because an interval going to positive infinity can\n        never be before any other interval.\n\n        Params:\n            interval = The interval to check for against this interval.\n\n        Examples:\n--------------------\nassert(!PosInfInterval!Date(Date(1996, 1, 2)).isBefore(\n            NegInfInterval!Date(Date(1996, 5, 4))));\n--------------------\n",
								"endline": 20551
							},
							{
								"kind": "function",
								"line": 20567,
								"endchar": 5,
								"char": 10,
								"type": "const pure nothrow bool(in TP timePoint)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "TP",
										"name": "timePoint"
									}
								],
								"name": "isAfter",
								"comment": "        Whether this interval is after the given time point.\n\n        Params:\n            timePoint = The time point to check whether this interval is after\n                        it.\n\n        Examples:\n--------------------\nassert(PosInfInterval!Date(Date(1996, 1, 2)).isAfter(Date(1994, 12, 24)));\nassert(!PosInfInterval!Date(Date(1996, 1, 2)).isAfter(Date(2000, 1, 5)));\n--------------------\n",
								"endline": 20570
							},
							{
								"kind": "function",
								"line": 20595,
								"endchar": 5,
								"char": 10,
								"type": "const pure bool(in Interval!TP interval)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "Interval!TP",
										"name": "interval"
									}
								],
								"name": "isAfter",
								"comment": "        Whether this interval is after the given interval and does not intersect\n        it.\n\n        Params:\n            interval = The interval to check against this interval.\n\n        Throws:\n            $(LREF DateTimeException) if the given interval is empty.\n\n        Examples:\n--------------------\nassert(!PosInfInterval!Date(Date(1996, 1, 2)).isAfter(\n            Interval!Date(Date(1990, 7, 6), Date(2000, 8, 2))));\n\nassert(!PosInfInterval!Date(Date(1996, 1, 2)).isAfter(\n            Interval!Date(Date(1999, 1, 12), Date(2011, 9, 17))));\n\nassert(PosInfInterval!Date(Date(1996, 1, 2)).isAfter(\n            Interval!Date(Date(1989, 3, 1), Date(1996, 1, 2))));\n--------------------\n",
								"endline": 20600
							},
							{
								"kind": "function",
								"line": 20622,
								"endchar": 5,
								"char": 10,
								"type": "const pure nothrow bool(in PosInfInterval interval)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "PosInfInterval",
										"name": "interval"
									}
								],
								"name": "isAfter",
								"comment": "        Whether this interval is after the given interval and does not intersect\n        it.\n\n        Always returns false because an interval going to positive infinity can\n        never be after another interval going to positive infinity.\n\n        Params:\n            interval = The interval to check against this interval.\n\n        Examples:\n--------------------\nassert(!PosInfInterval!Date(Date(1996, 1, 2)).isAfter(\n            PosInfInterval!Date(Date(1990, 1, 7))));\n\nassert(!PosInfInterval!Date(Date(1996, 1, 2)).isAfter(\n            PosInfInterval!Date(Date(1999, 5, 4))));\n--------------------\n",
								"endline": 20625
							},
							{
								"kind": "function",
								"line": 20644,
								"endchar": 5,
								"char": 10,
								"type": "const pure nothrow bool(in NegInfInterval!TP interval)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "NegInfInterval!TP",
										"name": "interval"
									}
								],
								"name": "isAfter",
								"comment": "        Whether this interval is after the given interval and does not intersect\n        it.\n\n        Params:\n            interval = The interval to check against this interval.\n\n        Examples:\n--------------------\nassert(PosInfInterval!Date(Date(1996, 1, 2)).isAfter(\n            NegInfInterval!Date(Date(1996, 1, 2))));\n\nassert(!PosInfInterval!Date(Date(1996, 1, 2)).isAfter(\n            NegInfInterval!Date(Date(2000, 7, 1))));\n--------------------\n",
								"endline": 20647
							},
							{
								"kind": "function",
								"line": 20671,
								"endchar": 5,
								"char": 10,
								"type": "const pure bool(in Interval!TP interval)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "Interval!TP",
										"name": "interval"
									}
								],
								"name": "intersects",
								"comment": "        Whether the given interval overlaps this interval.\n\n        Params:\n            interval = The interval to check for intersection with this interval.\n\n        Throws:\n            $(LREF DateTimeException) if the given interval is empty.\n\n        Examples:\n--------------------\nassert(PosInfInterval!Date(Date(1996, 1, 2)).intersects(\n            Interval!Date(Date(1990, 7, 6), Date(2000, 8, 2))));\n\nassert(PosInfInterval!Date(Date(1996, 1, 2)).intersects(\n            Interval!Date(Date(1999, 1, 12), Date(2011, 9, 17))));\n\nassert(!PosInfInterval!Date(Date(1996, 1, 2)).intersects(\n            Interval!Date(Date(1989, 3, 1), Date(1996, 1, 2))));\n--------------------\n",
								"endline": 20676
							},
							{
								"kind": "function",
								"line": 20698,
								"endchar": 5,
								"char": 10,
								"type": "const pure nothrow bool(in PosInfInterval interval)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "PosInfInterval",
										"name": "interval"
									}
								],
								"name": "intersects",
								"comment": "        Whether the given interval overlaps this interval.\n\n        Always returns true because two intervals going to positive infinity\n        always overlap.\n\n        Params:\n            interval = The interval to check for intersection with this\n                       interval.\n\n        Examples:\n--------------------\nassert(PosInfInterval!Date(Date(1996, 1, 2)).intersects(\n            PosInfInterval!Date(Date(1990, 1, 7))));\n\nassert(PosInfInterval!Date(Date(1996, 1, 2)).intersects(\n            PosInfInterval!Date(Date(1999, 5, 4))));\n--------------------\n",
								"endline": 20701
							},
							{
								"kind": "function",
								"line": 20720,
								"endchar": 5,
								"char": 10,
								"type": "const pure nothrow bool(in NegInfInterval!TP interval)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "NegInfInterval!TP",
										"name": "interval"
									}
								],
								"name": "intersects",
								"comment": "        Whether the given interval overlaps this interval.\n\n        Params:\n            interval = The interval to check for intersection with this\n                       interval.\n\n        Examples:\n--------------------\nassert(!PosInfInterval!Date(Date(1996, 1, 2)).intersects(\n            NegInfInterval!Date(Date(1996, 1, 2))));\n\nassert(PosInfInterval!Date(Date(1996, 1, 2)).intersects(\n            NegInfInterval!Date(Date(2000, 7, 1))));\n--------------------\n",
								"endline": 20723
							},
							{
								"kind": "function",
								"line": 20747,
								"endchar": 5,
								"char": 17,
								"type": "const Interval!TP(in Interval!TP interval)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "Interval!TP",
										"name": "interval"
									}
								],
								"name": "intersection",
								"comment": "        Returns the intersection of two intervals\n\n        Params:\n            interval = The interval to intersect with this interval.\n\n        Throws:\n            $(LREF DateTimeException) if the two intervals do not intersect or if\n            the given interval is empty.\n\n        Examples:\n--------------------\nassert(PosInfInterval!Date(Date(1996, 1, 2)).intersection(\n            Interval!Date(Date(1990, 7, 6), Date(2000, 8, 2))) ==\n       Interval!Date(Date(1996, 1 , 2), Date(2000, 8, 2)));\n\nassert(PosInfInterval!Date(Date(1996, 1, 2)).intersection(\n            Interval!Date(Date(1999, 1, 12), Date(2011, 9, 17))) ==\n       Interval!Date(Date(1999, 1 , 12), Date(2011, 9, 17)));\n--------------------\n",
								"endline": 20756
							},
							{
								"kind": "function",
								"line": 20776,
								"endchar": 5,
								"char": 20,
								"type": "const pure nothrow PosInfInterval(in PosInfInterval interval)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "PosInfInterval",
										"name": "interval"
									}
								],
								"name": "intersection",
								"comment": "        Returns the intersection of two intervals\n\n        Params:\n            interval = The interval to intersect with this interval.\n\n        Examples:\n--------------------\nassert(PosInfInterval!Date(Date(1996, 1, 2)).intersection(\n            PosInfInterval!Date(Date(1990, 7, 6))) ==\n       PosInfInterval!Date(Date(1996, 1 , 2)));\n\nassert(PosInfInterval!Date(Date(1996, 1, 2)).intersection(\n            PosInfInterval!Date(Date(1999, 1, 12))) ==\n       PosInfInterval!Date(Date(1999, 1 , 12)));\n--------------------\n",
								"endline": 20779
							},
							{
								"kind": "function",
								"line": 20802,
								"endchar": 5,
								"char": 17,
								"type": "const Interval!TP(in NegInfInterval!TP interval)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "NegInfInterval!TP",
										"name": "interval"
									}
								],
								"name": "intersection",
								"comment": "        Returns the intersection of two intervals\n\n        Params:\n            interval = The interval to intersect with this interval.\n\n        Throws:\n            $(LREF DateTimeException) if the two intervals do not intersect.\n\n        Examples:\n--------------------\nassert(PosInfInterval!Date(Date(1996, 1, 2)).intersection(\n            NegInfInterval!Date(Date(1999, 7, 6))) ==\n       Interval!Date(Date(1996, 1 , 2), Date(1999, 7, 6)));\n\nassert(PosInfInterval!Date(Date(1996, 1, 2)).intersection(\n            NegInfInterval!Date(Date(2013, 1, 12))) ==\n       Interval!Date(Date(1996, 1 , 2), Date(2013, 1, 12)));\n--------------------\n",
								"endline": 20809
							},
							{
								"kind": "function",
								"line": 20831,
								"endchar": 5,
								"char": 10,
								"type": "const pure bool(in Interval!TP interval)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "Interval!TP",
										"name": "interval"
									}
								],
								"name": "isAdjacent",
								"comment": "        Whether the given interval is adjacent to this interval.\n\n        Params:\n            interval = The interval to check whether its adjecent to this\n                       interval.\n\n        Throws:\n            $(LREF DateTimeException) if the given interval is empty.\n\n        Examples:\n--------------------\nassert(PosInfInterval!Date(Date(1996, 1, 2)).isAdjacent(\n            Interval!Date(Date(1989, 3, 1), Date(1996, 1, 2))));\n\nassert(!PosInfInterval!Date(Date(1999, 1, 12)).isAdjacent(\n            Interval!Date(Date(1999, 1, 12), Date(2011, 9, 17))));\n--------------------\n",
								"endline": 20836
							},
							{
								"kind": "function",
								"line": 20858,
								"endchar": 5,
								"char": 10,
								"type": "const pure nothrow bool(in PosInfInterval interval)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "PosInfInterval",
										"name": "interval"
									}
								],
								"name": "isAdjacent",
								"comment": "        Whether the given interval is adjacent to this interval.\n\n        Always returns false because two intervals going to positive infinity\n        can never be adjacent to one another.\n\n        Params:\n            interval = The interval to check whether its adjecent to this\n                       interval.\n\n        Examples:\n--------------------\nassert(!PosInfInterval!Date(Date(1996, 1, 2)).isAdjacent(\n            PosInfInterval!Date(Date(1990, 1, 7))));\n\nassert(!PosInfInterval!Date(Date(1996, 1, 2)).isAdjacent(\n            PosInfInterval!Date(Date(1996, 1, 2))));\n--------------------\n",
								"endline": 20861
							},
							{
								"kind": "function",
								"line": 20880,
								"endchar": 5,
								"char": 10,
								"type": "const pure nothrow bool(in NegInfInterval!TP interval)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "NegInfInterval!TP",
										"name": "interval"
									}
								],
								"name": "isAdjacent",
								"comment": "        Whether the given interval is adjacent to this interval.\n\n        Params:\n            interval = The interval to check whether its adjecent to this\n                       interval.\n\n        Examples:\n--------------------\nassert(PosInfInterval!Date(Date(1996, 1, 2)).isAdjacent(\n            NegInfInterval!Date(Date(1996, 1, 2))));\n\nassert(!PosInfInterval!Date(Date(1996, 1, 2)).isAdjacent(\n            NegInfInterval!Date(Date(2000, 7, 1))));\n--------------------\n",
								"endline": 20883
							},
							{
								"kind": "function",
								"line": 20913,
								"endchar": 5,
								"char": 20,
								"type": "const PosInfInterval(in Interval!TP interval)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "Interval!TP",
										"name": "interval"
									}
								],
								"name": "merge",
								"comment": "        Returns the union of two intervals\n\n        Params:\n            interval = The interval to merge with this interval.\n\n        Throws:\n            $(LREF DateTimeException) if the two intervals do not intersect and are\n            not adjacent or if the given interval is empty.\n\n        Note:\n            There is no overload for $(D merge) which takes a\n            $(D NegInfInterval), because an interval\n            going from negative infinity to positive infinity\n            is not possible.\n\n        Examples:\n--------------------\nassert(PosInfInterval!Date(Date(1996, 1, 2)).merge(\n            Interval!Date(Date(1990, 7, 6), Date(2000, 8, 2))) ==\n       PosInfInterval!Date(Date(1990, 7 , 6)));\n\nassert(PosInfInterval!Date(Date(1996, 1, 2)).merge(\n            Interval!Date(Date(1999, 1, 12), Date(2011, 9, 17))) ==\n       PosInfInterval!Date(Date(1996, 1 , 2)));\n--------------------\n",
								"endline": 20921
							},
							{
								"kind": "function",
								"line": 20947,
								"endchar": 5,
								"char": 20,
								"type": "const pure nothrow PosInfInterval(in PosInfInterval interval)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "PosInfInterval",
										"name": "interval"
									}
								],
								"name": "merge",
								"comment": "        Returns the union of two intervals\n\n        Params:\n            interval = The interval to merge with this interval.\n\n        Note:\n            There is no overload for $(D merge) which takes a\n            $(D NegInfInterval), because an interval\n            going from negative infinity to positive infinity\n            is not possible.\n\n        Examples:\n--------------------\nassert(PosInfInterval!Date(Date(1996, 1, 2)).merge(\n            PosInfInterval!Date(Date(1990, 7, 6))) ==\n       PosInfInterval!Date(Date(1990, 7 , 6)));\n\nassert(PosInfInterval!Date(Date(1996, 1, 2)).merge(\n            PosInfInterval!Date(Date(1999, 1, 12))) ==\n       PosInfInterval!Date(Date(1996, 1 , 2)));\n--------------------\n",
								"endline": 20950
							},
							{
								"kind": "function",
								"line": 20986,
								"endchar": 5,
								"char": 20,
								"type": "const pure PosInfInterval(in Interval!TP interval)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "Interval!TP",
										"name": "interval"
									}
								],
								"name": "span",
								"comment": "        Returns an interval that covers from the earliest time point of two\n        intervals up to (but not including) the latest time point of two\n        intervals.\n\n        Params:\n            interval = The interval to create a span together with this\n                       interval.\n\n        Throws:\n            $(LREF DateTimeException) if the given interval is empty.\n\n        Note:\n            There is no overload for $(D span) which takes a\n            $(D NegInfInterval), because an interval\n            going from negative infinity to positive infinity\n            is not possible.\n\n        Examples:\n--------------------\nassert(PosInfInterval!Date(Date(1996, 1, 2)).span(\n            Interval!Date(Date(500, 8, 9), Date(1602, 1, 31))) ==\n       PosInfInterval!Date(Date(500, 8, 9)));\n\nassert(PosInfInterval!Date(Date(1996, 1, 2)).span(\n            Interval!Date(Date(1990, 7, 6), Date(2000, 8, 2))) ==\n       PosInfInterval!Date(Date(1990, 7 , 6)));\n\nassert(PosInfInterval!Date(Date(1996, 1, 2)).span(\n            Interval!Date(Date(1999, 1, 12), Date(2011, 9, 17))) ==\n       PosInfInterval!Date(Date(1996, 1 , 2)));\n--------------------\n",
								"endline": 20991
							},
							{
								"kind": "function",
								"line": 21020,
								"endchar": 5,
								"char": 20,
								"type": "const pure nothrow PosInfInterval(in PosInfInterval interval)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "PosInfInterval",
										"name": "interval"
									}
								],
								"name": "span",
								"comment": "        Returns an interval that covers from the earliest time point of two\n        intervals up to (but not including) the latest time point of two\n        intervals.\n\n        Params:\n            interval = The interval to create a span together with this\n                       interval.\n\n        Note:\n            There is no overload for $(D span) which takes a\n            $(D NegInfInterval), because an interval\n            going from negative infinity to positive infinity\n            is not possible.\n\n        Examples:\n--------------------\nassert(PosInfInterval!Date(Date(1996, 1, 2)).span(\n            PosInfInterval!Date(Date(1990, 7, 6))) ==\n       PosInfInterval!Date(Date(1990, 7 , 6)));\n\nassert(PosInfInterval!Date(Date(1996, 1, 2)).span(\n            PosInfInterval!Date(Date(1999, 1, 12))) ==\n       PosInfInterval!Date(Date(1996, 1 , 2)));\n--------------------\n",
								"endline": 21023
							},
							{
								"kind": "template",
								"line": 21047,
								"constraint": "__traits(compiles, begin + duration)",
								"members": [
									{
										"kind": "function",
										"line": 21047,
										"endchar": 5,
										"char": 10,
										"type": "pure nothrow void(D duration)",
										"parameters": [
											{
												"type": "D",
												"name": "duration"
											}
										],
										"name": "shift",
										"endline": 21051
									}
								],
								"char": 10,
								"parameters": [
									{
										"kind": "type",
										"name": "D"
									}
								],
								"comment": "        Shifts the $(D begin) of this interval forward or backwards in time by\n        the given duration (a positive duration shifts the interval forward; a\n        negative duration shifts it backward). Effectively, it does\n        $(D begin += duration).\n\n        Params:\n            duration = The duration to shift the interval by.\n\n        Examples:\n--------------------\nauto interval1 = PosInfInterval!Date(Date(1996, 1, 2));\nauto interval2 = PosInfInterval!Date(Date(1996, 1, 2));\n\ninterval1.shift(dur!\"days\"(50));\nassert(interval1 == PosInfInterval!Date(Date(1996, 2, 21)));\n\ninterval2.shift(dur!\"days\"(-50));\nassert(interval2 == PosInfInterval!Date(Date(1995, 11, 13)));\n--------------------\n",
								"name": "shift"
							},
							{
								"kind": "template",
								"line": 21120,
								"constraint": "__traits(compiles, begin + duration)",
								"members": [
									{
										"kind": "function",
										"line": 21120,
										"endchar": 5,
										"char": 10,
										"type": "pure nothrow void(D duration)",
										"parameters": [
											{
												"type": "D",
												"name": "duration"
											}
										],
										"name": "expand",
										"endline": 21124
									}
								],
								"char": 10,
								"parameters": [
									{
										"kind": "type",
										"name": "D"
									}
								],
								"comment": "        Expands the interval backwards in time. Effectively, it does\n        $(D begin -= duration).\n\n        Params:\n            duration = The duration to expand the interval by.\n\n        Examples:\n--------------------\nauto interval1 = PosInfInterval!Date(Date(1996, 1, 2));\nauto interval2 = PosInfInterval!Date(Date(1996, 1, 2));\n\ninterval1.expand(dur!\"days\"(2));\nassert(interval1 == PosInfInterval!Date(Date(1995, 12, 31)));\n\ninterval2.expand(dur!\"days\"(-2));\nassert(interval2 == PosInfInterval!Date(Date(1996, 1, 4)));\n--------------------\n",
								"name": "expand"
							},
							{
								"kind": "function",
								"line": 21249,
								"endchar": 5,
								"char": 30,
								"type": "const PosInfIntervalRange!TP(TP delegate(in TP) func, PopFirst popFirst = PopFirst.no)",
								"parameters": [
									{
										"type": "TP delegate(in TP)",
										"name": "func"
									},
									{
										"default": "PopFirst.no",
										"type": "PopFirst",
										"name": "popFirst"
									}
								],
								"name": "fwdRange",
								"comment": "        Returns a range which iterates forward over the interval, starting\n        at $(D begin), using $(D_PARAM func) to generate each successive time\n        point.\n\n        The range's $(D front) is the interval's $(D begin). $(D_PARAM func) is\n        used to generate the next $(D front) when $(D popFront) is called. If\n        $(D_PARAM popFirst) is $(D PopFirst.yes), then $(D popFront) is called\n        before the range is returned (so that $(D front) is a time point which\n        $(D_PARAM func) would generate).\n\n        If $(D_PARAM func) ever generates a time point less than or equal to the\n        current $(D front) of the range, then a $(LREF DateTimeException) will be\n        thrown.\n\n        There are helper functions in this module which generate common\n        delegates to pass to $(D fwdRange). Their documentation starts with\n        \"Range-generating function,\" to make them easily searchable.\n\n        Params:\n            func     = The function used to generate the time points of the\n                       range over the interval.\n            popFirst = Whether $(D popFront) should be called on the range\n                       before returning it.\n\n        Throws:\n            $(LREF DateTimeException) if this interval is empty.\n\n        Warning:\n            $(D_PARAM func) must be logically pure. Ideally, $(D_PARAM func)\n            would be a function pointer to a pure function, but forcing\n            $(D_PARAM func) to be pure is far too restrictive to be useful, and\n            in order to have the ease of use of having functions which generate\n            functions to pass to $(D fwdRange), $(D_PARAM func) must be a\n            delegate.\n\n            If $(D_PARAM func) retains state which changes as it is called, then\n            some algorithms will not work correctly, because the range's\n            $(D save) will have failed to have really saved the range's state.\n            To avoid such bugs, don't pass a delegate which is\n            not logically pure to $(D fwdRange). If $(D_PARAM func) is given the\n            same time point with two different calls, it must return the same\n            result both times.\n\n            Of course, none of the functions in this module have this problem,\n            so it's only relevant for custom delegates.\n\n        Examples:\n--------------------\nauto interval = PosInfInterval!Date(Date(2010, 9, 1));\nauto func = (in Date date) //For iterating over even-numbered days.\n            {\n                if((date.day & 1) == 0)\n                    return date + dur!\"days\"(2);\n\n                return date + dur!\"days\"(1);\n            };\nauto range = interval.fwdRange(func);\n\n//An odd day. Using PopFirst.yes would have made this Date(2010, 9, 2).\nassert(range.front == Date(2010, 9, 1));\n\nrange.popFront();\nassert(range.front == Date(2010, 9, 2));\n\nrange.popFront();\nassert(range.front == Date(2010, 9, 4));\n\nrange.popFront();\nassert(range.front == Date(2010, 9, 6));\n\nrange.popFront();\nassert(range.front == Date(2010, 9, 8));\n\nrange.popFront();\nassert(!range.empty);\n--------------------\n",
								"endline": 21257
							},
							{
								"kind": "function",
								"line": 21278,
								"endchar": 5,
								"char": 12,
								"type": "const nothrow string()",
								"name": "toString",
								"comment": "        Converts this interval to a string.\n",
								"endline": 21281
							}
						],
						"char": 1,
						"name": "PosInfInterval"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "TP"
					}
				],
				"comment": "    Represents an interval of time which has positive infinity as its end point.\n\n    Any ranges which iterate over a $(D PosInfInterval) are infinite. So, the\n    main purpose of using $(D PosInfInterval) is to create an infinite range\n    which starts at a fixed point in time and goes to positive infinity.\n",
				"name": "PosInfInterval"
			},
			{
				"kind": "template",
				"line": 22476,
				"members": [
					{
						"kind": "struct",
						"line": 22476,
						"members": [
							{
								"kind": "constructor",
								"line": 22489,
								"endchar": 5,
								"char": 5,
								"type": "pure nothrow (in TP end)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "TP",
										"name": "end"
									}
								],
								"name": "this",
								"comment": "        Params:\n            end = The time point which ends the interval.\n\n        Examples:\n--------------------\nauto interval = PosInfInterval!Date(Date(1996, 1, 2));\n--------------------\n",
								"endline": 22492
							},
							{
								"kind": "function",
								"line": 22499,
								"endchar": 5,
								"char": 24,
								"type": "pure nothrow ref NegInfInterval(ref const NegInfInterval rhs)",
								"parameters": [
									{
										"storageClass": [
											"const",
											"ref"
										],
										"type": "NegInfInterval",
										"name": "rhs"
									}
								],
								"name": "opAssign",
								"comment": "        Params:\n            rhs = The $(D NegInfInterval) to assign to this one.\n",
								"endline": 22503
							},
							{
								"kind": "function",
								"line": 22510,
								"endchar": 5,
								"char": 24,
								"type": "pure nothrow ref NegInfInterval(NegInfInterval rhs)",
								"parameters": [
									{
										"type": "NegInfInterval",
										"name": "rhs"
									}
								],
								"name": "opAssign",
								"comment": "        Params:\n            rhs = The $(D NegInfInterval) to assign to this one.\n",
								"endline": 22514
							},
							{
								"kind": "function",
								"line": 22525,
								"endchar": 5,
								"char": 18,
								"type": "const pure nothrow @property TP()",
								"name": "end",
								"comment": "        The end point of the interval. It is excluded from the interval.\n\n        Examples:\n--------------------\nassert(NegInfInterval!Date(Date(2012, 3, 1)).end == Date(2012, 3, 1));\n--------------------\n",
								"endline": 22528
							},
							{
								"kind": "function",
								"line": 22537,
								"endchar": 5,
								"char": 20,
								"type": "pure nothrow @property void(TP timePoint)",
								"parameters": [
									{
										"type": "TP",
										"name": "timePoint"
									}
								],
								"name": "end",
								"comment": "        The end point of the interval. It is excluded from the interval.\n\n        Params:\n            timePoint = The time point to set end to.\n",
								"endline": 22540
							},
							{
								"kind": "function",
								"line": 22551,
								"endchar": 5,
								"char": 20,
								"type": "const pure nothrow @property bool()",
								"name": "empty",
								"comment": "        Whether the interval's length is 0. Always returns false.\n\n        Examples:\n--------------------\nassert(!NegInfInterval!Date(Date(1996, 1, 2)).empty);\n--------------------\n",
								"endline": 22554
							},
							{
								"kind": "function",
								"line": 22570,
								"endchar": 5,
								"char": 10,
								"type": "const pure nothrow bool(TP timePoint)",
								"parameters": [
									{
										"type": "TP",
										"name": "timePoint"
									}
								],
								"name": "contains",
								"comment": "        Whether the given time point is within this interval.\n\n        Params:\n            timePoint = The time point to check for inclusion in this interval.\n\n        Examples:\n--------------------\nassert(NegInfInterval!Date(Date(2012, 3, 1)).contains(Date(1994, 12, 24)));\nassert(NegInfInterval!Date(Date(2012, 3, 1)).contains(Date(2000, 1, 5)));\nassert(!NegInfInterval!Date(Date(2012, 3, 1)).contains(Date(2012, 3, 1)));\n--------------------\n",
								"endline": 22573
							},
							{
								"kind": "function",
								"line": 22597,
								"endchar": 5,
								"char": 10,
								"type": "const pure bool(in Interval!TP interval)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "Interval!TP",
										"name": "interval"
									}
								],
								"name": "contains",
								"comment": "        Whether the given interval is completely within this interval.\n\n        Params:\n            interval = The interval to check for inclusion in this interval.\n\n        Throws:\n            $(LREF DateTimeException) if the given interval is empty.\n\n        Examples:\n--------------------\nassert(NegInfInterval!Date(Date(2012, 3, 1)).contains(\n            Interval!Date(Date(1990, 7, 6), Date(2000, 8, 2))));\n\nassert(NegInfInterval!Date(Date(2012, 3, 1)).contains(\n            Interval!Date(Date(1999, 1, 12), Date(2011, 9, 17))));\n\nassert(!NegInfInterval!Date(Date(2012, 3, 1)).contains(\n            Interval!Date(Date(1998, 2, 28), Date(2013, 5, 1))));\n--------------------\n",
								"endline": 22602
							},
							{
								"kind": "function",
								"line": 22620,
								"endchar": 5,
								"char": 10,
								"type": "const pure nothrow bool(in PosInfInterval!TP interval)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "PosInfInterval!TP",
										"name": "interval"
									}
								],
								"name": "contains",
								"comment": "        Whether the given interval is completely within this interval.\n\n        Always returns false because an interval beginning at negative\n        infinity can never contain an interval going to positive infinity.\n\n        Params:\n            interval = The interval to check for inclusion in this interval.\n\n        Examples:\n--------------------\nassert(!NegInfInterval!Date(Date(2012, 3, 1)).contains(\n            PosInfInterval!Date(Date(1999, 5, 4))));\n--------------------\n",
								"endline": 22623
							},
							{
								"kind": "function",
								"line": 22641,
								"endchar": 5,
								"char": 10,
								"type": "const pure nothrow bool(in NegInfInterval interval)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "NegInfInterval",
										"name": "interval"
									}
								],
								"name": "contains",
								"comment": "        Whether the given interval is completely within this interval.\n\n        Params:\n            interval = The interval to check for inclusion in this interval.\n\n        Examples:\n--------------------\nassert(NegInfInterval!Date(Date(2012, 3, 1)).contains(\n            NegInfInterval!Date(Date(1996, 5, 4))));\n\nassert(!NegInfInterval!Date(Date(2012, 3, 1)).contains(\n            NegInfInterval!Date(Date(2013, 7, 9))));\n--------------------\n",
								"endline": 22644
							},
							{
								"kind": "function",
								"line": 22661,
								"endchar": 5,
								"char": 10,
								"type": "const pure nothrow bool(in TP timePoint)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "TP",
										"name": "timePoint"
									}
								],
								"name": "isBefore",
								"comment": "        Whether this interval is before the given time point.\n\n        Params:\n            timePoint = The time point to check whether this interval is\n                        before it.\n\n        Examples:\n--------------------\nassert(!NegInfInterval!Date(Date(2012, 3, 1)).isBefore(Date(1994, 12, 24)));\nassert(!NegInfInterval!Date(Date(2012, 3, 1)).isBefore(Date(2000, 1, 5)));\nassert(NegInfInterval!Date(Date(2012, 3, 1)).isBefore(Date(2012, 3, 1)));\n--------------------\n",
								"endline": 22664
							},
							{
								"kind": "function",
								"line": 22689,
								"endchar": 5,
								"char": 10,
								"type": "const pure bool(in Interval!TP interval)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "Interval!TP",
										"name": "interval"
									}
								],
								"name": "isBefore",
								"comment": "        Whether this interval is before the given interval and does not\n        intersect it.\n\n        Params:\n            interval = The interval to check for against this interval.\n\n        Throws:\n            $(LREF DateTimeException) if the given interval is empty\n\n        Examples:\n--------------------\nassert(!NegInfInterval!Date(Date(2012, 3, 1)).isBefore(\n            Interval!Date(Date(1990, 7, 6), Date(2000, 8, 2))));\n\nassert(!NegInfInterval!Date(Date(2012, 3, 1)).isBefore(\n            Interval!Date(Date(1999, 1, 12), Date(2011, 9, 17))));\n\nassert(NegInfInterval!Date(Date(2012, 3, 1)).isBefore(\n            Interval!Date(Date(2022, 10, 19), Date(2027, 6, 3))));\n--------------------\n",
								"endline": 22694
							},
							{
								"kind": "function",
								"line": 22713,
								"endchar": 5,
								"char": 10,
								"type": "const pure nothrow bool(in PosInfInterval!TP interval)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "PosInfInterval!TP",
										"name": "interval"
									}
								],
								"name": "isBefore",
								"comment": "        Whether this interval is before the given interval and does not\n        intersect it.\n\n        Params:\n            interval = The interval to check for against this interval.\n\n        Examples:\n--------------------\nassert(!NegInfInterval!Date(Date(2012, 3, 1)).isBefore(\n            PosInfInterval!Date(Date(1999, 5, 4))));\n\nassert(NegInfInterval!Date(Date(2012, 3, 1)).isBefore(\n            PosInfInterval!Date(Date(2012, 3, 1))));\n--------------------\n",
								"endline": 22716
							},
							{
								"kind": "function",
								"line": 22739,
								"endchar": 5,
								"char": 10,
								"type": "const pure nothrow bool(in NegInfInterval interval)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "NegInfInterval",
										"name": "interval"
									}
								],
								"name": "isBefore",
								"comment": "        Whether this interval is before the given interval and does not\n        intersect it.\n\n        Always returns false because an interval beginning at negative\n        infinity can never be before another interval beginning at negative\n        infinity.\n\n        Params:\n            interval = The interval to check for against this interval.\n\n        Examples:\n--------------------\nassert(!NegInfInterval!Date(Date(2012, 3, 1)).isBefore(\n            NegInfInterval!Date(Date(1996, 5, 4))));\n\nassert(!NegInfInterval!Date(Date(2012, 3, 1)).isBefore(\n            NegInfInterval!Date(Date(2013, 7, 9))));\n--------------------\n",
								"endline": 22742
							},
							{
								"kind": "function",
								"line": 22762,
								"endchar": 5,
								"char": 10,
								"type": "const pure nothrow bool(in TP timePoint)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "TP",
										"name": "timePoint"
									}
								],
								"name": "isAfter",
								"comment": "        Whether this interval is after the given time point.\n\n        Always returns false because an interval beginning at negative infinity\n        can never be after any time point.\n\n        Params:\n            timePoint = The time point to check whether this interval is after\n                        it.\n\n        Examples:\n--------------------\nassert(!NegInfInterval!Date(Date(2012, 3, 1)).isAfter(Date(1994, 12, 24)));\nassert(!NegInfInterval!Date(Date(2012, 3, 1)).isAfter(Date(2000, 1, 5)));\nassert(!NegInfInterval!Date(Date(2012, 3, 1)).isAfter(Date(2012, 3, 1)));\n--------------------\n",
								"endline": 22765
							},
							{
								"kind": "function",
								"line": 22794,
								"endchar": 5,
								"char": 10,
								"type": "const pure bool(in Interval!TP interval)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "Interval!TP",
										"name": "interval"
									}
								],
								"name": "isAfter",
								"comment": "        Whether this interval is after the given interval and does not\n        intersect it.\n\n        Always returns false (unless the given interval is empty) because an\n        interval beginning at negative infinity can never be after any other\n        interval.\n\n        Params:\n            interval = The interval to check against this interval.\n\n        Throws:\n            $(LREF DateTimeException) if the given interval is empty.\n\n        Examples:\n--------------------\nassert(!NegInfInterval!Date(Date(2012, 3, 1)).isAfter(\n            Interval!Date(Date(1990, 7, 6), Date(2000, 8, 2))));\n\nassert(!NegInfInterval!Date(Date(2012, 3, 1)).isAfter(\n            Interval!Date(Date(1999, 1, 12), Date(2011, 9, 17))));\n\nassert(!NegInfInterval!Date(Date(2012, 3, 1)).isAfter(\n            Interval!Date(Date(2022, 10, 19), Date(2027, 6, 3))));\n--------------------\n",
								"endline": 22799
							},
							{
								"kind": "function",
								"line": 22821,
								"endchar": 5,
								"char": 10,
								"type": "const pure nothrow bool(in PosInfInterval!TP interval)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "PosInfInterval!TP",
										"name": "interval"
									}
								],
								"name": "isAfter",
								"comment": "        Whether this interval is after the given interval and does not intersect\n        it.\n\n        Always returns false because an interval beginning at negative infinity\n        can never be after any other interval.\n\n        Params:\n            interval = The interval to check against this interval.\n\n        Examples:\n--------------------\nassert(!NegInfInterval!Date(Date(2012, 3, 1)).isAfter(\n            PosInfInterval!Date(Date(1999, 5, 4))));\n\nassert(!NegInfInterval!Date(Date(2012, 3, 1)).isAfter(\n            PosInfInterval!Date(Date(2012, 3, 1))));\n--------------------\n",
								"endline": 22824
							},
							{
								"kind": "function",
								"line": 22846,
								"endchar": 5,
								"char": 10,
								"type": "const pure nothrow bool(in NegInfInterval interval)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "NegInfInterval",
										"name": "interval"
									}
								],
								"name": "isAfter",
								"comment": "        Whether this interval is after the given interval and does not intersect\n        it.\n\n        Always returns false because an interval beginning at negative infinity\n        can never be after any other interval.\n\n        Params:\n            interval = The interval to check against this interval.\n\n        Examples:\n--------------------\nassert(!NegInfInterval!Date(Date(2012, 3, 1)).isAfter(\n            NegInfInterval!Date(Date(1996, 5, 4))));\n\nassert(!NegInfInterval!Date(Date(2012, 3, 1)).isAfter(\n            NegInfInterval!Date(Date(2013, 7, 9))));\n--------------------\n",
								"endline": 22849
							},
							{
								"kind": "function",
								"line": 22873,
								"endchar": 5,
								"char": 10,
								"type": "const pure bool(in Interval!TP interval)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "Interval!TP",
										"name": "interval"
									}
								],
								"name": "intersects",
								"comment": "        Whether the given interval overlaps this interval.\n\n        Params:\n            interval = The interval to check for intersection with this interval.\n\n        Throws:\n            $(LREF DateTimeException) if the given interval is empty.\n\n        Examples:\n--------------------\nassert(NegInfInterval!Date(Date(2012, 3, 1)).intersects(\n            Interval!Date(Date(1990, 7, 6), Date(2000, 8, 2))));\n\nassert(NegInfInterval!Date(Date(2012, 3, 1)).intersects(\n            Interval!Date(Date(1999, 1, 12), Date(2011, 9, 17))));\n\nassert(!NegInfInterval!Date(Date(2012, 3, 1)).intersects(\n            Interval!Date(Date(2022, 10, 19), Date(2027, 6, 3))));\n--------------------\n",
								"endline": 22878
							},
							{
								"kind": "function",
								"line": 22897,
								"endchar": 5,
								"char": 10,
								"type": "const pure nothrow bool(in PosInfInterval!TP interval)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "PosInfInterval!TP",
										"name": "interval"
									}
								],
								"name": "intersects",
								"comment": "        Whether the given interval overlaps this interval.\n\n        Params:\n            interval = The interval to check for intersection with this\n                       interval.\n\n        Examples:\n--------------------\nassert(NegInfInterval!Date(Date(2012, 3, 1)).intersects(\n            PosInfInterval!Date(Date(1999, 5, 4))));\n\nassert(!NegInfInterval!Date(Date(2012, 3, 1)).intersects(\n            PosInfInterval!Date(Date(2012, 3, 1))));\n--------------------\n",
								"endline": 22900
							},
							{
								"kind": "function",
								"line": 22921,
								"endchar": 5,
								"char": 10,
								"type": "const pure nothrow bool(in NegInfInterval!TP interval)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "NegInfInterval!TP",
										"name": "interval"
									}
								],
								"name": "intersects",
								"comment": "        Whether the given interval overlaps this interval.\n\n        Always returns true because two intervals beginning at negative infinity\n        always overlap.\n\n        Params:\n            interval = The interval to check for intersection with this interval.\n\n        Examples:\n--------------------\nassert(NegInfInterval!Date(Date(2012, 3, 1)).intersects(\n            NegInfInterval!Date(Date(1996, 5, 4))));\n\nassert(NegInfInterval!Date(Date(2012, 3, 1)).intersects(\n            NegInfInterval!Date(Date(2013, 7, 9))));\n--------------------\n",
								"endline": 22924
							},
							{
								"kind": "function",
								"line": 22948,
								"endchar": 5,
								"char": 17,
								"type": "const Interval!TP(in Interval!TP interval)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "Interval!TP",
										"name": "interval"
									}
								],
								"name": "intersection",
								"comment": "        Returns the intersection of two intervals\n\n        Params:\n            interval = The interval to intersect with this interval.\n\n        Throws:\n            $(LREF DateTimeException) if the two intervals do not intersect or if\n            the given interval is empty.\n\n        Examples:\n--------------------\nassert(NegInfInterval!Date(Date(2012, 3, 1)).intersection(\n            Interval!Date(Date(1990, 7, 6), Date(2000, 8, 2))) ==\n       Interval!Date(Date(1990, 7 , 6), Date(2000, 8, 2)));\n\nassert(NegInfInterval!Date(Date(2012, 3, 1)).intersection(\n            Interval!Date(Date(1999, 1, 12), Date(2015, 9, 2))) ==\n       Interval!Date(Date(1999, 1 , 12), Date(2012, 3, 1)));\n--------------------\n",
								"endline": 22957
							},
							{
								"kind": "function",
								"line": 22980,
								"endchar": 5,
								"char": 17,
								"type": "const Interval!TP(in PosInfInterval!TP interval)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "PosInfInterval!TP",
										"name": "interval"
									}
								],
								"name": "intersection",
								"comment": "        Returns the intersection of two intervals\n\n        Params:\n            interval = The interval to intersect with this interval.\n\n        Throws:\n            $(LREF DateTimeException) if the two intervals do not intersect.\n\n        Examples:\n--------------------\nassert(NegInfInterval!Date(Date(2012, 3, 1)).intersection(\n            PosInfInterval!Date(Date(1990, 7, 6))) ==\n       Interval!Date(Date(1990, 7 , 6), Date(2012, 3, 1)));\n\nassert(NegInfInterval!Date(Date(2012, 3, 1)).intersection(\n            PosInfInterval!Date(Date(1999, 1, 12))) ==\n       Interval!Date(Date(1999, 1 , 12), Date(2012, 3, 1)));\n--------------------\n",
								"endline": 22987
							},
							{
								"kind": "function",
								"line": 23007,
								"endchar": 5,
								"char": 20,
								"type": "const nothrow NegInfInterval(in NegInfInterval interval)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "NegInfInterval",
										"name": "interval"
									}
								],
								"name": "intersection",
								"comment": "        Returns the intersection of two intervals\n\n        Params:\n            interval = The interval to intersect with this interval.\n\n        Examples:\n--------------------\nassert(NegInfInterval!Date(Date(2012, 3, 1)).intersection(\n            NegInfInterval!Date(Date(1999, 7, 6))) ==\n       NegInfInterval!Date(Date(1999, 7 , 6)));\n\nassert(NegInfInterval!Date(Date(2012, 3, 1)).intersection(\n            NegInfInterval!Date(Date(2013, 1, 12))) ==\n       NegInfInterval!Date(Date(2012, 3 , 1)));\n--------------------\n",
								"endline": 23010
							},
							{
								"kind": "function",
								"line": 23038,
								"endchar": 5,
								"char": 10,
								"type": "const pure bool(in Interval!TP interval)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "Interval!TP",
										"name": "interval"
									}
								],
								"name": "isAdjacent",
								"comment": "        Whether the given interval is adjacent to this interval.\n\n        Params:\n            interval = The interval to check whether its adjecent to this\n                       interval.\n\n        Throws:\n            $(LREF DateTimeException) if the given interval is empty.\n\n        Examples:\n--------------------\nassert(!NegInfInterval!Date(Date(2012, 3, 1)).isAdjacent(\n            Interval!Date(Date(1990, 7, 6), Date(2000, 8, 2))));\n\nassert(!NegInfInterval!Date(Date(2012, 3, 1)).isAdjacent(\n            Interval!Date(Date(1999, 1, 12), Date(2012, 3, 1))));\n\nassert(NegInfInterval!Date(Date(2012, 3, 1)).isAdjacent(\n            Interval!Date(Date(2012, 3, 1), Date(2019, 2, 2))));\n\nassert(!NegInfInterval!Date(Date(2012, 3, 1)).isAdjacent(\n            Interval!Date(Date(2022, 10, 19), Date(2027, 6, 3))));\n--------------------\n",
								"endline": 23043
							},
							{
								"kind": "function",
								"line": 23062,
								"endchar": 5,
								"char": 10,
								"type": "const pure nothrow bool(in PosInfInterval!TP interval)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "PosInfInterval!TP",
										"name": "interval"
									}
								],
								"name": "isAdjacent",
								"comment": "        Whether the given interval is adjacent to this interval.\n\n        Params:\n            interval = The interval to check whether its adjecent to this\n                       interval.\n\n        Examples:\n--------------------\nassert(!NegInfInterval!Date(Date(2012, 3, 1)).isAdjacent(\n            PosInfInterval!Date(Date(1999, 5, 4))));\n\nassert(NegInfInterval!Date(Date(2012, 3, 1)).isAdjacent(\n            PosInfInterval!Date(Date(2012, 3, 1))));\n--------------------\n",
								"endline": 23065
							},
							{
								"kind": "function",
								"line": 23087,
								"endchar": 5,
								"char": 10,
								"type": "const pure nothrow bool(in NegInfInterval interval)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "NegInfInterval",
										"name": "interval"
									}
								],
								"name": "isAdjacent",
								"comment": "        Whether the given interval is adjacent to this interval.\n\n        Always returns false because two intervals beginning at negative\n        infinity can never be adjacent to one another.\n\n        Params:\n            interval = The interval to check whether its adjecent to this\n                       interval.\n\n        Examples:\n--------------------\nassert(!NegInfInterval!Date(Date(2012, 3, 1)).isAdjacent(\n            NegInfInterval!Date(Date(1996, 5, 4))));\n\nassert(!NegInfInterval!Date(Date(2012, 3, 1)).isAdjacent(\n            NegInfInterval!Date(Date(2012, 3, 1))));\n--------------------\n",
								"endline": 23090
							},
							{
								"kind": "function",
								"line": 23120,
								"endchar": 5,
								"char": 20,
								"type": "const NegInfInterval(in Interval!TP interval)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "Interval!TP",
										"name": "interval"
									}
								],
								"name": "merge",
								"comment": "        Returns the union of two intervals\n\n        Params:\n            interval = The interval to merge with this interval.\n\n        Throws:\n            $(LREF DateTimeException) if the two intervals do not intersect and are\n            not adjacent or if the given interval is empty.\n\n        Note:\n            There is no overload for $(D merge) which takes a\n            $(D PosInfInterval), because an interval\n            going from negative infinity to positive infinity\n            is not possible.\n\n        Examples:\n--------------------\nassert(NegInfInterval!Date(Date(2012, 3, 1)).merge(\n            Interval!Date(Date(1990, 7, 6), Date(2000, 8, 2))) ==\n       NegInfInterval!Date(Date(2012, 3 , 1)));\n\nassert(NegInfInterval!Date(Date(2012, 3, 1)).merge(\n            Interval!Date(Date(1999, 1, 12), Date(2015, 9, 2))) ==\n       NegInfInterval!Date(Date(2015, 9 , 2)));\n--------------------\n",
								"endline": 23128
							},
							{
								"kind": "function",
								"line": 23154,
								"endchar": 5,
								"char": 20,
								"type": "const pure nothrow NegInfInterval(in NegInfInterval interval)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "NegInfInterval",
										"name": "interval"
									}
								],
								"name": "merge",
								"comment": "        Returns the union of two intervals\n\n        Params:\n            interval = The interval to merge with this interval.\n\n        Note:\n            There is no overload for $(D merge) which takes a\n            $(D PosInfInterval), because an interval\n            going from negative infinity to positive infinity\n            is not possible.\n\n        Examples:\n--------------------\nassert(NegInfInterval!Date(Date(2012, 3, 1)).merge(\n            NegInfInterval!Date(Date(1999, 7, 6))) ==\n       NegInfInterval!Date(Date(2012, 3 , 1)));\n\nassert(NegInfInterval!Date(Date(2012, 3, 1)).merge(\n            NegInfInterval!Date(Date(2013, 1, 12))) ==\n       NegInfInterval!Date(Date(2013, 1 , 12)));\n--------------------\n",
								"endline": 23157
							},
							{
								"kind": "function",
								"line": 23193,
								"endchar": 5,
								"char": 20,
								"type": "const pure NegInfInterval(in Interval!TP interval)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "Interval!TP",
										"name": "interval"
									}
								],
								"name": "span",
								"comment": "        Returns an interval that covers from the earliest time point of two\n        intervals up to (but not including) the latest time point of two\n        intervals.\n\n        Params:\n            interval = The interval to create a span together with this\n                       interval.\n\n        Throws:\n            $(LREF DateTimeException) if the given interval is empty.\n\n        Note:\n            There is no overload for $(D span) which takes a\n            $(D PosInfInterval), because an interval\n            going from negative infinity to positive infinity\n            is not possible.\n\n        Examples:\n--------------------\nassert(NegInfInterval!Date(Date(2012, 3, 1)).span(\n            Interval!Date(Date(1990, 7, 6), Date(2000, 8, 2))) ==\n       NegInfInterval!Date(Date(2012, 3 , 1)));\n\nassert(NegInfInterval!Date(Date(2012, 3, 1)).span(\n            Interval!Date(Date(1999, 1, 12), Date(2015, 9, 2))) ==\n       NegInfInterval!Date(Date(2015, 9 , 2)));\n\nassert(NegInfInterval!Date(Date(1600, 1, 7)).span(\n            Interval!Date(Date(2012, 3, 11), Date(2017, 7, 1))) ==\n       NegInfInterval!Date(Date(2017, 7 , 1)));\n--------------------\n",
								"endline": 23198
							},
							{
								"kind": "function",
								"line": 23227,
								"endchar": 5,
								"char": 20,
								"type": "const pure nothrow NegInfInterval(in NegInfInterval interval)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "NegInfInterval",
										"name": "interval"
									}
								],
								"name": "span",
								"comment": "        Returns an interval that covers from the earliest time point of two\n        intervals up to (but not including) the latest time point of two\n        intervals.\n\n        Params:\n            interval = The interval to create a span together with this\n                       interval.\n\n        Note:\n            There is no overload for $(D span) which takes a\n            $(D PosInfInterval), because an interval\n            going from negative infinity to positive infinity\n            is not possible.\n\n        Examples:\n--------------------\nassert(NegInfInterval!Date(Date(2012, 3, 1)).span(\n            NegInfInterval!Date(Date(1999, 7, 6))) ==\n       NegInfInterval!Date(Date(2012, 3 , 1)));\n\nassert(NegInfInterval!Date(Date(2012, 3, 1)).span(\n            NegInfInterval!Date(Date(2013, 1, 12))) ==\n       NegInfInterval!Date(Date(2013, 1 , 12)));\n--------------------\n",
								"endline": 23230
							},
							{
								"kind": "template",
								"line": 23254,
								"constraint": "__traits(compiles, end + duration)",
								"members": [
									{
										"kind": "function",
										"line": 23254,
										"endchar": 5,
										"char": 10,
										"type": "pure nothrow void(D duration)",
										"parameters": [
											{
												"type": "D",
												"name": "duration"
											}
										],
										"name": "shift",
										"endline": 23258
									}
								],
								"char": 10,
								"parameters": [
									{
										"kind": "type",
										"name": "D"
									}
								],
								"comment": "        Shifts the $(D end) of this interval forward or backwards in time by the\n        given duration (a positive duration shifts the interval forward; a\n        negative duration shifts it backward). Effectively, it does\n        $(D end += duration).\n\n        Params:\n            duration = The duration to shift the interval by.\n\n        Examples:\n--------------------\nauto interval1 = NegInfInterval!Date(Date(2012, 4, 5));\nauto interval2 = NegInfInterval!Date(Date(2012, 4, 5));\n\ninterval1.shift(dur!\"days\"(50));\nassert(interval1 == NegInfInterval!Date(Date(2012, 5, 25)));\n\ninterval2.shift(dur!\"days\"(-50));\nassert(interval2 == NegInfInterval!Date( Date(2012, 2, 15)));\n--------------------\n",
								"name": "shift"
							},
							{
								"kind": "template",
								"line": 23326,
								"constraint": "__traits(compiles, end + duration)",
								"members": [
									{
										"kind": "function",
										"line": 23326,
										"endchar": 5,
										"char": 10,
										"type": "pure nothrow void(D duration)",
										"parameters": [
											{
												"type": "D",
												"name": "duration"
											}
										],
										"name": "expand",
										"endline": 23330
									}
								],
								"char": 10,
								"parameters": [
									{
										"kind": "type",
										"name": "D"
									}
								],
								"comment": "        Expands the interval forwards in time. Effectively, it does\n        $(D end += duration).\n\n        Params:\n            duration = The duration to expand the interval by.\n\n        Examples:\n--------------------\nauto interval1 = NegInfInterval!Date(Date(2012, 3, 1));\nauto interval2 = NegInfInterval!Date(Date(2012, 3, 1));\n\ninterval1.expand(dur!\"days\"(2));\nassert(interval1 == NegInfInterval!Date(Date(2012, 3, 3)));\n\ninterval2.expand(dur!\"days\"(-2));\nassert(interval2 == NegInfInterval!Date(Date(2012, 2, 28)));\n--------------------\n",
								"name": "expand"
							},
							{
								"kind": "function",
								"line": 23454,
								"endchar": 5,
								"char": 30,
								"type": "const NegInfIntervalRange!TP(TP delegate(in TP) func, PopFirst popFirst = PopFirst.no)",
								"parameters": [
									{
										"type": "TP delegate(in TP)",
										"name": "func"
									},
									{
										"default": "PopFirst.no",
										"type": "PopFirst",
										"name": "popFirst"
									}
								],
								"name": "bwdRange",
								"comment": "        Returns a range which iterates backwards over the interval, starting\n        at $(D end), using $(D_PARAM func) to generate each successive time\n        point.\n\n        The range's $(D front) is the interval's $(D end). $(D_PARAM func) is\n        used to generate the next $(D front) when $(D popFront) is called. If\n        $(D_PARAM popFirst) is $(D PopFirst.yes), then $(D popFront) is called\n        before the range is returned (so that $(D front) is a time point which\n        $(D_PARAM func) would generate).\n\n        If $(D_PARAM func) ever generates a time point greater than or equal to\n        the current $(D front) of the range, then a $(LREF DateTimeException) will\n        be thrown.\n\n        There are helper functions in this module which generate common\n        delegates to pass to $(D bwdRange). Their documentation starts with\n        \"Range-generating function,\" to make them easily searchable.\n\n        Params:\n            func     = The function used to generate the time points of the\n                       range over the interval.\n            popFirst = Whether $(D popFront) should be called on the range\n                       before returning it.\n\n        Throws:\n            $(LREF DateTimeException) if this interval is empty.\n\n        Warning:\n            $(D_PARAM func) must be logically pure. Ideally, $(D_PARAM func)\n            would be a function pointer to a pure function, but forcing\n            $(D_PARAM func) to be pure is far too restrictive to be useful, and\n            in order to have the ease of use of having functions which generate\n            functions to pass to $(D fwdRange), $(D_PARAM func) must be a\n            delegate.\n\n            If $(D_PARAM func) retains state which changes as it is called, then\n            some algorithms will not work correctly, because the range's\n            $(D save) will have failed to have really saved the range's state.\n            To avoid such bugs, don't pass a delegate which is\n            not logically pure to $(D fwdRange). If $(D_PARAM func) is given the\n            same time point with two different calls, it must return the same\n            result both times.\n\n            Of course, none of the functions in this module have this problem,\n            so it's only relevant for custom delegates.\n\n        Examples:\n--------------------\nauto interval = NegInfInterval!Date(Date(2010, 9, 9));\nauto func = (in Date date) //For iterating over even-numbered days.\n            {\n                if((date.day & 1) == 0)\n                    return date - dur!\"days\"(2);\n\n                return date - dur!\"days\"(1);\n            };\nauto range = interval.bwdRange(func);\n\nassert(range.front == Date(2010, 9, 9)); //An odd day. Using PopFirst.yes would have made this Date(2010, 9, 8).\n\nrange.popFront();\nassert(range.front == Date(2010, 9, 8));\n\nrange.popFront();\nassert(range.front == Date(2010, 9, 6));\n\nrange.popFront();\nassert(range.front == Date(2010, 9, 4));\n\nrange.popFront();\nassert(range.front == Date(2010, 9, 2));\n\nrange.popFront();\nassert(!range.empty);\n--------------------\n",
								"endline": 23462
							},
							{
								"kind": "function",
								"line": 23483,
								"endchar": 5,
								"char": 12,
								"type": "const nothrow string()",
								"name": "toString",
								"comment": "        Converts this interval to a string.\n",
								"endline": 23486
							}
						],
						"char": 1,
						"name": "NegInfInterval"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "TP"
					}
				],
				"comment": "    Represents an interval of time which has negative infinity as its starting\n    point.\n\n    Any ranges which iterate over a $(D NegInfInterval) are infinite. So, the\n    main purpose of using $(D NegInfInterval) is to create an infinite range\n    which starts at negative infinity and goes to a fixed end point.\n    Iterate over it in reverse.\n",
				"name": "NegInfInterval"
			},
			{
				"kind": "template",
				"line": 24698,
				"constraint": "isTimePoint!TP && (dir == Direction.fwd || dir == Direction.bwd) && __traits(hasMember, TP, \"dayOfWeek\") && !__traits(isStaticFunction, TP.dayOfWeek) && is(typeof(TP.dayOfWeek) == DayOfWeek)",
				"members": [
					{
						"kind": "function",
						"line": 24698,
						"endchar": 1,
						"char": 27,
						"type": "nothrow TP delegate(in TP)(DayOfWeek dayOfWeek)",
						"parameters": [
							{
								"type": "DayOfWeek",
								"name": "dayOfWeek"
							}
						],
						"name": "everyDayOfWeek",
						"endline": 24719
					}
				],
				"char": 27,
				"parameters": [
					{
						"kind": "type",
						"name": "TP"
					},
					{
						"kind": "value",
						"defaultValue": "Direction.fwd",
						"deco": "E3std8datetime9Direction",
						"name": "dir"
					}
				],
				"comment": "    Range-generating function.\n\n    Returns a delegate which returns the next time point with the given\n    $(D DayOfWeek) in a range.\n\n    Using this delegate allows iteration over successive time points which\n    are all the same day of the week. e.g. passing $(D DayOfWeek.mon) to\n    $(D everyDayOfWeek) would result in a delegate which could be used to\n    iterate over all of the Mondays in a range.\n\n    Params:\n        dir       = The direction to iterate in. If passing the return value to\n                    $(D fwdRange), use $(D Direction.fwd). If passing it to\n                    $(D bwdRange), use $(D Direction.bwd).\n        dayOfWeek = The week that each time point in the range will be.\nExample:\n\n---\nauto interval = Interval!Date(Date(2010, 9, 2), Date(2010, 9, 27));\nauto func = everyDayOfWeek!Date(DayOfWeek.mon);\nauto range = interval.fwdRange(func);\n\n//A Thursday. Using PopFirst.yes would have made this Date(2010, 9, 6).\nassert(range.front == Date(2010, 9, 2));\n\nrange.popFront();\nassert(range.front == Date(2010, 9, 6));\n\nrange.popFront();\nassert(range.front == Date(2010, 9, 13));\n\nrange.popFront();\nassert(range.front == Date(2010, 9, 20));\n\nrange.popFront();\nassert(range.empty);\n\n---\n",
				"name": "everyDayOfWeek"
			},
			{
				"kind": "template",
				"line": 24802,
				"constraint": "isTimePoint!TP && (dir == Direction.fwd || dir == Direction.bwd) && __traits(hasMember, TP, \"month\") && !__traits(isStaticFunction, TP.month) && is(typeof(TP.month) == Month)",
				"members": [
					{
						"kind": "function",
						"line": 24802,
						"endchar": 1,
						"char": 27,
						"type": "TP delegate(in TP)(int month)",
						"parameters": [
							{
								"deco": "i",
								"name": "month"
							}
						],
						"name": "everyMonth",
						"endline": 24833
					}
				],
				"char": 27,
				"parameters": [
					{
						"kind": "type",
						"name": "TP"
					},
					{
						"kind": "value",
						"defaultValue": "Direction.fwd",
						"deco": "E3std8datetime9Direction",
						"name": "dir"
					}
				],
				"comment": "    Range-generating function.\n\n    Returns a delegate which returns the next time point with the given month\n    which would be reached by adding months to the given time point.\n\n    So, using this delegate allows iteration over successive time points\n    which are in the same month but different years. For example,\n    iterate over each successive December 25th in an interval by starting with a\n    date which had the 25th as its day and passed $(D Month.dec) to\n    $(D everyMonth) to create the delegate.\n\n    Since it wouldn't really make sense to be iterating over a specific month\n    and end up with some of the time points in the succeeding month or two years\n    after the previous time point, $(D AllowDayOverflow.no) is always used when\n    calculating the next time point.\n\n    Params:\n        dir   = The direction to iterate in. If passing the return value to\n                $(D fwdRange), use $(D Direction.fwd). If passing it to\n                $(D bwdRange), use $(D Direction.bwd).\n        month = The month that each time point in the range will be in.\nExample:\n\n---\nauto interval = Interval!Date(Date(2000, 1, 30), Date(2004, 8, 5));\nauto func = everyMonth!(Date)(Month.feb);\nauto range = interval.fwdRange(func);\n\n//Using PopFirst.yes would have made this Date(2010, 2, 29).\nassert(range.front == Date(2000, 1, 30));\n\nrange.popFront();\nassert(range.front == Date(2000, 2, 29));\n\nrange.popFront();\nassert(range.front == Date(2001, 2, 28));\n\nrange.popFront();\nassert(range.front == Date(2002, 2, 28));\n\nrange.popFront();\nassert(range.front == Date(2003, 2, 28));\n\nrange.popFront();\nassert(range.front == Date(2004, 2, 28));\n\nrange.popFront();\nassert(range.empty);\n\n---\n",
				"name": "everyMonth"
			},
			{
				"kind": "template",
				"line": 24925,
				"constraint": "isTimePoint!TP && __traits(compiles, TP.init + duration) && (dir == Direction.fwd || dir == Direction.bwd)",
				"members": [
					{
						"kind": "function",
						"line": 24925,
						"endchar": 1,
						"char": 27,
						"type": "nothrow TP delegate(in TP)(D duration)",
						"parameters": [
							{
								"type": "D",
								"name": "duration"
							}
						],
						"name": "everyDuration",
						"endline": 24940
					}
				],
				"char": 27,
				"parameters": [
					{
						"kind": "type",
						"name": "TP"
					},
					{
						"kind": "value",
						"defaultValue": "Direction.fwd",
						"deco": "E3std8datetime9Direction",
						"name": "dir"
					},
					{
						"kind": "type",
						"name": "D"
					}
				],
				"comment": "    Range-generating function.\n\n    Returns a delegate which returns the next time point which is the given\n    duration later.\n\n    Using this delegate allows iteration over successive time points which\n    are apart by the given duration e.g. passing $(D dur!\"days\"(3)) to\n    $(D everyDuration) would result in a delegate which could be used to iterate\n    over a range of days which are each 3 days apart.\n\n    Params:\n        dir      = The direction to iterate in. If passing the return value to\n                   $(D fwdRange), use $(D Direction.fwd). If passing it to\n                   $(D bwdRange), use $(D Direction.bwd).\n        duration = The duration which separates each successive time point in\n                   the range.\nExample:\n\n---\nauto interval = Interval!Date(Date(2010, 9, 2), Date(2010, 9, 27));\nauto func = everyDuration!Date(dur!\"days\"(8));\nauto range = interval.fwdRange(func);\n\n//Using PopFirst.yes would have made this Date(2010, 9, 10).\nassert(range.front == Date(2010, 9, 2));\n\nrange.popFront();\nassert(range.front == Date(2010, 9, 10));\n\nrange.popFront();\nassert(range.front == Date(2010, 9, 18));\n\nrange.popFront();\nassert(range.front == Date(2010, 9, 26));\n\nrange.popFront();\nassert(range.empty);\n\n---\n",
				"name": "everyDuration"
			},
			{
				"kind": "template",
				"line": 25025,
				"constraint": "isTimePoint!TP && __traits(compiles, TP.init + duration) && __traits(compiles, TP.init.add!\"years\"(years)) && __traits(compiles, TP.init.add!\"months\"(months)) && (dir == Direction.fwd || dir == Direction.bwd)",
				"members": [
					{
						"kind": "function",
						"line": 25025,
						"endchar": 1,
						"char": 27,
						"type": "nothrow TP delegate(in TP)(int years, int months = 0, AllowDayOverflow allowOverflow = AllowDayOverflow.yes, D duration = dur!\"days\"(0))",
						"parameters": [
							{
								"deco": "i",
								"name": "years"
							},
							{
								"deco": "i",
								"default": "0",
								"name": "months"
							},
							{
								"default": "AllowDayOverflow.yes",
								"type": "AllowDayOverflow",
								"name": "allowOverflow"
							},
							{
								"default": "dur!\"days\"(0)",
								"type": "D",
								"name": "duration"
							}
						],
						"name": "everyDuration",
						"endline": 25059
					}
				],
				"char": 27,
				"parameters": [
					{
						"kind": "type",
						"name": "TP"
					},
					{
						"kind": "value",
						"defaultValue": "Direction.fwd",
						"deco": "E3std8datetime9Direction",
						"name": "dir"
					},
					{
						"kind": "type",
						"name": "D"
					}
				],
				"comment": "    Range-generating function.\n\n    Returns a delegate which returns the next time point which is the given\n    number of years, month, and duration later.\n\n    The difference between this version of $(D everyDuration) and the version\n    which just takes a $(CXREF time, Duration) is that this one also takes the number of\n    years and months (along with an $(D AllowDayOverflow) to indicate whether\n    adding years and months should allow the days to overflow).\n\n    Note that if iterating forward, $(D add!\"years\"()) is called on the given\n    time point, then $(D add!\"months\"()), and finally the duration is added\n    to it. However, if iterating backwards, the duration is added first, then\n    $(D add!\"months\"()) is called, and finally $(D add!\"years\"()) is called.\n    That way, going backwards generates close to the same time points that\n    iterating forward does, but since adding years and months is not entirely\n    reversible (due to possible day overflow, regardless of whether\n    $(D AllowDayOverflow.yes) or $(D AllowDayOverflow.no) is used), it can't be\n    guaranteed that iterating backwards will give the same time points as\n    iterating forward would have (even assuming that the end of the range is a\n    time point which would be returned by the delegate when iterating forward\n    from $(D begin)).\n\n    Params:\n        dir           = The direction to iterate in. If passing the return\n                        value to $(D fwdRange), use $(D Direction.fwd). If\n                        passing it to $(D bwdRange), use $(D Direction.bwd).\n        years         = The number of years to add to the time point passed to\n                        the delegate.\n        months        = The number of months to add to the time point passed to\n                        the delegate.\n        allowOverflow = Whether the days should be allowed to overflow on\n                        $(D begin) and $(D end), causing their month to\n                        increment.\n        duration      = The duration to add to the time point passed to the\n                        delegate.\nExample:\n\n---\nauto interval = Interval!Date(Date(2010, 9, 2), Date(2025, 9, 27));\nauto func = everyDuration!Date(4, 1, AllowDayOverflow.yes, dur!\"days\"(2));\nauto range = interval.fwdRange(func);\n\n//Using PopFirst.yes would have made this Date(2014, 10, 12).\nassert(range.front == Date(2010, 9, 2));\n\nrange.popFront();\nassert(range.front == Date(2014, 10, 4));\n\nrange.popFront();\nassert(range.front == Date(2018, 11, 6));\n\nrange.popFront();\nassert(range.front == Date(2022, 12, 8));\n\nrange.popFront();\nassert(range.empty);\n\n---\n",
				"name": "everyDuration"
			},
			{
				"kind": "template",
				"line": 25182,
				"constraint": "isTimePoint!TP && dir != Direction.both",
				"members": [
					{
						"kind": "struct",
						"line": 25182,
						"members": [
							{
								"kind": "function",
								"line": 25191,
								"endchar": 5,
								"char": 23,
								"type": "pure nothrow ref IntervalRange(ref IntervalRange rhs)",
								"parameters": [
									{
										"storageClass": [
											"ref"
										],
										"type": "IntervalRange",
										"name": "rhs"
									}
								],
								"name": "opAssign",
								"comment": "        Params:\n            rhs = The $(D IntervalRange) to assign to this one.\n",
								"endline": 25196
							},
							{
								"kind": "function",
								"line": 25200,
								"endchar": 5,
								"char": 23,
								"type": "pure nothrow ref IntervalRange(IntervalRange rhs)",
								"parameters": [
									{
										"type": "IntervalRange",
										"name": "rhs"
									}
								],
								"name": "opAssign",
								"comment": " Ditto\n",
								"endline": 25203
							},
							{
								"kind": "function",
								"line": 25209,
								"endchar": 5,
								"char": 20,
								"type": "const pure nothrow @property bool()",
								"name": "empty",
								"comment": "        Whether this $(D IntervalRange) is empty.\n",
								"endline": 25212
							},
							{
								"kind": "function",
								"line": 25221,
								"endchar": 5,
								"char": 18,
								"type": "const pure @property TP()",
								"name": "front",
								"comment": "        The first time point in the range.\n\n        Throws:\n            $(LREF DateTimeException) if the range is empty.\n",
								"endline": 25229
							},
							{
								"kind": "function",
								"line": 25248,
								"endchar": 5,
								"char": 10,
								"type": "void()",
								"name": "popFront",
								"comment": "        Pops $(D front) from the range, using $(D func) to generate the next\n        time point in the range. If the generated time point is beyond the edge\n        of the range, then $(D front) is set to that edge, and the range is then\n        empty. So, if iterating forwards, and the generated time point is\n        greater than the interval's $(D end), then $(D front) is set to\n        $(D end). If iterating backwards, and the generated time point is less\n        than the interval's $(D begin), then $(D front) is set to $(D begin).\n\n        Throws:\n            $(LREF DateTimeException) if the range is empty or if the generated\n            time point is in the wrong direction (i.e. if iterating\n            forward and the generated time point is before $(D front), or if\n            iterating backwards and the generated time point is after\n            $(D front)).\n",
								"endline": 25274
							},
							{
								"kind": "function",
								"line": 25280,
								"endchar": 5,
								"char": 29,
								"type": "pure nothrow @property IntervalRange()",
								"name": "save",
								"comment": "        Returns a copy of $(D this).\n",
								"endline": 25283
							},
							{
								"kind": "function",
								"line": 25289,
								"endchar": 5,
								"char": 27,
								"type": "const pure nothrow @property Interval!TP()",
								"name": "interval",
								"comment": "        The interval that this $(D IntervalRange) currently covers.\n",
								"endline": 25292
							},
							{
								"kind": "function",
								"line": 25298,
								"endchar": 5,
								"char": 24,
								"type": "pure nothrow @property TP delegate(in TP)()",
								"name": "func",
								"comment": "        The function used to generate the next time point in the range.\n",
								"endline": 25301
							},
							{
								"kind": "function",
								"line": 25307,
								"endchar": 5,
								"char": 25,
								"type": "const pure nothrow @property Direction()",
								"name": "direction",
								"comment": "        The $(D Direction) that this range iterates in.\n",
								"endline": 25310
							}
						],
						"char": 1,
						"name": "IntervalRange"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "TP"
					},
					{
						"kind": "value",
						"deco": "E3std8datetime9Direction",
						"name": "dir"
					}
				],
				"comment": "    A range over an $(LREF2 .Interval, Interval).\n\n    $(D IntervalRange) is only ever constructed by $(LREF2 .Interval, Interval). However, when\n    it is constructed, it is given a function, $(D func), which is used to\n    generate the time points which are iterated over. $(D func) takes a time\n    point and returns a time point of the same type. For instance,\n    to iterate over all of the days in\n    the interval $(D Interval!Date), pass a function to $(LREF2 .Interval, Interval)'s $(D fwdRange)\n    where that function took a $(LREF Date) and returned a $(LREF Date) which was one\n    day later. That function would then be used by $(D IntervalRange)'s\n    $(D popFront) to iterate over the $(LREF Date)s in the interval.\n\n    If $(D dir == Direction.fwd), then a range iterates forward in time, whereas\n    if $(D dir == Direction.bwd), then it iterates backwards in time. So, if\n    $(D dir == Direction.fwd) then $(D front == interval.begin), whereas if\n    $(D dir == Direction.bwd) then $(D front == interval.end). $(D func) must\n    generate a time point going in the proper direction of iteration, or a\n    $(LREF DateTimeException) will be thrown. So, to iterate forward in\n    time, the time point that $(D func) generates must be later in time than the\n    one passed to it. If it's either identical or earlier in time, then a\n    $(LREF DateTimeException) will be thrown. To iterate backwards, then\n    the generated time point must be before the time point which was passed in.\n\n    If the generated time point is ever passed the edge of the range in the\n    proper direction, then the edge of that range will be used instead. So, if\n    iterating forward, and the generated time point is past the interval's\n    $(D end), then $(D front) becomes $(D end). If iterating backwards, and the\n    generated time point is before $(D begin), then $(D front) becomes\n    $(D begin). In either case, the range would then be empty.\n\n    Also note that while normally the $(D begin) of an interval is included in\n    it and its $(D end) is excluded from it, if $(D dir == Direction.bwd), then\n    $(D begin) is treated as excluded and $(D end) is treated as included. This\n    allows for the same behavior in both directions. This works because none of\n    $(LREF2 .Interval, Interval)'s functions which care about whether $(D begin) or $(D end) is\n    included or excluded are ever called by $(D IntervalRange). $(D interval)\n    returns a normal interval, regardless of whether $(D dir == Direction.fwd)\n    or if $(D dir == Direction.bwd), so any $(LREF2 .Interval, Interval) functions which are\n    called on it which care about whether $(D begin) or $(D end) are included or\n    excluded will treat $(D begin) as included and $(D end) as excluded.\n",
				"name": "IntervalRange"
			},
			{
				"kind": "template",
				"line": 25680,
				"constraint": "isTimePoint!TP",
				"members": [
					{
						"kind": "struct",
						"line": 25680,
						"members": [
							{
								"kind": "function",
								"line": 25689,
								"endchar": 5,
								"char": 29,
								"type": "pure nothrow ref PosInfIntervalRange(ref PosInfIntervalRange rhs)",
								"parameters": [
									{
										"storageClass": [
											"ref"
										],
										"type": "PosInfIntervalRange",
										"name": "rhs"
									}
								],
								"name": "opAssign",
								"comment": "        Params:\n            rhs = The $(D PosInfIntervalRange) to assign to this one.\n",
								"endline": 25695
							},
							{
								"kind": "function",
								"line": 25699,
								"endchar": 5,
								"char": 29,
								"type": "pure nothrow ref PosInfIntervalRange(PosInfIntervalRange rhs)",
								"parameters": [
									{
										"type": "PosInfIntervalRange",
										"name": "rhs"
									}
								],
								"name": "opAssign",
								"comment": " Ditto\n",
								"endline": 25702
							},
							{
								"kind": "variable",
								"line": 25708,
								"init": "false",
								"storageClass": [
									"enum"
								],
								"deco": "b",
								"char": 15,
								"name": "empty",
								"comment": "        This is an infinite range, so it is never empty.\n"
							},
							{
								"kind": "function",
								"line": 25714,
								"endchar": 5,
								"char": 18,
								"type": "const pure nothrow @property TP()",
								"name": "front",
								"comment": "        The first time point in the range.\n",
								"endline": 25717
							},
							{
								"kind": "function",
								"line": 25728,
								"endchar": 5,
								"char": 10,
								"type": "void()",
								"name": "popFront",
								"comment": "        Pops $(D front) from the range, using $(D func) to generate the next\n        time point in the range.\n\n        Throws:\n            $(LREF DateTimeException) if the generated time point is less than\n            $(D front).\n",
								"endline": 25735
							},
							{
								"kind": "function",
								"line": 25741,
								"endchar": 5,
								"char": 35,
								"type": "pure nothrow @property PosInfIntervalRange()",
								"name": "save",
								"comment": "        Returns a copy of $(D this).\n",
								"endline": 25744
							},
							{
								"kind": "function",
								"line": 25750,
								"endchar": 5,
								"char": 33,
								"type": "const pure nothrow @property PosInfInterval!TP()",
								"name": "interval",
								"comment": "        The interval that this range currently covers.\n",
								"endline": 25753
							},
							{
								"kind": "function",
								"line": 25759,
								"endchar": 5,
								"char": 24,
								"type": "pure nothrow @property TP delegate(in TP)()",
								"name": "func",
								"comment": "        The function used to generate the next time point in the range.\n",
								"endline": 25762
							}
						],
						"char": 1,
						"name": "PosInfIntervalRange"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "TP"
					}
				],
				"comment": "    A range over a $(D PosInfInterval). It is an infinite range.\n\n    $(D PosInfIntervalRange) is only ever constructed by $(D PosInfInterval).\n    However, when it is constructed, it is given a function, $(D func), which\n    is used to generate the time points which are iterated over. $(D func)\n    takes a time point and returns a time point of the same type. For\n    instance, to iterate\n    over all of the days in the interval $(D PosInfInterval!Date), pass a function to\n    $(D PosInfInterval)'s $(D fwdRange) where that function took a $(LREF Date) and\n    returned a $(LREF Date) which was one day later. That function would then be\n    used by $(D PosInfIntervalRange)'s $(D popFront) to iterate over the\n    $(LREF Date)s in the interval - though obviously, since the range is infinite,\n    use a function such as $(D std.range.take) with it rather than\n    iterating over $(I all) of the dates.\n\n    As the interval goes to positive infinity, the range is always iterated over\n    forwards, never backwards. $(D func) must generate a time point going in\n    the proper direction of iteration, or a $(LREF DateTimeException) will be\n    thrown. So, the time points that $(D func) generates must be later in time\n    than the one passed to it. If it's either identical or earlier in time, then\n    a $(LREF DateTimeException) will be thrown.\n",
				"name": "PosInfIntervalRange"
			},
			{
				"kind": "template",
				"line": 25968,
				"constraint": "isTimePoint!TP",
				"members": [
					{
						"kind": "struct",
						"line": 25968,
						"members": [
							{
								"kind": "function",
								"line": 25977,
								"endchar": 5,
								"char": 29,
								"type": "pure nothrow ref NegInfIntervalRange(ref NegInfIntervalRange rhs)",
								"parameters": [
									{
										"storageClass": [
											"ref"
										],
										"type": "NegInfIntervalRange",
										"name": "rhs"
									}
								],
								"name": "opAssign",
								"comment": "        Params:\n            rhs = The $(D NegInfIntervalRange) to assign to this one.\n",
								"endline": 25983
							},
							{
								"kind": "function",
								"line": 25987,
								"endchar": 5,
								"char": 29,
								"type": "pure nothrow ref NegInfIntervalRange(NegInfIntervalRange rhs)",
								"parameters": [
									{
										"type": "NegInfIntervalRange",
										"name": "rhs"
									}
								],
								"name": "opAssign",
								"comment": " Ditto\n",
								"endline": 25990
							},
							{
								"kind": "variable",
								"line": 25996,
								"init": "false",
								"storageClass": [
									"enum"
								],
								"deco": "b",
								"char": 15,
								"name": "empty",
								"comment": "        This is an infinite range, so it is never empty.\n"
							},
							{
								"kind": "function",
								"line": 26002,
								"endchar": 5,
								"char": 18,
								"type": "const pure nothrow @property TP()",
								"name": "front",
								"comment": "        The first time point in the range.\n",
								"endline": 26005
							},
							{
								"kind": "function",
								"line": 26016,
								"endchar": 5,
								"char": 10,
								"type": "void()",
								"name": "popFront",
								"comment": "        Pops $(D front) from the range, using $(D func) to generate the next\n        time point in the range.\n\n        Throws:\n            $(LREF DateTimeException) if the generated time point is greater than\n            $(D front).\n",
								"endline": 26023
							},
							{
								"kind": "function",
								"line": 26029,
								"endchar": 5,
								"char": 35,
								"type": "pure nothrow @property NegInfIntervalRange()",
								"name": "save",
								"comment": "        Returns a copy of $(D this).\n",
								"endline": 26032
							},
							{
								"kind": "function",
								"line": 26038,
								"endchar": 5,
								"char": 33,
								"type": "const pure nothrow @property NegInfInterval!TP()",
								"name": "interval",
								"comment": "        The interval that this range currently covers.\n",
								"endline": 26041
							},
							{
								"kind": "function",
								"line": 26047,
								"endchar": 5,
								"char": 24,
								"type": "pure nothrow @property TP delegate(in TP)()",
								"name": "func",
								"comment": "        The function used to generate the next time point in the range.\n",
								"endline": 26050
							}
						],
						"char": 1,
						"name": "NegInfIntervalRange"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "TP"
					}
				],
				"comment": "    A range over a $(D NegInfInterval). It is an infinite range.\n\n    $(D NegInfIntervalRange) is only ever constructed by $(D NegInfInterval).\n    However, when it is constructed, it is given a function, $(D func), which\n    is used to generate the time points which are iterated over. $(D func)\n    takes a time point and returns a time point of the same type. For\n    instance, to iterate\n    over all of the days in the interval $(D NegInfInterval!Date), pass a function to\n    $(D NegInfInterval)'s $(D bwdRange) where that function took a $(LREF Date) and\n    returned a $(LREF Date) which was one day earlier. That function would then be\n    used by $(D NegInfIntervalRange)'s $(D popFront) to iterate over the\n    $(LREF Date)s in the interval - though obviously, since the range is infinite,\n    use a function such as $(D std.range.take) with it rather than\n    iterating over $(I all) of the dates.\n\n    As the interval goes to negative infinity, the range is always iterated over\n    backwards, never forwards. $(D func) must generate a time point going in\n    the proper direction of iteration, or a $(LREF DateTimeException) will be\n    thrown. So, the time points that $(D func) generates must be earlier in time\n    than the one passed to it. If it's either identical or later in time, then a\n    $(LREF DateTimeException) will be thrown.\n\n    Also note that while normally the $(D end) of an interval is excluded from\n    it, $(D NegInfIntervalRange) treats it as if it were included. This allows\n    for the same behavior as with $(D PosInfIntervalRange). This works\n    because none of $(D NegInfInterval)'s functions which care about whether\n    $(D end) is included or excluded are ever called by\n    $(D NegInfIntervalRange). $(D interval) returns a normal interval, so any\n    $(D NegInfInterval) functions which are called on it which care about\n    whether $(D end) is included or excluded will treat $(D end) as excluded.\n",
				"name": "NegInfIntervalRange"
			},
			{
				"kind": "class",
				"line": 26232,
				"members": [
					{
						"kind": "function",
						"line": 26246,
						"deco": "xFNbNdNfZAya",
						"endchar": 5,
						"char": 22,
						"name": "name",
						"comment": "        The name of the time zone per the TZ Database. This is the name used to\n        get a $(LREF2 .TimeZone, TimeZone) by name with $(D TimeZone.getTimeZone).\n\n        See_Also:\n            $(WEB en.wikipedia.org/wiki/Tz_database, Wikipedia entry on TZ\n              Database)<br>\n            $(WEB en.wikipedia.org/wiki/List_of_tz_database_time_zones, List of\n              Time Zones)\n",
						"endline": 26249
					},
					{
						"kind": "function",
						"line": 26259,
						"deco": "xFNbNdNfZAya",
						"endchar": 5,
						"char": 22,
						"name": "stdName",
						"comment": "        Typically, the abbreviation (generally 3 or 4 letters) for the time zone\n        when DST is $(I not) in effect (e.g. PST). It is not necessarily unique.\n\n        However, on Windows, it may be the unabbreviated name (e.g. Pacific\n        Standard Time). Regardless, it is not the same as name.\n",
						"endline": 26262
					},
					{
						"kind": "function",
						"line": 26272,
						"deco": "xFNbNdNfZAya",
						"endchar": 5,
						"char": 22,
						"name": "dstName",
						"comment": "        Typically, the abbreviation (generally 3 or 4 letters) for the time zone\n        when DST $(I is) in effect (e.g. PDT). It is not necessarily unique.\n\n        However, on Windows, it may be the unabbreviated name (e.g. Pacific\n        Daylight Time). Regardless, it is not the same as name.\n",
						"endline": 26275
					},
					{
						"kind": "function",
						"line": 26284,
						"storageClass": [
							"abstract"
						],
						"deco": "xFNbNdNfZb",
						"char": 29,
						"name": "hasDST",
						"comment": "        Whether this time zone has Daylight Savings Time at any point in time.\n        Note that for some time zone types it may not have DST for current dates\n        but will still return true for $(D hasDST) because the time zone did at\n        some point have DST.\n"
					},
					{
						"kind": "function",
						"line": 26296,
						"storageClass": [
							"abstract"
						],
						"deco": "xFNbNflZb",
						"char": 19,
						"parameters": [
							{
								"deco": "l",
								"name": "stdTime"
							}
						],
						"name": "dstInEffect",
						"comment": "        Takes the number of hnsecs (100 ns) since midnight, January 1st, 1 A.D.\n        in UTC time (i.e. std time) and returns whether DST is effect in this\n        time zone at the given point in time.\n\n        Params:\n            stdTime = The UTC time that needs to be checked for DST in this time\n                      zone.\n"
					},
					{
						"kind": "function",
						"line": 26307,
						"storageClass": [
							"abstract"
						],
						"deco": "xFNbNflZl",
						"char": 19,
						"parameters": [
							{
								"deco": "l",
								"name": "stdTime"
							}
						],
						"name": "utcToTZ",
						"comment": "        Takes the number of hnsecs (100 ns) since midnight, January 1st, 1 A.D.\n        in UTC time (i.e. std time) and converts it to this time zone's time.\n\n        Params:\n            stdTime = The UTC time that needs to be adjusted to this time zone's\n                      time.\n"
					},
					{
						"kind": "function",
						"line": 26318,
						"storageClass": [
							"abstract"
						],
						"deco": "xFNbNflZl",
						"char": 19,
						"parameters": [
							{
								"deco": "l",
								"name": "adjTime"
							}
						],
						"name": "tzToUTC",
						"comment": "        Takes the number of hnsecs (100 ns) since midnight, January 1st, 1 A.D.\n        in this time zone's time and converts it to UTC (i.e. std time).\n\n        Params:\n            adjTime = The time in this time zone that needs to be adjusted to\n                      UTC time.\n"
					},
					{
						"kind": "function",
						"line": 26329,
						"deco": "xFNbNflZS4core4time8Duration",
						"endchar": 5,
						"char": 14,
						"parameters": [
							{
								"deco": "l",
								"name": "stdTime"
							}
						],
						"name": "utcOffsetAt",
						"comment": "        Returns what the offset from UTC is at the given std time.\n        It includes the DST offset in effect at that time (if any).\n\n        Params:\n            stdTime = The UTC time for which to get the offset from UTC for this\n                      time zone.\n",
						"endline": 26332
					},
					{
						"kind": "function",
						"line": 26368,
						"storageClass": [
							"static"
						],
						"deco": "FNfAyaZyC3std8datetime8TimeZone",
						"endchar": 5,
						"char": 32,
						"parameters": [
							{
								"deco": "Aya",
								"name": "name"
							}
						],
						"name": "getTimeZone",
						"comment": "        Returns a $(LREF2 .TimeZone, TimeZone) with the give name per the TZ Database.\n\n        This returns a $(LREF PosixTimeZone) on Posix systems and a\n        $(LREF WindowsTimeZone) on Windows systems. For\n        $(LREF PosixTimeZone) on Windows, call $(D PosixTimeZone.getTimeZone)\n        directly and give it the location of the TZ Database time zone files on\n        disk.\n\n        On Windows, the given TZ Database name is converted to the corresponding\n        time zone name on Windows prior to calling\n        $(D WindowsTimeZone.getTimeZone). This function allows for\n        the same time zone names on both Windows and Posix systems.\n\n        See_Also:\n            $(WEB en.wikipedia.org/wiki/Tz_database, Wikipedia entry on TZ\n              Database)<br>\n            $(WEB en.wikipedia.org/wiki/List_of_tz_database_time_zones, List of\n              Time Zones)<br>\n            $(WEB unicode.org/repos/cldr-tmp/trunk/diff/supplemental/zone_tzid.html,\n                  Windows <-> TZ Database Name Conversion Table)\n\n        Params:\n            name = The TZ Database name of the desired time zone\n\n        Throws:\n            $(LREF DateTimeException) if the given time zone could not be found.\n\n        Examples:\n--------------------\nauto tz = TimeZone.getTimeZone(\"America/Los_Angeles\");\n--------------------\n",
						"endline": 26391
					},
					{
						"kind": "function",
						"line": 26717,
						"storageClass": [
							"static"
						],
						"deco": "FNfAyaZAAya",
						"endchar": 5,
						"char": 21,
						"parameters": [
							{
								"deco": "Aya",
								"default": "\"\"",
								"name": "subName"
							}
						],
						"name": "getInstalledTZNames",
						"comment": "        Returns a list of the names of the time zones installed on the system.\n\n        Providing a sub-name narrows down the list of time zones (which\n        can number in the thousands). For example,\n        passing in \"America\" as the sub-name returns only the time zones which\n        begin with \"America\".\n\n        On Windows, this function will convert the Windows time zone names to\n        the corresponding TZ Database names with\n        $(D windowsTZNameToTZDatabaseName). To get the actual Windows time\n        zone names, use $(D WindowsTimeZone.getInstalledTZNames) directly.\n\n        Params:\n            subName = The first part of the time zones desired.\n\n        Throws:\n            $(D FileException) on Posix systems if it fails to read from disk.\n            $(LREF DateTimeException) on Windows systems if it fails to read the\n            registry.\n",
						"endline": 26747
					}
				],
				"char": 10,
				"name": "TimeZone",
				"comment": "    Represents a time zone. It is used with $(LREF SysTime) to indicate the time\n    zone of a $(LREF SysTime).\n"
			},
			{
				"kind": "class",
				"line": 26799,
				"base": "std.datetime.TimeZone",
				"members": [
					{
						"kind": "function",
						"line": 26807,
						"storageClass": [
							"static"
						],
						"deco": "FNaNbNeZyC3std8datetime9LocalTime",
						"endchar": 5,
						"char": 33,
						"name": "opCall",
						"comment": "        $(LREF LocalTime) is a singleton class. $(LREF LocalTime) returns its only\n        instance.\n",
						"endline": 26811
					},
					{
						"kind": "function",
						"line": 26832,
						"storageClass": [
							"override"
						],
						"deco": "xFNbNdNfZAya",
						"char": 35,
						"name": "name",
						"comment": "            The name of the time zone per the TZ Database. This is the name used to\n            get a $(LREF2 .TimeZone, TimeZone) by name with $(D TimeZone.getTimeZone).\n\n            Note that this always returns the empty string. This is because time\n            zones cannot be uniquely identified by the attributes given by the\n            OS (such as the $(D stdName) and $(D dstName)), and neither Posix\n            systems nor Windows systems provide an easy way to get the TZ\n            Database name of the local time zone.\n\n            See_Also:\n                $(WEB en.wikipedia.org/wiki/Tz_database, Wikipedia entry on TZ\n                  Database)<br>\n                $(WEB en.wikipedia.org/wiki/List_of_tz_database_time_zones, List\n                  of Time Zones)\n",
						"overrides": [
							"std.datetime.TimeZone.name"
						]
					},
					{
						"kind": "function",
						"line": 26848,
						"storageClass": [
							"override"
						],
						"deco": "xFNbNdNeZAya",
						"endchar": 5,
						"char": 31,
						"name": "stdName",
						"comment": "        Typically, the abbreviation (generally 3 or 4 letters) for the time zone\n        when DST is $(I not) in effect (e.g. PST). It is not necessarily unique.\n\n        However, on Windows, it may be the unabbreviated name (e.g. Pacific\n        Standard Time). Regardless, it is not the same as name.\n\n        This property is overridden because the local time of the system could\n        change while the program is running and we need to determine it\n        dynamically rather than it being fixed like it would be with most time\n        zones.\n",
						"endline": 26888,
						"overrides": [
							"std.datetime.TimeZone.stdName"
						]
					},
					{
						"kind": "function",
						"line": 26919,
						"storageClass": [
							"override"
						],
						"deco": "xFNbNdNeZAya",
						"endchar": 5,
						"char": 31,
						"name": "dstName",
						"comment": "        Typically, the abbreviation (generally 3 or 4 letters) for the time zone\n        when DST $(I is) in effect (e.g. PDT). It is not necessarily unique.\n\n        However, on Windows, it may be the unabbreviated name (e.g. Pacific\n        Daylight Time). Regardless, it is not the same as name.\n\n        This property is overridden because the local time of the system could\n        change while the program is running and we need to determine it\n        dynamically rather than it being fixed like it would be with most time\n        zones.\n",
						"endline": 26959,
						"overrides": [
							"std.datetime.TimeZone.dstName"
						]
					},
					{
						"kind": "function",
						"line": 26984,
						"storageClass": [
							"override"
						],
						"deco": "xFNbNdNeZb",
						"endchar": 5,
						"char": 29,
						"name": "hasDST",
						"comment": "        Whether this time zone has Daylight Savings Time at any point in time.\n        Note that for some time zone types it may not have DST for current\n        dates but will still return true for $(D hasDST) because the time zone\n        did at some point have DST.\n",
						"endline": 27018,
						"overrides": [
							"std.datetime.TimeZone.hasDST"
						]
					},
					{
						"kind": "function",
						"line": 27049,
						"storageClass": [
							"override"
						],
						"deco": "xFNbNelZb",
						"endchar": 5,
						"char": 19,
						"parameters": [
							{
								"deco": "l",
								"name": "stdTime"
							}
						],
						"name": "dstInEffect",
						"comment": "        Takes the number of hnsecs (100 ns) since midnight, January 1st, 1 A.D.\n        in UTC time (i.e. std time) and returns whether DST is in effect in this\n        time zone at the given point in time.\n\n        Params:\n            stdTime = The UTC time that needs to be checked for DST in this time\n                      zone.\n",
						"endline": 27079,
						"overrides": [
							"std.datetime.TimeZone.dstInEffect"
						]
					},
					{
						"kind": "function",
						"line": 27100,
						"storageClass": [
							"override"
						],
						"deco": "xFNbNelZl",
						"endchar": 5,
						"char": 19,
						"parameters": [
							{
								"deco": "l",
								"name": "stdTime"
							}
						],
						"name": "utcToTZ",
						"comment": "        Returns hnsecs in the local time zone using the standard C function\n        calls on Posix systems and the standard Windows system calls on Windows\n        systems to adjust the time to the appropriate time zone from std time.\n\n        Params:\n            stdTime = The UTC time that needs to be adjusted to this time zone's\n                      time.\n\n        See_Also:\n            $(D TimeZone.utcToTZ)\n",
						"endline": 27120,
						"overrides": [
							"std.datetime.TimeZone.utcToTZ"
						]
					},
					{
						"kind": "function",
						"line": 27140,
						"storageClass": [
							"override"
						],
						"deco": "xFNbNelZl",
						"endchar": 5,
						"char": 19,
						"parameters": [
							{
								"deco": "l",
								"name": "adjTime"
							}
						],
						"name": "tzToUTC",
						"comment": "        Returns std time using the standard C function calls on Posix systems\n        and the standard Windows system calls on Windows systems to adjust the\n        time to UTC from the appropriate time zone.\n\n        See_Also:\n            $(D TimeZone.tzToUTC)\n\n        Params:\n            adjTime = The time in this time zone that needs to be adjusted to\n                      UTC time.\n",
						"endline": 27176,
						"overrides": [
							"std.datetime.TimeZone.tzToUTC"
						]
					}
				],
				"char": 7,
				"name": "LocalTime",
				"comment": "    A TimeZone which represents the current local time zone on\n    the system running your program.\n\n    This uses the underlying C calls to adjust the time rather than using\n    specific D code based off of system settings to calculate the time such as\n    $(LREF PosixTimeZone) and $(LREF WindowsTimeZone) do. That also means that it will\n    use whatever the current time zone is on the system, even if the system's\n    time zone changes while the program is running.\n"
			},
			{
				"kind": "class",
				"line": 27361,
				"base": "std.datetime.TimeZone",
				"members": [
					{
						"kind": "function",
						"line": 27368,
						"storageClass": [
							"static"
						],
						"deco": "FNaNbNfZyC3std8datetime3UTC",
						"endchar": 5,
						"char": 27,
						"name": "opCall",
						"comment": "        $(D UTC) is a singleton class. $(D UTC) returns its only instance.\n",
						"endline": 27371
					},
					{
						"kind": "function",
						"line": 27377,
						"storageClass": [
							"override"
						],
						"deco": "xFNbNdNfZb",
						"endchar": 5,
						"char": 29,
						"name": "hasDST",
						"comment": "        Always returns false.\n",
						"endline": 27380,
						"overrides": [
							"std.datetime.TimeZone.hasDST"
						]
					},
					{
						"kind": "function",
						"line": 27386,
						"storageClass": [
							"override"
						],
						"deco": "xFNbNflZb",
						"endchar": 5,
						"char": 19,
						"parameters": [
							{
								"deco": "l",
								"name": "stdTime"
							}
						],
						"name": "dstInEffect",
						"comment": "        Always returns false.\n",
						"endline": 27389,
						"overrides": [
							"std.datetime.TimeZone.dstInEffect"
						]
					},
					{
						"kind": "function",
						"line": 27402,
						"storageClass": [
							"override"
						],
						"deco": "xFNbNflZl",
						"endchar": 5,
						"char": 19,
						"parameters": [
							{
								"deco": "l",
								"name": "stdTime"
							}
						],
						"name": "utcToTZ",
						"comment": "        Returns the given hnsecs without changing them at all.\n\n        Params:\n            stdTime = The UTC time that needs to be adjusted to this time zone's\n                      time.\n\n        See_Also:\n            $(D TimeZone.utcToTZ)\n",
						"endline": 27405,
						"overrides": [
							"std.datetime.TimeZone.utcToTZ"
						]
					},
					{
						"kind": "function",
						"line": 27434,
						"storageClass": [
							"override"
						],
						"deco": "xFNbNflZl",
						"endchar": 5,
						"char": 19,
						"parameters": [
							{
								"deco": "l",
								"name": "adjTime"
							}
						],
						"name": "tzToUTC",
						"comment": "        Returns the given hnsecs without changing them at all.\n\n        See_Also:\n            $(D TimeZone.tzToUTC)\n\n        Params:\n            adjTime = The time in this time zone that needs to be adjusted to\n                      UTC time.\n",
						"endline": 27437,
						"overrides": [
							"std.datetime.TimeZone.tzToUTC"
						]
					},
					{
						"kind": "function",
						"line": 27463,
						"storageClass": [
							"override"
						],
						"deco": "xFNbNflZS4core4time8Duration",
						"endchar": 5,
						"char": 23,
						"parameters": [
							{
								"deco": "l",
								"name": "stdTime"
							}
						],
						"name": "utcOffsetAt",
						"comment": "        Returns a $(CXREF time, Duration) of 0.\n\n        Params:\n            stdTime = The UTC time for which to get the offset from UTC for this\n                      time zone.\n",
						"endline": 27466,
						"overrides": [
							"std.datetime.TimeZone.utcOffsetAt"
						]
					}
				],
				"char": 7,
				"name": "UTC",
				"comment": "    A $(LREF2 .TimeZone, TimeZone) which represents UTC.\n"
			},
			{
				"kind": "class",
				"line": 27493,
				"base": "std.datetime.TimeZone",
				"members": [
					{
						"kind": "function",
						"line": 27500,
						"storageClass": [
							"override"
						],
						"deco": "xFNbNdNfZb",
						"endchar": 5,
						"char": 29,
						"name": "hasDST",
						"comment": "        Always returns false.\n",
						"endline": 27503,
						"overrides": [
							"std.datetime.TimeZone.hasDST"
						]
					},
					{
						"kind": "function",
						"line": 27509,
						"storageClass": [
							"override"
						],
						"deco": "xFNbNflZb",
						"endchar": 5,
						"char": 19,
						"parameters": [
							{
								"deco": "l",
								"name": "stdTime"
							}
						],
						"name": "dstInEffect",
						"comment": "        Always returns false.\n",
						"endline": 27512,
						"overrides": [
							"std.datetime.TimeZone.dstInEffect"
						]
					},
					{
						"kind": "function",
						"line": 27523,
						"storageClass": [
							"override"
						],
						"deco": "xFNbNflZl",
						"endchar": 5,
						"char": 19,
						"parameters": [
							{
								"deco": "l",
								"name": "stdTime"
							}
						],
						"name": "utcToTZ",
						"comment": "        Takes the number of hnsecs (100 ns) since midnight, January 1st, 1 A.D.\n        in UTC time (i.e. std time) and converts it to this time zone's time.\n\n        Params:\n            stdTime = The UTC time that needs to be adjusted to this time zone's\n                      time.\n",
						"endline": 27526,
						"overrides": [
							"std.datetime.TimeZone.utcToTZ"
						]
					},
					{
						"kind": "function",
						"line": 27551,
						"storageClass": [
							"override"
						],
						"deco": "xFNbNflZl",
						"endchar": 5,
						"char": 19,
						"parameters": [
							{
								"deco": "l",
								"name": "adjTime"
							}
						],
						"name": "tzToUTC",
						"comment": "        Takes the number of hnsecs (100 ns) since midnight, January 1st, 1 A.D.\n        in this time zone's time and converts it to UTC (i.e. std time).\n\n        Params:\n            adjTime = The time in this time zone that needs to be adjusted to\n                      UTC time.\n",
						"endline": 27554,
						"overrides": [
							"std.datetime.TimeZone.tzToUTC"
						]
					},
					{
						"kind": "function",
						"line": 27578,
						"storageClass": [
							"override"
						],
						"deco": "xFNbNflZS4core4time8Duration",
						"endchar": 5,
						"char": 23,
						"parameters": [
							{
								"deco": "l",
								"name": "stdTime"
							}
						],
						"name": "utcOffsetAt",
						"comment": "        Returns utcOffset as a $(CXREF time, Duration).\n\n        Params:\n            stdTime = The UTC time for which to get the offset from UTC for this\n                      time zone.\n",
						"endline": 27581,
						"overrides": [
							"std.datetime.TimeZone.utcOffsetAt"
						]
					},
					{
						"kind": "constructor",
						"line": 27590,
						"deco": "yFNaNfS4core4time8DurationAyaZyC3std8datetime14SimpleTimeZone",
						"endchar": 5,
						"char": 5,
						"parameters": [
							{
								"deco": "S4core4time8Duration",
								"name": "utcOffset"
							},
							{
								"deco": "Aya",
								"default": "\"\"",
								"name": "stdName"
							}
						],
						"name": "this",
						"comment": "        Params:\n            utcOffset = This time zone's offset from UTC with west of UTC being\n                        negative (it is added to UTC to get the adjusted time).\n            stdName   = The $(D stdName) for this time zone.\n",
						"originalType": "immutable pure @safe (Duration utcOffset, string stdName = \"\")",
						"endline": 27598
					},
					{
						"kind": "constructor",
						"line": 27610,
						"storageClass": [
							"deprecated"
						],
						"deco": "yFNaNfiAyaZyC3std8datetime14SimpleTimeZone",
						"endchar": 5,
						"char": 5,
						"parameters": [
							{
								"deco": "i",
								"name": "utcOffset"
							},
							{
								"deco": "Aya",
								"default": "\"\"",
								"name": "stdName"
							}
						],
						"name": "this",
						"comment": "        $(RED Deprecated. Please use the overload which takes a Duration. This\n              overload will be removed in December 2014).\n\n        Params:\n            utcOffset = This time zone's offset from UTC in minutes with west of\n                        negative (it is added to UTC to get the adjusted time).\n            stdName   = The $(D stdName) for this time zone.\n",
						"originalType": "immutable pure @safe (int utcOffset, string stdName = \"\")",
						"endline": 27613
					},
					{
						"kind": "function",
						"line": 27629,
						"deco": "xFNaNbNdNfZS4core4time8Duration",
						"endchar": 5,
						"char": 24,
						"name": "utcOffset",
						"comment": "        The amount of time the offset from UTC is (negative is west of UTC,\n        positive is east).\n",
						"endline": 27632
					}
				],
				"char": 7,
				"name": "SimpleTimeZone",
				"comment": "    Represents a time zone with an offset (in minutes, west is negative) from\n    UTC but no DST.\n\n    It's primarily used as the time zone in the result of $(LREF SysTime)'s\n    $(D fromISOString), $(D fromISOExtString), and $(D fromSimpleString).\n\n    $(D name) and $(D dstName) are always the empty string since this time zone\n    has no DST, and while it may be meant to represent a time zone which is in\n    the TZ Database, obviously it's not likely to be following the exact rules\n    of any of the time zones in the TZ Database, so it makes no sense to set it.\n"
			},
			{
				"kind": "class",
				"line": 27898,
				"base": "std.datetime.TimeZone",
				"members": [
					{
						"kind": "function",
						"line": 27913,
						"storageClass": [
							"override"
						],
						"deco": "xFNbNdNfZb",
						"endchar": 5,
						"char": 29,
						"name": "hasDST",
						"comment": "        Whether this time zone has Daylight Savings Time at any point in time.\n        Note that for some time zone types it may not have DST for current\n        dates but will still return true for $(D hasDST) because the time zone\n        did at some point have DST.\n",
						"endline": 27916,
						"overrides": [
							"std.datetime.TimeZone.hasDST"
						]
					},
					{
						"kind": "function",
						"line": 27928,
						"storageClass": [
							"override"
						],
						"deco": "xFNbNflZb",
						"endchar": 5,
						"char": 19,
						"parameters": [
							{
								"deco": "l",
								"name": "stdTime"
							}
						],
						"name": "dstInEffect",
						"comment": "        Takes the number of hnsecs (100 ns) since midnight, January 1st, 1 A.D.\n        in UTC time (i.e. std time) and returns whether DST is in effect in this\n        time zone at the given point in time.\n\n        Params:\n            stdTime = The UTC time that needs to be checked for DST in this time\n                      zone.\n",
						"endline": 27941,
						"overrides": [
							"std.datetime.TimeZone.dstInEffect"
						]
					},
					{
						"kind": "function",
						"line": 27952,
						"storageClass": [
							"override"
						],
						"deco": "xFNbNflZl",
						"endchar": 5,
						"char": 19,
						"parameters": [
							{
								"deco": "l",
								"name": "stdTime"
							}
						],
						"name": "utcToTZ",
						"comment": "        Takes the number of hnsecs (100 ns) since midnight, January 1st, 1 A.D.\n        in UTC time (i.e. std time) and converts it to this time zone's time.\n\n        Params:\n            stdTime = The UTC time that needs to be adjusted to this time zone's\n                      time.\n",
						"endline": 27966,
						"overrides": [
							"std.datetime.TimeZone.utcToTZ"
						]
					},
					{
						"kind": "function",
						"line": 27977,
						"storageClass": [
							"override"
						],
						"deco": "xFNbNflZl",
						"endchar": 5,
						"char": 19,
						"parameters": [
							{
								"deco": "l",
								"name": "adjTime"
							}
						],
						"name": "tzToUTC",
						"comment": "        Takes the number of hnsecs (100 ns) since midnight, January 1st, 1 A.D.\n        in this time zone's time and converts it to UTC (i.e. std time).\n\n        Params:\n            adjTime = The time in this time zone that needs to be adjusted to\n                      UTC time.\n",
						"endline": 28012,
						"overrides": [
							"std.datetime.TimeZone.tzToUTC"
						]
					},
					{
						"kind": "variable",
						"line": 28021,
						"init": "\"/usr/share/zoneinfo/\"",
						"storageClass": [
							"enum"
						],
						"deco": "Aya",
						"char": 14,
						"name": "defaultTZDatabaseDir",
						"comment": "            The default directory where the TZ Database files are. It's empty\n            for Windows, since Windows doesn't have them.\n"
					},
					{
						"kind": "function",
						"line": 28066,
						"storageClass": [
							"static"
						],
						"deco": "FNeAyaAyaZyC3std8datetime13PosixTimeZone",
						"endchar": 5,
						"char": 37,
						"parameters": [
							{
								"deco": "Aya",
								"name": "name"
							},
							{
								"deco": "Aya",
								"default": "\"/usr/share/zoneinfo/\"",
								"name": "tzDatabaseDir"
							}
						],
						"name": "getTimeZone",
						"comment": "        Returns a $(LREF2 .TimeZone, TimeZone) with the give name per the TZ Database. The time\n        zone information is fetched from the TZ Database time zone files in the\n        given directory.\n\n        See_Also:\n            $(WEB en.wikipedia.org/wiki/Tz_database, Wikipedia entry on TZ\n              Database)<br>\n            $(WEB en.wikipedia.org/wiki/List_of_tz_database_time_zones, List of\n              Time Zones)\n\n        Params:\n            name          = The TZ Database name of the desired time zone\n            tzDatabaseDir = The directory where the TZ Database files are\n                            located. Because these files are not located on\n                            Windows systems, provide them\n                            and give their location here to\n                            use $(LREF PosixTimeZone)s.\n\n        Throws:\n            $(LREF DateTimeException) if the given time zone could not be found or\n            $(D FileException) if the TZ Database file could not be opened.\n\n        Examples:\n--------------------\nauto tz = PosixTimeZone.getTimeZone(\"America/Los_Angeles\");\n\nassert(tz.name == \"America/Los_Angeles\");\nassert(tz.stdName == \"PST\");\nassert(tz.dstName == \"PDT\");\n--------------------\n",
						"originalType": "@trusted immutable(PosixTimeZone)(string name, string tzDatabaseDir = defaultTZDatabaseDir)",
						"endline": 28366
					},
					{
						"kind": "function",
						"line": 28384,
						"storageClass": [
							"static"
						],
						"deco": "FNeAyaAyaZAAya",
						"endchar": 5,
						"char": 21,
						"parameters": [
							{
								"deco": "Aya",
								"default": "\"\"",
								"name": "subName"
							},
							{
								"deco": "Aya",
								"default": "\"/usr/share/zoneinfo/\"",
								"name": "tzDatabaseDir"
							}
						],
						"name": "getInstalledTZNames",
						"comment": "        Returns a list of the names of the time zones installed on the system.\n\n        Providing a sub-name narrows down the list of time zones (which\n        can number in the thousands). For example,\n        passing in \"America\" as the sub-name returns only the time zones which\n        begin with \"America\".\n\n        Params:\n            subName       = The first part of the desired time zones.\n            tzDatabaseDir = The directory where the TZ Database files are\n                            located.\n\n        Throws:\n            $(D FileException) if it fails to read from disk.\n",
						"originalType": "@trusted string[](string subName = \"\", string tzDatabaseDir = defaultTZDatabaseDir)",
						"endline": 28424
					}
				],
				"char": 7,
				"name": "PosixTimeZone",
				"comment": "    Represents a time zone from a TZ Database time zone file. Files from the TZ\n    Database are how Posix systems hold their time zone information.\n    Unfortunately, Windows does not use the TZ Database. To use the TZ Database,\n    use $(D PosixTimeZone) (which reads its information from the TZ Database\n    files on disk) on Windows by providing the TZ Database files and telling\n    $(D PosixTimeZone.getTimeZone) where the directory holding them is.\n\n    To get a $(D PosixTimeZone), either call $(D PosixTimeZone.getTimeZone)\n    (which allows specifying the location the time zone files) or call\n    $(D TimeZone.getTimeZone) (which will give a $(D PosixTimeZone) on Posix\n    systems and a $(LREF WindowsTimeZone) on Windows systems).\n\n    Note:\n        Unless your system's local time zone deals with leap seconds (which is\n        highly unlikely), then the only way to get a time zone which\n        takes leap seconds into account is to use $(LREF PosixTimeZone) with a\n        time zone whose name starts with \"right/\". Those time zone files do\n        include leap seconds, and $(LREF PosixTimeZone) will take them into account\n        (though posix systems which use a \"right/\" time zone as their local time\n        zone will $(I not) take leap seconds into account even though they're\n        in the file).\n\n    See_Also:\n        $(WEB www.iana.org/time-zones, Home of the TZ Database files)<br>\n        $(WEB en.wikipedia.org/wiki/Tz_database, Wikipedia entry on TZ Database)<br>\n        $(WEB en.wikipedia.org/wiki/List_of_tz_database_time_zones, List of Time\n          Zones)\n"
			},
			{
				"kind": "class",
				"line": 28719,
				"base": "std.datetime.TimeZone",
				"members": [
					{
						"kind": "function",
						"line": 28729,
						"storageClass": [
							"override"
						],
						"deco": "xFNbNdNfZb",
						"char": 33,
						"name": "hasDST",
						"comment": "            Whether this time zone has Daylight Savings Time at any point in\n            time. Note that for some time zone types it may not have DST for\n            current dates but will still return true for $(D hasDST) because the\n            time zone did at some point have DST.\n",
						"overrides": [
							"std.datetime.TimeZone.hasDST"
						]
					},
					{
						"kind": "function",
						"line": 28741,
						"storageClass": [
							"override"
						],
						"deco": "xFNbNflZb",
						"char": 23,
						"parameters": [
							{
								"deco": "l",
								"name": "stdTime"
							}
						],
						"name": "dstInEffect",
						"comment": "            Takes the number of hnsecs (100 ns) since midnight, January 1st,\n            1 A.D. in UTC time (i.e. std time) and returns whether DST is in\n            effect in this time zone at the given point in time.\n\n            Params:\n                stdTime = The UTC time that needs to be checked for DST in this\n                          time zone.\n",
						"overrides": [
							"std.datetime.TimeZone.dstInEffect"
						]
					},
					{
						"kind": "function",
						"line": 28753,
						"storageClass": [
							"override"
						],
						"deco": "xFNbNflZl",
						"char": 23,
						"parameters": [
							{
								"deco": "l",
								"name": "stdTime"
							}
						],
						"name": "utcToTZ",
						"comment": "            Takes the number of hnsecs (100 ns) since midnight, January 1st,\n            1 A.D. in UTC time (i.e. std time) and converts it to this time\n                zone's time.\n\n            Params:\n                stdTime = The UTC time that needs to be adjusted to this time\n                          zone's time.\n",
						"overrides": [
							"std.datetime.TimeZone.utcToTZ"
						]
					},
					{
						"kind": "function",
						"line": 28765,
						"storageClass": [
							"override"
						],
						"deco": "xFNbNflZl",
						"char": 23,
						"parameters": [
							{
								"deco": "l",
								"name": "adjTime"
							}
						],
						"name": "tzToUTC",
						"comment": "            Takes the number of hnsecs (100 ns) since midnight, January 1st,\n            1 A.D. in this time zone's time and converts it to UTC (i.e. std\n            time).\n\n            Params:\n                adjTime = The time in this time zone that needs to be adjusted\n                          to UTC time.\n",
						"overrides": [
							"std.datetime.TimeZone.tzToUTC"
						]
					},
					{
						"kind": "function",
						"line": 28791,
						"storageClass": [
							"static"
						],
						"deco": "FNfAyaZyC3std8datetime15WindowsTimeZone",
						"char": 43,
						"parameters": [
							{
								"deco": "Aya",
								"name": "name"
							}
						],
						"name": "getTimeZone",
						"comment": "            Returns a $(LREF2 .TimeZone, TimeZone) with the given name per the Windows time\n            zone names. The time zone information is fetched from the Windows\n            registry.\n\n            See_Also:\n                $(WEB en.wikipedia.org/wiki/Tz_database, Wikipedia entry on TZ\n                  Database)<br>\n                $(WEB en.wikipedia.org/wiki/List_of_tz_database_time_zones, List\n                  of Time Zones)\n\n            Params:\n                name = The TZ Database name of the desired time zone.\n\n            Throws:\n                $(LREF DateTimeException) if the given time zone could not be\n                found.\n\n            Examples:\n    --------------------\n    auto tz = TimeZone.getTimeZone(\"America/Los_Angeles\");\n    --------------------\n"
					},
					{
						"kind": "function",
						"line": 28801,
						"storageClass": [
							"static"
						],
						"deco": "FNfZAAya",
						"char": 25,
						"name": "getInstalledTZNames",
						"comment": "            Returns a list of the names of the time zones installed on the\n            system. The list returned by WindowsTimeZone contains the Windows\n            TZ names, not the TZ Database names. However,\n            $(D TimeZone.getinstalledTZNames) will return the TZ Database names\n            which are equivalent to the Windows TZ names.\n"
					}
				],
				"char": 11,
				"name": "WindowsTimeZone",
				"comment": "        $(BLUE This class is Windows-Only.)\n\n        Represents a time zone from the Windows registry. Unfortunately, Windows\n        does not use the TZ Database. To use the TZ Database, use\n        $(LREF PosixTimeZone) (which reads its information from the TZ Database\n        files on disk) on Windows by providing the TZ Database files and telling\n        $(D PosixTimeZone.getTimeZone) where the directory holding them is.\n\n        The TZ Database files and Windows' time zone information frequently\n        do not match. Windows has many errors with regards to when DST switches\n        occur (especially for historical dates). Also, the TZ Database files\n        include far more time zones than Windows does. So, for accurate\n        time zone information, use the TZ Database files with\n        $(LREF PosixTimeZone) rather than $(LREF WindowsTimeZone). However, because\n        $(LREF WindowsTimeZone) uses Windows system calls to deal with the time,\n        it's far more likely to match the behavior of other Windows programs.\n        Be aware of the differences when selecting a method.\n\n        $(LREF WindowsTimeZone) does not exist on Posix systems.\n\n        To get a $(LREF WindowsTimeZone), either call\n        $(D WindowsTimeZone.getTimeZone) or call $(D TimeZone.getTimeZone)\n        (which will give a $(LREF PosixTimeZone) on Posix systems and a\n         $(LREF WindowsTimeZone) on Windows systems).\n\n        See_Also:\n            $(WEB www.iana.org/time-zones, Home of the TZ Database files)\n"
			},
			{
				"kind": "function",
				"line": 29151,
				"deco": "FNbNfAyaZv",
				"char": 10,
				"parameters": [
					{
						"deco": "Aya",
						"name": "tzDatabaseName"
					}
				],
				"name": "setTZEnvVar",
				"comment": "        $(BLUE This function is Posix-Only.)\n\n        Sets the local time zone on Posix systems with the TZ\n        Database name by setting the TZ environment variable.\n\n        Unfortunately, there is no way to do it on Windows using the TZ\n        Database name, so this function only exists on Posix systems.\n"
			},
			{
				"kind": "function",
				"line": 29159,
				"deco": "FNbNfZv",
				"char": 10,
				"name": "clearTZEnvVar",
				"comment": "        $(BLUE This function is Posix-Only.)\n\n        Clears the TZ environment variable.\n"
			},
			{
				"kind": "function",
				"line": 29214,
				"deco": "FNaNbNiNfAyaZAya",
				"endchar": 1,
				"char": 8,
				"parameters": [
					{
						"deco": "Aya",
						"name": "tzName"
					}
				],
				"name": "tzDatabaseNameToWindowsTZName",
				"comment": "    Converts the given TZ Database name to the corresponding Windows time zone\n    name.\n\n    Note that in a few cases, a TZ Dabatase name corresponds to two different\n    Windows time zone names. So, while in most cases converting from one to the\n    other and back again will result in the same time zone name started\n    with, in a few case, it'll get a different name.\n\n    Also, there are far more TZ Database names than Windows time zones, so some\n    of the more exotic TZ Database names don't have corresponding Windows time\n    zone names.\n\n    Returns null if the given time zone name cannot be converted.\n\n    See_Also:\n        $(WEB unicode.org/repos/cldr-tmp/trunk/diff/supplemental/zone_tzid.html,\n              Windows <-> TZ Database Name Conversion Table)\n\n    Params:\n        tzName = The TZ Database name to convert.\n",
				"endline": 29651
			},
			{
				"kind": "function",
				"line": 29674,
				"deco": "FNaNbNiNfAyaZAya",
				"endchar": 1,
				"char": 8,
				"parameters": [
					{
						"deco": "Aya",
						"name": "tzName"
					}
				],
				"name": "windowsTZNameToTZDatabaseName",
				"comment": "    Converts the given Windows time zone name to a corresponding TZ Database\n    name.\n\n    Returns null if the given time zone name cannot be converted.\n\n    See_Also:\n        $(WEB unicode.org/repos/cldr-tmp/trunk/diff/supplemental/zone_tzid.html,\n              Windows <-> TZ Database Name Conversion Table)\n\n    Params:\n        tzName = The TZ Database name to convert.\n",
				"endline": 29796
			},
			{
				"kind": "struct",
				"line": 29853,
				"members": [
					{
						"kind": "constructor",
						"line": 29890,
						"deco": "FNcNfE3std8datetime9AutoStartZS3std8datetime9StopWatch",
						"endchar": 5,
						"char": 5,
						"parameters": [
							{
								"deco": "E3std8datetime9AutoStart",
								"name": "autostart"
							}
						],
						"name": "this",
						"comment": "       Auto start with constructor.\n",
						"originalType": "ref @safe (AutoStart autostart)",
						"endline": 29894
					},
					{
						"kind": "function",
						"line": 29904,
						"deco": "xFNaNbNfxS3std8datetime9StopWatchZb",
						"endchar": 5,
						"char": 10,
						"parameters": [
							{
								"deco": "xS3std8datetime9StopWatch",
								"name": "rhs"
							}
						],
						"name": "opEquals",
						"comment": "\n",
						"originalType": "const pure nothrow @safe bool(const StopWatch rhs)",
						"endline": 29907
					},
					{
						"kind": "function",
						"line": 29910,
						"deco": "xFNaNbNfKxS3std8datetime9StopWatchZb",
						"endchar": 5,
						"char": 10,
						"parameters": [
							{
								"deco": "xS3std8datetime9StopWatch",
								"storageClass": [
									"ref"
								],
								"name": "rhs"
							}
						],
						"name": "opEquals",
						"comment": "ditto\n",
						"originalType": "const pure nothrow @safe bool(ref const StopWatch rhs)",
						"endline": 29914
					},
					{
						"kind": "function",
						"line": 29920,
						"deco": "FNfZv",
						"endchar": 5,
						"char": 10,
						"name": "reset",
						"comment": "       Resets the stop watch.\n",
						"endline": 29934
					},
					{
						"kind": "function",
						"line": 29949,
						"deco": "FNfZv",
						"endchar": 5,
						"char": 10,
						"name": "start",
						"comment": "       Starts the stop watch.\n",
						"endline": 29954
					},
					{
						"kind": "function",
						"line": 29975,
						"deco": "FNfZv",
						"endchar": 5,
						"char": 10,
						"name": "stop",
						"comment": "       Stops the stop watch.\n",
						"endline": 29980
					},
					{
						"kind": "function",
						"line": 30002,
						"deco": "xFNfZS4core4time12TickDuration",
						"endchar": 5,
						"char": 18,
						"name": "peek",
						"comment": "       Peek at the amount of time which has passed since the stop watch was\n       started.\n",
						"endline": 30008
					},
					{
						"kind": "function",
						"line": 30027,
						"deco": "FNfS4core4time12TickDurationZv",
						"endchar": 5,
						"char": 10,
						"parameters": [
							{
								"deco": "S4core4time12TickDuration",
								"name": "d"
							}
						],
						"name": "setMeasured",
						"comment": "       Set the amount of time which has been measured since the stop watch was\n       started.\n",
						"endline": 30031
					},
					{
						"kind": "function",
						"line": 30047,
						"deco": "xFNaNbNdNfZb",
						"endchar": 5,
						"char": 10,
						"name": "running",
						"comment": "       Confirm whether this stopwatch is measuring time.\n",
						"endline": 30050
					}
				],
				"char": 7,
				"name": "StopWatch",
				"comment": "   $(D StopWatch) measures time as precisely as possible.\n\n   This class uses a high-performance counter. On Windows systems, it uses\n   $(D QueryPerformanceCounter), and on Posix systems, it uses\n   $(D clock_gettime) if available, and $(D gettimeofday) otherwise.\n\n   But the precision of $(D StopWatch) differs from system to system. It is\n   impossible to for it to be the same from system to system since the precision\n   of the system clock varies from system to system, and other system-dependent\n   and situation-dependent stuff (such as the overhead of a context switch\n   between threads) can also affect $(D StopWatch)'s accuracy.\n\n   Examples:\n--------------------\nvoid foo()\n{\n    StopWatch sw;\n    enum n = 100;\n    TickDuration[n] times;\n    TickDuration last = TickDuration.from!\"seconds\"(0);\n    foreach(i; 0..n)\n    {\n       sw.start(); //start/resume mesuring.\n       foreach(unused; 0..1_000_000)\n           bar();\n       sw.stop();  //stop/pause measuring.\n       //Return value of peek() after having stopped are the always same.\n       writeln((i + 1) * 1_000_000, \" times done, lap time: \",\n               sw.peek().msecs, \"[ms]\");\n       times[i] = sw.peek() - last;\n       last = sw.peek();\n    }\n    real sum = 0;\n    // To know the number of seconds,\n    // use properties of TickDuration.\n    // (seconds, msecs, usecs, hnsecs)\n    foreach(t; times)\n       sum += t.hnsecs;\n    writeln(\"Average time: \", sum/n, \" hnsecs\");\n}\n--------------------\n"
			},
			{
				"kind": "template",
				"line": 30105,
				"members": [
					{
						"kind": "function",
						"line": 30105,
						"endchar": 1,
						"char": 26,
						"type": "TickDuration[fun.length](uint n)",
						"parameters": [
							{
								"deco": "k",
								"name": "n"
							}
						],
						"name": "benchmark",
						"endline": 30120
					}
				],
				"char": 26,
				"parameters": [
					{
						"kind": "tuple",
						"name": "fun"
					}
				],
				"comment": "    Benchmarks code for speed assessment and comparison.\n\n    Params:\n        fun = aliases of callable objects (e.g. function names). Each should\n              take no arguments.\n        n   = The number of times each function is to be executed.\n\n    Returns:\n        The amount of time (as a $(CXREF time, TickDuration)) that it took to\n        call each function $(D n) times. The first value is the length of time\n        that it took to call $(D fun[0]) $(D n) times. The second value is the\n        length of time it took to call $(D fun[1]) $(D n) times. Etc.\n\n    Note that casting the TickDurations to $(CXREF time, Duration)s will make\n    the results easier to deal with (and it may change in the future that\n    benchmark will return an array of Durations rather than TickDurations).\n\n    See_Also:\n        $(LREF measureTime)\nExample:\n\n---\nimport std.conv : to;\nint a;\nvoid f0() {}\nvoid f1() {auto b = a;}\nvoid f2() {auto b = to!string(a);}\nauto r = benchmark!(f0, f1, f2)(10_000);\nauto f0Result = to!Duration(r[0]); // time f0 took to run 10,000 times\nauto f1Result = to!Duration(r[1]); // time f1 took to run 10,000 times\nauto f2Result = to!Duration(r[2]); // time f2 took to run 10,000 times\n\n---\n",
				"name": "benchmark"
			},
			{
				"kind": "struct",
				"line": 30149,
				"members": [
					{
						"kind": "function",
						"line": 30158,
						"deco": "xFNaNbNdNfZe",
						"endchar": 5,
						"char": 20,
						"name": "point",
						"comment": "       Evaluation value\n\n       This returns the evaluation value of performance as the ratio of\n       baseFunc's time over targetFunc's time. If performance is high, this\n       returns a high value.\n",
						"endline": 30161
					},
					{
						"kind": "function",
						"line": 30167,
						"deco": "xFNaNbNdNfZS4core4time12TickDuration",
						"endchar": 5,
						"char": 35,
						"name": "baseTime",
						"comment": "       The time required of the base function\n",
						"endline": 30170
					},
					{
						"kind": "function",
						"line": 30176,
						"deco": "xFNaNbNdNfZS4core4time12TickDuration",
						"endchar": 5,
						"char": 35,
						"name": "targetTime",
						"comment": "       The time required of the target function\n",
						"endline": 30179
					}
				],
				"char": 7,
				"name": "ComparingBenchmarkResult",
				"comment": "   Return value of benchmark with two functions comparing.\n"
			},
			{
				"kind": "template",
				"line": 30217,
				"members": [
					{
						"kind": "function",
						"line": 30217,
						"endchar": 1,
						"char": 26,
						"type": "ComparingBenchmarkResult()",
						"name": "comparingBenchmark",
						"endline": 30223
					}
				],
				"char": 26,
				"parameters": [
					{
						"kind": "alias",
						"name": "baseFunc"
					},
					{
						"kind": "alias",
						"name": "targetFunc"
					},
					{
						"kind": "value",
						"defaultValue": "4095",
						"deco": "i",
						"name": "times"
					}
				],
				"comment": "   Benchmark with two functions comparing.\n\n   Params:\n       baseFunc   = The function to become the base of the speed.\n       targetFunc = The function that wants to measure speed.\n       times      = The number of times each function is to be executed.\n\n   Examples:\n--------------------\nvoid f1() {\n   // ...\n}\nvoid f2() {\n   // ...\n}\n\nvoid main() {\n   auto b = comparingBenchmark!(f1, f2, 0x80);\n   writeln(b.point);\n}\n--------------------\n",
				"name": "comparingBenchmark"
			},
			{
				"kind": "template",
				"line": 30269,
				"members": [
					{
						"kind": "variable",
						"line": 30271,
						"init": "hasMin!T && hasMax!T && hasOverloadedOpBinaryWithDuration!T && hasOverloadedOpAssignWithDuration!T && hasOverloadedOpBinaryWithSelf!T",
						"storageClass": [
							"enum"
						],
						"char": 10,
						"name": "isTimePoint"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": "    Whether the given type defines all of the necessary functions for it to\n    function as a time point.\n",
				"name": "isTimePoint"
			},
			{
				"kind": "function",
				"line": 30300,
				"storageClass": [
					"static"
				],
				"deco": "FNaNbNfiZb",
				"endchar": 1,
				"char": 13,
				"parameters": [
					{
						"deco": "i",
						"name": "year"
					}
				],
				"name": "yearIsLeapYear",
				"comment": "    Whether the given Gregorian Year is a leap year.\n\n    Params:\n        year = The year to to be tested.\n",
				"endline": 30309
			},
			{
				"kind": "function",
				"line": 30336,
				"deco": "FNaNbNflZl",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "l",
						"name": "unixTime"
					}
				],
				"name": "unixTimeToStdTime",
				"comment": "    Converts a $(D time_t) (which uses midnight, January 1st, 1970 UTC as its\n    epoch and seconds as its units) to std time (which uses midnight,\n    January 1st, 1 A.D. UTC and hnsecs as its units).\n\n    Params:\n        unixTime = The $(D time_t) to convert.\n",
				"originalType": "pure nothrow @safe long(time_t unixTime)",
				"endline": 30340
			},
			{
				"kind": "function",
				"line": 30373,
				"deco": "FNaNbNflZl",
				"endchar": 1,
				"char": 8,
				"parameters": [
					{
						"deco": "l",
						"name": "stdTime"
					}
				],
				"name": "stdTimeToUnixTime",
				"comment": "    Converts std time (which uses midnight, January 1st, 1 A.D. UTC as its epoch\n    and hnsecs as its units) to $(D time_t) (which uses midnight, January 1st,\n    1970 UTC as its epoch and seconds as its units). If $(D time_t) is 32 bits,\n    rather than 64, and the result can't fit in a 32-bit value, then the closest\n    value that can be held in 32 bits will be used (so $(D time_t.max) if it\n    goes over and $(D time_t.min) if it goes under).\n\n    Note:\n        While Windows systems require that $(D time_t) be non-negative (in spite\n        of $(D time_t) being signed), this function still returns negative\n        numbers on Windows, since it's more flexible to allow negative time_t\n        for those who need it. If on Windows and using the\n        standard C functions or Win32 API functions which take a $(D time_t),\n        check whether the return value of\n        $(D stdTimeToUnixTime) is non-negative.\n\n    Params:\n        stdTime = The std time to convert.\n",
				"originalType": "pure nothrow @safe time_t(long stdTime)",
				"endline": 30393
			},
			{
				"kind": "function",
				"line": 30433,
				"deco": "FNfxPPvyC3std8datetime8TimeZoneZS3std8datetime7SysTime",
				"char": 13,
				"parameters": [
					{
						"deco": "xPPv",
						"name": "st"
					},
					{
						"deco": "yC3std8datetime8TimeZone",
						"default": "opCall()",
						"name": "tz"
					}
				],
				"name": "SYSTEMTIMEToSysTime",
				"comment": "        $(BLUE This function is Windows-Only.)\n\n        Converts a $(D SYSTEMTIME) struct to a $(LREF SysTime).\n\n        Params:\n            st = The $(D SYSTEMTIME) struct to convert.\n            tz = The time zone that the time in the $(D SYSTEMTIME) struct is\n                 assumed to be (if the $(D SYSTEMTIME) was supplied by a Windows\n                 system call, the $(D SYSTEMTIME) will either be in local time\n                 or UTC, depending on the call).\n\n        Throws:\n            $(LREF DateTimeException) if the given $(D SYSTEMTIME) will not fit in\n            a $(LREF SysTime), which is highly unlikely to happen given that\n            $(D SysTime.max) is in 29,228 A.D. and the maximum $(D SYSTEMTIME)\n            is in 30,827 A.D.\n",
				"originalType": "@safe SysTime(const SYSTEMTIME* st, immutable TimeZone tz = LocalTime())"
			},
			{
				"kind": "function",
				"line": 30453,
				"deco": "FNfxS3std8datetime7SysTimeZPv",
				"char": 16,
				"parameters": [
					{
						"deco": "xS3std8datetime7SysTime",
						"name": "sysTime"
					}
				],
				"name": "SysTimeToSYSTEMTIME",
				"comment": "        $(BLUE This function is Windows-Only.)\n\n        Converts a $(LREF SysTime) to a $(D SYSTEMTIME) struct.\n\n        The $(D SYSTEMTIME) which is returned will be set using the given\n        $(LREF SysTime)'s time zone, so to get the $(D SYSTEMTIME) in\n        UTC, set the $(LREF SysTime)'s time zone to UTC.\n\n        Params:\n            sysTime = The $(LREF SysTime) to convert.\n\n        Throws:\n            $(LREF DateTimeException) if the given $(LREF SysTime) will not fit in a\n            $(D SYSTEMTIME). This will only happen if the $(LREF SysTime)'s date is\n            prior to 1601 A.D.\n",
				"originalType": "@safe SYSTEMTIME(in SysTime sysTime)"
			},
			{
				"kind": "function",
				"line": 30469,
				"deco": "FNfxPPvZl",
				"char": 10,
				"parameters": [
					{
						"deco": "xPPv",
						"name": "ft"
					}
				],
				"name": "FILETIMEToStdTime",
				"comment": "        $(BLUE This function is Windows-Only.)\n\n        Converts a $(D FILETIME) struct to the number of hnsecs since midnight,\n        January 1st, 1 A.D.\n\n        Params:\n            ft = The $(D FILETIME) struct to convert.\n\n        Throws:\n            $(LREF DateTimeException) if the given $(D FILETIME) cannot be\n            represented as the return value.\n",
				"originalType": "@safe long(const FILETIME* ft)"
			},
			{
				"kind": "function",
				"line": 30486,
				"deco": "FNfxPPvyC3std8datetime8TimeZoneZS3std8datetime7SysTime",
				"char": 13,
				"parameters": [
					{
						"deco": "xPPv",
						"name": "ft"
					},
					{
						"deco": "yC3std8datetime8TimeZone",
						"default": "opCall()",
						"name": "tz"
					}
				],
				"name": "FILETIMEToSysTime",
				"comment": "        $(BLUE This function is Windows-Only.)\n\n        Converts a $(D FILETIME) struct to a $(LREF SysTime).\n\n        Params:\n            ft = The $(D FILETIME) struct to convert.\n            tz = The time zone that the $(LREF SysTime) will be in ($(D FILETIME)s\n                 are in UTC).\n\n        Throws:\n            $(LREF DateTimeException) if the given $(D FILETIME) will not fit in a\n            $(LREF SysTime).\n",
				"originalType": "@safe SysTime(const FILETIME* ft, immutable TimeZone tz = LocalTime())"
			},
			{
				"kind": "function",
				"line": 30502,
				"deco": "FNflZPv",
				"char": 14,
				"parameters": [
					{
						"deco": "l",
						"name": "stdTime"
					}
				],
				"name": "stdTimeToFILETIME",
				"comment": "        $(BLUE This function is Windows-Only.)\n\n        Converts a number of hnsecs since midnight, January 1st, 1 A.D. to a\n        $(D FILETIME) struct.\n\n        Params:\n            stdTime = The number of hnsecs since midnight, January 1st, 1 A.D. UTC.\n\n        Throws:\n            $(LREF DateTimeException) if the given value will not fit in a\n            $(D FILETIME).\n",
				"originalType": "@safe FILETIME(long stdTime)"
			},
			{
				"kind": "function",
				"line": 30519,
				"deco": "FNfS3std8datetime7SysTimeZPv",
				"char": 14,
				"parameters": [
					{
						"deco": "S3std8datetime7SysTime",
						"name": "sysTime"
					}
				],
				"name": "SysTimeToFILETIME",
				"comment": "        $(BLUE This function is Windows-Only.)\n\n        Converts a $(LREF SysTime) to a $(D FILETIME) struct.\n\n        $(D FILETIME)s are always in UTC.\n\n        Params:\n            sysTime = The $(LREF SysTime) to convert.\n\n        Throws:\n            $(LREF DateTimeException) if the given $(LREF SysTime) will not fit in a\n            $(D FILETIME).\n",
				"originalType": "@safe FILETIME(SysTime sysTime)"
			},
			{
				"kind": "alias",
				"line": 30699,
				"deco": "k",
				"char": 12,
				"name": "DosFileTime",
				"comment": "    Type representing the DOS file date/time format.\n"
			},
			{
				"kind": "function",
				"line": 30711,
				"deco": "FNfkyC3std8datetime8TimeZoneZS3std8datetime7SysTime",
				"endchar": 1,
				"char": 9,
				"parameters": [
					{
						"deco": "k",
						"name": "dft"
					},
					{
						"deco": "yC3std8datetime8TimeZone",
						"default": "opCall()",
						"name": "tz"
					}
				],
				"name": "DosFileTimeToSysTime",
				"comment": "    Converts from DOS file date/time to $(LREF SysTime).\n\n    Params:\n        dft = The DOS file time to convert.\n        tz  = The time zone which the DOS file time is assumed to be in.\n\n    Throws:\n        $(LREF DateTimeException) if the $(D DosFileTime) is invalid.\n",
				"originalType": "@safe SysTime(DosFileTime dft, immutable TimeZone tz = LocalTime())",
				"endline": 30729
			},
			{
				"kind": "function",
				"line": 30754,
				"deco": "FNfS3std8datetime7SysTimeZk",
				"endchar": 1,
				"char": 13,
				"parameters": [
					{
						"deco": "S3std8datetime7SysTime",
						"name": "sysTime"
					}
				],
				"name": "SysTimeToDosFileTime",
				"comment": "    Converts from $(LREF SysTime) to DOS file date/time.\n\n    Params:\n        sysTime = The $(LREF SysTime) to convert.\n\n    Throws:\n        $(LREF DateTimeException) if the given $(LREF SysTime) cannot be converted to\n        a $(D DosFileTime).\n",
				"originalType": "@safe DosFileTime(SysTime sysTime)",
				"endline": 30773
			},
			{
				"kind": "template",
				"line": 30822,
				"members": [
					{
						"kind": "function",
						"line": 30822,
						"endchar": 1,
						"char": 9,
						"type": "@safe SysTime(in char[] value)",
						"parameters": [
							{
								"storageClass": [
									"in"
								],
								"type": "char[]",
								"name": "value"
							}
						],
						"name": "parseRFC822DateTime",
						"endline": 30826
					}
				],
				"char": 9,
				"parameters": [],
				"comment": "    The given array of $(D char) or random-access range of $(D char) or\n    $(D ubyte) is expected to be in the format specified in\n    $(WEB tools.ietf.org/html/rfc5322, RFC 5322) section 3.3 with the\n    grammar rule $(I date-time). It is the date-time format commonly used in\n    internet messages such as e-mail and HTTP. The corresponding\n    $(LREF SysTime) will be returned.\n\n    RFC 822 was the original spec (hence the function's name), whereas RFC 5322\n    is the current spec.\n\n    The day of the week is ignored beyond verifying that it's a valid day of the\n    week, as the day of the week can be inferred from the date. It is not\n    checked whether the given day of the week matches the actual day of the week\n    of the given date (though it is technically invalid per the spec if the\n    day of the week doesn't match the actual day of the week of the given date).\n\n    If the time zone is $(D \"-0000\") (or considered to be equivalent to\n    $(D \"-0000\") by section 4.3 of the spec), a $(LREF SimpleTimeZone) with a\n    utc offset of $(D 0) is used rather than $(LREF UTC), whereas $(D \"+0000\")\n    uses $(LREF UTC).\n\n    Note that because $(LREF SysTime) does not currently support having a second\n    value of 60 (as is sometimes done for leap seconds), if the date-time value\n    does have a value of 60 for the seconds, it is treated as 59.\n\n    The one area in which this function violates RFC 5322 is that it accepts\n    $(D \"\\n\") in folding whitespace in the place of $(D \"\\r\\n\"), because the\n    HTTP spec requires it.\n\n    Throws:\n        $(LREF DateTimeException) if the given string doesn't follow the grammar\n        for a date-time field or if the resulting $(LREF SysTime) is invalid.\nExample:\n\n---\nauto tz = new immutable SimpleTimeZone(hours(-8));\nassert(parseRFC822DateTime(\"Sat, 6 Jan 1990 12:14:19 -0800\") ==\n       SysTime(DateTime(1990, 1, 6, 12, 14, 19), tz));\n\nassert(parseRFC822DateTime(\"9 Jul 2002 13:11 +0000\") ==\n       SysTime(DateTime(2002, 7, 9, 13, 11, 0), UTC()));\n\nauto badStr = \"29 Feb 2001 12:17:16 +0200\";\nassertThrown!DateTimeException(parseRFC822DateTime(badStr));\n\n---\n",
				"name": "parseRFC822DateTime"
			},
			{
				"kind": "template",
				"line": 30829,
				"constraint": "isRandomAccessRange!R && hasSlicing!R && hasLength!R && (is(Unqual!(ElementType!R) == char) || is(Unqual!(ElementType!R) == ubyte))",
				"members": [
					{
						"kind": "function",
						"line": 30829,
						"endchar": 1,
						"char": 9,
						"type": "@safe SysTime(R value)",
						"parameters": [
							{
								"type": "R",
								"name": "value"
							}
						],
						"name": "parseRFC822DateTime",
						"endline": 31029
					}
				],
				"char": 9,
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"comment": " Ditto\n",
				"name": "parseRFC822DateTime"
			},
			{
				"kind": "function",
				"line": 31554,
				"deco": "FNaNbNfAAyaXb",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "AAya",
						"name": "units"
					}
				],
				"name": "validTimeUnits",
				"comment": "    Whether all of the given strings are valid units of time.\n\n    $(D \"nsecs\") is not considered a valid unit of time. Nothing in std.datetime\n    can handle precision greater than hnsecs, and the few functions in core.time\n    which deal with \"nsecs\" deal with it explicitly.\n",
				"endline": 31564
			},
			{
				"kind": "function",
				"line": 31582,
				"deco": "FNaNfAyaAyaZi",
				"endchar": 1,
				"char": 5,
				"parameters": [
					{
						"deco": "Aya",
						"name": "lhs"
					},
					{
						"deco": "Aya",
						"name": "rhs"
					}
				],
				"name": "cmpTimeUnits",
				"comment": "    Compares two time unit strings. $(D \"years\") are the largest units and\n    $(D \"hnsecs\") are the smallest.\n\n    Returns:\n        $(BOOKTABLE,\n        $(TR $(TD this &lt; rhs) $(TD &lt; 0))\n        $(TR $(TD this == rhs) $(TD 0))\n        $(TR $(TD this &gt; rhs) $(TD &gt; 0))\n        )\n\n    Throws:\n        $(LREF DateTimeException) if either of the given strings is not a valid\n        time unit string.\n",
				"endline": 31600
			},
			{
				"kind": "template",
				"line": 31637,
				"constraint": "validTimeUnits(lhs, rhs)",
				"members": [
					{
						"kind": "variable",
						"line": 31640,
						"init": "cmpTimeUnitsCTFE(lhs, rhs)",
						"storageClass": [
							"enum"
						],
						"char": 10,
						"name": "CmpTimeUnits"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "value",
						"deco": "Aya",
						"name": "lhs"
					},
					{
						"kind": "value",
						"deco": "Aya",
						"name": "rhs"
					}
				],
				"comment": "    Compares two time unit strings at compile time. $(D \"years\") are the largest\n    units and $(D \"hnsecs\") are the smallest.\n\n    This template is used instead of $(D cmpTimeUnits) because exceptions\n    can't be thrown at compile time and $(D cmpTimeUnits) must enforce that\n    the strings it's given are valid time unit strings. This template uses a\n    template constraint instead.\n\n    Returns:\n        $(BOOKTABLE,\n        $(TR $(TD this &lt; rhs) $(TD &lt; 0))\n        $(TR $(TD this == rhs) $(TD 0))\n        $(TR $(TD this &gt; rhs) $(TD &gt; 0))\n        )\n",
				"name": "CmpTimeUnits"
			},
			{
				"kind": "template",
				"line": 31699,
				"constraint": "units == \"months\" || units == \"hours\" || units == \"minutes\" || units == \"seconds\"",
				"members": [
					{
						"kind": "function",
						"line": 31699,
						"endchar": 1,
						"char": 6,
						"type": "pure nothrow @safe bool(int value)",
						"parameters": [
							{
								"deco": "i",
								"name": "value"
							}
						],
						"name": "valid",
						"endline": 31713
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "value",
						"deco": "Aya",
						"name": "units"
					}
				],
				"comment": "    Returns whether the given value is valid for the given unit type when in a\n    time point. Naturally, a duration is not held to a particular range, but\n    the values in a time point are (e.g. a month must be in the range of\n    1 - 12 inclusive).\n\n    Params:\n        units = The units of time to validate.\n        value = The number to validate.\nExample:\n\n---\nassert(valid!\"hours\"(12));\nassert(!valid!\"hours\"(32));\nassert(valid!\"months\"(12));\nassert(!valid!\"months\"(13));\n\n---\n",
				"name": "valid"
			},
			{
				"kind": "template",
				"line": 31734,
				"constraint": "units == \"days\"",
				"members": [
					{
						"kind": "function",
						"line": 31734,
						"endchar": 1,
						"char": 6,
						"type": "pure nothrow @safe bool(int year, int month, int day)",
						"parameters": [
							{
								"deco": "i",
								"name": "year"
							},
							{
								"deco": "i",
								"name": "month"
							},
							{
								"deco": "i",
								"name": "day"
							}
						],
						"name": "valid",
						"endline": 31738
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "value",
						"deco": "Aya",
						"name": "units"
					}
				],
				"comment": "    Returns whether the given day is valid for the given year and month.\n\n    Params:\n        units = The units of time to validate.\n        year  = The year of the day to validate.\n        month = The month of the day to validate.\n        day   = The day to validate.\n",
				"name": "valid"
			},
			{
				"kind": "template",
				"line": 31752,
				"constraint": "units == \"months\" || units == \"hours\" || units == \"minutes\" || units == \"seconds\"",
				"members": [
					{
						"kind": "function",
						"line": 31752,
						"endchar": 1,
						"char": 6,
						"type": "pure @safe void(int value, string file = __FILE__, size_t line = __LINE__)",
						"parameters": [
							{
								"deco": "i",
								"name": "value"
							},
							{
								"default": "__FILE__",
								"type": "string",
								"name": "file"
							},
							{
								"default": "__LINE__",
								"type": "size_t",
								"name": "line"
							}
						],
						"name": "enforceValid",
						"endline": 31780
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "value",
						"deco": "Aya",
						"name": "units"
					}
				],
				"comment": "    Params:\n        units = The units of time to validate.\n        value = The number to validate.\n        file  = The file that the $(LREF DateTimeException) will list if thrown.\n        line  = The line number that the $(LREF DateTimeException) will list if\n                thrown.\n\n    Throws:\n        $(LREF DateTimeException) if $(D valid!units(value)) is false.\n",
				"name": "enforceValid"
			},
			{
				"kind": "template",
				"line": 31796,
				"constraint": "units == \"days\"",
				"members": [
					{
						"kind": "function",
						"line": 31796,
						"endchar": 1,
						"char": 6,
						"type": "pure @safe void(int year, Month month, int day, string file = __FILE__, size_t line = __LINE__)",
						"parameters": [
							{
								"deco": "i",
								"name": "year"
							},
							{
								"type": "Month",
								"name": "month"
							},
							{
								"deco": "i",
								"name": "day"
							},
							{
								"default": "__FILE__",
								"type": "string",
								"name": "file"
							},
							{
								"default": "__LINE__",
								"type": "size_t",
								"name": "line"
							}
						],
						"name": "enforceValid",
						"endline": 31803
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "value",
						"deco": "Aya",
						"name": "units"
					}
				],
				"comment": "    Params:\n        units = The units of time to validate.\n        year  = The year of the day to validate.\n        month = The month of the day to validate.\n        day   = The day to validate.\n        file  = The file that the $(LREF DateTimeException) will list if thrown.\n        line  = The line number that the $(LREF DateTimeException) will list if\n                thrown.\n\n    Throws:\n        $(LREF DateTimeException) if $(D valid!\"days\"(year, month, day)) is false.\n",
				"name": "enforceValid"
			},
			{
				"kind": "function",
				"line": 31814,
				"storageClass": [
					"static"
				],
				"deco": "FNaNfiiZi",
				"endchar": 1,
				"char": 12,
				"parameters": [
					{
						"deco": "i",
						"name": "currMonth"
					},
					{
						"deco": "i",
						"name": "month"
					}
				],
				"name": "monthsToMonth",
				"comment": "    Returns the number of months from the current months of the year to the\n    given month of the year. If they are the same, then the result is 0.\n\n    Params:\n        currMonth = The current month of the year.\n        month     = The month of the year to get the number of months to.\n",
				"endline": 31826
			},
			{
				"kind": "function",
				"line": 31892,
				"storageClass": [
					"static"
				],
				"deco": "FNaNbNfE3std8datetime9DayOfWeekE3std8datetime9DayOfWeekZi",
				"endchar": 1,
				"char": 12,
				"parameters": [
					{
						"deco": "E3std8datetime9DayOfWeek",
						"name": "currDoW"
					},
					{
						"deco": "E3std8datetime9DayOfWeek",
						"name": "dow"
					}
				],
				"name": "daysToDayOfWeek",
				"comment": "    Returns the number of days from the current day of the week to the given\n    day of the week. If they are the same, then the result is 0.\n\n    Params:\n        currDoW = The current day of the week.\n        dow     = The day of the week to get the number of days to.\n",
				"endline": 31901
			},
			{
				"kind": "template",
				"line": 31999,
				"members": [
					{
						"kind": "function",
						"line": 31999,
						"storageClass": [
							"auto"
						],
						"char": 10,
						"type": "()",
						"name": "measureTime"
					}
				],
				"char": 10,
				"parameters": [
					{
						"kind": "alias",
						"name": "func"
					}
				],
				"comment": "        Function for starting to a stop watch time when the function is called\n        and stopping it when its return value goes out of scope and is destroyed.\n\n        When the value that is returned by this function is destroyed,\n        $(D func) will run. $(D func) is a unary function that takes a\n        $(CXREF time, TickDuration).\n\n        Examples:\n--------------------\n{\n    auto mt = measureTime!((TickDuration a)\n        { /+ do something when the scope is exited +/ });\n    // do something that needs to be timed\n}\n--------------------\n\n        which is functionally equivalent to\n\n--------------------\n{\n    auto sw = StopWatch(AutoStart.yes);\n    scope(exit)\n    {\n        TickDuration a = sw.peek();\n        /+ do something when the scope is exited +/\n    }\n    // do something that needs to be timed\n}\n--------------------\n\n        See_Also:\n            $(LREF benchmark)\n",
				"name": "measureTime"
			}
		],
		"name": "std.datetime",
		"comment": "    Module containing Date/Time functionality.\n\n    This module provides:\n    $(UL\n        $(LI Types to represent points in time: $(LREF SysTime), $(LREF Date),\n             $(LREF TimeOfDay), and $(LREF2 .DateTime, DateTime).)\n        $(LI Types to represent intervals of time.)\n        $(LI Types to represent ranges over intervals of time.)\n        $(LI Types to represent time zones (used by $(LREF SysTime)).)\n        $(LI A platform-independent, high precision stopwatch type:\n             $(LREF StopWatch))\n        $(LI Benchmarking functions.)\n        $(LI Various helper functions.)\n    )\n\n    Closely related to std.datetime is <a href=\"core_time.html\">$(D core.time)</a>,\n    and some of the time types used in std.datetime come from there - such as\n    $(CXREF time, Duration), $(CXREF time, TickDuration), and\n    $(CXREF time, FracSec).\n    core.time is publically imported into std.datetime, it isn't necessary\n    to import it separately.\n\n    Three of the main concepts used in this module are time points, time\n    durations, and time intervals.\n\n    A time point is a specific point in time. e.g. January 5th, 2010\n    or 5:00.\n\n    A time duration is a length of time with units. e.g. 5 days or 231 seconds.\n\n    A time interval indicates a period of time associated with a fixed point in\n    time. It is either two time points associated with each other,\n    indicating the time starting at the first point up to, but not including,\n    the second point - e.g. [January 5th, 2010 - March 10th, 2010$(RPAREN) - or\n    it is a time point and a time duration associated with one another. e.g.\n    January 5th, 2010 and 5 days, indicating [January 5th, 2010 -\n    January 10th, 2010$(RPAREN).\n\n    Various arithmetic operations are supported between time points and\n    durations (e.g. the difference between two time points is a time duration),\n    and ranges can be gotten from time intervals, so range-based operations may\n    be done on a series of time points.\n\n    The types that the typical user is most likely to be interested in are\n    $(LREF Date) (if they want dates but don't care about time), $(LREF DateTime)\n    (if they want dates and times but don't care about time zones), $(LREF SysTime)\n    (if they want the date and time from the OS and/or do care about time\n    zones), and StopWatch (a platform-independent, high precision stop watch).\n    $(LREF Date) and $(LREF DateTime) are optimized for calendar-based operations,\n    while $(LREF SysTime) is designed for dealing with time from the OS. Check out\n    their specific documentation for more details.\n\n    To get the current time, use $(LREF2 .Clock.currTime, Clock.currTime).\n    It will return the current\n    time as a $(LREF SysTime). To print it, $(D toString) is\n    sufficient, but if using $(D toISOString), $(D toISOExtString), or\n    $(D toSimpleString), use the corresponding $(D fromISOString),\n    $(D fromISOExtString), or $(D fromSimpleString) to create a\n    $(LREF SysTime) from the string.\n\n--------------------\nauto currentTime = Clock.currTime();\nauto timeString = currentTime.toISOExtString();\nauto restoredTime = SysTime.fromISOExtString(timeString);\n--------------------\n\n    Various functions take a string (or strings) to represent a unit of time\n    (e.g. $(D convert!(\"days\", \"hours\")(numDays))). The valid strings to use\n    with such functions are $(D \"years\"), $(D \"months\"), $(D \"weeks\"),\n    $(D \"days\"), $(D \"hours\"), $(D \"minutes\"), $(D \"seconds\"),\n    $(D \"msecs\") (milliseconds), $(D \"usecs\") (microseconds),\n    $(D \"hnsecs\") (hecto-nanoseconds - i.e. 100 ns), or some subset thereof.\n    There are a few functions in core.time which take $(D \"nsecs\"), but because\n    nothing in std.datetime has precision greater than hnsecs, and very little\n    in core.time does, no functions in std.datetime accept $(D \"nsecs\").\n    To remember which units are abbreviated and which aren't,\n    all units seconds and greater use their full names, and all\n    sub-second units are abbreviated (since they'd be rather long if they\n    weren't).\n\n    Note:\n        $(LREF DateTimeException) is an alias for $(CXREF time, TimeException),\n        so you don't need to worry about core.time functions and std.datetime\n        functions throwing different exception types (except in the rare case\n        that they throw something other than $(CXREF time, TimeException) or\n        $(LREF DateTimeException)).\n\n    See_Also:\n        <a href=\"../intro-to-datetime.html\">Introduction to std&#46;_datetime </a><br>\n        $(WEB en.wikipedia.org/wiki/ISO_8601, ISO 8601)<br>\n        $(WEB en.wikipedia.org/wiki/Tz_database,\n              Wikipedia entry on TZ Database)<br>\n        $(WEB en.wikipedia.org/wiki/List_of_tz_database_time_zones,\n              List of Time Zones)<br>\n\n    Copyright: Copyright 2010 - 2011\n    License:   $(WEB www.boost.org/LICENSE_1_0.txt, Boost License 1.0).\n    Authors:   Jonathan M Davis and Kato Shoichi\n    Source:    $(PHOBOSSRC std/_datetime.d)\n    Macros:\n        LREF2=<a href=\"#$1\">$(D $2)</a>\n"
	},
	{
		"kind": "module",
		"file": "../phobos/std/xml.d",
		"members": [
			{
				"kind": "function",
				"line": 147,
				"deco": "FwZb",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "w",
						"name": "c"
					}
				],
				"name": "isChar",
				"comment": " Returns true if the character is a character according to the XML standard\n\n Standards: $(LINK2 http://www.w3.org/TR/1998/REC-xml-19980210, XML 1.0)\n\n Params:\n    c = the character to be tested\n",
				"endline": 169
			},
			{
				"kind": "function",
				"line": 214,
				"deco": "FwZb",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "w",
						"name": "c"
					}
				],
				"name": "isSpace",
				"comment": " Returns true if the character is whitespace according to the XML standard\n\n Only the following characters are considered whitespace in XML - space, tab,\n carriage return and linefeed\n\n Standards: $(LINK2 http://www.w3.org/TR/1998/REC-xml-19980210, XML 1.0)\n\n Params:\n    c = the character to be tested\n",
				"endline": 217
			},
			{
				"kind": "function",
				"line": 227,
				"deco": "FwZb",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "w",
						"name": "c"
					}
				],
				"name": "isDigit",
				"comment": " Returns true if the character is a digit according to the XML standard\n\n Standards: $(LINK2 http://www.w3.org/TR/1998/REC-xml-19980210, XML 1.0)\n\n Params:\n    c = the character to be tested\n",
				"endline": 233
			},
			{
				"kind": "function",
				"line": 252,
				"deco": "FwZb",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "w",
						"name": "c"
					}
				],
				"name": "isLetter",
				"comment": " Returns true if the character is a letter according to the XML standard\n\n Standards: $(LINK2 http://www.w3.org/TR/1998/REC-xml-19980210, XML 1.0)\n\n Params:\n    c = the character to be tested\n",
				"endline": 255
			},
			{
				"kind": "function",
				"line": 266,
				"deco": "FwZb",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "w",
						"name": "c"
					}
				],
				"name": "isIdeographic",
				"comment": " Returns true if the character is an ideographic character according to the\n XML standard\n\n Standards: $(LINK2 http://www.w3.org/TR/1998/REC-xml-19980210, XML 1.0)\n\n Params:\n    c = the character to be tested\n",
				"endline": 275
			},
			{
				"kind": "function",
				"line": 301,
				"deco": "FwZb",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "w",
						"name": "c"
					}
				],
				"name": "isBaseChar",
				"comment": " Returns true if the character is a base character according to the XML\n standard\n\n Standards: $(LINK2 http://www.w3.org/TR/1998/REC-xml-19980210, XML 1.0)\n\n Params:\n    c = the character to be tested\n",
				"endline": 304
			},
			{
				"kind": "function",
				"line": 315,
				"deco": "FwZb",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "w",
						"name": "c"
					}
				],
				"name": "isCombiningChar",
				"comment": " Returns true if the character is a combining character according to the\n XML standard\n\n Standards: $(LINK2 http://www.w3.org/TR/1998/REC-xml-19980210, XML 1.0)\n\n Params:\n    c = the character to be tested\n",
				"endline": 318
			},
			{
				"kind": "function",
				"line": 328,
				"deco": "FwZb",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "w",
						"name": "c"
					}
				],
				"name": "isExtender",
				"comment": " Returns true if the character is an extender according to the XML standard\n\n Standards: $(LINK2 http://www.w3.org/TR/1998/REC-xml-19980210, XML 1.0)\n\n Params:\n    c = the character to be tested\n",
				"endline": 331
			},
			{
				"kind": "template",
				"line": 357,
				"members": [
					{
						"kind": "function",
						"line": 357,
						"endchar": 1,
						"char": 3,
						"type": "S(S s)",
						"parameters": [
							{
								"type": "S",
								"name": "s"
							}
						],
						"name": "encode",
						"endline": 383
					}
				],
				"char": 3,
				"parameters": [
					{
						"kind": "type",
						"name": "S"
					}
				],
				"comment": " Encodes a string by replacing all characters which need to be escaped with\n appropriate predefined XML entities.\n\n encode() escapes certain characters (ampersand, quote, apostrophe, less-than\n and greater-than), and similarly, decode() unescapes them. These functions\n are provided for convenience only. You do not need to use them when using\n the std.xml classes, because then all the encoding and decoding will be done\n for you automatically.\n\n If the string is not modified, the original will be returned.\n\n Standards: $(LINK2 http://www.w3.org/TR/1998/REC-xml-19980210, XML 1.0)\n\n Params:\n      s = The string to be encoded\n\n Returns: The encoded string\n\n Examples:\n --------------\n writefln(encode(\"a > b\")); // writes \"a &gt; b\"\n --------------\n",
				"name": "encode"
			},
			{
				"kind": "enum",
				"line": 403,
				"members": [],
				"char": 1,
				"baseDeco": "i",
				"name": "DecodeMode",
				"comment": " Mode to use for decoding.\n\n $(DDOC_ENUM_MEMBERS NONE) Do not decode\n $(DDOC_ENUM_MEMBERS LOOSE) Decode, but ignore errors\n $(DDOC_ENUM_MEMBERS STRICT) Decode, and throw exception on error\n"
			},
			{
				"kind": "function",
				"line": 442,
				"deco": "FAyaE3std3xml10DecodeModeZAya",
				"endchar": 1,
				"char": 8,
				"parameters": [
					{
						"deco": "Aya",
						"name": "s"
					},
					{
						"deco": "E3std3xml10DecodeMode",
						"default": "cast(DecodeMode)1",
						"name": "mode"
					}
				],
				"name": "decode",
				"comment": " Decodes a string by unescaping all predefined XML entities.\n\n encode() escapes certain characters (ampersand, quote, apostrophe, less-than\n and greater-than), and similarly, decode() unescapes them. These functions\n are provided for convenience only. You do not need to use them when using\n the std.xml classes, because then all the encoding and decoding will be done\n for you automatically.\n\n This function decodes the entities &amp;amp;, &amp;quot;, &amp;apos;,\n &amp;lt; and &amp;gt,\n as well as decimal and hexadecimal entities such as &amp;#x20AC;\n\n If the string does not contain an ampersand, the original will be returned.\n\n Note that the \"mode\" parameter can be one of DecodeMode.NONE (do not\n decode), DecodeMode.LOOSE (decode, but ignore errors), or DecodeMode.STRICT\n (decode, and throw a DecodeException in the event of an error).\n\n Standards: $(LINK2 http://www.w3.org/TR/1998/REC-xml-19980210, XML 1.0)\n\n Params:\n      s = The string to be decoded\n      mode = (optional) Mode to use for decoding. (Defaults to LOOSE).\n\n Throws: DecodeException if mode == DecodeMode.STRICT and decode fails\n\n Returns: The decoded string\n\n Examples:\n --------------\n writefln(decode(\"a &gt; b\")); // writes \"a > b\"\n --------------\n",
				"originalType": "string(string s, DecodeMode mode = DecodeMode.LOOSE)",
				"endline": 494
			},
			{
				"kind": "class",
				"line": 538,
				"base": "std.xml.Element",
				"members": [
					{
						"kind": "variable",
						"line": 544,
						"init": "\"<?xml version=\\\"1.0\\\"?>\"",
						"deco": "Aya",
						"char": 12,
						"name": "prolog",
						"comment": " Contains all text which occurs before the root element.\n Defaults to &lt;?xml version=\"1.0\"?&gt;\n",
						"offset": 120
					},
					{
						"kind": "variable",
						"line": 549,
						"deco": "Aya",
						"char": 12,
						"name": "epilog",
						"comment": " Contains all text which occurs after the root element.\n Defaults to the empty string\n",
						"offset": 136
					},
					{
						"kind": "constructor",
						"line": 562,
						"deco": "FAyaZC3std3xml8Document",
						"endchar": 5,
						"char": 5,
						"parameters": [
							{
								"deco": "Aya",
								"name": "s"
							}
						],
						"name": "this",
						"comment": " Constructs a Document by parsing XML text.\n\n This function creates a complete DOM (Document Object Model) tree.\n\n The input to this function MUST be valid XML.\n This is enforced by DocumentParser's in contract.\n\n Params:\n      s = the complete XML text.\n",
						"originalType": "(string s)",
						"endline": 576
					},
					{
						"kind": "constructor",
						"line": 584,
						"deco": "FxC3std3xml3TagZC3std3xml8Document",
						"endchar": 5,
						"char": 5,
						"parameters": [
							{
								"deco": "xC3std3xml3Tag",
								"name": "tag"
							}
						],
						"name": "this",
						"comment": " Constructs a Document from a Tag.\n\n Params:\n      tag = the start tag of the document.\n",
						"originalType": "(const(Tag) tag)",
						"endline": 587
					},
					{
						"kind": "function",
						"line": 600,
						"storageClass": [
							"override"
						],
						"deco": "xFC6ObjectZb",
						"endchar": 9,
						"char": 23,
						"parameters": [
							{
								"deco": "C6Object",
								"name": "o"
							}
						],
						"name": "opEquals",
						"comment": " Compares two Documents for equality\n\n Examples:\n --------------\n Document d1,d2;\n if (d1 == d2) { }\n --------------\n",
						"endline": 608,
						"overrides": [
							"std.xml.Element.opEquals"
						]
					},
					{
						"kind": "function",
						"line": 622,
						"storageClass": [
							"override"
						],
						"deco": "xFC6ObjectZi",
						"endchar": 9,
						"char": 22,
						"parameters": [
							{
								"deco": "C6Object",
								"name": "o"
							}
						],
						"name": "opCmp",
						"comment": " Compares two Documents\n\n You should rarely need to call this function. It exists so that\n Documents can be used as associative array keys.\n\n Examples:\n --------------\n Document d1,d2;\n if (d1 < d2) { }\n --------------\n",
						"endline": 633,
						"overrides": [
							"std.xml.Element.opCmp"
						]
					},
					{
						"kind": "function",
						"line": 641,
						"storageClass": [
							"override"
						],
						"deco": "xFNbNeZm",
						"endchar": 9,
						"char": 25,
						"name": "toHash",
						"comment": " Returns the hash of a Document\n\n You should rarely need to call this function. It exists so that\n Documents can be used as associative array keys.\n",
						"originalType": "const @trusted size_t()",
						"endline": 644,
						"overrides": [
							"std.xml.Element.toHash"
						]
					},
					{
						"kind": "function",
						"line": 650,
						"storageClass": [
							"override"
						],
						"deco": "xFZAya",
						"endchar": 9,
						"char": 25,
						"name": "toString",
						"comment": " Returns the string representation of a Document. (That is, the\n complete XML of a document).\n",
						"endline": 653,
						"overrides": [
							"std.xml.Element.toString"
						]
					}
				],
				"char": 1,
				"name": "Document",
				"comment": " Class representing an XML document.\n\n Standards: $(LINK2 http://www.w3.org/TR/1998/REC-xml-19980210, XML 1.0)\n\n"
			},
			{
				"kind": "class",
				"line": 662,
				"base": "std.xml.Item",
				"members": [
					{
						"kind": "variable",
						"line": 664,
						"deco": "C3std3xml3Tag",
						"char": 9,
						"name": "tag",
						"comment": "The start tag of the element\n",
						"originalType": "Tag",
						"offset": 16
					},
					{
						"kind": "variable",
						"line": 665,
						"deco": "AC3std3xml4Item",
						"char": 12,
						"name": "items",
						"comment": "The element's items\n",
						"offset": 24
					},
					{
						"kind": "variable",
						"line": 666,
						"deco": "AC3std3xml4Text",
						"char": 12,
						"name": "texts",
						"comment": "The element's text items\n",
						"offset": 40
					},
					{
						"kind": "variable",
						"line": 667,
						"deco": "AC3std3xml5CData",
						"char": 13,
						"name": "cdatas",
						"comment": "The element's CData items\n",
						"offset": 56
					},
					{
						"kind": "variable",
						"line": 668,
						"deco": "AC3std3xml7Comment",
						"char": 15,
						"name": "comments",
						"comment": "The element's comments\n",
						"offset": 72
					},
					{
						"kind": "variable",
						"line": 669,
						"deco": "AC3std3xml21ProcessingInstruction",
						"char": 29,
						"name": "pis",
						"comment": "The element's processing instructions\n",
						"offset": 88
					},
					{
						"kind": "variable",
						"line": 670,
						"deco": "AC3std3xml7Element",
						"char": 15,
						"name": "elements",
						"comment": "The element's child elements\n",
						"offset": 104
					},
					{
						"kind": "constructor",
						"line": 686,
						"deco": "FAyaAyaZC3std3xml7Element",
						"endchar": 5,
						"char": 5,
						"parameters": [
							{
								"deco": "Aya",
								"name": "name"
							},
							{
								"deco": "Aya",
								"default": "null",
								"name": "interior"
							}
						],
						"name": "this",
						"comment": " Constructs an Element given a name and a string to be used as a Text\n interior.\n\n Params:\n      name = the name of the element.\n      interior = (optional) the string interior.\n\n Examples:\n -------------------------------------------------------\n auto element = new Element(\"title\",\"Serenity\")\n     // constructs the element <title>Serenity</title>\n -------------------------------------------------------\n",
						"originalType": "(string name, string interior = null)",
						"endline": 690
					},
					{
						"kind": "constructor",
						"line": 698,
						"deco": "FxC3std3xml3TagZC3std3xml7Element",
						"endchar": 5,
						"char": 5,
						"parameters": [
							{
								"deco": "xC3std3xml3Tag",
								"name": "tag_"
							}
						],
						"name": "this",
						"comment": " Constructs an Element from a Tag.\n\n Params:\n      tag_ = the start or empty tag of the element.\n",
						"originalType": "(const(Tag) tag_)",
						"endline": 704
					},
					{
						"kind": "function",
						"line": 718,
						"deco": "FC3std3xml4TextZv",
						"endchar": 5,
						"char": 10,
						"parameters": [
							{
								"deco": "C3std3xml4Text",
								"name": "item"
							}
						],
						"name": "opCatAssign",
						"comment": " Append a text item to the interior of this element\n\n Params:\n      item = the item you wish to append.\n\n Examples:\n --------------\n Element element;\n element ~= new Text(\"hello\");\n --------------\n",
						"endline": 722
					},
					{
						"kind": "function",
						"line": 736,
						"deco": "FC3std3xml5CDataZv",
						"endchar": 5,
						"char": 10,
						"parameters": [
							{
								"deco": "C3std3xml5CData",
								"name": "item"
							}
						],
						"name": "opCatAssign",
						"comment": " Append a CData item to the interior of this element\n\n Params:\n      item = the item you wish to append.\n\n Examples:\n --------------\n Element element;\n element ~= new CData(\"hello\");\n --------------\n",
						"endline": 740
					},
					{
						"kind": "function",
						"line": 754,
						"deco": "FC3std3xml7CommentZv",
						"endchar": 5,
						"char": 10,
						"parameters": [
							{
								"deco": "C3std3xml7Comment",
								"name": "item"
							}
						],
						"name": "opCatAssign",
						"comment": " Append a comment to the interior of this element\n\n Params:\n      item = the item you wish to append.\n\n Examples:\n --------------\n Element element;\n element ~= new Comment(\"hello\");\n --------------\n",
						"endline": 758
					},
					{
						"kind": "function",
						"line": 772,
						"deco": "FC3std3xml21ProcessingInstructionZv",
						"endchar": 5,
						"char": 10,
						"parameters": [
							{
								"deco": "C3std3xml21ProcessingInstruction",
								"name": "item"
							}
						],
						"name": "opCatAssign",
						"comment": " Append a processing instruction to the interior of this element\n\n Params:\n      item = the item you wish to append.\n\n Examples:\n --------------\n Element element;\n element ~= new ProcessingInstruction(\"hello\");\n --------------\n",
						"endline": 776
					},
					{
						"kind": "function",
						"line": 792,
						"deco": "FC3std3xml7ElementZv",
						"endchar": 5,
						"char": 10,
						"parameters": [
							{
								"deco": "C3std3xml7Element",
								"name": "item"
							}
						],
						"name": "opCatAssign",
						"comment": " Append a complete element to the interior of this element\n\n Params:\n      item = the item you wish to append.\n\n Examples:\n --------------\n Element element;\n Element other = new Element(\"br\");\n element ~= other;\n    // appends element representing <br />\n --------------\n",
						"endline": 796
					},
					{
						"kind": "function",
						"line": 831,
						"storageClass": [
							"override"
						],
						"deco": "FC6ObjectZb",
						"endchar": 5,
						"char": 19,
						"parameters": [
							{
								"deco": "C6Object",
								"name": "o"
							}
						],
						"name": "opEquals",
						"comment": " Compares two Elements for equality\n\n Examples:\n --------------\n Element e1,e2;\n if (e1 == e2) { }\n --------------\n",
						"endline": 841,
						"overrides": [
							"std.xml.Item.opEquals"
						]
					},
					{
						"kind": "function",
						"line": 855,
						"storageClass": [
							"override"
						],
						"deco": "FC6ObjectZi",
						"endchar": 5,
						"char": 18,
						"parameters": [
							{
								"deco": "C6Object",
								"name": "o"
							}
						],
						"name": "opCmp",
						"comment": " Compares two Elements\n\n You should rarely need to call this function. It exists so that Elements\n can be used as associative array keys.\n\n Examples:\n --------------\n Element e1,e2;\n if (e1 < e2) { }\n --------------\n",
						"endline": 866,
						"overrides": [
							"std.xml.Item.opCmp"
						]
					},
					{
						"kind": "function",
						"line": 874,
						"storageClass": [
							"override"
						],
						"deco": "xFNbNfZm",
						"endchar": 5,
						"char": 21,
						"name": "toHash",
						"comment": " Returns the hash of an Element\n\n You should rarely need to call this function. It exists so that Elements\n can be used as associative array keys.\n",
						"originalType": "const size_t()",
						"endline": 879,
						"overrides": [
							"std.xml.Item.toHash"
						]
					},
					{
						"kind": "function",
						"line": 895,
						"deco": "xFE3std3xml10DecodeModeZAya",
						"endchar": 9,
						"char": 16,
						"parameters": [
							{
								"deco": "E3std3xml10DecodeMode",
								"default": "cast(DecodeMode)1",
								"name": "mode"
							}
						],
						"name": "text",
						"comment": " Returns the decoded interior of an element.\n\n The element is assumed to contain text <i>only</i>. So, for\n example, given XML such as \"&lt;title&gt;Good &amp;amp;\n Bad&lt;/title&gt;\", will return \"Good &amp; Bad\".\n\n Params:\n      mode = (optional) Mode to use for decoding. (Defaults to LOOSE).\n\n Throws: DecodeException if decode fails\n",
						"originalType": "const string(DecodeMode mode = DecodeMode.LOOSE)",
						"endline": 905
					},
					{
						"kind": "function",
						"line": 914,
						"storageClass": [
							"override"
						],
						"deco": "xFkZAAya",
						"endchar": 9,
						"char": 27,
						"parameters": [
							{
								"deco": "k",
								"default": "2u",
								"name": "indent"
							}
						],
						"name": "pretty",
						"comment": " Returns an indented string representation of this item\n\n Params:\n      indent = (optional) number of spaces by which to indent this\n          element. Defaults to 2.\n",
						"originalType": "const string[](uint indent = 2)",
						"endline": 939,
						"overrides": [
							"std.xml.Item.pretty"
						]
					},
					{
						"kind": "function",
						"line": 950,
						"storageClass": [
							"override"
						],
						"deco": "xFZAya",
						"endchar": 9,
						"char": 25,
						"name": "toString",
						"comment": " Returns the string representation of an Element\n\n Examples:\n --------------\n auto element = new Element(\"br\");\n writefln(element.toString()); // writes \"<br />\"\n --------------\n",
						"endline": 958,
						"overrides": [
							"std.xml.Item.toString"
						]
					}
				],
				"char": 1,
				"name": "Element",
				"comment": " Class representing an XML element.\n\n Standards: $(LINK2 http://www.w3.org/TR/1998/REC-xml-19980210, XML 1.0)\n"
			},
			{
				"kind": "enum",
				"line": 972,
				"members": [],
				"char": 1,
				"baseDeco": "i",
				"name": "TagType",
				"comment": " Tag types.\n\n $(DDOC_ENUM_MEMBERS START) Used for start tags\n $(DDOC_ENUM_MEMBERS END) Used for end tags\n $(DDOC_ENUM_MEMBERS EMPTY) Used for empty tags\n\n"
			},
			{
				"kind": "class",
				"line": 986,
				"members": [
					{
						"kind": "variable",
						"line": 988,
						"init": "cast(TagType)0",
						"deco": "E3std3xml7TagType",
						"char": 13,
						"name": "type",
						"comment": "Type of tag\n",
						"offset": 16
					},
					{
						"kind": "variable",
						"line": 989,
						"deco": "Aya",
						"char": 12,
						"name": "name",
						"comment": "Tag name\n",
						"offset": 24
					},
					{
						"kind": "variable",
						"line": 990,
						"deco": "HAyaAya",
						"char": 20,
						"name": "attr",
						"comment": "Associative array of attributes\n",
						"offset": 40
					},
					{
						"kind": "constructor",
						"line": 1032,
						"deco": "FAyaE3std3xml7TagTypeZC3std3xml3Tag",
						"endchar": 5,
						"char": 5,
						"parameters": [
							{
								"deco": "Aya",
								"name": "name"
							},
							{
								"deco": "E3std3xml7TagType",
								"default": "cast(TagType)0",
								"name": "type"
							}
						],
						"name": "this",
						"comment": " Constructs an instance of Tag with a specified name and type\n\n The constructor does not initialize the attributes. To initialize the\n attributes, you access the $(B attr) member variable.\n\n Params:\n      name = the Tag's name\n      type = (optional) the Tag's type. If omitted, defaults to\n          TagType.START.\n\n Examples:\n --------------\n auto tag = new Tag(\"img\",Tag.EMPTY);\n tag.attr[\"src\"] = \"http://example.com/example.jpg\";\n --------------\n",
						"originalType": "(string name, TagType type = TagType.START)",
						"endline": 1036
					},
					{
						"kind": "function",
						"line": 1098,
						"storageClass": [
							"override"
						],
						"deco": "xFC6ObjectZb",
						"endchar": 9,
						"char": 23,
						"parameters": [
							{
								"deco": "C6Object",
								"name": "o"
							}
						],
						"name": "opEquals",
						"comment": " Compares two Tags for equality\n\n You should rarely need to call this function. It exists so that Tags\n can be used as associative array keys.\n\n Examples:\n --------------\n Tag tag1,tag2\n if (tag1 == tag2) { }\n --------------\n",
						"endline": 1106,
						"overrides": [
							"object.Object.opEquals"
						]
					},
					{
						"kind": "function",
						"line": 1117,
						"storageClass": [
							"override"
						],
						"deco": "xFC6ObjectZi",
						"endchar": 9,
						"char": 22,
						"parameters": [
							{
								"deco": "C6Object",
								"name": "o"
							}
						],
						"name": "opCmp",
						"comment": " Compares two Tags\n\n Examples:\n --------------\n Tag tag1,tag2\n if (tag1 < tag2) { }\n --------------\n",
						"endline": 1126,
						"overrides": [
							"object.Object.opCmp"
						]
					},
					{
						"kind": "function",
						"line": 1134,
						"storageClass": [
							"override"
						],
						"deco": "xFNbNfZm",
						"endchar": 9,
						"char": 25,
						"name": "toHash",
						"comment": " Returns the hash of a Tag\n\n You should rarely need to call this function. It exists so that Tags\n can be used as associative array keys.\n",
						"originalType": "const size_t()",
						"endline": 1137,
						"overrides": [
							"object.Object.toHash"
						]
					},
					{
						"kind": "function",
						"line": 1148,
						"storageClass": [
							"override"
						],
						"deco": "xFZAya",
						"endchar": 9,
						"char": 25,
						"name": "toString",
						"comment": " Returns the string representation of a Tag\n\n Examples:\n --------------\n auto tag = new Tag(\"book\",TagType.START);\n writefln(tag.toString()); // writes \"<book>\"\n --------------\n",
						"endline": 1152,
						"overrides": [
							"object.Object.toString"
						]
					},
					{
						"kind": "function",
						"line": 1179,
						"deco": "xFNdZb",
						"endchar": 66,
						"char": 24,
						"name": "isStart",
						"comment": " Returns true if the Tag is a start tag\n\n Examples:\n --------------\n if (tag.isStart) { }\n --------------\n",
						"endline": 1179
					},
					{
						"kind": "function",
						"line": 1189,
						"deco": "xFNdZb",
						"endchar": 66,
						"char": 24,
						"name": "isEnd",
						"comment": " Returns true if the Tag is an end tag\n\n Examples:\n --------------\n if (tag.isEnd) { }\n --------------\n",
						"endline": 1189
					},
					{
						"kind": "function",
						"line": 1199,
						"deco": "xFNdZb",
						"endchar": 66,
						"char": 24,
						"name": "isEmpty",
						"comment": " Returns true if the Tag is an empty tag\n\n Examples:\n --------------\n if (tag.isEmpty) { }\n --------------\n",
						"endline": 1199
					}
				],
				"char": 1,
				"name": "Tag",
				"comment": " Class representing an XML tag.\n\n Standards: $(LINK2 http://www.w3.org/TR/1998/REC-xml-19980210, XML 1.0)\n\n The class invariant guarantees\n <ul>\n <li> that $(B type) is a valid enum TagType value</li>\n <li> that $(B name) consists of valid characters</li>\n <li> that each attribute name consists of valid characters</li>\n </ul>\n"
			},
			{
				"kind": "class",
				"line": 1206,
				"base": "std.xml.Item",
				"members": [
					{
						"kind": "constructor",
						"line": 1225,
						"deco": "FAyaZC3std3xml7Comment",
						"endchar": 5,
						"char": 5,
						"parameters": [
							{
								"deco": "Aya",
								"name": "content"
							}
						],
						"name": "this",
						"comment": " Construct a comment\n\n Params:\n      content = the body of the comment\n\n Throws: CommentException if the comment body is illegal (contains \"--\"\n or exactly equals \"-\")\n\n Examples:\n --------------\n auto item = new Comment(\"This is a comment\");\n    // constructs <!--This is a comment-->\n --------------\n",
						"originalType": "(string content)",
						"endline": 1230
					},
					{
						"kind": "function",
						"line": 1241,
						"storageClass": [
							"override"
						],
						"deco": "FC6ObjectZb",
						"endchar": 5,
						"char": 19,
						"parameters": [
							{
								"deco": "C6Object",
								"name": "o"
							}
						],
						"name": "opEquals",
						"comment": " Compares two comments for equality\n\n Examples:\n --------------\n Comment item1,item2;\n if (item1 == item2) { }\n --------------\n",
						"endline": 1246,
						"overrides": [
							"std.xml.Item.opEquals"
						]
					},
					{
						"kind": "function",
						"line": 1260,
						"storageClass": [
							"override"
						],
						"deco": "FC6ObjectZi",
						"endchar": 5,
						"char": 18,
						"parameters": [
							{
								"deco": "C6Object",
								"name": "o"
							}
						],
						"name": "opCmp",
						"comment": " Compares two comments\n\n You should rarely need to call this function. It exists so that Comments\n can be used as associative array keys.\n\n Examples:\n --------------\n Comment item1,item2;\n if (item1 < item2) { }\n --------------\n",
						"endline": 1266,
						"overrides": [
							"std.xml.Item.opCmp"
						]
					},
					{
						"kind": "function",
						"line": 1274,
						"storageClass": [
							"override"
						],
						"deco": "xFNbNfZm",
						"endchar": 60,
						"char": 21,
						"name": "toHash",
						"comment": " Returns the hash of a Comment\n\n You should rarely need to call this function. It exists so that Comments\n can be used as associative array keys.\n",
						"originalType": "const size_t()",
						"endline": 1274,
						"overrides": [
							"std.xml.Item.toHash"
						]
					},
					{
						"kind": "function",
						"line": 1279,
						"storageClass": [
							"override"
						],
						"deco": "xFZAya",
						"endchar": 73,
						"char": 21,
						"name": "toString",
						"comment": " Returns a string representation of this comment\n",
						"endline": 1279,
						"overrides": [
							"std.xml.Item.toString"
						]
					},
					{
						"kind": "function",
						"line": 1281,
						"storageClass": [
							"override"
						],
						"deco": "xFNdZb",
						"endchar": 64,
						"char": 29,
						"name": "isEmptyXML",
						"comment": "Returns false always\n",
						"endline": 1281,
						"overrides": [
							"std.xml.Item.isEmptyXML"
						]
					}
				],
				"char": 1,
				"name": "Comment",
				"comment": " Class representing a comment\n"
			},
			{
				"kind": "class",
				"line": 1287,
				"base": "std.xml.Item",
				"members": [
					{
						"kind": "constructor",
						"line": 1305,
						"deco": "FAyaZC3std3xml5CData",
						"endchar": 5,
						"char": 5,
						"parameters": [
							{
								"deco": "Aya",
								"name": "content"
							}
						],
						"name": "this",
						"comment": " Construct a character data section\n\n Params:\n      content = the body of the character data segment\n\n Throws: CDataException if the segment body is illegal (contains \"]]>\")\n\n Examples:\n --------------\n auto item = new CData(\"<b>hello</b>\");\n    // constructs <![CDATA[<b>hello</b>]]>\n --------------\n",
						"originalType": "(string content)",
						"endline": 1309
					},
					{
						"kind": "function",
						"line": 1320,
						"storageClass": [
							"override"
						],
						"deco": "FC6ObjectZb",
						"endchar": 5,
						"char": 19,
						"parameters": [
							{
								"deco": "C6Object",
								"name": "o"
							}
						],
						"name": "opEquals",
						"comment": " Compares two CDatas for equality\n\n Examples:\n --------------\n CData item1,item2;\n if (item1 == item2) { }\n --------------\n",
						"endline": 1325,
						"overrides": [
							"std.xml.Item.opEquals"
						]
					},
					{
						"kind": "function",
						"line": 1339,
						"storageClass": [
							"override"
						],
						"deco": "FC6ObjectZi",
						"endchar": 5,
						"char": 18,
						"parameters": [
							{
								"deco": "C6Object",
								"name": "o"
							}
						],
						"name": "opCmp",
						"comment": " Compares two CDatas\n\n You should rarely need to call this function. It exists so that CDatas\n can be used as associative array keys.\n\n Examples:\n --------------\n CData item1,item2;\n if (item1 < item2) { }\n --------------\n",
						"endline": 1345,
						"overrides": [
							"std.xml.Item.opCmp"
						]
					},
					{
						"kind": "function",
						"line": 1353,
						"storageClass": [
							"override"
						],
						"deco": "xFNbNfZm",
						"endchar": 60,
						"char": 21,
						"name": "toHash",
						"comment": " Returns the hash of a CData\n\n You should rarely need to call this function. It exists so that CDatas\n can be used as associative array keys.\n",
						"originalType": "const size_t()",
						"endline": 1353,
						"overrides": [
							"std.xml.Item.toHash"
						]
					},
					{
						"kind": "function",
						"line": 1358,
						"storageClass": [
							"override"
						],
						"deco": "xFZAya",
						"endchar": 72,
						"char": 21,
						"name": "toString",
						"comment": " Returns a string representation of this CData section\n",
						"endline": 1358,
						"overrides": [
							"std.xml.Item.toString"
						]
					},
					{
						"kind": "function",
						"line": 1360,
						"storageClass": [
							"override"
						],
						"deco": "xFNdZb",
						"endchar": 64,
						"char": 29,
						"name": "isEmptyXML",
						"comment": "Returns false always\n",
						"endline": 1360,
						"overrides": [
							"std.xml.Item.isEmptyXML"
						]
					}
				],
				"char": 1,
				"name": "CData",
				"comment": " Class representing a Character Data section\n"
			},
			{
				"kind": "class",
				"line": 1366,
				"base": "std.xml.Item",
				"members": [
					{
						"kind": "constructor",
						"line": 1383,
						"deco": "FAyaZC3std3xml4Text",
						"endchar": 5,
						"char": 5,
						"parameters": [
							{
								"deco": "Aya",
								"name": "content"
							}
						],
						"name": "this",
						"comment": " Construct a text (aka PCData) section\n\n Params:\n      content = the text. This function encodes the text before\n      insertion, so it is safe to insert any text\n\n Examples:\n --------------\n auto Text = new CData(\"a < b\");\n    // constructs a &lt; b\n --------------\n",
						"originalType": "(string content)",
						"endline": 1386
					},
					{
						"kind": "function",
						"line": 1397,
						"storageClass": [
							"override"
						],
						"deco": "FC6ObjectZb",
						"endchar": 5,
						"char": 19,
						"parameters": [
							{
								"deco": "C6Object",
								"name": "o"
							}
						],
						"name": "opEquals",
						"comment": " Compares two text sections for equality\n\n Examples:\n --------------\n Text item1,item2;\n if (item1 == item2) { }\n --------------\n",
						"endline": 1402,
						"overrides": [
							"std.xml.Item.opEquals"
						]
					},
					{
						"kind": "function",
						"line": 1416,
						"storageClass": [
							"override"
						],
						"deco": "FC6ObjectZi",
						"endchar": 5,
						"char": 18,
						"parameters": [
							{
								"deco": "C6Object",
								"name": "o"
							}
						],
						"name": "opCmp",
						"comment": " Compares two text sections\n\n You should rarely need to call this function. It exists so that Texts\n can be used as associative array keys.\n\n Examples:\n --------------\n Text item1,item2;\n if (item1 < item2) { }\n --------------\n",
						"endline": 1422,
						"overrides": [
							"std.xml.Item.opCmp"
						]
					},
					{
						"kind": "function",
						"line": 1430,
						"storageClass": [
							"override"
						],
						"deco": "xFNbNfZm",
						"endchar": 60,
						"char": 21,
						"name": "toHash",
						"comment": " Returns the hash of a text section\n\n You should rarely need to call this function. It exists so that Texts\n can be used as associative array keys.\n",
						"originalType": "const size_t()",
						"endline": 1430,
						"overrides": [
							"std.xml.Item.toHash"
						]
					},
					{
						"kind": "function",
						"line": 1435,
						"storageClass": [
							"override"
						],
						"deco": "xFZAya",
						"endchar": 56,
						"char": 21,
						"name": "toString",
						"comment": " Returns a string representation of this Text section\n",
						"endline": 1435,
						"overrides": [
							"std.xml.Item.toString"
						]
					},
					{
						"kind": "function",
						"line": 1440,
						"storageClass": [
							"override"
						],
						"deco": "xFNdZb",
						"endchar": 78,
						"char": 29,
						"name": "isEmptyXML",
						"comment": " Returns true if the content is the empty string\n",
						"endline": 1440,
						"overrides": [
							"std.xml.Item.isEmptyXML"
						]
					}
				],
				"char": 1,
				"name": "Text",
				"comment": " Class representing a text (aka Parsed Character Data) section\n"
			},
			{
				"kind": "class",
				"line": 1446,
				"base": "std.xml.Item",
				"members": [
					{
						"kind": "constructor",
						"line": 1464,
						"deco": "FAyaZC3std3xml14XMLInstruction",
						"endchar": 5,
						"char": 5,
						"parameters": [
							{
								"deco": "Aya",
								"name": "content"
							}
						],
						"name": "this",
						"comment": " Construct an XML Instruction section\n\n Params:\n      content = the body of the instruction segment\n\n Throws: XIException if the segment body is illegal (contains \">\")\n\n Examples:\n --------------\n auto item = new XMLInstruction(\"ATTLIST\");\n    // constructs <!ATTLIST>\n --------------\n",
						"originalType": "(string content)",
						"endline": 1468
					},
					{
						"kind": "function",
						"line": 1479,
						"storageClass": [
							"override"
						],
						"deco": "FC6ObjectZb",
						"endchar": 5,
						"char": 19,
						"parameters": [
							{
								"deco": "C6Object",
								"name": "o"
							}
						],
						"name": "opEquals",
						"comment": " Compares two XML instructions for equality\n\n Examples:\n --------------\n XMLInstruction item1,item2;\n if (item1 == item2) { }\n --------------\n",
						"endline": 1484,
						"overrides": [
							"std.xml.Item.opEquals"
						]
					},
					{
						"kind": "function",
						"line": 1498,
						"storageClass": [
							"override"
						],
						"deco": "FC6ObjectZi",
						"endchar": 5,
						"char": 18,
						"parameters": [
							{
								"deco": "C6Object",
								"name": "o"
							}
						],
						"name": "opCmp",
						"comment": " Compares two XML instructions\n\n You should rarely need to call this function. It exists so that\n XmlInstructions can be used as associative array keys.\n\n Examples:\n --------------\n XMLInstruction item1,item2;\n if (item1 < item2) { }\n --------------\n",
						"endline": 1504,
						"overrides": [
							"std.xml.Item.opCmp"
						]
					},
					{
						"kind": "function",
						"line": 1512,
						"storageClass": [
							"override"
						],
						"deco": "xFNbNfZm",
						"endchar": 60,
						"char": 21,
						"name": "toHash",
						"comment": " Returns the hash of an XMLInstruction\n\n You should rarely need to call this function. It exists so that\n XmlInstructions can be used as associative array keys.\n",
						"originalType": "const size_t()",
						"endline": 1512,
						"overrides": [
							"std.xml.Item.toHash"
						]
					},
					{
						"kind": "function",
						"line": 1517,
						"storageClass": [
							"override"
						],
						"deco": "xFZAya",
						"endchar": 69,
						"char": 21,
						"name": "toString",
						"comment": " Returns a string representation of this XmlInstruction\n",
						"endline": 1517,
						"overrides": [
							"std.xml.Item.toString"
						]
					},
					{
						"kind": "function",
						"line": 1519,
						"storageClass": [
							"override"
						],
						"deco": "xFNdZb",
						"endchar": 64,
						"char": 29,
						"name": "isEmptyXML",
						"comment": "Returns false always\n",
						"endline": 1519,
						"overrides": [
							"std.xml.Item.isEmptyXML"
						]
					}
				],
				"char": 1,
				"name": "XMLInstruction",
				"comment": " Class representing an XML Instruction section\n"
			},
			{
				"kind": "class",
				"line": 1525,
				"base": "std.xml.Item",
				"members": [
					{
						"kind": "constructor",
						"line": 1543,
						"deco": "FAyaZC3std3xml21ProcessingInstruction",
						"endchar": 5,
						"char": 5,
						"parameters": [
							{
								"deco": "Aya",
								"name": "content"
							}
						],
						"name": "this",
						"comment": " Construct a Processing Instruction section\n\n Params:\n      content = the body of the instruction segment\n\n Throws: PIException if the segment body is illegal (contains \"?>\")\n\n Examples:\n --------------\n auto item = new ProcessingInstruction(\"php\");\n    // constructs <?php?>\n --------------\n",
						"originalType": "(string content)",
						"endline": 1547
					},
					{
						"kind": "function",
						"line": 1558,
						"storageClass": [
							"override"
						],
						"deco": "FC6ObjectZb",
						"endchar": 5,
						"char": 19,
						"parameters": [
							{
								"deco": "C6Object",
								"name": "o"
							}
						],
						"name": "opEquals",
						"comment": " Compares two processing instructions for equality\n\n Examples:\n --------------\n ProcessingInstruction item1,item2;\n if (item1 == item2) { }\n --------------\n",
						"endline": 1563,
						"overrides": [
							"std.xml.Item.opEquals"
						]
					},
					{
						"kind": "function",
						"line": 1577,
						"storageClass": [
							"override"
						],
						"deco": "FC6ObjectZi",
						"endchar": 5,
						"char": 18,
						"parameters": [
							{
								"deco": "C6Object",
								"name": "o"
							}
						],
						"name": "opCmp",
						"comment": " Compares two processing instructions\n\n You should rarely need to call this function. It exists so that\n ProcessingInstructions can be used as associative array keys.\n\n Examples:\n --------------\n ProcessingInstruction item1,item2;\n if (item1 < item2) { }\n --------------\n",
						"endline": 1583,
						"overrides": [
							"std.xml.Item.opCmp"
						]
					},
					{
						"kind": "function",
						"line": 1591,
						"storageClass": [
							"override"
						],
						"deco": "xFNbNfZm",
						"endchar": 60,
						"char": 21,
						"name": "toHash",
						"comment": " Returns the hash of a ProcessingInstruction\n\n You should rarely need to call this function. It exists so that\n ProcessingInstructions can be used as associative array keys.\n",
						"originalType": "const size_t()",
						"endline": 1591,
						"overrides": [
							"std.xml.Item.toHash"
						]
					},
					{
						"kind": "function",
						"line": 1596,
						"storageClass": [
							"override"
						],
						"deco": "xFZAya",
						"endchar": 70,
						"char": 21,
						"name": "toString",
						"comment": " Returns a string representation of this ProcessingInstruction\n",
						"endline": 1596,
						"overrides": [
							"std.xml.Item.toString"
						]
					},
					{
						"kind": "function",
						"line": 1598,
						"storageClass": [
							"override"
						],
						"deco": "xFNdZb",
						"endchar": 64,
						"char": 29,
						"name": "isEmptyXML",
						"comment": "Returns false always\n",
						"endline": 1598,
						"overrides": [
							"std.xml.Item.isEmptyXML"
						]
					}
				],
				"char": 1,
				"name": "ProcessingInstruction",
				"comment": " Class representing a Processing Instruction section\n"
			},
			{
				"kind": "class",
				"line": 1604,
				"members": [
					{
						"kind": "function",
						"line": 1607,
						"storageClass": [
							"abstract",
							"override"
						],
						"deco": "FC6ObjectZb",
						"char": 28,
						"parameters": [
							{
								"deco": "C6Object",
								"name": "o"
							}
						],
						"name": "opEquals",
						"comment": "Compares with another Item of same type for equality\n",
						"overrides": [
							"object.Object.opEquals"
						]
					},
					{
						"kind": "function",
						"line": 1610,
						"storageClass": [
							"abstract",
							"override"
						],
						"deco": "FC6ObjectZi",
						"char": 27,
						"parameters": [
							{
								"deco": "C6Object",
								"name": "o"
							}
						],
						"name": "opCmp",
						"comment": "Compares with another Item of same type\n",
						"overrides": [
							"object.Object.opCmp"
						]
					},
					{
						"kind": "function",
						"line": 1613,
						"storageClass": [
							"abstract",
							"override"
						],
						"deco": "xFNbNfZm",
						"char": 30,
						"name": "toHash",
						"comment": "Returns the hash of this item\n",
						"originalType": "const size_t()",
						"overrides": [
							"object.Object.toHash"
						]
					},
					{
						"kind": "function",
						"line": 1616,
						"storageClass": [
							"abstract",
							"override"
						],
						"deco": "xFZAya",
						"char": 30,
						"name": "toString",
						"comment": "Returns a string representation of this item\n",
						"overrides": [
							"object.Object.toString"
						]
					},
					{
						"kind": "function",
						"line": 1624,
						"deco": "xFkZAAya",
						"endchar": 5,
						"char": 14,
						"parameters": [
							{
								"deco": "k",
								"name": "indent"
							}
						],
						"name": "pretty",
						"comment": " Returns an indented string representation of this item\n\n Params:\n      indent = number of spaces by which to indent child elements\n",
						"endline": 1628
					},
					{
						"kind": "function",
						"line": 1631,
						"storageClass": [
							"abstract"
						],
						"deco": "xFNdZb",
						"char": 29,
						"name": "isEmptyXML",
						"comment": "Returns true if the item represents empty XML text\n"
					}
				],
				"char": 10,
				"name": "Item",
				"comment": " Abstract base class for XML items\n"
			},
			{
				"kind": "class",
				"line": 1648,
				"base": "std.xml.ElementParser",
				"members": [
					{
						"kind": "constructor",
						"line": 1662,
						"deco": "FAyaZC3std3xml14DocumentParser",
						"endchar": 5,
						"char": 5,
						"parameters": [
							{
								"deco": "Aya",
								"name": "xmlText_"
							}
						],
						"name": "this",
						"comment": " Constructs a DocumentParser.\n\n The input to this function MUST be valid XML.\n This is enforced by the function's in contract.\n\n Params:\n      xmlText_ = the entire XML document as text\n\n",
						"originalType": "(string xmlText_)",
						"endline": 1683
					}
				],
				"char": 1,
				"name": "DocumentParser",
				"comment": " Class for parsing an XML Document.\n\n This is a subclass of ElementParser. Most of the useful functions are\n documented there.\n\n Standards: $(LINK2 http://www.w3.org/TR/1998/REC-xml-19980210, XML 1.0)\n\n Bugs:\n      Currently only supports UTF documents.\n\n      If there is an encoding attribute in the prolog, it is ignored.\n\n"
			},
			{
				"kind": "class",
				"line": 1697,
				"members": [
					{
						"kind": "function",
						"line": 1737,
						"deco": "xFNdZxC3std3xml3Tag",
						"endchar": 53,
						"char": 26,
						"name": "tag",
						"comment": " The Tag at the start of the element being parsed. You can read this to\n determine the tag's name and attributes.\n",
						"endline": 1737
					},
					{
						"kind": "variable",
						"line": 1773,
						"deco": "HAyaDFC3std3xml13ElementParserZv",
						"char": 27,
						"name": "onStartTag",
						"comment": " Register a handler which will be called whenever a start tag is\n encountered which matches the specified name. You can also pass null as\n the name, in which case the handler will be called for any unmatched\n start tag.\n\n Examples:\n --------------\n // Call this function whenever a <podcast> start tag is encountered\n onStartTag[\"podcast\"] = (ElementParser xml)\n {\n     // Your code here\n     //\n     // This is a a closure, so code here may reference\n     // variables which are outside of this scope\n };\n\n // call myEpisodeStartHandler (defined elsewhere) whenever an <episode>\n // start tag is encountered\n onStartTag[\"episode\"] = &myEpisodeStartHandler;\n\n // call delegate dg for all other start tags\n onStartTag[null] = dg;\n --------------\n\n This library will supply your function with a new instance of\n ElementHandler, which may be used to parse inside the element whose\n start tag was just found, or to identify the tag attributes of the\n element, etc.\n\n Note that your function will be called for both start tags and empty\n tags. That is, we make no distinction between &lt;br&gt;&lt;/br&gt;\n and &lt;br/&gt;.\n",
						"originalType": "ParserHandler[string]",
						"offset": 144
					},
					{
						"kind": "variable",
						"line": 1804,
						"deco": "HAyaDFxC3std3xml7ElementZv",
						"char": 28,
						"name": "onEndTag",
						"comment": " Register a handler which will be called whenever an end tag is\n encountered which matches the specified name. You can also pass null as\n the name, in which case the handler will be called for any unmatched\n end tag.\n\n Examples:\n --------------\n // Call this function whenever a </podcast> end tag is encountered\n onEndTag[\"podcast\"] = (in Element e)\n {\n     // Your code here\n     //\n     // This is a a closure, so code here may reference\n     // variables which are outside of this scope\n };\n\n // call myEpisodeEndHandler (defined elsewhere) whenever an </episode>\n // end tag is encountered\n onEndTag[\"episode\"] = &myEpisodeEndHandler;\n\n // call delegate dg for all other end tags\n onEndTag[null] = dg;\n --------------\n\n Note that your function will be called for both start tags and empty\n tags. That is, we make no distinction between &lt;br&gt;&lt;/br&gt;\n and &lt;br/&gt;.\n",
						"originalType": "ElementHandler[string]",
						"offset": 152
					},
					{
						"kind": "function",
						"line": 1829,
						"deco": "FNdDFAyaZvZv",
						"endchar": 69,
						"char": 20,
						"parameters": [
							{
								"deco": "DFAyaZv",
								"name": "handler"
							}
						],
						"name": "onText",
						"comment": " Register a handler which will be called whenever text is encountered.\n\n Examples:\n --------------\n // Call this function whenever text is encountered\n onText = (string s)\n {\n     // Your code here\n\n     // The passed parameter s will have been decoded by the time you see\n     // it, and so may contain any character.\n     //\n     // This is a a closure, so code here may reference\n     // variables which are outside of this scope\n };\n --------------\n",
						"originalType": "@property void(Handler handler)",
						"endline": 1829
					},
					{
						"kind": "function",
						"line": 1855,
						"deco": "FDFAyaZvZv",
						"endchar": 65,
						"char": 10,
						"parameters": [
							{
								"deco": "DFAyaZv",
								"name": "handler"
							}
						],
						"name": "onTextRaw",
						"comment": " Register an alternative handler which will be called whenever text\n is encountered. This differs from onText in that onText will decode\n the text, whereas onTextRaw will not. This allows you to make design\n choices, since onText will be more accurate, but slower, while\n onTextRaw will be faster, but less accurate. Of course, you can\n still call decode() within your handler, if you want, but you'd\n probably want to use onTextRaw only in circumstances where you\n know that decoding is unnecessary.\n\n Examples:\n --------------\n // Call this function whenever text is encountered\n onText = (string s)\n {\n     // Your code here\n\n     // The passed parameter s will NOT have been decoded.\n     //\n     // This is a a closure, so code here may reference\n     // variables which are outside of this scope\n };\n --------------\n",
						"originalType": "void(Handler handler)",
						"endline": 1855
					},
					{
						"kind": "function",
						"line": 1876,
						"deco": "FNdDFAyaZvZv",
						"endchar": 71,
						"char": 20,
						"parameters": [
							{
								"deco": "DFAyaZv",
								"name": "handler"
							}
						],
						"name": "onCData",
						"comment": " Register a handler which will be called whenever a character data\n segment is encountered.\n\n Examples:\n --------------\n // Call this function whenever a CData section is encountered\n onCData = (string s)\n {\n     // Your code here\n\n     // The passed parameter s does not include the opening <![CDATA[\n     // nor closing ]]>\n     //\n     // This is a a closure, so code here may reference\n     // variables which are outside of this scope\n };\n --------------\n",
						"originalType": "@property void(Handler handler)",
						"endline": 1876
					},
					{
						"kind": "function",
						"line": 1897,
						"deco": "FNdDFAyaZvZv",
						"endchar": 75,
						"char": 20,
						"parameters": [
							{
								"deco": "DFAyaZv",
								"name": "handler"
							}
						],
						"name": "onComment",
						"comment": " Register a handler which will be called whenever a comment is\n encountered.\n\n Examples:\n --------------\n // Call this function whenever a comment is encountered\n onComment = (string s)\n {\n     // Your code here\n\n     // The passed parameter s does not include the opening <!-- nor\n     // closing -->\n     //\n     // This is a a closure, so code here may reference\n     // variables which are outside of this scope\n };\n --------------\n",
						"originalType": "@property void(Handler handler)",
						"endline": 1897
					},
					{
						"kind": "function",
						"line": 1918,
						"deco": "FNdDFAyaZvZv",
						"endchar": 65,
						"char": 20,
						"parameters": [
							{
								"deco": "DFAyaZv",
								"name": "handler"
							}
						],
						"name": "onPI",
						"comment": " Register a handler which will be called whenever a processing\n instruction is encountered.\n\n Examples:\n --------------\n // Call this function whenever a processing instruction is encountered\n onPI = (string s)\n {\n     // Your code here\n\n     // The passed parameter s does not include the opening <? nor\n     // closing ?>\n     //\n     // This is a a closure, so code here may reference\n     // variables which are outside of this scope\n };\n --------------\n",
						"originalType": "@property void(Handler handler)",
						"endline": 1918
					},
					{
						"kind": "function",
						"line": 1941,
						"deco": "FNdDFAyaZvZv",
						"endchar": 65,
						"char": 20,
						"parameters": [
							{
								"deco": "DFAyaZv",
								"name": "handler"
							}
						],
						"name": "onXI",
						"comment": " Register a handler which will be called whenever an XML instruction is\n encountered.\n\n Examples:\n --------------\n // Call this function whenever an XML instruction is encountered\n // (Note: XML instructions may only occur preceding the root tag of a\n // document).\n onPI = (string s)\n {\n     // Your code here\n\n     // The passed parameter s does not include the opening <! nor\n     // closing >\n     //\n     // This is a a closure, so code here may reference\n     // variables which are outside of this scope\n };\n --------------\n",
						"originalType": "@property void(Handler handler)",
						"endline": 1941
					},
					{
						"kind": "function",
						"line": 1952,
						"deco": "FZv",
						"endchar": 5,
						"char": 10,
						"name": "parse",
						"comment": " Parse an XML element.\n\n Parsing will continue until the end of the current element. Any items\n encountered for which a handler has been registered will invoke that\n handler.\n\n Throws: various kinds of XMLException\n",
						"endline": 2073
					},
					{
						"kind": "function",
						"line": 2078,
						"storageClass": [
							"override"
						],
						"deco": "xFZAya",
						"endchar": 5,
						"char": 21,
						"name": "toString",
						"comment": " Returns that part of the element which has already been parsed\n",
						"endline": 2082,
						"overrides": [
							"object.Object.toString"
						]
					}
				],
				"char": 1,
				"name": "ElementParser",
				"comment": " Class for parsing an XML element.\n\n Standards: $(LINK2 http://www.w3.org/TR/1998/REC-xml-19980210, XML 1.0)\n\n Note that you cannot construct instances of this class directly. You can\n construct a DocumentParser (which is a subclass of ElementParser), but\n otherwise, Instances of ElementParser will be created for you by the\n library, and passed your way via onStartTag handlers.\n\n"
			},
			{
				"kind": "function",
				"line": 2631,
				"deco": "FAyaZv",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "Aya",
						"name": "s"
					}
				],
				"name": "check",
				"comment": " Check an entire XML document for well-formedness\n\n Params:\n      s = the document to be checked, passed as a string\n\n Throws: CheckException if the document is not well formed\n\n CheckException's toString() method will yield the complete hierarchy of\n parse failure (the XML equivalent of a stack trace), giving the line and\n column number of every failure at every level.\n",
				"endline": 2644
			},
			{
				"kind": "class",
				"line": 2743,
				"base": "object.Exception",
				"members": [],
				"char": 1,
				"name": "XMLException",
				"comment": " The base class for exceptions thrown by this module\n"
			},
			{
				"kind": "class",
				"line": 2748,
				"base": "std.xml.XMLException",
				"members": [],
				"char": 1,
				"name": "CommentException",
				"comment": "Thrown during Comment constructor\n"
			},
			{
				"kind": "class",
				"line": 2752,
				"base": "std.xml.XMLException",
				"members": [],
				"char": 1,
				"name": "CDataException",
				"comment": "Thrown during CData constructor\n"
			},
			{
				"kind": "class",
				"line": 2756,
				"base": "std.xml.XMLException",
				"members": [],
				"char": 1,
				"name": "XIException",
				"comment": "Thrown during XMLInstruction constructor\n"
			},
			{
				"kind": "class",
				"line": 2760,
				"base": "std.xml.XMLException",
				"members": [],
				"char": 1,
				"name": "PIException",
				"comment": "Thrown during ProcessingInstruction constructor\n"
			},
			{
				"kind": "class",
				"line": 2764,
				"base": "std.xml.XMLException",
				"members": [],
				"char": 1,
				"name": "TextException",
				"comment": "Thrown during Text constructor\n"
			},
			{
				"kind": "class",
				"line": 2768,
				"base": "std.xml.XMLException",
				"members": [],
				"char": 1,
				"name": "DecodeException",
				"comment": "Thrown during decode()\n"
			},
			{
				"kind": "class",
				"line": 2772,
				"base": "std.xml.XMLException",
				"members": [],
				"char": 1,
				"name": "InvalidTypeException",
				"comment": "Thrown if comparing with wrong type\n"
			},
			{
				"kind": "class",
				"line": 2776,
				"base": "std.xml.XMLException",
				"members": [],
				"char": 1,
				"name": "TagException",
				"comment": "Thrown when parsing for Tags\n"
			},
			{
				"kind": "class",
				"line": 2782,
				"base": "std.xml.XMLException",
				"members": [
					{
						"kind": "variable",
						"line": 2784,
						"deco": "C3std3xml14CheckException",
						"char": 20,
						"name": "err",
						"comment": "Parent in hierarchy\n",
						"originalType": "CheckException",
						"offset": 72
					},
					{
						"kind": "variable",
						"line": 2790,
						"deco": "Aya",
						"char": 12,
						"name": "msg",
						"comment": " Name of production rule which failed to parse,\n or specific error message\n",
						"offset": 96
					},
					{
						"kind": "variable",
						"line": 2791,
						"init": "0LU",
						"deco": "m",
						"char": 12,
						"name": "line",
						"comment": "Line number at which parse failure occurred\n",
						"originalType": "size_t",
						"offset": 112
					},
					{
						"kind": "variable",
						"line": 2792,
						"init": "0LU",
						"deco": "m",
						"char": 12,
						"name": "column",
						"comment": "Column number at which parse failure occurred\n",
						"originalType": "size_t",
						"offset": 120
					}
				],
				"char": 1,
				"name": "CheckException",
				"comment": " Thrown during check()\n"
			}
		],
		"name": "std.xml",
		"comment": "$(RED Warning: This module is considered out-dated and not up to Phobos'\n      current standards. It will remain until we have a suitable replacement,\n      but be aware that it will not remain long term.)\n\nClasses and functions for creating and parsing XML\n\nThe basic architecture of this module is that there are standalone functions,\nclasses for constructing an XML document from scratch (Tag, Element and\nDocument), and also classes for parsing a pre-existing XML file (ElementParser\nand DocumentParser). The parsing classes <i>may</i> be used to build a\nDocument, but that is not their primary purpose. The handling capabilities of\nDocumentParser and ElementParser are sufficiently customizable that you can\nmake them do pretty much whatever you want.\n\nExample: This example creates a DOM (Document Object Model) tree\n    from an XML file.\n------------------------------------------------------------------------------\nimport std.xml;\nimport std.stdio;\nimport std.string;\nimport std.file;\n\n// books.xml is used in various samples throughout the Microsoft XML Core\n// Services (MSXML) SDK.\n//\n// See http://msdn2.microsoft.com/en-us/library/ms762271(VS.85).aspx\n\nvoid main()\n{\n    string s = cast(string)std.file.read(\"books.xml\");\n\n    // Check for well-formedness\n    check(s);\n\n    // Make a DOM tree\n    auto doc = new Document(s);\n\n    // Plain-print it\n    writeln(doc);\n}\n------------------------------------------------------------------------------\n\nExample: This example does much the same thing, except that the file is\n    deconstructed and reconstructed by hand. This is more work, but the\n    techniques involved offer vastly more power.\n------------------------------------------------------------------------------\nimport std.xml;\nimport std.stdio;\nimport std.string;\n\nstruct Book\n{\n    string id;\n    string author;\n    string title;\n    string genre;\n    string price;\n    string pubDate;\n    string description;\n}\n\nvoid main()\n{\n    string s = cast(string)std.file.read(\"books.xml\");\n\n    // Check for well-formedness\n    check(s);\n\n    // Take it apart\n    Book[] books;\n\n    auto xml = new DocumentParser(s);\n    xml.onStartTag[\"book\"] = (ElementParser xml)\n    {\n        Book book;\n        book.id = xml.tag.attr[\"id\"];\n\n        xml.onEndTag[\"author\"]       = (in Element e) { book.author      = e.text(); };\n        xml.onEndTag[\"title\"]        = (in Element e) { book.title       = e.text(); };\n        xml.onEndTag[\"genre\"]        = (in Element e) { book.genre       = e.text(); };\n        xml.onEndTag[\"price\"]        = (in Element e) { book.price       = e.text(); };\n        xml.onEndTag[\"publish-date\"] = (in Element e) { book.pubDate     = e.text(); };\n        xml.onEndTag[\"description\"]  = (in Element e) { book.description = e.text(); };\n\n        xml.parse();\n\n        books ~= book;\n    };\n    xml.parse();\n\n    // Put it back together again;\n    auto doc = new Document(new Tag(\"catalog\"));\n    foreach(book;books)\n    {\n        auto element = new Element(\"book\");\n        element.tag.attr[\"id\"] = book.id;\n\n        element ~= new Element(\"author\",      book.author);\n        element ~= new Element(\"title\",       book.title);\n        element ~= new Element(\"genre\",       book.genre);\n        element ~= new Element(\"price\",       book.price);\n        element ~= new Element(\"publish-date\",book.pubDate);\n        element ~= new Element(\"description\", book.description);\n\n        doc ~= element;\n    }\n\n    // Pretty-print it\n    writefln(join(doc.pretty(3),\"\\n\"));\n}\n-------------------------------------------------------------------------------\nMacros:\n    WIKI=Phobos/StdXml\n\nCopyright: Copyright Janice Caron 2008 - 2009.\nLicense:   $(WEB www.boost.org/LICENSE_1_0.txt, Boost License 1.0).\nAuthors:   Janice Caron\nSource:    $(PHOBOSSRC std/_xml.d)\n"
	},
	{
		"kind": "module",
		"file": "../phobos/std/exception.d",
		"members": [
			{
				"kind": "template",
				"line": 74,
				"members": [
					{
						"kind": "function",
						"line": 74,
						"endchar": 1,
						"char": 6,
						"type": "void(lazy E expression, string msg = null, string file = __FILE__, size_t line = __LINE__)",
						"parameters": [
							{
								"storageClass": [
									"lazy"
								],
								"type": "E",
								"name": "expression"
							},
							{
								"default": "null",
								"type": "string",
								"name": "msg"
							},
							{
								"default": "__FILE__",
								"type": "string",
								"name": "file"
							},
							{
								"default": "__LINE__",
								"type": "size_t",
								"name": "line"
							}
						],
						"name": "assertNotThrown",
						"endline": 91
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"deco": "C6object9Throwable",
						"default": "Exception",
						"name": "T"
					},
					{
						"kind": "type",
						"name": "E"
					}
				],
				"comment": "    Asserts that the given expression does $(I not) throw the given type\n    of $(D Throwable). If a $(D Throwable) of the given type is thrown,\n    it is caught and does not escape assertNotThrown. Rather, an\n    $(D AssertError) is thrown. However, any other $(D Throwable)s will escape.\n\n    Params:\n        T          = The $(D Throwable) to test for.\n        expression = The expression to test.\n        msg        = Optional message to output on test failure.\n                     If msg is empty, and the thrown exception has a\n                     non-empty msg field, the exception's msg field\n                     will be output on test failure.\n        file       = The file where the error occurred.\n                     Defaults to $(D __FILE__).\n        line       = The line where the error occurred.\n                     Defaults to $(D __LINE__).\n\n    Throws:\n        $(D AssertError) if the given $(D Throwable) is thrown.\nExample:\n\n---\nimport core.exception : AssertError;\n\nimport std.string;\nassertNotThrown!StringException(enforce!StringException(true, \"Error!\"));\n\n//Exception is the default.\nassertNotThrown(enforce!StringException(true, \"Error!\"));\n\nassert(collectExceptionMsg!AssertError(assertNotThrown!StringException(\n           enforce!StringException(false, \"Error!\"))) ==\n       `assertNotThrown failed: StringException was thrown: Error!`);\n\n---\n",
				"name": "assertNotThrown"
			},
			{
				"kind": "template",
				"line": 219,
				"members": [
					{
						"kind": "function",
						"line": 219,
						"endchar": 1,
						"char": 6,
						"type": "void(lazy E expression, string msg = null, string file = __FILE__, size_t line = __LINE__)",
						"parameters": [
							{
								"storageClass": [
									"lazy"
								],
								"type": "E",
								"name": "expression"
							},
							{
								"default": "null",
								"type": "string",
								"name": "msg"
							},
							{
								"default": "__FILE__",
								"type": "string",
								"name": "file"
							},
							{
								"default": "__LINE__",
								"type": "size_t",
								"name": "line"
							}
						],
						"name": "assertThrown",
						"endline": 234
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"deco": "C6object9Throwable",
						"default": "Exception",
						"name": "T"
					},
					{
						"kind": "type",
						"name": "E"
					}
				],
				"comment": "    Asserts that the given expression throws the given type of $(D Throwable).\n    The $(D Throwable) is caught and does not escape assertThrown. However,\n    any other $(D Throwable)s $(I will) escape, and if no $(D Throwable)\n    of the given type is thrown, then an $(D AssertError) is thrown.\n\n    Params:\n        T          = The $(D Throwable) to test for.\n        expression = The expression to test.\n        msg        = Optional message to output on test failure.\n        file       = The file where the error occurred.\n                     Defaults to $(D __FILE__).\n        line       = The line where the error occurred.\n                     Defaults to $(D __LINE__).\n\n    Throws:\n        $(D AssertError) if the given $(D Throwable) is not thrown.\nExample:\n\n---\nimport core.exception : AssertError;\nimport std.string;\n\nassertThrown!StringException(enforce!StringException(false, \"Error!\"));\n\n//Exception is the default.\nassertThrown(enforce!StringException(false, \"Error!\"));\n\nassert(collectExceptionMsg!AssertError(assertThrown!StringException(\n           enforce!StringException(true, \"Error!\"))) ==\n       `assertThrown failed: No StringException was thrown.`);\n\n---\n",
				"name": "assertThrown"
			},
			{
				"kind": "template",
				"line": 348,
				"constraint": "is(typeof(()\n{\nif (!value)\n{\n}\n}\n))",
				"members": [
					{
						"kind": "function",
						"line": 348,
						"endchar": 1,
						"char": 3,
						"type": "T(T value, lazy const(char)[] msg = null, string file = __FILE__, size_t line = __LINE__)",
						"parameters": [
							{
								"type": "T",
								"name": "value"
							},
							{
								"storageClass": [
									"lazy"
								],
								"default": "null",
								"type": "const(char)[]",
								"name": "msg"
							},
							{
								"default": "__FILE__",
								"type": "string",
								"name": "file"
							},
							{
								"default": "__LINE__",
								"type": "size_t",
								"name": "line"
							}
						],
						"name": "enforce",
						"endline": 353
					}
				],
				"char": 3,
				"parameters": [
					{
						"kind": "type",
						"deco": "C6object9Throwable",
						"default": "Exception",
						"name": "E"
					},
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": "    If $(D !!value) is true, $(D value) is returned. Otherwise,\n    $(D new Exception(msg)) is thrown.\n\n    Note:\n        $(D enforce) is used to throw exceptions and is therefore intended to\n        aid in error handling. It is $(I not) intended for verifying the logic\n        of your program. That is what $(D assert) is for. Also, do not use\n        $(D enforce) inside of contracts (i.e. inside of $(D in) and $(D out)\n        blocks and $(D invariant)s), because they will be compiled out when\n        compiling with $(I -release). Use $(D assert) in contracts.\n\n    Example:\n    --------------------\n    auto f = enforce(fopen(\"data.txt\"));\n    auto line = readln(f);\n    enforce(line.length, \"Expected a non-empty line.\");\n    --------------------\n",
				"name": "enforce"
			},
			{
				"kind": "template",
				"line": 362,
				"constraint": "is(typeof(()\n{\nif (!value)\n{\n}\n}\n))",
				"members": [
					{
						"kind": "function",
						"line": 362,
						"endchar": 1,
						"char": 3,
						"type": "T(T value, lazy const(char)[] msg = null)",
						"parameters": [
							{
								"type": "T",
								"name": "value"
							},
							{
								"storageClass": [
									"lazy"
								],
								"default": "null",
								"type": "const(char)[]",
								"name": "msg"
							}
						],
						"name": "enforce",
						"endline": 368
					}
				],
				"char": 3,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "value",
						"deco": "Aya",
						"name": "file"
					},
					{
						"kind": "value",
						"defaultValue": "__LINE__",
						"deco": "m",
						"name": "line"
					}
				],
				"comment": "   $(RED Deprecated. If passing the file or line number explicitly, please use\n         the overload of enforce which takes them as function arguments. Taking\n         them as template arguments causes unnecessary template bloat. This\n         overload will be removed in June 2015.)\n",
				"name": "enforce"
			},
			{
				"kind": "template",
				"line": 376,
				"constraint": "isSomeFunction!Dg && is(typeof(dg())) && is(typeof(()\n{\nif (!value)\n{\n}\n}\n))",
				"members": [
					{
						"kind": "function",
						"line": 376,
						"endchar": 1,
						"char": 3,
						"type": "T(T value, scope Dg dg)",
						"parameters": [
							{
								"type": "T",
								"name": "value"
							},
							{
								"storageClass": [
									"scope"
								],
								"type": "Dg",
								"name": "dg"
							}
						],
						"name": "enforce",
						"endline": 383
					}
				],
				"char": 3,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "type",
						"name": "Dg"
					},
					{
						"kind": "value",
						"defaultValue": "__FILE__",
						"deco": "Aya",
						"name": "file"
					},
					{
						"kind": "value",
						"defaultValue": "__LINE__",
						"deco": "m",
						"name": "line"
					}
				],
				"comment": "    If $(D !!value) is true, $(D value) is returned. Otherwise, the given\n    delegate is called.\n\n    The whole safety and purity are inferred from $(D Dg)'s safety and purity.\n",
				"name": "enforce"
			},
			{
				"kind": "template",
				"line": 522,
				"members": [
					{
						"kind": "function",
						"line": 522,
						"endchar": 1,
						"char": 3,
						"type": "T(T value, lazy Throwable ex)",
						"parameters": [
							{
								"type": "T",
								"name": "value"
							},
							{
								"storageClass": [
									"lazy"
								],
								"type": "Throwable",
								"name": "ex"
							}
						],
						"name": "enforce",
						"endline": 526
					}
				],
				"char": 3,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": "    If $(D !!value) is true, $(D value) is returned. Otherwise, $(D ex) is thrown.\n\n    Example:\n    --------------------\n    auto f = enforce(fopen(\"data.txt\"));\n    auto line = readln(f);\n    enforce(line.length, new IOException); // expect a non-empty line\n    --------------------\n",
				"name": "enforce"
			},
			{
				"kind": "template",
				"line": 546,
				"members": [
					{
						"kind": "function",
						"line": 546,
						"endchar": 1,
						"char": 3,
						"type": "T(T value, lazy string msg = null)",
						"parameters": [
							{
								"type": "T",
								"name": "value"
							},
							{
								"storageClass": [
									"lazy"
								],
								"default": "null",
								"type": "string",
								"name": "msg"
							}
						],
						"name": "errnoEnforce",
						"endline": 551
					}
				],
				"char": 3,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "value",
						"defaultValue": "__FILE__",
						"deco": "Aya",
						"name": "file"
					},
					{
						"kind": "value",
						"defaultValue": "__LINE__",
						"deco": "m",
						"name": "line"
					}
				],
				"comment": "    If $(D !!value) is true, $(D value) is returned. Otherwise,\n    $(D new ErrnoException(msg)) is thrown. $(D ErrnoException) assumes that the\n    last operation set $(D errno) to an error code.\n\n    Example:\n    --------------------\n    auto f = errnoEnforce(fopen(\"data.txt\"));\n    auto line = readln(f);\n    enforce(line.length); // expect a non-empty line\n    --------------------\n",
				"name": "errnoEnforce"
			},
			{
				"kind": "template",
				"line": 569,
				"constraint": "is(typeof(new E(\"\", \"../phobos/std/exception.d\", 570)))",
				"members": [
					{
						"kind": "template",
						"line": 573,
						"members": [
							{
								"kind": "function",
								"line": 573,
								"endchar": 5,
								"char": 7,
								"type": "T(T value, lazy string msg = \"\", string file = __FILE__, size_t line = __LINE__)",
								"parameters": [
									{
										"type": "T",
										"name": "value"
									},
									{
										"storageClass": [
											"lazy"
										],
										"default": "\"\"",
										"type": "string",
										"name": "msg"
									},
									{
										"default": "__FILE__",
										"type": "string",
										"name": "file"
									},
									{
										"default": "__LINE__",
										"type": "size_t",
										"name": "line"
									}
								],
								"name": "enforceEx",
								"endline": 577
							}
						],
						"char": 7,
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"comment": " Ditto\n",
						"name": "enforceEx"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"deco": "C6object9Throwable",
						"name": "E"
					}
				],
				"comment": "    If $(D !!value) is $(D true), $(D value) is returned. Otherwise,\n    $(D new E(msg, file, line)) is thrown. Or if $(D E) doesn't take a message\n    and can be constructed with $(D new E(file, line)), then\n    $(D new E(file, line)) will be thrown.\n\n    This is legacy name, it is recommended to use $(D enforce!E) instead.\n\n    Example:\n    --------------------\n    auto f = enforceEx!FileMissingException(fopen(\"data.txt\"));\n    auto line = readln(f);\n    enforceEx!DataCorruptionException(line.length);\n    --------------------\n",
				"name": "enforceEx"
			},
			{
				"kind": "template",
				"line": 581,
				"constraint": "is(typeof(new E(\"../phobos/std/exception.d\", 582))) && !is(typeof(new E(\"\", \"../phobos/std/exception.d\", 582)))",
				"members": [
					{
						"kind": "template",
						"line": 585,
						"members": [
							{
								"kind": "function",
								"line": 585,
								"endchar": 5,
								"char": 7,
								"type": "T(T value, string file = __FILE__, size_t line = __LINE__)",
								"parameters": [
									{
										"type": "T",
										"name": "value"
									},
									{
										"default": "__FILE__",
										"type": "string",
										"name": "file"
									},
									{
										"default": "__LINE__",
										"type": "size_t",
										"name": "line"
									}
								],
								"name": "enforceEx",
								"endline": 589
							}
						],
						"char": 7,
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"comment": " Ditto\n",
						"name": "enforceEx"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"deco": "C6object9Throwable",
						"name": "E"
					}
				],
				"comment": " Ditto\n",
				"name": "enforceEx"
			},
			{
				"kind": "template",
				"line": 660,
				"members": [
					{
						"kind": "function",
						"line": 660,
						"endchar": 1,
						"char": 3,
						"type": "T(lazy E expression, ref E result)",
						"parameters": [
							{
								"storageClass": [
									"lazy"
								],
								"type": "E",
								"name": "expression"
							},
							{
								"storageClass": [
									"ref"
								],
								"type": "E",
								"name": "result"
							}
						],
						"name": "collectException",
						"endline": 671
					}
				],
				"char": 3,
				"parameters": [
					{
						"kind": "type",
						"default": "Exception",
						"name": "T"
					},
					{
						"kind": "type",
						"name": "E"
					}
				],
				"comment": "    Catches and returns the exception thrown from the given expression.\n    If no exception is thrown, then null is returned and $(D result) is\n    set to the result of the expression.\n\n    Note that while $(D collectException) $(I can) be used to collect any\n    $(D Throwable) and not just $(D Exception)s, it is generally ill-advised to\n    catch anything that is neither an $(D Exception) nor a type derived from\n    $(D Exception). So, do not use $(D collectException) to collect\n    non-$(D Exception)s unless you're sure that that's what you really want to\n    do.\n\n    Params:\n        T          = The type of exception to catch.\n        expression = The expression which may throw an exception.\n        result     = The result of the expression if no exception is thrown.\nExample:\n\n---\nint b;\nint foo() { throw new Exception(\"blah\"); }\nassert(collectException(foo(), b));\n\nint[] a = new int[3];\nimport core.exception : RangeError;\nassert(collectException!RangeError(a[4], b));\n\n---\n",
				"name": "collectException"
			},
			{
				"kind": "template",
				"line": 700,
				"members": [
					{
						"kind": "function",
						"line": 700,
						"endchar": 1,
						"char": 3,
						"type": "T(lazy E expression)",
						"parameters": [
							{
								"storageClass": [
									"lazy"
								],
								"type": "E",
								"name": "expression"
							}
						],
						"name": "collectException",
						"endline": 711
					}
				],
				"char": 3,
				"parameters": [
					{
						"kind": "type",
						"deco": "C6object9Throwable",
						"default": "Exception",
						"name": "T"
					},
					{
						"kind": "type",
						"name": "E"
					}
				],
				"comment": "    Catches and returns the exception thrown from the given expression.\n    If no exception is thrown, then null is returned. $(D E) can be\n    $(D void).\n\n    Note that while $(D collectException) $(I can) be used to collect any\n    $(D Throwable) and not just $(D Exception)s, it is generally ill-advised to\n    catch anything that is neither an $(D Exception) nor a type derived from\n    $(D Exception). So, do not use $(D collectException) to collect\n    non-$(D Exception)s unless you're sure that that's what you really want to\n    do.\n\n    Params:\n        T          = The type of exception to catch.\n        expression = The expression which may throw an exception.\n",
				"name": "collectException"
			},
			{
				"kind": "template",
				"line": 738,
				"members": [
					{
						"kind": "function",
						"line": 738,
						"endchar": 1,
						"char": 8,
						"type": "string(lazy E expression)",
						"parameters": [
							{
								"storageClass": [
									"lazy"
								],
								"type": "E",
								"name": "expression"
							}
						],
						"name": "collectExceptionMsg",
						"endline": 749
					}
				],
				"char": 8,
				"parameters": [
					{
						"kind": "type",
						"default": "Exception",
						"name": "T"
					},
					{
						"kind": "type",
						"name": "E"
					}
				],
				"comment": "    Catches the exception thrown from the given expression and returns the\n    msg property of that exception. If no exception is thrown, then null is\n    returned. $(D E) can be $(D void).\n\n    If an exception is thrown but it has an empty message, then\n    $(D emptyExceptionMsg) is returned.\n\n    Note that while $(D collectExceptionMsg) $(I can) be used to collect any\n    $(D Throwable) and not just $(D Exception)s, it is generally ill-advised to\n    catch anything that is neither an $(D Exception) nor a type derived from\n    $(D Exception). So, do not use $(D collectExceptionMsg) to collect\n    non-$(D Exception)s unless you're sure that that's what you really want to\n    do.\n\n    Params:\n        T          = The type of exception to catch.\n        expression = The expression which may throw an exception.\nExample:\n\n---\nvoid throwFunc() { throw new Exception(\"My Message.\"); }\nassert(collectExceptionMsg(throwFunc()) == \"My Message.\");\n\nvoid nothrowFunc() {}\nassert(collectExceptionMsg(nothrowFunc()) is null);\n\nvoid throwEmptyFunc() { throw new Exception(\"\"); }\nassert(collectExceptionMsg(throwEmptyFunc()) == emptyExceptionMsg);\n\n---\n",
				"name": "collectExceptionMsg"
			},
			{
				"kind": "variable",
				"line": 767,
				"init": "\"<Empty Exception Message>\"",
				"storageClass": [
					"enum"
				],
				"deco": "Aya",
				"char": 6,
				"name": "emptyExceptionMsg",
				"comment": "    Value that collectExceptionMsg returns when it catches an exception\n    with an empty exception message.\n"
			},
			{
				"kind": "template",
				"line": 860,
				"members": [
					{
						"kind": "function",
						"line": 860,
						"endchar": 1,
						"char": 16,
						"type": "pure nothrow immutable(T)[](T[] array)",
						"parameters": [
							{
								"type": "T[]",
								"name": "array"
							}
						],
						"name": "assumeUnique",
						"endline": 863
					}
				],
				"char": 16,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": " Casts a mutable array to an immutable array in an idiomatic\n manner. Technically, $(D assumeUnique) just inserts a cast,\n but its name documents assumptions on the part of the\n caller. $(D assumeUnique(arr)) should only be called when\n there are no more active mutable aliases to elements of $(D\n arr). To strengthen this assumption, $(D assumeUnique(arr))\n also clears $(D arr) before returning. Essentially $(D\n assumeUnique(arr)) indicates commitment from the caller that there\n is no more mutable access to any of $(D arr)'s elements\n (transitively), and that all future accesses will be done through\n the immutable array returned by $(D assumeUnique).\n\n Typically, $(D assumeUnique) is used to return arrays from\n functions that have allocated and built them.\n\n Example:\n\n ----\n string letters()\n {\n   char[] result = new char['z' - 'a' + 1];\n   foreach (i, ref e; result)\n   {\n     e = cast(char)('a' + i);\n   }\n   return assumeUnique(result);\n }\n ----\n\n The use in the example above is correct because $(D result)\n was private to $(D letters) and is inaccessible in writing\n after the function returns. The following example shows an\n incorrect use of $(D assumeUnique).\n\n Bad:\n\n ----\n private char[] buffer;\n string letters(char first, char last)\n {\n   if (first >= last) return null; // fine\n   auto sneaky = buffer;\n   sneaky.length = last - first + 1;\n   foreach (i, ref e; sneaky)\n   {\n     e = cast(char)('a' + i);\n   }\n   return assumeUnique(sneaky); // BAD\n }\n ----\n\n The example above wreaks havoc on client code because it is\n modifying arrays that callers considered immutable. To obtain an\n immutable array from the writable array $(D buffer), replace\n the last line with:\n ----\n return to!(string)(sneaky); // not that sneaky anymore\n ----\n\n The call will duplicate the array appropriately.\n\n Note that checking for uniqueness during compilation is\n possible in certain cases, especially when a function is\n marked as a pure function. The following example does not\n need to call assumeUnique because the compiler can infer the\n uniqueness of the array in the pure function:\n ----\n string letters() pure\n {\n   char[] result = new char['z' - 'a' + 1];\n   foreach (i, ref e; result)\n   {\n     e = cast(char)('a' + i);\n   }\n   return result;\n }\n ----\n\n For more on infering uniqueness see the $(B unique) and\n $(B lent) keywords in the\n $(WEB archjava.fluid.cs.cmu.edu/papers/oopsla02.pdf, ArchJava)\n language.\n\n The downside of using $(D assumeUnique)'s\n convention-based usage is that at this time there is no\n formal checking of the correctness of the assumption;\n on the upside, the idiomatic use of $(D assumeUnique) is\n simple and rare enough to be tolerable.\n\n",
				"name": "assumeUnique"
			},
			{
				"kind": "template",
				"line": 865,
				"members": [
					{
						"kind": "function",
						"line": 865,
						"endchar": 1,
						"char": 16,
						"type": "pure nothrow immutable(T)[](ref T[] array)",
						"parameters": [
							{
								"storageClass": [
									"ref"
								],
								"type": "T[]",
								"name": "array"
							}
						],
						"name": "assumeUnique",
						"endline": 870
					}
				],
				"char": 16,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": "ditto\n",
				"name": "assumeUnique"
			},
			{
				"kind": "template",
				"line": 909,
				"members": [
					{
						"kind": "function",
						"line": 909,
						"endchar": 1,
						"char": 3,
						"type": "nothrow T(lazy T expr, string msg = null, string file = __FILE__, size_t line = __LINE__)",
						"parameters": [
							{
								"storageClass": [
									"lazy"
								],
								"type": "T",
								"name": "expr"
							},
							{
								"default": "null",
								"type": "string",
								"name": "msg"
							},
							{
								"default": "__FILE__",
								"type": "string",
								"name": "file"
							},
							{
								"default": "__LINE__",
								"type": "size_t",
								"name": "line"
							}
						],
						"name": "assumeWontThrow",
						"endline": 926
					}
				],
				"char": 3,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": " Wraps a possibly-throwing expression in a $(D nothrow) wrapper so that it\n can be called by a $(D nothrow) function.\n\n This wrapper function documents commitment on the part of the caller that\n the appropriate steps have been taken to avoid whatever conditions may\n trigger an exception during the evaluation of $(D expr).  If it turns out\n that the expression $(I does) throw at runtime, the wrapper will throw an\n $(D AssertError).\n\n (Note that $(D Throwable) objects such as $(D AssertError) that do not\n subclass $(D Exception) may be thrown even from $(D nothrow) functions,\n since they are considered to be serious runtime problems that cannot be\n recovered from.)\nExample:\n\n---\nimport std.math : sqrt;\n\n// This function may throw.\nint squareRoot(int x)\n{\n    if (x < 0)\n        throw new Exception(\"Tried to take root of negative number\");\n    return cast(int)sqrt(cast(double)x);\n}\n\n// This function never throws.\nint computeLength(int x, int y) nothrow\n{\n    // Since x*x + y*y is always positive, we can safely assume squareRoot\n    // won't throw, and use it to implement this nothrow function. If it\n    // does throw (e.g., if x*x + y*y overflows a 32-bit value), then the\n    // program will terminate.\n    return assumeWontThrow(squareRoot(x*x + y*y));\n}\n\nassert(computeLength(3, 4) == 5);\n\n---\n",
				"name": "assumeWontThrow"
			},
			{
				"kind": "template",
				"line": 1002,
				"constraint": "__traits(isRef, source) || isDynamicArray!S || isPointer!S || is(S == class)",
				"members": [
					{
						"kind": "function",
						"line": 1002,
						"endchar": 1,
						"char": 6,
						"type": "pure nothrow @trusted bool(auto ref const S source, ref const T target)",
						"parameters": [
							{
								"storageClass": [
									"auto",
									"const",
									"ref"
								],
								"type": "S",
								"name": "source"
							},
							{
								"storageClass": [
									"const",
									"ref"
								],
								"type": "T",
								"name": "target"
							}
						],
						"name": "doesPointTo",
						"endline": 1035
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "S"
					},
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "type",
						"defaultDeco": "v",
						"name": "Tdummy"
					}
				],
				"comment": "The \"pointsTo\" functions, $(D doesPointTo) and $(D mayPointTo).\n\nReturns $(D true) if $(D source)'s representation embeds a pointer\nthat points to $(D target)'s representation or somewhere inside\nit.\n\nIf $(D source) is or contains a dynamic array, then, then these functions will check\nif there is overlap between the dynamic array and $(D target)'s representation.\n\nIf $(D source) is a class, then pointsTo will handle it as a pointer.\n\nIf $(D target) is a pointer, a dynamic array or a class, then these functions will only\ncheck if $(D source) points to $(D target), $(I not) what $(D target) references.\n\nIf $(D source) is or contains a union, then there may be either false positives or\nfalse negatives:\n\n$(D doesPointTo) will return $(D true) if it is absolutely certain\n$(D source) points to $(D target). It may produce false negatives, but never\nfalse positives. This function should be prefered when trying to validate\ninput data.\n\n$(D mayPointTo) will return $(D false) if it is absolutely certain\n$(D source) does not point to $(D target). It may produce false positives, but never\nfalse negatives. This function should be prefered for defensively choosing a\ncode path.\n\nNote: Evaluating $(D pointsTo(x, x)) checks whether $(D x) has\ninternal pointers. This should only be done as an assertive test,\nas the language is free to assume objects don't have internal pointers\n(TDPL 7.1.3.5).\nExample:\nPointers\n---\nint  i = 0;\nint* p = null;\nassert(!p.doesPointTo(i));\np = &i;\nassert( p.doesPointTo(i));\n\n---\nExample:\nStructs and Unions\n---\nstruct S\n{\n    int v;\n    int* p;\n}\nint i;\nauto s = S(0, &i);\n\n//structs and unions \"own\" their members\n//pointsTo will answer true if one of the members pointsTo.\nassert(!s.doesPointTo(s.v)); //s.v is just v member of s, so not pointed.\nassert( s.p.doesPointTo(i)); //i is pointed by s.p.\nassert( s  .doesPointTo(i)); //which means i is pointed by s itself.\n\n//Unions will behave exactly the same. Points to will check each \"member\"\n//individually, even if they share the same memory\n\n---\nExample:\nArrays (dynamic and static)\n---\nint i;\nint[]  slice = [0, 1, 2, 3, 4];\nint[5] arr   = [0, 1, 2, 3, 4];\nint*[]  slicep = [&i];\nint*[1] arrp   = [&i];\n\n//A slice points to all of its members:\nassert( slice.doesPointTo(slice[3]));\nassert(!slice[0 .. 2].doesPointTo(slice[3])); //Object 3 is outside of the slice [0 .. 2]\n\n//Note that a slice will not take into account what its members point to.\nassert( slicep[0].doesPointTo(i));\nassert(!slicep   .doesPointTo(i));\n\n//static arrays are objects that own their members, just like structs:\nassert(!arr.doesPointTo(arr[0])); //arr[0] is just a member of arr, so not pointed.\nassert( arrp[0].doesPointTo(i));  //i is pointed by arrp[0].\nassert( arrp   .doesPointTo(i));  //which means i is pointed by arrp itslef.\n\n//Notice the difference between static and dynamic arrays:\nassert(!arr  .doesPointTo(arr[0]));\nassert( arr[].doesPointTo(arr[0]));\nassert( arrp  .doesPointTo(i));\nassert(!arrp[].doesPointTo(i));\n\n---\nExample:\nClasses\n---\nclass C\n{\n    this(int* p){this.p = p;}\n    int* p;\n}\nint i;\nC a = new C(&i);\nC b = a;\n//Classes are a bit particular, as they are treated like simple pointers\n//to a class payload.\nassert( a.p.doesPointTo(i)); //a.p points to i.\nassert(!a  .doesPointTo(i)); //Yet a itself does not point i.\n\n//To check the class payload itself, iterate on its members:\n()\n{\n    foreach (index, _; FieldTypeTuple!C)\n        if (doesPointTo(a.tupleof[index], i))\n            return;\n    assert(0);\n}();\n\n//To check if a class points a specific payload, a direct memmory check can be done:\nauto aLoc = cast(ubyte[__traits(classInstanceSize, C)]*) a;\nassert(b.doesPointTo(*aLoc)); //b points to where a is pointing\n\n---\n",
				"name": "doesPointTo"
			},
			{
				"kind": "class",
				"line": 1414,
				"base": "object.Exception",
				"members": [
					{
						"kind": "function",
						"line": 1416,
						"storageClass": [
							"final"
						],
						"deco": "FNdZk",
						"endchar": 51,
						"char": 26,
						"name": "errno",
						"comment": "Operating system error code.\n",
						"endline": 1416
					}
				],
				"char": 1,
				"name": "ErrnoException",
				"comment": " Thrown if errors that set $(D errno) occur.\n"
			},
			{
				"kind": "template",
				"line": 1495,
				"members": [
					{
						"kind": "function",
						"line": 1495,
						"endchar": 1,
						"char": 21,
						"type": "CommonType!(T1, T2)(lazy scope T1 expression, lazy scope T2 errorHandler)",
						"parameters": [
							{
								"storageClass": [
									"scope",
									"lazy"
								],
								"type": "T1",
								"name": "expression"
							},
							{
								"storageClass": [
									"scope",
									"lazy"
								],
								"type": "T2",
								"name": "errorHandler"
							}
						],
						"name": "ifThrown",
						"endline": 1507
					}
				],
				"char": 21,
				"parameters": [
					{
						"kind": "type",
						"deco": "C6object9Throwable",
						"default": "Exception",
						"name": "E"
					},
					{
						"kind": "type",
						"name": "T1"
					},
					{
						"kind": "type",
						"name": "T2"
					}
				],
				"comment": "    ML-style functional exception handling. Runs the supplied expression and\n    returns its result. If the expression throws a $(D Throwable), runs the\n    supplied error handler instead and return its result. The error handler's\n    type must be the same as the expression's type.\n\n    Params:\n        E            = The type of $(D Throwable)s to catch. Defaults to $(D Exception)\n        T1           = The type of the expression.\n        T2           = The return type of the error handler.\n        expression   = The expression to run and return its result.\n        errorHandler = The handler to run if the expression throwed.\n\n    Examples:\n    --------------------\n    //Revert to a default value upon an error:\n    assert(\"x\".to!int().ifThrown(0) == 0);\n    --------------------\n\n    You can also chain multiple calls to ifThrown, each capturing errors from the\n    entire preceding expression.\n\n    Example:\n    --------------------\n    //Chaining multiple calls to ifThrown to attempt multiple things in a row:\n    string s=\"true\";\n    assert(s.to!int().\n            ifThrown(cast(int)s.to!double()).\n            ifThrown(cast(int)s.to!bool())\n            == 1);\n\n    //Respond differently to different types of errors\n    assert(enforce(\"x\".to!int() < 1).to!string()\n            .ifThrown!ConvException(\"not a number\")\n            .ifThrown!Exception(\"number too small\")\n            == \"not a number\");\n    --------------------\n\n    The expression and the errorHandler must have a common type they can both\n    be implicitly casted to, and that type will be the type of the compound\n    expression.\n\n    Examples:\n    --------------------\n    //null and new Object have a common type(Object).\n    static assert(is(typeof(null.ifThrown(new Object())) == Object));\n    static assert(is(typeof((new Object()).ifThrown(null)) == Object));\n\n    //1 and new Object do not have a common type.\n    static assert(!__traits(compiles, 1.ifThrown(new Object())));\n    static assert(!__traits(compiles, (new Object()).ifThrown(1)));\n    --------------------\n\n    If you need to use the actual thrown exception, you can use a delegate.\n    Example:\n    --------------------\n    //Use a lambda to get the thrown object.\n    assert(\"%s\".format().ifThrown!Exception(e => e.classinfo.name) == \"std.format.FormatException\");\n    --------------------\n",
				"name": "ifThrown"
			},
			{
				"kind": "template",
				"line": 1511,
				"members": [
					{
						"kind": "function",
						"line": 1511,
						"endchar": 1,
						"char": 21,
						"type": "CommonType!(T1, T2)(lazy scope T1 expression, scope T2 delegate(E) errorHandler)",
						"parameters": [
							{
								"storageClass": [
									"scope",
									"lazy"
								],
								"type": "T1",
								"name": "expression"
							},
							{
								"storageClass": [
									"scope"
								],
								"type": "T2 delegate(E)",
								"name": "errorHandler"
							}
						],
						"name": "ifThrown",
						"endline": 1523
					}
				],
				"char": 21,
				"parameters": [
					{
						"kind": "type",
						"deco": "C6object9Throwable",
						"name": "E"
					},
					{
						"kind": "type",
						"name": "T1"
					},
					{
						"kind": "type",
						"name": "T2"
					}
				],
				"comment": "ditto\n",
				"name": "ifThrown"
			},
			{
				"kind": "template",
				"line": 1527,
				"members": [
					{
						"kind": "function",
						"line": 1527,
						"endchar": 1,
						"char": 21,
						"type": "CommonType!(T1, T2)(lazy scope T1 expression, scope T2 delegate(Exception) errorHandler)",
						"parameters": [
							{
								"storageClass": [
									"scope",
									"lazy"
								],
								"type": "T1",
								"name": "expression"
							},
							{
								"storageClass": [
									"scope"
								],
								"type": "T2 delegate(Exception)",
								"name": "errorHandler"
							}
						],
						"name": "ifThrown",
						"endline": 1539
					}
				],
				"char": 21,
				"parameters": [
					{
						"kind": "type",
						"name": "T1"
					},
					{
						"kind": "type",
						"name": "T2"
					}
				],
				"comment": "ditto\n",
				"name": "ifThrown"
			},
			{
				"kind": "enum",
				"line": 1628,
				"members": [
					{
						"kind": "enum member",
						"line": 1630,
						"value": "1",
						"char": 5,
						"name": "front",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 1631,
						"value": "2",
						"char": 5,
						"name": "back",
						"comment": "Ditto\n"
					},
					{
						"kind": "enum member",
						"line": 1632,
						"value": "4",
						"char": 5,
						"name": "popFront",
						"comment": "Ditto\n"
					},
					{
						"kind": "enum member",
						"line": 1633,
						"value": "8",
						"char": 5,
						"name": "popBack",
						"comment": "Ditto\n"
					},
					{
						"kind": "enum member",
						"line": 1634,
						"value": "16",
						"char": 5,
						"name": "empty",
						"comment": "Ditto\n"
					},
					{
						"kind": "enum member",
						"line": 1635,
						"value": "32",
						"char": 5,
						"name": "save",
						"comment": "Ditto\n"
					},
					{
						"kind": "enum member",
						"line": 1636,
						"value": "64",
						"char": 5,
						"name": "length",
						"comment": "Ditto\n"
					},
					{
						"kind": "enum member",
						"line": 1637,
						"value": "128",
						"char": 5,
						"name": "opDollar",
						"comment": "Ditto\n"
					},
					{
						"kind": "enum member",
						"line": 1638,
						"value": "256",
						"char": 5,
						"name": "opIndex",
						"comment": "Ditto\n"
					},
					{
						"kind": "enum member",
						"line": 1639,
						"value": "512",
						"char": 5,
						"name": "opSlice",
						"comment": "Ditto\n"
					},
					{
						"kind": "enum member",
						"line": 1640,
						"value": "259",
						"char": 5,
						"name": "access",
						"comment": "Ditto\n"
					},
					{
						"kind": "enum member",
						"line": 1641,
						"value": "12",
						"char": 5,
						"name": "pop",
						"comment": "Ditto\n"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "RangePrimitive",
				"comment": " This $(D enum) is used to select the primitives of the range to handle by the\n  $(LREF handle) range wrapper. The values of the $(D enum) can be $(D OR)'d to\n  select multiple primitives to be handled.\n\n  $(D RangePrimitive.access) is a shortcut for the access primitives; $(D front),\n  $(D back) and $(D opIndex).\n\n  $(D RangePrimitive.pop) is a shortcut for the mutating primitives;\n  $(D popFront) and $(D popBack).\n"
			},
			{
				"kind": "template",
				"line": 1671,
				"constraint": "isInputRange!Range",
				"members": [
					{
						"kind": "function",
						"line": 1671,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "(Range input)",
						"parameters": [
							{
								"type": "Range",
								"name": "input"
							}
						],
						"name": "handle",
						"endline": 1900
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"deco": "C6object9Throwable",
						"name": "E"
					},
					{
						"kind": "value",
						"deco": "E3std9exception14RangePrimitive",
						"name": "primitivesToHandle"
					},
					{
						"kind": "alias",
						"name": "handler"
					},
					{
						"kind": "type",
						"name": "Range"
					}
				],
				"comment": " Handle exceptions thrown from range primitives.\n\nUse the $(LREF RangePrimitive) enum to specify which primitives to _handle.\nMultiple range primitives can be handled at once by using the $(D OR) operator\nor the pseudo-primitives $(D RangePrimitive.access) and $(D RangePrimitive.pop).\nAll handled primitives must have return types or values compatible with the\nuser-supplied handler.\n\nParams:\n    E = The type of $(D Throwable) to _handle.\n    primitivesToHandle = Set of range primitives to _handle.\n    handler = The callable that is called when a handled primitive throws a\n    $(D Throwable) of type $(D E). The handler must accept arguments of\n    the form $(D E, ref IRange) and its return value is used as the primitive's\n    return value whenever $(D E) is thrown. For $(D opIndex), the handler can\n    optionally recieve a third argument; the index that caused the exception.\n    input = The range to _handle.\n\nReturns: A wrapper $(D struct) that preserves the range interface of $(D input).\n\nopSlice:\nInfinite ranges with slicing support must return an instance of\n$(XREF range, Take) when sliced with a specific lower and upper\nbound (see $(XREF range_primitives, hasSlicing)); $(D handle) deals with this\nby $(D take)ing 0 from the return value of the handler function and returning\nthat when an exception is caught.\nExample:\n\n---\nimport std.algorithm : equal, map, splitter;\nimport std.conv : to, ConvException;\n\nauto s = \"12,1337z32,54,2,7,9,1z,6,8\";\n\n// The next line composition will throw when iterated\n// as some elements of the input do not convert to integer\nauto r = s.splitter(',').map!(a => to!int(a));\n\n// Substitute 0 for cases of ConvException\nauto h = r.handle!(ConvException, RangePrimitive.front, (e, r) => 0);\nassert(h.equal([12, 0, 54, 2, 7, 9, 0, 6, 8]));\n\n---\nExample:\n\n---\nimport std.algorithm : equal;\nimport std.range : retro;\nimport std.utf : UTFException;\n\nauto str = \"hello\\xFFworld\"; // 0xFF is an invalid UTF-8 code unit\n\nauto handled = str.handle!(UTFException, RangePrimitive.access,\n        (e, r) => ' '); // Replace invalid code points with spaces\n\nassert(handled.equal(\"hello world\")); // `front` is handled,\nassert(handled.retro.equal(\"dlrow olleh\")); // as well as `back`\n\n---\n",
				"name": "handle"
			}
		],
		"name": "std.exception",
		"comment": "    This module defines functions related to exceptions and general error\n    handling. It also defines functions intended to aid in unit testing.\n\n    Synopsis of some of std.exception's functions:\n    --------------------\n    string synopsis()\n    {\n        FILE* f = enforce(fopen(\"some/file\"));\n        // f is not null from here on\n        FILE* g = enforce!WriteException(fopen(\"some/other/file\", \"w\"));\n        // g is not null from here on\n\n        Exception e = collectException(write(g, readln(f)));\n        if (e)\n        {\n            ... an exception occurred...\n            ... We have the exception to play around with...\n        }\n\n        string msg = collectExceptionMsg(write(g, readln(f)));\n        if (msg)\n        {\n            ... an exception occurred...\n            ... We have the message from the exception but not the exception...\n        }\n\n        char[] line;\n        enforce(readln(f, line));\n        return assumeUnique(line);\n    }\n    --------------------\n\n    Macros:\n        WIKI = Phobos/StdException\n\n    Copyright: Copyright Andrei Alexandrescu 2008-, Jonathan M Davis 2011-.\n    License:   $(WEB boost.org/LICENSE_1_0.txt, Boost License 1.0)\n    Authors:   $(WEB erdani.org, Andrei Alexandrescu) and Jonathan M Davis\n    Source:    $(PHOBOSSRC std/_exception.d)\n\n"
	},
	{
		"kind": "module",
		"file": "../phobos/std/outbuffer.d",
		"members": [
			{
				"kind": "class",
				"line": 36,
				"members": [
					{
						"kind": "function",
						"line": 58,
						"deco": "FNaNbNfZAh",
						"endchar": 51,
						"char": 13,
						"name": "toBytes",
						"comment": " Convert to array of bytes.\n",
						"endline": 58
					},
					{
						"kind": "function",
						"line": 69,
						"deco": "FNaNbNemZv",
						"endchar": 9,
						"in": {
							"kind": "function",
							"line": 71,
							"deco": "FNaNbNeZv",
							"endchar": 9,
							"char": 9,
							"name": "__require",
							"endline": 71
						},
						"char": 10,
						"parameters": [
							{
								"deco": "m",
								"name": "nbytes"
							}
						],
						"out": {
							"kind": "function",
							"line": 75,
							"deco": "FNaNbNeZv",
							"endchar": 9,
							"char": 9,
							"name": "__ensure",
							"endline": 75
						},
						"name": "reserve",
						"comment": " Preallocate nbytes more to the size of the internal buffer.\n\n This is a\n speed optimization, a good guess at the maximum size of the resulting\n buffer will improve performance by eliminating reallocations and copying.\n",
						"originalType": "pure nothrow @trusted void(size_t nbytes)",
						"endline": 86
					},
					{
						"kind": "alias",
						"line": 91,
						"char": 17,
						"name": "put",
						"comment": " put enables OutBuffer to be used as an OutputRange.\n"
					},
					{
						"kind": "function",
						"line": 97,
						"deco": "FNaNbNfAxhZv",
						"endchar": 9,
						"char": 10,
						"parameters": [
							{
								"deco": "Axh",
								"name": "bytes"
							}
						],
						"name": "write",
						"comment": " Append data to the internal buffer.\n",
						"endline": 102
					},
					{
						"kind": "function",
						"line": 121,
						"deco": "FNaNbNfgZv",
						"endchar": 47,
						"char": 10,
						"parameters": [
							{
								"deco": "g",
								"name": "b"
							}
						],
						"name": "write",
						"comment": "ditto\n",
						"endline": 121
					},
					{
						"kind": "function",
						"line": 122,
						"deco": "FNaNbNfaZv",
						"endchar": 47,
						"char": 10,
						"parameters": [
							{
								"deco": "a",
								"name": "c"
							}
						],
						"name": "write",
						"comment": "ditto\n",
						"endline": 122
					},
					{
						"kind": "function",
						"line": 123,
						"deco": "FNaNbNfwZv",
						"endchar": 47,
						"char": 10,
						"parameters": [
							{
								"deco": "w",
								"name": "c"
							}
						],
						"name": "write",
						"comment": "ditto\n",
						"endline": 123
					},
					{
						"kind": "function",
						"line": 132,
						"deco": "FNaNbNfsZv",
						"endchar": 49,
						"char": 10,
						"parameters": [
							{
								"deco": "s",
								"name": "s"
							}
						],
						"name": "write",
						"comment": "ditto\n",
						"endline": 132
					},
					{
						"kind": "function",
						"line": 148,
						"deco": "FNaNbNfiZv",
						"endchar": 45,
						"char": 10,
						"parameters": [
							{
								"deco": "i",
								"name": "i"
							}
						],
						"name": "write",
						"comment": "ditto\n",
						"endline": 148
					},
					{
						"kind": "function",
						"line": 157,
						"deco": "FNaNbNflZv",
						"endchar": 47,
						"char": 10,
						"parameters": [
							{
								"deco": "l",
								"name": "l"
							}
						],
						"name": "write",
						"comment": "ditto\n",
						"endline": 157
					},
					{
						"kind": "function",
						"line": 194,
						"deco": "FNaNbNfmZv",
						"endchar": 5,
						"char": 10,
						"parameters": [
							{
								"deco": "m",
								"name": "nbytes"
							}
						],
						"name": "fill0",
						"comment": " Append nbytes of 0 to the internal buffer.\n",
						"originalType": "pure nothrow @safe void(size_t nbytes)",
						"endline": 199
					},
					{
						"kind": "function",
						"line": 205,
						"deco": "FNaNbNfmZv",
						"endchar": 5,
						"in": {
							"kind": "function",
							"line": 207,
							"deco": "FNaNbNfZv",
							"endchar": 5,
							"char": 5,
							"name": "__require",
							"endline": 207
						},
						"char": 10,
						"parameters": [
							{
								"deco": "m",
								"name": "alignsize"
							}
						],
						"out": {
							"kind": "function",
							"line": 211,
							"deco": "FNaNbNfZv",
							"endchar": 5,
							"char": 5,
							"name": "__ensure",
							"endline": 211
						},
						"name": "alignSize",
						"comment": " 0-fill to align on power of 2 boundary.\n",
						"originalType": "pure nothrow @safe void(size_t alignsize)",
						"endline": 219
					},
					{
						"kind": "function",
						"line": 225,
						"deco": "FNaNbNfZv",
						"endchar": 5,
						"char": 10,
						"name": "align2",
						"comment": " Optimize common special case alignSize(2)\n",
						"endline": 229
					},
					{
						"kind": "function",
						"line": 235,
						"deco": "FNaNbNfZv",
						"endchar": 5,
						"char": 10,
						"name": "align4",
						"comment": " Optimize common special case alignSize(4)\n",
						"endline": 241
					},
					{
						"kind": "function",
						"line": 247,
						"storageClass": [
							"override"
						],
						"deco": "xFNaNbNfZAya",
						"endchar": 5,
						"char": 21,
						"name": "toString",
						"comment": " Convert internal buffer to array of chars.\n",
						"endline": 251,
						"overrides": [
							"object.Object.toString"
						]
					},
					{
						"kind": "function",
						"line": 258,
						"deco": "FNbNeAyaPS4core4stdc6stdarg13__va_list_tagZv",
						"endchar": 5,
						"char": 10,
						"parameters": [
							{
								"deco": "Aya",
								"name": "format"
							},
							{
								"deco": "PS4core4stdc6stdarg13__va_list_tag",
								"name": "args"
							}
						],
						"name": "vprintf",
						"comment": " Append output of C's vprintf() to internal buffer.\n",
						"originalType": "nothrow @trusted void(string format, va_list args)",
						"endline": 307
					},
					{
						"kind": "function",
						"line": 313,
						"deco": "FNeAyaYv",
						"endchar": 5,
						"char": 10,
						"parameters": [
							{
								"deco": "Aya",
								"name": "format"
							}
						],
						"name": "printf",
						"comment": " Append output of C's printf() to internal buffer.\n",
						"endline": 319
					},
					{
						"kind": "template",
						"line": 332,
						"members": [
							{
								"kind": "function",
								"line": 332,
								"endchar": 5,
								"char": 10,
								"type": "void(in Char[] fmt, A args)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "Char[]",
										"name": "fmt"
									},
									{
										"type": "A",
										"name": "args"
									}
								],
								"name": "writef",
								"endline": 336
							}
						],
						"char": 10,
						"parameters": [
							{
								"kind": "type",
								"name": "Char"
							},
							{
								"kind": "tuple",
								"name": "A"
							}
						],
						"comment": " Formats and writes its arguments in text format to the OutBuffer.\n\n Params:\n  fmt = format string as described in $(XREF format, formattedWrite)\n  args = arguments to be formatted\n\n See_Also:\n  $(XREF stdio, writef);\n  $(XREF format, formattedWrite);\nExample:\n\n---\nOutBuffer b = new OutBuffer();\nb.writef(\"a%sb\", 16);\nassert(b.toString() == \"a16b\");\n\n\n---\n",
						"name": "writef"
					},
					{
						"kind": "template",
						"line": 358,
						"members": [
							{
								"kind": "function",
								"line": 358,
								"endchar": 5,
								"char": 10,
								"type": "void(in Char[] fmt, A args)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "Char[]",
										"name": "fmt"
									},
									{
										"type": "A",
										"name": "args"
									}
								],
								"name": "writefln",
								"endline": 363
							}
						],
						"char": 10,
						"parameters": [
							{
								"kind": "type",
								"name": "Char"
							},
							{
								"kind": "tuple",
								"name": "A"
							}
						],
						"comment": " Formats and writes its arguments in text format to the OutBuffer,\n followed by a newline.\n\n Params:\n  fmt = format string as described in $(XREF format, formattedWrite)\n  args = arguments to be formatted\n\n See_Also:\n  $(XREF stdio, writefln);\n  $(XREF format, formattedWrite);\nExample:\n\n---\nOutBuffer b = new OutBuffer();\nb.writefln(\"a%sb\", 16);\nassert(b.toString() == \"a16b\\n\");\n\n\n---\n",
						"name": "writefln"
					},
					{
						"kind": "function",
						"line": 378,
						"deco": "FNaNbNfmmZv",
						"endchar": 9,
						"in": {
							"kind": "function",
							"line": 380,
							"deco": "FNaNbNfZv",
							"endchar": 9,
							"char": 9,
							"name": "__require",
							"endline": 380
						},
						"char": 10,
						"parameters": [
							{
								"deco": "m",
								"name": "index"
							},
							{
								"deco": "m",
								"name": "nbytes"
							}
						],
						"name": "spread",
						"comment": " At offset index into buffer, create nbytes of space by shifting upwards\n all data past index.\n",
						"originalType": "pure nothrow @safe void(size_t index, size_t nbytes)",
						"endline": 394
					}
				],
				"char": 1,
				"name": "OutBuffer",
				"comment": " OutBuffer provides a way to build up an array of bytes out\n of raw data. It is useful for things like preparing an\n array of bytes to write out to a file.\n OutBuffer's byte order is the format native to the computer.\n To control the byte order (endianness), use a class derived\n from OutBuffer.\n OutBuffer's internal buffer is allocated with the GC.\n"
			}
		],
		"name": "std.outbuffer",
		"comment": "Serialize data to $(D ubyte) arrays.\n\n Macros:\n      WIKI = Phobos/StdOutbuffer\n\n Copyright: Copyright Digital Mars 2000 - 2015.\n License:   $(WEB www.boost.org/LICENSE_1_0.txt, Boost License 1.0).\n Authors:   $(WEB digitalmars.com, Walter Bright)\n Source:    $(PHOBOSSRC std/_outbuffer.d)\n"
	},
	{
		"kind": "module",
		"file": "../phobos/std/digest/ripemd.d",
		"members": [
			{
				"kind": "struct",
				"line": 102,
				"members": [
					{
						"kind": "function",
						"line": 457,
						"deco": "FNaNbNiNeMAxhXv",
						"endchar": 9,
						"char": 14,
						"parameters": [
							{
								"deco": "Axh",
								"storageClass": [
									"scope"
								],
								"name": "data"
							}
						],
						"name": "put",
						"comment": " Use this to feed the digest with data.\n Also implements the $(XREF range, OutputRange) interface for $(D ubyte) and\n $(D const(ubyte)[]).\n\n Examples:\n ----\n RIPEMD160 dig;\n dig.put(cast(ubyte)0); //single ubyte\n dig.put(cast(ubyte)0, cast(ubyte)0); //variadic\n ubyte[10] buf;\n dig.put(buf); //buffer\n ----\n",
						"endline": 491
					},
					{
						"kind": "function",
						"line": 509,
						"deco": "FNaNbNiNfZv",
						"endchar": 9,
						"char": 14,
						"name": "start",
						"comment": " Used to (re)initialize the RIPEMD160 digest.\n\n Note:\n For this RIPEMD160 Digest implementation calling start after default construction\n is not necessary. Calling start is only necessary to reset the Digest.\n\n Generic code which deals with different Digest types should always call start though.\n\n Examples:\n --------\n RIPEMD160 digest;\n //digest.start(); //Not necessary\n digest.put(0);\n --------\n",
						"endline": 512
					},
					{
						"kind": "function",
						"line": 528,
						"deco": "FNaNbNiNeZG20h",
						"endchar": 9,
						"char": 19,
						"name": "finish",
						"comment": " Returns the finished RIPEMD160 hash. This also calls $(LREF start) to\n reset the internal state.\n\n Examples:\n --------\n //Simple example\n RIPEMD160 hash;\n hash.start();\n hash.put(cast(ubyte)0);\n ubyte[20] result = hash.finish();\n assert(toHexString(result) == \"C81B94933420221A7AC004A90242D8B1D3E5070D\");\n --------\n",
						"endline": 557
					}
				],
				"char": 1,
				"name": "RIPEMD160",
				"comment": " Template API RIPEMD160 implementation.\n See $(D std.digest.digest) for differences between template and OOP API.\nExample:\n\n---\n//Simple example, hashing a string using ripemd160Of helper function\nubyte[20] hash = ripemd160Of(\"abc\");\n//Let's get a hash string\nassert(toHexString(hash) == \"8EB208F7E05D987A9B044A8E98C6B087F15A0BFC\");\n\n---\nExample:\n\n---\n//Using the basic API\nRIPEMD160 hash;\nhash.start();\nubyte[1024] data;\n//Initialize data here...\nhash.put(data);\nubyte[20] result = hash.finish();\n\n---\nExample:\n\n---\n//Let's use the template features:\nvoid doSomething(T)(ref T hash) if(isDigest!T)\n{\n    hash.put(cast(ubyte)0);\n}\nRIPEMD160 md;\nmd.start();\ndoSomething(md);\nassert(toHexString(md.finish()) == \"C81B94933420221A7AC004A90242D8B1D3E5070D\");\n\n---\nExample:\n\n---\n//Simple example\nRIPEMD160 hash;\nhash.start();\nhash.put(cast(ubyte)0);\nubyte[20] result = hash.finish();\nassert(toHexString(result) == \"C81B94933420221A7AC004A90242D8B1D3E5070D\");\n\n---\n"
			},
			{
				"kind": "template",
				"line": 666,
				"members": [
					{
						"kind": "function",
						"line": 666,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "(T data)",
						"parameters": [
							{
								"type": "T",
								"name": "data"
							}
						],
						"name": "ripemd160Of",
						"endline": 669
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "tuple",
						"name": "T"
					}
				],
				"comment": " This is a convenience alias for $(XREF digest.digest, digest) using the\n RIPEMD160 implementation.\nExample:\n\n---\nubyte[20] hash = ripemd160Of(\"abc\");\nassert(hash == digest!RIPEMD160(\"abc\"));\n\n---\n",
				"name": "ripemd160Of"
			},
			{
				"kind": "alias",
				"line": 685,
				"deco": "C3std6digest6digest49__T13WrapperDigestTS3std6digest6ripemd9RIPEMD160Z13WrapperDigest",
				"char": 1,
				"name": "RIPEMD160Digest",
				"comment": " OOP API RIPEMD160 implementation.\n See $(D std.digest.digest) for differences between template and OOP API.\n\n This is an alias for $(XREF digest.digest, WrapperDigest)!RIPEMD160, see\n $(XREF digest.digest, WrapperDigest) for more information.\nExample:\n\n---\n//Simple example, hashing a string using Digest.digest helper function\nauto md = new RIPEMD160Digest();\nubyte[] hash = md.digest(\"abc\");\n//Let's get a hash string\nassert(toHexString(hash) == \"8EB208F7E05D987A9B044A8E98C6B087F15A0BFC\");\n\n---\nExample:\n\n---\n//Let's use the OOP features:\nvoid test(Digest dig)\n{\n  dig.put(cast(ubyte)0);\n}\nauto md = new RIPEMD160Digest();\ntest(md);\n\n//Let's use a custom buffer:\nubyte[20] buf;\nubyte[] result = md.finish(buf[]);\nassert(toHexString(result) == \"C81B94933420221A7AC004A90242D8B1D3E5070D\");\n\n---\n"
			}
		],
		"name": "std.digest.ripemd",
		"comment": " Computes RIPEMD-160 hashes of arbitrary data. RIPEMD-160 hashes are 20 byte quantities\n that are like a checksum or CRC, but are more robust.\n\n$(SCRIPT inhibitQuickIndex = 1;)\n\n$(DIVC quickindex,\n$(BOOKTABLE ,\n$(TR $(TH Category) $(TH Functions)\n)\n$(TR $(TDNW Template API) $(TD $(MYREF RIPEMD160)\n)\n)\n$(TR $(TDNW OOP API) $(TD $(MYREF RIPEMD160Digest))\n)\n$(TR $(TDNW Helpers) $(TD $(MYREF ripemd160Of))\n)\n)\n)\n\n This module conforms to the APIs defined in $(D std.digest.digest). To understand the\n differences between the template and the OOP API, see $(D std.digest.digest).\n\n This module publicly imports $(D std.digest.digest) and can be used as a stand-alone\n module.\n\n License:   $(WEB www.boost.org/LICENSE_1_0.txt, Boost License 1.0).\n\n CTFE:\n Digests do not work in CTFE\n\n Authors:\n Kai Nacke $(BR)\n The algorithm was designed by Hans Dobbertin, Antoon Bosselaers, and Bart Preneel. $(BR)\n The D implementation is a direct translation of the ANSI C implementation by Antoon Bosselaers.\n\n References:\n $(UL\n $(LI $(LINK2 http://homes.esat.kuleuven.be/~bosselae/ripemd160.html, The hash function RIPEMD-160))\n $(LI $(LINK2 http://en.wikipedia.org/wiki/RIPEMD-160, Wikipedia on RIPEMD-160))\n )\n\n Source: $(PHOBOSSRC std/digest/_ripemd.d)\n\n Macros:\n WIKI = Phobos/StdRipemd\nExample:\n\n---\n//Template API\nimport std.digest.md;\n\nubyte[20] hash = ripemd160Of(\"abc\");\nassert(toHexString(hash) == \"8EB208F7E05D987A9B044A8E98C6B087F15A0BFC\");\n\n//Feeding data\nubyte[1024] data;\nRIPEMD160 md;\nmd.start();\nmd.put(data[]);\nmd.start(); //Start again\nmd.put(data[]);\nhash = md.finish();\n\n---\nExample:\n\n---\n//OOP API\nimport std.digest.md;\n\nauto md = new RIPEMD160Digest();\nubyte[] hash = md.digest(\"abc\");\nassert(toHexString(hash) == \"8EB208F7E05D987A9B044A8E98C6B087F15A0BFC\");\n\n//Feeding data\nubyte[1024] data;\nmd.put(data[]);\nmd.reset(); //Start again\nmd.put(data[]);\nhash = md.finish();\n\n---\n"
	},
	{
		"kind": "module",
		"file": "../phobos/std/digest/crc.d",
		"members": [
			{
				"kind": "struct",
				"line": 150,
				"members": [
					{
						"kind": "function",
						"line": 162,
						"deco": "FNaNbNiNeMAxhXv",
						"endchar": 9,
						"char": 14,
						"parameters": [
							{
								"deco": "Axh",
								"storageClass": [
									"scope"
								],
								"name": "data"
							}
						],
						"name": "put",
						"comment": " Use this to feed the digest with data.\n Also implements the $(XREF range, OutputRange) interface for $(D ubyte) and\n $(D const(ubyte)[]).\nExample:\n\n---\nCRC32 dig;\ndig.put(cast(ubyte)0); //single ubyte\ndig.put(cast(ubyte)0, cast(ubyte)0); //variadic\nubyte[10] buf;\ndig.put(buf); //buffer\n\n\n---\n",
						"endline": 166
					},
					{
						"kind": "function",
						"line": 186,
						"deco": "FNaNbNiNfZv",
						"endchar": 9,
						"char": 14,
						"name": "start",
						"comment": " Used to initialize the CRC32 digest.\n\n Note:\n For this CRC32 Digest implementation calling start after default construction\n is not necessary. Calling start is only necessary to reset the Digest.\n\n Generic code which deals with different Digest types should always call start though.\nExample:\n\n---\nCRC32 digest;\n//digest.start(); //Not necessary\ndigest.put(0);\n\n\n---\n",
						"endline": 189
					},
					{
						"kind": "function",
						"line": 202,
						"deco": "FNaNbNiNfZG4h",
						"endchar": 9,
						"char": 18,
						"name": "finish",
						"comment": " Returns the finished CRC32 hash. This also calls $(LREF start) to\n reset the internal state.\nExample:\n\n---\n//Simple example\nCRC32 hash;\nhash.put(cast(ubyte)0);\nubyte[4] result = hash.finish();\n\n\n---\n",
						"endline": 207
					},
					{
						"kind": "function",
						"line": 221,
						"deco": "xFNaNbNiNfZG4h",
						"endchar": 9,
						"char": 18,
						"name": "peek",
						"comment": " Works like $(D finish) but does not reset the internal state, so it's possible\n to continue putting data into this CRC32 after a call to peek.\n",
						"endline": 226
					}
				],
				"char": 1,
				"name": "CRC32",
				"comment": " Template API CRC32 implementation.\n See $(D std.digest.digest) for differences between template and OOP API.\nExample:\n\n---\n//Simple example, hashing a string using crc32Of helper function\nubyte[4] hash = crc32Of(\"abc\");\n//Let's get a hash string\nassert(crcHexString(hash) == \"352441C2\");\n\n---\nExample:\n\n---\n//Using the basic API\nCRC32 hash;\nubyte[1024] data;\n//Initialize data here...\nhash.put(data);\nubyte[4] result = hash.finish();\n\n---\nExample:\n\n---\n//Let's use the template features:\n//Note: When passing a CRC32 to a function, it must be passed by reference!\nvoid doSomething(T)(ref T hash) if(isDigest!T)\n{\n  hash.put(cast(ubyte)0);\n}\nCRC32 crc;\ncrc.start();\ndoSomething(crc);\nassert(crcHexString(crc.finish()) == \"D202EF8D\");\n\n---\n"
			},
			{
				"kind": "template",
				"line": 320,
				"members": [
					{
						"kind": "function",
						"line": 320,
						"endchar": 1,
						"char": 10,
						"type": "ubyte[4](T data)",
						"parameters": [
							{
								"type": "T",
								"name": "data"
							}
						],
						"name": "crc32Of",
						"endline": 323
					}
				],
				"char": 10,
				"parameters": [
					{
						"kind": "tuple",
						"name": "T"
					}
				],
				"comment": " This is a convenience alias for $(XREF digest.digest, digest) using the\n CRC32 implementation.\n\n Params:\n      data = $(D InputRange) of $(D ElementType) implicitly convertible to $(D ubyte), $(D ubyte[]) or $(D ubyte[num]\n             or one or more arrays of any type.\n\n Returns:\n      CRC32 of data\nExample:\n\n---\nubyte[] data = [4,5,7,25];\nassert(data.crc32Of == [167, 180, 199, 131]);\n\nimport std.utf : byChar;\nassert(\"hello\"d.byChar.crc32Of == [134, 166, 16, 54]);\n\nubyte[4] hash = \"abc\".crc32Of();\nassert(hash == digest!CRC32(\"ab\", \"c\"));\n\nimport std.range : iota;\nenum ubyte S = 5, F = 66;\nassert(iota(S, F).crc32Of == [59, 140, 234, 154]);\n\n---\n",
				"name": "crc32Of"
			},
			{
				"kind": "alias",
				"line": 346,
				"char": 8,
				"name": "crcHexString",
				"comment": " This is a convenience alias for $(XREF digest.digest, toHexString) producing the usual\n CRC32 string output.\n"
			},
			{
				"kind": "alias",
				"line": 348,
				"char": 8,
				"name": "crcHexString",
				"comment": "ditto\n"
			},
			{
				"kind": "alias",
				"line": 358,
				"deco": "C3std6digest6digest42__T13WrapperDigestTS3std6digest3crc5CRC32Z13WrapperDigest",
				"char": 1,
				"name": "CRC32Digest",
				"comment": " OOP API CRC32 implementation.\n See $(D std.digest.digest) for differences between template and OOP API.\n\n This is an alias for $(XREF digest.digest, WrapperDigest)!CRC32, see\n $(XREF digest.digest, WrapperDigest) for more information.\nExample:\n\n---\n//Simple example, hashing a string using Digest.digest helper function\nauto crc = new CRC32Digest();\nubyte[] hash = crc.digest(\"abc\");\n//Let's get a hash string\nassert(crcHexString(hash) == \"352441C2\");\n\n---\nExample:\n\n---\n//Let's use the OOP features:\nvoid test(Digest dig)\n{\n dig.put(cast(ubyte)0);\n}\nauto crc = new CRC32Digest();\ntest(crc);\n\n//Let's use a custom buffer:\nubyte[4] buf;\nubyte[] result = crc.finish(buf[]);\nassert(crcHexString(result) == \"D202EF8D\");\n\n---\nExample:\n\n---\n//Simple example\nauto hash = new CRC32Digest();\nhash.put(cast(ubyte)0);\nubyte[] result = hash.finish();\n\n---\nExample:\n\n---\n//using a supplied buffer\nubyte[4] buf;\nauto hash = new CRC32Digest();\nhash.put(cast(ubyte)0);\nubyte[] result = hash.finish(buf[]);\n//The result is now in result (and in buf. If you pass a buffer which is bigger than\n//necessary, result will have the correct length, but buf will still have it's original\n//length)\n\n---\n"
			}
		],
		"name": "std.digest.crc",
		"comment": "Cyclic Redundancy Check (32-bit) implementation.\n\n$(SCRIPT inhibitQuickIndex = 1;)\n\n$(DIVC quickindex,\n$(BOOKTABLE ,\n$(TR $(TH Category) $(TH Functions)\n)\n$(TR $(TDNW Template API) $(TD $(MYREF CRC32)\n)\n)\n$(TR $(TDNW OOP API) $(TD $(MYREF CRC32Digest))\n)\n$(TR $(TDNW Helpers) $(TD $(MYREF crcHexString) $(MYREF crc32Of))\n)\n)\n)\n\n\n This module conforms to the APIs defined in $(D std.digest.digest). To understand the\n differences between the template and the OOP API, see $(D std.digest.digest).\n\n This module publicly imports $(D std.digest.digest) and can be used as a stand-alone\n module.\n\n Note:\n CRCs are usually printed with the MSB first. When using $(XREF digest.digest, toHexString) the result\n will be in an unexpected order. Use $(XREF digest.digest, toHexString)s optional order parameter\n to specify decreasing order for the correct result. The $(LREF crcHexString) alias can also\n be used for this purpose.\n\n License:   $(WEB www.boost.org/LICENSE_1_0.txt, Boost License 1.0).\n\n Authors:   Pavel \"EvilOne\" Minayev, Alex Rønne Petersen, Johannes Pfau\n\n References:\n      $(LINK2 http://en.wikipedia.org/wiki/Cyclic_redundancy_check, Wikipedia on CRC)\n\n Source: $(PHOBOSSRC std/digest/_crc.d)\n\n Macros:\n WIKI = Phobos/StdUtilDigestCRC32\n\n Standards:\n Implements the 'common' IEEE CRC32 variant\n (LSB-first order, Initial value uint.max, complement result)\n\n CTFE:\n Digests do not work in CTFE\nExample:\n\n---\n//Template API\nimport std.digest.crc;\n\nubyte[4] hash = crc32Of(\"The quick brown fox jumps over the lazy dog\");\nassert(crcHexString(hash) == \"414FA339\");\n\n//Feeding data\nubyte[1024] data;\nCRC32 crc;\ncrc.put(data[]);\ncrc.start(); //Start again\ncrc.put(data[]);\nhash = crc.finish();\n\n---\nExample:\n\n---\n//OOP API\nimport std.digest.crc;\n\nauto crc = new CRC32Digest();\nubyte[] hash = crc.digest(\"The quick brown fox jumps over the lazy dog\");\nassert(crcHexString(hash) == \"414FA339\"); //352441c2\n\n//Feeding data\nubyte[1024] data;\ncrc.put(data[]);\ncrc.reset(); //Start again\ncrc.put(data[]);\nhash = crc.finish();\n\n---\n"
	},
	{
		"kind": "module",
		"file": "../phobos/std/digest/md.d",
		"members": [
			{
				"kind": "struct",
				"line": 98,
				"members": [
					{
						"kind": "function",
						"line": 301,
						"deco": "FNaNbNiNeMAxhXv",
						"endchar": 9,
						"char": 14,
						"parameters": [
							{
								"deco": "Axh",
								"storageClass": [
									"scope"
								],
								"name": "data"
							}
						],
						"name": "put",
						"comment": " Use this to feed the digest with data.\n Also implements the $(XREF range, OutputRange) interface for $(D ubyte) and\n $(D const(ubyte)[]).\n\n Examples:\n ----\n MD5 dig;\n dig.put(cast(ubyte)0); //single ubyte\n dig.put(cast(ubyte)0, cast(ubyte)0); //variadic\n ubyte[10] buf;\n dig.put(buf); //buffer\n ----\n",
						"endline": 335
					},
					{
						"kind": "function",
						"line": 353,
						"deco": "FNaNbNiNfZv",
						"endchar": 9,
						"char": 14,
						"name": "start",
						"comment": " Used to (re)initialize the MD5 digest.\n\n Note:\n For this MD5 Digest implementation calling start after default construction\n is not necessary. Calling start is only necessary to reset the Digest.\n\n Generic code which deals with different Digest types should always call start though.\n\n Examples:\n --------\n MD5 digest;\n //digest.start(); //Not necessary\n digest.put(0);\n --------\n",
						"endline": 356
					},
					{
						"kind": "function",
						"line": 362,
						"deco": "FNaNbNiNeZG16h",
						"endchar": 9,
						"char": 19,
						"name": "finish",
						"comment": " Returns the finished MD5 hash. This also calls $(LREF start) to\n reset the internal state.\nExample:\n\n---\n//Simple example\nMD5 hash;\nhash.start();\nhash.put(cast(ubyte)0);\nubyte[16] result = hash.finish();\n}\n\n---\n",
						"endline": 390
					}
				],
				"char": 1,
				"name": "MD5",
				"comment": " Template API MD5 implementation.\n See $(D std.digest.digest) for differences between template and OOP API.\nExample:\n\n---\n//Simple example, hashing a string using md5Of helper function\nubyte[16] hash = md5Of(\"abc\");\n//Let's get a hash string\nassert(toHexString(hash) == \"900150983CD24FB0D6963F7D28E17F72\");\n\n---\nExample:\n\n---\n//Using the basic API\nMD5 hash;\nhash.start();\nubyte[1024] data;\n//Initialize data here...\nhash.put(data);\nubyte[16] result = hash.finish();\n\n---\nExample:\n\n---\n//Let's use the template features:\nvoid doSomething(T)(ref T hash) if(isDigest!T)\n{\n    hash.put(cast(ubyte)0);\n}\nMD5 md5;\nmd5.start();\ndoSomething(md5);\nassert(toHexString(md5.finish()) == \"93B885ADFE0DA089CDF634904FD59F71\");\n\n---\n"
			},
			{
				"kind": "template",
				"line": 497,
				"members": [
					{
						"kind": "function",
						"line": 497,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "(T data)",
						"parameters": [
							{
								"type": "T",
								"name": "data"
							}
						],
						"name": "md5Of",
						"endline": 500
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "tuple",
						"name": "T"
					}
				],
				"comment": " This is a convenience alias for $(XREF digest.digest, digest) using the\n MD5 implementation.\nExample:\n\n---\nubyte[16] hash = md5Of(\"abc\");\nassert(hash == digest!MD5(\"abc\"));\n\n---\n",
				"name": "md5Of"
			},
			{
				"kind": "alias",
				"line": 516,
				"deco": "C3std6digest6digest39__T13WrapperDigestTS3std6digest2md3MD5Z13WrapperDigest",
				"char": 1,
				"name": "MD5Digest",
				"comment": " OOP API MD5 implementation.\n See $(D std.digest.digest) for differences between template and OOP API.\n\n This is an alias for $(XREF digest.digest, WrapperDigest)!MD5, see\n $(XREF digest.digest, WrapperDigest) for more information.\nExample:\n\n---\n//Simple example, hashing a string using Digest.digest helper function\nauto md5 = new MD5Digest();\nubyte[] hash = md5.digest(\"abc\");\n//Let's get a hash string\nassert(toHexString(hash) == \"900150983CD24FB0D6963F7D28E17F72\");\n\n---\nExample:\n\n---\n//Let's use the OOP features:\nvoid test(Digest dig)\n{\n dig.put(cast(ubyte)0);\n}\nauto md5 = new MD5Digest();\ntest(md5);\n\n//Let's use a custom buffer:\nubyte[16] buf;\nubyte[] result = md5.finish(buf[]);\nassert(toHexString(result) == \"93B885ADFE0DA089CDF634904FD59F71\");\n\n---\n"
			}
		],
		"name": "std.digest.md",
		"comment": " Computes MD5 hashes of arbitrary data. MD5 hashes are 16 byte quantities that are like a\n checksum or CRC, but are more robust.\n\n$(SCRIPT inhibitQuickIndex = 1;)\n\n$(DIVC quickindex,\n$(BOOKTABLE ,\n$(TR $(TH Category) $(TH Functions)\n)\n$(TR $(TDNW Template API) $(TD $(MYREF MD5)\n)\n)\n$(TR $(TDNW OOP API) $(TD $(MYREF MD5Digest))\n)\n$(TR $(TDNW Helpers) $(TD $(MYREF md5Of))\n)\n)\n)\n\n This module conforms to the APIs defined in $(D std.digest.digest). To understand the\n differences between the template and the OOP API, see $(D std.digest.digest).\n\n This module publicly imports $(D std.digest.digest) and can be used as a stand-alone\n module.\n\n License:   $(WEB www.boost.org/LICENSE_1_0.txt, Boost License 1.0).\n\n CTFE:\n Digests do not work in CTFE\n\n Authors:\n Piotr Szturmaj, Kai Nacke, Johannes Pfau $(BR)\n The routines and algorithms are derived from the $(I RSA Data Security, Inc. MD5 Message-Digest Algorithm).\n\n References:\n      $(LINK2 http://en.wikipedia.org/wiki/Md5, Wikipedia on MD5)\n\n Source: $(PHOBOSSRC std/digest/_md.d)\n\n Macros:\n WIKI = Phobos/StdMd5\nExample:\n\n---\n//Template API\nimport std.digest.md;\n\n//Feeding data\nubyte[1024] data;\nMD5 md5;\nmd5.start();\nmd5.put(data[]);\nmd5.start(); //Start again\nmd5.put(data[]);\nauto hash = md5.finish();\n\n---\nExample:\n\n---\n//OOP API\nimport std.digest.md;\n\nauto md5 = new MD5Digest();\nubyte[] hash = md5.digest(\"abc\");\nassert(toHexString(hash) == \"900150983CD24FB0D6963F7D28E17F72\");\n\n//Feeding data\nubyte[1024] data;\nmd5.put(data[]);\nmd5.reset(); //Start again\nmd5.put(data[]);\nhash = md5.finish();\n\n---\n"
	},
	{
		"kind": "module",
		"file": "../phobos/std/digest/digest.d",
		"members": [
			{
				"kind": "struct",
				"line": 200,
				"members": [
					{
						"kind": "function",
						"line": 217,
						"deco": "FNeMAxhXv",
						"endchar": 13,
						"char": 27,
						"parameters": [
							{
								"deco": "Axh",
								"storageClass": [
									"scope"
								],
								"name": "data"
							}
						],
						"name": "put",
						"comment": " Use this to feed the digest with data.\n Also implements the $(XREF range, OutputRange) interface for $(D ubyte) and\n $(D const(ubyte)[]).\n The following usages of $(D put) must work for any type which passes $(LREF isDigest):\n Examples:\n ----\n ExampleDigest dig;\n dig.put(cast(ubyte)0); //single ubyte\n dig.put(cast(ubyte)0, cast(ubyte)0); //variadic\n ubyte[10] buf;\n dig.put(buf); //buffer\n ----\n",
						"endline": 220
					},
					{
						"kind": "function",
						"line": 227,
						"deco": "FNeZv",
						"endchar": 13,
						"char": 27,
						"name": "start",
						"comment": " This function is used to (re)initialize the digest.\n It must be called before using the digest and it also works as a 'reset' function\n if the digest has already processed data.\n",
						"endline": 230
					},
					{
						"kind": "function",
						"line": 245,
						"deco": "FNeZG16h",
						"endchar": 13,
						"char": 32,
						"name": "finish",
						"comment": " The finish function returns the final hash sum and resets the Digest.\n\n Note:\n The actual type returned by finish depends on the digest implementation.\n $(D ubyte[16]) is just used as an example. It is guaranteed that the type is a\n static array of ubytes.\n\n $(UL\n $(LI Use $(LREF DigestType) to obtain the actual return type.)\n $(LI Use $(LREF digestLength) to obtain the length of the ubyte array.)\n )\n",
						"endline": 248
					}
				],
				"char": 5,
				"name": "ExampleDigest",
				"comment": " This documents the general structure of a Digest in the template API.\n All digest implementations should implement the following members and therefore pass\n the $(LREF isDigest) test.\n\n Note:\n $(UL\n $(LI A digest must be a struct (value type) to pass the $(LREF isDigest) test.)\n $(LI A digest passing the $(LREF isDigest) test is always an $(D OutputRange))\n )\nExample:\n\n---\n//Using the OutputRange feature\nimport std.algorithm : copy;\nimport std.range : repeat;\nimport std.digest.md;\n\nauto oneMillionRange = repeat!ubyte(cast(ubyte)'a', 1000000);\nauto ctx = makeDigest!MD5();\ncopy(oneMillionRange, &ctx); //Note: You must pass a pointer to copy!\nassert(ctx.finish().toHexString() == \"7707D6AE4E027C70EEA2A935C2296F21\");\n\n---\n"
			},
			{
				"kind": "template",
				"line": 279,
				"members": [
					{
						"kind": "variable",
						"line": 282,
						"init": "isOutputRange!(T, const(ubyte)[]) && isOutputRange!(T, ubyte) && is(T == struct) && is(typeof(()\n{\nT dig = void;\ndig.put(cast(ubyte)0, cast(ubyte)0);\ndig.start();\nauto value = dig.finish();\n}\n))",
						"storageClass": [
							"enum"
						],
						"deco": "b",
						"char": 15,
						"name": "isDigest"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": " Use this to check if a type is a digest. See $(LREF ExampleDigest) to see what\n a type must provide to pass this check.\n\n Note:\n This is very useful as a template constraint (see examples)\n\n BUGS:\n $(UL\n $(LI Does not yet verify that put takes scope parameters.)\n $(LI Should check that finish() returns a ubyte[num] array)\n )\nExample:\n\n---\nimport std.digest.crc;\nstatic assert(isDigest!CRC32);\n\n---\nExample:\n\n---\nimport std.digest.crc;\nvoid myFunction(T)() if(isDigest!T)\n{\n    T dig;\n    dig.start();\n    auto result = dig.finish();\n}\nmyFunction!CRC32();\n\n---\n",
				"name": "isDigest"
			},
			{
				"kind": "template",
				"line": 315,
				"members": [],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": " Use this template to get the type which is returned by a digest's $(LREF finish) method.\nExample:\n\n---\nimport std.digest.crc;\nassert(is(DigestType!(CRC32) == ubyte[4]));\n\n---\nExample:\n\n---\nimport std.digest.crc;\nCRC32 dig;\ndig.start();\nDigestType!CRC32 result = dig.finish();\n\n---\n",
				"name": "DigestType"
			},
			{
				"kind": "template",
				"line": 356,
				"members": [
					{
						"kind": "variable",
						"line": 358,
						"init": "isDigest!T && is(typeof(()\n{\nT dig = void;\nDigestType!T val = dig.peek();\n}\n))",
						"storageClass": [
							"enum"
						],
						"deco": "b",
						"char": 15,
						"name": "hasPeek"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": " Used to check if a digest supports the $(D peek) method.\n Peek has exactly the same function signatures as finish, but it doesn't reset\n the digest's internal state.\n\n Note:\n $(UL\n $(LI This is very useful as a template constraint (see examples))\n $(LI This also checks if T passes $(LREF isDigest))\n )\nExample:\n\n---\nimport std.digest.crc, std.digest.md;\nassert(!hasPeek!(MD5));\nassert(hasPeek!CRC32);\n\n---\nExample:\n\n---\nimport std.digest.crc;\nvoid myFunction(T)() if(hasPeek!T)\n{\n    T dig;\n    dig.start();\n    auto result = dig.peek();\n}\nmyFunction!CRC32();\n\n---\n",
				"name": "hasPeek"
			},
			{
				"kind": "template",
				"line": 405,
				"constraint": "!isArray!Range && isDigestibleRange!Range",
				"members": [
					{
						"kind": "function",
						"line": 405,
						"endchar": 1,
						"char": 17,
						"type": "DigestType!Hash(auto ref Range range)",
						"parameters": [
							{
								"storageClass": [
									"auto",
									"ref"
								],
								"type": "Range",
								"name": "range"
							}
						],
						"name": "digest",
						"endline": 413
					}
				],
				"char": 17,
				"parameters": [
					{
						"kind": "type",
						"name": "Hash"
					},
					{
						"kind": "type",
						"name": "Range"
					}
				],
				"comment": " This is a convenience function to calculate a hash using the template API.\n Every digest passing the $(LREF isDigest) test can be used with this function.\n\n Params:\n  range= an $(D InputRange) with $(D ElementType) $(D ubyte), $(D ubyte[]) or $(D ubyte[num])\nExample:\n\n---\nimport std.digest.md;\nimport std.range : repeat;\nauto testRange = repeat!ubyte(cast(ubyte)'a', 100);\nauto md5 = digest!MD5(testRange);\n\n---\n",
				"name": "digest"
			},
			{
				"kind": "template",
				"line": 430,
				"constraint": "allSatisfy!(isArray, typeof(data))",
				"members": [
					{
						"kind": "function",
						"line": 430,
						"endchar": 1,
						"char": 17,
						"type": "DigestType!Hash(scope const T data)",
						"parameters": [
							{
								"storageClass": [
									"scope",
									"const"
								],
								"type": "T",
								"name": "data"
							}
						],
						"name": "digest",
						"endline": 437
					}
				],
				"char": 17,
				"parameters": [
					{
						"kind": "type",
						"name": "Hash"
					},
					{
						"kind": "tuple",
						"name": "T"
					}
				],
				"comment": " This overload of the digest function handles arrays.\n\n Params:\n  data= one or more arrays of any type\nExample:\n\n---\nimport std.digest.md, std.digest.sha, std.digest.crc;\nauto md5   = digest!MD5(  \"The quick brown fox jumps over the lazy dog\");\nauto sha1  = digest!SHA1( \"The quick brown fox jumps over the lazy dog\");\nauto crc32 = digest!CRC32(\"The quick brown fox jumps over the lazy dog\");\nassert(toHexString(crc32) == \"39A34F41\");\n\n---\nExample:\n\n---\nimport std.digest.crc;\nauto crc32 = digest!CRC32(\"The quick \", \"brown \", \"fox jumps over the lazy dog\");\nassert(toHexString(crc32) == \"39A34F41\");\n\n---\n",
				"name": "digest"
			},
			{
				"kind": "template",
				"line": 466,
				"constraint": "!isArray!Range && isDigestibleRange!Range",
				"members": [
					{
						"kind": "function",
						"line": 466,
						"endchar": 1,
						"char": 29,
						"type": "char[digestLength!Hash * 2](ref Range range)",
						"parameters": [
							{
								"storageClass": [
									"ref"
								],
								"type": "Range",
								"name": "range"
							}
						],
						"name": "hexDigest",
						"endline": 470
					}
				],
				"char": 29,
				"parameters": [
					{
						"kind": "type",
						"name": "Hash"
					},
					{
						"kind": "value",
						"defaultValue": "Order.increasing",
						"deco": "E3std6digest6digest5Order",
						"name": "order"
					},
					{
						"kind": "type",
						"name": "Range"
					}
				],
				"comment": " This is a convenience function similar to $(LREF digest), but it returns the string\n representation of the hash. Every digest passing the $(LREF isDigest) test can be used with this\n function.\n\n Params:\n  order= the order in which the bytes are processed (see $(LREF toHexString))\n  range= an $(D InputRange) with $(D ElementType) $(D ubyte), $(D ubyte[]) or $(D ubyte[num])\nExample:\n\n---\nimport std.digest.md;\nimport std.range : repeat;\nauto testRange = repeat!ubyte(cast(ubyte)'a', 100);\nassert(hexDigest!MD5(testRange) == \"36A92CC94A9E0FA21F625F8BFB007ADF\");\n\n---\n",
				"name": "hexDigest"
			},
			{
				"kind": "template",
				"line": 488,
				"constraint": "allSatisfy!(isArray, typeof(data))",
				"members": [
					{
						"kind": "function",
						"line": 488,
						"endchar": 1,
						"char": 29,
						"type": "char[digestLength!Hash * 2](scope const T data)",
						"parameters": [
							{
								"storageClass": [
									"scope",
									"const"
								],
								"type": "T",
								"name": "data"
							}
						],
						"name": "hexDigest",
						"endline": 492
					}
				],
				"char": 29,
				"parameters": [
					{
						"kind": "type",
						"name": "Hash"
					},
					{
						"kind": "value",
						"defaultValue": "Order.increasing",
						"deco": "E3std6digest6digest5Order",
						"name": "order"
					},
					{
						"kind": "tuple",
						"name": "T"
					}
				],
				"comment": " This overload of the hexDigest function handles arrays.\n\n Params:\n  order= the order in which the bytes are processed (see $(LREF toHexString))\n  data= one or more arrays of any type\nExample:\n\n---\nimport std.digest.crc;\nassert(hexDigest!(CRC32, Order.decreasing)(\"The quick brown fox jumps over the lazy dog\") == \"414FA339\");\n\n---\nExample:\n\n---\nimport std.digest.crc;\nassert(hexDigest!(CRC32, Order.decreasing)(\"The quick \", \"brown \", \"fox jumps over the lazy dog\") == \"414FA339\");\n\n---\n",
				"name": "hexDigest"
			},
			{
				"kind": "template",
				"line": 511,
				"members": [
					{
						"kind": "function",
						"line": 511,
						"endchar": 1,
						"char": 6,
						"type": "Hash()",
						"name": "makeDigest",
						"endline": 516
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "Hash"
					}
				],
				"comment": " This is a convenience function which returns an initialized digest, so it's not necessary to call\n start manually.\nExample:\n\n---\nimport std.digest.md;\nauto md5 = makeDigest!MD5();\nmd5.put(0);\nassert(toHexString(md5.finish()) == \"93B885ADFE0DA089CDF634904FD59F71\");\n\n---\n",
				"name": "makeDigest"
			},
			{
				"kind": "interface",
				"line": 538,
				"members": [
					{
						"kind": "function",
						"line": 557,
						"storageClass": [
							"abstract"
						],
						"deco": "FNbNeMAxhXv",
						"char": 31,
						"parameters": [
							{
								"deco": "Axh",
								"storageClass": [
									"scope"
								],
								"name": "data"
							}
						],
						"name": "put",
						"comment": " Use this to feed the digest with data.\n Also implements the $(XREF range, OutputRange) interface for $(D ubyte) and\n $(D const(ubyte)[]).\n\n Examples:\n ----\n void test(Digest dig)\n {\n     dig.put(cast(ubyte)0); //single ubyte\n     dig.put(cast(ubyte)0, cast(ubyte)0); //variadic\n     ubyte[10] buf;\n     dig.put(buf); //buffer\n }\n ----\n"
					},
					{
						"kind": "function",
						"line": 565,
						"storageClass": [
							"abstract"
						],
						"deco": "FNbNeZv",
						"char": 31,
						"name": "reset",
						"comment": " Resets the internal state of the digest.\n Note:\n $(LREF finish) calls this internally, so it's not necessary to call\n $(D reset) manually after a call to $(LREF finish).\n"
					},
					{
						"kind": "function",
						"line": 571,
						"storageClass": [
							"abstract"
						],
						"deco": "xFNbNdNeZm",
						"char": 43,
						"name": "length",
						"comment": " This is the length in bytes of the hash value which is returned by $(LREF finish).\n It's also the required size of a buffer passed to $(LREF finish).\n",
						"originalType": "const nothrow @property @trusted size_t()"
					},
					{
						"kind": "function",
						"line": 577,
						"storageClass": [
							"abstract"
						],
						"deco": "FNbNeZAh",
						"char": 34,
						"name": "finish",
						"comment": " The finish function returns the hash value. It takes an optional buffer to copy the data\n into. If a buffer is passed, it must be at least $(LREF length) bytes big.\n"
					},
					{
						"kind": "function",
						"line": 579,
						"storageClass": [
							"abstract"
						],
						"deco": "FNbMAhZAh",
						"char": 25,
						"parameters": [
							{
								"deco": "Ah",
								"storageClass": [
									"scope"
								],
								"name": "buf"
							}
						],
						"name": "finish",
						"comment": "ditto\n"
					},
					{
						"kind": "function",
						"line": 589,
						"storageClass": [
							"final",
							"abstract"
						],
						"deco": "FNbNeMAxAvXAh",
						"endchar": 9,
						"char": 40,
						"parameters": [
							{
								"deco": "AxAv",
								"storageClass": [
									"scope"
								],
								"name": "data"
							}
						],
						"name": "digest",
						"comment": " This is a convenience function to calculate the hash of a value using the OOP API.\n",
						"endline": 595
					}
				],
				"char": 1,
				"name": "Digest",
				"comment": " This describes the OOP API. To understand when to use the template API and when to use the OOP API,\n see the module documentation at the top of this page.\n\n The Digest interface is the base interface which is implemented by all digests.\n\n Note:\n A Digest implementation is always an $(D OutputRange)\nExample:\n\n---\n//Using the OutputRange feature\nimport std.algorithm : copy;\nimport std.range : repeat;\nimport std.digest.md;\n\nauto oneMillionRange = repeat!ubyte(cast(ubyte)'a', 1000000);\nauto ctx = new MD5Digest();\ncopy(oneMillionRange, ctx);\nassert(ctx.finish().toHexString() == \"7707D6AE4E027C70EEA2A935C2296F21\");\n\n---\nExample:\n\n---\nimport std.digest.md, std.digest.sha, std.digest.crc;\nubyte[] md5   = (new MD5Digest()).digest(\"The quick brown fox jumps over the lazy dog\");\nubyte[] sha1  = (new SHA1Digest()).digest(\"The quick brown fox jumps over the lazy dog\");\nubyte[] crc32 = (new CRC32Digest()).digest(\"The quick brown fox jumps over the lazy dog\");\nassert(crcHexString(crc32) == \"414FA339\");\n\n---\nExample:\n\n---\nimport std.digest.crc;\nubyte[] crc32 = (new CRC32Digest()).digest(\"The quick \", \"brown \", \"fox jumps over the lazy dog\");\nassert(crcHexString(crc32) == \"414FA339\");\n\n---\nExample:\n\n---\nvoid test(Digest dig)\n{\n    dig.put(cast(ubyte)0); //single ubyte\n    dig.put(cast(ubyte)0, cast(ubyte)0); //variadic\n    ubyte[10] buf;\n    dig.put(buf); //buffer\n}\n\n---\n"
			},
			{
				"kind": "enum",
				"line": 654,
				"members": [
					{
						"kind": "enum member",
						"line": 656,
						"value": "false",
						"char": 5,
						"name": "increasing",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 657,
						"value": "1",
						"char": 5,
						"name": "decreasing",
						"comment": "\n"
					}
				],
				"char": 1,
				"baseDeco": "b",
				"name": "Order",
				"comment": " See $(LREF toHexString)\n"
			},
			{
				"kind": "template",
				"line": 673,
				"members": [
					{
						"kind": "function",
						"line": 673,
						"endchar": 1,
						"char": 13,
						"type": "char[num * 2](in ubyte[num] digest)",
						"parameters": [
							{
								"storageClass": [
									"in"
								],
								"type": "ubyte[num]",
								"name": "digest"
							}
						],
						"name": "toHexString",
						"endline": 708
					}
				],
				"char": 13,
				"parameters": [
					{
						"kind": "value",
						"defaultValue": "Order.increasing",
						"deco": "E3std6digest6digest5Order",
						"name": "order"
					},
					{
						"kind": "value",
						"deco": "m",
						"name": "num"
					},
					{
						"kind": "value",
						"defaultValue": "LetterCase.upper",
						"deco": "E3std5ascii10LetterCase",
						"name": "letterCase"
					}
				],
				"comment": " Used to convert a hash value (a static or dynamic array of ubytes) to a string.\n Can be used with the OOP and with the template API.\n\n The additional order parameter can be used to specify the order of the input data.\n By default the data is processed in increasing order, starting at index 0. To process it in the\n opposite order, pass Order.decreasing as a parameter.\n\n The additional letterCase parameter can be used to specify the case of the output data.\n By default the output is in upper case. To change it to the lower case\n pass LetterCase.lower as a parameter.\nExample:\n\n---\nimport std.digest.crc;\n//Test with template API:\nauto crc32 = digest!CRC32(\"The quick \", \"brown \", \"fox jumps over the lazy dog\");\n//Lower case variant:\nassert(toHexString!(LetterCase.lower)(crc32) == \"39a34f41\");\n//Usually CRCs are printed in this order, though:\nassert(toHexString!(Order.decreasing)(crc32) == \"414FA339\");\nassert(toHexString!(LetterCase.lower, Order.decreasing)(crc32) == \"414fa339\");\n\n---\nExample:\n\n---\nimport std.digest.crc;\n// With OOP API\nauto crc32 = (new CRC32Digest()).digest(\"The quick \", \"brown \", \"fox jumps over the lazy dog\");\n//Usually CRCs are printed in this order, though:\nassert(toHexString!(Order.decreasing)(crc32) == \"414FA339\");\n\n---\n",
				"name": "toHexString"
			},
			{
				"kind": "template",
				"line": 711,
				"members": [
					{
						"kind": "function",
						"line": 711,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "(in ubyte[num] digest)",
						"parameters": [
							{
								"storageClass": [
									"in"
								],
								"type": "ubyte[num]",
								"name": "digest"
							}
						],
						"name": "toHexString",
						"endline": 714
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "value",
						"deco": "E3std5ascii10LetterCase",
						"name": "letterCase"
					},
					{
						"kind": "value",
						"defaultValue": "Order.increasing",
						"deco": "E3std6digest6digest5Order",
						"name": "order"
					},
					{
						"kind": "value",
						"deco": "m",
						"name": "num"
					}
				],
				"comment": "ditto\n",
				"name": "toHexString"
			},
			{
				"kind": "template",
				"line": 717,
				"members": [
					{
						"kind": "function",
						"line": 717,
						"endchar": 1,
						"char": 8,
						"type": "string(in ubyte[] digest)",
						"parameters": [
							{
								"storageClass": [
									"in"
								],
								"type": "ubyte[]",
								"name": "digest"
							}
						],
						"name": "toHexString",
						"endline": 751
					}
				],
				"char": 8,
				"parameters": [
					{
						"kind": "value",
						"defaultValue": "Order.increasing",
						"deco": "E3std6digest6digest5Order",
						"name": "order"
					},
					{
						"kind": "value",
						"defaultValue": "LetterCase.upper",
						"deco": "E3std5ascii10LetterCase",
						"name": "letterCase"
					}
				],
				"comment": "ditto\n",
				"name": "toHexString"
			},
			{
				"kind": "template",
				"line": 754,
				"members": [
					{
						"kind": "function",
						"line": 754,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "(in ubyte[] digest)",
						"parameters": [
							{
								"storageClass": [
									"in"
								],
								"type": "ubyte[]",
								"name": "digest"
							}
						],
						"name": "toHexString",
						"endline": 757
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "value",
						"deco": "E3std5ascii10LetterCase",
						"name": "letterCase"
					},
					{
						"kind": "value",
						"defaultValue": "Order.increasing",
						"deco": "E3std6digest6digest5Order",
						"name": "order"
					}
				],
				"comment": "ditto\n",
				"name": "toHexString"
			},
			{
				"kind": "template",
				"line": 814,
				"constraint": "isDigest!T",
				"members": [
					{
						"kind": "variable",
						"line": 816,
						"init": "(ReturnType!(T.finish)).length",
						"storageClass": [
							"enum"
						],
						"char": 17,
						"type": "size_t",
						"name": "digestLength"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": " This helper is used internally in the WrapperDigest template, but it might be\n useful for other purposes as well. It returns the length (in bytes) of the hash value\n produced by T.\n",
				"name": "digestLength"
			},
			{
				"kind": "template",
				"line": 824,
				"constraint": "isDigest!T",
				"members": [
					{
						"kind": "class",
						"line": 824,
						"members": [
							{
								"kind": "constructor",
								"line": 833,
								"endchar": 9,
								"char": 9,
								"type": "()",
								"name": "this",
								"comment": " Initializes the digest.\n",
								"endline": 836
							},
							{
								"kind": "function",
								"line": 843,
								"endchar": 9,
								"char": 31,
								"type": "nothrow @trusted void(scope const(ubyte)[] data...)",
								"parameters": [
									{
										"storageClass": [
											"scope"
										],
										"type": "const(ubyte)[]",
										"name": "data"
									}
								],
								"name": "put",
								"comment": " Use this to feed the digest with data.\n Also implements the $(XREF range, OutputRange) interface for $(D ubyte) and\n $(D const(ubyte)[]).\n",
								"endline": 846
							},
							{
								"kind": "function",
								"line": 854,
								"endchar": 9,
								"char": 31,
								"type": "nothrow @trusted void()",
								"name": "reset",
								"comment": " Resets the internal state of the digest.\n Note:\n $(LREF finish) calls this internally, so it's not necessary to call\n $(D reset) manually after a call to $(LREF finish).\n",
								"endline": 857
							},
							{
								"kind": "function",
								"line": 863,
								"endchar": 9,
								"char": 43,
								"type": "const pure nothrow @property @trusted size_t()",
								"name": "length",
								"comment": " This is the length in bytes of the hash value which is returned by $(LREF finish).\n It's also the required size of a buffer passed to $(LREF finish).\n",
								"endline": 866
							},
							{
								"kind": "function",
								"line": 885,
								"endchar": 9,
								"char": 25,
								"type": "nothrow ubyte[](scope ubyte[] buf)",
								"parameters": [
									{
										"storageClass": [
											"scope"
										],
										"type": "ubyte[]",
										"name": "buf"
									}
								],
								"name": "finish",
								"comment": " The finish function returns the hash value. It takes an optional buffer to copy the data\n into. If a buffer is passed, it must have a length at least $(LREF length) bytes.\n\n Examples:\n --------\n\n import std.digest.md;\n ubyte[16] buf;\n auto hash = new WrapperDigest!MD5();\n hash.put(cast(ubyte)0);\n auto result = hash.finish(buf[]);\n //The result is now in result (and in buf). If you pass a buffer which is bigger than\n //necessary, result will have the correct length, but buf will still have it's original\n //length\n --------\n",
								"endline": 896
							},
							{
								"kind": "function",
								"line": 899,
								"endchar": 9,
								"char": 34,
								"type": "nothrow @trusted ubyte[]()",
								"name": "finish",
								"comment": "ditto\n",
								"endline": 905
							},
							{
								"kind": "function",
								"line": 915,
								"char": 30,
								"type": "const @trusted ubyte[](scope ubyte[] buf)",
								"parameters": [
									{
										"storageClass": [
											"scope"
										],
										"type": "ubyte[]",
										"name": "buf"
									}
								],
								"name": "peek",
								"comment": " Works like $(D finish) but does not reset the internal state, so it's possible\n to continue putting data into this WrapperDigest after a call to peek.\n\n These functions are only available if $(D hasPeek!T) is true.\n"
							},
							{
								"kind": "function",
								"line": 917,
								"char": 30,
								"type": "const @trusted ubyte[]()",
								"name": "peek",
								"comment": "ditto\n"
							}
						],
						"char": 1,
						"name": "WrapperDigest"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": " Wraps a template API hash struct into a Digest interface.\n Modules providing digest implementations will usually provide\n an alias for this template (e.g. MD5Digest, SHA1Digest, ...).\nExample:\n\n---\nimport std.digest.md;\n//Simple example\nauto hash = new WrapperDigest!MD5();\nhash.put(cast(ubyte)0);\nauto result = hash.finish();\n\n---\nExample:\n\n---\n//using a supplied buffer\nimport std.digest.md;\nubyte[16] buf;\nauto hash = new WrapperDigest!MD5();\nhash.put(cast(ubyte)0);\nauto result = hash.finish(buf[]);\n//The result is now in result (and in buf). If you pass a buffer which is bigger than\n//necessary, result will have the correct length, but buf will still have it's original\n//length\n\n---\n",
				"name": "WrapperDigest"
			}
		],
		"name": "std.digest.digest",
		"comment": " This module describes the digest APIs used in Phobos. All digests follow these APIs.\n Additionally, this module contains useful helper methods which can be used with every _digest type.\n\n$(SCRIPT inhibitQuickIndex = 1;)\n\n$(DIVC quickindex,\n$(BOOKTABLE ,\n$(TR $(TH Category) $(TH Functions)\n)\n$(TR $(TDNW Template API) $(TD $(MYREF isDigest) $(MYREF DigestType) $(MYREF hasPeek)\n  $(MYREF ExampleDigest) $(MYREF _digest) $(MYREF hexDigest) $(MYREF makeDigest)\n)\n)\n$(TR $(TDNW OOP API) $(TD $(MYREF Digest)\n)\n)\n$(TR $(TDNW Helper functions) $(TD $(MYREF toHexString))\n)\n$(TR $(TDNW Implementation helpers) $(TD $(MYREF digestLength) $(MYREF WrapperDigest))\n)\n)\n)\n\n APIs:\n There are two APIs for digests: The template API and the OOP API. The template API uses structs\n and template helpers like $(LREF isDigest). The OOP API implements digests as classes inheriting\n the $(LREF Digest) interface. All digests are named so that the template API struct is called \"$(B x)\"\n and the OOP API class is called \"$(B x)Digest\". For example we have $(D MD5) <--> $(D MD5Digest),\n $(D CRC32) <--> $(D CRC32Digest), etc.\n\n The template API is slightly more efficient. It does not have to allocate memory dynamically,\n all memory is allocated on the stack. The OOP API has to allocate in the finish method if no\n buffer was provided. If you provide a buffer to the OOP APIs finish function, it doesn't allocate,\n but the $(LREF Digest) classes still have to be created using $(D new) which allocates them using the GC.\n\n The OOP API is useful to change the _digest function and/or _digest backend at 'runtime'. The benefit here\n is that switching e.g. Phobos MD5Digest and an OpenSSLMD5Digest implementation is ABI compatible.\n\n If just one specific _digest type and backend is needed, the template API is usually a good fit.\n In this simplest case, the template API can even be used without templates: Just use the \"$(B x)\" structs\n directly.\n\n License:   $(WEB www.boost.org/LICENSE_1_0.txt, Boost License 1.0).\n Authors:\n Johannes Pfau\n\n Source:    $(PHOBOSSRC std/_digest/_digest.d)\n\n CTFE:\n Digests do not work in CTFE\n\n TODO:\n Digesting single bits (as opposed to bytes) is not implemented. This will be done as another\n template constraint helper (hasBitDigesting!T) and an additional interface (BitDigest)\nExample:\n\n---\nimport std.digest.crc;\n\n//Simple example\nchar[8] hexHash = hexDigest!CRC32(\"The quick brown fox jumps over the lazy dog\");\nassert(hexHash == \"39A34F41\");\n\n//Simple example, using the API manually\nCRC32 context = makeDigest!CRC32();\ncontext.put(cast(ubyte[])\"The quick brown fox jumps over the lazy dog\");\nubyte[4] hash = context.finish();\nassert(toHexString(hash) == \"39A34F41\");\n\n---\nExample:\n\n---\n//Generating the hashes of a file, idiomatic D way\nimport std.digest.crc, std.digest.sha, std.digest.md;\nimport std.stdio;\n\n// Digests a file and prints the result.\nvoid digestFile(Hash)(string filename) if(isDigest!Hash)\n{\n    auto file = File(filename);\n    auto result = digest!Hash(file.byChunk(4096 * 1024));\n    writefln(\"%s (%s) = %s\", Hash.stringof, filename, toHexString(result));\n}\n\nvoid main(string[] args)\n{\n    foreach (name; args[1 .. $])\n    {\n        digestFile!MD5(name);\n        digestFile!SHA1(name);\n        digestFile!CRC32(name);\n    }\n}\n\n---\nExample:\n\n---\n//Generating the hashes of a file using the template API\nimport std.digest.crc, std.digest.sha, std.digest.md;\nimport std.stdio;\n// Digests a file and prints the result.\nvoid digestFile(Hash)(ref Hash hash, string filename) if(isDigest!Hash)\n{\n    File file = File(filename);\n\n    //As digests imlement OutputRange, we could use std.algorithm.copy\n    //Let's do it manually for now\n    foreach (buffer; file.byChunk(4096 * 1024))\n        hash.put(buffer);\n\n    auto result = hash.finish();\n    writefln(\"%s (%s) = %s\", Hash.stringof, filename, toHexString(result));\n}\n\nvoid uMain(string[] args)\n{\n    MD5 md5;\n    SHA1 sha1;\n    CRC32 crc32;\n\n    md5.start();\n    sha1.start();\n    crc32.start();\n\n    foreach (arg; args[1 .. $])\n    {\n        digestFile(md5, arg);\n        digestFile(sha1, arg);\n        digestFile(crc32, arg);\n    }\n}\n\n---\nExample:\n\n---\nimport std.digest.crc, std.digest.sha, std.digest.md;\nimport std.stdio;\n\n// Digests a file and prints the result.\nvoid digestFile(Digest hash, string filename)\n{\n    File file = File(filename);\n\n    //As digests implement OutputRange, we could use std.algorithm.copy\n    //Let's do it manually for now\n    foreach (buffer; file.byChunk(4096 * 1024))\n      hash.put(buffer);\n\n    ubyte[] result = hash.finish();\n    writefln(\"%s (%s) = %s\", typeid(hash).toString(), filename, toHexString(result));\n}\n\nvoid umain(string[] args)\n{\n    auto md5 = new MD5Digest();\n    auto sha1 = new SHA1Digest();\n    auto crc32 = new CRC32Digest();\n\n    foreach (arg; args[1 .. $])\n    {\n      digestFile(md5, arg);\n      digestFile(sha1, arg);\n      digestFile(crc32, arg);\n    }\n}\n\n---\n"
	},
	{
		"kind": "module",
		"file": "../phobos/std/digest/sha.d",
		"members": [
			{
				"kind": "template",
				"line": 205,
				"members": [
					{
						"kind": "struct",
						"line": 205,
						"members": [
							{
								"kind": "function",
								"line": 684,
								"endchar": 9,
								"char": 14,
								"type": "pure nothrow @nogc @safe void()",
								"name": "start",
								"comment": " SHA initialization. Begins an SHA1/SHA2 operation.\n\n Note:\n For this SHA Digest implementation calling start after default construction\n is not necessary. Calling start is only necessary to reset the Digest.\n\n Generic code which deals with different Digest types should always call start though.\n\n Examples:\n --------\n SHA1 digest;\n //digest.start(); //Not necessary\n digest.put(0);\n --------\n",
								"endline": 687
							},
							{
								"kind": "function",
								"line": 694,
								"endchar": 9,
								"char": 14,
								"type": "pure nothrow @nogc @trusted void(scope const(ubyte)[] input...)",
								"parameters": [
									{
										"storageClass": [
											"scope"
										],
										"type": "const(ubyte)[]",
										"name": "input"
									}
								],
								"name": "put",
								"comment": " Use this to feed the digest with data.\n Also implements the $(XREF range, OutputRange) interface for $(D ubyte) and\n $(D const(ubyte)[]).\nExample:\n\n---\ntypeof(this) dig;\ndig.put(cast(ubyte)0); //single ubyte\ndig.put(cast(ubyte)0, cast(ubyte)0); //variadic\nubyte[10] buf;\ndig.put(buf); //buffer\n\n\n---\n",
								"endline": 736
							},
							{
								"kind": "function",
								"line": 752,
								"endchar": 9,
								"char": 29,
								"type": "pure nothrow @nogc @trusted ubyte[digestSize / 8]()",
								"name": "finish",
								"comment": " Returns the finished SHA hash. This also calls $(LREF start) to\n reset the internal state.\nExample:\n\n---\n//Simple example\nSHA1 hash;\nhash.start();\nhash.put(cast(ubyte)0);\nubyte[20] result = hash.finish();\n}\n\n---\n",
								"endline": 806
							}
						],
						"char": 1,
						"name": "SHA"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "value",
						"deco": "i",
						"name": "blockSize"
					},
					{
						"kind": "value",
						"deco": "i",
						"name": "digestSize"
					}
				],
				"comment": " Template API SHA1/SHA2 implementation. Supports: SHA-1, SHA-224, SHA-256,\n SHA-384, SHA-512, SHA-512/224 and SHA-512/256.\n\n The blockSize and digestSize are in bits. However, it's likely easier to\n simply use the convenience aliases: SHA1, SHA224, SHA256, SHA384, SHA512,\n SHA512_224 and SHA512_256.\n\n See $(D std.digest.digest) for differences between template and OOP API.\n",
				"name": "SHA"
			},
			{
				"kind": "alias",
				"line": 818,
				"deco": "S3std6digest3sha20__T3SHAVii512Vii160Z3SHA",
				"char": 1,
				"name": "SHA1",
				"comment": "SHA alias for SHA-1, hash is ubyte[20]\n"
			},
			{
				"kind": "alias",
				"line": 819,
				"deco": "S3std6digest3sha20__T3SHAVii512Vii224Z3SHA",
				"char": 1,
				"name": "SHA224",
				"comment": "SHA alias for SHA-224, hash is ubyte[28]\n"
			},
			{
				"kind": "alias",
				"line": 820,
				"deco": "S3std6digest3sha20__T3SHAVii512Vii256Z3SHA",
				"char": 1,
				"name": "SHA256",
				"comment": "SHA alias for SHA-256, hash is ubyte[32]\n"
			},
			{
				"kind": "alias",
				"line": 821,
				"deco": "S3std6digest3sha21__T3SHAVii1024Vii384Z3SHA",
				"char": 1,
				"name": "SHA384",
				"comment": "SHA alias for SHA-384, hash is ubyte[48]\n"
			},
			{
				"kind": "alias",
				"line": 822,
				"deco": "S3std6digest3sha21__T3SHAVii1024Vii512Z3SHA",
				"char": 1,
				"name": "SHA512",
				"comment": "SHA alias for SHA-512, hash is ubyte[64]\n"
			},
			{
				"kind": "alias",
				"line": 823,
				"deco": "S3std6digest3sha21__T3SHAVii1024Vii224Z3SHA",
				"char": 1,
				"name": "SHA512_224",
				"comment": "SHA alias for SHA-512/224, hash is ubyte[28]\n"
			},
			{
				"kind": "alias",
				"line": 824,
				"deco": "S3std6digest3sha21__T3SHAVii1024Vii256Z3SHA",
				"char": 1,
				"name": "SHA512_256",
				"comment": "SHA alias for SHA-512/256, hash is ubyte[32]\nExample:\n\n---\n//Simple example, hashing a string using sha1Of helper function\nubyte[20] hash = sha1Of(\"abc\");\n//Let's get a hash string\nassert(toHexString(hash) == \"A9993E364706816ABA3E25717850C26C9CD0D89D\");\n\n//The same, but using SHA-224\nubyte[28] hash224 = sha224Of(\"abc\");\nassert(toHexString(hash224) == \"23097D223405D8228642A477BDA255B32AADBCE4BDA0B3F7E36C9DA7\");\n\n---\nExample:\n\n---\n//Using the basic API\nSHA1 hash;\nhash.start();\nubyte[1024] data;\n//Initialize data here...\nhash.put(data);\nubyte[20] result = hash.finish();\n\n---\nExample:\n\n---\n//Let's use the template features:\n//Note: When passing a SHA1 to a function, it must be passed by reference!\nvoid doSomething(T)(ref T hash) if(isDigest!T)\n{\n  hash.put(cast(ubyte)0);\n}\nSHA1 sha;\nsha.start();\ndoSomething(sha);\nassert(toHexString(sha.finish()) == \"5BA93C9DB0CFF93F52B521D7420E43F6EDA2784F\");\n\n---\n"
			},
			{
				"kind": "template",
				"line": 1100,
				"members": [
					{
						"kind": "function",
						"line": 1100,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "(T data)",
						"parameters": [
							{
								"type": "T",
								"name": "data"
							}
						],
						"name": "sha1Of",
						"endline": 1103
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "tuple",
						"name": "T"
					}
				],
				"comment": " These are convenience aliases for $(XREF digest.digest, digest) using the\n SHA implementation.\nExample:\n\n---\nubyte[20] hash = sha1Of(\"abc\");\nassert(hash == digest!SHA1(\"abc\"));\n\nubyte[28] hash224 = sha224Of(\"abc\");\nassert(hash224 == digest!SHA224(\"abc\"));\n\nubyte[32] hash256 = sha256Of(\"abc\");\nassert(hash256 == digest!SHA256(\"abc\"));\n\nubyte[48] hash384 = sha384Of(\"abc\");\nassert(hash384 == digest!SHA384(\"abc\"));\n\nubyte[64] hash512 = sha512Of(\"abc\");\nassert(hash512 == digest!SHA512(\"abc\"));\n\nubyte[28] hash512_224 = sha512_224Of(\"abc\");\nassert(hash512_224 == digest!SHA512_224(\"abc\"));\n\nubyte[32] hash512_256 = sha512_256Of(\"abc\");\nassert(hash512_256 == digest!SHA512_256(\"abc\"));\n\n---\n",
				"name": "sha1Of"
			},
			{
				"kind": "template",
				"line": 1105,
				"members": [
					{
						"kind": "function",
						"line": 1105,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "(T data)",
						"parameters": [
							{
								"type": "T",
								"name": "data"
							}
						],
						"name": "sha224Of",
						"endline": 1108
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "tuple",
						"name": "T"
					}
				],
				"comment": "ditto\n",
				"name": "sha224Of"
			},
			{
				"kind": "template",
				"line": 1110,
				"members": [
					{
						"kind": "function",
						"line": 1110,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "(T data)",
						"parameters": [
							{
								"type": "T",
								"name": "data"
							}
						],
						"name": "sha256Of",
						"endline": 1113
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "tuple",
						"name": "T"
					}
				],
				"comment": "ditto\n",
				"name": "sha256Of"
			},
			{
				"kind": "template",
				"line": 1115,
				"members": [
					{
						"kind": "function",
						"line": 1115,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "(T data)",
						"parameters": [
							{
								"type": "T",
								"name": "data"
							}
						],
						"name": "sha384Of",
						"endline": 1118
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "tuple",
						"name": "T"
					}
				],
				"comment": "ditto\n",
				"name": "sha384Of"
			},
			{
				"kind": "template",
				"line": 1120,
				"members": [
					{
						"kind": "function",
						"line": 1120,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "(T data)",
						"parameters": [
							{
								"type": "T",
								"name": "data"
							}
						],
						"name": "sha512Of",
						"endline": 1123
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "tuple",
						"name": "T"
					}
				],
				"comment": "ditto\n",
				"name": "sha512Of"
			},
			{
				"kind": "template",
				"line": 1125,
				"members": [
					{
						"kind": "function",
						"line": 1125,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "(T data)",
						"parameters": [
							{
								"type": "T",
								"name": "data"
							}
						],
						"name": "sha512_224Of",
						"endline": 1128
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "tuple",
						"name": "T"
					}
				],
				"comment": "ditto\n",
				"name": "sha512_224Of"
			},
			{
				"kind": "template",
				"line": 1130,
				"members": [
					{
						"kind": "function",
						"line": 1130,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "(T data)",
						"parameters": [
							{
								"type": "T",
								"name": "data"
							}
						],
						"name": "sha512_256Of",
						"endline": 1133
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "tuple",
						"name": "T"
					}
				],
				"comment": "ditto\n",
				"name": "sha512_256Of"
			},
			{
				"kind": "alias",
				"line": 1178,
				"deco": "C3std6digest6digest62__T13WrapperDigestTS3std6digest3sha20__T3SHAVii512Vii160Z3SHAZ13WrapperDigest",
				"char": 1,
				"name": "SHA1Digest",
				"comment": " OOP API SHA1 and SHA2 implementations.\n See $(D std.digest.digest) for differences between template and OOP API.\n\n This is an alias for $(XREF digest.digest, WrapperDigest)!SHA1, see\n $(XREF digest.digest, WrapperDigest) for more information.\nExample:\n\n---\n//Simple example, hashing a string using Digest.digest helper function\nauto sha = new SHA1Digest();\nubyte[] hash = sha.digest(\"abc\");\n//Let's get a hash string\nassert(toHexString(hash) == \"A9993E364706816ABA3E25717850C26C9CD0D89D\");\n\n//The same, but using SHA-224\nauto sha224 = new SHA224Digest();\nubyte[] hash224 = sha224.digest(\"abc\");\n//Let's get a hash string\nassert(toHexString(hash224) == \"23097D223405D8228642A477BDA255B32AADBCE4BDA0B3F7E36C9DA7\");\n\n---\nExample:\n\n---\n//Let's use the OOP features:\nvoid test(Digest dig)\n{\n  dig.put(cast(ubyte)0);\n}\nauto sha = new SHA1Digest();\ntest(sha);\n\n//Let's use a custom buffer:\nubyte[20] buf;\nubyte[] result = sha.finish(buf[]);\nassert(toHexString(result) == \"5BA93C9DB0CFF93F52B521D7420E43F6EDA2784F\");\n\n---\n"
			},
			{
				"kind": "alias",
				"line": 1179,
				"deco": "C3std6digest6digest62__T13WrapperDigestTS3std6digest3sha20__T3SHAVii512Vii224Z3SHAZ13WrapperDigest",
				"char": 1,
				"name": "SHA224Digest",
				"comment": "ditto\n"
			},
			{
				"kind": "alias",
				"line": 1180,
				"deco": "C3std6digest6digest62__T13WrapperDigestTS3std6digest3sha20__T3SHAVii512Vii256Z3SHAZ13WrapperDigest",
				"char": 1,
				"name": "SHA256Digest",
				"comment": "ditto\n"
			},
			{
				"kind": "alias",
				"line": 1181,
				"deco": "C3std6digest6digest63__T13WrapperDigestTS3std6digest3sha21__T3SHAVii1024Vii384Z3SHAZ13WrapperDigest",
				"char": 1,
				"name": "SHA384Digest",
				"comment": "ditto\n"
			},
			{
				"kind": "alias",
				"line": 1182,
				"deco": "C3std6digest6digest63__T13WrapperDigestTS3std6digest3sha21__T3SHAVii1024Vii512Z3SHAZ13WrapperDigest",
				"char": 1,
				"name": "SHA512Digest",
				"comment": "ditto\n"
			},
			{
				"kind": "alias",
				"line": 1183,
				"deco": "C3std6digest6digest63__T13WrapperDigestTS3std6digest3sha21__T3SHAVii1024Vii224Z3SHAZ13WrapperDigest",
				"char": 1,
				"name": "SHA512_224Digest",
				"comment": "ditto\n"
			},
			{
				"kind": "alias",
				"line": 1184,
				"deco": "C3std6digest6digest63__T13WrapperDigestTS3std6digest3sha21__T3SHAVii1024Vii256Z3SHAZ13WrapperDigest",
				"char": 1,
				"name": "SHA512_256Digest",
				"comment": "ditto\n"
			}
		],
		"name": "std.digest.sha",
		"comment": " Computes SHA1 and SHA2 hashes of arbitrary data. SHA hashes are 20 to 64 byte\n quantities (depending on the SHA algorithm) that are like a checksum or CRC,\n but are more robust.\n\n$(SCRIPT inhibitQuickIndex = 1;)\n\n$(DIVC quickindex,\n$(BOOKTABLE ,\n$(TR $(TH Category) $(TH Functions)\n)\n$(TR $(TDNW Template API) $(TD $(MYREF SHA1)\n)\n)\n$(TR $(TDNW OOP API) $(TD $(MYREF SHA1Digest))\n)\n$(TR $(TDNW Helpers) $(TD $(MYREF sha1Of))\n)\n)\n)\n\n SHA2 comes in several different versions, all supported by this module:\n SHA-224, SHA-256, SHA-384, SHA-512, SHA-512/224 and SHA-512/256.\n\n This module conforms to the APIs defined in $(D std.digest.digest). To understand the\n differences between the template and the OOP API, see $(D std.digest.digest).\n\n This module publicly imports $(D std.digest.digest) and can be used as a stand-alone\n module.\n\n License:   $(WEB www.boost.org/LICENSE_1_0.txt, Boost License 1.0).\n\n CTFE:\n Digests do not work in CTFE\n\n Authors:\n The routines and algorithms are derived from the\n $(I Secure Hash Signature Standard (SHS) (FIPS PUB 180-2)). $(BR )\n Kai Nacke, Johannes Pfau, Nick Sabalausky\n\n References:\n $(UL\n $(LI $(LINK2 http://csrc.nist.gov/publications/fips/fips180-2/fips180-2withchangenotice.pdf, FIPS PUB180-2))\n $(LI $(LINK2 http://software.intel.com/en-us/articles/improving-the-performance-of-the-secure-hash-algorithm-1/, Fast implementation of SHA1))\n $(LI $(LINK2 http://en.wikipedia.org/wiki/Secure_Hash_Algorithm, Wikipedia article about SHA))\n )\n\n Source: $(PHOBOSSRC std/digest/_sha.d)\n\n Macros:\n      WIKI = Phobos/StdSha1\nExample:\n\n---\n//Template API\nimport std.digest.sha;\n\nubyte[20] hash1 = sha1Of(\"abc\");\nassert(toHexString(hash1) == \"A9993E364706816ABA3E25717850C26C9CD0D89D\");\n\nubyte[28] hash224 = sha224Of(\"abc\");\nassert(toHexString(hash224) == \"23097D223405D8228642A477BDA255B32AADBCE4BDA0B3F7E36C9DA7\");\n\n//Feeding data\nubyte[1024] data;\nSHA1 sha1;\nsha1.start();\nsha1.put(data[]);\nsha1.start(); //Start again\nsha1.put(data[]);\nhash1 = sha1.finish();\n\n---\nExample:\n\n---\n//OOP API\nimport std.digest.sha;\n\nauto sha1 = new SHA1Digest();\nubyte[] hash1 = sha1.digest(\"abc\");\nassert(toHexString(hash1) == \"A9993E364706816ABA3E25717850C26C9CD0D89D\");\n\nauto sha224 = new SHA224Digest();\nubyte[] hash224 = sha224.digest(\"abc\");\nassert(toHexString(hash224) == \"23097D223405D8228642A477BDA255B32AADBCE4BDA0B3F7E36C9DA7\");\n\n//Feeding data\nubyte[1024] data;\nsha1.put(data[]);\nsha1.reset(); //Start again\nsha1.put(data[]);\nhash1 = sha1.finish();\n\n---\n"
	},
	{
		"kind": "module",
		"file": "../phobos/std/uuid.d",
		"members": [
			{
				"kind": "struct",
				"line": 127,
				"members": [
					{
						"kind": "enum",
						"line": 185,
						"members": [
							{
								"kind": "enum member",
								"line": 187,
								"value": "0",
								"char": 13,
								"name": "ncs",
								"comment": "NCS backward compatibility\n"
							},
							{
								"kind": "enum member",
								"line": 188,
								"value": "1",
								"char": 13,
								"name": "rfc4122",
								"comment": "Defined in RFC 4122 document\n"
							},
							{
								"kind": "enum member",
								"line": 189,
								"value": "2",
								"char": 13,
								"name": "microsoft",
								"comment": "Microsoft Corporation backward compatibility\n"
							},
							{
								"kind": "enum member",
								"line": 190,
								"value": "3",
								"char": 13,
								"name": "future",
								"comment": "Reserved for future use\n"
							}
						],
						"char": 9,
						"baseDeco": "i",
						"name": "Variant",
						"comment": " RFC 4122 defines different internal data layouts for UUIDs. These are\n the UUID formats supported by this module. It's\n possible to read, compare and use all these Variants, but\n UUIDs generated by this module will always be in rfc4122 format.\n\n Note: Do not confuse this with $(XREF _variant, _Variant).\n"
					},
					{
						"kind": "enum",
						"line": 202,
						"members": [
							{
								"kind": "enum member",
								"line": 205,
								"value": "-1",
								"char": 13,
								"name": "unknown",
								"comment": "Unknown version\n"
							},
							{
								"kind": "enum member",
								"line": 207,
								"value": "1",
								"char": 13,
								"name": "timeBased",
								"comment": "Version 1\n"
							},
							{
								"kind": "enum member",
								"line": 209,
								"value": "2",
								"char": 13,
								"name": "dceSecurity",
								"comment": "Version 2\n"
							},
							{
								"kind": "enum member",
								"line": 211,
								"value": "3",
								"char": 13,
								"name": "nameBasedMD5",
								"comment": "Version 3 (Name based + MD5)\n"
							},
							{
								"kind": "enum member",
								"line": 213,
								"value": "4",
								"char": 13,
								"name": "randomNumberBased",
								"comment": "Version 4 (Random)\n"
							},
							{
								"kind": "enum member",
								"line": 215,
								"value": "5",
								"char": 13,
								"name": "nameBasedSHA1",
								"comment": "Version 5 (Name based + SHA-1)\n"
							}
						],
						"char": 9,
						"baseDeco": "i",
						"name": "Version",
						"comment": " RFC 4122 defines different UUID versions. The version shows\n how a UUID was generated, e.g. a version 4 UUID was generated\n from a random number, a version 3 UUID from an MD5 hash of a name.\n\n Note:\n All of these UUID versions can be read and processed by\n $(D std.uuid), but only version 3, 4 and 5 UUIDs can be generated.\n"
					},
					{
						"kind": "variable",
						"line": 236,
						"deco": "G16h",
						"char": 19,
						"name": "data",
						"comment": " It is sometimes useful to get or set the 16 bytes of a UUID\n directly.\n\n Note:\n UUID uses a 16-ubyte representation for the UUID data.\n RFC 4122 defines a UUID as a special structure in big-endian\n format. These 16-ubytes always equal the big-endian structure\n defined in RFC 4122.\n\n Examples:\n -----------------------------------------------\n auto rawData = uuid.data; //get data\n rawData[0] = 1; //modify\n uuid.data = rawData; //set data\n uuid.data[1] = 2; //modify directly\n -----------------------------------------------\n",
						"offset": 0
					},
					{
						"kind": "constructor",
						"line": 265,
						"deco": "FNaNbNcNiNfKxG16hZS3std4uuid4UUID",
						"endchar": 9,
						"char": 34,
						"parameters": [
							{
								"deco": "xG16h",
								"storageClass": [
									"ref"
								],
								"name": "uuidData"
							}
						],
						"name": "this",
						"comment": " Construct a UUID struct from the 16 byte representation\n of a UUID.\nExample:\n\n---\nenum ubyte[16] data = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15];\nauto uuid = UUID(data);\nenum ctfe = UUID(data);\nassert(uuid.data == data);\nassert(ctfe.data == data);\n\n\n---\n",
						"originalType": "pure nothrow @nogc ref @safe (ref ubyte[16] uuidData)",
						"endline": 268
					},
					{
						"kind": "constructor",
						"line": 270,
						"deco": "FNaNbNcNiNfxG16hZS3std4uuid4UUID",
						"endchar": 9,
						"char": 34,
						"parameters": [
							{
								"deco": "xG16h",
								"name": "uuidData"
							}
						],
						"name": "this",
						"comment": "ditto\n",
						"originalType": "pure nothrow @nogc ref @safe (in ubyte[16] uuidData)",
						"endline": 273
					},
					{
						"kind": "template",
						"line": 290,
						"constraint": "uuidData.length == 16 && allSatisfy!(isIntegral, T)",
						"members": [
							{
								"kind": "constructor",
								"line": 290,
								"endchar": 9,
								"char": 20,
								"type": "pure @safe (T uuidData)",
								"parameters": [
									{
										"type": "T",
										"name": "uuidData"
									}
								],
								"name": "this",
								"endline": 299
							}
						],
						"char": 20,
						"parameters": [
							{
								"kind": "tuple",
								"name": "T"
							}
						],
						"comment": " Construct a UUID struct from the 16 byte representation\n of a UUID. Variadic constructor to allow a simpler syntax, see examples.\n You need to pass exactly 16 ubytes.\nExample:\n\n---\nauto tmp = UUID(0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15);\nassert(tmp.data == cast(ubyte[16])[0,1,2,3,4,5,6,7,8,9,10,11,\n    12,13,14,15]);\n\n\n---\n",
						"name": "this"
					},
					{
						"kind": "template",
						"line": 359,
						"constraint": "isSomeChar!(Unqual!T)",
						"members": [
							{
								"kind": "constructor",
								"line": 359,
								"endchar": 9,
								"char": 9,
								"type": "(in T[] uuid)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "T[]",
										"name": "uuid"
									}
								],
								"name": "this",
								"endline": 416
							}
						],
						"char": 9,
						"parameters": [
							{
								"kind": "type",
								"name": "T"
							}
						],
						"comment": " <a name=\"UUID(string)\"></a>\n Parse a UUID from its canonical string form. An UUID in its\n canonical form looks like this: 8ab3060e-2cba-4f23-b74c-b52db3bdfb46\n\n Throws:\n $(LREF UUIDParsingException) if the input is invalid\n\n CTFE:\n This function is supported in CTFE code. Note that error messages\n caused by a malformed UUID parsed at compile time can be cryptic,\n but errors are detected and reported at\n compile time.\n\n Note:\n This is a strict parser. It only accepts the pattern above.\n It doesn't support any leading or trailing characters. It only\n accepts characters used for hex numbers and the string must have\n hyphens exactly like above.\n\n For a less strict parser, see $(LREF parseUUID)\n\n Examples:\n -------------------------\n id = UUID(\"8AB3060E-2cba-4f23-b74c-b52db3bdfb46\");\n assert(id.data == [138, 179, 6, 14, 44, 186, 79, 35, 183, 76,\n    181, 45, 179, 189, 251, 70]);\n assert(id.toString() == \"8ab3060e-2cba-4f23-b74c-b52db3bdfb46\");\n\n //Can also be used in CTFE, for example as UUID literals:\n enum ctfeID = UUID(\"8ab3060e-2cba-4f23-b74c-b52db3bdfb46\");\n //here parsing is done at compile time, no runtime overhead!\n -------------------------\n",
						"name": "this"
					},
					{
						"kind": "function",
						"line": 480,
						"deco": "xFNaNbNdNiNeZb",
						"endchar": 9,
						"char": 52,
						"name": "empty",
						"comment": " Returns true if and only if the UUID is equal\n to {00000000-0000-0000-0000-000000000000}\nExample:\n\n---\nUUID id;\nassert(id.empty);\nid = UUID(\"00000000-0000-0000-0000-000000000001\");\nassert(!id.empty);\n\n\n---\n",
						"endline": 492
					},
					{
						"kind": "function",
						"line": 542,
						"deco": "xFNaNbNdNiNfZE3std4uuid4UUID7Variant",
						"endchar": 9,
						"char": 52,
						"name": "variant",
						"comment": " RFC 4122 defines different internal data layouts for UUIDs.\n Returns the format used by this UUID.\n\n Note: Do not confuse this with $(XREF _variant, _Variant).\n The type of this property is $(MYREF3 std.uuid.UUID.Variant, _Variant).\n\n See_Also:\n $(MYREF3 UUID.Variant, Variant)\nExample:\n\n---\nassert(UUID(\"8ab3060e-2cba-4f23-b74c-b52db3bdfb46\").variant\n   == UUID.Variant.rfc4122);\n\n\n---\n",
						"endline": 559
					},
					{
						"kind": "function",
						"line": 602,
						"deco": "xFNaNbNdNiNfZE3std4uuid4UUID7Version",
						"endchar": 9,
						"char": 52,
						"name": "uuidVersion",
						"comment": " RFC 4122 defines different UUID versions. The version shows\n how a UUID was generated, e.g. a version 4 UUID was generated\n from a random number, a version 3 UUID from an MD5 hash of a name.\n Returns the version used by this UUID.\n\n See_Also:\n $(MYREF3 UUID.Version, Version)\nExample:\n\n---\nassert(UUID(\"8ab3060e-2cba-4f23-b74c-b52db3bdfb46\").uuidVersion\n    == UUID.Version.randomNumberBased);\n\n\n---\n",
						"endline": 619
					},
					{
						"kind": "function",
						"line": 657,
						"deco": "FNaNbNiNfKS3std4uuid4UUIDZv",
						"endchar": 9,
						"char": 39,
						"parameters": [
							{
								"deco": "S3std4uuid4UUID",
								"storageClass": [
									"ref"
								],
								"name": "rhs"
							}
						],
						"name": "swap",
						"comment": " Swap the data of this UUID with the data of rhs.\nExample:\n\n---\nimmutable ubyte[16] data = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15];\nUUID u1;\nUUID u2 = UUID(data);\nu1.swap(u2);\n\nassert(u1 == UUID(data));\nassert(u2 == UUID.init);\n\n\n---\n",
						"endline": 662
					},
					{
						"kind": "function",
						"line": 680,
						"deco": "xFNaNbNiNfxS3std4uuid4UUIDZb",
						"endchar": 9,
						"char": 39,
						"parameters": [
							{
								"deco": "xS3std4uuid4UUID",
								"name": "s"
							}
						],
						"name": "opEquals",
						"comment": " All of the standard numeric operators are defined for\n the UUID struct.\nExample:\n\n---\n//compare UUIDs\nassert(UUID(\"00000000-0000-0000-0000-000000000000\") == UUID.init);\n\n//UUIDs in associative arrays:\nint[UUID] test = [UUID(\"8a94f585-d180-44f7-8929-6fca0189c7d0\") : 1,\n    UUID(\"7c351fd4-b860-4ee3-bbdc-7f79f3dfb00a\") : 2,\n    UUID(\"9ac0a4e5-10ee-493a-86fc-d29eeb82ecc1\") : 3];\n\nassert(test[UUID(\"9ac0a4e5-10ee-493a-86fc-d29eeb82ecc1\")] == 3);\n\n//UUIDS can be sorted:\nimport std.algorithm;\nUUID[] ids = [UUID(\"8a94f585-d180-44f7-8929-6fca0189c7d0\"),\n              UUID(\"7c351fd4-b860-4ee3-bbdc-7f79f3dfb00a\"),\n              UUID(\"9ac0a4e5-10ee-493a-86fc-d29eeb82ecc1\")];\nsort(ids);\n\n\n---\n",
						"originalType": "const pure nothrow @nogc @safe bool(in UUID s)",
						"endline": 683
					},
					{
						"kind": "function",
						"line": 709,
						"deco": "xFNaNbNiNfKxS3std4uuid4UUIDZb",
						"endchar": 9,
						"char": 39,
						"parameters": [
							{
								"deco": "xS3std4uuid4UUID",
								"storageClass": [
									"ref"
								],
								"name": "s"
							}
						],
						"name": "opEquals",
						"comment": " ditto\n",
						"originalType": "const pure nothrow @nogc @safe bool(ref UUID s)",
						"endline": 712
					},
					{
						"kind": "function",
						"line": 717,
						"deco": "xFNaNbNiNfxS3std4uuid4UUIDZi",
						"endchar": 9,
						"char": 38,
						"parameters": [
							{
								"deco": "xS3std4uuid4UUID",
								"name": "s"
							}
						],
						"name": "opCmp",
						"comment": " ditto\n",
						"originalType": "const pure nothrow @nogc @safe int(in UUID s)",
						"endline": 721
					},
					{
						"kind": "function",
						"line": 726,
						"deco": "xFNaNbNiNfKxS3std4uuid4UUIDZi",
						"endchar": 9,
						"char": 38,
						"parameters": [
							{
								"deco": "xS3std4uuid4UUID",
								"storageClass": [
									"ref"
								],
								"name": "s"
							}
						],
						"name": "opCmp",
						"comment": " ditto\n",
						"originalType": "const pure nothrow @nogc @safe int(ref UUID s)",
						"endline": 730
					},
					{
						"kind": "function",
						"line": 735,
						"deco": "xFNaNbNiNfZm",
						"endchar": 9,
						"char": 41,
						"name": "toHash",
						"comment": " ditto\n",
						"originalType": "const pure nothrow @nogc @safe size_t()",
						"endline": 742
					},
					{
						"kind": "function",
						"line": 799,
						"deco": "xFMDFAxaZvZv",
						"endchar": 9,
						"char": 14,
						"parameters": [
							{
								"deco": "DFAxaZv",
								"storageClass": [
									"scope"
								],
								"name": "sink"
							}
						],
						"name": "toString",
						"comment": " Return the UUID as a string in the canonical form.\nExample:\n\n---\nimmutable str = \"8ab3060e-2cba-4f23-b74c-b52db3bdfb46\";\nauto id = UUID(str);\nassert(id.toString() == str);\n\n\n---\n",
						"endline": 802
					},
					{
						"kind": "function",
						"line": 805,
						"deco": "xFNaNbNfZAya",
						"endchar": 9,
						"char": 35,
						"name": "toString",
						"comment": "ditto\n",
						"endline": 808
					}
				],
				"char": 8,
				"name": "UUID",
				"comment": "\n"
			},
			{
				"kind": "function",
				"line": 868,
				"deco": "FNaNbNiNfxAaxS3std4uuid4UUIDZS3std4uuid4UUID",
				"endchar": 1,
				"char": 31,
				"parameters": [
					{
						"deco": "xAa",
						"name": "name"
					},
					{
						"deco": "xS3std4uuid4UUID",
						"default": "UUID([cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u])",
						"name": "namespace"
					}
				],
				"name": "md5UUID",
				"comment": " This function generates a name based (Version 3) UUID from a namespace UUID and a name.\n If no namespace UUID was passed, the empty UUID $(D UUID.init) is used.\n\n Note:\n The default namespaces ($(LREF dnsNamespace), ...) defined by\n this module should be used when appropriate.\n\n RFC 4122 recommends to use Version 5 UUIDs (SHA-1) instead of Version 3\n UUIDs (MD5) for new applications.\n\n CTFE:\n CTFE is not supported.\n\n Note:\n RFC 4122 isn't very clear on how UUIDs should be generated from names.\n It is possible that different implementations return different UUIDs\n for the same input, so be warned. The implementation for UTF-8 strings\n and byte arrays used by $(D std.uuid) is compatible with Boost's implementation.\n $(D std.uuid) guarantees that the same input to this function will generate\n the same output at any time, on any system (this especially means endianness\n doesn't matter).\n\n Note:\n This function does not provide overloads for wstring and dstring, as\n there's no clear answer on how that should be implemented. It could be\n argued, that string, wstring and dstring input should have the same output,\n but that wouldn't be compatible with Boost, which generates different output\n for strings and wstrings. It's always possible to pass wstrings and dstrings\n by using the ubyte[] function overload (but be aware of endianness issues!).\nExample:\n\n---\n//Use default UUID.init namespace\nauto simpleID = md5UUID(\"test.uuid.any.string\");\n\n//use a name-based id as namespace\nauto namespace = md5UUID(\"my.app\");\nauto id = md5UUID(\"some-description\", namespace);\n\n---\n",
				"originalType": "pure nothrow @nogc @safe UUID(const(char[]) name, const UUID namespace = UUID.init)",
				"endline": 871
			},
			{
				"kind": "function",
				"line": 876,
				"deco": "FNaNbNiNfxAhxS3std4uuid4UUIDZS3std4uuid4UUID",
				"endchar": 1,
				"char": 31,
				"parameters": [
					{
						"deco": "xAh",
						"name": "data"
					},
					{
						"deco": "xS3std4uuid4UUID",
						"default": "UUID([cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u])",
						"name": "namespace"
					}
				],
				"name": "md5UUID",
				"comment": " ditto\n",
				"originalType": "pure nothrow @nogc @safe UUID(const(ubyte[]) data, const UUID namespace = UUID.init)",
				"endline": 905
			},
			{
				"kind": "function",
				"line": 981,
				"deco": "FNaNbNiNfxAaxS3std4uuid4UUIDZS3std4uuid4UUID",
				"endchar": 1,
				"char": 31,
				"parameters": [
					{
						"deco": "xAa",
						"name": "name"
					},
					{
						"deco": "xS3std4uuid4UUID",
						"default": "UUID([cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u])",
						"name": "namespace"
					}
				],
				"name": "sha1UUID",
				"comment": " This function generates a name based (Version 5) UUID from a namespace\n UUID and a name.\n If no namespace UUID was passed, the empty UUID $(D UUID.init) is used.\n\n Note:\n The default namespaces ($(LREF dnsNamespace), ...) defined by\n this module should be used when appropriate.\n\n CTFE:\n CTFE is not supported.\n\n Note:\n RFC 4122 isn't very clear on how UUIDs should be generated from names.\n It is possible that different implementations return different UUIDs\n for the same input, so be warned. The implementation for UTF-8 strings\n and byte arrays used by $(D std.uuid) is compatible with Boost's implementation.\n $(D std.uuid) guarantees that the same input to this function will generate\n the same output at any time, on any system (this especially means endianness\n doesn't matter).\n\n Note:\n This function does not provide overloads for wstring and dstring, as\n there's no clear answer on how that should be implemented. It could be\n argued, that string, wstring and dstring input should have the same output,\n but that wouldn't be compatible with Boost, which generates different output\n for strings and wstrings. It's always possible to pass wstrings and dstrings\n by using the ubyte[] function overload (but be aware of endianness issues!).\nExample:\n\n---\n//Use default UUID.init namespace\nauto simpleID = sha1UUID(\"test.uuid.any.string\");\n\n//use a name-based id as namespace\nauto namespace = sha1UUID(\"my.app\");\nauto id = sha1UUID(\"some-description\", namespace);\n\n---\n",
				"originalType": "pure nothrow @nogc @safe UUID(in char[] name, const UUID namespace = UUID.init)",
				"endline": 984
			},
			{
				"kind": "function",
				"line": 989,
				"deco": "FNaNbNiNfxAhxS3std4uuid4UUIDZS3std4uuid4UUID",
				"endchar": 1,
				"char": 31,
				"parameters": [
					{
						"deco": "xAh",
						"name": "data"
					},
					{
						"deco": "xS3std4uuid4UUID",
						"default": "UUID([cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u, cast(ubyte)0u])",
						"name": "namespace"
					}
				],
				"name": "sha1UUID",
				"comment": " ditto\n",
				"originalType": "pure nothrow @nogc @safe UUID(in ubyte[] data, const UUID namespace = UUID.init)",
				"endline": 1019
			},
			{
				"kind": "function",
				"line": 1069,
				"deco": "FNfZS3std4uuid4UUID",
				"endchar": 1,
				"char": 12,
				"name": "randomUUID",
				"comment": " This function generates a random number based UUID from a random\n number generator.\n\n CTFE:\n This function is not supported at compile time.\n\n",
				"endline": 1073
			},
			{
				"kind": "template",
				"line": 1083,
				"constraint": "isInputRange!RNG && isIntegral!(ElementType!RNG)",
				"members": [
					{
						"kind": "function",
						"line": 1083,
						"endchar": 1,
						"char": 6,
						"type": "UUID(ref RNG randomGen)",
						"parameters": [
							{
								"storageClass": [
									"ref"
								],
								"type": "RNG",
								"name": "randomGen"
							}
						],
						"name": "randomUUID",
						"endline": 1112
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "RNG"
					}
				],
				"comment": " ditto\n\n Params:\n      randomGen = uniform RNG\n See_Also: $(XREF random, isUniformRNG)\nExample:\n\n---\nimport std.random : Xorshift192, unpredictableSeed;\n\n//simple call\nauto uuid = randomUUID();\n\n//provide a custom RNG. Must be seeded manually.\nXorshift192 gen;\n\ngen.seed(unpredictableSeed);\nauto uuid3 = randomUUID(gen);\n\n---\n",
				"name": "randomUUID"
			},
			{
				"kind": "template",
				"line": 1187,
				"constraint": "isSomeString!T",
				"members": [
					{
						"kind": "function",
						"line": 1187,
						"endchar": 1,
						"char": 6,
						"type": "UUID(T uuidString)",
						"parameters": [
							{
								"type": "T",
								"name": "uuidString"
							}
						],
						"name": "parseUUID",
						"endline": 1190
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": " This is a less strict parser compared to the parser used in the\n UUID constructor. It enforces the following rules:\n\n $(UL\n   $(LI hex numbers are always two hexdigits([0-9a-fA-F]))\n   $(LI there must be exactly 16 such pairs in the input, not less, not more)\n   $(LI there can be exactly one dash between two hex-pairs, but not more)\n   $(LI there can be multiple characters enclosing the 16 hex pairs,\n     as long as these characters do not contain [0-9a-fA-F])\n )\n\n Note:\n Like most parsers, it consumes its argument. This means:\n -------------------------\n string s = \"8AB3060E-2CBA-4F23-b74c-B52Db3BDFB46\";\n parseUUID(s);\n assert(s == \"\");\n -------------------------\n\n Throws:\n $(LREF UUIDParsingException) if the input is invalid\n\n CTFE:\n This function is supported in CTFE code. Note that error messages\n caused by a malformed UUID parsed at compile time can be cryptic,\n but errors are detected and reported at compile time.\nExample:\n\n---\nauto id = parseUUID(\"8AB3060E-2CBA-4F23-b74c-B52Db3BDFB46\");\n//no dashes\nid = parseUUID(\"8ab3060e2cba4f23b74cb52db3bdfb46\");\n//dashes at different positions\nid = parseUUID(\"8a-b3-06-0e2cba4f23b74c-b52db3bdfb-46\");\n//leading / trailing characters\nid = parseUUID(\"{8ab3060e-2cba-4f23-b74c-b52db3bdfb46}\");\n//unicode\nid = parseUUID(\"ü8ab3060e2cba4f23b74cb52db3bdfb46ü\");\n//multiple trailing/leading characters\nid = parseUUID(\"///8ab3060e2cba4f23b74cb52db3bdfb46||\");\n\n//Can also be used in CTFE, for example as UUID literals:\nenum ctfeID = parseUUID(\"8ab3060e-2cba-4f23-b74c-b52db3bdfb46\");\n//here parsing is done at compile time, no runtime overhead!\n\n---\n",
				"name": "parseUUID"
			},
			{
				"kind": "template",
				"line": 1193,
				"constraint": "isInputRange!Range && is(Unqual!(ElementType!Range) == dchar)",
				"members": [
					{
						"kind": "function",
						"line": 1193,
						"endchar": 1,
						"char": 6,
						"type": "UUID(ref Range uuidRange)",
						"parameters": [
							{
								"storageClass": [
									"ref"
								],
								"type": "Range",
								"name": "uuidRange"
							}
						],
						"name": "parseUUID",
						"endline": 1333
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "Range"
					}
				],
				"comment": "ditto\n",
				"name": "parseUUID"
			},
			{
				"kind": "variable",
				"line": 1498,
				"init": "UUID([cast(ubyte)107u, cast(ubyte)167u, cast(ubyte)184u, cast(ubyte)16u, cast(ubyte)157u, cast(ubyte)173u, cast(ubyte)17u, cast(ubyte)209u, cast(ubyte)128u, cast(ubyte)180u, cast(ubyte)0u, cast(ubyte)192u, cast(ubyte)79u, cast(ubyte)212u, cast(ubyte)48u, cast(ubyte)200u])",
				"storageClass": [
					"enum"
				],
				"deco": "S3std4uuid4UUID",
				"char": 6,
				"name": "dnsNamespace",
				"comment": " Default namespace from RFC 4122\n\n Name string is a fully-qualified domain name\n"
			},
			{
				"kind": "variable",
				"line": 1505,
				"init": "UUID([cast(ubyte)107u, cast(ubyte)167u, cast(ubyte)184u, cast(ubyte)17u, cast(ubyte)157u, cast(ubyte)173u, cast(ubyte)17u, cast(ubyte)209u, cast(ubyte)128u, cast(ubyte)180u, cast(ubyte)0u, cast(ubyte)192u, cast(ubyte)79u, cast(ubyte)212u, cast(ubyte)48u, cast(ubyte)200u])",
				"storageClass": [
					"enum"
				],
				"deco": "S3std4uuid4UUID",
				"char": 6,
				"name": "urlNamespace",
				"comment": " Default namespace from RFC 4122\n\n Name string is a URL\n"
			},
			{
				"kind": "variable",
				"line": 1512,
				"init": "UUID([cast(ubyte)107u, cast(ubyte)167u, cast(ubyte)184u, cast(ubyte)18u, cast(ubyte)157u, cast(ubyte)173u, cast(ubyte)17u, cast(ubyte)209u, cast(ubyte)128u, cast(ubyte)180u, cast(ubyte)0u, cast(ubyte)192u, cast(ubyte)79u, cast(ubyte)212u, cast(ubyte)48u, cast(ubyte)200u])",
				"storageClass": [
					"enum"
				],
				"deco": "S3std4uuid4UUID",
				"char": 6,
				"name": "oidNamespace",
				"comment": " Default namespace from RFC 4122\n\n Name string is an ISO OID\n"
			},
			{
				"kind": "variable",
				"line": 1519,
				"init": "UUID([cast(ubyte)107u, cast(ubyte)167u, cast(ubyte)184u, cast(ubyte)20u, cast(ubyte)157u, cast(ubyte)173u, cast(ubyte)17u, cast(ubyte)209u, cast(ubyte)128u, cast(ubyte)180u, cast(ubyte)0u, cast(ubyte)192u, cast(ubyte)79u, cast(ubyte)212u, cast(ubyte)48u, cast(ubyte)200u])",
				"storageClass": [
					"enum"
				],
				"deco": "S3std4uuid4UUID",
				"char": 6,
				"name": "x500Namespace",
				"comment": " Default namespace from RFC 4122\n\n Name string is an X.500 DN (in DER or a text output format)\n"
			},
			{
				"kind": "variable",
				"line": 1524,
				"init": "\"[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\"",
				"storageClass": [
					"enum"
				],
				"deco": "Aya",
				"char": 6,
				"name": "uuidRegex",
				"comment": " Regex string to extract UUIDs from text.\nExample:\n\n---\nimport std.algorithm;\nimport std.regex;\n\nstring test = \"Lorem ipsum dolor sit amet, consetetur \"~\n\"6ba7b814-9dad-11d1-80b4-00c04fd430c8 sadipscing \\n\"~\n\"elitr, sed diam nonumy eirmod tempor invidunt ut labore et dolore \\r\\n\"~\n\"magna aliquyam erat, sed diam voluptua. \"~\n\"8ab3060e-2cba-4f23-b74c-b52db3bdfb46 At vero eos et accusam et \"~\n\"justo duo dolores et ea rebum.\";\n\nauto r = regex(uuidRegex, \"g\");\nUUID[] found;\nforeach(c; match(test, r))\n{\n    found ~= UUID(c.hit);\n}\nassert(found == [\n    UUID(\"6ba7b814-9dad-11d1-80b4-00c04fd430c8\"),\n    UUID(\"8ab3060e-2cba-4f23-b74c-b52db3bdfb46\"),\n]);\n\n---\n"
			},
			{
				"kind": "class",
				"line": 1556,
				"base": "object.Exception",
				"members": [
					{
						"kind": "enum",
						"line": 1561,
						"members": [
							{
								"kind": "enum member",
								"line": 1563,
								"value": "0",
								"char": 9,
								"name": "unknown",
								"comment": "\n"
							},
							{
								"kind": "enum member",
								"line": 1564,
								"value": "1",
								"char": 9,
								"name": "tooLittle",
								"comment": "The passed in input was correct, but more input was expected.\n"
							},
							{
								"kind": "enum member",
								"line": 1565,
								"value": "2",
								"char": 9,
								"name": "tooMuch",
								"comment": "The input data is too long (There's no guarantee the first part of the data is valid)\n"
							},
							{
								"kind": "enum member",
								"line": 1566,
								"value": "3",
								"char": 9,
								"name": "invalidChar",
								"comment": "Encountered an invalid character\n"
							}
						],
						"char": 5,
						"baseDeco": "i",
						"name": "Reason",
						"comment": " The reason why parsing the UUID string failed (if known)\n"
					},
					{
						"kind": "variable",
						"line": 1570,
						"deco": "E3std4uuid20UUIDParsingException6Reason",
						"char": 12,
						"name": "reason",
						"comment": "ditto\n",
						"offset": 72
					},
					{
						"kind": "variable",
						"line": 1572,
						"deco": "Aya",
						"char": 12,
						"name": "input",
						"comment": "The original input string which should have been parsed.\n",
						"offset": 80
					},
					{
						"kind": "variable",
						"line": 1574,
						"deco": "m",
						"char": 12,
						"name": "position",
						"comment": "The position in the input string where the error occurred.\n",
						"originalType": "size_t",
						"offset": 96
					}
				],
				"char": 8,
				"name": "UUIDParsingException",
				"comment": " This exception is thrown if an error occurs when parsing a UUID\n from a string.\nExample:\n\n---\nauto ex = new UUIDParsingException(\"foo\", 10, UUIDParsingException.Reason.tooMuch);\nassert(ex.input == \"foo\");\nassert(ex.position == 10);\nassert(ex.reason == UUIDParsingException.Reason.tooMuch);\n\n---\n"
			}
		],
		"name": "std.uuid",
		"comment": " A $(LINK2 http://en.wikipedia.org/wiki/Universally_unique_identifier, UUID), or\n $(LINK2 http://en.wikipedia.org/wiki/Universally_unique_identifier, Universally unique identifier),\n is intended to uniquely identify information in a distributed environment\n without significant central coordination. It can be\n used to tag objects with very short lifetimes, or to reliably identify very\n persistent objects across a network.\n\n$(SCRIPT inhibitQuickIndex = 1;)\n\n$(DIVC quickindex,\n$(BOOKTABLE ,\n$(TR $(TH Category) $(TH Functions)\n)\n$(TR $(TDNW Parsing UUIDs)\n     $(TD $(MYREF parseUUID)\n          $(MYREF UUID)\n          $(MYREF UUIDParsingException)\n          $(MYREF uuidRegex)\n          )\n     )\n$(TR $(TDNW Generating UUIDs)\n     $(TD $(MYREF sha1UUID)\n          $(MYREF randomUUID)\n          $(MYREF md5UUID)\n          )\n     )\n$(TR $(TDNW Using UUIDs)\n     $(TD $(MYREF2 UUID.uuidVersion, uuidVersion)\n          $(MYREF2 UUID.variant, variant)\n          $(MYREF2 UUID.toString, toString)\n          $(MYREF2 UUID.data, data)\n          $(MYREF2 UUID.swap, swap)\n          $(MYREF2 UUID.opEquals, opEquals)\n          $(MYREF2 UUID.opCmp, opCmp)\n          $(MYREF2 UUID.toHash, toHash)\n          )\n     )\n$(TR $(TDNW UUID namespaces)\n     $(TD $(MYREF dnsNamespace)\n          $(MYREF urlNamespace)\n          $(MYREF oidNamespace)\n          $(MYREF x500Namespace)\n          )\n     )\n)\n)\n\n UUIDs have many applications. Some examples follow: Databases may use UUIDs to identify\n rows or records in order to ensure that they are unique across different\n databases, or for publication/subscription services. Network messages may be\n identified with a UUID to ensure that different parts of a message are put back together\n again. Distributed computing may use UUIDs to identify a remote procedure call.\n Transactions and classes involved in serialization may be identified by UUIDs.\n Microsoft's component object model (COM) uses UUIDs to distinguish different software\n component interfaces. UUIDs are inserted into documents from Microsoft Office programs.\n UUIDs identify audio or video streams in the Advanced Systems Format (ASF). UUIDs are\n also a basis for OIDs (object identifiers), and URNs (uniform resource name).\n\n An attractive feature of UUIDs when compared to alternatives is their relative small size,\n of 128 bits, or 16 bytes. Another is that the creation of UUIDs does not require\n a centralized authority.\n\n When UUIDs are generated by one of the defined mechanisms, they are either guaranteed\n to be unique, different from all other generated UUIDs (that is, it has never been\n generated before and it will never be generated again), or it is extremely likely\n to be unique (depending on the mechanism).\n\n For efficiency, UUID is implemented as a struct. UUIDs are therefore empty if not explicitly\n initialized. An UUID is empty if $(MYREF3 UUID.empty, empty) is true. Empty UUIDs are equal to\n $(D UUID.init), which is a UUID with all 16 bytes set to 0.\n Use UUID's constructors or the UUID generator functions to get an initialized UUID.\n\n This is a port of $(LINK2 http://www.boost.org/doc/libs/1_42_0/libs/uuid/uuid.html,\n boost._uuid) from the Boost project with some minor additions and API\n changes for a more D-like API.\n\n Examples:\n ------------------------\n UUID[] ids;\n ids ~= randomUUID();\n ids ~= md5UUID(\"test.name.123\");\n ids ~= sha1UUID(\"test.name.123\");\n\n foreach(entry; ids)\n {\n     assert(entry.variant == UUID.Variant.rfc4122);\n }\n\n assert(ids[0].uuidVersion == UUID.Version.randomNumberBased);\n assert(ids[1].toString() == \"22390768-cced-325f-8f0f-cfeaa19d0ccd\");\n assert(ids[1].data == [34, 57, 7, 104, 204, 237, 50, 95, 143, 15, 207,\n     234, 161, 157, 12, 205]);\n\n UUID id;\n assert(id.empty);\n\n ------------------------\n Standards:\n $(LINK2 http://www.ietf.org/rfc/rfc4122.txt, RFC 4122)\n\n See_Also:\n $(LINK http://en.wikipedia.org/wiki/Universally_unique_identifier)\n\n Copyright: Copyright Johannes Pfau 2011 - .\n License:   $(WEB www.boost.org/LICENSE_1_0.txt, Boost License 1.0).\n Authors:   Johannes Pfau\n Source:    $(PHOBOSSRC std/_uuid.d)\n\n Macros:\n MYREF2 = <a href=\"#$2\">$(TT $1)</a>&nbsp;\n MYREF3 = <a href=\"#$2\">$(D $1)</a>\n"
	},
	{
		"kind": "module",
		"file": "../phobos/std/array.d",
		"members": [
			{
				"kind": "template",
				"line": 89,
				"constraint": "isIterable!Range && !isNarrowString!Range && !isInfinite!Range",
				"members": [
					{
						"kind": "function",
						"line": 89,
						"endchar": 1,
						"char": 21,
						"type": "ForeachType!Range[](Range r)",
						"parameters": [
							{
								"type": "Range",
								"name": "r"
							}
						],
						"name": "array",
						"endline": 131
					}
				],
				"char": 21,
				"parameters": [
					{
						"kind": "type",
						"name": "Range"
					}
				],
				"comment": " Allocates an array and initializes it with copies of the elements\n of range $(D r).\n\n Narrow strings are handled as a special case in an overload.\n\n Params:\n      r = range (or aggregate with $(D opApply) function) whose elements are copied into the allocated array\n Returns:\n      allocated and initialized array\nExample:\n\n---\nauto a = array([1, 2, 3, 4, 5][]);\nassert(a == [ 1, 2, 3, 4, 5 ]);\n\n---\n",
				"name": "array"
			},
			{
				"kind": "template",
				"line": 191,
				"constraint": "isNarrowString!String",
				"members": [
					{
						"kind": "function",
						"line": 191,
						"endchar": 1,
						"char": 22,
						"type": "ElementType!String[](String str)",
						"parameters": [
							{
								"type": "String",
								"name": "str"
							}
						],
						"name": "array",
						"endline": 195
					}
				],
				"char": 22,
				"parameters": [
					{
						"kind": "type",
						"name": "String"
					}
				],
				"comment": "Convert a narrow string to an array type that fully supports random access.\nThis is handled as a special case and always returns a $(D dchar[]),\n$(D const(dchar)[]), or $(D immutable(dchar)[]) depending on the constness of\nthe input.\n",
				"name": "array"
			},
			{
				"kind": "template",
				"line": 334,
				"constraint": "isInputRange!Range",
				"members": [
					{
						"kind": "function",
						"line": 334,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "(Range r)",
						"parameters": [
							{
								"type": "Range",
								"name": "r"
							}
						],
						"name": "assocArray",
						"endline": 350
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "Range"
					}
				],
				"comment": "Returns a newly allocated associative _array from a range of key/value tuples.\nParams: r = An input range of tuples of keys and values.\nReturns: A newly allocated associative array out of elements of the input\nrange, which must be a range of tuples (Key, Value).\nSee_Also: $(XREF typecons, Tuple)\nExample:\n\n---\nimport std.range;\nimport std.typecons;\nauto a = assocArray(zip([0, 1, 2], [\"a\", \"b\", \"c\"]));\nassert(is(typeof(a) == string[int]));\nassert(a == [0:\"a\", 1:\"b\", 2:\"c\"]);\n\nauto b = assocArray([ tuple(\"foo\", \"bar\"), tuple(\"baz\", \"quux\") ]);\nassert(is(typeof(b) == string[string]));\nassert(b == [\"foo\":\"bar\", \"baz\":\"quux\"]);\n\n---\n",
				"name": "assocArray"
			},
			{
				"kind": "template",
				"line": 393,
				"members": [
					{
						"kind": "function",
						"line": 393,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "(Value[Key] aa)",
						"parameters": [
							{
								"type": "Value[Key]",
								"name": "aa"
							}
						],
						"name": "byPair",
						"endline": 399
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "Key"
					},
					{
						"kind": "type",
						"name": "Value"
					}
				],
				"comment": "Construct a range iterating over an associative array by key/value tuples.\n\nParams: aa = The associative array to iterate over.\n\nReturns: A forward range of Tuple's of key and value pairs from the given\nassociative array.\nExample:\n\n---\nimport std.typecons : tuple, Tuple;\nimport std.algorithm : sort;\n\nauto aa = [\"a\": 1, \"b\": 2, \"c\": 3];\nTuple!(string, int)[] pairs;\n\n// Iteration over key/value pairs.\nforeach (pair; aa.byPair)\n{\n    pairs ~= pair;\n}\n\n// Iteration order is implementation-dependent, so we should sort it to get\n// a fixed order.\nsort(pairs);\nassert(pairs == [\n    tuple(\"a\", 1),\n    tuple(\"b\", 2),\n    tuple(\"c\", 3)\n]);\n\n---\n",
				"name": "byPair"
			},
			{
				"kind": "template",
				"line": 495,
				"constraint": "isDynamicArray!T && allSatisfy!(isIntegral, I) && hasIndirections!(ElementEncodingType!T)",
				"members": [
					{
						"kind": "function",
						"line": 495,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "nothrow @system (I sizes)",
						"parameters": [
							{
								"type": "I",
								"name": "sizes"
							}
						],
						"name": "uninitializedArray",
						"endline": 509
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "tuple",
						"name": "I"
					}
				],
				"comment": "Returns a new array of type $(D T) allocated on the garbage collected heap\nwithout initializing its elements.  This can be a useful optimization if every\nelement will be immediately initialized.  $(D T) may be a multidimensional\narray.  In this case sizes may be specified for any number of dimensions from 0\nto the number in $(D T).\n\nuninitializedArray is nothrow and weakly pure.\n\nuninitializedArray is @system if the uninitialized element type has pointers.\n",
				"name": "uninitializedArray"
			},
			{
				"kind": "template",
				"line": 512,
				"constraint": "isDynamicArray!T && allSatisfy!(isIntegral, I) && !hasIndirections!(ElementEncodingType!T)",
				"members": [
					{
						"kind": "function",
						"line": 512,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "nothrow @trusted (I sizes)",
						"parameters": [
							{
								"type": "I",
								"name": "sizes"
							}
						],
						"name": "uninitializedArray",
						"endline": 526
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "tuple",
						"name": "I"
					}
				],
				"comment": "\nExample:\n\n---\ndouble[] arr = uninitializedArray!(double[])(100);\nassert(arr.length == 100);\n\ndouble[][] matrix = uninitializedArray!(double[][])(42, 31);\nassert(matrix.length == 42);\nassert(matrix[0].length == 31);\n\nchar*[] ptrs = uninitializedArray!(char*[])(100);\nassert(ptrs.length == 100);\n\n---\n",
				"name": "uninitializedArray"
			},
			{
				"kind": "template",
				"line": 550,
				"constraint": "isDynamicArray!T && allSatisfy!(isIntegral, I)",
				"members": [
					{
						"kind": "function",
						"line": 550,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "nothrow @trusted (I sizes)",
						"parameters": [
							{
								"type": "I",
								"name": "sizes"
							}
						],
						"name": "minimallyInitializedArray",
						"endline": 563
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "tuple",
						"name": "I"
					}
				],
				"comment": "Returns a new array of type $(D T) allocated on the garbage collected heap.\n\nPartial initialization is done for types with indirections, for preservation\nof memory safety. Note that elements will only be initialized to 0, but not\nnecessarily the element type's $(D .init).\n\nminimallyInitializedArray is nothrow and weakly pure.\nExample:\n\n---\nint[] a = [ 10, 11, 12, 13, 14 ];\nint[] b = a[1 .. 3];\nassert(overlap(a, b) == [ 11, 12 ]);\nb = b.dup;\n// overlap disappears even though the content is the same\nassert(overlap(a, b).empty);\n\n---\n",
				"name": "minimallyInitializedArray"
			},
			{
				"kind": "template",
				"line": 925,
				"constraint": "!isSomeString!(T[]) && allSatisfy!(isInputRangeOrConvertible!T, U) && U.length > 0",
				"members": [
					{
						"kind": "function",
						"line": 925,
						"endchar": 1,
						"char": 6,
						"type": "void(ref T[] array, size_t pos, U stuff)",
						"parameters": [
							{
								"storageClass": [
									"ref"
								],
								"type": "T[]",
								"name": "array"
							},
							{
								"type": "size_t",
								"name": "pos"
							},
							{
								"type": "U",
								"name": "stuff"
							}
						],
						"name": "insertInPlace",
						"endline": 981
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "tuple",
						"name": "U"
					}
				],
				"comment": "    Inserts $(D stuff) (which must be an input range or any number of\n    implicitly convertible items) in $(D array) at position $(D pos).\n\nExample:\n\n---\nint[] a = [ 1, 2, 3, 4 ];\na.insertInPlace(2, [ 1, 2 ]);\nassert(a == [ 1, 2, 1, 2, 3, 4 ]);\na.insertInPlace(3, 10u, 11);\nassert(a == [ 1, 2, 1, 10, 11, 2, 3, 4]);\n\n---\n",
				"name": "insertInPlace"
			},
			{
				"kind": "template",
				"line": 984,
				"constraint": "isSomeString!(T[]) && allSatisfy!(isCharOrStringOrDcharRange, U)",
				"members": [
					{
						"kind": "function",
						"line": 984,
						"endchar": 1,
						"char": 6,
						"type": "void(ref T[] array, size_t pos, U stuff)",
						"parameters": [
							{
								"storageClass": [
									"ref"
								],
								"type": "T[]",
								"name": "array"
							},
							{
								"type": "size_t",
								"name": "pos"
							},
							{
								"type": "U",
								"name": "stuff"
							}
						],
						"name": "insertInPlace",
						"endline": 1071
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "tuple",
						"name": "U"
					}
				],
				"comment": "Ditto\n",
				"name": "insertInPlace"
			},
			{
				"kind": "template",
				"line": 1288,
				"members": [
					{
						"kind": "function",
						"line": 1288,
						"endchar": 1,
						"char": 19,
						"type": "pure nothrow @safe bool(in T[] lhs, in T[] rhs)",
						"parameters": [
							{
								"storageClass": [
									"in"
								],
								"type": "T[]",
								"name": "lhs"
							},
							{
								"storageClass": [
									"in"
								],
								"type": "T[]",
								"name": "rhs"
							}
						],
						"name": "sameHead",
						"endline": 1291
					}
				],
				"char": 19,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": "    Returns whether the $(D front)s of $(D lhs) and $(D rhs) both refer to the\n    same place in memory, making one of the arrays a slice of the other which\n    starts at index $(D 0).\n",
				"name": "sameHead"
			},
			{
				"kind": "template",
				"line": 1300,
				"members": [
					{
						"kind": "function",
						"line": 1300,
						"endchar": 1,
						"char": 19,
						"type": "pure nothrow @trusted bool(in T[] lhs, in T[] rhs)",
						"parameters": [
							{
								"storageClass": [
									"in"
								],
								"type": "T[]",
								"name": "lhs"
							},
							{
								"storageClass": [
									"in"
								],
								"type": "T[]",
								"name": "rhs"
							}
						],
						"name": "sameTail",
						"endline": 1303
					}
				],
				"char": 19,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": "    Returns whether the $(D back)s of $(D lhs) and $(D rhs) both refer to the\n    same place in memory, making one of the arrays a slice of the other which\n    end at index $(D $).\n",
				"name": "sameTail"
			},
			{
				"kind": "template",
				"line": 1338,
				"constraint": "isDynamicArray!S",
				"members": [
					{
						"kind": "function",
						"line": 1338,
						"endchar": 1,
						"char": 25,
						"type": "ElementEncodingType!S[](S s, size_t n)",
						"parameters": [
							{
								"type": "S",
								"name": "s"
							},
							{
								"type": "size_t",
								"name": "n"
							}
						],
						"name": "replicate",
						"endline": 1359
					}
				],
				"char": 25,
				"parameters": [
					{
						"kind": "type",
						"name": "S"
					}
				],
				"comment": "Returns an array that consists of $(D s) (which must be an input\nrange) repeated $(D n) times. This function allocates, fills, and\nreturns a new array. For a lazy version, refer to $(XREF range, repeat).\n",
				"name": "replicate"
			},
			{
				"kind": "template",
				"line": 1362,
				"constraint": "isInputRange!S && !isDynamicArray!S",
				"members": [
					{
						"kind": "function",
						"line": 1362,
						"endchar": 1,
						"char": 17,
						"type": "ElementType!S[](S s, size_t n)",
						"parameters": [
							{
								"type": "S",
								"name": "s"
							},
							{
								"type": "size_t",
								"name": "n"
							}
						],
						"name": "replicate",
						"endline": 1367
					}
				],
				"char": 17,
				"parameters": [
					{
						"kind": "type",
						"name": "S"
					}
				],
				"comment": "ditto\n",
				"name": "replicate"
			},
			{
				"kind": "template",
				"line": 1402,
				"constraint": "isSomeString!S",
				"members": [
					{
						"kind": "function",
						"line": 1402,
						"endchar": 1,
						"char": 5,
						"type": "pure @safe S[](S s)",
						"parameters": [
							{
								"type": "S",
								"name": "s"
							}
						],
						"name": "split",
						"endline": 1432
					}
				],
				"char": 5,
				"parameters": [
					{
						"kind": "type",
						"name": "S"
					}
				],
				"comment": "Eagerly split the string $(D s) into an array of words, using whitespace as\ndelimiter. Runs of whitespace are merged together (no empty words are produced).\n\n$(D @safe), $(D pure) and $(D CTFE)-able.\n\nSee_Also:\n$(XREF algorithm, splitter) for a version that splits using any separator.\n\n$(XREF regex, splitter) for a version that splits using a regular\nexpression defined separator.\n",
				"name": "split"
			},
			{
				"kind": "alias",
				"line": 1482,
				"storageClass": [
					"deprecated"
				],
				"char": 1,
				"name": "splitter",
				"comment": "Alias for $(XREF algorithm, _splitter).\n"
			},
			{
				"kind": "template",
				"line": 1508,
				"constraint": "isForwardRange!Range && is(typeof(ElementType!Range.init == Separator.init))",
				"members": [
					{
						"kind": "function",
						"line": 1508,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "(Range range, Separator sep)",
						"parameters": [
							{
								"type": "Range",
								"name": "range"
							},
							{
								"type": "Separator",
								"name": "sep"
							}
						],
						"name": "split",
						"endline": 1513
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "Range"
					},
					{
						"kind": "type",
						"name": "Separator"
					}
				],
				"comment": "    Eagerly splits $(D range) into an array, using $(D sep) as the delimiter.\n\n    The range must be a $(XREF2 range, isForwardRange, forward range).\n    The separator can be a value of the same type as the elements in $(D range) or\n    it can be another forward range.\n\n    Examples:\n        If $(D range) is a $(D string), $(D sep) can be a $(D char) or another\n        $(D string). The return type will be an array of strings. If $(D range) is\n        an $(D int) array, $(D sep) can be an $(D int) or another $(D int) array.\n        The return type will be an array of $(D int) arrays.\n\n    Params:\n        range = a forward range.\n        sep = a value of the same type as the elements of $(D range) or another\n        forward range.\n\n    Returns:\n        An array containing the divided parts of $(D range).\n\n    See_Also:\n        $(XREF algorithm, splitter) for the lazy version of this function.\n",
				"name": "split"
			},
			{
				"kind": "template",
				"line": 1515,
				"constraint": "isForwardRange!Range && isForwardRange!Separator && is(typeof(ElementType!Range.init == ElementType!Separator.init))",
				"members": [
					{
						"kind": "function",
						"line": 1515,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "(Range range, Separator sep)",
						"parameters": [
							{
								"type": "Range",
								"name": "range"
							},
							{
								"type": "Separator",
								"name": "sep"
							}
						],
						"name": "split",
						"endline": 1520
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "Range"
					},
					{
						"kind": "type",
						"name": "Separator"
					}
				],
				"comment": "ditto\n",
				"name": "split"
			},
			{
				"kind": "template",
				"line": 1522,
				"constraint": "isForwardRange!Range && is(typeof(unaryFun!isTerminator(range.front)))",
				"members": [
					{
						"kind": "function",
						"line": 1522,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "(Range range)",
						"parameters": [
							{
								"type": "Range",
								"name": "range"
							}
						],
						"name": "split",
						"endline": 1527
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "alias",
						"name": "isTerminator"
					},
					{
						"kind": "type",
						"name": "Range"
					}
				],
				"comment": "ditto\n",
				"name": "split"
			},
			{
				"kind": "template",
				"line": 1607,
				"constraint": "isInputRange!RoR && isInputRange!(Unqual!(ElementType!RoR)) && isInputRange!R && is(Unqual!(ElementType!(ElementType!RoR)) == Unqual!(ElementType!R))",
				"members": [
					{
						"kind": "function",
						"line": 1607,
						"endchar": 1,
						"char": 41,
						"type": "ElementEncodingType!(ElementType!RoR)[](RoR ror, R sep)",
						"parameters": [
							{
								"type": "RoR",
								"name": "ror"
							},
							{
								"type": "R",
								"name": "sep"
							}
						],
						"name": "join",
						"endline": 1675
					}
				],
				"char": 41,
				"parameters": [
					{
						"kind": "type",
						"name": "RoR"
					},
					{
						"kind": "type",
						"name": "R"
					}
				],
				"comment": "   Concatenates all of the ranges in $(D ror) together into one array using\n   $(D sep) as the separator if present.\n\n   Params:\n        ror = Range of Ranges of Elements\n        sep = Range of Elements\n\n   Returns:\n        an allocated array of Elements\n\n   See_Also:\n        $(XREF algorithm, joiner)\nExample:\n\n---\nassert(join([\"hello\", \"silly\", \"world\"], \" \") == \"hello silly world\");\nassert(join([\"hello\", \"silly\", \"world\"]) == \"hellosillyworld\");\n\nassert(join([[1, 2, 3], [4, 5]], [72, 73]) == [1, 2, 3, 72, 73, 4, 5]);\nassert(join([[1, 2, 3], [4, 5]]) == [1, 2, 3, 4, 5]);\n\nconst string[] arr = [\"apple\", \"banana\"];\nassert(arr.join(\",\") == \"apple,banana\");\nassert(arr.join() == \"applebanana\");\n\n---\n",
				"name": "join"
			},
			{
				"kind": "template",
				"line": 1684,
				"constraint": "isInputRange!RoR && isInputRange!(Unqual!(ElementType!RoR)) && is(E : ElementType!(ElementType!RoR))",
				"members": [
					{
						"kind": "function",
						"line": 1684,
						"endchar": 1,
						"char": 41,
						"type": "ElementEncodingType!(ElementType!RoR)[](RoR ror, E sep)",
						"parameters": [
							{
								"type": "RoR",
								"name": "ror"
							},
							{
								"type": "E",
								"name": "sep"
							}
						],
						"name": "join",
						"endline": 1747
					}
				],
				"char": 41,
				"parameters": [
					{
						"kind": "type",
						"name": "RoR"
					},
					{
						"kind": "type",
						"name": "E"
					}
				],
				"comment": "Ditto\n",
				"name": "join"
			},
			{
				"kind": "template",
				"line": 1756,
				"constraint": "isInputRange!RoR && isInputRange!(Unqual!(ElementType!RoR))",
				"members": [
					{
						"kind": "function",
						"line": 1756,
						"endchar": 1,
						"char": 41,
						"type": "ElementEncodingType!(ElementType!RoR)[](RoR ror)",
						"parameters": [
							{
								"type": "RoR",
								"name": "ror"
							}
						],
						"name": "join",
						"endline": 1789
					}
				],
				"char": 41,
				"parameters": [
					{
						"kind": "type",
						"name": "RoR"
					}
				],
				"comment": "Ditto\n",
				"name": "join"
			},
			{
				"kind": "template",
				"line": 1987,
				"constraint": "isDynamicArray!(E[]) && isForwardRange!R1 && isForwardRange!R2 && (hasLength!R2 || isSomeString!R2)",
				"members": [
					{
						"kind": "function",
						"line": 1987,
						"endchar": 1,
						"char": 5,
						"type": "E[](E[] subject, R1 from, R2 to)",
						"parameters": [
							{
								"type": "E[]",
								"name": "subject"
							},
							{
								"type": "R1",
								"name": "from"
							},
							{
								"type": "R2",
								"name": "to"
							}
						],
						"name": "replace",
						"endline": 2003
					}
				],
				"char": 5,
				"parameters": [
					{
						"kind": "type",
						"name": "E"
					},
					{
						"kind": "type",
						"name": "R1"
					},
					{
						"kind": "type",
						"name": "R2"
					}
				],
				"comment": "    Replace occurrences of $(D from) with $(D to) in $(D subject). Returns a new\n    array without changing the contents of $(D subject), or the original array\n    if no match is found.\nExample:\n\n---\nassert(\"Hello Wörld\".replace(\"o Wö\", \"o Wo\") == \"Hello World\");\nassert(\"Hello Wörld\".replace(\"l\", \"h\") == \"Hehho Wörhd\");\n\n---\n",
				"name": "replace"
			},
			{
				"kind": "template",
				"line": 2016,
				"constraint": "isOutputRange!(Sink, E) && isDynamicArray!(E[]) && isForwardRange!R1 && isForwardRange!R2 && (hasLength!R2 || isSomeString!R2)",
				"members": [
					{
						"kind": "function",
						"line": 2016,
						"endchar": 1,
						"char": 6,
						"type": "void(Sink sink, E[] subject, R1 from, R2 to)",
						"parameters": [
							{
								"type": "Sink",
								"name": "sink"
							},
							{
								"type": "E[]",
								"name": "subject"
							},
							{
								"type": "R1",
								"name": "from"
							},
							{
								"type": "R2",
								"name": "to"
							}
						],
						"name": "replaceInto",
						"endline": 2038
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "E"
					},
					{
						"kind": "type",
						"name": "Sink"
					},
					{
						"kind": "type",
						"name": "R1"
					},
					{
						"kind": "type",
						"name": "R2"
					}
				],
				"comment": "    Same as above, but outputs the result via OutputRange $(D sink).\n    If no match is found the original array is transferred to $(D sink) as is.\n",
				"name": "replaceInto"
			},
			{
				"kind": "template",
				"line": 2100,
				"constraint": "isInputRange!Range && (is(ElementType!Range : T) || isSomeString!(T[]) && is(ElementType!Range : dchar))",
				"members": [
					{
						"kind": "function",
						"line": 2100,
						"endchar": 1,
						"char": 5,
						"type": "T[](T[] subject, size_t from, size_t to, Range stuff)",
						"parameters": [
							{
								"type": "T[]",
								"name": "subject"
							},
							{
								"type": "size_t",
								"name": "from"
							},
							{
								"type": "size_t",
								"name": "to"
							},
							{
								"type": "Range",
								"name": "stuff"
							}
						],
						"name": "replace",
						"endline": 2127
					}
				],
				"char": 5,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "type",
						"name": "Range"
					}
				],
				"comment": "    Replaces elements from $(D array) with indices ranging from $(D from)\n    (inclusive) to $(D to) (exclusive) with the range $(D stuff). Returns a new\n    array without changing the contents of $(D subject).\nExample:\n\n---\nauto a = [ 1, 2, 3, 4 ];\nauto b = a.replace(1, 3, [ 9, 9, 9 ]);\nassert(a == [ 1, 2, 3, 4 ]);\nassert(b == [ 1, 9, 9, 9, 4 ]);\n\n---\n",
				"name": "replace"
			},
			{
				"kind": "template",
				"line": 2216,
				"constraint": "isDynamicArray!Range && is(ElementEncodingType!Range : T) && !is(T == const(T)) && !is(T == immutable(T))",
				"members": [
					{
						"kind": "function",
						"line": 2216,
						"endchar": 1,
						"char": 6,
						"type": "void(ref T[] array, size_t from, size_t to, Range stuff)",
						"parameters": [
							{
								"storageClass": [
									"ref"
								],
								"type": "T[]",
								"name": "array"
							},
							{
								"type": "size_t",
								"name": "from"
							},
							{
								"type": "size_t",
								"name": "to"
							},
							{
								"type": "Range",
								"name": "stuff"
							}
						],
						"name": "replaceInPlace",
						"endline": 2246
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "type",
						"name": "Range"
					}
				],
				"comment": "    Replaces elements from $(D array) with indices ranging from $(D from)\n    (inclusive) to $(D to) (exclusive) with the range $(D stuff). Expands or\n    shrinks the array as needed.\nExample:\n\n---\nint[] a = [1, 4, 5];\nreplaceInPlace(a, 1u, 2u, [2, 3, 4]);\nassert(a == [1, 2, 3, 4, 5]);\nreplaceInPlace(a, 1u, 2u, cast(int[])[]);\nassert(a == [1, 3, 4, 5]);\nreplaceInPlace(a, 1u, 3u, a[2 .. 4]);\nassert(a == [1, 4, 5, 5]);\n\n---\n",
				"name": "replaceInPlace"
			},
			{
				"kind": "template",
				"line": 2249,
				"constraint": "isInputRange!Range && (!isDynamicArray!Range && is(ElementType!Range : T) || isDynamicArray!Range && is(ElementType!Range : T) && (is(T == const(T)) || is(T == immutable(T))) || isSomeString!(T[]) && is(ElementType!Range : dchar))",
				"members": [
					{
						"kind": "function",
						"line": 2249,
						"endchar": 1,
						"char": 6,
						"type": "void(ref T[] array, size_t from, size_t to, Range stuff)",
						"parameters": [
							{
								"storageClass": [
									"ref"
								],
								"type": "T[]",
								"name": "array"
							},
							{
								"type": "size_t",
								"name": "from"
							},
							{
								"type": "size_t",
								"name": "to"
							},
							{
								"type": "Range",
								"name": "stuff"
							}
						],
						"name": "replaceInPlace",
						"endline": 2257
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "type",
						"name": "Range"
					}
				],
				"comment": "Ditto\n",
				"name": "replaceInPlace"
			},
			{
				"kind": "template",
				"line": 2357,
				"constraint": "isDynamicArray!(E[]) && isForwardRange!R1 && is(typeof(appender!(E[])().put(from[0..1]))) && isForwardRange!R2 && is(typeof(appender!(E[])().put(to[0..1])))",
				"members": [
					{
						"kind": "function",
						"line": 2357,
						"endchar": 1,
						"char": 5,
						"type": "E[](E[] subject, R1 from, R2 to)",
						"parameters": [
							{
								"type": "E[]",
								"name": "subject"
							},
							{
								"type": "R1",
								"name": "from"
							},
							{
								"type": "R2",
								"name": "to"
							}
						],
						"name": "replaceFirst",
						"endline": 2392
					}
				],
				"char": 5,
				"parameters": [
					{
						"kind": "type",
						"name": "E"
					},
					{
						"kind": "type",
						"name": "R1"
					},
					{
						"kind": "type",
						"name": "R2"
					}
				],
				"comment": "    Replaces the first occurrence of $(D from) with $(D to) in $(D a). Returns a\n    new array without changing the contents of $(D subject), or the original\n    array if no match is found.\nExample:\n\n---\nauto a = [1, 2, 2, 3, 4, 5];\nauto b = a.replaceFirst([2], [1337]);\nassert(b == [1, 1337, 2, 3, 4, 5]);\n\nauto s = \"This is a foo foo list\";\nauto r = s.replaceFirst(\"foo\", \"silly\");\nassert(r == \"This is a silly foo list\");\n\n---\n",
				"name": "replaceFirst"
			},
			{
				"kind": "template",
				"line": 2457,
				"constraint": "isDynamicArray!(E[]) && isForwardRange!R1 && is(typeof(appender!(E[])().put(from[0..1]))) && isForwardRange!R2 && is(typeof(appender!(E[])().put(to[0..1])))",
				"members": [
					{
						"kind": "function",
						"line": 2457,
						"endchar": 1,
						"char": 5,
						"type": "E[](E[] subject, R1 from, R2 to)",
						"parameters": [
							{
								"type": "E[]",
								"name": "subject"
							},
							{
								"type": "R1",
								"name": "from"
							},
							{
								"type": "R2",
								"name": "to"
							}
						],
						"name": "replaceLast",
						"endline": 2500
					}
				],
				"char": 5,
				"parameters": [
					{
						"kind": "type",
						"name": "E"
					},
					{
						"kind": "type",
						"name": "R1"
					},
					{
						"kind": "type",
						"name": "R2"
					}
				],
				"comment": "    Replaces the last occurrence of $(D from) with $(D to) in $(D a). Returns a\n    new array without changing the contents of $(D subject), or the original\n    array if no match is found.\nExample:\n\n---\nauto a = [1, 2, 2, 3, 4, 5];\nauto b = a.replaceLast([2], [1337]);\nassert(b == [1, 2, 1337, 3, 4, 5]);\n\nauto s = \"This is a foo foo list\";\nauto r = s.replaceLast(\"foo\", \"silly\");\nassert(r == \"This is a foo silly list\", r);\n\n---\n",
				"name": "replaceLast"
			},
			{
				"kind": "template",
				"line": 2556,
				"members": [
					{
						"kind": "function",
						"line": 2556,
						"endchar": 1,
						"char": 12,
						"type": "inout(T)[](inout(T)[] s, in T[] slice, in T[] replacement)",
						"parameters": [
							{
								"type": "inout(T)[]",
								"name": "s"
							},
							{
								"storageClass": [
									"in"
								],
								"type": "T[]",
								"name": "slice"
							},
							{
								"storageClass": [
									"in"
								],
								"type": "T[]",
								"name": "replacement"
							}
						],
						"name": "replaceSlice",
						"endline": 2572
					}
				],
				"char": 12,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": "    Returns a new array that is $(D s) with $(D slice) replaced by\n    $(D replacement[]).\n",
				"name": "replaceSlice"
			},
			{
				"kind": "template",
				"line": 2593,
				"constraint": "isDynamicArray!A",
				"members": [
					{
						"kind": "struct",
						"line": 2593,
						"members": [
							{
								"kind": "constructor",
								"line": 2614,
								"endchar": 5,
								"char": 5,
								"type": "pure nothrow @trusted (T[] arr)",
								"parameters": [
									{
										"type": "T[]",
										"name": "arr"
									}
								],
								"name": "this",
								"comment": " Construct an appender with a given array.  Note that this does not copy the\n data.  If the array has a larger capacity as determined by arr.capacity,\n it will be used by the appender.  After initializing an appender on an array,\n appending to the original array will reallocate.\n",
								"endline": 2635
							},
							{
								"kind": "function",
								"line": 2658,
								"endchar": 5,
								"char": 10,
								"type": "pure nothrow @safe void(size_t newCapacity)",
								"parameters": [
									{
										"type": "size_t",
										"name": "newCapacity"
									}
								],
								"name": "reserve",
								"comment": " Reserve at least newCapacity elements for appending.  Note that more elements\n may be reserved than requested.  If newCapacity <= capacity, then nothing is\n done.\n",
								"endline": 2669
							},
							{
								"kind": "function",
								"line": 2676,
								"endchar": 5,
								"char": 22,
								"type": "const pure nothrow @property @safe size_t()",
								"name": "capacity",
								"comment": " Returns the capacity of the array (the maximum number of elements the\n managed array can accommodate before triggering a reallocation).  If any\n appending will reallocate, $(D capacity) returns $(D 0).\n",
								"endline": 2679
							},
							{
								"kind": "function",
								"line": 2684,
								"endchar": 5,
								"char": 26,
								"type": "inout pure nothrow @property @trusted inout(T)[]()",
								"name": "data",
								"comment": " Returns the managed array.\n",
								"endline": 2690
							},
							{
								"kind": "template",
								"line": 2772,
								"constraint": "canPutItem!U",
								"members": [
									{
										"kind": "function",
										"line": 2772,
										"endchar": 5,
										"char": 10,
										"type": "void(U item)",
										"parameters": [
											{
												"type": "U",
												"name": "item"
											}
										],
										"name": "put",
										"endline": 2797
									}
								],
								"char": 10,
								"parameters": [
									{
										"kind": "type",
										"name": "U"
									}
								],
								"comment": " Appends one item to the managed array.\n",
								"name": "put"
							},
							{
								"kind": "template",
								"line": 2809,
								"constraint": "canPutRange!Range",
								"members": [
									{
										"kind": "function",
										"line": 2809,
										"endchar": 5,
										"char": 10,
										"type": "void(Range items)",
										"parameters": [
											{
												"type": "Range",
												"name": "items"
											}
										],
										"name": "put",
										"endline": 2869
									}
								],
								"char": 10,
								"parameters": [
									{
										"kind": "type",
										"name": "Range"
									}
								],
								"comment": " Appends an entire range to the managed array.\n",
								"name": "put"
							},
							{
								"kind": "template",
								"line": 2874,
								"constraint": "canPutItem!U",
								"members": [
									{
										"kind": "function",
										"line": 2874,
										"endchar": 5,
										"char": 10,
										"type": "void(U item)",
										"parameters": [
											{
												"type": "U",
												"name": "item"
											}
										],
										"name": "opOpAssign",
										"endline": 2877
									}
								],
								"char": 10,
								"parameters": [
									{
										"kind": "value",
										"type": "string",
										"specValue": "\"~\"",
										"name": "op"
									},
									{
										"kind": "type",
										"name": "U"
									}
								],
								"comment": " Appends one item to the managed array.\n",
								"name": "opOpAssign"
							},
							{
								"kind": "template",
								"line": 2888,
								"constraint": "canPutRange!Range",
								"members": [
									{
										"kind": "function",
										"line": 2888,
										"endchar": 5,
										"char": 10,
										"type": "void(Range items)",
										"parameters": [
											{
												"type": "Range",
												"name": "items"
											}
										],
										"name": "opOpAssign",
										"endline": 2891
									}
								],
								"char": 10,
								"parameters": [
									{
										"kind": "value",
										"type": "string",
										"specValue": "\"~\"",
										"name": "op"
									},
									{
										"kind": "type",
										"name": "Range"
									}
								],
								"comment": " Appends an entire range to the managed array.\n",
								"name": "opOpAssign"
							}
						],
						"char": 1,
						"name": "Appender"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "A"
					}
				],
				"comment": "Implements an output range that appends data to an array. This is\nrecommended over $(D a ~= data) when appending many elements because it is more\nefficient.\nExample:\n\n---\nauto app = appender!string();\nstring b = \"abcdefg\";\nforeach (char c; b)\n    app.put(c);\nassert(app.data == \"abcdefg\");\n\nint[] a = [ 1, 2 ];\nauto app2 = appender(a);\napp2.put(3);\napp2.put([ 4, 5, 6 ]);\nassert(app2.data == [ 1, 2, 3, 4, 5, 6 ]);\n\n---\n",
				"name": "Appender"
			},
			{
				"kind": "template",
				"line": 2985,
				"constraint": "isDynamicArray!A",
				"members": [
					{
						"kind": "struct",
						"line": 2985,
						"members": [
							{
								"kind": "constructor",
								"line": 3005,
								"endchar": 5,
								"char": 5,
								"type": "(T[]* arr)",
								"parameters": [
									{
										"type": "T[]*",
										"name": "arr"
									}
								],
								"name": "this",
								"comment": " Construct a ref appender with a given array reference.  This does not copy the\n data.  If the array has a larger capacity as determined by arr.capacity, it\n will be used by the appender.  $(D RefAppender) assumes that arr is a non-null\n value.\n\n Note, do not use builtin appending (i.e. ~=) on the original array passed in\n until you are done with the appender, because calls to the appender override\n those appends.\n",
								"endline": 3009
							},
							{
								"kind": "template",
								"line": 3023,
								"constraint": "AppenderType.canPutItem!U",
								"members": [
									{
										"kind": "function",
										"line": 3023,
										"endchar": 5,
										"char": 10,
										"type": "void(U item)",
										"parameters": [
											{
												"type": "U",
												"name": "item"
											}
										],
										"name": "opOpAssign",
										"endline": 3027
									}
								],
								"char": 10,
								"parameters": [
									{
										"kind": "value",
										"type": "string",
										"specValue": "\"~\"",
										"name": "op"
									},
									{
										"kind": "type",
										"name": "U"
									}
								],
								"comment": " Appends one item to the managed array.\n",
								"name": "opOpAssign"
							},
							{
								"kind": "template",
								"line": 3039,
								"constraint": "AppenderType.canPutRange!Range",
								"members": [
									{
										"kind": "function",
										"line": 3039,
										"endchar": 5,
										"char": 10,
										"type": "void(Range items)",
										"parameters": [
											{
												"type": "Range",
												"name": "items"
											}
										],
										"name": "opOpAssign",
										"endline": 3043
									}
								],
								"char": 10,
								"parameters": [
									{
										"kind": "value",
										"type": "string",
										"specValue": "\"~\"",
										"name": "op"
									},
									{
										"kind": "type",
										"name": "Range"
									}
								],
								"comment": " Appends an entire range to the managed array.\n",
								"name": "opOpAssign"
							},
							{
								"kind": "function",
								"line": 3050,
								"endchar": 5,
								"char": 22,
								"type": "const @property size_t()",
								"name": "capacity",
								"comment": " Returns the capacity of the array (the maximum number of elements the\n managed array can accommodate before triggering a reallocation).  If any\n appending will reallocate, $(D capacity) returns $(D 0).\n",
								"endline": 3053
							},
							{
								"kind": "function",
								"line": 3058,
								"endchar": 5,
								"char": 26,
								"type": "inout @property inout(T)[]()",
								"name": "data",
								"comment": " Returns the managed array.\n",
								"endline": 3061
							}
						],
						"char": 1,
						"name": "RefAppender"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "A"
					}
				],
				"comment": " An appender that can update an array in-place.  It forwards all calls to an\n underlying appender implementation.  Any calls made to the appender also update\n the pointer to the original array passed in.\n",
				"name": "RefAppender"
			},
			{
				"kind": "template",
				"line": 3068,
				"constraint": "isDynamicArray!A",
				"members": [
					{
						"kind": "function",
						"line": 3068,
						"endchar": 1,
						"char": 12,
						"type": "Appender!A()",
						"name": "appender",
						"endline": 3072
					}
				],
				"char": 12,
				"parameters": [
					{
						"kind": "type",
						"name": "A"
					}
				],
				"comment": "    Convenience function that returns an $(D Appender!A) object initialized\n    with $(D array).\n",
				"name": "appender"
			},
			{
				"kind": "template",
				"line": 3074,
				"members": [
					{
						"kind": "function",
						"line": 3074,
						"endchar": 1,
						"char": 16,
						"type": "Appender!(E[])(auto ref A array)",
						"parameters": [
							{
								"storageClass": [
									"auto",
									"ref"
								],
								"type": "A",
								"name": "array"
							}
						],
						"name": "appender",
						"endline": 3080
					}
				],
				"char": 16,
				"parameters": [
					{
						"kind": "type",
						"type": "E[]",
						"name": "A"
					},
					{
						"kind": "type",
						"name": "E"
					}
				],
				"comment": "ditto\n",
				"name": "appender"
			},
			{
				"kind": "template",
				"line": 3444,
				"members": [
					{
						"kind": "function",
						"line": 3444,
						"endchar": 1,
						"char": 19,
						"type": "RefAppender!(E[])(A array)",
						"parameters": [
							{
								"type": "A",
								"name": "array"
							}
						],
						"name": "appender",
						"endline": 3447
					}
				],
				"char": 19,
				"parameters": [
					{
						"kind": "type",
						"type": "E[]*",
						"name": "A"
					},
					{
						"kind": "type",
						"name": "E"
					}
				],
				"comment": "    Convenience function that returns a $(D RefAppender!A) object initialized\n    with $(D array).  Don't use null for the $(D array) pointer, use the other\n    version of $(D appender) instead.\n",
				"name": "appender"
			}
		],
		"name": "std.array",
		"comment": "Functions and types that manipulate built-in arrays and associative arrays.\n\nThis module provides all kinds of functions to create, manipulate or convert arrays:\n\n$(BOOKTABLE ,\n$(TR $(TH Function Name) $(TH Description)\n)\n    $(TR $(TD $(D $(LREF _array)))\n        $(TD Returns a copy of the input in a newly allocated dynamic _array.\n    ))\n    $(TR $(TD $(D $(LREF appender)))\n        $(TD Returns a new Appender initialized with a given _array.\n    ))\n    $(TR $(TD $(D $(LREF assocArray)))\n        $(TD Returns a newly allocated associative _array from a range of key/value tuples.\n    ))\n    $(TR $(TD $(D $(LREF byPair)))\n        $(TD Construct a range iterating over an associative _array by key/value tuples.\n    ))\n    $(TR $(TD $(D $(LREF insertInPlace)))\n        $(TD Inserts into an existing _array at a given position.\n    ))\n    $(TR $(TD $(D $(LREF join)))\n        $(TD Concatenates a range of ranges into one _array.\n    ))\n    $(TR $(TD $(D $(LREF minimallyInitializedArray)))\n        $(TD Returns a new _array of type $(D T).\n    ))\n    $(TR $(TD $(D $(LREF replace)))\n        $(TD Returns a new _array with all occurrences of a certain subrange replaced.\n    ))\n    $(TR $(TD $(D $(LREF replaceFirst)))\n        $(TD Returns a new _array with the first occurrence of a certain subrange replaced.\n    ))\n    $(TR $(TD $(D $(LREF replaceInPlace)))\n        $(TD Replaces all occurrences of a certain subrange and puts the result into a given _array.\n    ))\n    $(TR $(TD $(D $(LREF replaceInto)))\n        $(TD Replaces all occurrences of a certain subrange and puts the result into an output range.\n    ))\n    $(TR $(TD $(D $(LREF replaceLast)))\n        $(TD Returns a new _array with the last occurrence of a certain subrange replaced.\n    ))\n    $(TR $(TD $(D $(LREF replaceSlice)))\n        $(TD Returns a new _array with a given slice replaced.\n    ))\n    $(TR $(TD $(D $(LREF replicate)))\n        $(TD Creates a new _array out of several copies of an input _array or range.\n    ))\n    $(TR $(TD $(D $(LREF split)))\n        $(TD Eagerly split a range or string into an _array.\n    ))\n    $(TR $(TD $(D $(LREF uninitializedArray)))\n        $(TD Returns a new _array of type $(D T) without initializing its elements.\n    ))\n)\n\nCopyright: Copyright Andrei Alexandrescu 2008- and Jonathan M Davis 2011-.\n\nLicense:   $(WEB boost.org/LICENSE_1_0.txt, Boost License 1.0).\n\nAuthors:   $(WEB erdani.org, Andrei Alexandrescu) and Jonathan M Davis\n\nSource: $(PHOBOSSRC std/_array.d)\n"
	},
	{
		"kind": "module",
		"file": "../phobos/std/uni.d",
		"members": [
			{
				"kind": "variable",
				"line": 690,
				"init": "'\\U00002028'",
				"storageClass": [
					"enum"
				],
				"deco": "w",
				"char": 19,
				"name": "lineSep",
				"comment": "Constant $(CODEPOINT) (0x2028) - line separator.\n"
			},
			{
				"kind": "variable",
				"line": 691,
				"init": "'\\U00002029'",
				"storageClass": [
					"enum"
				],
				"deco": "w",
				"char": 19,
				"name": "paraSep",
				"comment": "Constant $(CODEPOINT) (0x2029) - paragraph separator.\n"
			},
			{
				"kind": "variable",
				"line": 692,
				"init": "'\\x85'",
				"storageClass": [
					"enum"
				],
				"deco": "w",
				"char": 19,
				"name": "nelSep",
				"comment": "Constant $(CODEPOINT) (0x0085) - next line.\n"
			},
			{
				"kind": "template",
				"line": 1825,
				"members": [],
				"char": 8,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": "    Tests if T is some kind a set of code points. Intended for template constraints.\n",
				"name": "isCodepointSet"
			},
			{
				"kind": "template",
				"line": 1844,
				"members": [
					{
						"kind": "variable",
						"line": 1846,
						"init": "is(typeof((T x)\n{\nV a = x[0];\nV b = x[1];\n}\n)) && !is(typeof((T x)\n{\nV c = x[2];\n}\n))",
						"storageClass": [
							"enum"
						],
						"char": 10,
						"name": "isIntegralPair"
					}
				],
				"char": 8,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "type",
						"defaultDeco": "k",
						"name": "V"
					}
				],
				"comment": "    Tests if $(D T) is a pair of integers that implicitly convert to $(D V).\n    The following code must compile for any pair $(D T):\n    ---\n    (T x){ V a = x[0]; V b = x[1];}\n    ---\n    The following must not compile:\n     ---\n    (T x){ V c = x[2];}\n    ---\n",
				"name": "isIntegralPair"
			},
			{
				"kind": "alias",
				"line": 1855,
				"deco": "S3std3uni38__T13InversionListTS3std3uni8GcPolicyZ13InversionList",
				"char": 8,
				"name": "CodepointSet",
				"comment": "    The recommended default type for set of $(CODEPOINTS).\n    For details, see the current implementation: $(LREF InversionList).\n"
			},
			{
				"kind": "struct",
				"line": 1868,
				"members": [],
				"char": 8,
				"name": "CodepointInterval",
				"comment": "    The recommended type of $(XREF _typecons, Tuple)\n    to represent [a, b$(RPAREN) intervals of $(CODEPOINTS). As used in $(LREF InversionList).\n    Any interval type should pass $(LREF isIntegralPair) trait.\n"
			},
			{
				"kind": "template",
				"line": 1963,
				"members": [
					{
						"kind": "struct",
						"line": 1963,
						"members": [
							{
								"kind": "template",
								"line": 1972,
								"constraint": "isCodepointSet!Set",
								"members": [
									{
										"kind": "constructor",
										"line": 1972,
										"endchar": 5,
										"char": 5,
										"type": "pure (Set set)",
										"parameters": [
											{
												"type": "Set",
												"name": "set"
											}
										],
										"name": "this",
										"endline": 1982
									}
								],
								"char": 5,
								"parameters": [
									{
										"kind": "type",
										"name": "Set"
									}
								],
								"comment": "        Construct from another code point set of any type.\n",
								"name": "this"
							},
							{
								"kind": "template",
								"line": 1987,
								"constraint": "isForwardRange!Range && isIntegralPair!(ElementType!Range)",
								"members": [
									{
										"kind": "constructor",
										"line": 1987,
										"endchar": 5,
										"char": 5,
										"type": "pure (Range intervals)",
										"parameters": [
											{
												"type": "Range",
												"name": "intervals"
											}
										],
										"name": "this",
										"endline": 1998
									}
								],
								"char": 5,
								"parameters": [
									{
										"kind": "type",
										"name": "Range"
									}
								],
								"comment": "        Construct a set from a forward range of code point intervals.\n",
								"name": "this"
							},
							{
								"kind": "template",
								"line": 2047,
								"members": [
									{
										"kind": "constructor",
										"line": 2047,
										"endchar": 5,
										"char": 5,
										"type": "(uint[] intervals...)",
										"parameters": [
											{
												"type": "uint[]",
												"name": "intervals"
											}
										],
										"name": "this",
										"endline": 2062
									}
								],
								"char": 5,
								"parameters": [],
								"comment": "        Construct a set from plain values of code point intervals.\n        Example:\n        ---\n        import std.algorithm;\n        auto set = CodepointSet('a', 'z'+1, 'а', 'я'+1);\n        foreach(v; 'a'..'z'+1)\n            assert(set[v]);\n        // Cyrillic lowercase interval\n        foreach(v; 'а'..'я'+1)\n            assert(set[v]);\n        //specific order is not required, intervals may interesect\n        auto set2 = CodepointSet('а', 'я'+1, 'a', 'd', 'b', 'z'+1);\n        //the same end result\n        assert(set2.byInterval.equal(set.byInterval));\n        ---\n",
								"name": "this"
							},
							{
								"kind": "function",
								"line": 2074,
								"storageClass": [
									"auto"
								],
								"endchar": 5,
								"char": 20,
								"type": "@property ()",
								"name": "byInterval",
								"comment": "        Get range that spans all of the $(CODEPOINT) intervals in this $(LREF InversionList).\n\n        Example:\n        ---\n        import std.algorithm, std.typecons;\n        auto set = CodepointSet('A', 'D'+1, 'a', 'd'+1);\n        set.byInterval.equal([tuple('A', 'E'), tuple('a', 'e')]);\n        ---\n",
								"endline": 2077
							},
							{
								"kind": "function",
								"line": 2091,
								"endchar": 5,
								"char": 10,
								"type": "const bool(uint val)",
								"parameters": [
									{
										"deco": "k",
										"name": "val"
									}
								],
								"name": "opIndex",
								"comment": "        Tests the presence of code point $(D val) in this set.\n\n        Example:\n        ---\n        auto gothic = unicode.Gothic;\n        // Gothic letter ahsa\n        assert(gothic['\\U00010330']);\n        // no ascii in Gothic obviously\n        assert(!gothic['$']);\n        ---\n",
								"endline": 2096
							},
							{
								"kind": "function",
								"line": 2112,
								"endchar": 5,
								"char": 22,
								"type": "@property size_t()",
								"name": "length",
								"comment": "Number of $(CODEPOINTS) in this set\n",
								"endline": 2120
							},
							{
								"kind": "template",
								"line": 2159,
								"constraint": "isCodepointSet!U || is(U : dchar)",
								"members": [
									{
										"kind": "function",
										"line": 2159,
										"endchar": 5,
										"char": 10,
										"type": "This(U rhs)",
										"parameters": [
											{
												"type": "U",
												"name": "rhs"
											}
										],
										"name": "opBinary",
										"endline": 2194
									}
								],
								"char": 10,
								"parameters": [
									{
										"kind": "value",
										"type": "string",
										"name": "op"
									},
									{
										"kind": "type",
										"name": "U"
									}
								],
								"comment": "        $(P Sets support natural syntax for set algebra, namely: )\n        $(BOOKTABLE ,\n            $(TR $(TH Operator) $(TH Math notation) $(TH Description) )\n            $(TR $(TD &) $(TD a ∩ b) $(TD intersection) )\n            $(TR $(TD |) $(TD a ∪ b) $(TD union) )\n            $(TR $(TD -) $(TD a ∖ b) $(TD subtraction) )\n            $(TR $(TD ~) $(TD a ~ b) $(TD symmetric set difference i.e. (a ∪ b) \\ (a ∩ b)) )\n        )\n\n        Example:\n        ---\n        auto lower = unicode.LowerCase;\n        auto upper = unicode.UpperCase;\n        auto ascii = unicode.ASCII;\n\n        assert((lower & upper).empty); // no intersection\n        auto lowerASCII = lower & ascii;\n        assert(lowerASCII.byCodepoint.equal(iota('a', 'z'+1)));\n        // throw away all of the lowercase ASCII\n        assert((ascii - lower).length == 128 - 26);\n\n        auto onlyOneOf = lower ~ ascii;\n        assert(!onlyOneOf['Δ']); // not ASCII and not lowercase\n        assert(onlyOneOf['$']); // ASCII and not lowercase\n        assert(!onlyOneOf['a']); // ASCII and lowercase\n        assert(onlyOneOf['я']); // not ASCII but lowercase\n\n        // throw away all cased letters from ASCII\n        auto noLetters = ascii - (lower | upper);\n        assert(noLetters.length == 128 - 26*2);\n        ---\n",
								"name": "opBinary"
							},
							{
								"kind": "template",
								"line": 2197,
								"constraint": "isCodepointSet!U || is(U : dchar)",
								"members": [
									{
										"kind": "function",
										"line": 2197,
										"endchar": 5,
										"char": 14,
										"type": "ref This(U rhs)",
										"parameters": [
											{
												"type": "U",
												"name": "rhs"
											}
										],
										"name": "opOpAssign",
										"endline": 2223
									}
								],
								"char": 14,
								"parameters": [
									{
										"kind": "value",
										"type": "string",
										"name": "op"
									},
									{
										"kind": "type",
										"name": "U"
									}
								],
								"comment": "The 'op=' versions of the above overloaded operators.\n",
								"name": "opOpAssign"
							},
							{
								"kind": "template",
								"line": 2229,
								"constraint": "is(U : dchar)",
								"members": [
									{
										"kind": "function",
										"line": 2229,
										"endchar": 5,
										"char": 10,
										"type": "const bool(U ch)",
										"parameters": [
											{
												"type": "U",
												"name": "ch"
											}
										],
										"name": "opBinaryRight",
										"endline": 2233
									}
								],
								"char": 10,
								"parameters": [
									{
										"kind": "value",
										"type": "string",
										"specValue": "\"in\"",
										"name": "op"
									},
									{
										"kind": "type",
										"name": "U"
									}
								],
								"comment": "        Tests the presence of codepoint $(D ch) in this set,\n        the same as $(LREF opIndex).\nExample:\n\n---\nassert('я' in unicode.Cyrillic);\nassert(!('z' in unicode.Cyrillic));\n\n\n---\n",
								"name": "opBinaryRight"
							},
							{
								"kind": "template",
								"line": 2249,
								"members": [
									{
										"kind": "function",
										"line": 2249,
										"storageClass": [
											"auto"
										],
										"endchar": 5,
										"char": 10,
										"type": "()",
										"name": "opUnary",
										"endline": 2252
									}
								],
								"char": 10,
								"parameters": [
									{
										"kind": "value",
										"type": "string",
										"specValue": "\"!\"",
										"name": "op"
									}
								],
								"comment": " Obtains a set that is the inversion of this set.\n\n See_Also: $(LREF inverted)\n",
								"name": "opUnary"
							},
							{
								"kind": "function",
								"line": 2264,
								"storageClass": [
									"auto"
								],
								"endchar": 5,
								"char": 20,
								"type": "@property ()",
								"name": "byCodepoint",
								"comment": "        A range that spans each $(CODEPOINT) in this set.\n\n        Example:\n        ---\n        import std.algorithm;\n        auto set = unicode.ASCII;\n        set.byCodepoint.equal(iota(0, 0x80));\n        ---\n",
								"endline": 2302
							},
							{
								"kind": "function",
								"line": 2330,
								"endchar": 5,
								"char": 10,
								"type": "void(scope void delegate(const(char)[]) sink, FormatSpec!char fmt)",
								"parameters": [
									{
										"storageClass": [
											"scope"
										],
										"type": "void delegate(const(char)[])",
										"name": "sink"
									},
									{
										"type": "FormatSpec!char",
										"name": "fmt"
									}
								],
								"name": "toString",
								"comment": " Obtain a textual representation of this InversionList\n in form of open-right intervals.\n\n The formatting flag is applied individually to each value, for example:\n $(LI $(B %s) and $(B %d) format the intervals as a [low..high$(RPAREN) range of integrals)\n $(LI $(B %x) formats the intervals as a [low..high$(RPAREN) range of lowercase hex characters)\n $(LI $(B %X) formats the intervals as a [low..high$(RPAREN) range of uppercase hex characters)\nExample:\n\n---\nimport std.conv : to;\nimport std.format : format;\nimport std.uni : unicode;\n\nassert(unicode.Cyrillic.to!string ==\n    \"[1024..1157) [1159..1320) [7467..7468) [7544..7545) [11744..11776) [42560..42648) [42655..42656)\");\n\n// The specs '%s' and '%d' are equivalent to the to!string call above.\nassert(format(\"%d\", unicode.Cyrillic) == unicode.Cyrillic.to!string);\n\nassert(format(\"%#x\", unicode.Cyrillic) ==\n    \"[0x400..0x485) [0x487..0x528) [0x1d2b..0x1d2c) [0x1d78..0x1d79) [0x2de0..0x2e00) [0xa640..0xa698) [0xa69f..0xa6a0)\");\n\nassert(format(\"%#X\", unicode.Cyrillic) ==\n    \"[0X400..0X485) [0X487..0X528) [0X1D2B..0X1D2C) [0X1D78..0X1D79) [0X2DE0..0X2E00) [0XA640..0XA698) [0XA69F..0XA6A0)\");\n\n\n---\n",
								"endline": 2351
							},
							{
								"kind": "template",
								"line": 2395,
								"members": [
									{
										"kind": "function",
										"line": 2395,
										"endchar": 5,
										"char": 9,
										"type": "ref (uint a, uint b)",
										"parameters": [
											{
												"deco": "k",
												"name": "a"
											},
											{
												"deco": "k",
												"name": "b"
											}
										],
										"name": "add",
										"endline": 2399
									}
								],
								"char": 9,
								"parameters": [],
								"comment": "        Add an interval [a, b$(RPAREN) to this set.\n\n        Example:\n        ---\n        CodepointSet someSet;\n        someSet.add('0', '5').add('A','Z'+1);\n        someSet.add('5', '9'+1);\n        assert(someSet['0']);\n        assert(someSet['5']);\n        assert(someSet['9']);\n        assert(someSet['Z']);\n        ---\nExample:\n\n---\nassert(unicode.Cyrillic.intersect('-').byInterval.empty);\n\n\n---\n",
								"name": "add"
							},
							{
								"kind": "function",
								"line": 2481,
								"storageClass": [
									"auto"
								],
								"endchar": 5,
								"char": 20,
								"type": "@property ()",
								"name": "inverted",
								"comment": "        Obtains a set that is the inversion of this set.\n\n        See the '!' $(LREF opUnary) for the same but using operators.\n\n        Example:\n        ---\n        set = unicode.ASCII;\n        // union with the inverse gets all of the code points in the Unicode\n        assert((set | set.inverted).length == 0x110000);\n        // no intersection with the inverse\n        assert((set & set.inverted).empty);\n        ---\n",
								"endline": 2501
							},
							{
								"kind": "function",
								"line": 2545,
								"endchar": 5,
								"char": 12,
								"type": "string(string funcName = \"\")",
								"parameters": [
									{
										"default": "\"\"",
										"type": "string",
										"name": "funcName"
									}
								],
								"name": "toSourceCode",
								"comment": "        Generates string with D source code of unary function with name of\n        $(D funcName) taking a single $(D dchar) argument. If $(D funcName) is empty\n        the code is adjusted to be a lambda function.\n\n        The function generated tests if the $(CODEPOINT) passed\n        belongs to this set or not. The result is to be used with string mixin.\n        The intended usage area is aggressive optimization via meta programming\n        in parser generators and the like.\n\n        Note: Use with care for relatively small or regular sets. It\n        could end up being slower then just using multi-staged tables.\n\n        Example:\n        ---\n        import std.stdio;\n\n        // construct set directly from [a, b$RPAREN intervals\n        auto set = CodepointSet(10, 12, 45, 65, 100, 200);\n        writeln(set);\n        writeln(set.toSourceCode(\"func\"));\n        ---\n\n        The above outputs something along the lines of:\n        ---\n        bool func(dchar ch)  @safe pure nothrow @nogc\n        {\n            if(ch < 45)\n            {\n                if(ch == 10 || ch == 11) return true;\n                return false;\n            }\n            else if (ch < 65) return true;\n            else\n            {\n                if(ch < 100) return false;\n                if(ch < 200) return true;\n                return false;\n            }\n        }\n        ---\n",
								"endline": 2638
							},
							{
								"kind": "function",
								"line": 2649,
								"endchar": 5,
								"char": 20,
								"type": "const @property bool()",
								"name": "empty",
								"comment": "        True if this set doesn't contain any $(CODEPOINTS).\n        Example:\n        ---\n        CodepointSet emptySet;\n        assert(emptySet.length == 0);\n        assert(emptySet.empty);\n        ---\n",
								"endline": 2652
							}
						],
						"char": 17,
						"name": "InversionList"
					}
				],
				"char": 17,
				"parameters": [
					{
						"kind": "type",
						"default": "GcPolicy",
						"name": "SP"
					}
				],
				"comment": "    $(P\n    $(D InversionList) is a set of $(CODEPOINTS)\n    represented as an array of open-right [a, b$(RPAREN)\n    intervals (see $(LREF CodepointInterval) above).\n    The name comes from the way the representation reads left to right.\n    For instance a set of all values [10, 50$(RPAREN), [80, 90$(RPAREN),\n    plus a singular value 60 looks like this:\n    )\n    ---\n    10, 50, 60, 61, 80, 90\n    ---\n    $(P\n    The way to read this is: start with negative meaning that all numbers\n    smaller then the next one are not present in this set (and positive\n    - the contrary). Then switch positive/negative after each\n    number passed from left to right.\n    )\n    $(P This way negative spans until 10, then positive until 50,\n    then negative until 60, then positive until 61, and so on.\n    As seen this provides a space-efficient storage of highly redundant data\n    that comes in long runs. A description which Unicode $(CHARACTER)\n    properties fit nicely. The technique itself could be seen as a variation\n    on $(LUCKY RLE encoding).\n    )\n\n    $(P Sets are value types (just like $(D int) is) thus they\n        are never aliased.\n    )\n        Example:\n        ---\n        auto a = CodepointSet('a', 'z'+1);\n        auto b = CodepointSet('A', 'Z'+1);\n        auto c = a;\n        a = a | b;\n        assert(a == CodepointSet('A', 'Z'+1, 'a', 'z'+1));\n        assert(a != c);\n        ---\n    $(P See also $(LREF unicode) for simpler construction of sets\n        from predefined ones.\n    )\n\n    $(P Memory usage is 8 bytes per each contiguous interval in a set.\n    The value semantics are achieved by using the\n    $(WEB en.wikipedia.org/wiki/Copy-on-write, COW) technique\n    and thus it's $(RED not) safe to cast this type to $(D_KEYWORD shared).\n    )\n\n    Note:\n    $(P It's not recommended to rely on the template parameters\n    or the exact type of a current $(CODEPOINT) set in $(D std.uni).\n    The type and parameters may change when the standard\n    allocators design is finalized.\n    Use $(LREF isCodepointSet) with templates or just stick with the default\n    alias $(LREF CodepointSet) throughout the whole code base.\n    )\n",
				"name": "InversionList"
			},
			{
				"kind": "template",
				"line": 4192,
				"constraint": "sumOfIntegerTuple!sizes == 21",
				"members": [
					{
						"kind": "template",
						"line": 4195,
						"constraint": "isCodepointSet!Set",
						"members": [
							{
								"kind": "function",
								"line": 4195,
								"storageClass": [
									"auto"
								],
								"endchar": 5,
								"char": 10,
								"type": "(Set set)",
								"parameters": [
									{
										"type": "Set",
										"name": "set"
									}
								],
								"name": "codepointSetTrie",
								"endline": 4202
							}
						],
						"char": 10,
						"parameters": [
							{
								"kind": "type",
								"name": "Set"
							}
						],
						"name": "codepointSetTrie"
					}
				],
				"char": 8,
				"parameters": [
					{
						"kind": "tuple",
						"name": "sizes"
					}
				],
				"comment": "    A shorthand for creating a custom multi-level fixed Trie\n    from a $(D CodepointSet). $(D sizes) are numbers of bits per level,\n    with the most significant bits used first.\n\n    Note: The sum of $(D sizes) must be equal 21.\n\n    See_Also: $(LREF toTrie), which is even simpler.\n\n    Example:\n    ---\n    {\n        import std.stdio;\n        auto set = unicode(\"Number\");\n        auto trie = codepointSetTrie!(8, 5, 8)(set);\n        writeln(\"Input code points to test:\");\n        foreach(line; stdin.byLine)\n        {\n            int count=0;\n            foreach(dchar ch; line)\n                if(trie[ch])// is number\n                    count++;\n            writefln(\"Contains %d number code points.\", count);\n        }\n    }\n    ---\n",
				"name": "codepointSetTrie"
			},
			{
				"kind": "template",
				"line": 4206,
				"constraint": "sumOfIntegerTuple!sizes == 21",
				"members": [
					{
						"kind": "alias",
						"line": 4210,
						"char": 5,
						"type": "typeof(TrieBuilder!(bool, dchar, lastDchar + 1, Prefix)(false).build())",
						"name": "CodepointSetTrie"
					}
				],
				"char": 8,
				"parameters": [
					{
						"kind": "tuple",
						"name": "sizes"
					}
				],
				"comment": "Type of Trie generated by codepointSetTrie function.\n",
				"name": "CodepointSetTrie"
			},
			{
				"kind": "template",
				"line": 4271,
				"constraint": "sumOfIntegerTuple!sizes == 21",
				"members": [
					{
						"kind": "template",
						"line": 4285,
						"members": [
							{
								"kind": "function",
								"line": 4285,
								"storageClass": [
									"auto"
								],
								"endchar": 5,
								"char": 10,
								"type": "(T[dchar] map, T defValue = T.init)",
								"parameters": [
									{
										"type": "T[dchar]",
										"name": "map"
									},
									{
										"default": "T.init",
										"type": "T",
										"name": "defValue"
									}
								],
								"name": "codepointTrie",
								"endline": 4288
							}
						],
						"char": 10,
						"parameters": [],
						"name": "codepointTrie"
					},
					{
						"kind": "template",
						"line": 4291,
						"constraint": "isInputRange!R && is(typeof(ElementType!R.init[0]) : T) && is(typeof(ElementType!R.init[1]) : dchar)",
						"members": [
							{
								"kind": "function",
								"line": 4291,
								"storageClass": [
									"auto"
								],
								"endchar": 5,
								"char": 10,
								"type": "(R range, T defValue = T.init)",
								"parameters": [
									{
										"type": "R",
										"name": "range"
									},
									{
										"default": "T.init",
										"type": "T",
										"name": "defValue"
									}
								],
								"name": "codepointTrie",
								"endline": 4299
							}
						],
						"char": 10,
						"parameters": [
							{
								"kind": "type",
								"name": "R"
							}
						],
						"name": "codepointTrie"
					}
				],
				"char": 8,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "tuple",
						"name": "sizes"
					}
				],
				"comment": "    A slightly more general tool for building fixed $(D Trie)\n    for the Unicode data.\n\n    Specifically unlike $(D codepointSetTrie) it's allows creating mappings\n    of $(D dchar) to an arbitrary type $(D T).\n\n    Note: Overload taking $(D CodepointSet)s will naturally convert\n    only to bool mapping $(D Trie)s.\n\n    Example:\n    ---\n    // pick characters from the Greek script\n    auto set = unicode.Greek;\n\n    // a user-defined property (or an expensive function)\n    // that we want to look up\n    static uint luckFactor(dchar ch)\n    {\n        // here we consider a character lucky\n        // if its code point has a lot of identical hex-digits\n        // e.g. arabic letter DDAL (\\u0688) has a \"luck factor\" of 2\n        ubyte[6] nibbles; // 6 4-bit chunks of code point\n        uint value = ch;\n        foreach(i; 0..6)\n        {\n            nibbles[i] = value & 0xF;\n            value >>= 4;\n        }\n        uint luck;\n        foreach(n; nibbles)\n            luck = cast(uint)max(luck, count(nibbles[], n));\n        return luck;\n    }\n\n    // only unsigned built-ins are supported at the moment\n    alias LuckFactor = BitPacked!(uint, 3);\n\n    // create a temporary associative array (AA)\n    LuckFactor[dchar] map;\n    foreach(ch; set.byCodepoint)\n        map[ch] = luckFactor(ch);\n\n    // bits per stage are chosen randomly, fell free to optimize\n    auto trie = codepointTrie!(LuckFactor, 8, 5, 8)(map);\n\n    // from now on the AA is not needed\n    foreach(ch; set.byCodepoint)\n        assert(trie[ch] == luckFactor(ch)); // verify\n    // CJK is not Greek, thus it has the default value\n    assert(trie['\\u4444'] == 0);\n    // and here is a couple of quite lucky Greek characters:\n    // Greek small letter epsilon with dasia\n    assert(trie['\\u1F11'] == 3);\n    // Ancient Greek metretes sign\n    assert(trie['\\U00010181'] == 3);\n    ---\n",
				"name": "codepointTrie"
			},
			{
				"kind": "template",
				"line": 4353,
				"constraint": "sumOfIntegerTuple!sizes == 21",
				"members": [
					{
						"kind": "alias",
						"line": 4357,
						"char": 5,
						"type": "typeof(TrieBuilder!(T, dchar, lastDchar + 1, Prefix)(T.init).build())",
						"name": "CodepointTrie"
					}
				],
				"char": 8,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "tuple",
						"name": "sizes"
					}
				],
				"comment": "Type of Trie as generated by codepointTrie function.\n",
				"name": "CodepointTrie"
			},
			{
				"kind": "struct",
				"line": 4528,
				"members": [
					{
						"kind": "template",
						"line": 4547,
						"constraint": "isRandomAccessRange!Range && is(ElementType!Range : char)",
						"members": [
							{
								"kind": "function",
								"line": 4547,
								"endchar": 5,
								"char": 17,
								"type": "bool(ref Range inp)",
								"parameters": [
									{
										"storageClass": [
											"ref"
										],
										"type": "Range",
										"name": "inp"
									}
								],
								"name": "match",
								"endline": 4551
							}
						],
						"char": 17,
						"parameters": [
							{
								"kind": "type",
								"name": "Range"
							}
						],
						"comment": "        $(P Perform a semantic equivalent 2 operations:\n        decoding a $(CODEPOINT) at front of $(D inp) and testing if\n        it belongs to the set of $(CODEPOINTS) of this matcher. )\n\n        $(P The effect on $(D inp) depends on the kind of function called:)\n\n        $(P Match. If the codepoint is found in the set then range $(D inp)\n        is advanced by its size in $(S_LINK Code unit, code units),\n        otherwise the range is not modifed.)\n\n        $(P Skip. The range is always advanced by the size\n        of the tested $(CODEPOINT) regardless of the result of test.)\n\n        $(P Test. The range is left unaffected regardless\n        of the result of test.)\nExample:\n\n---\nstring truth = \"2² = 4\";\nauto m = utfMatcher!char(unicode.Number);\nassert(m.match(truth)); // '2' is a number all right\nassert(truth == \"² = 4\"); // skips on match\nassert(m.match(truth)); // so is the superscript '2'\nassert(!m.match(truth)); // space is not a number\nassert(truth == \" = 4\"); // unaffected on no match\nassert(!m.skip(truth)); // same test ...\nassert(truth == \"= 4\"); // but skips a codepoint regardless\nassert(!m.test(truth)); // '=' is not a number\nassert(truth == \"= 4\"); // test never affects argument\n\n\n---\nExample:\n\n---\nauto m = utfMatcher!char(unicode.Number);\nstring square = \"2²\";\n// about sub-matchers\nassert(!m.subMatcher!(2,3,4).test(square)); // ASCII no covered\nassert(m.subMatcher!1.match(square)); // ASCII-only, works\nassert(!m.subMatcher!1.test(square)); // unicode '²'\nassert(m.subMatcher!(2,3,4).match(square));  //\nassert(square == \"\");\nwstring wsquare = \"2²\";\nauto m16 = utfMatcher!wchar(unicode.Number);\n// may keep ref, but the orignal (m16) must be kept alive\nauto bmp = m16.subMatcher!1;\nassert(bmp.match(wsquare)); // Okay, in basic multilingual plan\nassert(bmp.match(wsquare)); // And '²' too\n}\n\n---\n",
						"name": "match"
					},
					{
						"kind": "template",
						"line": 4554,
						"constraint": "isRandomAccessRange!Range && is(ElementType!Range : char)",
						"members": [
							{
								"kind": "function",
								"line": 4554,
								"endchar": 5,
								"char": 17,
								"type": "bool(ref Range inp)",
								"parameters": [
									{
										"storageClass": [
											"ref"
										],
										"type": "Range",
										"name": "inp"
									}
								],
								"name": "skip",
								"endline": 4558
							}
						],
						"char": 17,
						"parameters": [
							{
								"kind": "type",
								"name": "Range"
							}
						],
						"comment": "ditto\n",
						"name": "skip"
					},
					{
						"kind": "template",
						"line": 4561,
						"constraint": "isRandomAccessRange!Range && is(ElementType!Range : char)",
						"members": [
							{
								"kind": "function",
								"line": 4561,
								"endchar": 5,
								"char": 17,
								"type": "bool(ref Range inp)",
								"parameters": [
									{
										"storageClass": [
											"ref"
										],
										"type": "Range",
										"name": "inp"
									}
								],
								"name": "test",
								"endline": 4565
							}
						],
						"char": 17,
						"parameters": [
							{
								"kind": "type",
								"name": "Range"
							}
						],
						"comment": "ditto\n",
						"name": "test"
					}
				],
				"char": 8,
				"name": "MatcherConcept",
				"comment": "    Conceptual type that outlines the common properties of all UTF Matchers.\n\n    Note: For illustration purposes only, every method\n    call results in assertion failure.\n    Use $(LREF utfMatcher) to obtain a concrete matcher\n    for UTF-8 or UTF-16 encodings.\n"
			},
			{
				"kind": "template",
				"line": 4626,
				"members": [
					{
						"kind": "variable",
						"line": 4626,
						"init": "__traits(compiles, ()\n{\nC[] s;\nauto d = s.decoder;\nM m;\nassert(is(typeof(m.match(d)) == bool));\nassert(is(typeof(m.test(d)) == bool));\nstatic if (is(typeof(m.skip(d))))\n{\nassert(is(typeof(m.skip(d)) == bool));\nassert(is(typeof(m.skip(s)) == bool));\n}\n\nassert(is(typeof(m.match(s)) == bool));\nassert(is(typeof(m.test(s)) == bool));\n}\n)",
						"storageClass": [
							"enum"
						],
						"char": 13,
						"name": "isUtfMatcher"
					}
				],
				"char": 13,
				"parameters": [
					{
						"kind": "type",
						"name": "M"
					},
					{
						"kind": "type",
						"name": "C"
					}
				],
				"comment": "    Test if $(D M) is an UTF Matcher for ranges of $(D Char).\n",
				"name": "isUtfMatcher"
			},
			{
				"kind": "template",
				"line": 5208,
				"constraint": "isCodepointSet!Set",
				"members": [
					{
						"kind": "function",
						"line": 5208,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 13,
						"type": "@trusted (Set set)",
						"parameters": [
							{
								"type": "Set",
								"name": "set"
							}
						],
						"name": "utfMatcher",
						"endline": 5220
					}
				],
				"char": 13,
				"parameters": [
					{
						"kind": "type",
						"name": "Char"
					},
					{
						"kind": "type",
						"name": "Set"
					}
				],
				"comment": "    Constructs a matcher object\n    to classify $(CODEPOINTS) from the $(D set) for encoding\n    that has $(D Char) as code unit.\n\n    See $(LREF MatcherConcept) for API outline.\n",
				"name": "utfMatcher"
			},
			{
				"kind": "template",
				"line": 5432,
				"constraint": "isCodepointSet!Set",
				"members": [
					{
						"kind": "function",
						"line": 5432,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 13,
						"type": "(Set set)",
						"parameters": [
							{
								"type": "Set",
								"name": "set"
							}
						],
						"name": "toTrie",
						"endline": 5446
					}
				],
				"char": 13,
				"parameters": [
					{
						"kind": "value",
						"deco": "m",
						"name": "level"
					},
					{
						"kind": "type",
						"name": "Set"
					}
				],
				"comment": "    Convenience function to construct optimal configurations for\n    packed Trie from any $(D set) of $(CODEPOINTS).\n\n    The parameter $(D level) indicates the number of trie levels to use,\n    allowed values are: 1, 2, 3 or 4. Levels represent different trade-offs\n    speed-size wise.\n\n    $(P Level 1 is fastest and the most memory hungry (a bit array). )\n    $(P Level 4 is the slowest and has the smallest footprint. )\n\n    See the $(S_LINK Synopsis, Synopsis) section for example.\n\n    Note:\n    Level 4 stays very practical (being faster and more predictable)\n    compared to using direct lookup on the $(D set) itself.\n\n\n",
				"name": "toTrie"
			},
			{
				"kind": "template",
				"line": 5458,
				"constraint": "isCodepointSet!Set",
				"members": [
					{
						"kind": "function",
						"line": 5458,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 13,
						"type": "(Set set)",
						"parameters": [
							{
								"type": "Set",
								"name": "set"
							}
						],
						"name": "toDelegate",
						"endline": 5464
					}
				],
				"char": 13,
				"parameters": [
					{
						"kind": "type",
						"name": "Set"
					}
				],
				"comment": "    $(P Builds a $(D Trie) with typically optimal speed-size trade-off\n    and wraps it into a delegate of the following type:\n    $(D bool delegate(dchar ch)). )\n\n    $(P Effectively this creates a 'tester' lambda suitable\n    for algorithms like std.algorithm.find that take unary predicates. )\n\n    See the $(S_LINK Synopsis, Synopsis) section for example.\n",
				"name": "toDelegate"
			},
			{
				"kind": "struct",
				"line": 6080,
				"members": [
					{
						"kind": "template",
						"line": 6117,
						"members": [
							{
								"kind": "function",
								"line": 6117,
								"storageClass": [
									"auto"
								],
								"endchar": 5,
								"char": 27,
								"type": "pure @property ()",
								"name": "opDispatch",
								"endline": 6123
							}
						],
						"char": 27,
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "name"
							}
						],
						"comment": "        Performs the lookup of set of $(CODEPOINTS)\n        with compile-time correctness checking.\n        This short-cut version combines 3 searches:\n        across blocks, scripts, and common binary properties.\n\n        Note that since scripts and blocks overlap the\n        usual trick to disambiguate is used - to get a block use\n        $(D unicode.InBlockName), to search a script\n        use $(D unicode.ScriptName).\n\n        See_Also: $(LREF block), $(LREF script)\n        and (not included in this search) $(LREF hangulSyllableType).\n\n        Example:\n        ---\n        auto ascii = unicode.ASCII;\n        assert(ascii['A']);\n        assert(ascii['~']);\n        assert(!ascii['\\u00e0']);\n        // matching is case-insensitive\n        assert(ascii == unicode.ascII);\n        assert(!ascii['à']);\n        // underscores, '-' and whitespace in names are ignored too\n        auto latin = unicode.in_latin1_Supplement;\n        assert(latin['à']);\n        assert(!latin['$']);\n        // BTW Latin 1 Supplement is a block, hence \"In\" prefix\n        assert(latin == unicode(\"In Latin 1 Supplement\"));\n        import std.exception;\n        // run-time look up throws if no such set is found\n        assert(collectException(unicode(\"InCyrilliac\")));\n        ---\n",
						"name": "opDispatch"
					},
					{
						"kind": "template",
						"line": 6135,
						"constraint": "is(C : dchar)",
						"members": [
							{
								"kind": "function",
								"line": 6135,
								"storageClass": [
									"auto"
								],
								"endchar": 5,
								"char": 17,
								"type": "(in C[] name)",
								"parameters": [
									{
										"storageClass": [
											"in"
										],
										"type": "C[]",
										"name": "name"
									}
								],
								"name": "opCall",
								"endline": 6139
							}
						],
						"char": 17,
						"parameters": [
							{
								"kind": "type",
								"name": "C"
							}
						],
						"comment": "        The same lookup across blocks, scripts, or binary properties,\n        but performed at run-time.\n        This version is provided for cases where $(D name)\n        is not known beforehand; otherwise compile-time\n        checked $(LREF opDispatch) is typically a better choice.\n\n        See the $(S_LINK Unicode properties, table of properties) for available\n        sets.\n",
						"name": "opCall"
					},
					{
						"kind": "struct",
						"line": 6158,
						"members": [],
						"char": 5,
						"name": "block",
						"comment": "        Narrows down the search for sets of $(CODEPOINTS) to all Unicode blocks.\n\n        Note:\n        Here block names are unambiguous as no scripts are searched\n        and thus to search use simply $(D unicode.block.BlockName) notation.\n\n        See $(S_LINK Unicode properties, table of properties) for available sets.\n\n        Example:\n        ---\n        // use .block for explicitness\n        assert(unicode.block.Greek_and_Coptic == unicode.InGreek_and_Coptic);\n        ---\n\n        See_Also: $(S_LINK Unicode properties, table of properties).\n"
					},
					{
						"kind": "struct",
						"line": 6182,
						"members": [],
						"char": 5,
						"name": "script",
						"comment": "        Narrows down the search for sets of $(CODEPOINTS) to all Unicode scripts.\n\n        See the $(S_LINK Unicode properties, table of properties) for available\n        sets.\n\n        Example:\n        ---\n        auto arabicScript = unicode.script.arabic;\n        auto arabicBlock = unicode.block.arabic;\n        // there is an intersection between script and block\n        assert(arabicBlock['؁']);\n        assert(arabicScript['؁']);\n        // but they are different\n        assert(arabicBlock != arabicScript);\n        assert(arabicBlock == unicode.inArabic);\n        assert(arabicScript == unicode.arabic);\n        ---\n"
					},
					{
						"kind": "struct",
						"line": 6208,
						"members": [],
						"char": 5,
						"name": "hangulSyllableType",
						"comment": "        Fetch a set of $(CODEPOINTS) that have the given hangul syllable type.\n\n        Other non-binary properties (once supported) follow the same\n        notation - $(D unicode.propertyName.propertyValue) for compile-time\n        checked access and $(D unicode.propertyName(propertyValue))\n        for run-time checked one.\n\n        See the $(S_LINK Unicode properties, table of properties) for available\n        sets.\n\n        Example:\n        ---\n        // L here is syllable type not Letter as in unicode.L short-cut\n        auto leadingVowel = unicode.hangulSyllableType(\"L\");\n        // check that some leading vowels are present\n        foreach(vowel; '\\u1110'..'\\u115F')\n            assert(leadingVowel[vowel]);\n        assert(leadingVowel == unicode.hangulSyllableType.L);\n        ---\n"
					}
				],
				"char": 14,
				"name": "unicode",
				"comment": "    A single entry point to lookup Unicode $(CODEPOINT) sets by name or alias of\n    a block, script or general category.\n\n    It uses well defined standard rules of property name lookup.\n    This includes fuzzy matching of names, so that\n    'White_Space', 'white-SpAce' and 'whitespace' are all considered equal\n    and yield the same set of white space $(CHARACTERS).\n"
			},
			{
				"kind": "template",
				"line": 6453,
				"constraint": "is(C : dchar)",
				"members": [
					{
						"kind": "function",
						"line": 6453,
						"endchar": 1,
						"char": 8,
						"type": "size_t(in C[] input, size_t index)",
						"parameters": [
							{
								"storageClass": [
									"in"
								],
								"type": "C[]",
								"name": "input"
							},
							{
								"type": "size_t",
								"name": "index"
							}
						],
						"name": "graphemeStride",
						"endline": 6460
					}
				],
				"char": 8,
				"parameters": [
					{
						"kind": "type",
						"name": "C"
					}
				],
				"comment": "    Computes the length of grapheme cluster starting at $(D index).\n    Both the resulting length and the $(D index) are measured\n    in $(S_LINK Code unit, code units).\n\n    Params:\n        C = type that is implicitly convertible to $(D dchars)\n        input = array of grapheme clusters\n        index = starting index into $(D input[])\n\n    Returns:\n        length of grapheme cluster\n\n    Example:\n    ---\n    // ASCII as usual is 1 code unit, 1 code point etc.\n    assert(graphemeStride(\"  \", 1) == 1);\n    // A + combing ring above\n    string city = \"A\\u030Arhus\";\n    size_t first = graphemeStride(city, 0);\n    assert(first == 3); //\\u030A has 2 UTF-8 code units\n    assert(city[0..first] == \"A\\u030A\");\n    assert(city[first..$] == \"rhus\");\n    ---\n",
				"name": "graphemeStride"
			},
			{
				"kind": "template",
				"line": 6483,
				"constraint": "isInputRange!Input && is(Unqual!(ElementType!Input) == dchar)",
				"members": [
					{
						"kind": "function",
						"line": 6483,
						"endchar": 1,
						"char": 10,
						"type": "Grapheme(ref Input inp)",
						"parameters": [
							{
								"storageClass": [
									"ref"
								],
								"type": "Input",
								"name": "inp"
							}
						],
						"name": "decodeGrapheme",
						"endline": 6487
					}
				],
				"char": 10,
				"parameters": [
					{
						"kind": "type",
						"name": "Input"
					}
				],
				"comment": "    Reads one full grapheme cluster from an input range of dchar $(D inp).\n\n    For examples see the $(LREF Grapheme) below.\n\n    Note:\n    This function modifies $(D inp) and thus $(D inp)\n    must be an L-value.\n",
				"name": "decodeGrapheme"
			},
			{
				"kind": "template",
				"line": 6514,
				"constraint": "isInputRange!Range && is(Unqual!(ElementType!Range) == dchar)",
				"members": [
					{
						"kind": "function",
						"line": 6514,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "(Range range)",
						"parameters": [
							{
								"type": "Range",
								"name": "range"
							}
						],
						"name": "byGrapheme",
						"endline": 6550
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "Range"
					}
				],
				"comment": "    $(P Iterate a string by grapheme.)\n\n    $(P Useful for doing string manipulation that needs to be aware\n    of graphemes.)\n\n    See_Also:\n        $(LREF byCodePoint)\nExample:\n\n---\nimport std.conv;\nimport std.range;\nimport std.algorithm;\nauto text = \"noe\\u0308l\"; // noël using e + combining diaeresis\nassert(text.walkLength == 5); // 5 code points\n\nauto gText = text.byGrapheme;\nassert(gText.walkLength == 4); // 4 graphemes\n\nassert(gText.take(3).equal(\"noe\\u0308\".byGrapheme));\nassert(gText.drop(3).equal(\"l\".byGrapheme));\n\n---\n",
				"name": "byGrapheme"
			},
			{
				"kind": "template",
				"line": 6616,
				"constraint": "isInputRange!Range && is(Unqual!(ElementType!Range) == Grapheme)",
				"members": [
					{
						"kind": "function",
						"line": 6616,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "(Range range)",
						"parameters": [
							{
								"type": "Range",
								"name": "range"
							}
						],
						"name": "byCodePoint",
						"endline": 6656
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "Range"
					}
				],
				"comment": "    $(P Lazily transform a range of $(LREF Grapheme)s to a range of code points.)\n\n    $(P Useful for converting the result to a string after doing operations\n    on graphemes.)\n\n    $(P Acts as the identity function when given a range of code points.)\nExample:\n\n---\nimport std.conv : text;\nimport std.range;\n\nstring s = \"noe\\u0308l\"; // noël\n\n// reverse it and convert the result to a string\nstring reverse = s.byGrapheme\n    .array\n    .retro\n    .byCodePoint\n    .text;\n\nassert(reverse == \"le\\u0308on\"); // lëon\n\n---\n",
				"name": "byCodePoint"
			},
			{
				"kind": "template",
				"line": 6659,
				"constraint": "isInputRange!Range && is(Unqual!(ElementType!Range) == dchar)",
				"members": [
					{
						"kind": "function",
						"line": 6659,
						"endchar": 1,
						"char": 7,
						"type": "Range(Range range)",
						"parameters": [
							{
								"type": "Range",
								"name": "range"
							}
						],
						"name": "byCodePoint",
						"endline": 6663
					}
				],
				"char": 7,
				"parameters": [
					{
						"kind": "type",
						"name": "Range"
					}
				],
				"comment": "Ditto\n",
				"name": "byCodePoint"
			},
			{
				"kind": "struct",
				"line": 6732,
				"members": [
					{
						"kind": "function",
						"line": 6751,
						"deco": "xFNaNbNiNemZw",
						"endchar": 5,
						"char": 11,
						"parameters": [
							{
								"deco": "m",
								"name": "index"
							}
						],
						"name": "opIndex",
						"comment": "Gets a $(CODEPOINT) at the given index in this cluster.\n",
						"originalType": "const pure nothrow @nogc @trusted dchar(size_t index)",
						"endline": 6755
					},
					{
						"kind": "function",
						"line": 6774,
						"deco": "FNaNbNiNewmZv",
						"endchar": 5,
						"char": 10,
						"parameters": [
							{
								"deco": "w",
								"name": "ch"
							},
							{
								"deco": "m",
								"name": "index"
							}
						],
						"name": "opIndexAssign",
						"comment": "        Writes a $(CODEPOINT) $(D ch) at given index in this cluster.\n\n        Warning:\n        Use of this facility may invalidate grapheme cluster,\n        see also $(LREF Grapheme.valid).\n\n        Example:\n        ---\n        auto g = Grapheme(\"A\\u0302\");\n        assert(g[0] == 'A');\n        assert(g.valid);\n        g[1] = '~'; // ASCII tilda is not a combining mark\n        assert(g[1] == '~');\n        assert(!g.valid);\n        ---\n",
						"originalType": "pure nothrow @nogc @trusted void(dchar ch, size_t index)",
						"endline": 6778
					},
					{
						"kind": "function",
						"line": 6786,
						"storageClass": [
							"auto"
						],
						"deco": "FNaNbNimmZS3std3uni41__T16SliceOverIndexedTS3std3uni8GraphemeZ16SliceOverIndexed",
						"endchar": 5,
						"char": 18,
						"parameters": [
							{
								"deco": "m",
								"name": "a"
							},
							{
								"deco": "m",
								"name": "b"
							}
						],
						"name": "opSlice",
						"comment": "        Random-access range over Grapheme's $(CHARACTERS).\n\n        Warning: Invalidates when this Grapheme leaves the scope,\n        attempts to use it then would lead to memory corruption.\n",
						"originalType": "pure nothrow @nogc @system (size_t a, size_t b)",
						"endline": 6789
					},
					{
						"kind": "function",
						"line": 6792,
						"storageClass": [
							"auto"
						],
						"deco": "FNaNbNiZS3std3uni41__T16SliceOverIndexedTS3std3uni8GraphemeZ16SliceOverIndexed",
						"endchar": 5,
						"char": 18,
						"name": "opSlice",
						"comment": "ditto\n",
						"originalType": "pure nothrow @nogc @system ()",
						"endline": 6795
					},
					{
						"kind": "function",
						"line": 6798,
						"deco": "xFNaNbNdNiNeZm",
						"endchar": 5,
						"char": 22,
						"name": "length",
						"comment": "Grapheme cluster length in $(CODEPOINTS).\n",
						"originalType": "const pure nothrow @nogc @property @trusted size_t()",
						"endline": 6801
					},
					{
						"kind": "template",
						"line": 6824,
						"members": [
							{
								"kind": "function",
								"line": 6824,
								"endchar": 5,
								"char": 9,
								"type": "ref (dchar ch)",
								"parameters": [
									{
										"deco": "w",
										"name": "ch"
									}
								],
								"name": "opOpAssign",
								"endline": 6851
							}
						],
						"char": 9,
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "op"
							}
						],
						"comment": "        Append $(CHARACTER) $(D ch) to this grapheme.\n        Warning:\n        Use of this facility may invalidate grapheme cluster,\n        see also $(D valid).\n\n        Example:\n        ---\n        auto g = Grapheme(\"A\");\n        assert(g.valid);\n        g ~= '\\u0301';\n        assert(g[].equal(\"A\\u0301\"));\n        assert(g.valid);\n        g ~= \"B\";\n        // not a valid grapheme cluster anymore\n        assert(!g.valid);\n        // still could be useful though\n        assert(g[].equal(\"A\\u0301B\"));\n        ---\n        See_Also: $(LREF Grapheme.valid)\n",
						"name": "opOpAssign"
					},
					{
						"kind": "template",
						"line": 6854,
						"constraint": "isInputRange!Input && is(ElementType!Input : dchar)",
						"members": [
							{
								"kind": "function",
								"line": 6854,
								"endchar": 5,
								"char": 9,
								"type": "ref (Input inp)",
								"parameters": [
									{
										"type": "Input",
										"name": "inp"
									}
								],
								"name": "opOpAssign",
								"endline": 6865
							}
						],
						"char": 9,
						"parameters": [
							{
								"kind": "value",
								"deco": "Aya",
								"name": "op"
							},
							{
								"kind": "type",
								"name": "Input"
							}
						],
						"comment": "Append all $(CHARACTERS) from the input range $(D inp) to this Grapheme.\n",
						"name": "opOpAssign"
					},
					{
						"kind": "template",
						"line": 6876,
						"members": [
							{
								"kind": "function",
								"line": 6876,
								"endchar": 5,
								"char": 20,
								"type": "@property bool()",
								"name": "valid",
								"endline": 6881
							}
						],
						"char": 20,
						"parameters": [],
						"comment": "        True if this object contains valid extended grapheme cluster.\n        Decoding primitives of this module always return a valid $(D Grapheme).\n\n        Appending to and direct manipulation of grapheme's $(CHARACTERS) may\n        render it no longer valid. Certain applications may chose to use\n        Grapheme as a \"small string\" of any $(CODEPOINTS) and ignore this property\n        entirely.\n",
						"name": "valid"
					}
				],
				"char": 10,
				"name": "Grapheme",
				"comment": "    $(P A structure designed to effectively pack $(CHARACTERS)\n    of a $(CLUSTER).\n    )\n\n    $(P $(D Grapheme) has value semantics so 2 copies of a $(D Grapheme)\n    always refer to distinct objects. In most actual scenarios a $(D Grapheme)\n    fits on the stack and avoids memory allocation overhead for all but quite\n    long clusters.\n    )\n\n    Example:\n    ---\n    import std.algorithm;\n    string bold = \"ku\\u0308hn\";\n\n    // note that decodeGrapheme takes parameter by ref\n    // slicing a grapheme yields a range of dchar\n    assert(decodeGrapheme(bold)[].equal(\"k\"));\n\n    // the next grapheme is 2 characters long\n    auto wideOne = decodeGrapheme(bold);\n    assert(wideOne.length == 2);\n    assert(wideOne[].equal(\"u\\u0308\"));\n\n    // the usual range manipulation is possible\n    assert(wideOne[].filter!isMark.equal(\"\\u0308\"));\n    ---\n\n    See_Also: $(LREF decodeGrapheme), $(LREF graphemeStride)\n"
			},
			{
				"kind": "template",
				"line": 7084,
				"constraint": "isForwardRange!S1 && is(Unqual!(ElementType!S1) == dchar) && isForwardRange!S2 && is(Unqual!(ElementType!S2) == dchar)",
				"members": [
					{
						"kind": "function",
						"line": 7084,
						"endchar": 1,
						"char": 5,
						"type": "int(S1 str1, S2 str2)",
						"parameters": [
							{
								"type": "S1",
								"name": "str1"
							},
							{
								"type": "S2",
								"name": "str2"
							}
						],
						"name": "sicmp",
						"endline": 7126
					}
				],
				"char": 5,
				"parameters": [
					{
						"kind": "type",
						"name": "S1"
					},
					{
						"kind": "type",
						"name": "S2"
					}
				],
				"comment": "    $(P Does basic case-insensitive comparison of strings $(D str1) and $(D str2).\n    This function uses simpler comparison rule thus achieving better performance\n    than $(LREF icmp). However keep in mind the warning below.)\n\n    Params:\n        str1 = a string or a $(D ForwardRange) of $(D dchar)s\n        str2 = a string or a $(D ForwardRange) of $(D dchar)s\n\n    Returns:\n        An $(D int) that is 0 if the strings match,\n        &lt;0 if $(D str1) is lexicographically \"less\" than $(D str2),\n        &gt;0 if $(D str1) is lexicographically \"greater\" than $(D str2)\n\n    Warning:\n    This function only handles 1:1 $(CODEPOINT) mapping\n    and thus is not sufficient for certain alphabets\n    like German, Greek and few others.\n\n    Example:\n    ---\n    assert(sicmp(\"Август\", \"авгусТ\") == 0);\n    // Greek also works as long as there is no 1:M mapping in sight\n    assert(sicmp(\"ΌΎ\", \"όύ\") == 0);\n    // things like the following won't get matched as equal\n    // Greek small letter iota with dialytika and tonos\n    assert(sicmp(\"ΐ\", \"\\u03B9\\u0308\\u0301\") != 0);\n\n    // while icmp has no problem with that\n    assert(icmp(\"ΐ\", \"\\u03B9\\u0308\\u0301\") == 0);\n    assert(icmp(\"ΌΎ\", \"όύ\") == 0);\n    ---\n\n    See_Also:\n        $(LREF icmp)\n        $(XREF algorithm, cmp)\n",
				"name": "sicmp"
			},
			{
				"kind": "template",
				"line": 7190,
				"constraint": "isForwardRange!S1 && is(Unqual!(ElementType!S1) == dchar) && isForwardRange!S2 && is(Unqual!(ElementType!S2) == dchar)",
				"members": [
					{
						"kind": "function",
						"line": 7190,
						"endchar": 1,
						"char": 5,
						"type": "int(S1 str1, S2 str2)",
						"parameters": [
							{
								"type": "S1",
								"name": "str1"
							},
							{
								"type": "S2",
								"name": "str2"
							}
						],
						"name": "icmp",
						"endline": 7220
					}
				],
				"char": 5,
				"parameters": [
					{
						"kind": "type",
						"name": "S1"
					},
					{
						"kind": "type",
						"name": "S2"
					}
				],
				"comment": "    $(P Does case insensitive comparison of $(D str1) and $(D str2).\n    Follows the rules of full case-folding mapping.\n    This includes matching as equal german ß with \"ss\" and\n    other 1:M $(CODEPOINT) mappings unlike $(LREF sicmp).\n    The cost of $(D icmp) being pedantically correct is\n    slightly worse performance.\n    )\n\n    Example:\n    ---\n    assert(icmp(\"Rußland\", \"Russland\") == 0);\n    assert(icmp(\"ᾩ -> \\u1F70\\u03B9\", \"\\u1F61\\u03B9 -> ᾲ\") == 0);\n    ---\n",
				"name": "icmp"
			},
			{
				"kind": "function",
				"line": 7386,
				"deco": "FNewZh",
				"endchar": 1,
				"char": 7,
				"parameters": [
					{
						"deco": "w",
						"name": "ch"
					}
				],
				"name": "combiningClass",
				"comment": "    $(P Returns the $(S_LINK Combining class, combining class) of $(D ch).)\n\n    Example:\n    ---\n    // shorten the code\n    alias CC = combiningClass;\n\n    // combining tilda\n    assert(CC('\\u0303') == 230);\n    // combining ring below\n    assert(CC('\\u0325') == 220);\n    // the simple consequence is that  \"tilda\" should be\n    // placed after a \"ring below\" in a sequence\n    ---\n",
				"endline": 7389
			},
			{
				"kind": "enum",
				"line": 7402,
				"members": [
					{
						"kind": "enum member",
						"line": 7404,
						"value": "0",
						"char": 5,
						"name": "Canonical",
						"comment": "Canonical decomposition. The result is canonically equivalent sequence.\n"
					},
					{
						"kind": "enum member",
						"line": 7410,
						"value": "1",
						"char": 5,
						"name": "Compatibility",
						"comment": "         Compatibility decomposition. The result is compatibility equivalent sequence.\n         Note: Compatibility decomposition is a $(B lossy) conversion,\n         typically suitable only for fuzzy matching and internal processing.\n"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "UnicodeDecomposition",
				"comment": "Unicode character decomposition type.\n"
			},
			{
				"kind": "function",
				"line": 7442,
				"deco": "FNaNbNewwZw",
				"endchar": 1,
				"char": 14,
				"parameters": [
					{
						"deco": "w",
						"name": "first"
					},
					{
						"deco": "w",
						"name": "second"
					}
				],
				"name": "compose",
				"comment": "    Try to canonically compose 2 $(CHARACTERS).\n    Returns the composed $(CHARACTER) if they do compose and dchar.init otherwise.\n\n    The assumption is that $(D first) comes before $(D second) in the original text,\n    usually meaning that the first is a starter.\n\n    Note: Hangul syllables are not covered by this function.\n    See $(D composeJamo) below.\n\n    Example:\n    ---\n    assert(compose('A','\\u0308') == '\\u00C4');\n    assert(compose('A', 'B') == dchar.init);\n    assert(compose('C', '\\u0301') == '\\u0106');\n    // note that the starter is the first one\n    // thus the following doesn't compose\n    assert(compose('\\u0308', 'A') == dchar.init);\n    ---\n",
				"endline": 7461
			},
			{
				"kind": "template",
				"line": 7487,
				"members": [
					{
						"kind": "function",
						"line": 7487,
						"endchar": 1,
						"char": 17,
						"type": "Grapheme(dchar ch)",
						"parameters": [
							{
								"deco": "w",
								"name": "ch"
							}
						],
						"name": "decompose",
						"endline": 7506
					}
				],
				"char": 17,
				"parameters": [
					{
						"kind": "value",
						"defaultValue": "Canonical",
						"deco": "E3std3uni20UnicodeDecomposition",
						"name": "decompType"
					}
				],
				"comment": "    Returns a full $(S_LINK Canonical decomposition, Canonical)\n    (by default) or $(S_LINK Compatibility decomposition, Compatibility)\n    decomposition of $(CHARACTER) $(D ch).\n    If no decomposition is available returns a $(LREF Grapheme)\n    with the $(D ch) itself.\n\n    Note:\n    This function also decomposes hangul syllables\n    as prescribed by the standard.\n\n    See_Also: $(LREF decomposeHangul) for a restricted version\n    that takes into account only hangul syllables  but\n    no other decompositions.\n\n    Example:\n    ---\n    import std.algorithm;\n    assert(decompose('Ĉ')[].equal(\"C\\u0302\"));\n    assert(decompose('D')[].equal(\"D\"));\n    assert(decompose('\\uD4DC')[].equal(\"\\u1111\\u1171\\u11B7\"));\n    assert(decompose!Compatibility('¹').equal(\"1\"));\n    ---\n",
				"name": "decompose"
			},
			{
				"kind": "function",
				"line": 7599,
				"deco": "FNewZS3std3uni8Grapheme",
				"endchar": 1,
				"char": 10,
				"parameters": [
					{
						"deco": "w",
						"name": "ch"
					}
				],
				"name": "decomposeHangul",
				"comment": "    Decomposes a Hangul syllable. If $(D ch) is not a composed syllable\n    then this function returns $(LREF Grapheme) containing only $(D ch) as is.\nExample:\n\n---\nimport std.algorithm;\nassert(decomposeHangul('\\uD4DB')[].equal(\"\\u1111\\u1171\\u11B6\"));\n\n---\n",
				"endline": 7613
			},
			{
				"kind": "function",
				"line": 7631,
				"deco": "FNaNbNiNewwwZw",
				"endchar": 1,
				"char": 7,
				"parameters": [
					{
						"deco": "w",
						"name": "lead"
					},
					{
						"deco": "w",
						"name": "vowel"
					},
					{
						"deco": "w",
						"default": "'\\U0000ffff'",
						"name": "trailing"
					}
				],
				"name": "composeJamo",
				"comment": "    Try to compose hangul syllable out of a leading consonant ($(D lead)),\n    a $(D vowel) and optional $(D trailing) consonant jamos.\n\n    On success returns the composed LV or LVT hangul syllable.\n\n    If any of $(D lead) and $(D vowel) are not a valid hangul jamo\n    of the respective $(CHARACTER) class returns dchar.init.\nExample:\n\n---\nassert(composeJamo('\\u1111', '\\u1171', '\\u11B6') == '\\uD4DB');\n// leaving out T-vowel, or passing any codepoint\n// that is not trailing consonant composes an LV-syllable\nassert(composeJamo('\\u1111', '\\u1171') == '\\uD4CC');\nassert(composeJamo('\\u1111', '\\u1171', ' ') == '\\uD4CC');\nassert(composeJamo('\\u1111', 'A') == dchar.init);\nassert(composeJamo('A', '\\u1171') == dchar.init);\n\n---\n",
				"originalType": "pure nothrow @nogc @trusted dchar(dchar lead, dchar vowel, dchar trailing = (dchar).init)",
				"endline": 7642
			},
			{
				"kind": "enum",
				"line": 7683,
				"members": [],
				"char": 1,
				"baseDeco": "i",
				"name": "NormalizationForm",
				"comment": "    Enumeration type for normalization forms,\n    passed as template parameter for functions like $(LREF normalize).\n"
			},
			{
				"kind": "enum member",
				"line": 7695,
				"value": "(NormalizationForm).NFC",
				"char": 5,
				"name": "NFC",
				"comment": "        Shorthand aliases from values indicating normalization forms.\n"
			},
			{
				"kind": "enum member",
				"line": 7697,
				"value": "(NormalizationForm).NFD",
				"char": 5,
				"name": "NFD",
				"comment": "ditto\n"
			},
			{
				"kind": "enum member",
				"line": 7699,
				"value": "(NormalizationForm).NFKC",
				"char": 5,
				"name": "NFKC",
				"comment": "ditto\n"
			},
			{
				"kind": "enum member",
				"line": 7701,
				"value": "(NormalizationForm).NFKD",
				"char": 5,
				"name": "NFKD",
				"comment": "ditto\n"
			},
			{
				"kind": "template",
				"line": 7715,
				"members": [
					{
						"kind": "function",
						"line": 7715,
						"endchar": 1,
						"char": 12,
						"type": "inout(C)[](inout(C)[] input)",
						"parameters": [
							{
								"type": "inout(C)[]",
								"name": "input"
							}
						],
						"name": "normalize",
						"endline": 7804
					}
				],
				"char": 12,
				"parameters": [
					{
						"kind": "value",
						"defaultValue": "NFC",
						"deco": "E3std3uni17NormalizationForm",
						"name": "norm"
					},
					{
						"kind": "type",
						"name": "C"
					}
				],
				"comment": "    Returns $(D input) string normalized to the chosen form.\n    Form C is used by default.\n\n    For more information on normalization forms see\n    the $(S_LINK Normalization, normalization section).\n\n    Note:\n    In cases where the string in question is already normalized,\n    it is returned unmodified and no memory allocation happens.\nExample:\n\n---\n// any encoding works\nwstring greet = \"Hello world\";\nassert(normalize(greet) is greet); // the same exact slice\n\n// An example of a character with all 4 forms being different:\n// Greek upsilon with acute and hook symbol (code point 0x03D3)\nassert(normalize!NFC(\"ϓ\") == \"\\u03D3\");\nassert(normalize!NFD(\"ϓ\") == \"\\u03D2\\u0301\");\nassert(normalize!NFKC(\"ϓ\") == \"\\u038E\");\nassert(normalize!NFKD(\"ϓ\") == \"\\u03A5\\u0301\");\n\n---\n",
				"name": "normalize"
			},
			{
				"kind": "template",
				"line": 7965,
				"members": [
					{
						"kind": "function",
						"line": 7965,
						"endchar": 1,
						"char": 13,
						"type": "bool(dchar ch)",
						"parameters": [
							{
								"deco": "w",
								"name": "ch"
							}
						],
						"name": "allowedIn",
						"endline": 7968
					}
				],
				"char": 13,
				"parameters": [
					{
						"kind": "value",
						"deco": "E3std3uni17NormalizationForm",
						"name": "norm"
					}
				],
				"comment": "    Tests if dchar $(D ch) is always allowed (Quick_Check=YES) in normalization\n    form $(D norm).\nExample:\n\n---\n// e.g. Cyrillic is always allowed, so is ASCII\nassert(allowedIn!NFC('я'));\nassert(allowedIn!NFD('я'));\nassert(allowedIn!NFKC('я'));\nassert(allowedIn!NFKD('я'));\nassert(allowedIn!NFC('Z'));\n\n---\n",
				"name": "allowedIn"
			},
			{
				"kind": "function",
				"line": 8050,
				"deco": "FNaNbNiNfwZb",
				"endchar": 1,
				"char": 13,
				"parameters": [
					{
						"deco": "w",
						"name": "c"
					}
				],
				"name": "isWhite",
				"comment": "    Whether or not $(D c) is a Unicode whitespace $(CHARACTER).\n    (general Unicode category: Part of C0(tab, vertical tab, form feed,\n    carriage return, and linefeed characters), Zs, Zl, Zp, and NEL(U+0085))\n",
				"endline": 8053
			},
			{
				"kind": "function",
				"line": 8059,
				"deco": "FNaNbNiNfwZb",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "w",
						"name": "c"
					}
				],
				"name": "isLower",
				"comment": "    Return whether $(D c) is a Unicode lowercase $(CHARACTER).\n",
				"endline": 8065
			},
			{
				"kind": "function",
				"line": 8092,
				"deco": "FNaNbNiNfwZb",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "w",
						"name": "c"
					}
				],
				"name": "isUpper",
				"comment": "    Return whether $(D c) is a Unicode uppercase $(CHARACTER).\n",
				"endline": 8098
			},
			{
				"kind": "function",
				"line": 8128,
				"deco": "FNaNbNiNfwZw",
				"endchar": 1,
				"char": 7,
				"parameters": [
					{
						"deco": "w",
						"name": "c"
					}
				],
				"name": "toLower",
				"comment": "    If $(D c) is a Unicode uppercase $(CHARACTER), then its lowercase equivalent\n    is returned. Otherwise $(D c) is returned.\n\n    Warning: certain alphabets like German and Greek have no 1:1\n    upper-lower mapping. Use overload of toLower which takes full string instead.\n",
				"endline": 8145
			},
			{
				"kind": "template",
				"line": 8312,
				"constraint": "isInputRange!Range && isSomeChar!(ElementEncodingType!Range)",
				"members": [
					{
						"kind": "function",
						"line": 8312,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "(Range str)",
						"parameters": [
							{
								"type": "Range",
								"name": "str"
							}
						],
						"name": "toLowerCase",
						"endline": 8326
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "Range"
					}
				],
				"comment": " Convert input range or string to upper or lower case.\n\n Does not allocate memory.\n Characters in UTF-8 or UTF-16 format that cannot be decoded\n are treated as $(XREF utf, replacementDchar).\n\n Params:\n      str = string or range of characters\n\n Returns:\n      an InputRange of dchars\n\n See_Also:\n      $(LREF toUpper), $(LREF toLower)\nExample:\n\n---\nimport std.algorithm: equal;\n\nassert(\"hEllo\".toUpperCase.equal(\"HELLO\"));\n\n---\n",
				"name": "toLowerCase"
			},
			{
				"kind": "template",
				"line": 8329,
				"constraint": "isInputRange!Range && isSomeChar!(ElementEncodingType!Range)",
				"members": [
					{
						"kind": "function",
						"line": 8329,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "(Range str)",
						"parameters": [
							{
								"type": "Range",
								"name": "str"
							}
						],
						"name": "toUpperCase",
						"endline": 8343
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "Range"
					}
				],
				"comment": "ditto\n",
				"name": "toUpperCase"
			},
			{
				"kind": "template",
				"line": 8642,
				"constraint": "is(C == char) || is(C == wchar) || is(C == dchar)",
				"members": [
					{
						"kind": "function",
						"line": 8642,
						"endchar": 1,
						"char": 6,
						"type": "pure @trusted void(ref C[] s)",
						"parameters": [
							{
								"storageClass": [
									"ref"
								],
								"type": "C[]",
								"name": "s"
							}
						],
						"name": "toLowerInPlace",
						"endline": 8646
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "C"
					}
				],
				"comment": "    Converts $(D s) to lowercase (by performing Unicode lowercase mapping) in place.\n    For a few characters string length may increase after the transformation,\n    in such a case the function reallocates exactly once.\n    If $(D s) does not have any uppercase characters, then $(D s) is unaltered.\n",
				"name": "toLowerInPlace"
			},
			{
				"kind": "template",
				"line": 8664,
				"constraint": "is(C == char) || is(C == wchar) || is(C == dchar)",
				"members": [
					{
						"kind": "function",
						"line": 8664,
						"endchar": 1,
						"char": 6,
						"type": "pure @trusted void(ref C[] s)",
						"parameters": [
							{
								"storageClass": [
									"ref"
								],
								"type": "C[]",
								"name": "s"
							}
						],
						"name": "toUpperInPlace",
						"endline": 8668
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "C"
					}
				],
				"comment": "    Converts $(D s) to uppercase  (by performing Unicode uppercase mapping) in place.\n    For a few characters string length may increase after the transformation,\n    in such a case the function reallocates exactly once.\n    If $(D s) does not have any lowercase characters, then $(D s) is unaltered.\n",
				"name": "toUpperInPlace"
			},
			{
				"kind": "template",
				"line": 8685,
				"constraint": "isSomeString!S",
				"members": [
					{
						"kind": "function",
						"line": 8685,
						"endchar": 1,
						"char": 3,
						"type": "pure @trusted S(S s)",
						"parameters": [
							{
								"type": "S",
								"name": "s"
							}
						],
						"name": "toLower",
						"endline": 8689
					}
				],
				"char": 3,
				"parameters": [
					{
						"kind": "type",
						"name": "S"
					}
				],
				"comment": "    Returns a string which is identical to $(D s) except that all of its\n    characters are converted to lowercase (by preforming Unicode lowercase mapping).\n    If none of $(D s) characters were affected, then $(D s) itself is returned.\n",
				"name": "toLower"
			},
			{
				"kind": "function",
				"line": 8794,
				"deco": "FNaNbNiNfwZw",
				"endchar": 1,
				"char": 7,
				"parameters": [
					{
						"deco": "w",
						"name": "c"
					}
				],
				"name": "toUpper",
				"comment": "    If $(D c) is a Unicode lowercase $(CHARACTER), then its uppercase equivalent\n    is returned. Otherwise $(D c) is returned.\n\n    Warning:\n    Certain alphabets like German and Greek have no 1:1\n    upper-lower mapping. Use overload of toUpper which takes full string instead.\n\n    toUpper can be used as an argument to $(XREF algorithm, map) to produce an algorithm that can\n    convert a range of characters to upper case without allocating memory.\n    A string can then be produced by using $(XREF algorithm, copy) to send it to an $(XREF array, appender).\nExample:\n\n---\nimport std.algorithm;\nimport std.uni;\nimport std.array;\n\nauto abuf = appender!(char[])();\n\"hello\".map!toUpper.copy(&abuf);\nassert(abuf.data == \"HELLO\");\n\n---\n",
				"endline": 8811
			},
			{
				"kind": "template",
				"line": 8846,
				"constraint": "isSomeString!S",
				"members": [
					{
						"kind": "function",
						"line": 8846,
						"endchar": 1,
						"char": 3,
						"type": "pure @trusted S(S s)",
						"parameters": [
							{
								"type": "S",
								"name": "s"
							}
						],
						"name": "toUpper",
						"endline": 8850
					}
				],
				"char": 3,
				"parameters": [
					{
						"kind": "type",
						"name": "S"
					}
				],
				"comment": "    Returns a string which is identical to $(D s) except that all of its\n    characters are converted to uppercase (by preforming Unicode uppercase mapping).\n    If none of $(D s) characters were affected, then $(D s) itself is returned.\n",
				"name": "toUpper"
			},
			{
				"kind": "function",
				"line": 8954,
				"deco": "FNaNbNiNfwZb",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "w",
						"name": "c"
					}
				],
				"name": "isAlpha",
				"comment": "    Returns whether $(D c) is a Unicode alphabetic $(CHARACTER)\n    (general Unicode category: Alphabetic).\n",
				"endline": 8972
			},
			{
				"kind": "function",
				"line": 8989,
				"deco": "FNaNbNiNfwZb",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "w",
						"name": "c"
					}
				],
				"name": "isMark",
				"comment": "    Returns whether $(D c) is a Unicode mark\n    (general Unicode category: Mn, Me, Mc).\n",
				"endline": 8992
			},
			{
				"kind": "function",
				"line": 9008,
				"deco": "FNaNbNiNfwZb",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "w",
						"name": "c"
					}
				],
				"name": "isNumber",
				"comment": "    Returns whether $(D c) is a Unicode numerical $(CHARACTER)\n    (general Unicode category: Nd, Nl, No).\n",
				"endline": 9011
			},
			{
				"kind": "function",
				"line": 9028,
				"deco": "FNaNbNiNfwZb",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "w",
						"name": "c"
					}
				],
				"name": "isPunctuation",
				"comment": "    Returns whether $(D c) is a Unicode punctuation $(CHARACTER)\n    (general Unicode category: Pd, Ps, Pe, Pc, Po, Pi, Pf).\n",
				"endline": 9031
			},
			{
				"kind": "function",
				"line": 9051,
				"deco": "FNaNbNiNfwZb",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "w",
						"name": "c"
					}
				],
				"name": "isSymbol",
				"comment": "    Returns whether $(D c) is a Unicode symbol $(CHARACTER)\n    (general Unicode category: Sm, Sc, Sk, So).\n",
				"endline": 9054
			},
			{
				"kind": "function",
				"line": 9074,
				"deco": "FNaNbNiNfwZb",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "w",
						"name": "c"
					}
				],
				"name": "isSpace",
				"comment": "    Returns whether $(D c) is a Unicode space $(CHARACTER)\n    (general Unicode category: Zs)\n    Note: This doesn't include '\\n', '\\r', \\t' and other non-space $(CHARACTER).\n    For commonly used less strict semantics see $(LREF isWhite).\n",
				"endline": 9077
			},
			{
				"kind": "function",
				"line": 9096,
				"deco": "FNaNbNiNfwZb",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "w",
						"name": "c"
					}
				],
				"name": "isGraphical",
				"comment": "    Returns whether $(D c) is a Unicode graphical $(CHARACTER)\n    (general Unicode category: L, M, N, P, S, Zs).\n\n",
				"endline": 9099
			},
			{
				"kind": "function",
				"line": 9118,
				"deco": "FNaNbNiNfwZb",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "w",
						"name": "c"
					}
				],
				"name": "isControl",
				"comment": "    Returns whether $(D c) is a Unicode control $(CHARACTER)\n    (general Unicode category: Cc).\n",
				"endline": 9121
			},
			{
				"kind": "function",
				"line": 9141,
				"deco": "FNaNbNiNfwZb",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "w",
						"name": "c"
					}
				],
				"name": "isFormat",
				"comment": "    Returns whether $(D c) is a Unicode formatting $(CHARACTER)\n    (general Unicode category: Cf).\n",
				"endline": 9144
			},
			{
				"kind": "function",
				"line": 9162,
				"deco": "FNaNbNiNfwZb",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "w",
						"name": "c"
					}
				],
				"name": "isPrivateUse",
				"comment": "    Returns whether $(D c) is a Unicode Private Use $(CODEPOINT)\n    (general Unicode category: Co).\n",
				"endline": 9167
			},
			{
				"kind": "function",
				"line": 9174,
				"deco": "FNaNbNiNfwZb",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "w",
						"name": "c"
					}
				],
				"name": "isSurrogate",
				"comment": "    Returns whether $(D c) is a Unicode surrogate $(CODEPOINT)\n    (general Unicode category: Cs).\n",
				"endline": 9177
			},
			{
				"kind": "function",
				"line": 9183,
				"deco": "FNaNbNiNfwZb",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "w",
						"name": "c"
					}
				],
				"name": "isSurrogateHi",
				"comment": "    Returns whether $(D c) is a Unicode high surrogate (lead surrogate).\n",
				"endline": 9186
			},
			{
				"kind": "function",
				"line": 9192,
				"deco": "FNaNbNiNfwZb",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "w",
						"name": "c"
					}
				],
				"name": "isSurrogateLo",
				"comment": "    Returns whether $(D c) is a Unicode low surrogate (trail surrogate).\n",
				"endline": 9195
			},
			{
				"kind": "function",
				"line": 9203,
				"deco": "FNaNbNiNfwZb",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "w",
						"name": "c"
					}
				],
				"name": "isNonCharacter",
				"comment": "    Returns whether $(D c) is a Unicode non-character i.e.\n    a $(CODEPOINT) with no assigned abstract character.\n    (general Unicode category: Cn)\n",
				"endline": 9206
			}
		],
		"name": "std.uni",
		"comment": "    $(P The $(D std.uni) module provides an implementation\n    of fundamental Unicode algorithms and data structures.\n    This doesn't include UTF encoding and decoding primitives,\n    see $(XREF _utf, decode) and $(XREF _utf, encode) in std.utf\n    for this functionality. )\n\n    $(P All primitives listed operate on Unicode characters and\n    sets of characters. For functions which operate on ASCII characters\n    and ignore Unicode $(CHARACTERS), see $(LINK2 std_ascii.html, std.ascii).\n    For definitions of Unicode $(CHARACTER), $(CODEPOINT) and other terms\n    used throughout this module see the $(S_LINK Terminology, terminology) section\n    below.\n    )\n\n    $(P The focus of this module is the core needs of developing Unicode-aware\n    applications. To that effect it provides the following optimized primitives:\n    )\n    $(UL\n    $(LI Character classification by category and common properties:\n        $(LREF isAlpha), $(LREF isWhite) and others.\n    )\n    $(LI\n        Case-insensitive string comparison ($(LREF sicmp), $(LREF icmp)).\n    )\n    $(LI\n        Converting text to any of the four normalization forms via $(LREF normalize).\n    )\n    $(LI\n        Decoding ($(LREF decodeGrapheme))  and iteration ($(LREF byGrapheme), $(LREF graphemeStride))\n        by user-perceived characters, that is by $(LREF Grapheme) clusters.\n    )\n    $(LI\n        Decomposing and composing of individual character(s) according to canonical\n        or compatibility rules, see $(LREF compose) and $(LREF decompose),\n        including the specific version for Hangul syllables $(LREF composeJamo)\n        and $(LREF decomposeHangul).\n    )\n    )\n    $(P It's recognized that an application may need further enhancements\n    and extensions, such as less commonly known algorithms,\n    or tailoring existing ones for region specific needs. To help users\n    with building any extra functionality beyond the core primitives,\n    the module provides:\n    )\n    $(UL\n    $(LI\n        $(LREF CodepointSet), a type for easy manipulation of sets of characters.\n        Besides the typical set algebra it provides an unusual feature:\n        a D source code generator for detection of $(CODEPOINTS) in this set.\n        This is a boon for meta-programming parser frameworks,\n        and is used internally to power classification in small\n        sets like $(LREF isWhite).\n    )\n    $(LI\n        A way to construct optimal packed multi-stage tables also known as a\n        special case of $(LUCKY Trie).\n        The functions $(LREF codepointTrie), $(LREF codepointSetTrie)\n        construct custom tries that map dchar to value.\n        The end result is a fast and predictable $(BIGOH 1) lookup that powers\n        functions like $(LREF isAlpha) and $(LREF combiningClass),\n        but for user-defined data sets.\n    )\n    $(LI\n        A useful technique for Unicode-aware parsers that perform\n        character classification of encoded $(CODEPOINTS)\n        is to avoid unnecassary decoding at all costs.\n        $(LREF utfMatcher) provides an improvement over the usual workflow\n        of decode-classify-process, combining the decoding and classification\n        steps. By extracting necessary bits directly from encoded\n        $(S_LINK Code unit, code units) matchers achieve\n        significant performance improvements. See $(LREF MatcherConcept) for\n        the common interface of UTF matchers.\n    )\n    $(LI\n        Generally useful building blocks for customized normalization:\n        $(LREF combiningClass) for querying combining class\n        and $(LREF allowedIn) for testing the Quick_Check\n        property of a given normalization form.\n    )\n    $(LI\n        Access to a large selection of commonly used sets of $(CODEPOINTS).\n        $(S_LINK Unicode properties, Supported sets) include Script,\n        Block and General Category. The exact contents of a set can be\n        observed in the CLDR utility, on the\n        $(WEB www.unicode.org/cldr/utility/properties.jsp, property index) page\n        of the Unicode website.\n        See $(LREF unicode) for easy and (optionally) compile-time checked set\n        queries.\n    )\n    )\n    $(SECTION Synopsis)\n    ---\n    import std.uni;\n    void main()\n    {\n        // initialize code point sets using script/block or property name\n        // now 'set' contains code points from both scripts.\n        auto set = unicode(\"Cyrillic\") | unicode(\"Armenian\");\n        // same thing but simpler and checked at compile-time\n        auto ascii = unicode.ASCII;\n        auto currency = unicode.Currency_Symbol;\n\n        // easy set ops\n        auto a = set & ascii;\n        assert(a.empty); // as it has no intersection with ascii\n        a = set | ascii;\n        auto b = currency - a; // subtract all ASCII, Cyrillic and Armenian\n\n        // some properties of code point sets\n        assert(b.length > 45); // 46 items in Unicode 6.1, even more in 6.2\n        // testing presence of a code point in a set\n        // is just fine, it is O(logN)\n        assert(!b['$']);\n        assert(!b['\\u058F']); // Armenian dram sign\n        assert(b['¥']);\n\n        // building fast lookup tables, these guarantee O(1) complexity\n        // 1-level Trie lookup table essentially a huge bit-set ~262Kb\n        auto oneTrie = toTrie!1(b);\n        // 2-level far more compact but typically slightly slower\n        auto twoTrie = toTrie!2(b);\n        // 3-level even smaller, and a bit slower yet\n        auto threeTrie = toTrie!3(b);\n        assert(oneTrie['£']);\n        assert(twoTrie['£']);\n        assert(threeTrie['£']);\n\n        // build the trie with the most sensible trie level\n        // and bind it as a functor\n        auto cyrillicOrArmenian = toDelegate(set);\n        auto balance = find!(cyrillicOrArmenian)(\"Hello ընկեր!\");\n        assert(balance == \"ընկեր!\");\n        // compatible with bool delegate(dchar)\n        bool delegate(dchar) bindIt = cyrillicOrArmenian;\n\n        // Normalization\n        string s = \"Plain ascii (and not only), is always normalized!\";\n        assert(s is normalize(s));// is the same string\n\n        string nonS = \"A\\u0308ffin\"; // A ligature\n        auto nS = normalize(nonS); // to NFC, the W3C endorsed standard\n        assert(nS == \"Äffin\");\n        assert(nS != nonS);\n        string composed = \"Äffin\";\n\n        assert(normalize!NFD(composed) == \"A\\u0308ffin\");\n        // to NFKD, compatibility decomposition useful for fuzzy matching/searching\n        assert(normalize!NFKD(\"2¹⁰\") == \"210\");\n    }\n    ---\n    $(SECTION Terminology)\n    $(P The following is a list of important Unicode notions\n    and definitions. Any conventions used specifically in this\n    module alone are marked as such. The descriptions are based on the formal\n    definition as found in $(WEB www.unicode.org/versions/Unicode6.2.0/ch03.pdf,\n    chapter three of The Unicode Standard Core Specification.)\n    )\n\n    $(P $(DEF Abstract character) A unit of information used for the organization,\n    control, or representation of textual data.\n    Note that:\n        $(UL\n        $(LI When representing data, the nature of that data\n        is generally symbolic as opposed to some other\n        kind of data (for example, visual).)\n\n        $(LI An abstract character has no concrete form\n        and should not be confused with a $(S_LINK Glyph, glyph).)\n\n        $(LI An abstract character does not necessarily\n        correspond to what a user thinks of as a “character”\n         and should not be confused with a $(LREF Grapheme).)\n\n        $(LI The abstract characters encoded (see Encoded character)\n        are known as Unicode abstract characters.)\n\n        $(LI Abstract characters not directly\n        encoded by the Unicode Standard can often be\n        represented by the use of combining character sequences.)\n        )\n    )\n\n    $(P $(DEF Canonical decomposition)\n    The decomposition of a character or character sequence\n    that results from recursively applying the canonical\n    mappings found in the Unicode Character Database\n    and these described in Conjoining Jamo Behavior\n    (section 12 of\n    $(WEB www.unicode.org/uni2book/ch03.pdf, Unicode Conformance)).\n    )\n\n    $(P $(DEF Canonical composition)\n    The precise definition of the Canonical composition\n    is the algorithm as specified in $(WEB www.unicode.org/uni2book/ch03.pdf,\n    Unicode Conformance) section 11.\n    Informally it's the process that does the reverse of the canonical\n    decomposition with the addition of certain rules\n    that e.g. prevent legacy characters from appearing in the composed result.\n    )\n\n    $(P $(DEF Canonical equivalent)\n    Two character sequences are said to be canonical equivalents if\n    their full canonical decompositions are identical.\n    )\n\n    $(P $(DEF Character) Typically differs by context.\n    For the purpose of this documentation the term $(I character)\n    implies $(I encoded character), that is, a code point having\n    an assigned abstract character (a symbolic meaning).\n    )\n\n    $(P $(DEF Code point) Any value in the Unicode codespace;\n    that is, the range of integers from 0 to 10FFFF (hex).\n    Not all code points are assigned to encoded characters.\n    )\n\n    $(P $(DEF Code unit) The minimal bit combination that can represent\n    a unit of encoded text for processing or interchange.\n    Depending on the encoding this could be:\n    8-bit code units in the UTF-8 ($(D char)),\n    16-bit code units in the UTF-16 ($(D wchar)),\n    and 32-bit code units in the UTF-32 ($(D dchar)).\n    $(I Note that in UTF-32, a code unit is a code point\n    and is represented by the D $(D dchar) type.)\n    )\n\n    $(P $(DEF Combining character) A character with the General Category\n     of Combining Mark(M).\n        $(UL\n            $(LI All characters with non-zero canonical combining class\n            are combining characters, but the reverse is not the case:\n            there are combining characters with a zero combining class.\n            )\n            $(LI These characters are not normally used in isolation\n            unless they are being described. They include such characters\n            as accents, diacritics, Hebrew points, Arabic vowel signs,\n            and Indic matras.\n            )\n        )\n    )\n\n    $(P $(DEF Combining class)\n        A numerical value used by the Unicode Canonical Ordering Algorithm\n        to determine which sequences of combining marks are to be\n        considered canonically equivalent and  which are not.\n    )\n\n    $(P $(DEF Compatibility decomposition)\n    The decomposition of a character or character sequence that results\n    from recursively applying both the compatibility mappings and\n    the canonical mappings found in the Unicode Character Database, and those\n    described in Conjoining Jamo Behavior no characters\n    can be further decomposed.\n    )\n\n    $(P $(DEF Compatibility equivalent)\n    Two character sequences are said to be compatibility\n    equivalents if their full compatibility decompositions are identical.\n    )\n\n    $(P $(DEF Encoded character) An association (or mapping)\n    between an abstract character and a code point.\n    )\n\n    $(P $(DEF Glyph) The actual, concrete image of a glyph representation\n    having been rasterized or otherwise imaged onto some display surface.\n    )\n\n    $(P $(DEF Grapheme base) A character with the property\n     Grapheme_Base, or any standard Korean syllable block.\n    )\n\n    $(P $(DEF Grapheme cluster) Defined as the text between\n        grapheme boundaries  as specified by Unicode Standard Annex #29,\n        $(WEB www.unicode.org/reports/tr29/, Unicode text segmentation).\n        Important general properties of a grapheme:\n        $(UL\n            $(LI The grapheme cluster represents a horizontally segmentable\n            unit of text, consisting of some grapheme base (which may\n            consist of a Korean syllable) together with any number of\n            nonspacing marks applied to it.\n            )\n            $(LI  A grapheme cluster typically starts with a grapheme base\n            and then extends across any subsequent sequence of nonspacing marks.\n            A grapheme cluster is most directly relevant to text rendering and\n            processes such as cursor placement and text selection in editing,\n            but may also be relevant to comparison and searching.\n            )\n            $(LI For many processes, a grapheme cluster behaves as if it was a\n            single character with the same properties as its grapheme base.\n            Effectively, nonspacing marks apply $(I graphically) to the base,\n            but do not change its properties.\n            )\n        )\n        $(P This module defines a number of primitives that work with graphemes:\n        $(LREF Grapheme), $(LREF decodeGrapheme) and $(LREF graphemeStride).\n        All of them are using $(I extended grapheme) boundaries\n        as defined in the aforementioned standard annex.\n        )\n    )\n\n\n    $(P $(DEF Nonspacing mark) A combining character with the\n        General Category of Nonspacing Mark (Mn) or Enclosing Mark (Me).\n    )\n\n    $(P $(DEF Spacing mark) A combining character that is not a nonspacing mark.)\n\n\n    $(SECTION Normalization)\n\n    $(P The concepts of $(S_LINK Canonical equivalent, canonical equivalent)\n     or $(S_LINK Compatibility equivalent, compatibility equivalent)\n    characters in the Unicode Standard make it necessary to have a full, formal\n    definition of equivalence for Unicode strings.\n    String equivalence is determined by a process called normalization,\n    whereby strings are converted into forms which are compared\n    directly for identity. This is the primary goal of the normalization process,\n    see the function $(LREF normalize) to convert into any of\n    the four defined forms.\n    )\n\n    $(P A very important attribute of the Unicode Normalization Forms\n    is that they must remain stable between versions of the Unicode Standard.\n    A Unicode string normalized to a particular Unicode Normalization Form\n    in one version of the standard is guaranteed to remain in that Normalization\n    Form for implementations of future versions of the standard.\n    )\n\n    $(P The Unicode Standard specifies four normalization forms.\n    Informally, two of these forms are defined by maximal decomposition\n    of equivalent sequences, and two of these forms are defined\n    by maximal $(I composition) of equivalent sequences.\n        $(UL\n        $(LI Normalization Form D (NFD): The $(S_LINK Canonical decomposition,\n            canonical decomposition) of a character sequence.)\n        $(LI Normalization Form KD (NFKD): The $(S_LINK Compatibility decomposition,\n            compatibility decomposition) of a character sequence.)\n        $(LI Normalization Form C (NFC): The canonical composition of the\n            $(S_LINK Canonical decomposition, canonical decomposition)\n            of a coded character sequence.)\n        $(LI Normalization Form KC (NFKC): The canonical composition\n        of the $(S_LINK Compatibility decomposition,\n            compatibility decomposition) of a character sequence)\n        )\n    )\n\n    $(P The choice of the normalization form depends on the particular use case.\n    NFC is the best form for general text, since it's more compatible with\n    strings converted from legacy encodings. NFKC is the preferred form for\n    identifiers, especially where there are security concerns. NFD and NFKD\n    are the most useful for internal processing.\n    )\n\n    $(SECTION Construction of lookup tables)\n\n    $(P The Unicode standard describes a set of algorithms that\n    depend on having the ability to quickly look up various properties\n    of a code point. Given the the codespace of about 1 million $(CODEPOINTS),\n    it is not a trivial task to provide a space-efficient solution for\n    the multitude of properties.)\n\n    $(P Common approaches such as hash-tables or binary search over\n     sorted code point intervals (as in $(LREF InversionList)) are insufficient.\n     Hash-tables have enormous memory footprint and binary search\n     over intervals is not fast enough for some heavy-duty algorithms.\n     )\n\n    $(P The recommended solution (see Unicode Implementation Guidelines)\n    is using multi-stage tables that are an implementation of the\n    $(WEB en.wikipedia.org/wiki/Trie, Trie) data structure with integer\n    keys and a fixed number of stages. For the remainder of the section\n    this will be called a fixed trie. The following describes a particular\n    implementation that is aimed for the speed of access at the expense\n    of ideal size savings.\n    )\n\n    $(P Taking a 2-level Trie as an example the principle of operation is as follows.\n        Split the number of bits in a key (code point, 21 bits) into 2 components\n        (e.g. 15 and 8).  The first is the number of bits in the index of the trie\n         and the other is number of bits in each page of the trie.\n        The layout of the trie is then an array of size 2^^bits-of-index followed\n        an array of memory chunks of size 2^^bits-of-page/bits-per-element.\n    )\n\n    $(P The number of pages is variable (but not less then 1)\n        unlike the number of entries in the index. The slots of the index\n        all have to contain a number of a page that is present. The lookup is then\n        just a couple of operations - slice the upper bits,\n        lookup an index for these, take a page at this index and use\n        the lower bits as an offset within this page.\n\n        Assuming that pages are laid out consequently\n        in one array at $(D pages), the pseudo-code is:\n    )\n    ---\n    auto elemsPerPage = (2 ^^ bits_per_page) / Value.sizeOfInBits;\n    pages[index[n >> bits_per_page]][n & (elemsPerPage - 1)];\n    ---\n    $(P Where if $(D elemsPerPage) is a power of 2 the whole process is\n    a handful of simple instructions and 2 array reads. Subsequent levels\n    of the trie are introduced by recursing on this notion - the index array\n    is treated as values. The number of bits in index is then again\n    split into 2 parts, with pages over 'current-index' and the new 'upper-index'.\n    )\n\n    $(P For completeness a level 1 trie is simply an array.\n    The current implementation takes advantage of bit-packing values\n    when the range is known to be limited in advance (such as $(D bool)).\n    See also $(LREF BitPacked) for enforcing it manually.\n    The major size advantage however comes from the fact\n    that multiple $(B identical pages on every level are merged) by construction.\n    )\n\n    $(P The process of constructing a trie is more involved and is hidden from\n    the user in a form of the convenience functions $(LREF codepointTrie),\n    $(LREF codepointSetTrie) and the even more convenient $(LREF toTrie).\n    In general a set or built-in AA with $(D dchar) type\n    can be turned into a trie. The trie object in this module\n    is read-only (immutable); it's effectively frozen after construction.\n    )\n\n    $(SECTION Unicode properties)\n\n    $(P This is a full list of Unicode properties accessible through $(LREF unicode)\n    with specific helpers per category nested within. Consult the\n    $(WEB www.unicode.org/cldr/utility/properties.jsp, CLDR utility)\n    when in doubt about the contents of a particular set.)\n\n    $(P General category sets listed below are only accessible with the\n    $(LREF unicode) shorthand accessor.)\n    $(BOOKTABLE $(B General category ),\n         $(TR $(TH Abb.) $(TH Long form)\n            $(TH Abb.) $(TH Long form)$(TH Abb.) $(TH Long form))\n        $(TR $(TD L) $(TD Letter)\n            $(TD Cn) $(TD Unassigned)  $(TD Po) $(TD Other_Punctuation))\n        $(TR $(TD Ll) $(TD Lowercase_Letter)\n            $(TD Co) $(TD Private_Use) $(TD Ps) $(TD Open_Punctuation))\n        $(TR $(TD Lm) $(TD Modifier_Letter)\n            $(TD Cs) $(TD Surrogate)   $(TD S) $(TD Symbol))\n        $(TR $(TD Lo) $(TD Other_Letter)\n            $(TD N) $(TD Number)  $(TD Sc) $(TD Currency_Symbol))\n        $(TR $(TD Lt) $(TD Titlecase_Letter)\n          $(TD Nd) $(TD Decimal_Number)  $(TD Sk) $(TD Modifier_Symbol))\n        $(TR $(TD Lu) $(TD Uppercase_Letter)\n          $(TD Nl) $(TD Letter_Number)   $(TD Sm) $(TD Math_Symbol))\n        $(TR $(TD M) $(TD Mark)\n          $(TD No) $(TD Other_Number)    $(TD So) $(TD Other_Symbol))\n        $(TR $(TD Mc) $(TD Spacing_Mark)\n          $(TD P) $(TD Punctuation) $(TD Z) $(TD Separator))\n        $(TR $(TD Me) $(TD Enclosing_Mark)\n          $(TD Pc) $(TD Connector_Punctuation)   $(TD Zl) $(TD Line_Separator))\n        $(TR $(TD Mn) $(TD Nonspacing_Mark)\n          $(TD Pd) $(TD Dash_Punctuation)    $(TD Zp) $(TD Paragraph_Separator))\n        $(TR $(TD C) $(TD Other)\n          $(TD Pe) $(TD Close_Punctuation) $(TD Zs) $(TD Space_Separator))\n        $(TR $(TD Cc) $(TD Control) $(TD Pf)\n          $(TD Final_Punctuation)   $(TD -) $(TD Any))\n        $(TR $(TD Cf) $(TD Format)\n          $(TD Pi) $(TD Initial_Punctuation) $(TD -) $(TD ASCII))\n    )\n    $(P Sets for other commonly useful properties that are\n    accessible with $(LREF unicode):)\n    $(BOOKTABLE $(B Common binary properties),\n        $(TR $(TH Name) $(TH Name) $(TH Name))\n        $(TR $(TD Alphabetic)  $(TD Ideographic) $(TD Other_Uppercase))\n        $(TR $(TD ASCII_Hex_Digit) $(TD IDS_Binary_Operator) $(TD Pattern_Syntax))\n        $(TR $(TD Bidi_Control)    $(TD ID_Start)    $(TD Pattern_White_Space))\n        $(TR $(TD Cased)   $(TD IDS_Trinary_Operator)    $(TD Quotation_Mark))\n        $(TR $(TD Case_Ignorable)  $(TD Join_Control)    $(TD Radical))\n        $(TR $(TD Dash)    $(TD Logical_Order_Exception) $(TD Soft_Dotted))\n        $(TR $(TD Default_Ignorable_Code_Point)    $(TD Lowercase)   $(TD STerm))\n        $(TR $(TD Deprecated)  $(TD Math)    $(TD Terminal_Punctuation))\n        $(TR $(TD Diacritic)   $(TD Noncharacter_Code_Point) $(TD Unified_Ideograph))\n        $(TR $(TD Extender)    $(TD Other_Alphabetic)    $(TD Uppercase))\n        $(TR $(TD Grapheme_Base)   $(TD Other_Default_Ignorable_Code_Point)  $(TD Variation_Selector))\n        $(TR $(TD Grapheme_Extend) $(TD Other_Grapheme_Extend)   $(TD White_Space))\n        $(TR $(TD Grapheme_Link)   $(TD Other_ID_Continue)   $(TD XID_Continue))\n        $(TR $(TD Hex_Digit)   $(TD Other_ID_Start)  $(TD XID_Start))\n        $(TR $(TD Hyphen)  $(TD Other_Lowercase) )\n        $(TR $(TD ID_Continue) $(TD Other_Math)  )\n    )\n    $(P Bellow is the table with block names accepted by $(LREF unicode.block).\n    Note that the shorthand version $(LREF unicode) requires \"In\"\n    to be prepended to the names of blocks so as to disambiguate\n    scripts and blocks.)\n\n    $(BOOKTABLE $(B Blocks),\n        $(TR $(TD Aegean Numbers)    $(TD Ethiopic Extended) $(TD Mongolian))\n        $(TR $(TD Alchemical Symbols)    $(TD Ethiopic Extended-A)   $(TD Musical Symbols))\n        $(TR $(TD Alphabetic Presentation Forms) $(TD Ethiopic Supplement)   $(TD Myanmar))\n        $(TR $(TD Ancient Greek Musical Notation)    $(TD General Punctuation)   $(TD Myanmar Extended-A))\n        $(TR $(TD Ancient Greek Numbers) $(TD Geometric Shapes)  $(TD New Tai Lue))\n        $(TR $(TD Ancient Symbols)   $(TD Georgian)  $(TD NKo))\n        $(TR $(TD Arabic)    $(TD Georgian Supplement)   $(TD Number Forms))\n        $(TR $(TD Arabic Extended-A) $(TD Glagolitic)    $(TD Ogham))\n        $(TR $(TD Arabic Mathematical Alphabetic Symbols)    $(TD Gothic)    $(TD Ol Chiki))\n        $(TR $(TD Arabic Presentation Forms-A)   $(TD Greek and Coptic)  $(TD Old Italic))\n        $(TR $(TD Arabic Presentation Forms-B)   $(TD Greek Extended)    $(TD Old Persian))\n        $(TR $(TD Arabic Supplement) $(TD Gujarati)  $(TD Old South Arabian))\n        $(TR $(TD Armenian)  $(TD Gurmukhi)  $(TD Old Turkic))\n        $(TR $(TD Arrows)    $(TD Halfwidth and Fullwidth Forms) $(TD Optical Character Recognition))\n        $(TR $(TD Avestan)   $(TD Hangul Compatibility Jamo) $(TD Oriya))\n        $(TR $(TD Balinese)  $(TD Hangul Jamo)   $(TD Osmanya))\n        $(TR $(TD Bamum) $(TD Hangul Jamo Extended-A)    $(TD Phags-pa))\n        $(TR $(TD Bamum Supplement)  $(TD Hangul Jamo Extended-B)    $(TD Phaistos Disc))\n        $(TR $(TD Basic Latin)   $(TD Hangul Syllables)  $(TD Phoenician))\n        $(TR $(TD Batak) $(TD Hanunoo)   $(TD Phonetic Extensions))\n        $(TR $(TD Bengali)   $(TD Hebrew)    $(TD Phonetic Extensions Supplement))\n        $(TR $(TD Block Elements)    $(TD High Private Use Surrogates)   $(TD Playing Cards))\n        $(TR $(TD Bopomofo)  $(TD High Surrogates)   $(TD Private Use Area))\n        $(TR $(TD Bopomofo Extended) $(TD Hiragana)  $(TD Rejang))\n        $(TR $(TD Box Drawing)   $(TD Ideographic Description Characters)    $(TD Rumi Numeral Symbols))\n        $(TR $(TD Brahmi)    $(TD Imperial Aramaic)  $(TD Runic))\n        $(TR $(TD Braille Patterns)  $(TD Inscriptional Pahlavi) $(TD Samaritan))\n        $(TR $(TD Buginese)  $(TD Inscriptional Parthian)    $(TD Saurashtra))\n        $(TR $(TD Buhid) $(TD IPA Extensions)    $(TD Sharada))\n        $(TR $(TD Byzantine Musical Symbols) $(TD Javanese)  $(TD Shavian))\n        $(TR $(TD Carian)    $(TD Kaithi)    $(TD Sinhala))\n        $(TR $(TD Chakma)    $(TD Kana Supplement)   $(TD Small Form Variants))\n        $(TR $(TD Cham)  $(TD Kanbun)    $(TD Sora Sompeng))\n        $(TR $(TD Cherokee)  $(TD Kangxi Radicals)   $(TD Spacing Modifier Letters))\n        $(TR $(TD CJK Compatibility) $(TD Kannada)   $(TD Specials))\n        $(TR $(TD CJK Compatibility Forms)   $(TD Katakana)  $(TD Sundanese))\n        $(TR $(TD CJK Compatibility Ideographs)  $(TD Katakana Phonetic Extensions)  $(TD Sundanese Supplement))\n        $(TR $(TD CJK Compatibility Ideographs Supplement)   $(TD Kayah Li)  $(TD Superscripts and Subscripts))\n        $(TR $(TD CJK Radicals Supplement)   $(TD Kharoshthi)    $(TD Supplemental Arrows-A))\n        $(TR $(TD CJK Strokes)   $(TD Khmer) $(TD Supplemental Arrows-B))\n        $(TR $(TD CJK Symbols and Punctuation)   $(TD Khmer Symbols) $(TD Supplemental Mathematical Operators))\n        $(TR $(TD CJK Unified Ideographs)    $(TD Lao)   $(TD Supplemental Punctuation))\n        $(TR $(TD CJK Unified Ideographs Extension A)    $(TD Latin-1 Supplement)    $(TD Supplementary Private Use Area-A))\n        $(TR $(TD CJK Unified Ideographs Extension B)    $(TD Latin Extended-A)  $(TD Supplementary Private Use Area-B))\n        $(TR $(TD CJK Unified Ideographs Extension C)    $(TD Latin Extended Additional) $(TD Syloti Nagri))\n        $(TR $(TD CJK Unified Ideographs Extension D)    $(TD Latin Extended-B)  $(TD Syriac))\n        $(TR $(TD Combining Diacritical Marks)   $(TD Latin Extended-C)  $(TD Tagalog))\n        $(TR $(TD Combining Diacritical Marks for Symbols)   $(TD Latin Extended-D)  $(TD Tagbanwa))\n        $(TR $(TD Combining Diacritical Marks Supplement)    $(TD Lepcha)    $(TD Tags))\n        $(TR $(TD Combining Half Marks)  $(TD Letterlike Symbols)    $(TD Tai Le))\n        $(TR $(TD Common Indic Number Forms) $(TD Limbu) $(TD Tai Tham))\n        $(TR $(TD Control Pictures)  $(TD Linear B Ideograms)    $(TD Tai Viet))\n        $(TR $(TD Coptic)    $(TD Linear B Syllabary)    $(TD Tai Xuan Jing Symbols))\n        $(TR $(TD Counting Rod Numerals) $(TD Lisu)  $(TD Takri))\n        $(TR $(TD Cuneiform) $(TD Low Surrogates)    $(TD Tamil))\n        $(TR $(TD Cuneiform Numbers and Punctuation) $(TD Lycian)    $(TD Telugu))\n        $(TR $(TD Currency Symbols)  $(TD Lydian)    $(TD Thaana))\n        $(TR $(TD Cypriot Syllabary) $(TD Mahjong Tiles) $(TD Thai))\n        $(TR $(TD Cyrillic)  $(TD Malayalam) $(TD Tibetan))\n        $(TR $(TD Cyrillic Extended-A)   $(TD Mandaic)   $(TD Tifinagh))\n        $(TR $(TD Cyrillic Extended-B)   $(TD Mathematical Alphanumeric Symbols) $(TD Transport And Map Symbols))\n        $(TR $(TD Cyrillic Supplement)   $(TD Mathematical Operators)    $(TD Ugaritic))\n        $(TR $(TD Deseret)   $(TD Meetei Mayek)  $(TD Unified Canadian Aboriginal Syllabics))\n        $(TR $(TD Devanagari)    $(TD Meetei Mayek Extensions)   $(TD Unified Canadian Aboriginal Syllabics Extended))\n        $(TR $(TD Devanagari Extended)   $(TD Meroitic Cursive)  $(TD Vai))\n        $(TR $(TD Dingbats)  $(TD Meroitic Hieroglyphs)  $(TD Variation Selectors))\n        $(TR $(TD Domino Tiles)  $(TD Miao)  $(TD Variation Selectors Supplement))\n        $(TR $(TD Egyptian Hieroglyphs)  $(TD Miscellaneous Mathematical Symbols-A)  $(TD Vedic Extensions))\n        $(TR $(TD Emoticons) $(TD Miscellaneous Mathematical Symbols-B)  $(TD Vertical Forms))\n        $(TR $(TD Enclosed Alphanumerics)    $(TD Miscellaneous Symbols) $(TD Yijing Hexagram Symbols))\n        $(TR $(TD Enclosed Alphanumeric Supplement)  $(TD Miscellaneous Symbols and Arrows)  $(TD Yi Radicals))\n        $(TR $(TD Enclosed CJK Letters and Months)   $(TD Miscellaneous Symbols And Pictographs) $(TD Yi Syllables))\n        $(TR $(TD Enclosed Ideographic Supplement)   $(TD Miscellaneous Technical)   )\n        $(TR $(TD Ethiopic)  $(TD Modifier Tone Letters) )\n    )\n\n    $(P Bellow is the table with script names accepted by $(LREF unicode.script)\n    and by the shorthand version $(LREF unicode):)\n    $(BOOKTABLE $(B Scripts),\n        $(TR $(TD Arabic)  $(TD Hanunoo) $(TD Old_Italic))\n        $(TR $(TD Armenian)    $(TD Hebrew)  $(TD Old_Persian))\n        $(TR $(TD Avestan) $(TD Hiragana)    $(TD Old_South_Arabian))\n        $(TR $(TD Balinese)    $(TD Imperial_Aramaic)    $(TD Old_Turkic))\n        $(TR $(TD Bamum)   $(TD Inherited)   $(TD Oriya))\n        $(TR $(TD Batak)   $(TD Inscriptional_Pahlavi)   $(TD Osmanya))\n        $(TR $(TD Bengali) $(TD Inscriptional_Parthian)  $(TD Phags_Pa))\n        $(TR $(TD Bopomofo)    $(TD Javanese)    $(TD Phoenician))\n        $(TR $(TD Brahmi)  $(TD Kaithi)  $(TD Rejang))\n        $(TR $(TD Braille) $(TD Kannada) $(TD Runic))\n        $(TR $(TD Buginese)    $(TD Katakana)    $(TD Samaritan))\n        $(TR $(TD Buhid)   $(TD Kayah_Li)    $(TD Saurashtra))\n        $(TR $(TD Canadian_Aboriginal) $(TD Kharoshthi)  $(TD Sharada))\n        $(TR $(TD Carian)  $(TD Khmer)   $(TD Shavian))\n        $(TR $(TD Chakma)  $(TD Lao) $(TD Sinhala))\n        $(TR $(TD Cham)    $(TD Latin)   $(TD Sora_Sompeng))\n        $(TR $(TD Cherokee)    $(TD Lepcha)  $(TD Sundanese))\n        $(TR $(TD Common)  $(TD Limbu)   $(TD Syloti_Nagri))\n        $(TR $(TD Coptic)  $(TD Linear_B)    $(TD Syriac))\n        $(TR $(TD Cuneiform)   $(TD Lisu)    $(TD Tagalog))\n        $(TR $(TD Cypriot) $(TD Lycian)  $(TD Tagbanwa))\n        $(TR $(TD Cyrillic)    $(TD Lydian)  $(TD Tai_Le))\n        $(TR $(TD Deseret) $(TD Malayalam)   $(TD Tai_Tham))\n        $(TR $(TD Devanagari)  $(TD Mandaic) $(TD Tai_Viet))\n        $(TR $(TD Egyptian_Hieroglyphs)    $(TD Meetei_Mayek)    $(TD Takri))\n        $(TR $(TD Ethiopic)    $(TD Meroitic_Cursive)    $(TD Tamil))\n        $(TR $(TD Georgian)    $(TD Meroitic_Hieroglyphs)    $(TD Telugu))\n        $(TR $(TD Glagolitic)  $(TD Miao)    $(TD Thaana))\n        $(TR $(TD Gothic)  $(TD Mongolian)   $(TD Thai))\n        $(TR $(TD Greek)   $(TD Myanmar) $(TD Tibetan))\n        $(TR $(TD Gujarati)    $(TD New_Tai_Lue) $(TD Tifinagh))\n        $(TR $(TD Gurmukhi)    $(TD Nko) $(TD Ugaritic))\n        $(TR $(TD Han) $(TD Ogham)   $(TD Vai))\n        $(TR $(TD Hangul)  $(TD Ol_Chiki)    $(TD Yi))\n    )\n\n    $(P Bellow is the table of names accepted by $(LREF unicode.hangulSyllableType).)\n    $(BOOKTABLE $(B Hangul syllable type),\n        $(TR $(TH Abb.) $(TH Long form))\n        $(TR $(TD L)   $(TD Leading_Jamo))\n        $(TR $(TD LV)  $(TD LV_Syllable))\n        $(TR $(TD LVT) $(TD LVT_Syllable) )\n        $(TR $(TD T)   $(TD Trailing_Jamo))\n        $(TR $(TD V)   $(TD Vowel_Jamo))\n    )\n    References:\n        $(WEB www.digitalmars.com/d/ascii-table.html, ASCII Table),\n        $(WEB en.wikipedia.org/wiki/Unicode, Wikipedia),\n        $(WEB www.unicode.org, The Unicode Consortium),\n        $(WEB www.unicode.org/reports/tr15/, Unicode normalization forms),\n        $(WEB www.unicode.org/reports/tr29/, Unicode text segmentation)\n        $(WEB www.unicode.org/uni2book/ch05.pdf,\n            Unicode Implementation Guidelines)\n        $(WEB www.unicode.org/uni2book/ch03.pdf,\n            Unicode Conformance)\n    Trademarks:\n        Unicode(tm) is a trademark of Unicode, Inc.\n\n    Macros:\n        WIKI=Phobos/StdUni\n\n    Copyright: Copyright 2013 -\n    License:   $(WEB www.boost.org/LICENSE_1_0.txt, Boost License 1.0).\n    Authors:   Dmitry Olshansky\n    Source:    $(PHOBOSSRC std/_uni.d)\n    Standards: $(WEB www.unicode.org/versions/Unicode6.2.0/, Unicode v6.2)\n\nMacros:\n\nSECTION = <h3><a id=\"$1\">$0</a></h3>\nDEF = <div><a id=\"$1\"><i>$0</i></a></div>\nS_LINK = <a href=\"#$1\">$+</a>\nCODEPOINT = $(S_LINK Code point, code point)\nCODEPOINTS = $(S_LINK Code point, code points)\nCHARACTER = $(S_LINK Character, character)\nCHARACTERS = $(S_LINK Character, characters)\nCLUSTER = $(S_LINK Grapheme cluster, grapheme cluster)\n"
	},
	{
		"kind": "module",
		"file": "../phobos/std/mmfile.d",
		"members": [
			{
				"kind": "class",
				"line": 54,
				"members": [
					{
						"kind": "enum",
						"line": 59,
						"members": [
							{
								"kind": "enum member",
								"line": 61,
								"value": "0",
								"char": 9,
								"name": "read",
								"comment": "Read existing file\n"
							},
							{
								"kind": "enum member",
								"line": 62,
								"value": "1",
								"char": 9,
								"name": "readWriteNew",
								"comment": "Delete existing file, write new file\n"
							},
							{
								"kind": "enum member",
								"line": 63,
								"value": "2",
								"char": 9,
								"name": "readWrite",
								"comment": "Read/Write existing file, create if not existing\n"
							},
							{
								"kind": "enum member",
								"line": 64,
								"value": "3",
								"char": 9,
								"name": "readCopyOnWrite",
								"comment": "Read/Write existing file, copy on write\n"
							}
						],
						"char": 5,
						"baseDeco": "i",
						"name": "Mode",
						"comment": " The mode the memory mapped file is opened with.\n"
					},
					{
						"kind": "constructor",
						"line": 73,
						"deco": "FAyaZC3std6mmfile6MmFile",
						"endchar": 5,
						"char": 5,
						"parameters": [
							{
								"deco": "Aya",
								"name": "filename"
							}
						],
						"name": "this",
						"comment": " Open memory mapped file filename for reading.\n File is closed when the object instance is deleted.\n Throws:\n  std.file.FileException\n",
						"originalType": "(string filename)",
						"endline": 76
					},
					{
						"kind": "constructor",
						"line": 169,
						"deco": "FAyaE3std6mmfile6MmFile4ModemPvmZC3std6mmfile6MmFile",
						"endchar": 5,
						"char": 5,
						"parameters": [
							{
								"deco": "Aya",
								"name": "filename"
							},
							{
								"deco": "E3std6mmfile6MmFile4Mode",
								"name": "mode"
							},
							{
								"deco": "m",
								"name": "size"
							},
							{
								"deco": "Pv",
								"name": "address"
							},
							{
								"deco": "m",
								"default": "0LU",
								"name": "window"
							}
						],
						"name": "this",
						"comment": " Open memory mapped file filename in mode.\n File is closed when the object instance is deleted.\n Params:\n  filename = name of the file.\n      If null, an anonymous file mapping is created.\n  mode = access mode defined above.\n  size =  the size of the file. If 0, it is taken to be the\n      size of the existing file.\n  address = the preferred address to map the file to,\n      although the system is not required to honor it.\n      If null, the system selects the most convenient address.\n  window = preferred block size of the amount of data to map at one time\n      with 0 meaning map the entire file. The window size must be a\n      multiple of the memory allocation page size.\n Throws:\n  std.file.FileException\n",
						"originalType": "(string filename, Mode mode, ulong size, void* address, size_t window = 0)",
						"endline": 350
					},
					{
						"kind": "destructor",
						"line": 355,
						"deco": "FZv",
						"endchar": 5,
						"char": 5,
						"name": "~this",
						"comment": " Flushes pending output and closes the memory mapped file.\n",
						"endline": 382
					},
					{
						"kind": "function",
						"line": 408,
						"deco": "xFNdZm",
						"endchar": 5,
						"char": 21,
						"name": "length",
						"comment": " Gives size in bytes of the memory mapped file.\n",
						"endline": 412
					},
					{
						"kind": "function",
						"line": 417,
						"deco": "FZE3std6mmfile6MmFile4Mode",
						"endchar": 5,
						"char": 10,
						"name": "mode",
						"comment": " Read-only property returning the file mode.\n",
						"endline": 421
					},
					{
						"kind": "function",
						"line": 426,
						"deco": "FZAv",
						"endchar": 5,
						"char": 12,
						"name": "opSlice",
						"comment": " Returns entire file contents as an array.\n",
						"endline": 430
					},
					{
						"kind": "function",
						"line": 435,
						"deco": "FmmZAv",
						"endchar": 5,
						"char": 12,
						"parameters": [
							{
								"deco": "m",
								"name": "i1"
							},
							{
								"deco": "m",
								"name": "i2"
							}
						],
						"name": "opSlice",
						"comment": " Returns slice of file contents as an array.\n",
						"endline": 442
					},
					{
						"kind": "function",
						"line": 447,
						"deco": "FmZh",
						"endchar": 5,
						"char": 11,
						"parameters": [
							{
								"deco": "m",
								"name": "i"
							}
						],
						"name": "opIndex",
						"comment": " Returns byte at index i in file.\n",
						"endline": 453
					},
					{
						"kind": "function",
						"line": 458,
						"deco": "FhmZh",
						"endchar": 5,
						"char": 11,
						"parameters": [
							{
								"deco": "h",
								"name": "value"
							},
							{
								"deco": "m",
								"name": "i"
							}
						],
						"name": "opIndexAssign",
						"comment": " Sets and returns byte at index i in file to value.\n",
						"endline": 464
					}
				],
				"char": 1,
				"name": "MmFile",
				"comment": " MmFile objects control the memory mapped file resource.\n"
			}
		],
		"name": "std.mmfile",
		"comment": " Read and write memory mapped files.\n Macros:\n  WIKI=Phobos/StdMmfile\n\n Copyright: Copyright Digital Mars 2004 - 2009.\n License:   $(WEB www.boost.org/LICENSE_1_0.txt, Boost License 1.0).\n Authors:   $(WEB digitalmars.com, Walter Bright),\n            Matthew Wilson\n Source:    $(PHOBOSSRC std/_mmfile.d)\n"
	},
	{
		"kind": "module",
		"file": "../phobos/std/encoding.d",
		"members": [
			{
				"kind": "variable",
				"line": 363,
				"init": "'\\Uffffffff'",
				"storageClass": [
					"enum"
				],
				"deco": "w",
				"char": 12,
				"name": "INVALID_SEQUENCE",
				"comment": " Special value returned by $(D safeDecode)\n"
			},
			{
				"kind": "enum",
				"line": 647,
				"members": [],
				"char": 1,
				"baseDeco": "h",
				"name": "AsciiChar",
				"comment": " Defines various character sets.\n"
			},
			{
				"kind": "alias",
				"line": 649,
				"deco": "AyE3std8encoding9AsciiChar",
				"char": 1,
				"name": "AsciiString",
				"comment": "Ditto\n"
			},
			{
				"kind": "enum",
				"line": 727,
				"members": [],
				"char": 1,
				"baseDeco": "h",
				"name": "Latin1Char",
				"comment": " Defines an Latin1-encoded character.\n"
			},
			{
				"kind": "alias",
				"line": 732,
				"deco": "AyE3std8encoding10Latin1Char",
				"char": 1,
				"name": "Latin1String",
				"comment": "Defines an Latin1-encoded string (as an array of $(D\nimmutable(Latin1Char))).\n\n\n"
			},
			{
				"kind": "enum",
				"line": 803,
				"members": [],
				"char": 1,
				"baseDeco": "h",
				"name": "Windows1252Char",
				"comment": " Defines a Windows1252-encoded character.\n"
			},
			{
				"kind": "alias",
				"line": 808,
				"deco": "AyE3std8encoding15Windows1252Char",
				"char": 1,
				"name": "Windows1252String",
				"comment": "Defines an Windows1252-encoded string (as an array of $(D\nimmutable(Windows1252Char))).\n\n\n"
			},
			{
				"kind": "function",
				"line": 1252,
				"deco": "FwZb",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "w",
						"name": "c"
					}
				],
				"name": "isValidCodePoint",
				"comment": "Returns true if c is a valid code point\n\n Note that this includes the non-character code points U+FFFE and U+FFFF,\n since these are valid code points (even though they are not valid\n characters).\n\n Supersedes:\n This function supersedes $(D std.utf.startsValidDchar()).\n\n Standards: Unicode 5.0, ASCII, ISO-8859-1, WINDOWS-1252\n\n Params:\n    c = the code point to be tested\n",
				"endline": 1255
			},
			{
				"kind": "template",
				"line": 1265,
				"members": [
					{
						"kind": "function",
						"line": 1265,
						"endchar": 1,
						"char": 18,
						"type": "@property string()",
						"name": "encodingName",
						"endline": 1268
					}
				],
				"char": 18,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": " Returns the name of an encoding.\n\n The type of encoding cannot be deduced. Therefore, it is necessary to\n explicitly specify the encoding type.\n\n Standards: Unicode 5.0, ASCII, ISO-8859-1, WINDOWS-1252\nExample:\n\n---\nassert(encodingName!(char) == \"UTF-8\");\nassert(encodingName!(wchar) == \"UTF-16\");\nassert(encodingName!(dchar) == \"UTF-32\");\nassert(encodingName!(AsciiChar) == \"ASCII\");\nassert(encodingName!(Latin1Char) == \"ISO-8859-1\");\nassert(encodingName!(Windows1252Char) == \"windows-1252\");\n\n---\n",
				"name": "encodingName"
			},
			{
				"kind": "template",
				"line": 1290,
				"members": [
					{
						"kind": "function",
						"line": 1290,
						"endchar": 1,
						"char": 6,
						"type": "bool(dchar c)",
						"parameters": [
							{
								"deco": "w",
								"name": "c"
							}
						],
						"name": "canEncode",
						"endline": 1293
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "E"
					}
				],
				"comment": " Returns true iff it is possible to represent the specified codepoint\n in the encoding.\n\n The type of encoding cannot be deduced. Therefore, it is necessary to\n explicitly specify the encoding type.\n\n Standards: Unicode 5.0, ASCII, ISO-8859-1, WINDOWS-1252\nExample:\n\n---\nassert( canEncode!(Latin1Char)('A'));\nassert(!canEncode!(AsciiChar)('\\u00A0'));\nassert( canEncode!(Latin1Char)('\\u00A0'));\nassert( canEncode!(Windows1252Char)('\\u20AC'));\nassert(!canEncode!(Windows1252Char)('\\u20AD'));\nassert(!canEncode!(Windows1252Char)('\\uFFFD'));\nassert(!canEncode!(char)(cast(dchar)0x110000));\n\n---\n",
				"name": "canEncode"
			},
			{
				"kind": "template",
				"line": 1317,
				"members": [
					{
						"kind": "function",
						"line": 1317,
						"endchar": 1,
						"char": 6,
						"type": "bool(E c)",
						"parameters": [
							{
								"type": "E",
								"name": "c"
							}
						],
						"name": "isValidCodeUnit",
						"endline": 1320
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "E"
					}
				],
				"comment": " Returns true if the code unit is legal. For example, the byte 0x80 would\n not be legal in ASCII, because ASCII code units must always be in the range\n 0x00 to 0x7F.\n\n Standards: Unicode 5.0, ASCII, ISO-8859-1, WINDOWS-1252\n\n Params:\n    c = the code unit to be tested\nExample:\n\n---\nassert(!isValidCodeUnit(cast(char)0xC0));\nassert(!isValidCodeUnit(cast(char)0xFF));\nassert( isValidCodeUnit(cast(wchar)0xD800));\nassert(!isValidCodeUnit(cast(dchar)0xD800));\nassert(!isValidCodeUnit(cast(AsciiChar)0xA0));\nassert( isValidCodeUnit(cast(Windows1252Char)0x80));\nassert(!isValidCodeUnit(cast(Windows1252Char)0x81));\n\n---\n",
				"name": "isValidCodeUnit"
			},
			{
				"kind": "template",
				"line": 1347,
				"members": [
					{
						"kind": "function",
						"line": 1347,
						"endchar": 1,
						"char": 6,
						"type": "bool(const(E)[] s)",
						"parameters": [
							{
								"type": "const(E)[]",
								"name": "s"
							}
						],
						"name": "isValid",
						"endline": 1350
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "E"
					}
				],
				"comment": " Returns true if the string is encoded correctly\n\n Supersedes:\n This function supersedes std.utf.validate(), however note that this\n function returns a bool indicating whether the input was valid or not,\n whereas the older function would throw an exception.\n\n Standards: Unicode 5.0, ASCII, ISO-8859-1, WINDOWS-1252\n\n Params:\n    s = the string to be tested\nExample:\n\n---\nassert( isValid(\"\\u20AC100\"));\nassert(!isValid(cast(char[3])[167, 133, 175]));\n\n---\n",
				"name": "isValid"
			},
			{
				"kind": "template",
				"line": 1368,
				"members": [
					{
						"kind": "function",
						"line": 1368,
						"endchar": 1,
						"char": 8,
						"type": "size_t(const(E)[] s)",
						"parameters": [
							{
								"type": "const(E)[]",
								"name": "s"
							}
						],
						"name": "validLength",
						"endline": 1378
					}
				],
				"char": 8,
				"parameters": [
					{
						"kind": "type",
						"name": "E"
					}
				],
				"comment": " Returns the length of the longest possible substring, starting from\n the first code unit, which is validly encoded.\n\n Standards: Unicode 5.0, ASCII, ISO-8859-1, WINDOWS-1252\n\n Params:\n    s = the string to be tested\n",
				"name": "validLength"
			},
			{
				"kind": "template",
				"line": 1396,
				"members": [
					{
						"kind": "function",
						"line": 1396,
						"endchar": 1,
						"char": 16,
						"type": "immutable(E)[](immutable(E)[] s)",
						"parameters": [
							{
								"type": "immutable(E)[]",
								"name": "s"
							}
						],
						"name": "sanitize",
						"endline": 1433
					}
				],
				"char": 16,
				"parameters": [
					{
						"kind": "type",
						"name": "E"
					}
				],
				"comment": " Sanitizes a string by replacing malformed code unit sequences with valid\n code unit sequences. The result is guaranteed to be valid for this encoding.\n\n If the input string is already valid, this function returns the original,\n otherwise it constructs a new string by replacing all illegal code unit\n sequences with the encoding's replacement character, Invalid sequences will\n be replaced with the Unicode replacement character (U+FFFD) if the\n character repertoire contains it, otherwise invalid sequences will be\n replaced with '?'.\n\n Standards: Unicode 5.0, ASCII, ISO-8859-1, WINDOWS-1252\n\n Params:\n    s = the string to be sanitized\nExample:\n\n---\nassert(sanitize(\"hello \\xF0\\x80world\") == \"hello \\xEF\\xBF\\xBDworld\");\n\n---\n",
				"name": "sanitize"
			},
			{
				"kind": "template",
				"line": 1452,
				"members": [
					{
						"kind": "function",
						"line": 1452,
						"endchar": 1,
						"char": 8,
						"type": "size_t(const(E)[] s)",
						"parameters": [
							{
								"type": "const(E)[]",
								"name": "s"
							}
						],
						"name": "firstSequence",
						"endline": 1464
					}
				],
				"char": 8,
				"parameters": [
					{
						"kind": "type",
						"name": "E"
					}
				],
				"comment": "Returns the length of the first encoded sequence.\n\nThe input to this function MUST be validly encoded.\nThis is enforced by the function's in-contract.\n\nStandards: Unicode 5.0, ASCII, ISO-8859-1, WINDOWS-1252\n\nParams:\ns = the string to be sliced\nExample:\n\n---\nassert(firstSequence(\"\\u20AC1000\") == \"\\u20AC\".length);\nassert(firstSequence(\"hel\") == \"h\".length);\n\n---\n",
				"name": "firstSequence"
			},
			{
				"kind": "template",
				"line": 1484,
				"members": [
					{
						"kind": "function",
						"line": 1484,
						"endchar": 1,
						"char": 8,
						"type": "size_t(const(E)[] s)",
						"parameters": [
							{
								"type": "const(E)[]",
								"name": "s"
							}
						],
						"name": "lastSequence",
						"endline": 1495
					}
				],
				"char": 8,
				"parameters": [
					{
						"kind": "type",
						"name": "E"
					}
				],
				"comment": " Returns the length of the last encoded sequence.\n\n The input to this function MUST be validly encoded.\n This is enforced by the function's in-contract.\n\n Standards: Unicode 5.0, ASCII, ISO-8859-1, WINDOWS-1252\n\n Params:\n    s = the string to be sliced\nExample:\n\n---\nassert(lastSequence(\"1000\\u20AC\") == \"\\u20AC\".length);\nassert(lastSequence(\"hellö\") == \"ö\".length);\n\n---\n",
				"name": "lastSequence"
			},
			{
				"kind": "template",
				"line": 1519,
				"members": [
					{
						"kind": "function",
						"line": 1519,
						"endchar": 1,
						"char": 11,
						"type": "ptrdiff_t(const(E)[] s, int n)",
						"parameters": [
							{
								"type": "const(E)[]",
								"name": "s"
							},
							{
								"deco": "i",
								"name": "n"
							}
						],
						"name": "index",
						"endline": 1530
					}
				],
				"char": 11,
				"parameters": [
					{
						"kind": "type",
						"name": "E"
					}
				],
				"comment": " Returns the array index at which the (n+1)th code point begins.\n\n The input to this function MUST be validly encoded.\n This is enforced by the function's in-contract.\n\n Supersedes:\n This function supersedes std.utf.toUTFindex().\n\n Standards: Unicode 5.0, ASCII, ISO-8859-1, WINDOWS-1252\n\n Params:\n    s = the string to be counted\n    n = the current code point index\nExample:\n\n---\nassert(index(\"\\u20AC100\",1) == 3);\nassert(index(\"hällo\",2) == 3);\n\n---\n",
				"name": "index"
			},
			{
				"kind": "template",
				"line": 1557,
				"members": [
					{
						"kind": "function",
						"line": 1557,
						"endchar": 1,
						"char": 7,
						"type": "dchar(ref S s)",
						"parameters": [
							{
								"storageClass": [
									"ref"
								],
								"type": "S",
								"name": "s"
							}
						],
						"name": "decode",
						"endline": 1567
					}
				],
				"char": 7,
				"parameters": [
					{
						"kind": "type",
						"name": "S"
					}
				],
				"comment": " Decodes a single code point.\n\n This function removes one or more code units from the start of a string,\n and returns the decoded code point which those code units represent.\n\n The input to this function MUST be validly encoded.\n This is enforced by the function's in-contract.\n\n Supersedes:\n This function supersedes std.utf.decode(), however, note that the\n function codePoints() supersedes it more conveniently.\n\n Standards: Unicode 5.0, ASCII, ISO-8859-1, WINDOWS-1252\n\n Params:\n    s = the string whose first code point is to be decoded\n",
				"name": "decode"
			},
			{
				"kind": "template",
				"line": 1583,
				"members": [
					{
						"kind": "function",
						"line": 1583,
						"endchar": 1,
						"char": 7,
						"type": "dchar(ref const(E)[] s)",
						"parameters": [
							{
								"storageClass": [
									"ref"
								],
								"type": "const(E)[]",
								"name": "s"
							}
						],
						"name": "decodeReverse",
						"endline": 1592
					}
				],
				"char": 7,
				"parameters": [
					{
						"kind": "type",
						"name": "E"
					}
				],
				"comment": " Decodes a single code point from the end of a string.\n\n This function removes one or more code units from the end of a string,\n and returns the decoded code point which those code units represent.\n\n The input to this function MUST be validly encoded.\n This is enforced by the function's in-contract.\n\n Standards: Unicode 5.0, ASCII, ISO-8859-1, WINDOWS-1252\n\n Params:\n    s = the string whose first code point is to be decoded\n",
				"name": "decodeReverse"
			},
			{
				"kind": "template",
				"line": 1609,
				"members": [
					{
						"kind": "function",
						"line": 1609,
						"endchar": 1,
						"char": 7,
						"type": "dchar(ref S s)",
						"parameters": [
							{
								"storageClass": [
									"ref"
								],
								"type": "S",
								"name": "s"
							}
						],
						"name": "safeDecode",
						"endline": 1617
					}
				],
				"char": 7,
				"parameters": [
					{
						"kind": "type",
						"name": "S"
					}
				],
				"comment": " Decodes a single code point. The input does not have to be valid.\n\n This function removes one or more code units from the start of a string,\n and returns the decoded code point which those code units represent.\n\n This function will accept an invalidly encoded string as input.\n If an invalid sequence is found at the start of the string, this\n function will remove it, and return the value INVALID_SEQUENCE.\n\n Standards: Unicode 5.0, ASCII, ISO-8859-1, WINDOWS-1252\n\n Params:\n    s = the string whose first code point is to be decoded\n",
				"name": "safeDecode"
			},
			{
				"kind": "template",
				"line": 1633,
				"members": [
					{
						"kind": "function",
						"line": 1633,
						"endchar": 1,
						"char": 8,
						"type": "size_t(dchar c)",
						"parameters": [
							{
								"deco": "w",
								"name": "c"
							}
						],
						"name": "encodedLength",
						"endline": 1641
					}
				],
				"char": 8,
				"parameters": [
					{
						"kind": "type",
						"name": "E"
					}
				],
				"comment": " Returns the number of code units required to encode a single code point.\n\n The input to this function MUST be a valid code point.\n This is enforced by the function's in-contract.\n\n The type of the output cannot be deduced. Therefore, it is necessary to\n explicitly specify the encoding as a template parameter.\n\n Standards: Unicode 5.0, ASCII, ISO-8859-1, WINDOWS-1252\n\n Params:\n    c = the code point to be encoded\n",
				"name": "encodedLength"
			},
			{
				"kind": "template",
				"line": 1664,
				"members": [
					{
						"kind": "function",
						"line": 1664,
						"endchar": 1,
						"char": 5,
						"type": "E[](dchar c)",
						"parameters": [
							{
								"deco": "w",
								"name": "c"
							}
						],
						"name": "encode",
						"endline": 1672
					}
				],
				"char": 5,
				"parameters": [
					{
						"kind": "type",
						"name": "E"
					}
				],
				"comment": " Encodes a single code point.\n\n This function encodes a single code point into one or more code units.\n It returns a string containing those code units.\n\n The input to this function MUST be a valid code point.\n This is enforced by the function's in-contract.\n\n The type of the output cannot be deduced. Therefore, it is necessary to\n explicitly specify the encoding as a template parameter.\n\n Supersedes:\n This function supersedes std.utf.encode(), however, note that the\n function codeUnits() supersedes it more conveniently.\n\n Standards: Unicode 5.0, ASCII, ISO-8859-1, WINDOWS-1252\n\n Params:\n    c = the code point to be encoded\n",
				"name": "encode"
			},
			{
				"kind": "template",
				"line": 1700,
				"members": [
					{
						"kind": "function",
						"line": 1700,
						"endchar": 1,
						"char": 8,
						"type": "size_t(dchar c, E[] array)",
						"parameters": [
							{
								"deco": "w",
								"name": "c"
							},
							{
								"type": "E[]",
								"name": "array"
							}
						],
						"name": "encode",
						"endline": 1710
					}
				],
				"char": 8,
				"parameters": [
					{
						"kind": "type",
						"name": "E"
					}
				],
				"comment": " Encodes a single code point into an array.\n\n This function encodes a single code point into one or more code units\n The code units are stored in a user-supplied fixed-size array,\n which must be passed by reference.\n\n The input to this function MUST be a valid code point.\n This is enforced by the function's in-contract.\n\n The type of the output cannot be deduced. Therefore, it is necessary to\n explicitly specify the encoding as a template parameter.\n\n Supersedes:\n This function supersedes std.utf.encode(), however, note that the\n function codeUnits() supersedes it more conveniently.\n\n Standards: Unicode 5.0, ASCII, ISO-8859-1, WINDOWS-1252\n\n Params:\n    c     = the code point to be encoded\n    array = the destination array\n\n Returns:\n          the number of code units written to the array\n",
				"name": "encode"
			},
			{
				"kind": "template",
				"line": 1836,
				"members": [
					{
						"kind": "function",
						"line": 1836,
						"endchar": 1,
						"char": 6,
						"type": "void(dchar c, void delegate(E) dg)",
						"parameters": [
							{
								"deco": "w",
								"name": "c"
							},
							{
								"type": "void delegate(E)",
								"name": "dg"
							}
						],
						"name": "encode",
						"endline": 1844
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "E"
					}
				],
				"comment": " Encodes a single code point to a delegate.\n\n This function encodes a single code point into one or more code units.\n The code units are passed one at a time to the supplied delegate.\n\n The input to this function MUST be a valid code point.\n This is enforced by the function's in-contract.\n\n The type of the output cannot be deduced. Therefore, it is necessary to\n explicitly specify the encoding as a template parameter.\n\n Supersedes:\n This function supersedes std.utf.encode(), however, note that the\n function codeUnits() supersedes it more conveniently.\n\n Standards: Unicode 5.0, ASCII, ISO-8859-1, WINDOWS-1252\n\n Params:\n    c  = the code point to be encoded\n    dg = the delegate to invoke for each code unit\n",
				"name": "encode"
			},
			{
				"kind": "template",
				"line": 1856,
				"members": [
					{
						"kind": "function",
						"line": 1856,
						"endchar": 1,
						"char": 8,
						"type": "size_t(in Src[] s, R range)",
						"parameters": [
							{
								"storageClass": [
									"in"
								],
								"type": "Src[]",
								"name": "s"
							},
							{
								"type": "R",
								"name": "range"
							}
						],
						"name": "encode",
						"endline": 1864
					}
				],
				"char": 8,
				"parameters": [
					{
						"kind": "type",
						"name": "Tgt"
					},
					{
						"kind": "type",
						"name": "Src"
					},
					{
						"kind": "type",
						"name": "R"
					}
				],
				"comment": "Encodes the contents of $(D s) in units of type $(D Tgt), writing the result to an\noutput range.\n\nReturns: The number of $(D Tgt) elements written.\nParams:\nTgt = Element type of $(D range).\ns = Input array.\nrange = Output range.\n",
				"name": "encode"
			},
			{
				"kind": "template",
				"line": 1898,
				"members": [
					{
						"kind": "function",
						"line": 1898,
						"endchar": 1,
						"char": 16,
						"type": "CodePoints!E(immutable(E)[] s)",
						"parameters": [
							{
								"type": "immutable(E)[]",
								"name": "s"
							}
						],
						"name": "codePoints",
						"endline": 1906
					}
				],
				"char": 16,
				"parameters": [
					{
						"kind": "type",
						"name": "E"
					}
				],
				"comment": " Returns a foreachable struct which can bidirectionally iterate over all\n code points in a string.\n\n The input to this function MUST be validly encoded.\n This is enforced by the function's in-contract.\n\n You can foreach either\n with or without an index. If an index is specified, it will be initialized\n at each iteration with the offset into the string at which the code point\n begins.\n\n Supersedes:\n This function supersedes std.utf.decode().\n\n Standards: Unicode 5.0, ASCII, ISO-8859-1, WINDOWS-1252\n\n Params:\n    s = the string to be decoded\n\n Examples:\n --------------------------------------------------------\n string s = \"hello world\";\n foreach(c;codePoints(s))\n {\n     // do something with c (which will always be a dchar)\n }\n --------------------------------------------------------\n\n Note that, currently, foreach(c:codePoints(s)) is superior to foreach(c;s)\n in that the latter will fall over on encountering U+FFFF.\nExample:\n\n---\nstring s = \"hello\";\nstring t;\nforeach(c;codePoints(s))\n{\n    t ~= cast(char)c;\n}\nassert(s == t);\n\n---\n",
				"name": "codePoints"
			},
			{
				"kind": "template",
				"line": 1938,
				"members": [
					{
						"kind": "function",
						"line": 1938,
						"endchar": 1,
						"char": 15,
						"type": "CodeUnits!E(dchar c)",
						"parameters": [
							{
								"deco": "w",
								"name": "c"
							}
						],
						"name": "codeUnits",
						"endline": 1946
					}
				],
				"char": 15,
				"parameters": [
					{
						"kind": "type",
						"name": "E"
					}
				],
				"comment": " Returns a foreachable struct which can bidirectionally iterate over all\n code units in a code point.\n\n The input to this function MUST be a valid code point.\n This is enforced by the function's in-contract.\n\n The type of the output cannot be deduced. Therefore, it is necessary to\n explicitly specify the encoding type in the template parameter.\n\n Supersedes:\n This function supersedes std.utf.encode().\n\n Standards: Unicode 5.0, ASCII, ISO-8859-1, WINDOWS-1252\n\n Params:\n    c = the code point to be encoded\nExample:\n\n---\nchar[] a;\nforeach(c;codeUnits!(char)(cast(dchar)'\\u20AC'))\n{\n    a ~= c;\n}\nassert(a.length == 3);\nassert(a[0] == 0xE2);\nassert(a[1] == 0x82);\nassert(a[2] == 0xAC);\n\n---\n",
				"name": "codeUnits"
			},
			{
				"kind": "template",
				"line": 1980,
				"members": [
					{
						"kind": "function",
						"line": 1980,
						"endchar": 1,
						"char": 6,
						"type": "void(immutable(Src)[] s, out immutable(Dst)[] r)",
						"parameters": [
							{
								"type": "immutable(Src)[]",
								"name": "s"
							},
							{
								"storageClass": [
									"out"
								],
								"type": "immutable(Dst)[]",
								"name": "r"
							}
						],
						"name": "transcode",
						"endline": 2027
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "Src"
					},
					{
						"kind": "type",
						"name": "Dst"
					}
				],
				"comment": " Convert a string from one encoding to another.\n\n Supersedes:\n This function supersedes std.utf.toUTF8(), std.utf.toUTF16() and\n std.utf.toUTF32()\n (but note that to!() supersedes it more conveniently).\n\n Standards: Unicode 5.0, ASCII, ISO-8859-1, WINDOWS-1252\n\n Params:\n    s = Source string. $(B Must) be validly encoded.\n        This is enforced by the function's in-contract.\n    r = Destination string\n\n See_Also:\n    $(XREF conv, to)\nExample:\n\n---\nwstring ws;\n// transcode from UTF-8 to UTF-16\ntranscode(\"hello world\",ws);\nassert(ws == \"hello world\"w);\n\nLatin1String ls;\n// transcode from UTF-16 to ISO-8859-1\ntranscode(ws, ls);\nassert(ws == \"hello world\");\n\n---\n",
				"name": "transcode"
			},
			{
				"kind": "class",
				"line": 2085,
				"base": "object.Exception",
				"members": [],
				"char": 1,
				"name": "EncodingException",
				"comment": " The base class for exceptions thrown by this module\n"
			},
			{
				"kind": "class",
				"line": 2093,
				"members": [
					{
						"kind": "function",
						"line": 2114,
						"storageClass": [
							"static"
						],
						"deco": "FAyaZv",
						"endchar": 5,
						"char": 17,
						"parameters": [
							{
								"deco": "Aya",
								"name": "className"
							}
						],
						"name": "register",
						"comment": " Registers a subclass of EncodingScheme.\n\n This function allows user-defined subclasses of EncodingScheme to\n be declared in other modules.\n\n Examples:\n ----------------------------------------------\n class Amiga1251 : EncodingScheme\n {\n     shared static this()\n     {\n         EncodingScheme.register(\"path.to.Amiga1251\");\n     }\n }\n ----------------------------------------------\n",
						"endline": 2123
					},
					{
						"kind": "function",
						"line": 2137,
						"storageClass": [
							"static"
						],
						"deco": "FAyaZC3std8encoding14EncodingScheme",
						"endchar": 5,
						"char": 27,
						"parameters": [
							{
								"deco": "Aya",
								"name": "encodingName"
							}
						],
						"name": "create",
						"comment": " Obtains a subclass of EncodingScheme which is capable of encoding\n and decoding the named encoding scheme.\n\n This function is only aware of EncodingSchemes which have been\n registered with the register() function.\n\n Examples:\n ---------------------------------------------------\n auto scheme = EncodingScheme.create(\"Amiga-1251\");\n ---------------------------------------------------\n",
						"endline": 2146
					},
					{
						"kind": "function",
						"line": 2153,
						"storageClass": [
							"abstract",
							"override"
						],
						"deco": "xFZAya",
						"char": 34,
						"name": "toString",
						"comment": " Returns the standard name of the encoding scheme\n",
						"overrides": [
							"object.Object.toString"
						]
					},
					{
						"kind": "function",
						"line": 2158,
						"storageClass": [
							"abstract"
						],
						"deco": "xFZAAya",
						"char": 27,
						"name": "names",
						"comment": " Returns an array of all known names for this encoding scheme\n"
					},
					{
						"kind": "function",
						"line": 2164,
						"storageClass": [
							"abstract"
						],
						"deco": "xFwZb",
						"char": 23,
						"parameters": [
							{
								"deco": "w",
								"name": "c"
							}
						],
						"name": "canEncode",
						"comment": " Returns true if the character c can be represented\n in this encoding scheme.\n"
					},
					{
						"kind": "function",
						"line": 2177,
						"storageClass": [
							"abstract"
						],
						"deco": "xFwZm",
						"char": 25,
						"parameters": [
							{
								"deco": "w",
								"name": "c"
							}
						],
						"name": "encodedLength",
						"comment": " Returns the number of ubytes required to encode this code point.\n\n The input to this function MUST be a valid code point.\n\n Params:\n    c = the code point to be encoded\n\n Returns:\n    the number of ubytes required.\n",
						"originalType": "const size_t(dchar c)"
					},
					{
						"kind": "function",
						"line": 2196,
						"storageClass": [
							"abstract"
						],
						"deco": "xFwAhZm",
						"char": 25,
						"parameters": [
							{
								"deco": "w",
								"name": "c"
							},
							{
								"deco": "Ah",
								"name": "buffer"
							}
						],
						"name": "encode",
						"comment": " Encodes a single code point into a user-supplied, fixed-size buffer.\n\n This function encodes a single code point into one or more ubytes.\n The supplied buffer must be code unit aligned.\n (For example, UTF-16LE or UTF-16BE must be wchar-aligned,\n UTF-32LE or UTF-32BE must be dchar-aligned, etc.)\n\n The input to this function MUST be a valid code point.\n\n Params:\n    c      = the code point to be encoded\n    buffer = the destination array\n\n Returns:\n    the number of ubytes written.\n",
						"originalType": "const size_t(dchar c, ubyte[] buffer)"
					},
					{
						"kind": "function",
						"line": 2209,
						"storageClass": [
							"abstract"
						],
						"deco": "xFKAxhZw",
						"char": 24,
						"parameters": [
							{
								"deco": "Axh",
								"storageClass": [
									"ref"
								],
								"name": "s"
							}
						],
						"name": "decode",
						"comment": " Decodes a single code point.\n\n This function removes one or more ubytes from the start of an array,\n and returns the decoded code point which those ubytes represent.\n\n The input to this function MUST be validly encoded.\n\n Params:\n    s = the array whose first code point is to be decoded\n"
					},
					{
						"kind": "function",
						"line": 2224,
						"storageClass": [
							"abstract"
						],
						"deco": "xFKAxhZw",
						"char": 24,
						"parameters": [
							{
								"deco": "Axh",
								"storageClass": [
									"ref"
								],
								"name": "s"
							}
						],
						"name": "safeDecode",
						"comment": " Decodes a single code point. The input does not have to be valid.\n\n This function removes one or more ubytes from the start of an array,\n and returns the decoded code point which those ubytes represent.\n\n This function will accept an invalidly encoded array as input.\n If an invalid sequence is found at the start of the string, this\n function will remove it, and return the value INVALID_SEQUENCE.\n\n Params:\n    s = the array whose first code point is to be decoded\n"
					},
					{
						"kind": "function",
						"line": 2233,
						"storageClass": [
							"abstract"
						],
						"deco": "xFNdZAyh",
						"char": 47,
						"name": "replacementSequence",
						"comment": " Returns the sequence of ubytes to be used to represent\n any character which cannot be represented in the encoding scheme.\n\n Normally this will be a representation of some substitution\n character, such as U+FFFD or '?'.\n"
					},
					{
						"kind": "function",
						"line": 2242,
						"deco": "FAxhZb",
						"endchar": 5,
						"char": 10,
						"parameters": [
							{
								"deco": "Axh",
								"name": "s"
							}
						],
						"name": "isValid",
						"comment": " Returns true if the array is encoded correctly\n\n Params:\n    s = the array to be tested\n",
						"endline": 2251
					},
					{
						"kind": "function",
						"line": 2260,
						"deco": "FAxhZm",
						"endchar": 5,
						"char": 12,
						"parameters": [
							{
								"deco": "Axh",
								"name": "s"
							}
						],
						"name": "validLength",
						"comment": " Returns the length of the longest possible substring, starting from\n the first element, which is validly encoded.\n\n Params:\n    s = the array to be tested\n",
						"originalType": "size_t(const(ubyte)[] s)",
						"endline": 2270
					},
					{
						"kind": "function",
						"line": 2284,
						"deco": "FAyhZAyh",
						"endchar": 5,
						"char": 24,
						"parameters": [
							{
								"deco": "Ayh",
								"name": "s"
							}
						],
						"name": "sanitize",
						"comment": " Sanitizes an array by replacing malformed ubyte sequences with valid\n ubyte sequences. The result is guaranteed to be valid for this\n encoding scheme.\n\n If the input array is already valid, this function returns the\n original, otherwise it constructs a new array by replacing all illegal\n sequences with the encoding scheme's replacement sequence.\n\n Params:\n    s = the string to be sanitized\n",
						"endline": 2321
					},
					{
						"kind": "function",
						"line": 2332,
						"deco": "FAxhZm",
						"endchar": 5,
						"in": {
							"kind": "function",
							"line": 2334,
							"deco": "FZv",
							"endchar": 5,
							"char": 5,
							"name": "__require",
							"endline": 2334
						},
						"char": 12,
						"parameters": [
							{
								"deco": "Axh",
								"name": "s"
							}
						],
						"name": "firstSequence",
						"comment": " Returns the length of the first encoded sequence.\n\n The input to this function MUST be validly encoded.\n This is enforced by the function's in-contract.\n\n Params:\n    s = the array to be sliced\n",
						"originalType": "size_t(const(ubyte)[] s)",
						"endline": 2344
					},
					{
						"kind": "function",
						"line": 2355,
						"deco": "FAxhZm",
						"endchar": 5,
						"in": {
							"kind": "function",
							"line": 2357,
							"deco": "FZv",
							"endchar": 5,
							"char": 5,
							"name": "__require",
							"endline": 2357
						},
						"char": 12,
						"parameters": [
							{
								"deco": "Axh",
								"name": "s"
							}
						],
						"name": "count",
						"comment": " Returns the total number of code points encoded in a ubyte array.\n\n The input to this function MUST be validly encoded.\n This is enforced by the function's in-contract.\n\n Params:\n    s = the string to be counted\n",
						"originalType": "size_t(const(ubyte)[] s)",
						"endline": 2369
					},
					{
						"kind": "function",
						"line": 2381,
						"deco": "FAxhmZl",
						"endchar": 5,
						"in": {
							"kind": "function",
							"line": 2383,
							"deco": "FZv",
							"endchar": 5,
							"char": 5,
							"name": "__require",
							"endline": 2383
						},
						"char": 15,
						"parameters": [
							{
								"deco": "Axh",
								"name": "s"
							},
							{
								"deco": "m",
								"name": "n"
							}
						],
						"name": "index",
						"comment": " Returns the array index at which the (n+1)th code point begins.\n\n The input to this function MUST be validly encoded.\n This is enforced by the function's in-contract.\n\n Params:\n    s = the string to be counted\n    n = the current code point index\n",
						"originalType": "ptrdiff_t(const(ubyte)[] s, size_t n)",
						"endline": 2392
					}
				],
				"char": 10,
				"name": "EncodingScheme",
				"comment": " Abstract base class of all encoding schemes\n"
			},
			{
				"kind": "class",
				"line": 2413,
				"base": "std.encoding.EncodingScheme",
				"members": [],
				"char": 1,
				"name": "EncodingSchemeASCII",
				"comment": " EncodingScheme to handle ASCII\n\n This scheme recognises the following names:\n                 \"ANSI_X3.4-1968\",\n                 \"ANSI_X3.4-1986\",\n                 \"ASCII\",\n                 \"IBM367\",\n                 \"ISO646-US\",\n                 \"ISO_646.irv:1991\",\n                 \"US-ASCII\",\n                 \"cp367\",\n                 \"csASCII\"\n                 \"iso-ir-6\",\n                 \"us\"\n"
			},
			{
				"kind": "class",
				"line": 2499,
				"base": "std.encoding.EncodingScheme",
				"members": [],
				"char": 1,
				"name": "EncodingSchemeLatin1",
				"comment": " EncodingScheme to handle Latin-1\n\n This scheme recognises the following names:\n                 \"CP819\",\n                 \"IBM819\",\n                 \"ISO-8859-1\",\n                 \"ISO_8859-1\",\n                 \"ISO_8859-1:1987\",\n                 \"csISOLatin1\",\n                 \"iso-ir-100\",\n                 \"l1\",\n                 \"latin1\"\n"
			},
			{
				"kind": "class",
				"line": 2575,
				"base": "std.encoding.EncodingScheme",
				"members": [],
				"char": 1,
				"name": "EncodingSchemeWindows1252",
				"comment": " EncodingScheme to handle Windows-1252\n\n This scheme recognises the following names:\n                 \"windows-1252\"\n"
			},
			{
				"kind": "class",
				"line": 2643,
				"base": "std.encoding.EncodingScheme",
				"members": [],
				"char": 1,
				"name": "EncodingSchemeUtf8",
				"comment": " EncodingScheme to handle UTF-8\n\n This scheme recognises the following names:\n                 \"UTF-8\"\n"
			},
			{
				"kind": "class",
				"line": 2712,
				"base": "std.encoding.EncodingScheme",
				"members": [],
				"char": 1,
				"name": "EncodingSchemeUtf16Native",
				"comment": " EncodingScheme to handle UTF-16 in native byte order\n\n This scheme recognises the following names:\n                 \"UTF-16LE\" (little-endian architecture only)\n                 \"UTF-16BE\" (big-endian architecture only)\n"
			},
			{
				"kind": "class",
				"line": 2807,
				"base": "std.encoding.EncodingScheme",
				"members": [],
				"char": 1,
				"name": "EncodingSchemeUtf32Native",
				"comment": " EncodingScheme to handle UTF-32 in native byte order\n\n This scheme recognises the following names:\n                 \"UTF-32LE\" (little-endian architecture only)\n                 \"UTF-32BE\" (big-endian architecture only)\n"
			}
		],
		"name": "std.encoding",
		"comment": "Classes and functions for handling and transcoding between various encodings.\n\nFor cases where the _encoding is known at compile-time, functions are provided\nfor arbitrary _encoding and decoding of characters, arbitrary transcoding\nbetween strings of different type, as well as validation and sanitization.\n\nEncodings currently supported are UTF-8, UTF-16, UTF-32, ASCII, ISO-8859-1\n(also known as LATIN-1), and WINDOWS-1252.\n\n$(UL\n$(LI The type $(D AsciiChar) represents an ASCII character.)\n$(LI The type $(D AsciiString) represents an ASCII string.)\n$(LI The type $(D Latin1Char) represents an ISO-8859-1 character.)\n$(LI The type $(D Latin1String) represents an ISO-8859-1 string.)\n$(LI The type $(D Windows1252Char) represents a Windows-1252 character.)\n$(LI The type $(D Windows1252String) represents a Windows-1252 string.))\n\nFor cases where the _encoding is not known at compile-time, but is\nknown at run-time, we provide the abstract class $(D EncodingScheme)\nand its subclasses.  To construct a run-time encoder/decoder, one does\ne.g.\n\n----------------------------------------------------\n    auto e = EncodingScheme.create(\"utf-8\");\n----------------------------------------------------\n\nThis library supplies $(D EncodingScheme) subclasses for ASCII,\nISO-8859-1 (also known as LATIN-1), WINDOWS-1252, UTF-8, and (on\nlittle-endian architectures) UTF-16LE and UTF-32LE; or (on big-endian\narchitectures) UTF-16BE and UTF-32BE.\n\nThis library provides a mechanism whereby other modules may add $(D\nEncodingScheme) subclasses for any other _encoding.\n\nMacros:\n    WIKI=Phobos/StdEncoding\n\nCopyright: Copyright Janice Caron 2008 - 2009.\nLicense:   $(WEB www.boost.org/LICENSE_1_0.txt, Boost License 1.0).\nAuthors:   Janice Caron\nSource:    $(PHOBOSSRC std/_encoding.d)\n"
	},
	{
		"kind": "module",
		"file": "../phobos/std/zlib.d",
		"members": [
			{
				"kind": "class",
				"line": 42,
				"base": "object.Exception",
				"members": [],
				"char": 1,
				"name": "ZlibException",
				"comment": " Errors throw a ZlibException.\n"
			},
			{
				"kind": "function",
				"line": 79,
				"deco": "FkAxvZk",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "k",
						"name": "adler"
					},
					{
						"deco": "Axv",
						"name": "buf"
					}
				],
				"name": "adler32",
				"comment": " $(P Compute the Adler-32 checksum of a buffer's worth of data.)\n\n Params:\n     adler = the starting checksum for the computation. Use 0\n             for a new checksum. Use the output of this function\n             for a cumulative checksum.\n     buf = buffer containing input data\n\n Returns:\n     A $(D uint) checksum for the provided input data and starting checksum\n\n See_Also:\n     $(LINK http://en.wikipedia.org/wiki/Adler-32)\n",
				"endline": 87
			},
			{
				"kind": "function",
				"line": 117,
				"deco": "FkAxvZk",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "k",
						"name": "crc"
					},
					{
						"deco": "Axv",
						"name": "buf"
					}
				],
				"name": "crc32",
				"comment": " $(P Compute the CRC32 checksum of a buffer's worth of data.)\n\n Params:\n     crc = the starting checksum for the computation. Use 0\n             for a new checksum. Use the output of this function\n             for a cumulative checksum.\n     buf = buffer containing input data\n\n Returns:\n     A $(D uint) checksum for the provided input data and starting checksum\n\n See_Also:\n     $(LINK http://en.wikipedia.org/wiki/Cyclic_redundancy_check)\n",
				"endline": 125
			},
			{
				"kind": "function",
				"line": 152,
				"deco": "FAxviZAxv",
				"endchar": 1,
				"char": 15,
				"parameters": [
					{
						"deco": "Axv",
						"name": "srcbuf"
					},
					{
						"deco": "i",
						"name": "level"
					}
				],
				"name": "compress",
				"comment": " $(P Compress data)\n\n Params:\n     srcbuf = buffer containing the data to compress\n     level = compression level. Legal values are 1..9, with 1 being the\n             least compression and 9 being the most. The default value\n             is 6.\n\n Returns:\n     the compressed data\n",
				"endline": 169
			},
			{
				"kind": "function",
				"line": 175,
				"deco": "FAxvZAxv",
				"endchar": 1,
				"char": 15,
				"parameters": [
					{
						"deco": "Axv",
						"name": "srcbuf"
					}
				],
				"name": "compress",
				"comment": " ditto\n",
				"endline": 178
			},
			{
				"kind": "function",
				"line": 191,
				"deco": "FAvmiZAv",
				"endchar": 1,
				"char": 8,
				"parameters": [
					{
						"deco": "Av",
						"name": "srcbuf"
					},
					{
						"deco": "m",
						"default": "0LU",
						"name": "destlen"
					},
					{
						"deco": "i",
						"default": "15",
						"name": "winbits"
					}
				],
				"name": "uncompress",
				"comment": " Decompresses the data in srcbuf[].\n Params:\n  srcbuf  = buffer containing the compressed data.\n  destlen = size of the uncompressed data.\n            It need not be accurate, but the decompression will be faster\n            if the exact size is supplied.\n  winbits = the base two logarithm of the maximum window size.\n Returns: the decompressed data.\n",
				"originalType": "void[](void[] srcbuf, size_t destlen = 0u, int winbits = 15)",
				"endline": 239
			},
			{
				"kind": "enum",
				"line": 286,
				"members": [
					{
						"kind": "enum member",
						"line": 287,
						"value": "0",
						"char": 5,
						"name": "deflate",
						"comment": "a standard zlib header\n"
					},
					{
						"kind": "enum member",
						"line": 288,
						"value": "1",
						"char": 5,
						"name": "gzip",
						"comment": "a gzip file format header\n"
					},
					{
						"kind": "enum member",
						"line": 289,
						"value": "2",
						"char": 5,
						"name": "determineFromData",
						"comment": "used when decompressing. Try to automatically detect the stream format by looking at the data\n"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "HeaderFormat",
				"comment": "the header format the compressed stream is wrapped in\n"
			},
			{
				"kind": "class",
				"line": 296,
				"members": [
					{
						"kind": "constructor",
						"line": 329,
						"deco": "FiE3std4zlib12HeaderFormatZC3std4zlib8Compress",
						"endchar": 5,
						"char": 5,
						"parameters": [
							{
								"deco": "i",
								"name": "level"
							},
							{
								"deco": "E3std4zlib12HeaderFormat",
								"default": "cast(HeaderFormat)0",
								"name": "header"
							}
						],
						"name": "this",
						"comment": " Constructor.\n\n Params:\n    level = compression level. Legal values are 1..9, with 1 being the least\n            compression and 9 being the most. The default value is 6.\n    header = sets the compression type to one of the options available\n             in $(LREF HeaderFormat). Defaults to HeaderFormat.deflate.\n\n See_Also:\n    $(LREF compress), $(LREF HeaderFormat)\n",
						"originalType": "(int level, HeaderFormat header = HeaderFormat.deflate)",
						"endline": 338
					},
					{
						"kind": "constructor",
						"line": 341,
						"deco": "FE3std4zlib12HeaderFormatZC3std4zlib8Compress",
						"endchar": 5,
						"char": 5,
						"parameters": [
							{
								"deco": "E3std4zlib12HeaderFormat",
								"default": "cast(HeaderFormat)0",
								"name": "header"
							}
						],
						"name": "this",
						"comment": "ditto\n",
						"originalType": "(HeaderFormat header = HeaderFormat.deflate)",
						"endline": 344
					},
					{
						"kind": "function",
						"line": 365,
						"deco": "FAxvZAxv",
						"endchar": 5,
						"char": 19,
						"parameters": [
							{
								"deco": "Axv",
								"name": "buf"
							}
						],
						"name": "compress",
						"comment": " Compress the data in buf and return the compressed data.\n Params:\n    buf = data to compress\n\n Returns:\n    the compressed data. The buffers returned from successive calls to this should be concatenated together.\n\n",
						"endline": 397
					},
					{
						"kind": "function",
						"line": 417,
						"deco": "FiZAv",
						"endchar": 5,
						"in": {
							"kind": "function",
							"line": 419,
							"deco": "FZv",
							"endchar": 5,
							"char": 5,
							"name": "__require",
							"endline": 419
						},
						"char": 12,
						"parameters": [
							{
								"deco": "i",
								"default": "4",
								"name": "mode"
							}
						],
						"name": "flush",
						"comment": " Compress and return any remaining data.\n The returned data should be appended to that returned by compress().\n Params:\n  mode = one of the following:\n          $(DL\n                    $(DT Z_SYNC_FLUSH )\n                    $(DD Syncs up flushing to the next byte boundary.\n                        Used when more data is to be compressed later on.)\n                    $(DT Z_FULL_FLUSH )\n                    $(DD Syncs up flushing to the next byte boundary.\n                        Used when more data is to be compressed later on,\n                        and the decompressor needs to be restartable at this\n                        point.)\n                    $(DT Z_FINISH)\n                    $(DD (default) Used when finished compressing the data. )\n                )\n",
						"originalType": "void[](int mode = Z_FINISH)",
						"endline": 466
					}
				],
				"char": 1,
				"name": "Compress",
				"comment": " Used when the data to be compressed is not all in one buffer.\n"
			},
			{
				"kind": "class",
				"line": 473,
				"members": [
					{
						"kind": "constructor",
						"line": 499,
						"deco": "FkZC3std4zlib10UnCompress",
						"endchar": 5,
						"char": 5,
						"parameters": [
							{
								"deco": "k",
								"name": "destbufsize"
							}
						],
						"name": "this",
						"comment": " Construct. destbufsize is the same as for D.zlib.uncompress().\n",
						"originalType": "(uint destbufsize)",
						"endline": 502
					},
					{
						"kind": "constructor",
						"line": 505,
						"deco": "FE3std4zlib12HeaderFormatZC3std4zlib10UnCompress",
						"endchar": 5,
						"char": 5,
						"parameters": [
							{
								"deco": "E3std4zlib12HeaderFormat",
								"default": "cast(HeaderFormat)2",
								"name": "format"
							}
						],
						"name": "this",
						"comment": " ditto\n",
						"originalType": "(HeaderFormat format = HeaderFormat.determineFromData)",
						"endline": 508
					},
					{
						"kind": "function",
						"line": 526,
						"deco": "FAxvZAxv",
						"endchar": 5,
						"in": {
							"kind": "function",
							"line": 528,
							"deco": "FZv",
							"endchar": 5,
							"char": 5,
							"name": "__require",
							"endline": 528
						},
						"char": 19,
						"parameters": [
							{
								"deco": "Axv",
								"name": "buf"
							}
						],
						"name": "uncompress",
						"comment": " Decompress the data in buf and return the decompressed data.\n The buffers returned from successive calls to this should be concatenated\n together.\n",
						"endline": 571
					},
					{
						"kind": "function",
						"line": 578,
						"deco": "FZAv",
						"endchar": 5,
						"in": {
							"kind": "function",
							"line": 580,
							"deco": "FZv",
							"endchar": 5,
							"char": 5,
							"name": "__require",
							"endline": 580
						},
						"char": 12,
						"out": {
							"kind": "function",
							"line": 584,
							"deco": "FKxAvZv",
							"endchar": 5,
							"char": 5,
							"parameters": [
								{
									"deco": "xAv",
									"storageClass": [
										"ref"
									],
									"name": "__result"
								}
							],
							"name": "__ensure",
							"originalType": "void(ref const void[] __result)",
							"endline": 584
						},
						"name": "flush",
						"comment": " Decompress and return any remaining data.\n The returned data should be appended to that returned by uncompress().\n The UnCompress object cannot be used further.\n",
						"endline": 623
					}
				],
				"char": 1,
				"name": "UnCompress",
				"comment": " Used when the data to be decompressed is not all in one buffer.\n"
			}
		],
		"name": "std.zlib",
		"comment": " Compress/decompress data using the $(WEB www.zlib.net, zlib library).\n\n References:\n  $(WEB en.wikipedia.org/wiki/Zlib, Wikipedia)\n\n Macros:\n  WIKI = Phobos/StdZlib\n\n Copyright: Copyright Digital Mars 2000 - 2011.\n License:   $(WEB www.boost.org/LICENSE_1_0.txt, Boost License 1.0).\n Authors:   $(WEB digitalmars.com, Walter Bright)\n Source:    $(PHOBOSSRC std/_zlib.d)\n"
	},
	{
		"kind": "module",
		"file": "../phobos/std/getopt.d",
		"members": [
			{
				"kind": "class",
				"line": 42,
				"base": "object.Exception",
				"members": [],
				"char": 1,
				"name": "GetOptException",
				"comment": " Thrown on one of the following conditions:\n - An unrecognized command-line argument is passed\n   and $(D std.getopt.config.passThrough) was not present.\n"
			},
			{
				"kind": "template",
				"line": 428,
				"members": [
					{
						"kind": "function",
						"line": 428,
						"endchar": 1,
						"char": 14,
						"type": "GetoptResult(ref string[] args, T opts)",
						"parameters": [
							{
								"storageClass": [
									"ref"
								],
								"type": "string[]",
								"name": "args"
							},
							{
								"type": "T",
								"name": "opts"
							}
						],
						"name": "getopt",
						"endline": 439
					}
				],
				"char": 14,
				"parameters": [
					{
						"kind": "tuple",
						"name": "T"
					}
				],
				"comment": "   Parse and remove command line options from an string array.\n\n   Synopsis:\n\n---------\nimport std.getopt;\n\nstring data = \"file.dat\";\nint length = 24;\nbool verbose;\nenum Color { no, yes };\nColor color;\n\nvoid main(string[] args)\n{\n  auto helpInformation = getopt(\n    args,\n    \"length\",  &length,    // numeric\n    \"file\",    &data,      // string\n    \"verbose\", &verbose,   // flag\n    \"color\", \"Information about this color\", &color);    // enum\n  ...\n\n  if (helpInformation.helpWanted)\n  {\n    defaultGetoptPrinter(\"Some information about the program.\",\n      helpInformation.options);\n  }\n}\n---------\n\n The $(D getopt) function takes a reference to the command line\n (as received by $(D main)) as its first argument, and an\n unbounded number of pairs of strings and pointers. Each string is an\n option meant to \"fill\" the value pointed-to by the pointer to its\n right (the \"bound\" pointer). The option string in the call to\n $(D getopt) should not start with a dash.\n\n In all cases, the command-line options that were parsed and used by\n $(D getopt) are removed from $(D args). Whatever in the\n arguments did not look like an option is left in $(D args) for\n further processing by the program. Values that were unaffected by the\n options are not touched, so a common idiom is to initialize options\n to their defaults and then invoke $(D getopt). If a\n command-line argument is recognized as an option with a parameter and\n the parameter cannot be parsed properly (e.g. a number is expected\n but not present), a $(D ConvException) exception is thrown.\n If $(D std.getopt.config.passThrough) was not passed to getopt\n and an unrecognized command-line argument is found, a $(D GetOptException)\n is thrown.\n\n Depending on the type of the pointer being bound, $(D getopt)\n recognizes the following kinds of options:\n\n $(OL\n    $(LI $(I Boolean options). A lone argument sets the option to $(D true).\n    Additionally $(B true) or $(B false) can be set within the option separated\n    with an \"=\" sign:\n\n---------\n  bool verbose = false, debugging = true;\n  getopt(args, \"verbose\", &verbose, \"debug\", &debugging);\n---------\n\n    To set $(D verbose) to $(D true), invoke the program with either\n    $(D --verbose) or $(D --verbose=true).\n\n    To set $(D debugging) to $(D false), invoke the program with\n    $(D --debugging=false).\n    )\n\n    $(LI $(I Numeric options.) If an option is bound to a numeric type, a\n    number is expected as the next option, or right within the option separated\n    with an \"=\" sign:\n\n---------\n  uint timeout;\n  getopt(args, \"timeout\", &timeout);\n---------\n\n    To set $(D timeout) to $(D 5), invoke the program with either\n    $(D --timeout=5) or $(D --timeout 5).\n    )\n\n    $(LI $(I Incremental options.) If an option name has a \"+\" suffix and is\n    bound to a numeric type, then the option's value tracks the number of times\n    the option occurred on the command line:\n\n---------\n  uint paranoid;\n  getopt(args, \"paranoid+\", &paranoid);\n---------\n\n    Invoking the program with \"--paranoid --paranoid --paranoid\" will set $(D\n    paranoid) to 3. Note that an incremental option never expects a parameter,\n    e.g. in the command line \"--paranoid 42 --paranoid\", the \"42\" does not set\n    $(D paranoid) to 42; instead, $(D paranoid) is set to 2 and \"42\" is not\n    considered as part of the normal program arguments.\n    )\n\n    $(LI $(I Enum options.) If an option is bound to an enum, an enum symbol as\n    a string is expected as the next option, or right within the option\n    separated with an \"=\" sign:\n\n---------\n  enum Color { no, yes };\n  Color color; // default initialized to Color.no\n  getopt(args, \"color\", &color);\n---------\n\n    To set $(D color) to $(D Color.yes), invoke the program with either\n    $(D --color=yes) or $(D --color yes).\n    )\n\n    $(LI $(I String options.) If an option is bound to a string, a string is\n    expected as the next option, or right within the option separated with an\n    \"=\" sign:\n\n---------\nstring outputFile;\ngetopt(args, \"output\", &outputFile);\n---------\n\n    Invoking the program with \"--output=myfile.txt\" or \"--output myfile.txt\"\n    will set $(D outputFile) to \"myfile.txt\". If you want to pass a string\n    containing spaces, you need to use the quoting that is appropriate to your\n    shell, e.g. --output='my file.txt'.\n    )\n\n    $(LI $(I Array options.) If an option is bound to an array, a new element\n    is appended to the array each time the option occurs:\n\n---------\nstring[] outputFiles;\ngetopt(args, \"output\", &outputFiles);\n---------\n\n    Invoking the program with \"--output=myfile.txt --output=yourfile.txt\" or\n    \"--output myfile.txt --output yourfile.txt\" will set $(D outputFiles) to\n    $(D [ \"myfile.txt\", \"yourfile.txt\" ]).\n\n    Alternatively you can set $(LREF arraySep) as the element separator:\n\n---------\nstring[] outputFiles;\narraySep = \",\";  // defaults to \"\", separation by whitespace\ngetopt(args, \"output\", &outputFiles);\n---------\n\n    With the above code you can invoke the program with\n    \"--output=myfile.txt,yourfile.txt\", or \"--output myfile.txt,yourfile.txt\".)\n\n    $(LI $(I Hash options.) If an option is bound to an associative array, a\n    string of the form \"name=value\" is expected as the next option, or right\n    within the option separated with an \"=\" sign:\n\n---------\ndouble[string] tuningParms;\ngetopt(args, \"tune\", &tuningParms);\n---------\n\n    Invoking the program with e.g. \"--tune=alpha=0.5 --tune beta=0.6\" will set\n    $(D tuningParms) to [ \"alpha\" : 0.5, \"beta\" : 0.6 ].\n\n    Alternatively you can set $(LREF arraySep) as the element separator:\n\n---------\ndouble[string] tuningParms;\narraySep = \",\";  // defaults to \"\", separation by whitespace\ngetopt(args, \"tune\", &tuningParms);\n---------\n\n    With the above code you can invoke the program with\n    \"--tune=alpha=0.5,beta=0.6\", or \"--tune alpha=0.5,beta=0.6\".\n\n    In general, the keys and values can be of any parsable types.\n    )\n\n    $(LI $(I Callback options.) An option can be bound to a function or\n    delegate with the signature $(D void function()), $(D void function(string\n    option)), $(D void function(string option, string value)), or their\n    delegate equivalents.\n\n    $(UL\n        $(LI If the callback doesn't take any arguments, the callback is\n        invoked whenever the option is seen.\n        )\n\n        $(LI If the callback takes one string argument, the option string\n        (without the leading dash(es)) is passed to the callback.  After that,\n        the option string is considered handled and removed from the options\n        array.\n\n---------\nvoid main(string[] args)\n{\n  uint verbosityLevel = 1;\n  void myHandler(string option)\n  {\n    if (option == \"quiet\")\n    {\n      verbosityLevel = 0;\n    }\n    else\n    {\n      assert(option == \"verbose\");\n      verbosityLevel = 2;\n    }\n  }\n  getopt(args, \"verbose\", &myHandler, \"quiet\", &myHandler);\n}\n---------\n\n        )\n\n        $(LI If the callback takes two string arguments, the option string is\n        handled as an option with one argument, and parsed accordingly. The\n        option and its value are passed to the callback. After that, whatever\n        was passed to the callback is considered handled and removed from the\n        list.\n\n---------\nvoid main(string[] args)\n{\n  uint verbosityLevel = 1;\n  void myHandler(string option, string value)\n  {\n    switch (value)\n    {\n      case \"quiet\": verbosityLevel = 0; break;\n      case \"verbose\": verbosityLevel = 2; break;\n      case \"shouting\": verbosityLevel = verbosityLevel.max; break;\n      default :\n        stderr.writeln(\"Dunno how verbose you want me to be by saying \",\n          value);\n        exit(1);\n    }\n  }\n  getopt(args, \"verbosity\", &myHandler);\n}\n---------\n        )\n    ))\n)\n\n$(B Options with multiple names)\n\nSometimes option synonyms are desirable, e.g. \"--verbose\",\n\"--loquacious\", and \"--garrulous\" should have the same effect. Such\nalternate option names can be included in the option specification,\nusing \"|\" as a separator:\n\n---------\nbool verbose;\ngetopt(args, \"verbose|loquacious|garrulous\", &verbose);\n---------\n\n$(B Case)\n\nBy default options are case-insensitive. You can change that behavior\nby passing $(D getopt) the $(D caseSensitive) directive like this:\n\n---------\nbool foo, bar;\ngetopt(args,\n    std.getopt.config.caseSensitive,\n    \"foo\", &foo,\n    \"bar\", &bar);\n---------\n\nIn the example above, \"--foo\", \"--bar\", \"--FOo\", \"--bAr\" etc. are recognized.\nThe directive is active til the end of $(D getopt), or until the\nconverse directive $(D caseInsensitive) is encountered:\n\n---------\nbool foo, bar;\ngetopt(args,\n    std.getopt.config.caseSensitive,\n    \"foo\", &foo,\n    std.getopt.config.caseInsensitive,\n    \"bar\", &bar);\n---------\n\nThe option \"--Foo\" is rejected due to $(D\nstd.getopt.config.caseSensitive), but not \"--Bar\", \"--bAr\"\netc. because the directive $(D\nstd.getopt.config.caseInsensitive) turned sensitivity off before\noption \"bar\" was parsed.\n\n$(B \"Short\" versus \"long\" options)\n\nTraditionally, programs accepted single-letter options preceded by\nonly one dash (e.g. $(D -t)). $(D getopt) accepts such parameters\nseamlessly. When used with a double-dash (e.g. $(D --t)), a\nsingle-letter option behaves the same as a multi-letter option. When\nused with a single dash, a single-letter option is accepted. If the\noption has a parameter, that must be \"stuck\" to the option without\nany intervening space or \"=\":\n\n---------\nuint timeout;\ngetopt(args, \"timeout|t\", &timeout);\n---------\n\nTo set $(D timeout) to $(D 5), use either of the following: $(D --timeout=5),\n$(D --timeout 5), $(D --t=5), $(D --t 5), or $(D -t5). Forms such as $(D -t 5)\nand $(D -timeout=5) will be not accepted.\n\nFor more details about short options, refer also to the next section.\n\n$(B Bundling)\n\nSingle-letter options can be bundled together, i.e. \"-abc\" is the same as\n$(D \"-a -b -c\"). By default, this option is turned off. You can turn it on\nwith the $(D std.getopt.config.bundling) directive:\n\n---------\nbool foo, bar;\ngetopt(args,\n    std.getopt.config.bundling,\n    \"foo|f\", &foo,\n    \"bar|b\", &bar);\n---------\n\nIn case you want to only enable bundling for some of the parameters,\nbundling can be turned off with $(D std.getopt.config.noBundling).\n\n$(B Required)\n\nAn option can be marked as required. If that option is not present in the\narguments an exceptin will be thrown.\n\n---------\nbool foo, bar;\ngetopt(args,\n    std.getopt.config.required,\n    \"foo|f\", &foo,\n    \"bar|b\", &bar);\n---------\n\nOnly the option direclty following $(D std.getopt.config.required) is\nrequired.\n\n$(B Passing unrecognized options through)\n\nIf an application needs to do its own processing of whichever arguments\n$(D getopt) did not understand, it can pass the\n$(D std.getopt.config.passThrough) directive to $(D getopt):\n\n---------\nbool foo, bar;\ngetopt(args,\n    std.getopt.config.passThrough,\n    \"foo\", &foo,\n    \"bar\", &bar);\n---------\n\nAn unrecognized option such as \"--baz\" will be found untouched in\n$(D args) after $(D getopt) returns.\n\n$(D Help Information Generation)\n\nIf an option string is followed by another string, this string serves as an\ndescription for this option. The function $(D getopt) returns a struct of type\n$(D GetoptResult). This return value contains information about all passed options\nas well a bool indicating if information about these options where required by\nthe passed arguments.\n\n$(B Options Terminator)\n\nA lonesome double-dash terminates $(D getopt) gathering. It is used to\nseparate program options from other parameters (e.g. options to be passed\nto another program). Invoking the example above with $(D \"--foo -- --bar\")\nparses foo but leaves \"--bar\" in $(D args). The double-dash itself is\nremoved from the argument array.\nExample:\n\n---\nauto args = [\"prog\", \"--foo\", \"-b\"];\n\nbool foo;\nbool bar;\nauto rslt = getopt(args, \"foo|f\", \"Some information about foo.\", &foo, \"bar|b\",\n    \"Some help message about bar.\", &bar);\n\nif (rslt.helpWanted)\n{\n    defaultGetoptPrinter(\"Some information about the program.\",\n        rslt.options);\n}\n\n---\n",
				"name": "getopt"
			},
			{
				"kind": "enum",
				"line": 464,
				"members": [
					{
						"kind": "enum member",
						"line": 466,
						"value": "0",
						"char": 5,
						"name": "caseSensitive",
						"comment": "Turns case sensitivity on\n"
					},
					{
						"kind": "enum member",
						"line": 468,
						"value": "1",
						"char": 5,
						"name": "caseInsensitive",
						"comment": "Turns case sensitivity off\n"
					},
					{
						"kind": "enum member",
						"line": 470,
						"value": "2",
						"char": 5,
						"name": "bundling",
						"comment": "Turns bundling on\n"
					},
					{
						"kind": "enum member",
						"line": 472,
						"value": "3",
						"char": 5,
						"name": "noBundling",
						"comment": "Turns bundling off\n"
					},
					{
						"kind": "enum member",
						"line": 474,
						"value": "4",
						"char": 5,
						"name": "passThrough",
						"comment": "Pass unrecognized arguments through\n"
					},
					{
						"kind": "enum member",
						"line": 476,
						"value": "5",
						"char": 5,
						"name": "noPassThrough",
						"comment": "Signal unrecognized arguments as errors\n"
					},
					{
						"kind": "enum member",
						"line": 478,
						"value": "6",
						"char": 5,
						"name": "stopOnFirstNonOption",
						"comment": "Stop at first argument that does not look like an option\n"
					},
					{
						"kind": "enum member",
						"line": 480,
						"value": "7",
						"char": 5,
						"name": "keepEndOfOptions",
						"comment": "Do not erase the endOfOptions separator from args\n"
					},
					{
						"kind": "enum member",
						"line": 482,
						"value": "8",
						"char": 5,
						"name": "required",
						"comment": "Makes the next option a required option\n"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "config",
				"comment": "   Configuration options for $(D getopt).\n\n   You can pass them to $(D getopt) in any position, except in between an option\n   string and its bound pointer.\n"
			},
			{
				"kind": "struct",
				"line": 491,
				"members": [
					{
						"kind": "variable",
						"line": 492,
						"deco": "b",
						"char": 10,
						"name": "helpWanted",
						"comment": "Flag indicating if help was requested\n",
						"offset": 0
					},
					{
						"kind": "variable",
						"line": 493,
						"deco": "AS3std6getopt6Option",
						"char": 14,
						"name": "options",
						"comment": "All possible options\n",
						"offset": 8
					}
				],
				"char": 1,
				"name": "GetoptResult",
				"comment": " The result of the $(D getopt) function.\n\nThe $(D GetoptResult) contains two members. The first member is a boolean with\nthe name $(D helpWanted). The second member is an array of $(D Option). The\narray is accessable by the name $(D options).\n"
			},
			{
				"kind": "struct",
				"line": 498,
				"members": [
					{
						"kind": "variable",
						"line": 499,
						"deco": "Aya",
						"char": 12,
						"name": "optShort",
						"comment": "The short symbol for this option\n",
						"offset": 0
					},
					{
						"kind": "variable",
						"line": 500,
						"deco": "Aya",
						"char": 12,
						"name": "optLong",
						"comment": "The long symbol for this option\n",
						"offset": 16
					},
					{
						"kind": "variable",
						"line": 501,
						"deco": "Aya",
						"char": 12,
						"name": "help",
						"comment": "The description of this option\n",
						"offset": 32
					},
					{
						"kind": "variable",
						"line": 502,
						"deco": "b",
						"char": 10,
						"name": "required",
						"comment": "If a option is required, not passing it will result in\n",
						"offset": 48
					}
				],
				"char": 1,
				"name": "Option",
				"comment": " The result of the $(D getoptHelp) function.\n"
			},
			{
				"kind": "variable",
				"line": 858,
				"init": "'-'",
				"deco": "w",
				"char": 7,
				"name": "optionChar",
				"comment": "   The option character (default '-').\n\n   Defaults to '-' but it can be assigned to prior to calling $(D getopt).\n"
			},
			{
				"kind": "variable",
				"line": 866,
				"init": "\"--\"",
				"deco": "Aya",
				"char": 8,
				"name": "endOfOptions",
				"comment": "   The string that conventionally marks the end of all options (default '--').\n\n   Defaults to \"--\" but can be assigned to prior to calling $(D getopt). Assigning an\n   empty string to $(D endOfOptions) effectively disables it.\n"
			},
			{
				"kind": "variable",
				"line": 873,
				"init": "'='",
				"deco": "w",
				"char": 7,
				"name": "assignChar",
				"comment": "   The assignment character used in options with parameters (default '=').\n\n   Defaults to '=' but can be assigned to prior to calling $(D getopt).\n"
			},
			{
				"kind": "variable",
				"line": 881,
				"init": "\"\"",
				"deco": "Aya",
				"char": 8,
				"name": "arraySep",
				"comment": "   The string used to separate the elements of an array or associative array\n   (default is \"\" which means the elements are separated by whitespace).\n\n   Defaults to \"\" but can be assigned to prior to calling $(D getopt).\n"
			},
			{
				"kind": "function",
				"line": 1388,
				"deco": "FAyaAS3std6getopt6OptionZv",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "Aya",
						"name": "text"
					},
					{
						"deco": "AS3std6getopt6Option",
						"name": "opt"
					}
				],
				"name": "defaultGetoptPrinter",
				"comment": " This function prints the passed $(D Option) and text in an aligned manner.\n\nThe passed text will be printed first, followed by a newline. Than the short\nand long version of every option will be printed. The short and long version\nwill be aligned to the longest option of every $(D Option) passed. If a help\nmessage is present it will be printed after the long version of the\n$(D Option).\n\n------------\nforeach(it; opt)\n{\n    writefln(\"%*s %*s %s\", lengthOfLongestShortOption, it.optShort,\n        lengthOfLongestLongOption, it.optLong, it.help);\n}\n------------\n\nParams:\n    text = The text to printed at the beginning of the help output.\n    opt = The $(D Option) extracted from the $(D getopt) parameter.\n",
				"endline": 1393
			},
			{
				"kind": "template",
				"line": 1404,
				"members": [
					{
						"kind": "function",
						"line": 1404,
						"endchar": 1,
						"char": 6,
						"type": "void(Output output, string text, Option[] opt)",
						"parameters": [
							{
								"type": "Output",
								"name": "output"
							},
							{
								"type": "string",
								"name": "text"
							},
							{
								"type": "Option[]",
								"name": "opt"
							}
						],
						"name": "defaultGetoptFormatter",
						"endline": 1430
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "Output"
					}
				],
				"comment": " This function writes the passed text and $(D Option) into an output range\nin the manner, described in the documentation of function\n$(D defaultGetoptPrinter).\n\nParams:\n    output = The output range used to write the help information.\n    text = The text to printed at the beginning of the help output.\n    opt = The $(D Option) extracted from the $(D getopt) parameter.\n",
				"name": "defaultGetoptFormatter"
			}
		],
		"name": "std.getopt",
		"comment": "Processing of command line options.\n\nThe getopt module implements a $(D getopt) function, which adheres to\nthe POSIX syntax for command line options. GNU extensions are\nsupported in the form of long options introduced by a double dash\n(\"--\"). Support for bundling of command line options, as was the case\nwith the more traditional single-letter approach, is provided but not\nenabled by default.\n\nMacros:\n\nWIKI = Phobos/StdGetopt\n\nCopyright: Copyright Andrei Alexandrescu 2008 - 2009.\nLicense:   $(WEB www.boost.org/LICENSE_1_0.txt, Boost License 1.0).\nAuthors:   $(WEB erdani.org, Andrei Alexandrescu)\nCredits:   This module and its documentation are inspired by Perl's $(WEB\n           perldoc.perl.org/Getopt/Long.html, Getopt::Long) module. The syntax of\n           D's $(D getopt) is simpler than its Perl counterpart because $(D\n           getopt) infers the expected parameter types from the static types of\n           the passed-in pointers.\nSource:    $(PHOBOSSRC std/_getopt.d)\n"
	},
	{
		"kind": "module",
		"file": "../phobos/std/signals.d",
		"members": [
			{
				"kind": "template",
				"line": 142,
				"members": [
					{
						"kind": "alias",
						"line": 154,
						"char": 5,
						"type": "void delegate(T1)",
						"name": "slot_t",
						"comment": " A slot is implemented as a delegate.\n The slot_t is the type of the delegate.\n The delegate must be to an instance of a class or an interface\n to a class instance.\n Delegates to struct instances or nested functions must not be\n used as slots.\n"
					},
					{
						"kind": "function",
						"line": 159,
						"storageClass": [
							"final"
						],
						"endchar": 5,
						"char": 16,
						"type": "void(T1 i)",
						"parameters": [
							{
								"type": "T1",
								"name": "i"
							}
						],
						"name": "emit",
						"comment": " Call each of the connected slots, passing the argument(s) i to them.\n",
						"endline": 165
					},
					{
						"kind": "function",
						"line": 170,
						"storageClass": [
							"final"
						],
						"endchar": 5,
						"char": 16,
						"type": "void(slot_t slot)",
						"parameters": [
							{
								"type": "slot_t",
								"name": "slot"
							}
						],
						"name": "connect",
						"comment": " Add a slot to the list of slots to be called when emit() is called.\n",
						"endline": 202
					},
					{
						"kind": "function",
						"line": 207,
						"storageClass": [
							"final"
						],
						"endchar": 5,
						"char": 16,
						"type": "void(slot_t slot)",
						"parameters": [
							{
								"type": "slot_t",
								"name": "slot"
							}
						],
						"name": "disconnect",
						"comment": " Remove a slot from the list of slots to be called when emit() is called.\n",
						"endline": 223
					}
				],
				"char": 7,
				"parameters": [
					{
						"kind": "tuple",
						"name": "T1"
					}
				],
				"comment": " Mixin to create a signal within a class object.\n\n Different signals can be added to a class by naming the mixins.\n\n Example:\n---\nimport std.signals;\nimport std.stdio;\n\nclass Observer\n{   // our slot\n    void watch(string msg, int i)\n    {\n        writefln(\"Observed msg '%s' and value %s\", msg, i);\n    }\n}\n\nclass Foo\n{\n    int value() { return _value; }\n\n    int value(int v)\n    {\n        if (v != _value)\n        {   _value = v;\n            // call all the connected slots with the two parameters\n            emit(\"setting new value\", v);\n        }\n        return v;\n    }\n\n    // Mix in all the code we need to make Foo into a signal\n    mixin Signal!(string, int);\n\n  private :\n    int _value;\n}\n\nvoid main()\n{\n    Foo a = new Foo;\n    Observer o = new Observer;\n\n    a.value = 3;                // should not call o.watch()\n    a.connect(&o.watch);        // o.watch is the slot\n    a.value = 4;                // should call o.watch()\n    a.disconnect(&o.watch);     // o.watch is no longer a slot\n    a.value = 5;                // so should not call o.watch()\n    a.connect(&o.watch);        // connect again\n    a.value = 6;                // should call o.watch()\n    destroy(o);                 // destroying o should automatically disconnect it\n    a.value = 7;                // should not call o.watch()\n}\n---\n which should print:\n <pre>\n Observed msg 'setting new value' and value 4\n Observed msg 'setting new value' and value 6\n </pre>\n\n",
				"name": "Signal"
			}
		],
		"name": "std.signals",
		"comment": " Signals and Slots are an implementation of the Observer Pattern.\n Essentially, when a Signal is emitted, a list of connected Observers\n (called slots) are called.\n\n There have been several D implementations of Signals and Slots.\n This version makes use of several new features in D, which make\n using it simpler and less error prone. In particular, it is no\n longer necessary to instrument the slots.\n\n References:\n      $(LUCKY A Deeper Look at Signals and Slots)$(BR)\n      $(LINK2 http://en.wikipedia.org/wiki/Observer_pattern, Observer pattern)$(BR)\n      $(LINK2 http://en.wikipedia.org/wiki/Signals_and_slots, Wikipedia)$(BR)\n      $(LINK2 http://boost.org/doc/html/$(SIGNALS).html, Boost Signals)$(BR)\n      $(LINK2 http://qt-project.org/doc/qt-5/signalsandslots.html, Qt)$(BR)\n\n      There has been a great deal of discussion in the D newsgroups\n      over this, and several implementations:\n\n      $(LINK2 http://www.digitalmars.com/d/archives/digitalmars/D/announce/signal_slots_library_4825.html, signal slots library)$(BR)\n      $(LINK2 http://www.digitalmars.com/d/archives/digitalmars/D/Signals_and_Slots_in_D_42387.html, Signals and Slots in D)$(BR)\n      $(LINK2 http://www.digitalmars.com/d/archives/digitalmars/D/Dynamic_binding_--_Qt_s_Signals_and_Slots_vs_Objective-C_42260.html, Dynamic binding -- Qt's Signals and Slots vs Objective-C)$(BR)\n      $(LINK2 http://www.digitalmars.com/d/archives/digitalmars/D/Dissecting_the_SS_42377.html, Dissecting the SS)$(BR)\n      $(LINK2 http://www.digitalmars.com/d/archives/digitalmars/D/dwt/about_harmonia_454.html, about harmonia)$(BR)\n      $(LINK2 http://www.digitalmars.com/d/archives/digitalmars/D/announce/1502.html, Another event handling module)$(BR)\n      $(LINK2 http://www.digitalmars.com/d/archives/digitalmars/D/41825.html, Suggestion: signal/slot mechanism)$(BR)\n      $(LINK2 http://www.digitalmars.com/d/archives/digitalmars/D/13251.html, Signals and slots?)$(BR)\n      $(LINK2 http://www.digitalmars.com/d/archives/digitalmars/D/10714.html, Signals and slots ready for evaluation)$(BR)\n      $(LINK2 http://www.digitalmars.com/d/archives/digitalmars/D/1393.html, Signals &amp; Slots for Walter)$(BR)\n      $(LINK2 http://www.digitalmars.com/d/archives/28456.html, Signal/Slot mechanism?)$(BR)\n      $(LINK2 http://www.digitalmars.com/d/archives/19470.html, Modern Features?)$(BR)\n      $(LINK2 http://www.digitalmars.com/d/archives/16592.html, Delegates vs interfaces)$(BR)\n      $(LINK2 http://www.digitalmars.com/d/archives/16583.html, The importance of component programming (properties$(COMMA) signals and slots$(COMMA) etc))$(BR)\n      $(LINK2 http://www.digitalmars.com/d/archives/16368.html, signals and slots)$(BR)\n\n Bugs:\n      Slots can only be delegates formed from class objects or\n      interfaces to class objects. If a delegate to something else\n      is passed to connect(), such as a struct member function,\n      a nested function or a COM interface, undefined behavior\n      will result.\n\n      Not safe for multiple threads operating on the same signals\n      or slots.\n Macros:\n      WIKI = Phobos/StdSignals\n      SIGNALS=signals\n\n Copyright: Copyright Digital Mars 2000 - 2009.\n License:   $(WEB www.boost.org/LICENSE_1_0.txt, Boost License 1.0).\n Authors:   $(WEB digitalmars.com, Walter Bright)\n Source:    $(PHOBOSSRC std/_signals.d)\n"
	},
	{
		"kind": "module",
		"file": "../phobos/std/math.d",
		"members": [
			{
				"kind": "variable",
				"line": 464,
				"init": "2.71828L",
				"storageClass": [
					"enum"
				],
				"deco": "e",
				"char": 11,
				"name": "E",
				"comment": " e = 2.718281...\n"
			},
			{
				"kind": "variable",
				"line": 465,
				"init": "3.32193L",
				"storageClass": [
					"enum"
				],
				"deco": "e",
				"char": 11,
				"name": "LOG2T",
				"comment": " $(SUB log, 2)10 = 3.321928...\n"
			},
			{
				"kind": "variable",
				"line": 466,
				"init": "1.4427L",
				"storageClass": [
					"enum"
				],
				"deco": "e",
				"char": 11,
				"name": "LOG2E",
				"comment": " $(SUB log, 2)e = 1.442695...\n"
			},
			{
				"kind": "variable",
				"line": 467,
				"init": "0.30103L",
				"storageClass": [
					"enum"
				],
				"deco": "e",
				"char": 11,
				"name": "LOG2",
				"comment": " $(SUB log, 10)2 = 0.301029...\n"
			},
			{
				"kind": "variable",
				"line": 468,
				"init": "0.434294L",
				"storageClass": [
					"enum"
				],
				"deco": "e",
				"char": 11,
				"name": "LOG10E",
				"comment": " $(SUB log, 10)e = 0.434294...\n"
			},
			{
				"kind": "variable",
				"line": 469,
				"init": "0.693147L",
				"storageClass": [
					"enum"
				],
				"deco": "e",
				"char": 11,
				"name": "LN2",
				"comment": " ln 2  = 0.693147...\n"
			},
			{
				"kind": "variable",
				"line": 470,
				"init": "2.30259L",
				"storageClass": [
					"enum"
				],
				"deco": "e",
				"char": 11,
				"name": "LN10",
				"comment": " ln 10 = 2.302585...\n"
			},
			{
				"kind": "variable",
				"line": 471,
				"init": "3.14159L",
				"storageClass": [
					"enum"
				],
				"deco": "e",
				"char": 11,
				"name": "PI",
				"comment": " $(_PI) = 3.141592...\n"
			},
			{
				"kind": "variable",
				"line": 472,
				"init": "1.5708L",
				"storageClass": [
					"enum"
				],
				"deco": "e",
				"char": 11,
				"name": "PI_2",
				"comment": " $(PI) / 2 = 1.570796...\n"
			},
			{
				"kind": "variable",
				"line": 473,
				"init": "0.785398L",
				"storageClass": [
					"enum"
				],
				"deco": "e",
				"char": 11,
				"name": "PI_4",
				"comment": " $(PI) / 4 = 0.785398...\n"
			},
			{
				"kind": "variable",
				"line": 474,
				"init": "0.31831L",
				"storageClass": [
					"enum"
				],
				"deco": "e",
				"char": 11,
				"name": "M_1_PI",
				"comment": " 1 / $(PI) = 0.318309...\n"
			},
			{
				"kind": "variable",
				"line": 475,
				"init": "0.63662L",
				"storageClass": [
					"enum"
				],
				"deco": "e",
				"char": 11,
				"name": "M_2_PI",
				"comment": " 2 / $(PI) = 0.636619...\n"
			},
			{
				"kind": "variable",
				"line": 476,
				"init": "1.12838L",
				"storageClass": [
					"enum"
				],
				"deco": "e",
				"char": 11,
				"name": "M_2_SQRTPI",
				"comment": " 2 / $(SQRT)$(PI) = 1.128379...\n"
			},
			{
				"kind": "variable",
				"line": 477,
				"init": "1.41421L",
				"storageClass": [
					"enum"
				],
				"deco": "e",
				"char": 11,
				"name": "SQRT2",
				"comment": " $(SQRT)2 = 1.414213...\n"
			},
			{
				"kind": "variable",
				"line": 478,
				"init": "0.707107L",
				"storageClass": [
					"enum"
				],
				"deco": "e",
				"char": 11,
				"name": "SQRT1_2",
				"comment": " $(SQRT)$(HALF) = 0.707106...\n"
			},
			{
				"kind": "template",
				"line": 500,
				"constraint": "is(typeof(Num.init >= 0)) && is(typeof(-Num.init)) && !(is(Num* : const(ifloat*)) || is(Num* : const(idouble*)) || is(Num* : const(ireal*)))",
				"members": [
					{
						"kind": "function",
						"line": 500,
						"endchar": 1,
						"char": 5,
						"type": "pure nothrow @safe Num(Num x)",
						"parameters": [
							{
								"type": "Num",
								"name": "x"
							}
						],
						"name": "abs",
						"endline": 509
					}
				],
				"char": 5,
				"parameters": [
					{
						"kind": "type",
						"name": "Num"
					}
				],
				"comment": " Calculates the absolute value of a number\n\n Params:\n     Num = (template parameter) type of number\n       x = real number value\n       z = complex number value\n       y = imaginary number value\n\n Returns:\n     The absolute value of the number.  If floating-point or integral,\n     the return type will be the same as the input; if complex or\n     imaginary, the returned value will be the corresponding floating\n     point type.\n\n For complex numbers, abs(z) = sqrt( $(POWER z.re, 2) + $(POWER z.im, 2) )\n = hypot(z.re, z.im).\nExample:\nditto\n---\nassert(isIdentical(abs(-0.0L), 0.0L));\nassert(isNaN(abs(real.nan)));\nassert(abs(-real.infinity) == real.infinity);\nassert(abs(-3.2Li) == 3.2L);\nassert(abs(71.6Li) == 71.6L);\nassert(abs(-56) == 56);\nassert(abs(2321312L)  == 2321312L);\nassert(abs(-1L+1i) == sqrt(2.0L));\n\n---\n",
				"name": "abs"
			},
			{
				"kind": "template",
				"line": 512,
				"constraint": "is(Num* : const(cfloat*)) || is(Num* : const(cdouble*)) || is(Num* : const(creal*))",
				"members": [
					{
						"kind": "function",
						"line": 512,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "pure nothrow @nogc @safe (Num z)",
						"parameters": [
							{
								"type": "Num",
								"name": "z"
							}
						],
						"name": "abs",
						"endline": 517
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "Num"
					}
				],
				"comment": "ditto\n",
				"name": "abs"
			},
			{
				"kind": "template",
				"line": 520,
				"constraint": "is(Num* : const(ifloat*)) || is(Num* : const(idouble*)) || is(Num* : const(ireal*))",
				"members": [
					{
						"kind": "function",
						"line": 520,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "pure nothrow @nogc @safe (Num y)",
						"parameters": [
							{
								"type": "Num",
								"name": "y"
							}
						],
						"name": "abs",
						"endline": 525
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "Num"
					}
				],
				"comment": "ditto\n",
				"name": "abs"
			},
			{
				"kind": "template",
				"line": 565,
				"constraint": "is(Num* : const(cfloat*)) || is(Num* : const(cdouble*)) || is(Num* : const(creal*))",
				"members": [
					{
						"kind": "function",
						"line": 565,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "pure nothrow @nogc @safe (Num z)",
						"parameters": [
							{
								"type": "Num",
								"name": "z"
							}
						],
						"name": "conj",
						"endline": 575
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "Num"
					}
				],
				"comment": " Complex conjugate\n\n  conj(x + iy) = x - iy\n\n Note that z * conj(z) = $(POWER z.re, 2) - $(POWER z.im, 2)\n is always a real number\nExample:\n\n---\ncreal c = 7 + 3Li;\nassert(conj(c) == 7-3Li);\nireal z = -3.2Li;\nassert(conj(z) == -z);\n\n---\n",
				"name": "conj"
			},
			{
				"kind": "template",
				"line": 578,
				"constraint": "is(Num* : const(ifloat*)) || is(Num* : const(idouble*)) || is(Num* : const(ireal*))",
				"members": [
					{
						"kind": "function",
						"line": 578,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "pure nothrow @nogc @safe (Num y)",
						"parameters": [
							{
								"type": "Num",
								"name": "y"
							}
						],
						"name": "conj",
						"endline": 583
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "Num"
					}
				],
				"comment": " ditto\n",
				"name": "conj"
			},
			{
				"kind": "function",
				"line": 622,
				"deco": "FNaNbNiNfeZe",
				"char": 6,
				"parameters": [
					{
						"deco": "e",
						"name": "x"
					}
				],
				"name": "cos",
				"comment": " Returns cosine of x. x is in radians.\n\n      $(TABLE_SV\n      $(TR $(TH x)                 $(TH cos(x)) $(TH invalid?))\n      $(TR $(TD $(NAN))            $(TD $(NAN)) $(TD yes)     )\n      $(TR $(TD $(PLUSMN)$(INFIN)) $(TD $(NAN)) $(TD yes)     )\n      )\n Bugs:\n      Results are undefined if |x| >= $(POWER 2,64).\n"
			},
			{
				"kind": "function",
				"line": 625,
				"deco": "FNaNbNiNfdZd",
				"endchar": 74,
				"char": 8,
				"parameters": [
					{
						"deco": "d",
						"name": "x"
					}
				],
				"name": "cos",
				"comment": "ditto\n",
				"endline": 625
			},
			{
				"kind": "function",
				"line": 628,
				"deco": "FNaNbNiNffZf",
				"endchar": 72,
				"char": 7,
				"parameters": [
					{
						"deco": "f",
						"name": "x"
					}
				],
				"name": "cos",
				"comment": "ditto\n",
				"endline": 628
			},
			{
				"kind": "function",
				"line": 650,
				"deco": "FNaNbNiNfeZe",
				"char": 6,
				"parameters": [
					{
						"deco": "e",
						"name": "x"
					}
				],
				"name": "sin",
				"comment": " Returns $(WEB en.wikipedia.org/wiki/Sine, sine) of x. x is in $(WEB en.wikipedia.org/wiki/Radian, radians).\n\n      $(TABLE_SV\n      $(TH3 x           ,  sin(x)      ,  invalid?)\n      $(TD3 $(NAN)      ,  $(NAN)      ,  yes     )\n      $(TD3 $(PLUSMN)0.0,  $(PLUSMN)0.0,  no      )\n      $(TD3 $(PLUSMNINF),  $(NAN)      ,  yes     )\n      )\n\n Params:\n      x = angle in radians (not degrees)\n Returns:\n      sine of x\n See_Also:\n      $(MYREF cos), $(MYREF tan), $(MYREF asin)\n Bugs:\n      Results are undefined if |x| >= $(POWER 2,64).\nExample:\n\n---\nimport std.math : sin, PI;\nimport std.stdio : writefln;\n\nvoid someFunc()\n{\n  real x = 30.0;\n  auto result = sin(x * (PI / 180)); // convert degrees to radians\n  writefln(\"The sine of %s degrees is %s\", x, result);\n}\n\n---\n"
			},
			{
				"kind": "function",
				"line": 653,
				"deco": "FNaNbNiNfdZd",
				"endchar": 74,
				"char": 8,
				"parameters": [
					{
						"deco": "d",
						"name": "x"
					}
				],
				"name": "sin",
				"comment": "ditto\n",
				"endline": 653
			},
			{
				"kind": "function",
				"line": 656,
				"deco": "FNaNbNiNffZf",
				"endchar": 72,
				"char": 7,
				"parameters": [
					{
						"deco": "f",
						"name": "x"
					}
				],
				"name": "sin",
				"comment": "ditto\n",
				"endline": 656
			},
			{
				"kind": "function",
				"line": 680,
				"deco": "FNaNbNiNfcZc",
				"endchar": 1,
				"char": 7,
				"parameters": [
					{
						"deco": "c",
						"name": "z"
					}
				],
				"name": "sin",
				"comment": "  Returns sine for complex and imaginary arguments.\n\n  sin(z) = sin(z.re)*cosh(z.im) + cos(z.re)*sinh(z.im)i\n\n If both sin($(THETA)) and cos($(THETA)) are required,\n it is most efficient to use expi($(THETA)).\nExample:\n\n---\nassert(sin(0.0+0.0i) == 0.0);\nassert(sin(2.0+0.0i) == sin(2.0L) );\n\n---\n",
				"endline": 685
			},
			{
				"kind": "function",
				"line": 688,
				"deco": "FNaNbNiNfjZj",
				"endchar": 1,
				"char": 7,
				"parameters": [
					{
						"deco": "j",
						"name": "y"
					}
				],
				"name": "sin",
				"comment": " ditto\n",
				"endline": 691
			},
			{
				"kind": "function",
				"line": 705,
				"deco": "FNaNbNiNfcZc",
				"endchar": 1,
				"char": 7,
				"parameters": [
					{
						"deco": "c",
						"name": "z"
					}
				],
				"name": "cos",
				"comment": "  cosine, complex and imaginary\n\n  cos(z) = cos(z.re)*cosh(z.im) - sin(z.re)*sinh(z.im)i\nExample:\n\n---\nassert(cos(0.0+0.0i)==1.0);\nassert(cos(1.3L+0.0i)==cos(1.3L));\nassert(cos(5.2Li)== cosh(5.2L));\n\n---\n",
				"endline": 710
			},
			{
				"kind": "function",
				"line": 713,
				"deco": "FNaNbNiNfjZe",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "j",
						"name": "y"
					}
				],
				"name": "cos",
				"comment": " ditto\n",
				"endline": 716
			},
			{
				"kind": "function",
				"line": 737,
				"deco": "FNaNbNiNeeZe",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "e",
						"name": "x"
					}
				],
				"name": "tan",
				"comment": " Returns tangent of x. x is in radians.\n\n      $(TABLE_SV\n      $(TR $(TH x)             $(TH tan(x))       $(TH invalid?))\n      $(TR $(TD $(NAN))        $(TD $(NAN))       $(TD yes))\n      $(TR $(TD $(PLUSMN)0.0)  $(TD $(PLUSMN)0.0) $(TD no))\n      $(TR $(TD $(PLUSMNINF))  $(TD $(NAN))       $(TD yes))\n      )\n",
				"endline": 886
			},
			{
				"kind": "function",
				"line": 958,
				"deco": "FNaNbNiNfeZe",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "e",
						"name": "x"
					}
				],
				"name": "acos",
				"comment": " Calculates the arc cosine of x,\n returning a value ranging from 0 to $(PI).\n\n      $(TABLE_SV\n      $(TR $(TH x)         $(TH acos(x)) $(TH invalid?))\n      $(TR $(TD $(GT)1.0)  $(TD $(NAN))  $(TD yes))\n      $(TR $(TD $(LT)-1.0) $(TD $(NAN))  $(TD yes))\n      $(TR $(TD $(NAN))    $(TD $(NAN))  $(TD yes))\n  )\n",
				"endline": 961
			},
			{
				"kind": "function",
				"line": 964,
				"deco": "FNaNbNiNfdZd",
				"endchar": 76,
				"char": 8,
				"parameters": [
					{
						"deco": "d",
						"name": "x"
					}
				],
				"name": "acos",
				"comment": "ditto\n",
				"endline": 964
			},
			{
				"kind": "function",
				"line": 967,
				"deco": "FNaNbNiNffZf",
				"endchar": 75,
				"char": 7,
				"parameters": [
					{
						"deco": "f",
						"name": "x"
					}
				],
				"name": "acos",
				"comment": "ditto\n",
				"endline": 967
			},
			{
				"kind": "function",
				"line": 985,
				"deco": "FNaNbNiNfeZe",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "e",
						"name": "x"
					}
				],
				"name": "asin",
				"comment": " Calculates the arc sine of x,\n returning a value ranging from -$(PI)/2 to $(PI)/2.\n\n      $(TABLE_SV\n      $(TR $(TH x)            $(TH asin(x))      $(TH invalid?))\n      $(TR $(TD $(PLUSMN)0.0) $(TD $(PLUSMN)0.0) $(TD no))\n      $(TR $(TD $(GT)1.0)     $(TD $(NAN))       $(TD yes))\n      $(TR $(TD $(LT)-1.0)    $(TD $(NAN))       $(TD yes))\n  )\n",
				"endline": 988
			},
			{
				"kind": "function",
				"line": 991,
				"deco": "FNaNbNiNfdZd",
				"endchar": 76,
				"char": 8,
				"parameters": [
					{
						"deco": "d",
						"name": "x"
					}
				],
				"name": "asin",
				"comment": "ditto\n",
				"endline": 991
			},
			{
				"kind": "function",
				"line": 994,
				"deco": "FNaNbNiNffZf",
				"endchar": 75,
				"char": 7,
				"parameters": [
					{
						"deco": "f",
						"name": "x"
					}
				],
				"name": "asin",
				"comment": "ditto\n",
				"endline": 994
			},
			{
				"kind": "function",
				"line": 1011,
				"deco": "FNaNbNiNfeZe",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "e",
						"name": "x"
					}
				],
				"name": "atan",
				"comment": " Calculates the arc tangent of x,\n returning a value ranging from -$(PI)/2 to $(PI)/2.\n\n      $(TABLE_SV\n      $(TR $(TH x)                 $(TH atan(x))      $(TH invalid?))\n      $(TR $(TD $(PLUSMN)0.0)      $(TD $(PLUSMN)0.0) $(TD no))\n      $(TR $(TD $(PLUSMN)$(INFIN)) $(TD $(NAN))       $(TD yes))\n  )\n",
				"endline": 1076
			},
			{
				"kind": "function",
				"line": 1079,
				"deco": "FNaNbNiNfdZd",
				"endchar": 76,
				"char": 8,
				"parameters": [
					{
						"deco": "d",
						"name": "x"
					}
				],
				"name": "atan",
				"comment": "ditto\n",
				"endline": 1079
			},
			{
				"kind": "function",
				"line": 1082,
				"deco": "FNaNbNiNffZf",
				"endchar": 75,
				"char": 7,
				"parameters": [
					{
						"deco": "f",
						"name": "x"
					}
				],
				"name": "atan",
				"comment": "ditto\n",
				"endline": 1082
			},
			{
				"kind": "function",
				"line": 1110,
				"deco": "FNaNbNiNeeeZe",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "e",
						"name": "y"
					},
					{
						"deco": "e",
						"name": "x"
					}
				],
				"name": "atan2",
				"comment": " Calculates the arc tangent of y / x,\n returning a value ranging from -$(PI) to $(PI).\n\n      $(TABLE_SV\n      $(TR $(TH y)                 $(TH x)            $(TH atan(y, x)))\n      $(TR $(TD $(NAN))            $(TD anything)     $(TD $(NAN)) )\n      $(TR $(TD anything)          $(TD $(NAN))       $(TD $(NAN)) )\n      $(TR $(TD $(PLUSMN)0.0)      $(TD $(GT)0.0)     $(TD $(PLUSMN)0.0) )\n      $(TR $(TD $(PLUSMN)0.0)      $(TD +0.0)         $(TD $(PLUSMN)0.0) )\n      $(TR $(TD $(PLUSMN)0.0)      $(TD $(LT)0.0)     $(TD $(PLUSMN)$(PI)))\n      $(TR $(TD $(PLUSMN)0.0)      $(TD -0.0)         $(TD $(PLUSMN)$(PI)))\n      $(TR $(TD $(GT)0.0)          $(TD $(PLUSMN)0.0) $(TD $(PI)/2) )\n      $(TR $(TD $(LT)0.0)          $(TD $(PLUSMN)0.0) $(TD -$(PI)/2) )\n      $(TR $(TD $(GT)0.0)          $(TD $(INFIN))     $(TD $(PLUSMN)0.0) )\n      $(TR $(TD $(PLUSMN)$(INFIN)) $(TD anything)     $(TD $(PLUSMN)$(PI)/2))\n      $(TR $(TD $(GT)0.0)          $(TD -$(INFIN))    $(TD $(PLUSMN)$(PI)) )\n      $(TR $(TD $(PLUSMN)$(INFIN)) $(TD $(INFIN))     $(TD $(PLUSMN)$(PI)/4))\n      $(TR $(TD $(PLUSMN)$(INFIN)) $(TD -$(INFIN))    $(TD $(PLUSMN)3$(PI)/4))\n      )\n",
				"endline": 1183
			},
			{
				"kind": "function",
				"line": 1186,
				"deco": "FNaNbNiNfddZd",
				"endchar": 1,
				"char": 8,
				"parameters": [
					{
						"deco": "d",
						"name": "y"
					},
					{
						"deco": "d",
						"name": "x"
					}
				],
				"name": "atan2",
				"comment": "ditto\n",
				"endline": 1189
			},
			{
				"kind": "function",
				"line": 1192,
				"deco": "FNaNbNiNfffZf",
				"endchar": 1,
				"char": 7,
				"parameters": [
					{
						"deco": "f",
						"name": "y"
					},
					{
						"deco": "f",
						"name": "x"
					}
				],
				"name": "atan2",
				"comment": "ditto\n",
				"endline": 1195
			},
			{
				"kind": "function",
				"line": 1210,
				"deco": "FNaNbNiNfeZe",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "e",
						"name": "x"
					}
				],
				"name": "cosh",
				"comment": " Calculates the hyperbolic cosine of x.\n\n      $(TABLE_SV\n      $(TR $(TH x)                 $(TH cosh(x))      $(TH invalid?))\n      $(TR $(TD $(PLUSMN)$(INFIN)) $(TD $(PLUSMN)0.0) $(TD no) )\n      )\n",
				"endline": 1216
			},
			{
				"kind": "function",
				"line": 1219,
				"deco": "FNaNbNiNfdZd",
				"endchar": 76,
				"char": 8,
				"parameters": [
					{
						"deco": "d",
						"name": "x"
					}
				],
				"name": "cosh",
				"comment": "ditto\n",
				"endline": 1219
			},
			{
				"kind": "function",
				"line": 1222,
				"deco": "FNaNbNiNffZf",
				"endchar": 75,
				"char": 7,
				"parameters": [
					{
						"deco": "f",
						"name": "x"
					}
				],
				"name": "cosh",
				"comment": "ditto\n",
				"endline": 1222
			},
			{
				"kind": "function",
				"line": 1238,
				"deco": "FNaNbNiNfeZe",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "e",
						"name": "x"
					}
				],
				"name": "sinh",
				"comment": " Calculates the hyperbolic sine of x.\n\n      $(TABLE_SV\n      $(TR $(TH x)                 $(TH sinh(x))           $(TH invalid?))\n      $(TR $(TD $(PLUSMN)0.0)      $(TD $(PLUSMN)0.0)      $(TD no))\n      $(TR $(TD $(PLUSMN)$(INFIN)) $(TD $(PLUSMN)$(INFIN)) $(TD no))\n      )\n",
				"endline": 1251
			},
			{
				"kind": "function",
				"line": 1254,
				"deco": "FNaNbNiNfdZd",
				"endchar": 76,
				"char": 8,
				"parameters": [
					{
						"deco": "d",
						"name": "x"
					}
				],
				"name": "sinh",
				"comment": "ditto\n",
				"endline": 1254
			},
			{
				"kind": "function",
				"line": 1257,
				"deco": "FNaNbNiNffZf",
				"endchar": 75,
				"char": 7,
				"parameters": [
					{
						"deco": "f",
						"name": "x"
					}
				],
				"name": "sinh",
				"comment": "ditto\n",
				"endline": 1257
			},
			{
				"kind": "function",
				"line": 1273,
				"deco": "FNaNbNiNfeZe",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "e",
						"name": "x"
					}
				],
				"name": "tanh",
				"comment": " Calculates the hyperbolic tangent of x.\n\n      $(TABLE_SV\n      $(TR $(TH x)                 $(TH tanh(x))      $(TH invalid?))\n      $(TR $(TD $(PLUSMN)0.0)      $(TD $(PLUSMN)0.0) $(TD no) )\n      $(TR $(TD $(PLUSMN)$(INFIN)) $(TD $(PLUSMN)1.0) $(TD no))\n      )\n",
				"endline": 1283
			},
			{
				"kind": "function",
				"line": 1286,
				"deco": "FNaNbNiNfdZd",
				"endchar": 76,
				"char": 8,
				"parameters": [
					{
						"deco": "d",
						"name": "x"
					}
				],
				"name": "tanh",
				"comment": "ditto\n",
				"endline": 1286
			},
			{
				"kind": "function",
				"line": 1289,
				"deco": "FNaNbNiNffZf",
				"endchar": 74,
				"char": 7,
				"parameters": [
					{
						"deco": "f",
						"name": "x"
					}
				],
				"name": "tanh",
				"comment": "ditto\n",
				"endline": 1289
			},
			{
				"kind": "function",
				"line": 1341,
				"deco": "FNaNbNiNfeZe",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "e",
						"name": "x"
					}
				],
				"name": "acosh",
				"comment": " Calculates the inverse hyperbolic cosine of x.\n\n  Mathematically, acosh(x) = log(x + sqrt( x*x - 1))\n\n $(TABLE_DOMRG\n  $(DOMAIN 1..$(INFIN))\n  $(RANGE  1..log(real.max), $(INFIN)) )\n      $(TABLE_SV\n    $(SVH  x,     acosh(x) )\n    $(SV  $(NAN), $(NAN) )\n    $(SV  $(LT)1,     $(NAN) )\n    $(SV  1,      0       )\n    $(SV  +$(INFIN),+$(INFIN))\n  )\n",
				"endline": 1347
			},
			{
				"kind": "function",
				"line": 1350,
				"deco": "FNaNbNiNfdZd",
				"endchar": 78,
				"char": 8,
				"parameters": [
					{
						"deco": "d",
						"name": "x"
					}
				],
				"name": "acosh",
				"comment": "ditto\n",
				"endline": 1350
			},
			{
				"kind": "function",
				"line": 1353,
				"deco": "FNaNbNiNffZf",
				"endchar": 77,
				"char": 7,
				"parameters": [
					{
						"deco": "f",
						"name": "x"
					}
				],
				"name": "acosh",
				"comment": "ditto\n",
				"endline": 1353
			},
			{
				"kind": "function",
				"line": 1382,
				"deco": "FNaNbNiNfeZe",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "e",
						"name": "x"
					}
				],
				"name": "asinh",
				"comment": " Calculates the inverse hyperbolic sine of x.\n\n  Mathematically,\n  ---------------\n  asinh(x) =  log( x + sqrt( x*x + 1 )) // if x >= +0\n  asinh(x) = -log(-x + sqrt( x*x + 1 )) // if x <= -0\n  -------------\n\n    $(TABLE_SV\n    $(SVH x,                asinh(x)       )\n    $(SV  $(NAN),           $(NAN)         )\n    $(SV  $(PLUSMN)0,       $(PLUSMN)0      )\n    $(SV  $(PLUSMN)$(INFIN),$(PLUSMN)$(INFIN))\n    )\n",
				"endline": 1389
			},
			{
				"kind": "function",
				"line": 1392,
				"deco": "FNaNbNiNfdZd",
				"endchar": 78,
				"char": 8,
				"parameters": [
					{
						"deco": "d",
						"name": "x"
					}
				],
				"name": "asinh",
				"comment": "ditto\n",
				"endline": 1392
			},
			{
				"kind": "function",
				"line": 1395,
				"deco": "FNaNbNiNffZf",
				"endchar": 76,
				"char": 7,
				"parameters": [
					{
						"deco": "f",
						"name": "x"
					}
				],
				"name": "asinh",
				"comment": "ditto\n",
				"endline": 1395
			},
			{
				"kind": "function",
				"line": 1424,
				"deco": "FNaNbNiNfeZe",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "e",
						"name": "x"
					}
				],
				"name": "atanh",
				"comment": " Calculates the inverse hyperbolic tangent of x,\n returning a value from ranging from -1 to 1.\n\n Mathematically, atanh(x) = log( (1+x)/(1-x) ) / 2\n\n\n $(TABLE_DOMRG\n  $(DOMAIN -$(INFIN)..$(INFIN))\n  $(RANGE  -1..1) )\n $(TABLE_SV\n    $(SVH  x,     acosh(x) )\n    $(SV  $(NAN), $(NAN) )\n    $(SV  $(PLUSMN)0, $(PLUSMN)0)\n    $(SV  -$(INFIN), -0)\n )\n",
				"endline": 1428
			},
			{
				"kind": "function",
				"line": 1431,
				"deco": "FNaNbNiNfdZd",
				"endchar": 78,
				"char": 8,
				"parameters": [
					{
						"deco": "d",
						"name": "x"
					}
				],
				"name": "atanh",
				"comment": "ditto\n",
				"endline": 1431
			},
			{
				"kind": "function",
				"line": 1434,
				"deco": "FNaNbNiNffZf",
				"endchar": 76,
				"char": 7,
				"parameters": [
					{
						"deco": "f",
						"name": "x"
					}
				],
				"name": "atanh",
				"comment": "ditto\n",
				"endline": 1434
			},
			{
				"kind": "function",
				"line": 1453,
				"deco": "FNaNbNiNfeZl",
				"char": 6,
				"parameters": [
					{
						"deco": "e",
						"name": "x"
					}
				],
				"name": "rndtol",
				"comment": " Returns x rounded to a long value using the current rounding mode.\n If the integer value of x is\n greater than long.max, the result is\n indeterminate.\n"
			},
			{
				"kind": "function",
				"line": 1456,
				"deco": "FNaNbNiNfdZl",
				"endchar": 78,
				"char": 6,
				"parameters": [
					{
						"deco": "d",
						"name": "x"
					}
				],
				"name": "rndtol",
				"comment": "ditto\n",
				"endline": 1456
			},
			{
				"kind": "function",
				"line": 1459,
				"deco": "FNaNbNiNffZl",
				"endchar": 77,
				"char": 6,
				"parameters": [
					{
						"deco": "f",
						"name": "x"
					}
				],
				"name": "rndtol",
				"comment": "ditto\n",
				"endline": 1459
			},
			{
				"kind": "function",
				"line": 1468,
				"deco": "UeZe",
				"char": 17,
				"parameters": [
					{
						"deco": "e",
						"name": "x"
					}
				],
				"name": "rndtonl",
				"comment": " Returns x rounded to a long value using the FE_TONEAREST rounding mode.\n If the integer value of x is\n greater than long.max, the result is\n indeterminate.\n"
			},
			{
				"kind": "function",
				"line": 1480,
				"deco": "FNaNbNiNffZf",
				"char": 7,
				"parameters": [
					{
						"deco": "f",
						"name": "x"
					}
				],
				"name": "sqrt",
				"comment": " Compute square root of x.\n\n      $(TABLE_SV\n      $(TR $(TH x)         $(TH sqrt(x))   $(TH invalid?))\n      $(TR $(TD -0.0)      $(TD -0.0)      $(TD no))\n      $(TR $(TD $(LT)0.0)  $(TD $(NAN))    $(TD yes))\n      $(TR $(TD +$(INFIN)) $(TD +$(INFIN)) $(TD no))\n      )\n"
			},
			{
				"kind": "function",
				"line": 1483,
				"deco": "FNaNbNiNfdZd",
				"char": 8,
				"parameters": [
					{
						"deco": "d",
						"name": "x"
					}
				],
				"name": "sqrt",
				"comment": "ditto\n"
			},
			{
				"kind": "function",
				"line": 1486,
				"deco": "FNaNbNiNfeZe",
				"char": 6,
				"parameters": [
					{
						"deco": "e",
						"name": "x"
					}
				],
				"name": "sqrt",
				"comment": "ditto\n"
			},
			{
				"kind": "function",
				"line": 1547,
				"deco": "FNaNbNiNeeZe",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "e",
						"name": "x"
					}
				],
				"name": "exp",
				"comment": " Calculates e$(SUPERSCRIPT x).\n\n  $(TABLE_SV\n    $(TR $(TH x)             $(TH e$(SUPERSCRIPT x)) )\n    $(TR $(TD +$(INFIN))     $(TD +$(INFIN)) )\n    $(TR $(TD -$(INFIN))     $(TD +0.0)      )\n    $(TR $(TD $(NAN))        $(TD $(NAN))    )\n  )\n",
				"endline": 1613
			},
			{
				"kind": "function",
				"line": 1616,
				"deco": "FNaNbNiNfdZd",
				"endchar": 75,
				"char": 8,
				"parameters": [
					{
						"deco": "d",
						"name": "x"
					}
				],
				"name": "exp",
				"comment": "ditto\n",
				"endline": 1616
			},
			{
				"kind": "function",
				"line": 1619,
				"deco": "FNaNbNiNffZf",
				"endchar": 75,
				"char": 7,
				"parameters": [
					{
						"deco": "f",
						"name": "x"
					}
				],
				"name": "exp",
				"comment": "ditto\n",
				"endline": 1619
			},
			{
				"kind": "function",
				"line": 1641,
				"deco": "FNaNbNiNeeZe",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "e",
						"name": "x"
					}
				],
				"name": "expm1",
				"comment": " Calculates the value of the natural logarithm base (e)\n raised to the power of x, minus 1.\n\n For very small x, expm1(x) is more accurate\n than exp(x)-1.\n\n  $(TABLE_SV\n    $(TR $(TH x)             $(TH e$(SUPERSCRIPT x)-1)  )\n    $(TR $(TD $(PLUSMN)0.0)  $(TD $(PLUSMN)0.0) )\n    $(TR $(TD +$(INFIN))     $(TD +$(INFIN))    )\n    $(TR $(TD -$(INFIN))     $(TD -1.0)         )\n    $(TR $(TD $(NAN))        $(TD $(NAN))       )\n  )\n",
				"endline": 1858
			},
			{
				"kind": "function",
				"line": 1872,
				"deco": "FNaNbNiNeeZe",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "e",
						"name": "x"
					}
				],
				"name": "exp2",
				"comment": " Calculates 2$(SUPERSCRIPT x).\n\n  $(TABLE_SV\n    $(TR $(TH x)             $(TH exp2(x))   )\n    $(TR $(TD +$(INFIN))     $(TD +$(INFIN)) )\n    $(TR $(TD -$(INFIN))     $(TD +0.0)      )\n    $(TR $(TD $(NAN))        $(TD $(NAN))    )\n  )\nExample:\n\n---\nassert(feqrel(exp2(0.5L), SQRT2) >= real.mant_dig -1);\nassert(exp2(8.0L) == 256.0);\nassert(exp2(-9.0L)== 1.0L/512.0);\n\n---\n",
				"endline": 2104
			},
			{
				"kind": "function",
				"line": 2198,
				"deco": "FNaNbNiNeeZc",
				"endchar": 1,
				"char": 7,
				"parameters": [
					{
						"deco": "e",
						"name": "y"
					}
				],
				"name": "expi",
				"comment": " Calculate cos(y) + i sin(y).\n\n On many CPUs (such as x86), this is a very efficient operation;\n almost twice as fast as calculating sin(y) and cos(y) separately,\n and is the preferred method when both are required.\nExample:\n\n---\nassert(expi(1.3e5L) == cos(1.3e5L) + sin(1.3e5L) * 1i);\nassert(expi(0.0L) == 1L + 0.0Li);\n\n---\n",
				"endline": 2227
			},
			{
				"kind": "template",
				"line": 2254,
				"constraint": "isFloatingPoint!T",
				"members": [
					{
						"kind": "function",
						"line": 2254,
						"endchar": 1,
						"char": 3,
						"type": "pure nothrow @nogc @trusted T(const T value, out int exp)",
						"parameters": [
							{
								"storageClass": [
									"const"
								],
								"type": "T",
								"name": "value"
							},
							{
								"deco": "i",
								"storageClass": [
									"out"
								],
								"name": "exp"
							}
						],
						"name": "frexp",
						"endline": 2433
					}
				],
				"char": 3,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": " Separate floating point value into significand and exponent.\n\n Returns:\n      Calculate and return $(I x) and $(I exp) such that\n      value =$(I x)*2$(SUPERSCRIPT exp) and\n      .5 $(LT)= |$(I x)| $(LT) 1.0\n\n      $(I x) has same sign as value.\n\n      $(TABLE_SV\n      $(TR $(TH value)           $(TH returns)         $(TH exp))\n      $(TR $(TD $(PLUSMN)0.0)    $(TD $(PLUSMN)0.0)    $(TD 0))\n      $(TR $(TD +$(INFIN))       $(TD +$(INFIN))       $(TD int.max))\n      $(TR $(TD -$(INFIN))       $(TD -$(INFIN))       $(TD int.min))\n      $(TR $(TD $(PLUSMN)$(NAN)) $(TD $(PLUSMN)$(NAN)) $(TD int.min))\n      )\nExample:\n\n---\nint exp;\nreal mantissa = frexp(123.456L, exp);\n\n// check if values are equal to 19 decimal digits of precision\nassert(equalsDigit(mantissa * pow(2.0L, cast(real)exp), 123.456L, 19));\n\nassert(frexp(-real.nan, exp) && exp == int.min);\nassert(frexp(real.nan, exp) && exp == int.min);\nassert(frexp(-real.infinity, exp) == -real.infinity && exp == int.min);\nassert(frexp(real.infinity, exp) == real.infinity && exp == int.max);\nassert(frexp(-0.0, exp) == -0.0 && exp == 0);\nassert(frexp(0.0, exp) == 0.0 && exp == 0);\n\n---\n",
				"name": "frexp"
			},
			{
				"kind": "function",
				"line": 2535,
				"deco": "FNbNiNeeZi",
				"endchar": 1,
				"char": 5,
				"parameters": [
					{
						"deco": "e",
						"name": "x"
					}
				],
				"name": "ilogb",
				"comment": " Extracts the exponent of x as a signed integral value.\n\n If x is not a special value, the result is the same as\n $(D cast(int)logb(x)).\n\n      $(TABLE_SV\n      $(TR $(TH x)                $(TH ilogb(x))     $(TH Range error?))\n      $(TR $(TD 0)                 $(TD FP_ILOGB0)   $(TD yes))\n      $(TR $(TD $(PLUSMN)$(INFIN)) $(TD int.max)     $(TD no))\n      $(TR $(TD $(NAN))            $(TD FP_ILOGBNAN) $(TD no))\n      )\n",
				"endline": 2603
			},
			{
				"kind": "function",
				"line": 2646,
				"deco": "FNaNbNiNfeiZe",
				"char": 6,
				"parameters": [
					{
						"deco": "e",
						"name": "n"
					},
					{
						"deco": "i",
						"name": "exp"
					}
				],
				"name": "ldexp",
				"comment": " Compute n * 2$(SUPERSCRIPT exp)\n References: frexp\nExample:\n\n---\nimport std.typetuple;\nforeach(T; TypeTuple!(float, double, real))\n{\n    T r;\n\n    r = ldexp(3.0L, 3);\n    assert(r == 24);\n\n    r = ldexp(cast(T)3.0, cast(int) 3);\n    assert(r == 24);\n\n    T n = 3.0;\n    int exp = 3;\n    r = ldexp(n, exp);\n    assert(r == 24);        \n}\n\n---\n"
			},
			{
				"kind": "function",
				"line": 2649,
				"deco": "FNaNbNiNfdiZd",
				"endchar": 92,
				"char": 8,
				"parameters": [
					{
						"deco": "d",
						"name": "n"
					},
					{
						"deco": "i",
						"name": "exp"
					}
				],
				"name": "ldexp",
				"comment": "ditto\n",
				"endline": 2649
			},
			{
				"kind": "function",
				"line": 2652,
				"deco": "FNaNbNiNffiZf",
				"endchar": 90,
				"char": 7,
				"parameters": [
					{
						"deco": "f",
						"name": "n"
					},
					{
						"deco": "i",
						"name": "exp"
					}
				],
				"name": "ldexp",
				"comment": "ditto\n",
				"endline": 2652
			},
			{
				"kind": "function",
				"line": 2758,
				"deco": "FNaNbNiNfeZe",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "e",
						"name": "x"
					}
				],
				"name": "log",
				"comment": " Calculate the natural logarithm of x.\n\n    $(TABLE_SV\n    $(TR $(TH x)            $(TH log(x))    $(TH divide by 0?) $(TH invalid?))\n    $(TR $(TD $(PLUSMN)0.0) $(TD -$(INFIN)) $(TD yes)          $(TD no))\n    $(TR $(TD $(LT)0.0)     $(TD $(NAN))    $(TD no)           $(TD yes))\n    $(TR $(TD +$(INFIN))    $(TD +$(INFIN)) $(TD no)           $(TD no))\n    )\nExample:\n\n---\nassert(log(E) == 1);\n\n---\n",
				"endline": 2867
			},
			{
				"kind": "function",
				"line": 2885,
				"deco": "FNaNbNiNfeZe",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "e",
						"name": "x"
					}
				],
				"name": "log10",
				"comment": " Calculate the base-10 logarithm of x.\n\n      $(TABLE_SV\n      $(TR $(TH x)            $(TH log10(x))  $(TH divide by 0?) $(TH invalid?))\n      $(TR $(TD $(PLUSMN)0.0) $(TD -$(INFIN)) $(TD yes)          $(TD no))\n      $(TR $(TD $(LT)0.0)     $(TD $(NAN))    $(TD no)           $(TD yes))\n      $(TR $(TD +$(INFIN))    $(TD +$(INFIN)) $(TD no)           $(TD no))\n      )\nExample:\n\n---\nassert(fabs(log10(1000) - 3) < .000001);\n\n---\n",
				"endline": 2998
			},
			{
				"kind": "function",
				"line": 3020,
				"deco": "FNaNbNiNfeZe",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "e",
						"name": "x"
					}
				],
				"name": "log1p",
				"comment": "      Calculates the natural logarithm of 1 + x.\n\n      For very small x, log1p(x) will be more accurate than\n      log(1 + x).\n\n  $(TABLE_SV\n  $(TR $(TH x)            $(TH log1p(x))     $(TH divide by 0?) $(TH invalid?))\n  $(TR $(TD $(PLUSMN)0.0) $(TD $(PLUSMN)0.0) $(TD no)           $(TD no))\n  $(TR $(TD -1.0)         $(TD -$(INFIN))    $(TD yes)          $(TD no))\n  $(TR $(TD $(LT)-1.0)    $(TD $(NAN))       $(TD no)           $(TD yes))\n  $(TR $(TD +$(INFIN))    $(TD -$(INFIN))    $(TD no)           $(TD no))\n  )\n",
				"endline": 3042
			},
			{
				"kind": "function",
				"line": 3055,
				"deco": "FNaNbNiNfeZe",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "e",
						"name": "x"
					}
				],
				"name": "log2",
				"comment": " Calculates the base-2 logarithm of x:\n $(SUB log, 2)x\n\n  $(TABLE_SV\n  $(TR $(TH x)            $(TH log2(x))   $(TH divide by 0?) $(TH invalid?))\n  $(TR $(TD $(PLUSMN)0.0) $(TD -$(INFIN)) $(TD yes)          $(TD no) )\n  $(TR $(TD $(LT)0.0)     $(TD $(NAN))    $(TD no)           $(TD yes) )\n  $(TR $(TD +$(INFIN))    $(TD +$(INFIN)) $(TD no)           $(TD no) )\n  )\nExample:\n\n---\n// check if values are equal to 19 decimal digits of precision\nassert(equalsDigit(log2(1024.0L), 10, 19));\n\n---\n",
				"endline": 3159
			},
			{
				"kind": "function",
				"line": 3182,
				"deco": "FNbNiNeeZe",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "e",
						"name": "x"
					}
				],
				"name": "logb",
				"comment": " Extracts the exponent of x as a signed integral value.\n\n If x is subnormal, it is treated as if it were normalized.\n For a positive, finite x:\n\n 1 $(LT)= $(I x) * FLT_RADIX$(SUPERSCRIPT -logb(x)) $(LT) FLT_RADIX\n\n      $(TABLE_SV\n      $(TR $(TH x)                 $(TH logb(x))   $(TH divide by 0?) )\n      $(TR $(TD $(PLUSMN)$(INFIN)) $(TD +$(INFIN)) $(TD no))\n      $(TR $(TD $(PLUSMN)0.0)      $(TD -$(INFIN)) $(TD yes) )\n      )\n",
				"endline": 3206
			},
			{
				"kind": "function",
				"line": 3222,
				"deco": "FNbNiNeeeZe",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "e",
						"name": "x"
					},
					{
						"deco": "e",
						"name": "y"
					}
				],
				"name": "fmod",
				"comment": " Calculates the remainder from the calculation x/y.\n Returns:\n The value of x - i * y, where i is the number of times that y can\n be completely subtracted from x. The result has the same sign as x.\n\n $(TABLE_SV\n  $(TR $(TH x)              $(TH y)             $(TH fmod(x, y))   $(TH invalid?))\n  $(TR $(TD $(PLUSMN)0.0)   $(TD not 0.0)       $(TD $(PLUSMN)0.0) $(TD no))\n  $(TR $(TD $(PLUSMNINF))   $(TD anything)      $(TD $(NAN))       $(TD yes))\n  $(TR $(TD anything)       $(TD $(PLUSMN)0.0)  $(TD $(NAN))       $(TD yes))\n  $(TR $(TD !=$(PLUSMNINF)) $(TD $(PLUSMNINF))  $(TD x)            $(TD no))\n )\n",
				"endline": 3230
			},
			{
				"kind": "function",
				"line": 3243,
				"deco": "FNbNiNeeKeZe",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "e",
						"name": "x"
					},
					{
						"deco": "e",
						"storageClass": [
							"ref"
						],
						"name": "i"
					}
				],
				"name": "modf",
				"comment": " Breaks x into an integral part and a fractional part, each of which has\n the same sign as x. The integral part is stored in i.\n Returns:\n The fractional part of x.\n\n $(TABLE_SV\n  $(TR $(TH x)              $(TH i (on input))  $(TH modf(x, i))   $(TH i (on return)))\n  $(TR $(TD $(PLUSMNINF))   $(TD anything)      $(TD $(PLUSMN)0.0) $(TD $(PLUSMNINF)))\n )\n",
				"endline": 3252
			},
			{
				"kind": "function",
				"line": 3266,
				"deco": "FNbNiNeeiZe",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "e",
						"name": "x"
					},
					{
						"deco": "i",
						"name": "n"
					}
				],
				"name": "scalbn",
				"comment": " Efficiently calculates x * 2$(SUPERSCRIPT n).\n\n scalbn handles underflow and overflow in\n the same fashion as the basic arithmetic operators.\n\n      $(TABLE_SV\n      $(TR $(TH x)                 $(TH scalb(x)))\n      $(TR $(TD $(PLUSMNINF))      $(TD $(PLUSMNINF)) )\n      $(TR $(TD $(PLUSMN)0.0)      $(TD $(PLUSMN)0.0) )\n      )\nExample:\n\n---\nassert(scalbn(-real.infinity, 5) == -real.infinity);\n\n---\n",
				"endline": 3296
			},
			{
				"kind": "function",
				"line": 3314,
				"deco": "FNbNiNeeZe",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "e",
						"name": "x"
					}
				],
				"name": "cbrt",
				"comment": " Calculates the cube root of x.\n\n      $(TABLE_SV\n      $(TR $(TH $(I x))            $(TH cbrt(x))           $(TH invalid?))\n      $(TR $(TD $(PLUSMN)0.0)      $(TD $(PLUSMN)0.0)      $(TD no) )\n      $(TR $(TD $(NAN))            $(TD $(NAN))            $(TD yes) )\n      $(TR $(TD $(PLUSMN)$(INFIN)) $(TD $(PLUSMN)$(INFIN)) $(TD no) )\n      )\n",
				"endline": 3325
			},
			{
				"kind": "function",
				"line": 3337,
				"deco": "FNaNbNiNfeZe",
				"char": 6,
				"parameters": [
					{
						"deco": "e",
						"name": "x"
					}
				],
				"name": "fabs",
				"comment": " Returns |x|\n\n      $(TABLE_SV\n      $(TR $(TH x)                 $(TH fabs(x)))\n      $(TR $(TD $(PLUSMN)0.0)      $(TD +0.0) )\n      $(TR $(TD $(PLUSMN)$(INFIN)) $(TD +$(INFIN)) )\n      )\n"
			},
			{
				"kind": "function",
				"line": 3340,
				"deco": "FNaNbNiNfdZd",
				"endchar": 76,
				"char": 8,
				"parameters": [
					{
						"deco": "d",
						"name": "x"
					}
				],
				"name": "fabs",
				"comment": "ditto\n",
				"endline": 3340
			},
			{
				"kind": "function",
				"line": 3343,
				"deco": "FNaNbNiNffZf",
				"endchar": 74,
				"char": 7,
				"parameters": [
					{
						"deco": "f",
						"name": "x"
					}
				],
				"name": "fabs",
				"comment": "ditto\n",
				"endline": 3343
			},
			{
				"kind": "function",
				"line": 3365,
				"deco": "FNaNbNiNfeeZe",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "e",
						"name": "x"
					},
					{
						"deco": "e",
						"name": "y"
					}
				],
				"name": "hypot",
				"comment": " Calculates the length of the\n hypotenuse of a right-angled triangle with sides of length x and y.\n The hypotenuse is the value of the square root of\n the sums of the squares of x and y:\n\n      sqrt($(POWER x, 2) + $(POWER y, 2))\n\n Note that hypot(x, y), hypot(y, x) and\n hypot(x, -y) are equivalent.\n\n  $(TABLE_SV\n  $(TR $(TH x)            $(TH y)            $(TH hypot(x, y)) $(TH invalid?))\n  $(TR $(TD x)            $(TD $(PLUSMN)0.0) $(TD |x|)         $(TD no))\n  $(TR $(TD $(PLUSMNINF)) $(TD y)            $(TD +$(INFIN))   $(TD no))\n  $(TR $(TD $(PLUSMNINF)) $(TD $(NAN))       $(TD +$(INFIN))   $(TD no))\n  )\n",
				"endline": 3417
			},
			{
				"kind": "function",
				"line": 3455,
				"deco": "FNaNbNiNeeZe",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "e",
						"name": "x"
					}
				],
				"name": "ceil",
				"comment": " Returns the value of x rounded upward to the next integer\n (toward positive infinity).\nExample:\n\n---\nassert(ceil(+123.456L) == +124);\nassert(ceil(-123.456L) == -123);\nassert(ceil(-1.234L) == -1);\nassert(ceil(-0.123L) == 0);\nassert(ceil(0.0L) == 0);\nassert(ceil(+0.123L) == 1);\nassert(ceil(+1.234L) == 2);\nassert(ceil(real.infinity) == real.infinity);\nassert(isNaN(ceil(real.nan)));\nassert(isNaN(ceil(real.init)));\n\n---\n",
				"endline": 3506
			},
			{
				"kind": "function",
				"line": 3583,
				"deco": "FNaNbNiNeeZe",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "e",
						"name": "x"
					}
				],
				"name": "floor",
				"comment": " Returns the value of x rounded downward to the next integer\n (toward negative infinity).\nExample:\n\n---\nassert(floor(+123.456L) == +123);\nassert(floor(-123.456L) == -124);\nassert(floor(-1.234L) == -2);\nassert(floor(-0.123L) == -1);\nassert(floor(0.0L) == 0);\nassert(floor(+0.123L) == 0);\nassert(floor(+1.234L) == 1);\nassert(floor(real.infinity) == real.infinity);\nassert(isNaN(floor(real.nan)));\nassert(isNaN(floor(real.init)));\n\n---\n",
				"endline": 3630
			},
			{
				"kind": "function",
				"line": 3702,
				"deco": "FNbNiNeeZe",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "e",
						"name": "x"
					}
				],
				"name": "nearbyint",
				"comment": " Rounds x to the nearest integer value, using the current rounding\n mode.\n\n Unlike the rint functions, nearbyint does not raise the\n FE_INEXACT exception.\n",
				"endline": 3710
			},
			{
				"kind": "function",
				"line": 3720,
				"deco": "FNaNbNiNfeZe",
				"char": 6,
				"parameters": [
					{
						"deco": "e",
						"name": "x"
					}
				],
				"name": "rint",
				"comment": " Rounds x to the nearest integer value, using the current rounding\n mode.\n If the return value is not equal to x, the FE_INEXACT\n exception is raised.\n $(B nearbyint) performs\n the same operation, but does not set the FE_INEXACT exception.\n"
			},
			{
				"kind": "function",
				"line": 3723,
				"deco": "FNaNbNiNfdZd",
				"endchar": 76,
				"char": 8,
				"parameters": [
					{
						"deco": "d",
						"name": "x"
					}
				],
				"name": "rint",
				"comment": "ditto\n",
				"endline": 3723
			},
			{
				"kind": "function",
				"line": 3726,
				"deco": "FNaNbNiNffZf",
				"endchar": 74,
				"char": 7,
				"parameters": [
					{
						"deco": "f",
						"name": "x"
					}
				],
				"name": "rint",
				"comment": "ditto\n",
				"endline": 3726
			},
			{
				"kind": "function",
				"line": 3738,
				"deco": "FNaNbNiNeeZl",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "e",
						"name": "x"
					}
				],
				"name": "lrint",
				"comment": " Rounds x to the nearest integer value, using the current rounding\n mode.\n\n This is generally the fastest method to convert a floating-point number\n to an integer. Note that the results from this function\n depend on the rounding mode, if the fractional part of x is exactly 0.5.\n If using the default rounding mode (ties round to even integers)\n lrint(4.5) == 4, lrint(5.5)==6.\nExample:\n\n---\nassert(lrint(4.5) == 4);\nassert(lrint(5.5) == 6);\nassert(lrint(-4.5) == -4);\nassert(lrint(-5.5) == -6);\n\nassert(lrint(int.max - 0.5) == 2147483646L);\nassert(lrint(int.max + 0.5) == 2147483648L);\nassert(lrint(int.min - 0.5) == -2147483648L);\nassert(lrint(int.min + 0.5) == -2147483648L);\n\n---\n",
				"endline": 3871
			},
			{
				"kind": "function",
				"line": 3892,
				"deco": "FNbNiNeeZe",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "e",
						"name": "x"
					}
				],
				"name": "round",
				"comment": " Return the value of x rounded to the nearest integer.\n If the fractional part of x is exactly 0.5, the return value is rounded to\n the even integer.\n",
				"endline": 3904
			},
			{
				"kind": "function",
				"line": 3912,
				"deco": "FNbNiNeeZl",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "e",
						"name": "x"
					}
				],
				"name": "lround",
				"comment": " Return the value of x rounded to the nearest integer.\n\n If the fractional part of x is exactly 0.5, the return value is rounded\n away from zero.\n",
				"endline": 3918
			},
			{
				"kind": "function",
				"line": 3935,
				"deco": "FNbNiNeeZe",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "e",
						"name": "x"
					}
				],
				"name": "trunc",
				"comment": " Returns the integer portion of x, dropping the fractional portion.\n\n This is also known as \"chop\" rounding.\n",
				"endline": 3976
			},
			{
				"kind": "function",
				"line": 4000,
				"deco": "FNbNiNeeeZe",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "e",
						"name": "x"
					},
					{
						"deco": "e",
						"name": "y"
					}
				],
				"name": "remainder",
				"comment": " Calculate the remainder x REM y, following IEC 60559.\n\n REM is the value of x - y * n, where n is the integer nearest the exact\n value of x / y.\n If |n - x / y| == 0.5, n is even.\n If the result is zero, it has the same sign as x.\n Otherwise, the sign of the result is the sign of x / y.\n Precision mode has no effect on the remainder functions.\n\n remquo returns n in the parameter n.\n\n $(TABLE_SV\n  $(TR $(TH x)               $(TH y)            $(TH remainder(x, y)) $(TH n)   $(TH invalid?))\n  $(TR $(TD $(PLUSMN)0.0)    $(TD not 0.0)      $(TD $(PLUSMN)0.0)    $(TD 0.0) $(TD no))\n  $(TR $(TD $(PLUSMNINF))    $(TD anything)     $(TD $(NAN))          $(TD ?)   $(TD yes))\n  $(TR $(TD anything)        $(TD $(PLUSMN)0.0) $(TD $(NAN))          $(TD ?)   $(TD yes))\n  $(TR $(TD != $(PLUSMNINF)) $(TD $(PLUSMNINF)) $(TD x)               $(TD ?)   $(TD no))\n )\n\n Note: remquo not supported on windows\n",
				"endline": 4009
			},
			{
				"kind": "struct",
				"line": 4027,
				"members": [
					{
						"kind": "function",
						"line": 4152,
						"deco": "FNdZb",
						"endchar": 69,
						"char": 21,
						"name": "inexact",
						"comment": "The result cannot be represented exactly, so rounding occurred.\n\n(example: x = sin(0.1); )\n",
						"endline": 4152
					},
					{
						"kind": "function",
						"line": 4155,
						"deco": "FNdZb",
						"endchar": 73,
						"char": 21,
						"name": "underflow",
						"comment": "A zero was generated by underflow (example: x = real.min*real.epsilon/2;)\n",
						"endline": 4155
					},
					{
						"kind": "function",
						"line": 4158,
						"deco": "FNdZb",
						"endchar": 71,
						"char": 21,
						"name": "overflow",
						"comment": "An infinity was generated by overflow (example: x = real.max*2;)\n",
						"endline": 4158
					},
					{
						"kind": "function",
						"line": 4161,
						"deco": "FNdZb",
						"endchar": 73,
						"char": 21,
						"name": "divByZero",
						"comment": "An infinity was generated by division by zero (example: x = 3/0.0; )\n",
						"endline": 4161
					},
					{
						"kind": "function",
						"line": 4164,
						"deco": "FNdZb",
						"endchar": 69,
						"char": 21,
						"name": "invalid",
						"comment": "A machine NaN was generated. (example: x = real.infinity * 0.0; )\n",
						"endline": 4164
					}
				],
				"char": 1,
				"name": "IeeeFlags",
				"comment": " IEEE exception status flags ('sticky bits')\n\n These flags indicate that an exceptional floating-point condition has occurred.\n They indicate that a NaN or an infinity has been generated, that a result\n is inexact, or that a signalling NaN has been encountered. If floating-point\n exceptions are enabled (unmasked), a hardware exception will be generated\n instead of setting these flags.\nExample:\n\n---\nstatic void func() {\n    int a = 10 * 10;\n}\n\nreal a=3.5;\n// Set all the flags to zero\nresetIeeeFlags();\nassert(!ieeeFlags.divByZero);\n// Perform a division by zero.\na/=0.0L;\nassert(a==real.infinity);\nassert(ieeeFlags.divByZero);\n// Create a NaN\na*=0.0L;\nassert(ieeeFlags.invalid);\nassert(isNaN(a));\n\n// Check that calling func() has no effect on the\n// status flags.\nIeeeFlags f = ieeeFlags;\nfunc();\nassert(ieeeFlags == f);\n\n---\n"
			},
			{
				"kind": "function",
				"line": 4206,
				"deco": "FZv",
				"endchar": 53,
				"char": 6,
				"name": "resetIeeeFlags",
				"comment": "Set all of the floating-point status flags to false.\n",
				"endline": 4206
			},
			{
				"kind": "function",
				"line": 4209,
				"deco": "FNdZS3std4math9IeeeFlags",
				"endchar": 1,
				"char": 21,
				"name": "ieeeFlags",
				"comment": "Return a snapshot of the current state of the floating-point status flags.\n",
				"endline": 4212
			},
			{
				"kind": "struct",
				"line": 4263,
				"members": [
					{
						"kind": "enum member",
						"line": 4348,
						"value": "13u",
						"char": 13,
						"name": "severeExceptions",
						"comment": "Severe = The overflow, division by zero, and invalid exceptions.\n"
					},
					{
						"kind": "function",
						"line": 4381,
						"storageClass": [
							"static"
						],
						"deco": "FNbNdNiNfZb",
						"endchar": 5,
						"char": 27,
						"name": "hasExceptionTraps",
						"comment": "Returns true if the current FPU supports exception trapping\n",
						"endline": 4399
					},
					{
						"kind": "function",
						"line": 4402,
						"deco": "FNikZv",
						"endchar": 5,
						"char": 10,
						"parameters": [
							{
								"deco": "k",
								"name": "exceptions"
							}
						],
						"name": "enableExceptions",
						"comment": "Enable (unmask) specific hardware exceptions. Multiple exceptions may be ORed together.\n",
						"endline": 4410
					},
					{
						"kind": "function",
						"line": 4413,
						"deco": "FNikZv",
						"endchar": 5,
						"char": 10,
						"parameters": [
							{
								"deco": "k",
								"name": "exceptions"
							}
						],
						"name": "disableExceptions",
						"comment": "Disable (mask) specific hardware exceptions. Multiple exceptions may be ORed together.\n",
						"endline": 4421
					},
					{
						"kind": "function",
						"line": 4424,
						"deco": "FNdNikZv",
						"endchar": 5,
						"char": 20,
						"parameters": [
							{
								"deco": "k",
								"name": "newMode"
							}
						],
						"name": "rounding",
						"comment": "Change the floating-point hardware rounding mode\n",
						"originalType": "@nogc @property void(RoundingMode newMode)",
						"endline": 4428
					},
					{
						"kind": "function",
						"line": 4431,
						"storageClass": [
							"static"
						],
						"deco": "FNdNiZk",
						"endchar": 5,
						"char": 27,
						"name": "enabledExceptions",
						"comment": "Return the exceptions which are currently enabled (unmasked)\n",
						"endline": 4438
					},
					{
						"kind": "function",
						"line": 4441,
						"storageClass": [
							"static"
						],
						"deco": "FNdNiZk",
						"endchar": 5,
						"char": 35,
						"name": "rounding",
						"comment": "Return the currently active rounding mode\n",
						"originalType": "@nogc @property RoundingMode()",
						"endline": 4444
					},
					{
						"kind": "destructor",
						"line": 4447,
						"deco": "FNiZv",
						"endchar": 5,
						"char": 5,
						"name": "~this",
						"comment": "Clear all pending exceptions, then restore the original exception state and rounding mode.\n",
						"endline": 4452
					}
				],
				"char": 1,
				"name": "FloatingPointControl",
				"comment": " Control the Floating point hardware\n\n  Change the IEEE754 floating-point rounding mode and the floating-point\n  hardware exceptions.\n\n  By default, the rounding mode is roundToNearest and all hardware exceptions\n  are disabled. For most applications, debugging is easier if the $(I division\n  by zero), $(I overflow), and $(I invalid operation) exceptions are enabled.\n  These three are combined into a $(I severeExceptions) value for convenience.\n  Note in particular that if $(I invalidException) is enabled, a hardware trap\n  will be generated whenever an uninitialized floating-point variable is used.\n\n  All changes are temporary. The previous state is restored at the\n  end of the scope.\n\n\nExample:\n----\n{\n    FloatingPointControl fpctrl;\n\n    // Enable hardware exceptions for division by zero, overflow to infinity,\n    // invalid operations, and uninitialized floating-point variables.\n    fpctrl.enableExceptions(FloatingPointControl.severeExceptions);\n\n    // This will generate a hardware exception, if x is a\n    // default-initialized floating point variable:\n    real x; // Add `= 0` or even `= real.nan` to not throw the exception.\n    real y = x * 3.0;\n\n    // The exception is only thrown for default-uninitialized NaN-s.\n    // NaN-s with other payload are valid:\n    real z = y * real.nan; // ok\n\n    // Changing the rounding mode:\n    fpctrl.rounding = FloatingPointControl.roundUp;\n    assert(rint(1.1) == 2);\n\n    // The set hardware exceptions will be disabled when leaving this scope.\n    // The original rounding mode will also be restored.\n}\n\n// Ensure previous values are returned:\nassert(!FloatingPointControl.enabledExceptions);\nassert(FloatingPointControl.rounding == FloatingPointControl.roundToNearest);\nassert(rint(1.1) == 1);\n----\n\n"
			},
			{
				"kind": "template",
				"line": 4594,
				"constraint": "isFloatingPoint!X",
				"members": [
					{
						"kind": "function",
						"line": 4594,
						"endchar": 1,
						"char": 6,
						"type": "pure nothrow @nogc @trusted bool(X x)",
						"parameters": [
							{
								"type": "X",
								"name": "x"
							}
						],
						"name": "isNaN",
						"endline": 4628
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "X"
					}
				],
				"comment": " Returns !=0 if e is a NaN.\nExample:\n\n---\nassert( isNaN(float.init));\nassert( isNaN(-double.init));\nassert( isNaN(real.nan));\nassert( isNaN(-real.nan));\nassert(!isNaN(cast(float)53.6));\nassert(!isNaN(cast(real)-53.6));\n\n---\n",
				"name": "isNaN"
			},
			{
				"kind": "template",
				"line": 4684,
				"members": [
					{
						"kind": "function",
						"line": 4684,
						"endchar": 1,
						"char": 5,
						"type": "pure nothrow @nogc @trusted int(X e)",
						"parameters": [
							{
								"type": "X",
								"name": "e"
							}
						],
						"name": "isFinite",
						"endline": 4689
					}
				],
				"char": 5,
				"parameters": [
					{
						"kind": "type",
						"name": "X"
					}
				],
				"comment": " Returns !=0 if e is finite (not infinite or $(NAN)).\nExample:\n\n---\nassert( isFinite(1.23f));\nassert( isFinite(float.max));\nassert( isFinite(float.min_normal));\nassert(!isFinite(float.nan));\nassert(!isFinite(float.infinity));\n\n---\n",
				"name": "isFinite"
			},
			{
				"kind": "template",
				"line": 4730,
				"members": [
					{
						"kind": "function",
						"line": 4730,
						"endchar": 1,
						"char": 5,
						"type": "pure nothrow @nogc @trusted int(X x)",
						"parameters": [
							{
								"type": "X",
								"name": "x"
							}
						],
						"name": "isNormal",
						"endline": 4743
					}
				],
				"char": 5,
				"parameters": [
					{
						"kind": "type",
						"name": "X"
					}
				],
				"comment": " Returns !=0 if x is normalized (not zero, subnormal, infinite, or $(NAN)).\nExample:\n\n---\nfloat f = 3;\ndouble d = 500;\nreal e = 10e+48;\n\nassert(isNormal(f));\nassert(isNormal(d));\nassert(isNormal(e));\nf = d = e = 0;\nassert(!isNormal(f));\nassert(!isNormal(d));\nassert(!isNormal(e));\nassert(!isNormal(real.infinity));\nassert(isNormal(-real.max));\nassert(!isNormal(real.min_normal/4));\n\n\n---\n",
				"name": "isNormal"
			},
			{
				"kind": "template",
				"line": 4772,
				"members": [
					{
						"kind": "function",
						"line": 4772,
						"endchar": 1,
						"char": 5,
						"type": "pure nothrow @nogc @trusted int(X x)",
						"parameters": [
							{
								"type": "X",
								"name": "x"
							}
						],
						"name": "isSubnormal",
						"endline": 4808
					}
				],
				"char": 5,
				"parameters": [
					{
						"kind": "type",
						"name": "X"
					}
				],
				"comment": " Is number subnormal? (Also called \"denormal\".)\n Subnormals have a 0 exponent and a 0 most significant mantissa bit.\n\n Need one for each format because subnormal floats might\n be converted to normal reals.\nExample:\n\n---\nimport std.typetuple;\n\nforeach (T; TypeTuple!(float, double, real))\n{\n    T f;\n    for (f = 1.0; !isSubnormal(f); f /= 2)\n        assert(f != 0);\n}\n\n---\n",
				"name": "isSubnormal"
			},
			{
				"kind": "template",
				"line": 4833,
				"constraint": "isFloatingPoint!X",
				"members": [
					{
						"kind": "function",
						"line": 4833,
						"endchar": 1,
						"char": 6,
						"type": "pure nothrow @nogc @trusted bool(X x)",
						"parameters": [
							{
								"type": "X",
								"name": "x"
							}
						],
						"name": "isInfinity",
						"endline": 4869
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "X"
					}
				],
				"comment": " Return !=0 if e is $(PLUSMN)$(INFIN).\nExample:\n\n---\nassert(!isInfinity(float.init));\nassert(!isInfinity(-float.init));\nassert(!isInfinity(float.nan));\nassert(!isInfinity(-float.nan));\nassert(isInfinity(float.infinity));\nassert(isInfinity(-float.infinity));\nassert(isInfinity(-1.0f / 0.0f));\n\n---\n",
				"name": "isInfinity"
			},
			{
				"kind": "function",
				"line": 4949,
				"deco": "FNaNbNiNeeeZb",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "e",
						"name": "x"
					},
					{
						"deco": "e",
						"name": "y"
					}
				],
				"name": "isIdentical",
				"comment": " Is the binary representation of x identical to y?\n\n Same as ==, except that positive and negative zero are not identical,\n and two $(NAN)s are identical if they have the same 'payload'.\n",
				"endline": 4970
			},
			{
				"kind": "template",
				"line": 4975,
				"members": [
					{
						"kind": "function",
						"line": 4975,
						"endchar": 1,
						"char": 5,
						"type": "pure nothrow @nogc @trusted int(X x)",
						"parameters": [
							{
								"type": "X",
								"name": "x"
							}
						],
						"name": "signbit",
						"endline": 4979
					}
				],
				"char": 5,
				"parameters": [
					{
						"kind": "type",
						"name": "X"
					}
				],
				"comment": " Return 1 if sign bit of e is set, 0 if not.\nExample:\n\n---\ndebug (math) printf(\"math.signbit.unittest\\n\");\nassert(!signbit(float.nan));\nassert(signbit(-float.nan));\nassert(!signbit(168.1234f));\nassert(signbit(-168.1234f));\nassert(!signbit(0.0f));\nassert(signbit(-0.0f));\nassert(signbit(-float.max));\nassert(!signbit(float.max));\n\nassert(!signbit(double.nan));\nassert(signbit(-double.nan));\nassert(!signbit(168.1234));\nassert(signbit(-168.1234));\nassert(!signbit(0.0));\nassert(signbit(-0.0));\nassert(signbit(-double.max));\nassert(!signbit(double.max));\n\nassert(!signbit(real.nan));\nassert(signbit(-real.nan));\nassert(!signbit(168.1234L));\nassert(signbit(-168.1234L));\nassert(!signbit(0.0L));\nassert(signbit(-0.0L));\nassert(signbit(-real.max));\nassert(!signbit(real.max));\n\n---\n",
				"name": "signbit"
			},
			{
				"kind": "template",
				"line": 5024,
				"constraint": "isFloatingPoint!R && isFloatingPoint!X",
				"members": [
					{
						"kind": "function",
						"line": 5024,
						"endchar": 1,
						"char": 3,
						"type": "pure nothrow @nogc @trusted R(R to, X from)",
						"parameters": [
							{
								"type": "R",
								"name": "to"
							},
							{
								"type": "X",
								"name": "from"
							}
						],
						"name": "copysign",
						"endline": 5035
					}
				],
				"char": 3,
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					},
					{
						"kind": "type",
						"name": "X"
					}
				],
				"comment": " Return a value composed of to with from's sign bit.\n",
				"name": "copysign"
			},
			{
				"kind": "template",
				"line": 5091,
				"members": [
					{
						"kind": "function",
						"line": 5091,
						"endchar": 1,
						"char": 3,
						"type": "pure nothrow @nogc @safe F(F x)",
						"parameters": [
							{
								"type": "F",
								"name": "x"
							}
						],
						"name": "sgn",
						"endline": 5095
					}
				],
				"char": 3,
				"parameters": [
					{
						"kind": "type",
						"name": "F"
					}
				],
				"comment": "Returns $(D -1) if $(D x < 0), $(D x) if $(D x == 0), $(D 1) if\n$(D x > 0), and $(NAN) if x==$(NAN).\nExample:\n\n---\nassert(sgn(168.1234) == 1);\nassert(sgn(-168.1234) == -1);\nassert(sgn(0.0) == 0);\nassert(sgn(-0.0) == 0);\n\n---\n",
				"name": "sgn"
			},
			{
				"kind": "function",
				"line": 5120,
				"deco": "FNaNbNiNemZe",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "m",
						"name": "payload"
					}
				],
				"name": "NaN",
				"comment": " Create a quiet $(NAN), storing an integer inside the payload.\n\n For floats, the largest possible payload is 0x3F_FFFF.\n For doubles, it is 0x3_FFFF_FFFF_FFFF.\n For 80-bit or 128-bit reals, it is 0x3FFF_FFFF_FFFF_FFFF.\n",
				"endline": 5185
			},
			{
				"kind": "function",
				"line": 5208,
				"deco": "FNaNbNiNeeZm",
				"endchar": 1,
				"char": 7,
				"parameters": [
					{
						"deco": "e",
						"name": "x"
					}
				],
				"name": "getNaNPayload",
				"comment": " Extract an integral payload from a $(NAN).\n\n Returns:\n the integer payload as a ulong.\n\n For floats, the largest possible payload is 0x3F_FFFF.\n For doubles, it is 0x3_FFFF_FFFF_FFFF.\n For 80-bit or 128-bit reals, it is 0x3FFF_FFFF_FFFF_FFFF.\n",
				"endline": 5246
			},
			{
				"kind": "function",
				"line": 5290,
				"deco": "FNaNbNiNeeZe",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "e",
						"name": "x"
					}
				],
				"name": "nextUp",
				"comment": " Calculate the next largest floating point value after x.\n\n Return the least number greater than x that is representable as a real;\n thus, it gives the next point on the IEEE number line.\n\n  $(TABLE_SV\n    $(SVH x,            nextUp(x)   )\n    $(SV  -$(INFIN),    -real.max   )\n    $(SV  $(PLUSMN)0.0, real.min_normal*real.epsilon )\n    $(SV  real.max,     $(INFIN) )\n    $(SV  $(INFIN),     $(INFIN) )\n    $(SV  $(NAN),       $(NAN)   )\n )\n",
				"endline": 5387
			},
			{
				"kind": "function",
				"line": 5390,
				"deco": "FNaNbNiNedZd",
				"endchar": 1,
				"char": 8,
				"parameters": [
					{
						"deco": "d",
						"name": "x"
					}
				],
				"name": "nextUp",
				"comment": " ditto\n",
				"endline": 5414
			},
			{
				"kind": "function",
				"line": 5417,
				"deco": "FNaNbNiNefZf",
				"endchar": 1,
				"char": 7,
				"parameters": [
					{
						"deco": "f",
						"name": "x"
					}
				],
				"name": "nextUp",
				"comment": " ditto\n",
				"endline": 5444
			},
			{
				"kind": "function",
				"line": 5461,
				"deco": "FNaNbNiNfeZe",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "e",
						"name": "x"
					}
				],
				"name": "nextDown",
				"comment": " Calculate the next smallest floating point value before x.\n\n Return the greatest number less than x that is representable as a real;\n thus, it gives the previous point on the IEEE number line.\n\n  $(TABLE_SV\n    $(SVH x,            nextDown(x)   )\n    $(SV  $(INFIN),     real.max  )\n    $(SV  $(PLUSMN)0.0, -real.min_normal*real.epsilon )\n    $(SV  -real.max,    -$(INFIN) )\n    $(SV  -$(INFIN),    -$(INFIN) )\n    $(SV  $(NAN),       $(NAN)    )\n )\nExample:\n\n---\nassert( nextDown(1.0 + real.epsilon) == 1.0);\n\n---\n",
				"endline": 5464
			},
			{
				"kind": "function",
				"line": 5467,
				"deco": "FNaNbNiNfdZd",
				"endchar": 1,
				"char": 8,
				"parameters": [
					{
						"deco": "d",
						"name": "x"
					}
				],
				"name": "nextDown",
				"comment": " ditto\n",
				"endline": 5470
			},
			{
				"kind": "function",
				"line": 5473,
				"deco": "FNaNbNiNffZf",
				"endchar": 1,
				"char": 7,
				"parameters": [
					{
						"deco": "f",
						"name": "x"
					}
				],
				"name": "nextDown",
				"comment": " ditto\n",
				"endline": 5476
			},
			{
				"kind": "template",
				"line": 5567,
				"members": [
					{
						"kind": "function",
						"line": 5567,
						"endchar": 1,
						"char": 3,
						"type": "pure nothrow @nogc @safe T(const T x, const T y)",
						"parameters": [
							{
								"storageClass": [
									"const"
								],
								"type": "T",
								"name": "x"
							},
							{
								"storageClass": [
									"const"
								],
								"type": "T",
								"name": "y"
							}
						],
						"name": "nextafter",
						"endline": 5571
					}
				],
				"char": 3,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": " Calculates the next representable value after x in the direction of y.\n\n If y > x, the result will be the next largest floating-point value;\n if y < x, the result will be the next smallest value.\n If x == y, the result is y.\n\n Remarks:\n This function is not generally very useful; it's almost always better to use\n the faster functions nextUp() or nextDown() instead.\n\n The FE_INEXACT and FE_OVERFLOW exceptions will be raised if x is finite and\n the function result is infinite. The FE_INEXACT and FE_UNDERFLOW\n exceptions will be raised if the function value is subnormal, and x is\n not equal to y.\nExample:\n\n---\nfloat a = 1;\nassert(is(typeof(nextafter(a, a)) == float));\nassert(nextafter(a, a.infinity) > a);\n\ndouble b = 2;\nassert(is(typeof(nextafter(b, b)) == double));\nassert(nextafter(b, b.infinity) > b);\n\nreal c = 3;\nassert(is(typeof(nextafter(c, c)) == real));\nassert(nextafter(c, c.infinity) > c);\n}\n\n//real nexttoward(real x, real y) { return core.stdc.math.nexttowardl(x, y); }\n\n/*******************************************\n* Returns the positive difference between x and y.\n* Returns:\n*      $(TABLE_SV\n*      $(TR $(TH x, y)       $(TH fdim(x, y)))\n*      $(TR $(TD x $(GT) y)  $(TD x - y))\n*      $(TR $(TD x $(LT)= y) $(TD +0.0))\n*      )\n*/\nreal fdim(real x, real y) @safe pure nothrow @nogc { return (x > y) ? x - y : +0.0; \n\n---\n",
				"name": "nextafter"
			},
			{
				"kind": "function",
				"line": 5600,
				"deco": "FNaNbNiNfeeZe",
				"endchar": 85,
				"char": 6,
				"parameters": [
					{
						"deco": "e",
						"name": "x"
					},
					{
						"deco": "e",
						"name": "y"
					}
				],
				"name": "fdim",
				"comment": " Returns the positive difference between x and y.\n Returns:\n      $(TABLE_SV\n      $(TR $(TH x, y)       $(TH fdim(x, y)))\n      $(TR $(TD x $(GT) y)  $(TD x - y))\n      $(TR $(TD x $(LT)= y) $(TD +0.0))\n      )\n",
				"endline": 5600
			},
			{
				"kind": "function",
				"line": 5605,
				"deco": "FNaNbNiNfeeZe",
				"endchar": 76,
				"char": 6,
				"parameters": [
					{
						"deco": "e",
						"name": "x"
					},
					{
						"deco": "e",
						"name": "y"
					}
				],
				"name": "fmax",
				"comment": " Returns the larger of x and y.\n",
				"endline": 5605
			},
			{
				"kind": "function",
				"line": 5610,
				"deco": "FNaNbNiNfeeZe",
				"endchar": 76,
				"char": 6,
				"parameters": [
					{
						"deco": "e",
						"name": "x"
					},
					{
						"deco": "e",
						"name": "y"
					}
				],
				"name": "fmin",
				"comment": " Returns the smaller of x and y.\n",
				"endline": 5610
			},
			{
				"kind": "function",
				"line": 5618,
				"deco": "FNaNbNiNfeeeZe",
				"endchar": 81,
				"char": 6,
				"parameters": [
					{
						"deco": "e",
						"name": "x"
					},
					{
						"deco": "e",
						"name": "y"
					},
					{
						"deco": "e",
						"name": "z"
					}
				],
				"name": "fma",
				"comment": " Returns (x * y) + z, rounding only once according to the\n current rounding mode.\n\n BUGS: Not currently implemented - rounds twice.\n",
				"endline": 5618
			},
			{
				"kind": "template",
				"line": 5623,
				"constraint": "isFloatingPoint!F && isIntegral!G",
				"members": [
					{
						"kind": "function",
						"line": 5623,
						"endchar": 1,
						"char": 10,
						"type": "pure nothrow @nogc @trusted Unqual!F(F x, G n)",
						"parameters": [
							{
								"type": "F",
								"name": "x"
							},
							{
								"type": "G",
								"name": "n"
							}
						],
						"name": "pow",
						"endline": 5668
					}
				],
				"char": 10,
				"parameters": [
					{
						"kind": "type",
						"name": "F"
					},
					{
						"kind": "type",
						"name": "G"
					}
				],
				"comment": " Compute the value of x $(SUPERSCRIPT n), where n is an integer\n",
				"name": "pow"
			},
			{
				"kind": "template",
				"line": 5725,
				"constraint": "isIntegral!F && isIntegral!G",
				"members": [
					{
						"kind": "function",
						"line": 5725,
						"endchar": 1,
						"char": 43,
						"type": "pure nothrow @nogc @trusted typeof(Unqual!F.init * Unqual!G.init)(F x, G n)",
						"parameters": [
							{
								"type": "F",
								"name": "x"
							},
							{
								"type": "G",
								"name": "n"
							}
						],
						"name": "pow",
						"endline": 5760
					}
				],
				"char": 43,
				"parameters": [
					{
						"kind": "type",
						"name": "F"
					},
					{
						"kind": "type",
						"name": "G"
					}
				],
				"comment": " Compute the value of an integer x, raised to the power of a positive\n integer n.\n\n  If both x and n are 0, the result is 1.\n  If n is negative, an integer divide error will occur at runtime,\n regardless of the value of x.\nExample:\n\n---\nimmutable int one = 1;\nimmutable byte two = 2;\nimmutable ubyte three = 3;\nimmutable short four = 4;\nimmutable long ten = 10;\n\nassert(pow(two, three) == 8);\nassert(pow(two, ten) == 1024);\nassert(pow(one, ten) == 1);\nassert(pow(ten, four) == 10_000);\nassert(pow(four, 10) == 1_048_576);\nassert(pow(three, four) == 81);\n\n\n---\n",
				"name": "pow"
			},
			{
				"kind": "template",
				"line": 5781,
				"constraint": "isIntegral!I && isFloatingPoint!F",
				"members": [
					{
						"kind": "function",
						"line": 5781,
						"endchar": 1,
						"char": 6,
						"type": "pure nothrow @nogc @trusted real(I x, F y)",
						"parameters": [
							{
								"type": "I",
								"name": "x"
							},
							{
								"type": "F",
								"name": "y"
							}
						],
						"name": "pow",
						"endline": 5785
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "I"
					},
					{
						"kind": "type",
						"name": "F"
					}
				],
				"comment": "Computes integer to floating point powers.\n",
				"name": "pow"
			},
			{
				"kind": "template",
				"line": 5829,
				"constraint": "isFloatingPoint!F && isFloatingPoint!G",
				"members": [
					{
						"kind": "function",
						"line": 5829,
						"endchar": 1,
						"char": 25,
						"type": "pure nothrow @nogc @trusted Unqual!(Largest!(F, G))(F x, G y)",
						"parameters": [
							{
								"type": "F",
								"name": "x"
							},
							{
								"type": "G",
								"name": "y"
							}
						],
						"name": "pow",
						"endline": 6010
					}
				],
				"char": 25,
				"parameters": [
					{
						"kind": "type",
						"name": "F"
					},
					{
						"kind": "type",
						"name": "G"
					}
				],
				"comment": " Calculates x$(SUPERSCRIPT y).\n\n $(TABLE_SV\n $(TR $(TH x) $(TH y) $(TH pow(x, y))\n      $(TH div 0) $(TH invalid?))\n $(TR $(TD anything)      $(TD $(PLUSMN)0.0)                $(TD 1.0)\n      $(TD no)        $(TD no) )\n $(TR $(TD |x| $(GT) 1)    $(TD +$(INFIN))                  $(TD +$(INFIN))\n      $(TD no)        $(TD no) )\n $(TR $(TD |x| $(LT) 1)    $(TD +$(INFIN))                  $(TD +0.0)\n      $(TD no)        $(TD no) )\n $(TR $(TD |x| $(GT) 1)    $(TD -$(INFIN))                  $(TD +0.0)\n      $(TD no)        $(TD no) )\n $(TR $(TD |x| $(LT) 1)    $(TD -$(INFIN))                  $(TD +$(INFIN))\n      $(TD no)        $(TD no) )\n $(TR $(TD +$(INFIN))      $(TD $(GT) 0.0)                  $(TD +$(INFIN))\n      $(TD no)        $(TD no) )\n $(TR $(TD +$(INFIN))      $(TD $(LT) 0.0)                  $(TD +0.0)\n      $(TD no)        $(TD no) )\n $(TR $(TD -$(INFIN))      $(TD odd integer $(GT) 0.0)      $(TD -$(INFIN))\n      $(TD no)        $(TD no) )\n $(TR $(TD -$(INFIN))      $(TD $(GT) 0.0, not odd integer) $(TD +$(INFIN))\n      $(TD no)        $(TD no))\n $(TR $(TD -$(INFIN))      $(TD odd integer $(LT) 0.0)      $(TD -0.0)\n      $(TD no)        $(TD no) )\n $(TR $(TD -$(INFIN))      $(TD $(LT) 0.0, not odd integer) $(TD +0.0)\n      $(TD no)        $(TD no) )\n $(TR $(TD $(PLUSMN)1.0)   $(TD $(PLUSMN)$(INFIN))          $(TD $(NAN))\n      $(TD no)        $(TD yes) )\n $(TR $(TD $(LT) 0.0)      $(TD finite, nonintegral)        $(TD $(NAN))\n      $(TD no)        $(TD yes))\n $(TR $(TD $(PLUSMN)0.0)   $(TD odd integer $(LT) 0.0)      $(TD $(PLUSMNINF))\n      $(TD yes)       $(TD no) )\n $(TR $(TD $(PLUSMN)0.0)   $(TD $(LT) 0.0, not odd integer) $(TD +$(INFIN))\n      $(TD yes)       $(TD no))\n $(TR $(TD $(PLUSMN)0.0)   $(TD odd integer $(GT) 0.0)      $(TD $(PLUSMN)0.0)\n      $(TD no)        $(TD no) )\n $(TR $(TD $(PLUSMN)0.0)   $(TD $(GT) 0.0, not odd integer) $(TD +0.0)\n      $(TD no)        $(TD no) )\n )\n",
				"name": "pow"
			},
			{
				"kind": "template",
				"line": 6085,
				"constraint": "isFloatingPoint!X",
				"members": [
					{
						"kind": "function",
						"line": 6085,
						"endchar": 1,
						"char": 5,
						"type": "pure nothrow @nogc @trusted int(const X x, const X y)",
						"parameters": [
							{
								"storageClass": [
									"const"
								],
								"type": "X",
								"name": "x"
							},
							{
								"storageClass": [
									"const"
								],
								"type": "X",
								"name": "y"
							}
						],
						"name": "feqrel",
						"endline": 6179
					}
				],
				"char": 5,
				"parameters": [
					{
						"kind": "type",
						"name": "X"
					}
				],
				"comment": " To what precision is x equal to y?\n\n Returns: the number of mantissa bits which are equal in x and y.\n eg, 0x1.F8p+60 and 0x1.F1p+60 are equal to 5 bits of precision.\n\n      $(TABLE_SV\n      $(TR $(TH x)      $(TH y)          $(TH feqrel(x, y)))\n      $(TR $(TD x)      $(TD x)          $(TD real.mant_dig))\n      $(TR $(TD x)      $(TD $(GT)= 2*x) $(TD 0))\n      $(TR $(TD x)      $(TD $(LT)= x/2) $(TD 0))\n      $(TR $(TD $(NAN)) $(TD any)        $(TD 0))\n      $(TR $(TD any)    $(TD $(NAN))     $(TD 0))\n      )\n",
				"name": "feqrel"
			},
			{
				"kind": "template",
				"line": 6399,
				"constraint": "isFloatingPoint!T1 && isFloatingPoint!T2",
				"members": [
					{
						"kind": "function",
						"line": 6399,
						"endchar": 1,
						"char": 30,
						"type": "pure nothrow @nogc @trusted Unqual!(CommonType!(T1, T2))(T1 x, in T2[] A)",
						"parameters": [
							{
								"type": "T1",
								"name": "x"
							},
							{
								"storageClass": [
									"in"
								],
								"type": "T2[]",
								"name": "A"
							}
						],
						"name": "poly",
						"endline": 6415
					}
				],
				"char": 30,
				"parameters": [
					{
						"kind": "type",
						"name": "T1"
					},
					{
						"kind": "type",
						"name": "T2"
					}
				],
				"comment": " Evaluate polynomial A(x) = $(SUB a, 0) + $(SUB a, 1)x + $(SUB a, 2)$(POWER x,2)\n                          + $(SUB a,3)$(POWER x,3); ...\n\n Uses Horner's rule A(x) = $(SUB a, 0) + x($(SUB a, 1) + x($(SUB a, 2)\n                         + x($(SUB a, 3) + ...)))\n Params:\n      x =     the value to evaluate.\n      A =     array of coefficients $(SUB a, 0), $(SUB a, 1), etc.\nExample:\n\n---\ndouble x = 3.1;\nstatic real[] pp = [56.1, 32.7, 6];\n\nassert(poly(x, pp) == (56.1L + (32.7L + 6.0L * x) * x));\n\n---\n",
				"name": "poly"
			},
			{
				"kind": "template",
				"line": 6625,
				"members": [
					{
						"kind": "function",
						"line": 6625,
						"endchar": 1,
						"char": 6,
						"type": "bool(T lhs, U rhs, V maxRelDiff, V maxAbsDiff = 1e-05)",
						"parameters": [
							{
								"type": "T",
								"name": "lhs"
							},
							{
								"type": "U",
								"name": "rhs"
							},
							{
								"type": "V",
								"name": "maxRelDiff"
							},
							{
								"default": "1e-05",
								"type": "V",
								"name": "maxAbsDiff"
							}
						],
						"name": "approxEqual",
						"endline": 6676
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "type",
						"name": "U"
					},
					{
						"kind": "type",
						"name": "V"
					}
				],
				"comment": "   Computes whether $(D lhs) is approximately equal to $(D rhs)\n   admitting a maximum relative difference $(D maxRelDiff) and a\n   maximum absolute difference $(D maxAbsDiff).\n\n   If the two inputs are ranges, $(D approxEqual) returns true if and\n   only if the ranges have the same number of elements and if $(D\n   approxEqual) evaluates to $(D true) for each pair of elements.\n",
				"name": "approxEqual"
			},
			{
				"kind": "template",
				"line": 6681,
				"members": [
					{
						"kind": "function",
						"line": 6681,
						"endchar": 1,
						"char": 6,
						"type": "bool(T lhs, U rhs)",
						"parameters": [
							{
								"type": "T",
								"name": "lhs"
							},
							{
								"type": "U",
								"name": "rhs"
							}
						],
						"name": "approxEqual",
						"endline": 6684
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "type",
						"name": "U"
					}
				],
				"comment": "   Returns $(D approxEqual(lhs, rhs, 1e-2, 1e-5)).\nExample:\n\n---\nassert(approxEqual(1.0, 1.0099));\nassert(!approxEqual(1.0, 1.011));\nfloat[] arr1 = [ 1.0, 2.0, 3.0 ];\ndouble[] arr2 = [ 1.001, 1.999, 3 ];\nassert(approxEqual(arr1, arr2));\n\nreal num = real.infinity;\nassert(num == real.infinity);  // Passes.\nassert(approxEqual(num, real.infinity));  // Fails.\nnum = -real.infinity;\nassert(num == -real.infinity);  // Passes.\nassert(approxEqual(num, -real.infinity));  // Fails.\n\n---\n",
				"name": "approxEqual"
			}
		],
		"name": "std.math",
		"comment": " Contains the elementary mathematical functions (powers, roots,\n and trigonometric functions), and low-level floating-point operations.\n Mathematical special functions are available in $(D std.mathspecial).\n\n$(SCRIPT inhibitQuickIndex = 1;)\n\n$(DIVC quickindex,\n$(BOOKTABLE ,\n$(TR $(TH Category) $(TH Members) )\n$(TR $(TDNW Constants) $(TD\n    $(MYREF E) $(MYREF PI) $(MYREF PI_2) $(MYREF PI_4) $(MYREF M_1_PI)\n    $(MYREF M_2_PI) $(MYREF M_2_SQRTPI) $(MYREF LN10) $(MYREF LN2)\n    $(MYREF LOG2) $(MYREF LOG2E) $(MYREF LOG2T) $(MYREF LOG10E)\n    $(MYREF SQRT2) $(MYREF SQRT1_2)\n))\n$(TR $(TDNW Classics) $(TD\n $(MYREF abs) $(MYREF fabs) $(MYREF sqrt) $(MYREF cbrt) $(MYREF hypot) $(MYREF poly)\n))\n$(TR $(TDNW Trigonometry) $(TD\n    $(MYREF sin) $(MYREF cos) $(MYREF tan) $(MYREF asin) $(MYREF acos)\n    $(MYREF atan) $(MYREF atan2) $(MYREF sinh) $(MYREF cosh) $(MYREF tanh)\n    $(MYREF asinh) $(MYREF acosh) $(MYREF atanh) $(MYREF expi)\n))\n$(TR $(TDNW Rounding) $(TD\n    $(MYREF ceil) $(MYREF floor) $(MYREF round) $(MYREF lround)\n    $(MYREF trunc) $(MYREF rint) $(MYREF lrint) $(MYREF nearbyint)\n    $(MYREF rndtol)\n))\n$(TR $(TDNW Exponentiation & Logarithms) $(TD\n    $(MYREF pow) $(MYREF exp) $(MYREF exp2) $(MYREF expm1) $(MYREF ldexp)\n    $(MYREF frexp) $(MYREF log) $(MYREF log2) $(MYREF log10) $(MYREF logb)\n    $(MYREF ilogb) $(MYREF log1p) $(MYREF scalbn)\n))\n$(TR $(TDNW Modulus) $(TD\n    $(MYREF fmod) $(MYREF modf) $(MYREF remainder)\n))\n$(TR $(TDNW Floating-point operations) $(TD\n    $(MYREF approxEqual) $(MYREF feqrel) $(MYREF fdim) $(MYREF fmax)\n    $(MYREF fmin) $(MYREF fma) $(MYREF nextDown) $(MYREF nextUp)\n    $(MYREF nextafter) $(MYREF NaN) $(MYREF getNaNPayload)\n))\n$(TR $(TDNW Introspection) $(TD\n    $(MYREF isFinite) $(MYREF isIdentical) $(MYREF isInfinity) $(MYREF isNaN)\n    $(MYREF isNormal) $(MYREF isSubnormal) $(MYREF signbit) $(MYREF sgn)\n    $(MYREF copysign)\n))\n$(TR $(TDNW Complex Numbers) $(TD\n  $(MYREF abs) $(MYREF conj) $(MYREF sin) $(MYREF cos) $(MYREF expi)\n))\n$(TR $(TDNW Hardware Control) $(TD\n    $(MYREF IeeeFlags) $(MYREF FloatingPointControl)\n))\n)\n)\n\n The functionality closely follows the IEEE754-2008 standard for\n floating-point arithmetic, including the use of camelCase names rather\n than C99-style lower case names. All of these functions behave correctly\n when presented with an infinity or NaN.\n\n The following IEEE 'real' formats are currently supported:\n $(UL\n $(LI 64 bit Big-endian  'double' (eg PowerPC))\n $(LI 128 bit Big-endian 'quadruple' (eg SPARC))\n $(LI 64 bit Little-endian 'double' (eg x86-SSE2))\n $(LI 80 bit Little-endian, with implied bit 'real80' (eg x87, Itanium))\n $(LI 128 bit Little-endian 'quadruple' (not implemented on any known processor!))\n $(LI Non-IEEE 128 bit Big-endian 'doubledouble' (eg PowerPC) has partial support)\n )\n Unlike C, there is no global 'errno' variable. Consequently, almost all of\n these functions are pure nothrow.\n\n Status:\n The semantics and names of feqrel and approxEqual will be revised.\n\n Macros:\n      WIKI = Phobos/StdMath\n\n      TABLE_SV = <table border=1 cellpadding=4 cellspacing=0>\n              <caption>Special Values</caption>\n              $0</table>\n      SVH = $(TR $(TH $1) $(TH $2))\n      SV  = $(TR $(TD $1) $(TD $2))\n      TH3 = $(TR $(TH $1) $(TH $2) $(TH $3))\n      TD3 = $(TR $(TD $1) $(TD $2) $(TD $3))\n\n      NAN = $(RED NAN)\n      SUP = <span style=\"vertical-align:super;font-size:smaller\">$0</span>\n      GAMMA = &#915;\n      THETA = &theta;\n      INTEGRAL = &#8747;\n      INTEGRATE = $(BIG &#8747;<sub>$(SMALL $1)</sub><sup>$2</sup>)\n      POWER = $1<sup>$2</sup>\n      SUB = $1<sub>$2</sub>\n      BIGSUM = $(BIG &Sigma; <sup>$2</sup><sub>$(SMALL $1)</sub>)\n      CHOOSE = $(BIG &#40;) <sup>$(SMALL $1)</sup><sub>$(SMALL $2)</sub> $(BIG &#41;)\n      PLUSMN = &plusmn;\n      INFIN = &infin;\n      PLUSMNINF = &plusmn;&infin;\n      PI = &pi;\n      LT = &lt;\n      GT = &gt;\n      SQRT = &radic;\n      HALF = &frac12;\n\n Copyright: Copyright Digital Mars 2000 - 2011.\n            D implementations of tan, atan, atan2, exp, expm1, exp2, log, log10, log1p,\n            log2, floor, ceil and lrint functions are based on the CEPHES math library,\n            which is Copyright (C) 2001 Stephen L. Moshier <steve@moshier.net>\n            and are incorporated herein by permission of the author.  The author\n            reserves the right to distribute this material elsewhere under different\n            copying permissions.  These modifications are distributed here under\n            the following terms:\n License:   $(WEB www.boost.org/LICENSE_1_0.txt, Boost License 1.0).\n Authors:   $(WEB digitalmars.com, Walter Bright), Don Clugston,\n            Conversion of CEPHES math library to D by Iain Buclaw\n Source: $(PHOBOSSRC std/_math.d)\n"
	},
	{
		"kind": "module",
		"file": "../phobos/std/cstream.d",
		"members": [
			{
				"kind": "class",
				"line": 35,
				"base": "std.stream.Stream",
				"members": [
					{
						"kind": "constructor",
						"line": 46,
						"deco": "FPOS4core4stdc5stdio8_IO_FILEE3std6stream8FileModebZC3std7cstream5CFile",
						"endchar": 3,
						"char": 3,
						"parameters": [
							{
								"deco": "POS4core4stdc5stdio8_IO_FILE",
								"name": "cfile"
							},
							{
								"deco": "E3std6stream8FileMode",
								"name": "mode"
							},
							{
								"deco": "b",
								"default": "false",
								"name": "seekable"
							}
						],
						"name": "this",
						"comment": " Create the stream wrapper for the given C file.\n Params:\n   cfile = a valid C $(B FILE) pointer to wrap.\n   mode = a bitwise combination of $(B FileMode.In) for a readable file\n          and $(B FileMode.Out) for a writeable file.\n   seekable = indicates if the stream should be _seekable.\n",
						"originalType": "(FILE* cfile, FileMode mode, bool seekable = false)",
						"endline": 52
					},
					{
						"kind": "destructor",
						"line": 57,
						"deco": "FZv",
						"endchar": 22,
						"char": 3,
						"name": "~this",
						"comment": " Closes the stream.\n",
						"endline": 57
					},
					{
						"kind": "function",
						"line": 63,
						"deco": "FNdZPOS4core4stdc5stdio8_IO_FILE",
						"endchar": 42,
						"char": 19,
						"name": "file",
						"comment": " Property to get or set the underlying file for this stream.\n Setting the file marks the stream as open.\n",
						"originalType": "@property FILE*()",
						"endline": 63
					},
					{
						"kind": "function",
						"line": 68,
						"deco": "FNdPOS4core4stdc5stdio8_IO_FILEZv",
						"endchar": 3,
						"char": 18,
						"parameters": [
							{
								"deco": "POS4core4stdc5stdio8_IO_FILE",
								"name": "cfile"
							}
						],
						"name": "file",
						"comment": " Ditto\n",
						"originalType": "@property void(FILE* cfile)",
						"endline": 71
					},
					{
						"kind": "function",
						"line": 77,
						"storageClass": [
							"override"
						],
						"deco": "FZv",
						"endchar": 42,
						"char": 17,
						"name": "flush",
						"comment": " Overrides of the $(B Stream) methods to call the underlying $(B FILE*)\n C functions.\n",
						"endline": 77,
						"overrides": [
							"std.stream.Stream.flush"
						]
					},
					{
						"kind": "function",
						"line": 82,
						"storageClass": [
							"override"
						],
						"deco": "FZv",
						"endchar": 3,
						"char": 17,
						"name": "close",
						"comment": " Ditto\n",
						"endline": 86,
						"overrides": [
							"std.stream.Stream.close"
						]
					},
					{
						"kind": "function",
						"line": 91,
						"storageClass": [
							"override"
						],
						"deco": "FZb",
						"endchar": 3,
						"char": 17,
						"name": "eof",
						"comment": " Ditto\n",
						"endline": 93,
						"overrides": [
							"std.stream.Stream.eof"
						]
					},
					{
						"kind": "function",
						"line": 98,
						"storageClass": [
							"override"
						],
						"deco": "FZa",
						"endchar": 3,
						"char": 17,
						"name": "getc",
						"comment": " Ditto\n",
						"endline": 100,
						"overrides": [
							"std.stream.Stream.getc"
						]
					},
					{
						"kind": "function",
						"line": 105,
						"storageClass": [
							"override"
						],
						"deco": "FaZa",
						"endchar": 3,
						"char": 17,
						"parameters": [
							{
								"deco": "a",
								"name": "c"
							}
						],
						"name": "ungetc",
						"comment": " Ditto\n",
						"endline": 107,
						"overrides": [
							"std.stream.Stream.ungetc"
						]
					},
					{
						"kind": "function",
						"line": 112,
						"storageClass": [
							"override"
						],
						"deco": "FPvmZm",
						"endchar": 3,
						"char": 19,
						"parameters": [
							{
								"deco": "Pv",
								"name": "buffer"
							},
							{
								"deco": "m",
								"name": "size"
							}
						],
						"name": "readBlock",
						"comment": " Ditto\n",
						"originalType": "size_t(void* buffer, size_t size)",
						"endline": 116,
						"overrides": [
							"std.stream.Stream.readBlock"
						]
					},
					{
						"kind": "function",
						"line": 121,
						"storageClass": [
							"override"
						],
						"deco": "FxPvmZm",
						"endchar": 3,
						"char": 19,
						"parameters": [
							{
								"deco": "xPv",
								"name": "buffer"
							},
							{
								"deco": "m",
								"name": "size"
							}
						],
						"name": "writeBlock",
						"comment": " Ditto\n",
						"originalType": "size_t(const void* buffer, size_t size)",
						"endline": 123,
						"overrides": [
							"std.stream.Stream.writeBlock"
						]
					},
					{
						"kind": "function",
						"line": 128,
						"storageClass": [
							"override"
						],
						"deco": "FlE3std6stream7SeekPosZm",
						"endchar": 3,
						"char": 18,
						"parameters": [
							{
								"deco": "l",
								"name": "offset"
							},
							{
								"deco": "E3std6stream7SeekPos",
								"name": "rel"
							}
						],
						"name": "seek",
						"comment": " Ditto\n",
						"endline": 133,
						"overrides": [
							"std.stream.Stream.seek"
						]
					},
					{
						"kind": "function",
						"line": 138,
						"storageClass": [
							"override"
						],
						"deco": "FAxaZv",
						"endchar": 3,
						"char": 17,
						"parameters": [
							{
								"deco": "Axa",
								"name": "s"
							}
						],
						"name": "writeLine",
						"comment": " Ditto\n",
						"endline": 141,
						"overrides": [
							"std.stream.Stream.writeLine"
						]
					},
					{
						"kind": "function",
						"line": 146,
						"storageClass": [
							"override"
						],
						"deco": "FAxuZv",
						"endchar": 3,
						"char": 17,
						"parameters": [
							{
								"deco": "Axu",
								"name": "s"
							}
						],
						"name": "writeLineW",
						"comment": " Ditto\n",
						"endline": 149,
						"overrides": [
							"std.stream.Stream.writeLineW"
						]
					}
				],
				"char": 1,
				"name": "CFile",
				"comment": " A Stream wrapper for a C file of type FILE*.\n"
			},
			{
				"kind": "variable",
				"line": 232,
				"storageClass": [
					"__gshared"
				],
				"deco": "C3std7cstream5CFile",
				"char": 17,
				"name": "din",
				"comment": " CFile wrapper of core.stdc.stdio.stdin (not seekable).\n",
				"originalType": "CFile"
			},
			{
				"kind": "variable",
				"line": 237,
				"storageClass": [
					"__gshared"
				],
				"deco": "C3std7cstream5CFile",
				"char": 17,
				"name": "dout",
				"comment": " CFile wrapper of core.stdc.stdio.stdout (not seekable).\n",
				"originalType": "CFile"
			},
			{
				"kind": "variable",
				"line": 242,
				"storageClass": [
					"__gshared"
				],
				"deco": "C3std7cstream5CFile",
				"char": 17,
				"name": "derr",
				"comment": " CFile wrapper of core.stdc.stdio.stderr (not seekable).\n",
				"originalType": "CFile"
			}
		],
		"name": "std.cstream",
		"comment": " $(RED Warning: This module is considered out-dated and not up to Phobos'\n       current standards. It will remain until we have a suitable replacement,\n       but be aware that it will not remain long term.)\n\n The std.cstream module bridges core.stdc.stdio (or std.stdio) and std.stream.\n Both core.stdc.stdio and std.stream are publicly imported by std.cstream.\n\n Macros:\n      WIKI=Phobos/StdCstream\n\n Copyright: Copyright Ben Hinkle 2007 - 2009.\n License:   $(WEB www.boost.org/LICENSE_1_0.txt, Boost License 1.0).\n Authors:   Ben Hinkle\n Source:    $(PHOBOSSRC std/_cstream.d)\n"
	},
	{
		"kind": "module",
		"file": "../phobos/std/socketstream.d",
		"members": [
			{
				"kind": "class",
				"line": 49,
				"base": "std.stream.Stream",
				"members": [
					{
						"kind": "constructor",
						"line": 59,
						"deco": "FC3std6socket6SocketE3std6stream8FileModeZC3std12socketstream12SocketStream",
						"endchar": 9,
						"char": 9,
						"parameters": [
							{
								"deco": "C3std6socket6Socket",
								"name": "sock"
							},
							{
								"deco": "E3std6stream8FileMode",
								"name": "mode"
							}
						],
						"name": "this",
						"comment": " Constructs a SocketStream with the specified Socket and FileMode flags.\n",
						"originalType": "(Socket sock, FileMode mode)",
						"endline": 67
					},
					{
						"kind": "constructor",
						"line": 72,
						"deco": "FC3std6socket6SocketZC3std12socketstream12SocketStream",
						"endchar": 9,
						"char": 9,
						"parameters": [
							{
								"deco": "C3std6socket6Socket",
								"name": "sock"
							}
						],
						"name": "this",
						"comment": " Uses mode $(D FileMode.In | FileMode.Out).\n",
						"originalType": "(Socket sock)",
						"endline": 76
					},
					{
						"kind": "function",
						"line": 81,
						"deco": "FZC3std6socket6Socket",
						"endchar": 9,
						"char": 16,
						"name": "socket",
						"comment": " Property to get the $(D Socket) that is being streamed.\n",
						"endline": 84
					},
					{
						"kind": "function",
						"line": 89,
						"storageClass": [
							"override"
						],
						"deco": "FPvmZm",
						"endchar": 9,
						"char": 25,
						"parameters": [
							{
								"deco": "Pv",
								"name": "_buffer"
							},
							{
								"deco": "m",
								"name": "size"
							}
						],
						"name": "readBlock",
						"comment": " Attempts to read the entire block, waiting if necessary.\n",
						"originalType": "size_t(void* _buffer, size_t size)",
						"endline": 102,
						"overrides": [
							"std.stream.Stream.readBlock"
						]
					},
					{
						"kind": "function",
						"line": 107,
						"storageClass": [
							"override"
						],
						"deco": "FxPvmZm",
						"endchar": 9,
						"char": 25,
						"parameters": [
							{
								"deco": "xPv",
								"name": "_buffer"
							},
							{
								"deco": "m",
								"name": "size"
							}
						],
						"name": "writeBlock",
						"comment": " Attempts to write the entire block, waiting if necessary.\n",
						"originalType": "size_t(const void* _buffer, size_t size)",
						"endline": 120,
						"overrides": [
							"std.stream.Stream.writeBlock"
						]
					},
					{
						"kind": "function",
						"line": 126,
						"storageClass": [
							"override",
							"@disable"
						],
						"deco": "FlE3std6stream7SeekPosZm",
						"endchar": 9,
						"char": 33,
						"parameters": [
							{
								"deco": "l",
								"name": "offset"
							},
							{
								"deco": "E3std6stream7SeekPos",
								"name": "whence"
							}
						],
						"name": "seek",
						"comment": " Socket streams do not support seeking. This disabled method throws\n a $(D SeekException).\n",
						"endline": 129,
						"overrides": [
							"std.stream.Stream.seek"
						]
					},
					{
						"kind": "function",
						"line": 135,
						"storageClass": [
							"override"
						],
						"deco": "FZAya",
						"endchar": 9,
						"char": 25,
						"name": "toString",
						"comment": " Does not return the entire stream because that would\n require the remote connection to be closed.\n",
						"endline": 138,
						"overrides": [
							"std.stream.Stream.toString"
						]
					},
					{
						"kind": "function",
						"line": 143,
						"storageClass": [
							"override"
						],
						"deco": "FZv",
						"endchar": 9,
						"char": 23,
						"name": "close",
						"comment": " Close the $(D Socket).\n",
						"endline": 147,
						"overrides": [
							"std.stream.Stream.close"
						]
					}
				],
				"char": 1,
				"name": "SocketStream",
				"comment": " $(D SocketStream) is a stream for a blocking,\n connected $(D Socket).\n"
			}
		],
		"name": "std.socketstream",
		"comment": " $(RED Warning: This module is considered out-dated and not up to Phobos'\n       current standards. It will remain until we have a suitable replacement,\n       but be aware that it will not remain long term.)\n\n $(D SocketStream) is a stream for a blocking,\n connected $(D Socket).\n\n Example:\n      See $(SAMPLESRC htmlget.d)\n Authors: Christopher E. Miller\n References:\n      $(LINK2 std_stream.html, std.stream)\n Source:    $(PHOBOSSRC std/_socketstream.d)\n Macros: WIKI=Phobos/StdSocketstream\n"
	},
	{
		"kind": "module",
		"file": "../phobos/std/net/curl.d",
		"members": [
			{
				"kind": "struct",
				"line": 258,
				"members": [],
				"char": 1,
				"name": "AutoProtocol",
				"comment": "Macros:\n\nCALLBACK_PARAMS = $(TABLE ,\n    $(DDOC_PARAM_ROW\n        $(DDOC_PARAM_ID $(DDOC_PARAM dlTotal))\n        $(DDOC_PARAM_DESC total bytes to download)\n        )\n    $(DDOC_PARAM_ROW\n        $(DDOC_PARAM_ID $(DDOC_PARAM dlNow))\n        $(DDOC_PARAM_DESC currently downloaded bytes)\n        )\n    $(DDOC_PARAM_ROW\n        $(DDOC_PARAM_ID $(DDOC_PARAM ulTotal))\n        $(DDOC_PARAM_DESC total bytes to upload)\n        )\n    $(DDOC_PARAM_ROW\n        $(DDOC_PARAM_ID $(DDOC_PARAM ulNow))\n        $(DDOC_PARAM_DESC currently uploaded bytes)\n        )\n)\n\n Connection type used when the URL should be used to auto detect the protocol.\n\n This struct is used as placeholder for the connection parameter when calling\n the high level API and the connection type (HTTP/FTP) should be guessed by\n inspecting the URL parameter.\n\n The rules for guessing the protocol are:\n 1, if URL starts with ftp://, ftps:// or ftp. then FTP connection is assumed.\n 2, HTTP connection otherwise.\n\n Example:\n ---\n import std.net.curl;\n // Two requests below will do the same.\n string content;\n\n // Explicit connection provided\n content = get!HTTP(\"dlang.org\");\n\n // Guess connection type by looking at the URL\n content = get!AutoProtocol(\"ftp://foo.com/file\");\n // and since AutoProtocol is default this is the same as\n connect = get(\"ftp://foo.com/file\");\n // and will end up detecting FTP from the url and be the same as\n connect = get!FTP(\"ftp://foo.com/file\");\n ---\n"
			},
			{
				"kind": "template",
				"line": 288,
				"constraint": "isCurlConn!Conn",
				"members": [
					{
						"kind": "function",
						"line": 288,
						"endchar": 1,
						"char": 6,
						"type": "void(const(char)[] url, string saveToPath, Conn conn = Conn())",
						"parameters": [
							{
								"type": "const(char)[]",
								"name": "url"
							},
							{
								"type": "string",
								"name": "saveToPath"
							},
							{
								"default": "Conn()",
								"type": "Conn",
								"name": "conn"
							}
						],
						"name": "download",
						"endline": 306
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"default": "AutoProtocol",
						"name": "Conn"
					}
				],
				"comment": " HTTP/FTP download to local file system.\n\n Params:\n url = resource to download\n saveToPath = path to store the downloaded content on local disk\n conn = connection to use e.g. FTP or HTTP. The default AutoProtocol will\n        guess connection type and create a new instance for this call only.\n\n Example:\n ----\n import std.net.curl;\n download(\"ftp.digitalmars.com/sieve.ds\", \"/tmp/downloaded-ftp-file\");\n download(\"d-lang.appspot.com/testUrl2\", \"/tmp/downloaded-http-file\");\n ----\n",
				"name": "download"
			},
			{
				"kind": "template",
				"line": 330,
				"constraint": "isCurlConn!Conn",
				"members": [
					{
						"kind": "function",
						"line": 330,
						"endchar": 1,
						"char": 6,
						"type": "void(string loadFromPath, const(char)[] url, Conn conn = Conn())",
						"parameters": [
							{
								"type": "string",
								"name": "loadFromPath"
							},
							{
								"type": "const(char)[]",
								"name": "url"
							},
							{
								"default": "Conn()",
								"type": "Conn",
								"name": "conn"
							}
						],
						"name": "upload",
						"endline": 362
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"default": "AutoProtocol",
						"name": "Conn"
					}
				],
				"comment": " Upload file from local files system using the HTTP or FTP protocol.\n\n Params:\n loadFromPath = path load data from local disk.\n url = resource to upload to\n conn = connection to use e.g. FTP or HTTP. The default AutoProtocol will\n        guess connection type and create a new instance for this call only.\n\n Example:\n ----\n import std.net.curl;\n upload(\"/tmp/downloaded-ftp-file\", \"ftp.digitalmars.com/sieve.ds\");\n upload(\"/tmp/downloaded-http-file\", \"d-lang.appspot.com/testUrl2\");\n ----\n",
				"name": "upload"
			},
			{
				"kind": "template",
				"line": 399,
				"constraint": "isCurlConn!Conn && (is(T == char) || is(T == ubyte))",
				"members": [
					{
						"kind": "function",
						"line": 399,
						"endchar": 1,
						"char": 5,
						"type": "T[](const(char)[] url, Conn conn = Conn())",
						"parameters": [
							{
								"type": "const(char)[]",
								"name": "url"
							},
							{
								"default": "Conn()",
								"type": "Conn",
								"name": "conn"
							}
						],
						"name": "get",
						"endline": 419
					}
				],
				"char": 5,
				"parameters": [
					{
						"kind": "type",
						"default": "AutoProtocol",
						"name": "Conn"
					},
					{
						"kind": "type",
						"defaultDeco": "a",
						"name": "T"
					}
				],
				"comment": " HTTP/FTP get content.\n\n Params:\n url = resource to get\n conn = connection to use e.g. FTP or HTTP. The default AutoProtocol will\n        guess connection type and create a new instance for this call only.\n\n The template parameter $(D T) specifies the type to return. Possible values\n are $(D char) and $(D ubyte) to return $(D char[]) or $(D ubyte[]). If asking\n for $(D char), content will be converted from the connection character set\n (specified in HTTP response headers or FTP connection properties, both ISO-8859-1\n by default) to UTF-8.\n\n Example:\n ----\n import std.net.curl;\n string content = get(\"d-lang.appspot.com/testUrl2\");\n ----\n\n Returns:\n A T[] range containing the content of the resource pointed to by the URL.\n\n Throws:\n\n $(D CurlException) on error.\n\n See_Also: $(LREF HTTP.Method)\n",
				"name": "get"
			},
			{
				"kind": "template",
				"line": 463,
				"constraint": "is(T == char) || is(T == ubyte)",
				"members": [
					{
						"kind": "function",
						"line": 463,
						"endchar": 1,
						"char": 5,
						"type": "T[](const(char)[] url, const(PostUnit)[] postData, HTTP conn = HTTP())",
						"parameters": [
							{
								"type": "const(char)[]",
								"name": "url"
							},
							{
								"type": "const(PostUnit)[]",
								"name": "postData"
							},
							{
								"default": "HTTP()",
								"type": "HTTP",
								"name": "conn"
							}
						],
						"name": "post",
						"endline": 468
					}
				],
				"char": 5,
				"parameters": [
					{
						"kind": "type",
						"defaultDeco": "a",
						"name": "T"
					},
					{
						"kind": "type",
						"name": "PostUnit"
					}
				],
				"comment": " HTTP post content.\n\n Params:\n url = resource to post to\n postData = data to send as the body of the request. An array\n            of an arbitrary type is accepted and will be cast to ubyte[]\n            before sending it.\n conn = connection to use e.g. FTP or HTTP. The default AutoProtocol will\n        guess connection type and create a new instance for this call only.\n\n The template parameter $(D T) specifies the type to return. Possible values\n are $(D char) and $(D ubyte) to return $(D char[]) or $(D ubyte[]). If asking\n for $(D char), content will be converted from the connection character set\n (specified in HTTP response headers or FTP connection properties, both ISO-8859-1\n by default) to UTF-8.\n\n Example:\n ----\n import std.net.curl;\n string content = post(\"d-lang.appspot.com/testUrl2\", [1,2,3,4]);\n ----\n\n Returns:\n A T[] range containing the content of the resource pointed to by the URL.\n\n See_Also: $(LREF HTTP.Method)\n",
				"name": "post"
			},
			{
				"kind": "template",
				"line": 527,
				"constraint": "isCurlConn!Conn && (is(T == char) || is(T == ubyte))",
				"members": [
					{
						"kind": "function",
						"line": 527,
						"endchar": 1,
						"char": 5,
						"type": "T[](const(char)[] url, const(PutUnit)[] putData, Conn conn = Conn())",
						"parameters": [
							{
								"type": "const(char)[]",
								"name": "url"
							},
							{
								"type": "const(PutUnit)[]",
								"name": "putData"
							},
							{
								"default": "Conn()",
								"type": "Conn",
								"name": "conn"
							}
						],
						"name": "put",
						"endline": 547
					}
				],
				"char": 5,
				"parameters": [
					{
						"kind": "type",
						"default": "AutoProtocol",
						"name": "Conn"
					},
					{
						"kind": "type",
						"defaultDeco": "a",
						"name": "T"
					},
					{
						"kind": "type",
						"name": "PutUnit"
					}
				],
				"comment": " HTTP/FTP put content.\n\n Params:\n url = resource to put\n putData = data to send as the body of the request. An array\n           of an arbitrary type is accepted and will be cast to ubyte[]\n           before sending it.\n conn = connection to use e.g. FTP or HTTP. The default AutoProtocol will\n        guess connection type and create a new instance for this call only.\n\n The template parameter $(D T) specifies the type to return. Possible values\n are $(D char) and $(D ubyte) to return $(D char[]) or $(D ubyte[]). If asking\n for $(D char), content will be converted from the connection character set\n (specified in HTTP response headers or FTP connection properties, both ISO-8859-1\n by default) to UTF-8.\n\n Example:\n ----\n import std.net.curl;\n string content = put(\"d-lang.appspot.com/testUrl2\",\n                      \"Putting this data\");\n ----\n\n Returns:\n A T[] range containing the content of the resource pointed to by the URL.\n\n See_Also: $(LREF HTTP.Method)\n",
				"name": "put"
			},
			{
				"kind": "template",
				"line": 578,
				"constraint": "isCurlConn!Conn",
				"members": [
					{
						"kind": "function",
						"line": 578,
						"endchar": 1,
						"char": 6,
						"type": "void(const(char)[] url, Conn conn = Conn())",
						"parameters": [
							{
								"type": "const(char)[]",
								"name": "url"
							},
							{
								"default": "Conn()",
								"type": "Conn",
								"name": "conn"
							}
						],
						"name": "del",
						"endline": 607
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"default": "AutoProtocol",
						"name": "Conn"
					}
				],
				"comment": " HTTP/FTP delete content.\n\n Params:\n url = resource to delete\n conn = connection to use e.g. FTP or HTTP. The default AutoProtocol will\n        guess connection type and create a new instance for this call only.\n\n Example:\n ----\n import std.net.curl;\n del(\"d-lang.appspot.com/testUrl2\");\n ----\n\n See_Also: $(LREF HTTP.Method)\n",
				"name": "del"
			},
			{
				"kind": "template",
				"line": 644,
				"constraint": "is(T == char) || is(T == ubyte)",
				"members": [
					{
						"kind": "function",
						"line": 644,
						"endchar": 1,
						"char": 5,
						"type": "T[](const(char)[] url, const(OptionsUnit)[] optionsData = null, HTTP conn = HTTP())",
						"parameters": [
							{
								"type": "const(char)[]",
								"name": "url"
							},
							{
								"default": "null",
								"type": "const(OptionsUnit)[]",
								"name": "optionsData"
							},
							{
								"default": "HTTP()",
								"type": "HTTP",
								"name": "conn"
							}
						],
						"name": "options",
						"endline": 651
					}
				],
				"char": 5,
				"parameters": [
					{
						"kind": "type",
						"defaultDeco": "a",
						"name": "T"
					},
					{
						"kind": "type",
						"name": "OptionsUnit"
					}
				],
				"comment": " HTTP options request.\n\n Params:\n url = resource make a option call to\n optionsData = options data to send as the body of the request. An array\n               of an arbitrary type is accepted and will be cast to ubyte[]\n               before sending it.\n conn = connection to use e.g. FTP or HTTP. The default AutoProtocol will\n        guess connection type and create a new instance for this call only.\n\n The template parameter $(D T) specifies the type to return. Possible values\n are $(D char) and $(D ubyte) to return $(D char[]) or $(D ubyte[]).\n Currently the HTTP RFC does not specify any usage of the optionsData and\n for this reason the example below does not send optionsData to the server.\n\n Example:\n ----\n import std.net.curl;\n auto http = HTTP();\n options(\"d-lang.appspot.com/testUrl2\", null, http);\n writeln(\"Allow set to \" ~ http.responseHeaders[\"Allow\"]);\n ----\n\n Returns:\n A T[] range containing the options of the resource pointed to by the URL.\n\n See_Also: $(LREF HTTP.Method)\n",
				"name": "options"
			},
			{
				"kind": "template",
				"line": 691,
				"constraint": "is(T == char) || is(T == ubyte)",
				"members": [
					{
						"kind": "function",
						"line": 691,
						"endchar": 1,
						"char": 5,
						"type": "T[](const(char)[] url, HTTP conn = HTTP())",
						"parameters": [
							{
								"type": "const(char)[]",
								"name": "url"
							},
							{
								"default": "HTTP()",
								"type": "HTTP",
								"name": "conn"
							}
						],
						"name": "trace",
						"endline": 696
					}
				],
				"char": 5,
				"parameters": [
					{
						"kind": "type",
						"defaultDeco": "a",
						"name": "T"
					}
				],
				"comment": " HTTP trace request.\n\n Params:\n url = resource make a trace call to\n conn = connection to use e.g. FTP or HTTP. The default AutoProtocol will\n        guess connection type and create a new instance for this call only.\n\n The template parameter $(D T) specifies the type to return. Possible values\n are $(D char) and $(D ubyte) to return $(D char[]) or $(D ubyte[]).\n\n Example:\n ----\n import std.net.curl;\n trace(\"d-lang.appspot.com/testUrl1\");\n ----\n\n Returns:\n A T[] range containing the trace info of the resource pointed to by the URL.\n\n See_Also: $(LREF HTTP.Method)\n",
				"name": "trace"
			},
			{
				"kind": "template",
				"line": 728,
				"constraint": "is(T == char) || is(T == ubyte)",
				"members": [
					{
						"kind": "function",
						"line": 728,
						"endchar": 1,
						"char": 5,
						"type": "T[](const(char)[] url, HTTP conn = HTTP())",
						"parameters": [
							{
								"type": "const(char)[]",
								"name": "url"
							},
							{
								"default": "HTTP()",
								"type": "HTTP",
								"name": "conn"
							}
						],
						"name": "connect",
						"endline": 733
					}
				],
				"char": 5,
				"parameters": [
					{
						"kind": "type",
						"defaultDeco": "a",
						"name": "T"
					}
				],
				"comment": " HTTP connect request.\n\n Params:\n url = resource make a connect to\n conn = connection to use e.g. FTP or HTTP. The default AutoProtocol will\n        guess connection type and create a new instance for this call only.\n\n The template parameter $(D T) specifies the type to return. Possible values\n are $(D char) and $(D ubyte) to return $(D char[]) or $(D ubyte[]).\n\n Example:\n ----\n import std.net.curl;\n connect(\"d-lang.appspot.com/testUrl1\");\n ----\n\n Returns:\n A T[] range containing the connect info of the resource pointed to by the URL.\n\n See_Also: $(LREF HTTP.Method)\n",
				"name": "connect"
			},
			{
				"kind": "template",
				"line": 964,
				"constraint": "isCurlConn!Conn && isSomeChar!Char && isSomeChar!Terminator",
				"members": [
					{
						"kind": "function",
						"line": 964,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "(const(char)[] url, KeepTerminator keepTerminator = KeepTerminator.no, Terminator terminator = '\\x0a', Conn conn = Conn())",
						"parameters": [
							{
								"type": "const(char)[]",
								"name": "url"
							},
							{
								"default": "KeepTerminator.no",
								"type": "KeepTerminator",
								"name": "keepTerminator"
							},
							{
								"default": "'\\x0a'",
								"type": "Terminator",
								"name": "terminator"
							},
							{
								"default": "Conn()",
								"type": "Conn",
								"name": "conn"
							}
						],
						"name": "byLine",
						"endline": 1032
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"default": "AutoProtocol",
						"name": "Conn"
					},
					{
						"kind": "type",
						"defaultDeco": "a",
						"name": "Terminator"
					},
					{
						"kind": "type",
						"defaultDeco": "a",
						"name": "Char"
					}
				],
				"comment": " HTTP/FTP fetch content as a range of lines.\n\n A range of lines is returned when the request is complete. If the method or\n other request properties is to be customized then set the $(D conn) parameter\n with a HTTP/FTP instance that has these properties set.\n\n Example:\n ----\n import std.net.curl, std.stdio;\n foreach (line; byLine(\"dlang.org\"))\n     writeln(line);\n ----\n\n Params:\n url = The url to receive content from\n keepTerminator = KeepTerminator.yes signals that the line terminator should be\n                  returned as part of the lines in the range.\n terminator = The character that terminates a line\n conn = The connection to use e.g. HTTP or FTP.\n\n Returns:\n A range of Char[] with the content of the resource pointer to by the URL\n",
				"name": "byLine"
			},
			{
				"kind": "template",
				"line": 1069,
				"constraint": "isCurlConn!Conn",
				"members": [
					{
						"kind": "function",
						"line": 1069,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "(const(char)[] url, size_t chunkSize = 1024, Conn conn = Conn())",
						"parameters": [
							{
								"type": "const(char)[]",
								"name": "url"
							},
							{
								"default": "1024",
								"type": "size_t",
								"name": "chunkSize"
							},
							{
								"default": "Conn()",
								"type": "Conn",
								"name": "conn"
							}
						],
						"name": "byChunk",
						"endline": 1106
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"default": "AutoProtocol",
						"name": "Conn"
					}
				],
				"comment": " HTTP/FTP fetch content as a range of chunks.\n\n A range of chunks is returned when the request is complete. If the method or\n other request properties is to be customized then set the $(D conn) parameter\n with a HTTP/FTP instance that has these properties set.\n\n Example:\n ----\n import std.net.curl, std.stdio;\n foreach (chunk; byChunk(\"dlang.org\", 100))\n     writeln(chunk); // chunk is ubyte[100]\n ----\n\n Params:\n url = The url to receive content from\n chunkSize = The size of each chunk\n conn = The connection to use e.g. HTTP or FTP.\n\n Returns:\n A range of ubyte[chunkSize] with the content of the resource pointer to by the URL\n",
				"name": "byChunk"
			},
			{
				"kind": "template",
				"line": 1349,
				"constraint": "isCurlConn!Conn && isSomeChar!Char && isSomeChar!Terminator",
				"members": [
					{
						"kind": "function",
						"line": 1349,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "(const(char)[] url, const(PostUnit)[] postData, KeepTerminator keepTerminator = KeepTerminator.no, Terminator terminator = '\\x0a', size_t transmitBuffers = 10, Conn conn = Conn())",
						"parameters": [
							{
								"type": "const(char)[]",
								"name": "url"
							},
							{
								"type": "const(PostUnit)[]",
								"name": "postData"
							},
							{
								"default": "KeepTerminator.no",
								"type": "KeepTerminator",
								"name": "keepTerminator"
							},
							{
								"default": "'\\x0a'",
								"type": "Terminator",
								"name": "terminator"
							},
							{
								"default": "10",
								"type": "size_t",
								"name": "transmitBuffers"
							},
							{
								"default": "Conn()",
								"type": "Conn",
								"name": "conn"
							}
						],
						"name": "byLineAsync",
						"endline": 1379
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"default": "AutoProtocol",
						"name": "Conn"
					},
					{
						"kind": "type",
						"defaultDeco": "a",
						"name": "Terminator"
					},
					{
						"kind": "type",
						"defaultDeco": "a",
						"name": "Char"
					},
					{
						"kind": "type",
						"name": "PostUnit"
					}
				],
				"comment": " HTTP/FTP fetch content as a range of lines asynchronously.\n\n A range of lines is returned immediately and the request that fetches the\n lines is performed in another thread. If the method or other request\n properties is to be customized then set the $(D conn) parameter with a\n HTTP/FTP instance that has these properties set.\n\n If $(D postData) is non-_null the method will be set to $(D post) for HTTP\n requests.\n\n The background thread will buffer up to transmitBuffers number of lines\n before it stops receiving data from network. When the main thread reads the\n lines from the range it frees up buffers and allows for the background thread\n to receive more data from the network.\n\n If no data is available and the main thread accesses the range it will block\n until data becomes available. An exception to this is the $(D wait(Duration)) method on\n the $(LREF AsyncLineInputRange). This method will wait at maximum for the\n specified duration and return true if data is available.\n\n Example:\n ----\n import std.net.curl, std.stdio;\n // Get some pages in the background\n auto range1 = byLineAsync(\"www.google.com\");\n auto range2 = byLineAsync(\"www.wikipedia.org\");\n foreach (line; byLineAsync(\"dlang.org\"))\n     writeln(line);\n\n // Lines already fetched in the background and ready\n foreach (line; range1) writeln(line);\n foreach (line; range2) writeln(line);\n ----\n\n ----\n import std.net.curl, std.stdio;\n // Get a line in a background thread and wait in\n // main thread for 2 seconds for it to arrive.\n auto range3 = byLineAsync(\"dlang.com\");\n if (range.wait(dur!\"seconds\"(2)))\n     writeln(range.front);\n else\n     writeln(\"No line received after 2 seconds!\");\n ----\n\n Params:\n url = The url to receive content from\n postData = Data to HTTP Post\n keepTerminator = KeepTerminator.yes signals that the line terminator should be\n                  returned as part of the lines in the range.\n terminator = The character that terminates a line\n transmitBuffers = The number of lines buffered asynchronously\n conn = The connection to use e.g. HTTP or FTP.\n\n Returns:\n A range of Char[] with the content of the resource pointer to by the\n URL.\n",
				"name": "byLineAsync"
			},
			{
				"kind": "template",
				"line": 1382,
				"members": [
					{
						"kind": "function",
						"line": 1382,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "(const(char)[] url, KeepTerminator keepTerminator = KeepTerminator.no, Terminator terminator = '\\x0a', size_t transmitBuffers = 10, Conn conn = Conn())",
						"parameters": [
							{
								"type": "const(char)[]",
								"name": "url"
							},
							{
								"default": "KeepTerminator.no",
								"type": "KeepTerminator",
								"name": "keepTerminator"
							},
							{
								"default": "'\\x0a'",
								"type": "Terminator",
								"name": "terminator"
							},
							{
								"default": "10",
								"type": "size_t",
								"name": "transmitBuffers"
							},
							{
								"default": "Conn()",
								"type": "Conn",
								"name": "conn"
							}
						],
						"name": "byLineAsync",
						"endline": 1401
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"default": "AutoProtocol",
						"name": "Conn"
					},
					{
						"kind": "type",
						"defaultDeco": "a",
						"name": "Terminator"
					},
					{
						"kind": "type",
						"defaultDeco": "a",
						"name": "Char"
					}
				],
				"comment": "ditto\n",
				"name": "byLineAsync"
			},
			{
				"kind": "template",
				"line": 1502,
				"constraint": "isCurlConn!Conn",
				"members": [
					{
						"kind": "function",
						"line": 1502,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "(const(char)[] url, const(PostUnit)[] postData, size_t chunkSize = 1024, size_t transmitBuffers = 10, Conn conn = Conn())",
						"parameters": [
							{
								"type": "const(char)[]",
								"name": "url"
							},
							{
								"type": "const(PostUnit)[]",
								"name": "postData"
							},
							{
								"default": "1024",
								"type": "size_t",
								"name": "chunkSize"
							},
							{
								"default": "10",
								"type": "size_t",
								"name": "transmitBuffers"
							},
							{
								"default": "Conn()",
								"type": "Conn",
								"name": "conn"
							}
						],
						"name": "byChunkAsync",
						"endline": 1528
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"default": "AutoProtocol",
						"name": "Conn"
					},
					{
						"kind": "type",
						"name": "PostUnit"
					}
				],
				"comment": " HTTP/FTP fetch content as a range of chunks asynchronously.\n\n A range of chunks is returned immediately and the request that fetches the\n chunks is performed in another thread. If the method or other request\n properties is to be customized then set the $(D conn) parameter with a\n HTTP/FTP instance that has these properties set.\n\n If $(D postData) is non-_null the method will be set to $(D post) for HTTP\n requests.\n\n The background thread will buffer up to transmitBuffers number of chunks\n before is stops receiving data from network. When the main thread reads the\n chunks from the range it frees up buffers and allows for the background\n thread to receive more data from the network.\n\n If no data is available and the main thread access the range it will block\n until data becomes available. An exception to this is the $(D wait(Duration))\n method on the $(LREF AsyncChunkInputRange). This method will wait at maximum for the specified\n duration and return true if data is available.\n\n Example:\n ----\n import std.net.curl, std.stdio;\n // Get some pages in the background\n auto range1 = byChunkAsync(\"www.google.com\", 100);\n auto range2 = byChunkAsync(\"www.wikipedia.org\");\n foreach (chunk; byChunkAsync(\"dlang.org\"))\n     writeln(chunk); // chunk is ubyte[100]\n\n // Chunks already fetched in the background and ready\n foreach (chunk; range1) writeln(chunk);\n foreach (chunk; range2) writeln(chunk);\n ----\n\n ----\n import std.net.curl, std.stdio;\n // Get a line in a background thread and wait in\n // main thread for 2 seconds for it to arrive.\n auto range3 = byChunkAsync(\"dlang.com\", 10);\n if (range.wait(dur!\"seconds\"(2)))\n     writeln(range.front);\n else\n     writeln(\"No chunk received after 2 seconds!\");\n ----\n\n Params:\n url = The url to receive content from\n postData = Data to HTTP Post\n chunkSize = The size of the chunks\n transmitBuffers = The number of chunks buffered asynchronously\n conn = The connection to use e.g. HTTP or FTP.\n\n Returns:\n A range of ubyte[chunkSize] with the content of the resource pointer to by\n the URL.\n",
				"name": "byChunkAsync"
			},
			{
				"kind": "template",
				"line": 1531,
				"constraint": "isCurlConn!Conn",
				"members": [
					{
						"kind": "function",
						"line": 1531,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "(const(char)[] url, size_t chunkSize = 1024, size_t transmitBuffers = 10, Conn conn = Conn())",
						"parameters": [
							{
								"type": "const(char)[]",
								"name": "url"
							},
							{
								"default": "1024",
								"type": "size_t",
								"name": "chunkSize"
							},
							{
								"default": "10",
								"type": "size_t",
								"name": "transmitBuffers"
							},
							{
								"default": "Conn()",
								"type": "Conn",
								"name": "conn"
							}
						],
						"name": "byChunkAsync",
						"endline": 1551
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"default": "AutoProtocol",
						"name": "Conn"
					}
				],
				"comment": "ditto\n",
				"name": "byChunkAsync"
			},
			{
				"kind": "struct",
				"line": 2082,
				"members": [
					{
						"kind": "alias",
						"line": 2087,
						"deco": "E3etc1c4curl8CurlAuth",
						"char": 5,
						"name": "AuthMethod",
						"comment": "Authentication method equal to $(ECXREF curl, CurlAuth)\n"
					},
					{
						"kind": "alias",
						"line": 2182,
						"deco": "E3etc1c4curl12CurlTimeCond",
						"char": 5,
						"name": "TimeCond",
						"comment": " Time condition enumeration as an alias of $(ECXREF curl, CurlTimeCond)\n\n        $(WEB www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.25, _RFC2616 Section 14.25)\n"
					},
					{
						"kind": "function",
						"line": 2187,
						"storageClass": [
							"static"
						],
						"deco": "FAxaZS3std3net4curl4HTTP",
						"endchar": 5,
						"char": 17,
						"parameters": [
							{
								"deco": "Axa",
								"name": "url"
							}
						],
						"name": "opCall",
						"comment": "       Constructor taking the url as parameter.\n",
						"endline": 2193
					},
					{
						"kind": "function",
						"line": 2246,
						"deco": "FE3std8typecons41__T4FlagVAyaa12_7468726f774f6e4572726f72Z4FlagZi",
						"endchar": 5,
						"char": 14,
						"parameters": [
							{
								"deco": "E3std8typecons41__T4FlagVAyaa12_7468726f774f6e4572726f72Z4Flag",
								"default": "cast(Flag)true",
								"name": "throwOnError"
							}
						],
						"name": "perform",
						"comment": "       Perform a http request.\n\n       After the HTTP client has been setup and possibly assigned callbacks the\n       $(D perform()) method will start performing the request towards the\n       specified server.\n\n       Params:\n       throwOnError = whether to throw an exception or return a CurlCode on error\n",
						"originalType": "CurlCode(ThrowOnError throwOnError = ThrowOnError.yes)",
						"endline": 2280
					},
					{
						"kind": "function",
						"line": 2283,
						"deco": "FNdAxaZv",
						"endchar": 5,
						"char": 20,
						"parameters": [
							{
								"deco": "Axa",
								"name": "url"
							}
						],
						"name": "url",
						"comment": "The URL to specify the location of the resource.\n",
						"endline": 2288
					},
					{
						"kind": "function",
						"line": 2291,
						"deco": "FNdAxaZv",
						"endchar": 5,
						"char": 20,
						"parameters": [
							{
								"deco": "Axa",
								"name": "caFile"
							}
						],
						"name": "caInfo",
						"comment": "Set the CA certificate bundle file to use for SSL peer verification\n",
						"endline": 2294
					},
					{
						"kind": "alias",
						"line": 2302,
						"char": 9,
						"name": "requestPause",
						"comment": "Value to return from $(D onSend)/$(D onReceive) delegates in order to\n\npause a request\n"
					},
					{
						"kind": "alias",
						"line": 2305,
						"char": 9,
						"name": "requestAbort",
						"comment": "Value to return from onSend delegate in order to abort a request\n"
					},
					{
						"kind": "function",
						"line": 2310,
						"deco": "FNdZb",
						"char": 24,
						"name": "isStopped",
						"comment": "           True if the instance is stopped. A stopped instance is not usable.\n"
					},
					{
						"kind": "function",
						"line": 2313,
						"deco": "FZv",
						"char": 14,
						"name": "shutdown",
						"comment": "Stop and invalidate this instance.\n"
					},
					{
						"kind": "function",
						"line": 2318,
						"deco": "FNdbZv",
						"char": 24,
						"parameters": [
							{
								"deco": "b",
								"name": "on"
							}
						],
						"name": "verbose",
						"comment": " Set verbose.\n            This will print request information to stderr.\n"
					},
					{
						"kind": "function",
						"line": 2323,
						"deco": "FNdS4core4time8DurationZv",
						"char": 24,
						"parameters": [
							{
								"deco": "S4core4time8Duration",
								"name": "d"
							}
						],
						"name": "dataTimeout",
						"comment": "Set timeout for activity on connection.\n"
					},
					{
						"kind": "function",
						"line": 2328,
						"deco": "FNdS4core4time8DurationZv",
						"char": 24,
						"parameters": [
							{
								"deco": "S4core4time8Duration",
								"name": "d"
							}
						],
						"name": "operationTimeout",
						"comment": " Set maximum time an operation is allowed to take.\n            This includes dns resolution, connecting, data transfer, etc.\n"
					},
					{
						"kind": "function",
						"line": 2331,
						"deco": "FNdS4core4time8DurationZv",
						"char": 24,
						"parameters": [
							{
								"deco": "S4core4time8Duration",
								"name": "d"
							}
						],
						"name": "connectTimeout",
						"comment": "Set timeout for connecting.\n"
					},
					{
						"kind": "function",
						"line": 2338,
						"deco": "FNdAxaZv",
						"char": 24,
						"parameters": [
							{
								"deco": "Axa",
								"name": "host"
							}
						],
						"name": "proxy",
						"comment": " Proxy\n  See: $(WEB curl.haxx.se/libcurl/c/curl_easy_setopt.html#CURLOPTPROXY, _proxy)\n"
					},
					{
						"kind": "function",
						"line": 2343,
						"deco": "FNdtZv",
						"char": 24,
						"parameters": [
							{
								"deco": "t",
								"name": "port"
							}
						],
						"name": "proxyPort",
						"comment": " Proxy port\n  See: $(WEB curl.haxx.se/libcurl/c/curl_easy_setopt.html#CURLOPTPROXYPORT, _proxy_port)\n"
					},
					{
						"kind": "alias",
						"line": 2346,
						"deco": "E3etc1c4curl9CurlProxy",
						"char": 9,
						"name": "CurlProxy",
						"comment": "Type of proxy\n"
					},
					{
						"kind": "function",
						"line": 2351,
						"deco": "FNdE3etc1c4curl9CurlProxyZv",
						"char": 24,
						"parameters": [
							{
								"deco": "E3etc1c4curl9CurlProxy",
								"name": "type"
							}
						],
						"name": "proxyType",
						"comment": " Proxy type\n  See: $(WEB curl.haxx.se/libcurl/c/curl_easy_setopt.html#CURLOPTPROXY, _proxy_type)\n"
					},
					{
						"kind": "function",
						"line": 2354,
						"deco": "FNdS4core4time8DurationZv",
						"char": 24,
						"parameters": [
							{
								"deco": "S4core4time8Duration",
								"name": "d"
							}
						],
						"name": "dnsTimeout",
						"comment": "DNS lookup timeout.\n"
					},
					{
						"kind": "function",
						"line": 2367,
						"deco": "FNdAxaZv",
						"char": 24,
						"parameters": [
							{
								"deco": "Axa",
								"name": "i"
							}
						],
						"name": "netInterface",
						"comment": " The network interface to use in form of the the IP of the interface.\n\n Example:\n ----\n theprotocol.netInterface = \"192.168.1.32\";\n theprotocol.netInterface = [ 192, 168, 1, 32 ];\n ----\n\n See: $(XREF socket, InternetAddress)\n"
					},
					{
						"kind": "function",
						"line": 2370,
						"deco": "FNdxG4hZv",
						"char": 24,
						"parameters": [
							{
								"deco": "xG4h",
								"name": "i"
							}
						],
						"name": "netInterface",
						"comment": "ditto\n",
						"originalType": "@property void(const(ubyte)[4] i)"
					},
					{
						"kind": "function",
						"line": 2373,
						"deco": "FNdC3std6socket15InternetAddressZv",
						"char": 24,
						"parameters": [
							{
								"deco": "C3std6socket15InternetAddress",
								"name": "i"
							}
						],
						"name": "netInterface",
						"comment": "ditto\n"
					},
					{
						"kind": "function",
						"line": 2380,
						"deco": "FNdtZv",
						"char": 24,
						"parameters": [
							{
								"deco": "t",
								"name": "port"
							}
						],
						"name": "localPort",
						"comment": "           Set the local outgoing port to use.\n           Params:\n           port = the first outgoing port number to try and use\n"
					},
					{
						"kind": "function",
						"line": 2389,
						"deco": "FNdtZv",
						"char": 24,
						"parameters": [
							{
								"deco": "t",
								"name": "range"
							}
						],
						"name": "localPortRange",
						"comment": "           Set the local outgoing port range to use.\n           This can be used together with the localPort property.\n           Params:\n           range = if the first port is occupied then try this many\n           port number forwards\n"
					},
					{
						"kind": "function",
						"line": 2394,
						"deco": "FNdbZv",
						"char": 24,
						"parameters": [
							{
								"deco": "b",
								"name": "on"
							}
						],
						"name": "tcpNoDelay",
						"comment": " Set the tcp no-delay socket option on or off.\n            See: $(WEB curl.haxx.se/libcurl/c/curl_easy_setopt.html#CURLOPTTCPNODELAY, nodelay)\n"
					},
					{
						"kind": "function",
						"line": 2411,
						"deco": "FAxaAxaAxaZv",
						"char": 14,
						"parameters": [
							{
								"deco": "Axa",
								"name": "username"
							},
							{
								"deco": "Axa",
								"name": "password"
							},
							{
								"deco": "Axa",
								"default": "\"\"",
								"name": "domain"
							}
						],
						"name": "setAuthentication",
						"comment": "           Set the user name, password and optionally domain for authentication\n           purposes.\n\n           Some protocols may need authentication in some cases. Use this\n           function to provide credentials.\n\n           Params:\n           username = the username\n           password = the password\n           domain = used for NTLM authentication only and is set to the NTLM domain\n           name\n"
					},
					{
						"kind": "function",
						"line": 2421,
						"deco": "FAxaAxaZv",
						"char": 14,
						"parameters": [
							{
								"deco": "Axa",
								"name": "username"
							},
							{
								"deco": "Axa",
								"name": "password"
							}
						],
						"name": "setProxyAuthentication",
						"comment": "           Set the user name and password for proxy authentication.\n\n           Params:\n           username = the username\n           password = the password\n"
					},
					{
						"kind": "function",
						"line": 2453,
						"deco": "FNdDFAvZmZv",
						"char": 24,
						"parameters": [
							{
								"deco": "DFAvZm",
								"name": "callback"
							}
						],
						"name": "onSend",
						"comment": " The event handler that gets called when data is needed for sending. The\n length of the $(D void[]) specifies the maximum number of bytes that can\n be sent.\n\n Returns:\n The callback returns the number of elements in the buffer that have been\n filled and are ready to send.\n The special value $(D .abortRequest) can be returned in order to abort the\n current request.\n The special value $(D .pauseRequest) can be returned in order to pause the\n current request.\n\n Example:\n ----\n import std.net.curl;\n string msg = \"Hello world\";\n auto client = HTTP(\"dlang.org\");\n client.onSend = delegate size_t(void[] data)\n {\n     auto m = cast(void[])msg;\n     size_t length = m.length > data.length ? data.length : m.length;\n     if (length == 0) return 0;\n     data[0..length] = m[0..length];\n     msg = msg[length..$];\n     return length;\n };\n client.perform();\n ----\n",
						"originalType": "@property void(size_t delegate(void[]) callback)"
					},
					{
						"kind": "function",
						"line": 2478,
						"deco": "FNdDFAhZmZv",
						"char": 24,
						"parameters": [
							{
								"deco": "DFAhZm",
								"name": "callback"
							}
						],
						"name": "onReceive",
						"comment": " The event handler that receives incoming data. Be sure to copy the\n incoming ubyte[] since it is not guaranteed to be valid after the\n callback returns.\n\n Returns:\n The callback returns the incoming bytes read. If not the entire array is\n the request will abort.\n The special value .pauseRequest can be returned in order to pause the\n current request.\n\n Example:\n ----\n import std.net.curl, std.stdio;\n auto client = HTTP(\"dlang.org\");\n client.onReceive = (ubyte[] data)\n {\n     writeln(\"Got data\", to!(const(char)[])(data));\n     return data.length;\n };\n client.perform();\n ----\n",
						"originalType": "@property void(size_t delegate(ubyte[]) callback)"
					},
					{
						"kind": "function",
						"line": 2502,
						"deco": "FNdDFmmmmZiZv",
						"char": 24,
						"parameters": [
							{
								"deco": "DFmmmmZi",
								"name": "callback"
							}
						],
						"name": "onProgress",
						"comment": " Register an event handler that gets called to inform of\n upload/download progress.\n\n Callback_parameters:\n $(CALLBACK_PARAMS)\n\n Callback_returns: Return 0 to signal success, return non-zero to\n abort transfer.\n\n Example:\n ----\n import std.net.curl, std.stdio;\n auto client = HTTP(\"dlang.org\");\n client.onProgress = delegate int(size_t dl, size_t dln, size_t ul, size_t ult)\n {\n     writeln(\"Progress: downloaded \", dln, \" of \", dl);\n     writeln(\"Progress: uploaded \", uln, \" of \", ul);\n };\n client.perform();\n ----\n",
						"originalType": "@property void(int delegate(size_t dlTotal, size_t dlNow, size_t ulTotal, size_t ulNow) callback)"
					},
					{
						"kind": "function",
						"line": 2508,
						"deco": "FZv",
						"endchar": 5,
						"char": 10,
						"name": "clearRequestHeaders",
						"comment": " Clear all outgoing headers.\n",
						"endline": 2514
					},
					{
						"kind": "function",
						"line": 2529,
						"deco": "FAxaAxaZv",
						"endchar": 5,
						"char": 10,
						"parameters": [
							{
								"deco": "Axa",
								"name": "name"
							},
							{
								"deco": "Axa",
								"name": "value"
							}
						],
						"name": "addRequestHeader",
						"comment": " Add a header e.g. \"X-CustomField: Something is fishy\".\n\n There is no remove header functionality. Do a $(LREF clearRequestHeaders)\n and set the needed headers instead.\n\n Example:\n ---\n import std.net.curl;\n auto client = HTTP();\n client.addRequestHeader(\"X-Custom-ABC\", \"This is the custom value\");\n string content = get(\"dlang.org\", client);\n ---\n",
						"endline": 2537
					},
					{
						"kind": "variable",
						"line": 2543,
						"storageClass": [
							"static",
							"immutable"
						],
						"deco": "yAa",
						"char": 29,
						"name": "defaultUserAgent",
						"comment": " The default \"User-Agent\" value send with a request.\n It has the form \"Phobos-std.net.curl/$(I PHOBOS_VERSION) (libcurl/$(I CURL_VERSION))\"\n",
						"originalType": "string"
					},
					{
						"kind": "function",
						"line": 2567,
						"deco": "FAxaZv",
						"endchar": 5,
						"char": 10,
						"parameters": [
							{
								"deco": "Axa",
								"name": "userAgent"
							}
						],
						"name": "setUserAgent",
						"comment": " Set the value of the user agent request header field.\n\n By default a request has it's \"User-Agent\" field set to $(LREF\n defaultUserAgent) even if $(D setUserAgent) was never called.  Pass\n an empty string to suppress the \"User-Agent\" field altogether.\n",
						"endline": 2570
					},
					{
						"kind": "function",
						"line": 2575,
						"deco": "FNdZHAyaAya",
						"endchar": 5,
						"char": 30,
						"name": "responseHeaders",
						"comment": " The headers read from a successful response.\n\n",
						"endline": 2578
					},
					{
						"kind": "function",
						"line": 2581,
						"deco": "FNdE3std3net4curl4HTTP6MethodZv",
						"endchar": 5,
						"char": 20,
						"parameters": [
							{
								"deco": "E3std3net4curl4HTTP6Method",
								"name": "m"
							}
						],
						"name": "method",
						"comment": "HTTP method used.\n",
						"endline": 2584
					},
					{
						"kind": "function",
						"line": 2587,
						"deco": "FNdZE3std3net4curl4HTTP6Method",
						"endchar": 5,
						"char": 22,
						"name": "method",
						"comment": "ditto\n",
						"endline": 2590
					},
					{
						"kind": "function",
						"line": 2596,
						"deco": "FNdZS3std3net4curl4HTTP10StatusLine",
						"endchar": 5,
						"char": 26,
						"name": "statusLine",
						"comment": "       HTTP status line of last response. One call to perform may\n       result in several requests because of redirection.\n",
						"endline": 2599
					},
					{
						"kind": "function",
						"line": 2602,
						"deco": "FAxaZv",
						"endchar": 5,
						"char": 10,
						"parameters": [
							{
								"deco": "Axa",
								"name": "cookie"
							}
						],
						"name": "setCookie",
						"comment": "Set the active cookie string e.g. \"name1=value1;name2=value2\"\n",
						"endline": 2605
					},
					{
						"kind": "function",
						"line": 2608,
						"deco": "FAxaZv",
						"endchar": 5,
						"char": 10,
						"parameters": [
							{
								"deco": "Axa",
								"name": "path"
							}
						],
						"name": "setCookieJar",
						"comment": "Set a file path to where a cookie jar should be read/stored.\n",
						"endline": 2613
					},
					{
						"kind": "function",
						"line": 2616,
						"deco": "FZv",
						"endchar": 5,
						"char": 10,
						"name": "flushCookieJar",
						"comment": "Flush cookie jar to disk.\n",
						"endline": 2619
					},
					{
						"kind": "function",
						"line": 2622,
						"deco": "FZv",
						"endchar": 5,
						"char": 10,
						"name": "clearSessionCookies",
						"comment": "Clear session cookies.\n",
						"endline": 2625
					},
					{
						"kind": "function",
						"line": 2628,
						"deco": "FZv",
						"endchar": 5,
						"char": 10,
						"name": "clearAllCookies",
						"comment": "Clear all cookies.\n",
						"endline": 2631
					},
					{
						"kind": "function",
						"line": 2642,
						"deco": "FE3etc1c4curl12CurlTimeCondS3std8datetime7SysTimeZv",
						"endchar": 5,
						"char": 10,
						"parameters": [
							{
								"deco": "E3etc1c4curl12CurlTimeCond",
								"name": "cond"
							},
							{
								"deco": "S3std8datetime7SysTime",
								"name": "timestamp"
							}
						],
						"name": "setTimeCondition",
						"comment": "       Set time condition on the request.\n\n       Params:\n       cond =  $(D CurlTimeCond.{none,ifmodsince,ifunmodsince,lastmod})\n       timestamp = Timestamp for the condition\n\n       $(WEB www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.25, _RFC2616 Section 14.25)\n",
						"originalType": "void(HTTP.TimeCond cond, SysTime timestamp)",
						"endline": 2646
					},
					{
						"kind": "function",
						"line": 2663,
						"deco": "FNdAxvZv",
						"endchar": 5,
						"char": 20,
						"parameters": [
							{
								"deco": "Axv",
								"name": "data"
							}
						],
						"name": "postData",
						"comment": " Specifying data to post when not using the onSend callback.\n\n The data is NOT copied by the library.  Content-Type will default to\n application/octet-stream.  Data is not converted or encoded by this\n method.\n\n Example:\n ----\n import std.net.curl, std.stdio;\n auto http = HTTP(\"http://www.mydomain.com\");\n http.onReceive = (ubyte[] data) { writeln(to!(const(char)[])(data)); return data.length; };\n http.postData = [1,2,3,4,5];\n http.perform();\n ----\n",
						"endline": 2666
					},
					{
						"kind": "function",
						"line": 2682,
						"deco": "FNdAxaZv",
						"endchar": 5,
						"char": 20,
						"parameters": [
							{
								"deco": "Axa",
								"name": "data"
							}
						],
						"name": "postData",
						"comment": " Specifying data to post when not using the onSend callback.\n\n The data is NOT copied by the library.  Content-Type will default to\n text/plain.  Data is not converted or encoded by this method.\n\n Example:\n ----\n import std.net.curl, std.stdio;\n auto http = HTTP(\"http://www.mydomain.com\");\n http.onReceive = (ubyte[] data) { writeln(to!(const(char)[])(data)); return data.length; };\n http.postData = \"The quick....\";\n http.perform();\n ----\n",
						"endline": 2685
					},
					{
						"kind": "function",
						"line": 2705,
						"deco": "FAxvAyaZv",
						"endchar": 5,
						"char": 10,
						"parameters": [
							{
								"deco": "Axv",
								"name": "data"
							},
							{
								"deco": "Aya",
								"name": "contentType"
							}
						],
						"name": "setPostData",
						"comment": " Specify data to post when not using the onSend callback, with\n user-specified Content-Type.\n Params:\n  data = Data to post.\n  contentType = MIME type of the data, for example, \"text/plain\" or\n      \"application/octet-stream\". See also:\n      $(LINK2 http://en.wikipedia.org/wiki/Internet_media_type,\n      Internet media type) on Wikipedia.\n -----\n import std.net.curl;\n auto http = HTTP(\"http://onlineform.example.com\");\n auto data = \"app=login&username=bob&password=s00perS3kret\";\n http.setPostData(data, \"application/x-www-form-urlencoded\");\n http.onReceive = (ubyte[] data) { return data.length; };\n http.perform();\n -----\n",
						"endline": 2714
					},
					{
						"kind": "function",
						"line": 2746,
						"deco": "FNdDFxAaxAaZvZv",
						"endchar": 5,
						"char": 20,
						"parameters": [
							{
								"deco": "DFxAaxAaZv",
								"name": "callback"
							}
						],
						"name": "onReceiveHeader",
						"comment": " Set the event handler that receives incoming headers.\n\n The callback will receive a header field key, value as parameter. The\n $(D const(char)[]) arrays are not valid after the delegate has returned.\n\n Example:\n ----\n import std.net.curl, std.stdio;\n auto http = HTTP(\"dlang.org\");\n http.onReceive = (ubyte[] data) { writeln(to!(const(char)[])(data)); return data.length; };\n http.onReceiveHeader = (in char[] key, in char[] value) { writeln(key, \" = \", value); };\n http.perform();\n ----\n",
						"originalType": "@property void(void delegate(in char[] key, in char[] value) callback)",
						"endline": 2750
					},
					{
						"kind": "function",
						"line": 2760,
						"deco": "FNdDFS3std3net4curl4HTTP10StatusLineZvZv",
						"endchar": 5,
						"char": 20,
						"parameters": [
							{
								"deco": "DFS3std3net4curl4HTTP10StatusLineZv",
								"name": "callback"
							}
						],
						"name": "onReceiveStatusLine",
						"comment": "       Callback for each received StatusLine.\n\n       Notice that several callbacks can be done for each call to\n       $(D perform()) due to redirections.\n\n       See_Also: $(LREF StatusLine)\n",
						"endline": 2763
					},
					{
						"kind": "function",
						"line": 2770,
						"deco": "FNdmZv",
						"endchar": 5,
						"char": 20,
						"parameters": [
							{
								"deco": "m",
								"name": "len"
							}
						],
						"name": "contentLength",
						"comment": "       The content length in bytes when using request that has content\n       e.g. POST/PUT and not using chunked transfer. Is set as the\n       \"Content-Length\" header.  Set to size_t.max to reset to chunked transfer.\n",
						"originalType": "@property void(size_t len)",
						"endline": 2794
					},
					{
						"kind": "function",
						"line": 2799,
						"deco": "FNdE3etc1c4curl8CurlAuthZv",
						"endchar": 5,
						"char": 20,
						"parameters": [
							{
								"deco": "E3etc1c4curl8CurlAuth",
								"name": "authMethod"
							}
						],
						"name": "authenticationMethod",
						"comment": "       Authentication method as specified in $(LREF AuthMethod).\n",
						"originalType": "@property void(AuthMethod authMethod)",
						"endline": 2802
					},
					{
						"kind": "function",
						"line": 2808,
						"deco": "FNdkZv",
						"endchar": 5,
						"char": 20,
						"parameters": [
							{
								"deco": "k",
								"name": "maxRedirs"
							}
						],
						"name": "maxRedirects",
						"comment": "       Set max allowed redirections using the location header.\n       uint.max for infinite.\n",
						"endline": 2820
					},
					{
						"kind": "enum",
						"line": 2825,
						"members": [
							{
								"kind": "enum member",
								"line": 2828,
								"value": "1",
								"char": 9,
								"name": "head",
								"comment": "\n"
							},
							{
								"kind": "enum member",
								"line": 2829,
								"value": "2",
								"char": 9,
								"name": "get",
								"comment": "\n"
							},
							{
								"kind": "enum member",
								"line": 2830,
								"value": "3",
								"char": 9,
								"name": "post",
								"comment": "\n"
							},
							{
								"kind": "enum member",
								"line": 2831,
								"value": "4",
								"char": 9,
								"name": "put",
								"comment": "\n"
							},
							{
								"kind": "enum member",
								"line": 2832,
								"value": "5",
								"char": 9,
								"name": "del",
								"comment": "\n"
							},
							{
								"kind": "enum member",
								"line": 2833,
								"value": "6",
								"char": 9,
								"name": "options",
								"comment": "\n"
							},
							{
								"kind": "enum member",
								"line": 2834,
								"value": "7",
								"char": 9,
								"name": "trace",
								"comment": "\n"
							},
							{
								"kind": "enum member",
								"line": 2835,
								"value": "8",
								"char": 9,
								"name": "connect",
								"comment": "\n"
							}
						],
						"char": 5,
						"baseDeco": "i",
						"name": "Method",
						"comment": " <a name=\"HTTP.Method\"/ >The standard HTTP methods :\n  $(WEB www.w3.org/Protocols/rfc2616/rfc2616-sec5.html#sec5.1.1, _RFC2616 Section 5.1.1)\n"
					},
					{
						"kind": "struct",
						"line": 2844,
						"members": [
							{
								"kind": "variable",
								"line": 2846,
								"deco": "t",
								"char": 16,
								"name": "majorVersion",
								"comment": "Major HTTP version ie. 1 in HTTP/1.0.\n",
								"offset": 0
							},
							{
								"kind": "variable",
								"line": 2847,
								"deco": "t",
								"char": 16,
								"name": "minorVersion",
								"comment": "Minor HTTP version ie. 0 in HTTP/1.0.\n",
								"offset": 2
							},
							{
								"kind": "variable",
								"line": 2848,
								"deco": "t",
								"char": 16,
								"name": "code",
								"comment": "HTTP status line code e.g. 200.\n",
								"offset": 4
							},
							{
								"kind": "variable",
								"line": 2849,
								"deco": "Aya",
								"char": 16,
								"name": "reason",
								"comment": "HTTP status line reason string.\n",
								"offset": 8
							},
							{
								"kind": "function",
								"line": 2852,
								"deco": "FNfZv",
								"endchar": 9,
								"char": 20,
								"name": "reset",
								"comment": "Reset this status line\n",
								"endline": 2858
							},
							{
								"kind": "function",
								"line": 2861,
								"deco": "FZAya",
								"endchar": 9,
								"char": 16,
								"name": "toString",
								"comment": "\n",
								"endline": 2865
							}
						],
						"char": 5,
						"name": "StatusLine",
						"comment": "       HTTP status line ie. the first line returned in an HTTP response.\n\n       If authentication or redirections are done then the status will be for\n       the last response received.\n"
					}
				],
				"char": 1,
				"name": "HTTP",
				"comment": " HTTP client functionality.\n\n Example:\n ---\n import std.net.curl, std.stdio;\n\n // Get with custom data receivers\n auto http = HTTP(\"dlang.org\");\n http.onReceiveHeader =\n     (in char[] key, in char[] value) { writeln(key ~ \": \" ~ value); };\n http.onReceive = (ubyte[] data) { /+ drop +/ return data.length; };\n http.perform();\n\n // Put with data senders\n auto msg = \"Hello world\";\n http.contentLength = msg.length;\n http.onSend = (void[] data)\n {\n     auto m = cast(void[])msg;\n     size_t len = m.length > data.length ? data.length : m.length;\n     if (len == 0) return len;\n     data[0..len] = m[0..len];\n     msg = msg[len..$];\n     return len;\n };\n http.perform();\n\n // Track progress\n http.method = HTTP.Method.get;\n http.url = \"http://upload.wikimedia.org/wikipedia/commons/\"\n            \"5/53/Wikipedia-logo-en-big.png\";\n http.onReceive = (ubyte[] data) { return data.length; };\n http.onProgress = (size_t dltotal, size_t dlnow,\n                    size_t ultotal, size_t ulnow)\n {\n     writeln(\"Progress \", dltotal, \", \", dlnow, \", \", ultotal, \", \", ulnow);\n     return 0;\n };\n http.perform();\n ---\n\n See_Also: $(WEB www.ietf.org/rfc/rfc2616.txt, RFC2616)\n\n"
			},
			{
				"kind": "struct",
				"line": 2875,
				"members": [
					{
						"kind": "function",
						"line": 2899,
						"storageClass": [
							"static"
						],
						"deco": "FAxaZS3std3net4curl3FTP",
						"endchar": 5,
						"char": 16,
						"parameters": [
							{
								"deco": "Axa",
								"name": "url"
							}
						],
						"name": "opCall",
						"comment": "       FTP access to the specified url.\n",
						"endline": 2905
					},
					{
						"kind": "function",
						"line": 2951,
						"deco": "FE3std8typecons41__T4FlagVAyaa12_7468726f774f6e4572726f72Z4FlagZi",
						"endchar": 5,
						"char": 14,
						"parameters": [
							{
								"deco": "E3std8typecons41__T4FlagVAyaa12_7468726f774f6e4572726f72Z4Flag",
								"default": "cast(Flag)true",
								"name": "throwOnError"
							}
						],
						"name": "perform",
						"comment": "       Performs the ftp request as it has been configured.\n\n       After a FTP client has been setup and possibly assigned callbacks the $(D\n       perform()) method will start performing the actual communication with the\n       server.\n\n       Params:\n       throwOnError = whether to throw an exception or return a CurlCode on error\n",
						"originalType": "CurlCode(ThrowOnError throwOnError = ThrowOnError.yes)",
						"endline": 2954
					},
					{
						"kind": "function",
						"line": 2957,
						"deco": "FNdAxaZv",
						"endchar": 5,
						"char": 20,
						"parameters": [
							{
								"deco": "Axa",
								"name": "url"
							}
						],
						"name": "url",
						"comment": "The URL to specify the location of the resource.\n",
						"endline": 2962
					},
					{
						"kind": "alias",
						"line": 2970,
						"char": 9,
						"name": "requestPause",
						"comment": "Value to return from $(D onSend)/$(D onReceive) delegates in order to\n\npause a request\n"
					},
					{
						"kind": "alias",
						"line": 2973,
						"char": 9,
						"name": "requestAbort",
						"comment": "Value to return from onSend delegate in order to abort a request\n"
					},
					{
						"kind": "function",
						"line": 2978,
						"deco": "FNdZb",
						"char": 24,
						"name": "isStopped",
						"comment": "           True if the instance is stopped. A stopped instance is not usable.\n"
					},
					{
						"kind": "function",
						"line": 2981,
						"deco": "FZv",
						"char": 14,
						"name": "shutdown",
						"comment": "Stop and invalidate this instance.\n"
					},
					{
						"kind": "function",
						"line": 2986,
						"deco": "FNdbZv",
						"char": 24,
						"parameters": [
							{
								"deco": "b",
								"name": "on"
							}
						],
						"name": "verbose",
						"comment": " Set verbose.\n            This will print request information to stderr.\n"
					},
					{
						"kind": "function",
						"line": 2991,
						"deco": "FNdS4core4time8DurationZv",
						"char": 24,
						"parameters": [
							{
								"deco": "S4core4time8Duration",
								"name": "d"
							}
						],
						"name": "dataTimeout",
						"comment": "Set timeout for activity on connection.\n"
					},
					{
						"kind": "function",
						"line": 2996,
						"deco": "FNdS4core4time8DurationZv",
						"char": 24,
						"parameters": [
							{
								"deco": "S4core4time8Duration",
								"name": "d"
							}
						],
						"name": "operationTimeout",
						"comment": " Set maximum time an operation is allowed to take.\n            This includes dns resolution, connecting, data transfer, etc.\n"
					},
					{
						"kind": "function",
						"line": 2999,
						"deco": "FNdS4core4time8DurationZv",
						"char": 24,
						"parameters": [
							{
								"deco": "S4core4time8Duration",
								"name": "d"
							}
						],
						"name": "connectTimeout",
						"comment": "Set timeout for connecting.\n"
					},
					{
						"kind": "function",
						"line": 3006,
						"deco": "FNdAxaZv",
						"char": 24,
						"parameters": [
							{
								"deco": "Axa",
								"name": "host"
							}
						],
						"name": "proxy",
						"comment": " Proxy\n  See: $(WEB curl.haxx.se/libcurl/c/curl_easy_setopt.html#CURLOPTPROXY, _proxy)\n"
					},
					{
						"kind": "function",
						"line": 3011,
						"deco": "FNdtZv",
						"char": 24,
						"parameters": [
							{
								"deco": "t",
								"name": "port"
							}
						],
						"name": "proxyPort",
						"comment": " Proxy port\n  See: $(WEB curl.haxx.se/libcurl/c/curl_easy_setopt.html#CURLOPTPROXYPORT, _proxy_port)\n"
					},
					{
						"kind": "alias",
						"line": 3014,
						"deco": "E3etc1c4curl9CurlProxy",
						"char": 9,
						"name": "CurlProxy",
						"comment": "Type of proxy\n"
					},
					{
						"kind": "function",
						"line": 3019,
						"deco": "FNdE3etc1c4curl9CurlProxyZv",
						"char": 24,
						"parameters": [
							{
								"deco": "E3etc1c4curl9CurlProxy",
								"name": "type"
							}
						],
						"name": "proxyType",
						"comment": " Proxy type\n  See: $(WEB curl.haxx.se/libcurl/c/curl_easy_setopt.html#CURLOPTPROXY, _proxy_type)\n"
					},
					{
						"kind": "function",
						"line": 3022,
						"deco": "FNdS4core4time8DurationZv",
						"char": 24,
						"parameters": [
							{
								"deco": "S4core4time8Duration",
								"name": "d"
							}
						],
						"name": "dnsTimeout",
						"comment": "DNS lookup timeout.\n"
					},
					{
						"kind": "function",
						"line": 3035,
						"deco": "FNdAxaZv",
						"char": 24,
						"parameters": [
							{
								"deco": "Axa",
								"name": "i"
							}
						],
						"name": "netInterface",
						"comment": " The network interface to use in form of the the IP of the interface.\n\n Example:\n ----\n theprotocol.netInterface = \"192.168.1.32\";\n theprotocol.netInterface = [ 192, 168, 1, 32 ];\n ----\n\n See: $(XREF socket, InternetAddress)\n"
					},
					{
						"kind": "function",
						"line": 3038,
						"deco": "FNdxG4hZv",
						"char": 24,
						"parameters": [
							{
								"deco": "xG4h",
								"name": "i"
							}
						],
						"name": "netInterface",
						"comment": "ditto\n",
						"originalType": "@property void(const(ubyte)[4] i)"
					},
					{
						"kind": "function",
						"line": 3041,
						"deco": "FNdC3std6socket15InternetAddressZv",
						"char": 24,
						"parameters": [
							{
								"deco": "C3std6socket15InternetAddress",
								"name": "i"
							}
						],
						"name": "netInterface",
						"comment": "ditto\n"
					},
					{
						"kind": "function",
						"line": 3048,
						"deco": "FNdtZv",
						"char": 24,
						"parameters": [
							{
								"deco": "t",
								"name": "port"
							}
						],
						"name": "localPort",
						"comment": "           Set the local outgoing port to use.\n           Params:\n           port = the first outgoing port number to try and use\n"
					},
					{
						"kind": "function",
						"line": 3057,
						"deco": "FNdtZv",
						"char": 24,
						"parameters": [
							{
								"deco": "t",
								"name": "range"
							}
						],
						"name": "localPortRange",
						"comment": "           Set the local outgoing port range to use.\n           This can be used together with the localPort property.\n           Params:\n           range = if the first port is occupied then try this many\n           port number forwards\n"
					},
					{
						"kind": "function",
						"line": 3062,
						"deco": "FNdbZv",
						"char": 24,
						"parameters": [
							{
								"deco": "b",
								"name": "on"
							}
						],
						"name": "tcpNoDelay",
						"comment": " Set the tcp no-delay socket option on or off.\n            See: $(WEB curl.haxx.se/libcurl/c/curl_easy_setopt.html#CURLOPTTCPNODELAY, nodelay)\n"
					},
					{
						"kind": "function",
						"line": 3079,
						"deco": "FAxaAxaAxaZv",
						"char": 14,
						"parameters": [
							{
								"deco": "Axa",
								"name": "username"
							},
							{
								"deco": "Axa",
								"name": "password"
							},
							{
								"deco": "Axa",
								"default": "\"\"",
								"name": "domain"
							}
						],
						"name": "setAuthentication",
						"comment": "           Set the user name, password and optionally domain for authentication\n           purposes.\n\n           Some protocols may need authentication in some cases. Use this\n           function to provide credentials.\n\n           Params:\n           username = the username\n           password = the password\n           domain = used for NTLM authentication only and is set to the NTLM domain\n           name\n"
					},
					{
						"kind": "function",
						"line": 3089,
						"deco": "FAxaAxaZv",
						"char": 14,
						"parameters": [
							{
								"deco": "Axa",
								"name": "username"
							},
							{
								"deco": "Axa",
								"name": "password"
							}
						],
						"name": "setProxyAuthentication",
						"comment": "           Set the user name and password for proxy authentication.\n\n           Params:\n           username = the username\n           password = the password\n"
					},
					{
						"kind": "function",
						"line": 3105,
						"deco": "FNdDFAvZmZv",
						"char": 24,
						"parameters": [
							{
								"deco": "DFAvZm",
								"name": "callback"
							}
						],
						"name": "onSend",
						"comment": " The event handler that gets called when data is needed for sending. The\n length of the $(D void[]) specifies the maximum number of bytes that can\n be sent.\n\n Returns:\n The callback returns the number of elements in the buffer that have been\n filled and are ready to send.\n The special value $(D .abortRequest) can be returned in order to abort the\n current request.\n The special value $(D .pauseRequest) can be returned in order to pause the\n current request.\n\n",
						"originalType": "@property void(size_t delegate(void[]) callback)"
					},
					{
						"kind": "function",
						"line": 3119,
						"deco": "FNdDFAhZmZv",
						"char": 24,
						"parameters": [
							{
								"deco": "DFAhZm",
								"name": "callback"
							}
						],
						"name": "onReceive",
						"comment": " The event handler that receives incoming data. Be sure to copy the\n incoming ubyte[] since it is not guaranteed to be valid after the\n callback returns.\n\n Returns:\n The callback returns the incoming bytes read. If not the entire array is\n the request will abort.\n The special value .pauseRequest can be returned in order to pause the\n current request.\n\n",
						"originalType": "@property void(size_t delegate(ubyte[]) callback)"
					},
					{
						"kind": "function",
						"line": 3131,
						"deco": "FNdDFmmmmZiZv",
						"char": 24,
						"parameters": [
							{
								"deco": "DFmmmmZi",
								"name": "callback"
							}
						],
						"name": "onProgress",
						"comment": " The event handler that gets called to inform of upload/download progress.\n\n Callback_parameters:\n $(CALLBACK_PARAMS)\n\n Callback_returns:\n Return 0 from the callback to signal success, return non-zero to\n abort transfer.\n",
						"originalType": "@property void(int delegate(size_t dlTotal, size_t dlNow, size_t ulTotal, size_t ulNow) callback)"
					},
					{
						"kind": "function",
						"line": 3137,
						"deco": "FZv",
						"endchar": 5,
						"char": 10,
						"name": "clearCommands",
						"comment": " Clear all commands send to ftp server.\n",
						"endline": 3143
					},
					{
						"kind": "function",
						"line": 3159,
						"deco": "FAxaZv",
						"endchar": 5,
						"char": 10,
						"parameters": [
							{
								"deco": "Axa",
								"name": "command"
							}
						],
						"name": "addCommand",
						"comment": " Add a command to send to ftp server.\n\n There is no remove command functionality. Do a $(LREF clearCommands) and\n set the needed commands instead.\n\n Example:\n ---\n import std.net.curl;\n auto client = FTP();\n client.addCommand(\"RNFR my_file.txt\");\n client.addCommand(\"RNTO my_renamed_file.txt\");\n upload(\"my_file.txt\", \"ftp.digitalmars.com\", client);\n ---\n",
						"endline": 3164
					},
					{
						"kind": "function",
						"line": 3167,
						"deco": "FNdAyaZv",
						"endchar": 5,
						"char": 20,
						"parameters": [
							{
								"deco": "Aya",
								"name": "name"
							}
						],
						"name": "encoding",
						"comment": "Connection encoding. Defaults to ISO-8859-1.\n",
						"endline": 3170
					},
					{
						"kind": "function",
						"line": 3173,
						"deco": "FNdZAya",
						"endchar": 5,
						"char": 22,
						"name": "encoding",
						"comment": "ditto\n",
						"endline": 3176
					},
					{
						"kind": "function",
						"line": 3181,
						"deco": "FNdmZv",
						"endchar": 5,
						"char": 20,
						"parameters": [
							{
								"deco": "m",
								"name": "len"
							}
						],
						"name": "contentLength",
						"comment": "       The content length in bytes of the ftp data.\n",
						"originalType": "@property void(size_t len)",
						"endline": 3184
					}
				],
				"char": 1,
				"name": "FTP",
				"comment": "   FTP client functionality.\n\n   See_Also: $(WEB tools.ietf.org/html/rfc959, RFC959)\n"
			},
			{
				"kind": "struct",
				"line": 3205,
				"members": [
					{
						"kind": "function",
						"line": 3241,
						"storageClass": [
							"static"
						],
						"deco": "FAxaZS3std3net4curl4SMTP",
						"endchar": 5,
						"char": 17,
						"parameters": [
							{
								"deco": "Axa",
								"name": "url"
							}
						],
						"name": "opCall",
						"comment": "        Sets to the URL of the SMTP server.\n",
						"endline": 3247
					},
					{
						"kind": "function",
						"line": 3282,
						"deco": "FE3std8typecons41__T4FlagVAyaa12_7468726f774f6e4572726f72Z4FlagZi",
						"endchar": 5,
						"char": 14,
						"parameters": [
							{
								"deco": "E3std8typecons41__T4FlagVAyaa12_7468726f774f6e4572726f72Z4Flag",
								"default": "cast(Flag)true",
								"name": "throwOnError"
							}
						],
						"name": "perform",
						"comment": "        Performs the request as configured.\n        Params:\n        throwOnError = whether to throw an exception or return a CurlCode on error\n",
						"originalType": "CurlCode(ThrowOnError throwOnError = ThrowOnError.yes)",
						"endline": 3285
					},
					{
						"kind": "function",
						"line": 3288,
						"deco": "FNdAxaZv",
						"endchar": 5,
						"char": 20,
						"parameters": [
							{
								"deco": "Axa",
								"name": "url"
							}
						],
						"name": "url",
						"comment": "The URL to specify the location of the resource.\n",
						"endline": 3302
					},
					{
						"kind": "alias",
						"line": 3319,
						"char": 9,
						"name": "requestPause",
						"comment": "Value to return from $(D onSend)/$(D onReceive) delegates in order to\n\npause a request\n"
					},
					{
						"kind": "alias",
						"line": 3322,
						"char": 9,
						"name": "requestAbort",
						"comment": "Value to return from onSend delegate in order to abort a request\n"
					},
					{
						"kind": "function",
						"line": 3327,
						"deco": "FNdZb",
						"char": 24,
						"name": "isStopped",
						"comment": "           True if the instance is stopped. A stopped instance is not usable.\n"
					},
					{
						"kind": "function",
						"line": 3330,
						"deco": "FZv",
						"char": 14,
						"name": "shutdown",
						"comment": "Stop and invalidate this instance.\n"
					},
					{
						"kind": "function",
						"line": 3335,
						"deco": "FNdbZv",
						"char": 24,
						"parameters": [
							{
								"deco": "b",
								"name": "on"
							}
						],
						"name": "verbose",
						"comment": " Set verbose.\n            This will print request information to stderr.\n"
					},
					{
						"kind": "function",
						"line": 3340,
						"deco": "FNdS4core4time8DurationZv",
						"char": 24,
						"parameters": [
							{
								"deco": "S4core4time8Duration",
								"name": "d"
							}
						],
						"name": "dataTimeout",
						"comment": "Set timeout for activity on connection.\n"
					},
					{
						"kind": "function",
						"line": 3345,
						"deco": "FNdS4core4time8DurationZv",
						"char": 24,
						"parameters": [
							{
								"deco": "S4core4time8Duration",
								"name": "d"
							}
						],
						"name": "operationTimeout",
						"comment": " Set maximum time an operation is allowed to take.\n            This includes dns resolution, connecting, data transfer, etc.\n"
					},
					{
						"kind": "function",
						"line": 3348,
						"deco": "FNdS4core4time8DurationZv",
						"char": 24,
						"parameters": [
							{
								"deco": "S4core4time8Duration",
								"name": "d"
							}
						],
						"name": "connectTimeout",
						"comment": "Set timeout for connecting.\n"
					},
					{
						"kind": "function",
						"line": 3355,
						"deco": "FNdAxaZv",
						"char": 24,
						"parameters": [
							{
								"deco": "Axa",
								"name": "host"
							}
						],
						"name": "proxy",
						"comment": " Proxy\n  See: $(WEB curl.haxx.se/libcurl/c/curl_easy_setopt.html#CURLOPTPROXY, _proxy)\n"
					},
					{
						"kind": "function",
						"line": 3360,
						"deco": "FNdtZv",
						"char": 24,
						"parameters": [
							{
								"deco": "t",
								"name": "port"
							}
						],
						"name": "proxyPort",
						"comment": " Proxy port\n  See: $(WEB curl.haxx.se/libcurl/c/curl_easy_setopt.html#CURLOPTPROXYPORT, _proxy_port)\n"
					},
					{
						"kind": "alias",
						"line": 3363,
						"deco": "E3etc1c4curl9CurlProxy",
						"char": 9,
						"name": "CurlProxy",
						"comment": "Type of proxy\n"
					},
					{
						"kind": "function",
						"line": 3368,
						"deco": "FNdE3etc1c4curl9CurlProxyZv",
						"char": 24,
						"parameters": [
							{
								"deco": "E3etc1c4curl9CurlProxy",
								"name": "type"
							}
						],
						"name": "proxyType",
						"comment": " Proxy type\n  See: $(WEB curl.haxx.se/libcurl/c/curl_easy_setopt.html#CURLOPTPROXY, _proxy_type)\n"
					},
					{
						"kind": "function",
						"line": 3371,
						"deco": "FNdS4core4time8DurationZv",
						"char": 24,
						"parameters": [
							{
								"deco": "S4core4time8Duration",
								"name": "d"
							}
						],
						"name": "dnsTimeout",
						"comment": "DNS lookup timeout.\n"
					},
					{
						"kind": "function",
						"line": 3384,
						"deco": "FNdAxaZv",
						"char": 24,
						"parameters": [
							{
								"deco": "Axa",
								"name": "i"
							}
						],
						"name": "netInterface",
						"comment": " The network interface to use in form of the the IP of the interface.\n\n Example:\n ----\n theprotocol.netInterface = \"192.168.1.32\";\n theprotocol.netInterface = [ 192, 168, 1, 32 ];\n ----\n\n See: $(XREF socket, InternetAddress)\n"
					},
					{
						"kind": "function",
						"line": 3387,
						"deco": "FNdxG4hZv",
						"char": 24,
						"parameters": [
							{
								"deco": "xG4h",
								"name": "i"
							}
						],
						"name": "netInterface",
						"comment": "ditto\n",
						"originalType": "@property void(const(ubyte)[4] i)"
					},
					{
						"kind": "function",
						"line": 3390,
						"deco": "FNdC3std6socket15InternetAddressZv",
						"char": 24,
						"parameters": [
							{
								"deco": "C3std6socket15InternetAddress",
								"name": "i"
							}
						],
						"name": "netInterface",
						"comment": "ditto\n"
					},
					{
						"kind": "function",
						"line": 3397,
						"deco": "FNdtZv",
						"char": 24,
						"parameters": [
							{
								"deco": "t",
								"name": "port"
							}
						],
						"name": "localPort",
						"comment": "           Set the local outgoing port to use.\n           Params:\n           port = the first outgoing port number to try and use\n"
					},
					{
						"kind": "function",
						"line": 3406,
						"deco": "FNdtZv",
						"char": 24,
						"parameters": [
							{
								"deco": "t",
								"name": "range"
							}
						],
						"name": "localPortRange",
						"comment": "           Set the local outgoing port range to use.\n           This can be used together with the localPort property.\n           Params:\n           range = if the first port is occupied then try this many\n           port number forwards\n"
					},
					{
						"kind": "function",
						"line": 3411,
						"deco": "FNdbZv",
						"char": 24,
						"parameters": [
							{
								"deco": "b",
								"name": "on"
							}
						],
						"name": "tcpNoDelay",
						"comment": " Set the tcp no-delay socket option on or off.\n            See: $(WEB curl.haxx.se/libcurl/c/curl_easy_setopt.html#CURLOPTTCPNODELAY, nodelay)\n"
					},
					{
						"kind": "function",
						"line": 3428,
						"deco": "FAxaAxaAxaZv",
						"char": 14,
						"parameters": [
							{
								"deco": "Axa",
								"name": "username"
							},
							{
								"deco": "Axa",
								"name": "password"
							},
							{
								"deco": "Axa",
								"default": "\"\"",
								"name": "domain"
							}
						],
						"name": "setAuthentication",
						"comment": "           Set the user name, password and optionally domain for authentication\n           purposes.\n\n           Some protocols may need authentication in some cases. Use this\n           function to provide credentials.\n\n           Params:\n           username = the username\n           password = the password\n           domain = used for NTLM authentication only and is set to the NTLM domain\n           name\n"
					},
					{
						"kind": "function",
						"line": 3438,
						"deco": "FAxaAxaZv",
						"char": 14,
						"parameters": [
							{
								"deco": "Axa",
								"name": "username"
							},
							{
								"deco": "Axa",
								"name": "password"
							}
						],
						"name": "setProxyAuthentication",
						"comment": "           Set the user name and password for proxy authentication.\n\n           Params:\n           username = the username\n           password = the password\n"
					},
					{
						"kind": "function",
						"line": 3453,
						"deco": "FNdDFAvZmZv",
						"char": 24,
						"parameters": [
							{
								"deco": "DFAvZm",
								"name": "callback"
							}
						],
						"name": "onSend",
						"comment": " The event handler that gets called when data is needed for sending. The\n length of the $(D void[]) specifies the maximum number of bytes that can\n be sent.\n\n Returns:\n The callback returns the number of elements in the buffer that have been\n filled and are ready to send.\n The special value $(D .abortRequest) can be returned in order to abort the\n current request.\n The special value $(D .pauseRequest) can be returned in order to pause the\n current request.\n",
						"originalType": "@property void(size_t delegate(void[]) callback)"
					},
					{
						"kind": "function",
						"line": 3466,
						"deco": "FNdDFAhZmZv",
						"char": 24,
						"parameters": [
							{
								"deco": "DFAhZm",
								"name": "callback"
							}
						],
						"name": "onReceive",
						"comment": " The event handler that receives incoming data. Be sure to copy the\n incoming ubyte[] since it is not guaranteed to be valid after the\n callback returns.\n\n Returns:\n The callback returns the incoming bytes read. If not the entire array is\n the request will abort.\n The special value .pauseRequest can be returned in order to pause the\n current request.\n",
						"originalType": "@property void(size_t delegate(ubyte[]) callback)"
					},
					{
						"kind": "function",
						"line": 3478,
						"deco": "FNdDFmmmmZiZv",
						"char": 24,
						"parameters": [
							{
								"deco": "DFmmmmZi",
								"name": "callback"
							}
						],
						"name": "onProgress",
						"comment": " The event handler that gets called to inform of upload/download progress.\n\n Callback_parameters:\n $(CALLBACK_PARAMS)\n\n Callback_returns:\n Return 0 from the callback to signal success, return non-zero to\n abort transfer.\n",
						"originalType": "@property void(int delegate(size_t dlTotal, size_t dlNow, size_t ulTotal, size_t ulNow) callback)"
					},
					{
						"kind": "template",
						"line": 3485,
						"members": [
							{
								"kind": "function",
								"line": 3485,
								"endchar": 5,
								"char": 20,
								"type": "@property void(const(char)[] sender)",
								"parameters": [
									{
										"type": "const(char)[]",
										"name": "sender"
									}
								],
								"name": "mailFrom",
								"endline": 3489
							}
						],
						"char": 20,
						"parameters": [],
						"comment": "        Setter for the sender's email address.\n",
						"name": "mailFrom"
					},
					{
						"kind": "template",
						"line": 3494,
						"members": [
							{
								"kind": "function",
								"line": 3494,
								"endchar": 5,
								"char": 10,
								"type": "void(const(char)[][] recipients...)",
								"parameters": [
									{
										"type": "const(char)[][]",
										"name": "recipients"
									}
								],
								"name": "mailTo",
								"endline": 3505
							}
						],
						"char": 10,
						"parameters": [],
						"comment": "        Setter for the recipient email addresses.\n",
						"name": "mailTo"
					},
					{
						"kind": "function",
						"line": 3511,
						"deco": "FNdAyaZv",
						"endchar": 5,
						"char": 20,
						"parameters": [
							{
								"deco": "Aya",
								"name": "msg"
							}
						],
						"name": "message",
						"comment": "        Sets the message body text.\n",
						"endline": 3514
					}
				],
				"char": 1,
				"name": "SMTP",
				"comment": " Basic SMTP protocol support.\n\n Example:\n ---\n import std.net.curl;\n\n // Send an email with SMTPS\n auto smtp = SMTP(\"smtps://smtp.gmail.com\");\n smtp.setAuthentication(\"from.addr@gmail.com\", \"password\");\n smtp.mailTo = [\"<to.addr@gmail.com>\"];\n smtp.mailFrom = \"<from.addr@gmail.com>\";\n smtp.message = \"Example Message\";\n smtp.perform();\n ---\n\n See_Also: $(WEB www.ietf.org/rfc/rfc2821.txt, RFC2821)\n"
			},
			{
				"kind": "class",
				"line": 3520,
				"base": "object.Exception",
				"members": [
					{
						"kind": "constructor",
						"line": 3530,
						"deco": "FNaNbNfAyaAyamC6object9ThrowableZC3std3net4curl13CurlException",
						"endchar": 5,
						"char": 5,
						"parameters": [
							{
								"deco": "Aya",
								"name": "msg"
							},
							{
								"deco": "Aya",
								"default": "__FILE__",
								"name": "file"
							},
							{
								"deco": "m",
								"default": "cast(ulong)__LINE__",
								"name": "line"
							},
							{
								"deco": "C6object9Throwable",
								"default": "null",
								"name": "next"
							}
						],
						"name": "this",
						"comment": "        Params:\n            msg  = The message for the exception.\n            file = The file where the exception occurred.\n            line = The line number where the exception occurred.\n            next = The previous exception in the chain of exceptions, if any.\n",
						"originalType": "pure nothrow @safe (string msg, string file = __FILE__, size_t line = __LINE__, Throwable next = null)",
						"endline": 3536
					}
				],
				"char": 1,
				"name": "CurlException",
				"comment": "    Exception thrown on errors in std.net.curl functions.\n"
			},
			{
				"kind": "class",
				"line": 3542,
				"base": "std.net.curl.CurlException",
				"members": [
					{
						"kind": "constructor",
						"line": 3552,
						"deco": "FNaNbNfAyaAyamC6object9ThrowableZC3std3net4curl20CurlTimeoutException",
						"endchar": 5,
						"char": 5,
						"parameters": [
							{
								"deco": "Aya",
								"name": "msg"
							},
							{
								"deco": "Aya",
								"default": "__FILE__",
								"name": "file"
							},
							{
								"deco": "m",
								"default": "cast(ulong)__LINE__",
								"name": "line"
							},
							{
								"deco": "C6object9Throwable",
								"default": "null",
								"name": "next"
							}
						],
						"name": "this",
						"comment": "        Params:\n            msg  = The message for the exception.\n            file = The file where the exception occurred.\n            line = The line number where the exception occurred.\n            next = The previous exception in the chain of exceptions, if any.\n",
						"originalType": "pure nothrow @safe (string msg, string file = __FILE__, size_t line = __LINE__, Throwable next = null)",
						"endline": 3558
					}
				],
				"char": 1,
				"name": "CurlTimeoutException",
				"comment": "    Exception thrown on timeout errors in std.net.curl functions.\n"
			},
			{
				"kind": "alias",
				"line": 3562,
				"deco": "i",
				"char": 1,
				"name": "CurlCode",
				"comment": "Equal to $(ECXREF curl, CURLcode)\n"
			},
			{
				"kind": "alias",
				"line": 3566,
				"char": 1,
				"name": "ThrowOnError",
				"comment": "Flag to specify whether or not an exception is thrown on error.\n"
			},
			{
				"kind": "struct",
				"line": 3578,
				"members": [
					{
						"kind": "function",
						"line": 3614,
						"deco": "FZv",
						"endchar": 5,
						"char": 10,
						"name": "initialize",
						"comment": "       Initialize the instance by creating a working curl handle.\n",
						"endline": 3621
					},
					{
						"kind": "function",
						"line": 3631,
						"deco": "FZS3std3net4curl4Curl",
						"endchar": 5,
						"char": 10,
						"name": "dup",
						"comment": "       Duplicate this handle.\n\n       The new handle will have all options set as the one it was duplicated\n       from. An exception to this is that all options that cannot be shared\n       across threads are reset thereby making it safe to use the duplicate\n       in a new thread.\n",
						"endline": 3684
					},
					{
						"kind": "function",
						"line": 3715,
						"deco": "FZv",
						"endchar": 5,
						"char": 10,
						"name": "shutdown",
						"comment": "        Stop and invalidate this curl instance.\n        Warning: Do not call this from inside a callback handler e.g. $(D onReceive).\n",
						"endline": 3721
					},
					{
						"kind": "function",
						"line": 3726,
						"deco": "FbbZv",
						"endchar": 5,
						"char": 10,
						"parameters": [
							{
								"deco": "b",
								"name": "sendingPaused"
							},
							{
								"deco": "b",
								"name": "receivingPaused"
							}
						],
						"name": "pause",
						"comment": "       Pausing and continuing transfers.\n",
						"endline": 3732
					},
					{
						"kind": "function",
						"line": 3740,
						"deco": "FE3etc1c4curl10CurlOptionAxaZv",
						"endchar": 5,
						"char": 10,
						"parameters": [
							{
								"deco": "E3etc1c4curl10CurlOption",
								"name": "option"
							},
							{
								"deco": "Axa",
								"name": "value"
							}
						],
						"name": "set",
						"comment": "       Set a string curl option.\n       Params:\n       option = A $(ECXREF curl, CurlOption) as found in the curl documentation\n       value = The string\n",
						"endline": 3744
					},
					{
						"kind": "function",
						"line": 3752,
						"deco": "FE3etc1c4curl10CurlOptionlZv",
						"endchar": 5,
						"char": 10,
						"parameters": [
							{
								"deco": "E3etc1c4curl10CurlOption",
								"name": "option"
							},
							{
								"deco": "l",
								"name": "value"
							}
						],
						"name": "set",
						"comment": "       Set a long curl option.\n       Params:\n       option = A $(ECXREF curl, CurlOption) as found in the curl documentation\n       value = The long\n",
						"endline": 3756
					},
					{
						"kind": "function",
						"line": 3764,
						"deco": "FE3etc1c4curl10CurlOptionPvZv",
						"endchar": 5,
						"char": 10,
						"parameters": [
							{
								"deco": "E3etc1c4curl10CurlOption",
								"name": "option"
							},
							{
								"deco": "Pv",
								"name": "value"
							}
						],
						"name": "set",
						"comment": "       Set a void* curl option.\n       Params:\n       option = A $(ECXREF curl, CurlOption) as found in the curl documentation\n       value = The pointer\n",
						"endline": 3768
					},
					{
						"kind": "function",
						"line": 3775,
						"deco": "FE3etc1c4curl10CurlOptionZv",
						"endchar": 5,
						"char": 10,
						"parameters": [
							{
								"deco": "E3etc1c4curl10CurlOption",
								"name": "option"
							}
						],
						"name": "clear",
						"comment": "       Clear a pointer option.\n       Params:\n       option = A $(ECXREF curl, CurlOption) as found in the curl documentation\n",
						"endline": 3779
					},
					{
						"kind": "function",
						"line": 3787,
						"deco": "FE3etc1c4curl10CurlOptionZv",
						"endchar": 5,
						"char": 10,
						"parameters": [
							{
								"deco": "E3etc1c4curl10CurlOption",
								"name": "option"
							}
						],
						"name": "clearIfSupported",
						"comment": "       Clear a pointer option. Does not raise an exception if the underlying\n       libcurl does not support the option. Use sparingly.\n       Params:\n       option = A $(ECXREF curl, CurlOption) as found in the curl documentation\n",
						"endline": 3795
					},
					{
						"kind": "function",
						"line": 3804,
						"deco": "FE3std8typecons41__T4FlagVAyaa12_7468726f774f6e4572726f72Z4FlagZi",
						"endchar": 5,
						"char": 14,
						"parameters": [
							{
								"deco": "E3std8typecons41__T4FlagVAyaa12_7468726f774f6e4572726f72Z4Flag",
								"default": "cast(Flag)true",
								"name": "throwOnError"
							}
						],
						"name": "perform",
						"comment": "       perform the curl request by doing the HTTP,FTP etc. as it has\n       been setup beforehand.\n\n       Params:\n       throwOnError = whether to throw an exception or return a CurlCode on error\n",
						"originalType": "CurlCode(ThrowOnError throwOnError = ThrowOnError.yes)",
						"endline": 3811
					},
					{
						"kind": "function",
						"line": 3844,
						"deco": "FNdDFAhZmZv",
						"endchar": 5,
						"char": 20,
						"parameters": [
							{
								"deco": "DFAhZm",
								"name": "callback"
							}
						],
						"name": "onReceive",
						"comment": " The event handler that receives incoming data.\n\n Params:\n callback = the callback that receives the $(D ubyte[]) data.\n Be sure to copy the incoming data and not store\n a slice.\n\n Returns:\n The callback returns the incoming bytes read. If not the entire array is\n the request will abort.\n The special value HTTP.pauseRequest can be returned in order to pause the\n current request.\n\n Example:\n ----\n import std.net.curl, std.stdio;\n Curl curl;\n curl.initialize();\n curl.set(CurlOption.url, \"http://dlang.org\");\n curl.onReceive = (ubyte[] data) { writeln(\"Got data\", to!(const(char)[])(data)); return data.length;};\n curl.perform();\n ----\n",
						"originalType": "@property void(size_t delegate(InData) callback)",
						"endline": 3853
					},
					{
						"kind": "function",
						"line": 3875,
						"deco": "FNdDFxAaZvZv",
						"endchar": 5,
						"char": 20,
						"parameters": [
							{
								"deco": "DFxAaZv",
								"name": "callback"
							}
						],
						"name": "onReceiveHeader",
						"comment": " The event handler that receives incoming headers for protocols\n that uses headers.\n\n Params:\n callback = the callback that receives the header string.\n Make sure the callback copies the incoming params if\n it needs to store it because they are references into\n the backend and may very likely change.\n\n Example:\n ----\n import std.net.curl, std.stdio;\n Curl curl;\n curl.initialize();\n curl.set(CurlOption.url, \"http://dlang.org\");\n curl.onReceiveHeader = (in char[] header) { writeln(header); };\n curl.perform();\n ----\n",
						"originalType": "@property void(void delegate(in char[]) callback)",
						"endline": 3886
					},
					{
						"kind": "function",
						"line": 3922,
						"deco": "FNdDFAvZmZv",
						"endchar": 5,
						"char": 20,
						"parameters": [
							{
								"deco": "DFAvZm",
								"name": "callback"
							}
						],
						"name": "onSend",
						"comment": " The event handler that gets called when data is needed for sending.\n\n Params:\n callback = the callback that has a $(D void[]) buffer to be filled\n\n Returns:\n The callback returns the number of elements in the buffer that have been\n filled and are ready to send.\n The special value $(D Curl.abortRequest) can be returned in\n order to abort the current request.\n The special value $(D Curl.pauseRequest) can be returned in order to\n pause the current request.\n\n Example:\n ----\n import std.net.curl;\n Curl curl;\n curl.initialize();\n curl.set(CurlOption.url, \"http://dlang.org\");\n\n string msg = \"Hello world\";\n curl.onSend = (void[] data)\n {\n     auto m = cast(void[])msg;\n     size_t length = m.length > data.length ? data.length : m.length;\n     if (length == 0) return 0;\n     data[0..length] = m[0..length];\n     msg = msg[length..$];\n     return length;\n };\n curl.perform();\n ----\n",
						"originalType": "@property void(size_t delegate(OutData) callback)",
						"endline": 3931
					},
					{
						"kind": "function",
						"line": 3958,
						"deco": "FNdDFlE3etc1c4curl11CurlSeekPosZE3etc1c4curl8CurlSeekZv",
						"endchar": 5,
						"char": 20,
						"parameters": [
							{
								"deco": "DFlE3etc1c4curl11CurlSeekPosZE3etc1c4curl8CurlSeek",
								"name": "callback"
							}
						],
						"name": "onSeek",
						"comment": " The event handler that gets called when the curl backend needs to seek\n the data to be sent.\n\n Params:\n callback = the callback that receives a seek offset and a seek position\n            $(ECXREF curl, CurlSeekPos)\n\n Returns:\n The callback returns the success state of the seeking\n $(ECXREF curl, CurlSeek)\n\n Example:\n ----\n import std.net.curl;\n Curl curl;\n curl.initialize();\n curl.set(CurlOption.url, \"http://dlang.org\");\n curl.onSeek = (long p, CurlSeekPos sp)\n {\n     return CurlSeek.cantseek;\n };\n curl.perform();\n ----\n",
						"endline": 3967
					},
					{
						"kind": "function",
						"line": 3992,
						"deco": "FNdDFE3std6socket8socket_tE3etc1c4curl12CurlSockTypeZiZv",
						"endchar": 5,
						"char": 20,
						"parameters": [
							{
								"deco": "DFE3std6socket8socket_tE3etc1c4curl12CurlSockTypeZi",
								"name": "callback"
							}
						],
						"name": "onSocketOption",
						"comment": " The event handler that gets called when the net socket has been created\n but a $(D connect()) call has not yet been done. This makes it possible to set\n misc. socket options.\n\n Params:\n callback = the callback that receives the socket and socket type\n $(ECXREF curl, CurlSockType)\n\n Returns:\n Return 0 from the callback to signal success, return 1 to signal error\n and make curl close the socket\n\n Example:\n ----\n import std.net.curl;\n Curl curl;\n curl.initialize();\n curl.set(CurlOption.url, \"http://dlang.org\");\n curl.onSocketOption = delegate int(curl_socket_t s, CurlSockType t) { /+ do stuff +/ };\n curl.perform();\n ----\n",
						"originalType": "@property void(int delegate(curl_socket_t, CurlSockType) callback)",
						"endline": 4004
					},
					{
						"kind": "function",
						"line": 4032,
						"deco": "FNdDFmmmmZiZv",
						"endchar": 5,
						"char": 20,
						"parameters": [
							{
								"deco": "DFmmmmZi",
								"name": "callback"
							}
						],
						"name": "onProgress",
						"comment": " The event handler that gets called to inform of upload/download progress.\n\n Params:\n callback = the callback that receives the (total bytes to download,\n currently downloaded bytes, total bytes to upload, currently uploaded\n bytes).\n\n Returns:\n Return 0 from the callback to signal success, return non-zero to abort\n transfer\n\n Example:\n ----\n import std.net.curl;\n Curl curl;\n curl.initialize();\n curl.set(CurlOption.url, \"http://dlang.org\");\n curl.onProgress = delegate int(size_t dltotal, size_t dlnow, size_t ultotal, size_t uln)\n {\n     writeln(\"Progress: downloaded bytes \", dlnow, \" of \", dltotal);\n     writeln(\"Progress: uploaded bytes \", ulnow, \" of \", ultotal);\n     curl.perform();\n };\n ----\n",
						"originalType": "@property void(int delegate(size_t dlTotal, size_t dlNow, size_t ulTotal, size_t ulNow) callback)",
						"endline": 4046
					}
				],
				"char": 1,
				"name": "Curl",
				"comment": "  Wrapper to provide a better interface to libcurl than using the plain C API.\n  It is recommended to use the $(D HTTP)/$(D FTP) etc. structs instead unless\n  raw access to libcurl is needed.\n\n  Warning: This struct uses interior pointers for callbacks. Only allocate it\n  on the stack if you never move or copy it. This also means passing by reference\n  when passing Curl to other functions. Otherwise always allocate on\n  the heap.\n"
			}
		],
		"name": "std.net.curl",
		"comment": "Networking client functionality as provided by $(WEB _curl.haxx.se/libcurl,\nlibcurl). The libcurl library must be installed on the system in order to use\nthis module.\n\n$(SCRIPT inhibitQuickIndex = 1;)\n\n$(DIVC quickindex,\n$(BOOKTABLE ,\n$(TR $(TH Category) $(TH Functions)\n)\n$(TR $(TDNW High level) $(TD $(MYREF download) $(MYREF upload) $(MYREF get)\n$(MYREF post) $(MYREF put) $(MYREF del) $(MYREF options) $(MYREF trace)\n$(MYREF connect) $(MYREF byLine) $(MYREF byChunk)\n$(MYREF byLineAsync) $(MYREF byChunkAsync) )\n)\n$(TR $(TDNW Low level) $(TD $(MYREF HTTP) $(MYREF FTP) $(MYREF\nSMTP) )\n)\n)\n)\n\nNote:\nYou may need to link to the $(B curl) library, e.g. by adding $(D \"libs\": [\"curl\"])\nto your $(B dub.json) file if you are using $(LINK2 http://code.dlang.org, DUB).\n\nWindows x86 note:\nA DMD compatible libcurl static library can be downloaded from the dlang.org\n$(LINK2 http://dlang.org/download.html, download page).\n\nCompared to using libcurl directly this module allows simpler client code for\ncommon uses, requires no unsafe operations, and integrates better with the rest\nof the language. Futhermore it provides <a href=\"std_range.html\">$(D range)</a>\naccess to protocols supported by libcurl both synchronously and asynchronously.\n\nA high level and a low level API are available. The high level API is built\nentirely on top of the low level one.\n\nThe high level API is for commonly used functionality such as HTTP/FTP get. The\n$(LREF byLineAsync) and $(LREF byChunkAsync) provides asynchronous <a\nhref=\"std_range.html\">$(D ranges)</a> that performs the request in another\nthread while handling a line/chunk in the current thread.\n\nThe low level API allows for streaming and other advanced features.\n\n$(BOOKTABLE Cheat Sheet,\n$(TR $(TH Function Name) $(TH Description)\n)\n$(LEADINGROW High level)\n$(TR $(TDNW $(LREF download)) $(TD $(D\ndownload(\"ftp.digitalmars.com/sieve.ds\", \"/tmp/downloaded-ftp-file\"))\ndownloads file from URL to file system.)\n)\n$(TR $(TDNW $(LREF upload)) $(TD $(D\nupload(\"/tmp/downloaded-ftp-file\", \"ftp.digitalmars.com/sieve.ds\");)\nuploads file from file system to URL.)\n)\n$(TR $(TDNW $(LREF get)) $(TD $(D\nget(\"dlang.org\")) returns a string containing the dlang.org web page.)\n)\n$(TR $(TDNW $(LREF put)) $(TD $(D\nput(\"dlang.org\", \"Hi\")) returns a string containing\nthe dlang.org web page. after a HTTP PUT of \"hi\")\n)\n$(TR $(TDNW $(LREF post)) $(TD $(D\npost(\"dlang.org\", \"Hi\")) returns a string containing\nthe dlang.org web page. after a HTTP POST of \"hi\")\n)\n$(TR $(TDNW $(LREF byLine)) $(TD $(D\nbyLine(\"dlang.org\")) returns a range of strings containing the\ndlang.org web page.)\n)\n$(TR $(TDNW $(LREF byChunk)) $(TD $(D\nbyChunk(\"dlang.org\", 10)) returns a range of ubyte[10] containing the\ndlang.org web page.)\n)\n$(TR $(TDNW $(LREF byLineAsync)) $(TD $(D\nbyLineAsync(\"dlang.org\")) returns a range of strings containing the dlang.org web\n page asynchronously.)\n)\n$(TR $(TDNW $(LREF byChunkAsync)) $(TD $(D\nbyChunkAsync(\"dlang.org\", 10)) returns a range of ubyte[10] containing the\ndlang.org web page asynchronously.)\n)\n$(LEADINGROW Low level\n)\n$(TR $(TDNW $(LREF HTTP)) $(TD $(D HTTP) struct for advanced usage))\n$(TR $(TDNW $(LREF FTP)) $(TD $(D FTP) struct for advanced usage))\n$(TR $(TDNW $(LREF SMTP)) $(TD $(D SMTP) struct for advanced usage))\n)\n\n\nExample:\n---\nimport std.net.curl, std.stdio;\n\n// Return a string containing the content specified by an URL\nstring content = get(\"dlang.org\");\n\n// Post data and return a string containing the content specified by an URL\nstring content = post(\"mydomain.com/here.cgi\", \"post data\");\n\n// Get content of file from ftp server\nstring content = get(\"ftp.digitalmars.com/sieve.ds\");\n\n// Post and print out content line by line. The request is done in another thread.\nforeach (line; byLineAsync(\"dlang.org\", \"Post data\"))\n    writeln(line);\n\n// Get using a line range and proxy settings\nauto client = HTTP();\nclient.proxy = \"1.2.3.4\";\nforeach (line; byLine(\"dlang.org\", client))\n    writeln(line);\n---\n\nFor more control than the high level functions provide, use the low level API:\n\nExample:\n---\nimport std.net.curl, std.stdio;\n\n// GET with custom data receivers\nauto http = HTTP(\"dlang.org\");\nhttp.onReceiveHeader =\n    (in char[] key, in char[] value) { writeln(key, \": \", value); };\nhttp.onReceive = (ubyte[] data) { /+ drop +/ return data.length; };\nhttp.perform();\n---\n\nFirst, an instance of the reference-counted HTTP struct is created. Then the\ncustom delegates are set. These will be called whenever the HTTP instance\nreceives a header and a data buffer, respectively. In this simple example, the\nheaders are written to stdout and the data is ignored. If the request should be\nstopped before it has finished then return something less than data.length from\nthe onReceive callback. See $(LREF onReceiveHeader)/$(LREF onReceive) for more\ninformation. Finally the HTTP request is effected by calling perform(), which is\nsynchronous.\n\nSource: $(PHOBOSSRC std/net/_curl.d)\n\nCopyright: Copyright Jonas Drewsen 2011-2012\nLicense: $(WEB www.boost.org/LICENSE_1_0.txt, Boost License 1.0).\nAuthors: Jonas Drewsen. Some of the SMTP code contributed by Jimmy Cao.\n\nCredits: The functionally is based on $(WEB _curl.haxx.se/libcurl, libcurl).\n         LibCurl is licensed under an MIT/X derivative license.\n"
	},
	{
		"kind": "module",
		"file": "../phobos/std/net/isemail.d",
		"members": [
			{
				"kind": "template",
				"line": 59,
				"constraint": "isSomeChar!Char",
				"members": [
					{
						"kind": "function",
						"line": 59,
						"endchar": 1,
						"char": 13,
						"type": "EmailStatus(const(Char)[] email, CheckDns checkDNS = CheckDns.no, EmailStatusCode errorLevel = EmailStatusCode.none)",
						"parameters": [
							{
								"type": "const(Char)[]",
								"name": "email"
							},
							{
								"default": "CheckDns.no",
								"type": "CheckDns",
								"name": "checkDNS"
							},
							{
								"default": "EmailStatusCode.none",
								"type": "EmailStatusCode",
								"name": "errorLevel"
							}
						],
						"name": "isEmail",
						"endline": 763
					}
				],
				"char": 13,
				"parameters": [
					{
						"kind": "type",
						"name": "Char"
					}
				],
				"comment": " Check that an email address conforms to RFCs 5321, 5322 and others.\n\n As of Version 3.0, we are now distinguishing clearly between a Mailbox as defined\n by RFC 5321 and an addr-spec as defined by RFC 5322. Depending on the context,\n either can be regarded as a valid email address. The RFC 5321 Mailbox specification\n is more restrictive (comments, white space and obsolete forms are not allowed).\n\n Note: The DNS check is currently not implemented.\n\n Params:\n     email = The email address to check\n     checkDNS = If CheckDns.yes then a DNS check for MX records will be made\n     errorLevel = Determines the boundary between valid and invalid addresses.\n                  Status codes above this number will be returned as-is,\n                  status codes below will be returned as EmailStatusCode.valid.\n                  Thus the calling program can simply look for EmailStatusCode.valid\n                  if it is only interested in whether an address is valid or not. The\n                  $(D_PARAM errorLevel) will determine how \"picky\" isEmail() is about\n                  the address.\n\n                  If omitted or passed as EmailStatusCode.none then isEmail() will\n                  not perform any finer grained error checking and an address is\n                  either considered valid or not. Email status code will either be\n                  EmailStatusCode.valid or EmailStatusCode.error.\n\n Returns: an EmailStatus, indicating the status of the email address.\n",
				"name": "isEmail"
			},
			{
				"kind": "enum",
				"line": 1233,
				"members": [
					{
						"kind": "enum member",
						"line": 1236,
						"value": "0",
						"char": 5,
						"name": "no",
						"comment": "Does not perform DNS checking\n"
					},
					{
						"kind": "enum member",
						"line": 1239,
						"value": "1",
						"char": 5,
						"name": "yes",
						"comment": "Performs DNS checking\n"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "CheckDns",
				"comment": "Enum for indicating if the isEmail function should perform a DNS check or not.\n"
			},
			{
				"kind": "struct",
				"line": 1243,
				"members": [
					{
						"kind": "function",
						"line": 1272,
						"deco": "xFNdZb",
						"endchar": 5,
						"char": 20,
						"name": "valid",
						"comment": "Indicates if the email address is valid or not.\n",
						"endline": 1275
					},
					{
						"kind": "function",
						"line": 1278,
						"deco": "xFNdZAya",
						"endchar": 5,
						"char": 22,
						"name": "localPart",
						"comment": "The local part of the email address, that is, the part before the @ sign.\n",
						"endline": 1281
					},
					{
						"kind": "function",
						"line": 1284,
						"deco": "xFNdZAya",
						"endchar": 5,
						"char": 22,
						"name": "domainPart",
						"comment": "The domain part of the email address, that is, the part after the @ sign.\n",
						"endline": 1287
					},
					{
						"kind": "function",
						"line": 1290,
						"deco": "xFNdZE3std3net7isemail15EmailStatusCode",
						"endchar": 5,
						"char": 31,
						"name": "statusCode",
						"comment": "The email status code\n",
						"endline": 1293
					},
					{
						"kind": "function",
						"line": 1296,
						"deco": "xFNdZAya",
						"endchar": 5,
						"char": 22,
						"name": "status",
						"comment": "Returns a describing string of the status code\n",
						"endline": 1299
					},
					{
						"kind": "function",
						"line": 1302,
						"deco": "xFZAya",
						"endchar": 5,
						"char": 12,
						"name": "toString",
						"comment": "Returns a textual representation of the email status\n",
						"endline": 1307
					}
				],
				"char": 1,
				"name": "EmailStatus",
				"comment": "This struct represents the status of an email address\n"
			},
			{
				"kind": "function",
				"line": 1311,
				"deco": "FE3std3net7isemail15EmailStatusCodeZAya",
				"endchar": 1,
				"char": 8,
				"parameters": [
					{
						"deco": "E3std3net7isemail15EmailStatusCode",
						"name": "statusCode"
					}
				],
				"name": "statusCodeDescription",
				"comment": "Returns a describing string of the given status code\n",
				"endline": 1440
			},
			{
				"kind": "enum",
				"line": 1446,
				"members": [
					{
						"kind": "enum member",
						"line": 1451,
						"value": "1",
						"char": 5,
						"name": "validCategory",
						"comment": "Address is valid\n"
					},
					{
						"kind": "enum member",
						"line": 1454,
						"value": "7",
						"char": 5,
						"name": "dnsWarning",
						"comment": "Address is valid but a DNS check was not successful\n"
					},
					{
						"kind": "enum member",
						"line": 1457,
						"value": "15",
						"char": 5,
						"name": "rfc5321",
						"comment": "Address is valid for SMTP but has unusual elements\n"
					},
					{
						"kind": "enum member",
						"line": 1460,
						"value": "31",
						"char": 5,
						"name": "cFoldingWhitespace",
						"comment": "Address is valid within the message but cannot be used unmodified for the envelope\n"
					},
					{
						"kind": "enum member",
						"line": 1463,
						"value": "63",
						"char": 5,
						"name": "deprecated_",
						"comment": "Address contains deprecated elements but may still be valid in restricted contexts\n"
					},
					{
						"kind": "enum member",
						"line": 1466,
						"value": "127",
						"char": 5,
						"name": "rfc5322",
						"comment": "The address is only valid according to the broad definition of RFC 5322. It is otherwise invalid\n"
					},
					{
						"kind": "enum member",
						"line": 1473,
						"value": "252",
						"char": 5,
						"name": "any",
						"comment": " All finer grained error checking is turned on. Address containing errors or\n warnings is considered invalid. A specific email status code will be\n returned indicating the error/warning of the address.\n"
					},
					{
						"kind": "enum member",
						"line": 1479,
						"value": "253",
						"char": 5,
						"name": "none",
						"comment": " Address is either considered valid or not, no finer grained error checking\n is performed. Returned email status code will be either Error or Valid.\n"
					},
					{
						"kind": "enum member",
						"line": 1485,
						"value": "254",
						"char": 5,
						"name": "warning",
						"comment": " Address containing warnings is considered valid, that is,\n any status code below 16 is considered valid.\n"
					},
					{
						"kind": "enum member",
						"line": 1488,
						"value": "255",
						"char": 5,
						"name": "error",
						"comment": "Address is invalid for any purpose\n"
					},
					{
						"kind": "enum member",
						"line": 1495,
						"value": "0",
						"char": 5,
						"name": "valid",
						"comment": "Address is valid\n"
					},
					{
						"kind": "enum member",
						"line": 1500,
						"value": "5",
						"char": 5,
						"name": "dnsWarningNoMXRecord",
						"comment": "Could not find an MX record for this domain but an A-record does exist\n"
					},
					{
						"kind": "enum member",
						"line": 1503,
						"value": "6",
						"char": 5,
						"name": "dnsWarningNoRecord",
						"comment": "Could not find an MX record or an A-record for this domain\n"
					},
					{
						"kind": "enum member",
						"line": 1510,
						"value": "9",
						"char": 5,
						"name": "rfc5321TopLevelDomain",
						"comment": "Address is valid but at a Top Level Domain\n"
					},
					{
						"kind": "enum member",
						"line": 1513,
						"value": "10",
						"char": 5,
						"name": "rfc5321TopLevelDomainNumeric",
						"comment": "Address is valid but the Top Level Domain begins with a number\n"
					},
					{
						"kind": "enum member",
						"line": 1516,
						"value": "11",
						"char": 5,
						"name": "rfc5321QuotedString",
						"comment": "Address is valid but contains a quoted string\n"
					},
					{
						"kind": "enum member",
						"line": 1519,
						"value": "12",
						"char": 5,
						"name": "rfc5321AddressLiteral",
						"comment": "Address is valid but at a literal address not a domain\n"
					},
					{
						"kind": "enum member",
						"line": 1522,
						"value": "13",
						"char": 5,
						"name": "rfc5321IpV6Deprecated",
						"comment": "Address is valid but contains a :: that only elides one zero group\n"
					},
					{
						"kind": "enum member",
						"line": 1529,
						"value": "17",
						"char": 5,
						"name": "comment",
						"comment": "Address contains comments\n"
					},
					{
						"kind": "enum member",
						"line": 1532,
						"value": "18",
						"char": 5,
						"name": "foldingWhitespace",
						"comment": "Address contains Folding White Space\n"
					},
					{
						"kind": "enum member",
						"line": 1539,
						"value": "33",
						"char": 5,
						"name": "deprecatedLocalPart",
						"comment": "The local part is in a deprecated form\n"
					},
					{
						"kind": "enum member",
						"line": 1542,
						"value": "34",
						"char": 5,
						"name": "deprecatedFoldingWhitespace",
						"comment": "Address contains an obsolete form of Folding White Space\n"
					},
					{
						"kind": "enum member",
						"line": 1545,
						"value": "35",
						"char": 5,
						"name": "deprecatedQuotedText",
						"comment": "A quoted string contains a deprecated character\n"
					},
					{
						"kind": "enum member",
						"line": 1548,
						"value": "36",
						"char": 5,
						"name": "deprecatedQuotedPair",
						"comment": "A quoted pair contains a deprecated character\n"
					},
					{
						"kind": "enum member",
						"line": 1551,
						"value": "37",
						"char": 5,
						"name": "deprecatedComment",
						"comment": "Address contains a comment in a position that is deprecated\n"
					},
					{
						"kind": "enum member",
						"line": 1554,
						"value": "38",
						"char": 5,
						"name": "deprecatedCommentText",
						"comment": "A comment contains a deprecated character\n"
					},
					{
						"kind": "enum member",
						"line": 1557,
						"value": "49",
						"char": 5,
						"name": "deprecatedCommentFoldingWhitespaceNearAt",
						"comment": "Address contains a comment or Folding White Space around the @ sign\n"
					},
					{
						"kind": "enum member",
						"line": 1564,
						"value": "65",
						"char": 5,
						"name": "rfc5322Domain",
						"comment": "Address is RFC 5322 compliant but contains domain characters that are not allowed by DNS\n"
					},
					{
						"kind": "enum member",
						"line": 1567,
						"value": "66",
						"char": 5,
						"name": "rfc5322TooLong",
						"comment": "Address is too long\n"
					},
					{
						"kind": "enum member",
						"line": 1570,
						"value": "67",
						"char": 5,
						"name": "rfc5322LocalTooLong",
						"comment": "The local part of the address is too long\n"
					},
					{
						"kind": "enum member",
						"line": 1573,
						"value": "68",
						"char": 5,
						"name": "rfc5322DomainTooLong",
						"comment": "The domain part is too long\n"
					},
					{
						"kind": "enum member",
						"line": 1576,
						"value": "69",
						"char": 5,
						"name": "rfc5322LabelTooLong",
						"comment": "The domain part contains an element that is too long\n"
					},
					{
						"kind": "enum member",
						"line": 1579,
						"value": "70",
						"char": 5,
						"name": "rfc5322DomainLiteral",
						"comment": "The domain literal is not a valid RFC 5321 address literal\n"
					},
					{
						"kind": "enum member",
						"line": 1582,
						"value": "71",
						"char": 5,
						"name": "rfc5322DomainLiteralObsoleteText",
						"comment": "The domain literal is not a valid RFC 5321 address literal and it contains obsolete characters\n"
					},
					{
						"kind": "enum member",
						"line": 1585,
						"value": "72",
						"char": 5,
						"name": "rfc5322IpV6GroupCount",
						"comment": "The IPv6 literal address contains the wrong number of groups\n"
					},
					{
						"kind": "enum member",
						"line": 1588,
						"value": "73",
						"char": 5,
						"name": "rfc5322IpV6TooManyDoubleColons",
						"comment": "The IPv6 literal address contains too many :: sequences\n"
					},
					{
						"kind": "enum member",
						"line": 1591,
						"value": "74",
						"char": 5,
						"name": "rfc5322IpV6BadChar",
						"comment": "The IPv6 address contains an illegal group of characters\n"
					},
					{
						"kind": "enum member",
						"line": 1594,
						"value": "75",
						"char": 5,
						"name": "rfc5322IpV6MaxGroups",
						"comment": "The IPv6 address has too many groups\n"
					},
					{
						"kind": "enum member",
						"line": 1597,
						"value": "76",
						"char": 5,
						"name": "rfc5322IpV6ColonStart",
						"comment": "IPv6 address starts with a single colon\n"
					},
					{
						"kind": "enum member",
						"line": 1600,
						"value": "77",
						"char": 5,
						"name": "rfc5322IpV6ColonEnd",
						"comment": "IPv6 address ends with a single colon\n"
					},
					{
						"kind": "enum member",
						"line": 1607,
						"value": "129",
						"char": 5,
						"name": "errorExpectingDomainText",
						"comment": "A domain literal contains a character that is not allowed\n"
					},
					{
						"kind": "enum member",
						"line": 1610,
						"value": "130",
						"char": 5,
						"name": "errorNoLocalPart",
						"comment": "Address has no local part\n"
					},
					{
						"kind": "enum member",
						"line": 1613,
						"value": "131",
						"char": 5,
						"name": "errorNoDomain",
						"comment": "Address has no domain part\n"
					},
					{
						"kind": "enum member",
						"line": 1616,
						"value": "132",
						"char": 5,
						"name": "errorConsecutiveDots",
						"comment": "The address may not contain consecutive dots\n"
					},
					{
						"kind": "enum member",
						"line": 1619,
						"value": "133",
						"char": 5,
						"name": "errorTextAfterCommentFoldingWhitespace",
						"comment": "Address contains text after a comment or Folding White Space\n"
					},
					{
						"kind": "enum member",
						"line": 1622,
						"value": "134",
						"char": 5,
						"name": "errorTextAfterQuotedString",
						"comment": "Address contains text after a quoted string\n"
					},
					{
						"kind": "enum member",
						"line": 1625,
						"value": "135",
						"char": 5,
						"name": "errorTextAfterDomainLiteral",
						"comment": "Extra characters were found after the end of the domain literal\n"
					},
					{
						"kind": "enum member",
						"line": 1628,
						"value": "136",
						"char": 5,
						"name": "errorExpectingQuotedPair",
						"comment": "The address contains a character that is not allowed in a quoted pair\n"
					},
					{
						"kind": "enum member",
						"line": 1631,
						"value": "137",
						"char": 5,
						"name": "errorExpectingText",
						"comment": "Address contains a character that is not allowed\n"
					},
					{
						"kind": "enum member",
						"line": 1634,
						"value": "138",
						"char": 5,
						"name": "errorExpectingQuotedText",
						"comment": "A quoted string contains a character that is not allowed\n"
					},
					{
						"kind": "enum member",
						"line": 1637,
						"value": "139",
						"char": 5,
						"name": "errorExpectingCommentText",
						"comment": "A comment contains a character that is not allowed\n"
					},
					{
						"kind": "enum member",
						"line": 1640,
						"value": "140",
						"char": 5,
						"name": "errorBackslashEnd",
						"comment": "The address cannot end with a backslash\n"
					},
					{
						"kind": "enum member",
						"line": 1643,
						"value": "141",
						"char": 5,
						"name": "errorDotStart",
						"comment": "Neither part of the address may begin with a dot\n"
					},
					{
						"kind": "enum member",
						"line": 1646,
						"value": "142",
						"char": 5,
						"name": "errorDotEnd",
						"comment": "Neither part of the address may end with a dot\n"
					},
					{
						"kind": "enum member",
						"line": 1649,
						"value": "143",
						"char": 5,
						"name": "errorDomainHyphenStart",
						"comment": "A domain or subdomain cannot begin with a hyphen\n"
					},
					{
						"kind": "enum member",
						"line": 1652,
						"value": "144",
						"char": 5,
						"name": "errorDomainHyphenEnd",
						"comment": "A domain or subdomain cannot end with a hyphen\n"
					},
					{
						"kind": "enum member",
						"line": 1655,
						"value": "145",
						"char": 5,
						"name": "errorUnclosedQuotedString",
						"comment": "Unclosed quoted string\n"
					},
					{
						"kind": "enum member",
						"line": 1658,
						"value": "146",
						"char": 5,
						"name": "errorUnclosedComment",
						"comment": "Unclosed comment\n"
					},
					{
						"kind": "enum member",
						"line": 1661,
						"value": "147",
						"char": 5,
						"name": "errorUnclosedDomainLiteral",
						"comment": "Domain literal is missing its closing bracket\n"
					},
					{
						"kind": "enum member",
						"line": 1664,
						"value": "148",
						"char": 5,
						"name": "errorFoldingWhitespaceCrflX2",
						"comment": "Folding White Space contains consecutive CRLF sequences\n"
					},
					{
						"kind": "enum member",
						"line": 1667,
						"value": "149",
						"char": 5,
						"name": "errorFoldingWhitespaceCrLfEnd",
						"comment": "Folding White Space ends with a CRLF sequence\n"
					},
					{
						"kind": "enum member",
						"line": 1670,
						"value": "150",
						"char": 5,
						"name": "errorCrNoLf",
						"comment": "Address contains a carriage return that is not followed by a line feed\n"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "EmailStatusCode",
				"comment": " An email status code, indicating if an email address is valid or not.\n If it is invalid it also indicates why.\n"
			}
		],
		"name": "std.net.isemail",
		"comment": " Validates an email address according to RFCs 5321, 5322 and others.\n\n Authors: Dominic Sayers <dominic@sayers.cc>, Jacob Carlborg\n Copyright: Dominic Sayers, Jacob Carlborg 2008-.\n Test schema documentation: Copyright © 2011, Daniel Marschall\n License: $(LINK2 http://www.boost.org/LICENSE_1_0.txt, Boost Software License 1.0)\n Version: 3.0.13 - Version 3.0 of the original PHP implementation: $(LINK http://www.dominicsayers.com/isemail)\n\n Standards:\n         $(UL\n             $(LI RFC 5321)\n             $(LI RFC 5322)\n          )\n\n References:\n         $(UL\n             $(LI $(LINK http://www.dominicsayers.com/isemail))\n             $(LI $(LINK http://tools.ietf.org/html/rfc5321))\n             $(LI $(LINK http://tools.ietf.org/html/rfc5322))\n          )\n\n Source: $(PHOBOSSRC std/net/_isemail.d)\n"
	},
	{
		"kind": "module",
		"file": "../phobos/std/algorithm/mutation.d",
		"members": [
			{
				"kind": "template",
				"line": 112,
				"constraint": "isInputRange!Range1 && isForwardRange!Range2",
				"members": [
					{
						"kind": "function",
						"line": 112,
						"endchar": 1,
						"char": 8,
						"type": "size_t(Range1 front, Range2 back)",
						"parameters": [
							{
								"type": "Range1",
								"name": "front"
							},
							{
								"type": "Range2",
								"name": "back"
							}
						],
						"name": "bringToFront",
						"endline": 171
					}
				],
				"char": 8,
				"parameters": [
					{
						"kind": "type",
						"name": "Range1"
					},
					{
						"kind": "type",
						"name": "Range2"
					}
				],
				"comment": "The $(D bringToFront) function has considerable flexibility and\nusefulness. It can rotate elements in one buffer left or right, swap\nbuffers of equal length, and even move elements across disjoint\nbuffers of different types and different lengths.\n\n$(D bringToFront) takes two ranges $(D front) and $(D back), which may\nbe of different types. Considering the concatenation of $(D front) and\n$(D back) one unified range, $(D bringToFront) rotates that unified\nrange such that all elements in $(D back) are brought to the beginning\nof the unified range. The relative ordering of elements in $(D front)\nand $(D back), respectively, remains unchanged.\n\nPerforms $(BIGOH max(front.length, back.length)) evaluations of $(D\nswap).\n\nPreconditions:\n\nEither $(D front) and $(D back) are disjoint, or $(D back) is\nreachable from $(D front) and $(D front) is not reachable from $(D\nback).\n\nReturns:\n\nThe number of elements brought to the front, i.e., the length of $(D\nback).\n\nSee_Also:\n    $(WEB sgi.com/tech/stl/_rotate.html, STL's rotate)\nExample:\nThe simplest use of $(D bringToFront) is for rotating elements in a\nbuffer. For example:\n---\nauto arr = [4, 5, 6, 7, 1, 2, 3];\nauto p = bringToFront(arr[0 .. 4], arr[4 .. $]);\nassert(p == arr.length - 4);\nassert(arr == [ 1, 2, 3, 4, 5, 6, 7 ]);\n\n---\nExample:\nThe $(D front) range may actually \"step over\" the $(D back)\nrange. This is very useful with forward ranges that cannot compute\ncomfortably right-bounded subranges like $(D arr[0 .. 4]) above. In\nthe example below, $(D r2) is a right subrange of $(D r1).\n---\nimport std.algorithm.comparison : equal;\nimport std.container : SList;\n\nauto list = SList!(int)(4, 5, 6, 7, 1, 2, 3);\nauto r1 = list[];\nauto r2 = list[]; popFrontN(r2, 4);\nassert(equal(r2, [ 1, 2, 3 ]));\nbringToFront(r1, r2);\nassert(equal(list[], [ 1, 2, 3, 4, 5, 6, 7 ]));\n\n---\nExample:\nElements can be swapped across ranges of different types:\n---\nimport std.algorithm.comparison : equal;\nimport std.container : SList;\n\nauto list = SList!(int)(4, 5, 6, 7);\nauto vec = [ 1, 2, 3 ];\nbringToFront(list[], vec);\nassert(equal(list[], [ 1, 2, 3, 4 ]));\nassert(equal(vec, [ 5, 6, 7 ]));\n\n---\n",
				"name": "bringToFront"
			},
			{
				"kind": "template",
				"line": 297,
				"constraint": "isInputRange!SourceRange && isOutputRange!(TargetRange, ElementType!SourceRange)",
				"members": [
					{
						"kind": "function",
						"line": 297,
						"endchar": 1,
						"char": 13,
						"type": "TargetRange(SourceRange source, TargetRange target)",
						"parameters": [
							{
								"type": "SourceRange",
								"name": "source"
							},
							{
								"type": "TargetRange",
								"name": "target"
							}
						],
						"name": "copy",
						"endline": 351
					}
				],
				"char": 13,
				"parameters": [
					{
						"kind": "type",
						"name": "SourceRange"
					},
					{
						"kind": "type",
						"name": "TargetRange"
					}
				],
				"comment": "Copies the content of $(D source) into $(D target) and returns the\nremaining (unfilled) part of $(D target).\n\nPreconditions: $(D target) shall have enough room to accomodate\nthe entirety of $(D source).\n\nSee_Also:\n    $(WEB sgi.com/tech/stl/_copy.html, STL's _copy)\nExample:\n\n---\nint[] a = [ 1, 5 ];\nint[] b = [ 9, 8 ];\nint[] buf = new int[](a.length + b.length + 10);\nauto rem = a.copy(buf);    // copy a into buf\nrem = b.copy(rem);         // copy b into remainder of buf\nassert(buf[0 .. a.length + b.length] == [1, 5, 9, 8]);\nassert(rem.length == 10);   // unused slots in buf\n\n---\nExample:\nAs long as the target range elements support assignment from source\nrange elements, different types of ranges are accepted:\n---\nfloat[] src = [ 1.0f, 5 ];\ndouble[] dest = new double[src.length];\nsrc.copy(dest);\n\n---\nExample:\nTo _copy at most $(D n) elements from a range, you may want to use\n$(XREF range, take):\n---\nimport std.range;\nint[] src = [ 1, 5, 8, 9, 10 ];\nauto dest = new int[](3);\nsrc.take(dest.length).copy(dest);\nassert(dest == [ 1, 5, 8 ]);\n\n---\nExample:\nTo _copy just those elements from a range that satisfy a predicate,\nuse $(LREF filter):\n---\nimport std.algorithm.iteration : filter;\nint[] src = [ 1, 5, 8, 9, 10, 1, 2, 0 ];\nauto dest = new int[src.length];\nauto rem = src\n    .filter!(a => (a & 1) == 1)\n    .copy(dest);\nassert(dest[0 .. $ - rem.length] == [ 1, 5, 9, 1 ]);\n\n---\nExample:\n$(XREF range, retro) can be used to achieve behavior similar to\n$(WEB sgi.com/tech/stl/copy_backward.html, STL's copy_backward'):\n---\nimport std.algorithm, std.range;\nint[] src = [1, 2, 4];\nint[] dest = [0, 0, 0, 0, 0];\nsrc.retro.copy(dest.retro);\nassert(dest == [0, 0, 1, 2, 4]);\n\n---\n",
				"name": "copy"
			},
			{
				"kind": "template",
				"line": 460,
				"constraint": "isInputRange!Range && is(typeof(range.front = value))",
				"members": [
					{
						"kind": "function",
						"line": 460,
						"endchar": 1,
						"char": 6,
						"type": "void(Range range, Value value)",
						"parameters": [
							{
								"type": "Range",
								"name": "range"
							},
							{
								"type": "Value",
								"name": "value"
							}
						],
						"name": "fill",
						"endline": 480
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "Range"
					},
					{
						"kind": "type",
						"name": "Value"
					}
				],
				"comment": "Assigns $(D value) to each element of input range $(D range).\n\nParams:\n        range = An $(XREF2 range, isInputRange, input range) that exposes references to its elements\n                and has assignable elements\n        value = Assigned to each element of range\n\nSee_Also:\n        $(LREF uninitializedFill)\n        $(LREF initializeAll)\nExample:\n\n---\nint[] a = [ 1, 2, 3, 4 ];\nfill(a, 5);\nassert(a == [ 5, 5, 5, 5 ]);\n\n---\n",
				"name": "fill"
			},
			{
				"kind": "template",
				"line": 568,
				"constraint": "isInputRange!Range1 && (isForwardRange!Range2 || isInputRange!Range2 && isInfinite!Range2) && is(typeof(Range1.init.front = Range2.init.front))",
				"members": [
					{
						"kind": "function",
						"line": 568,
						"endchar": 1,
						"char": 6,
						"type": "void(Range1 range, Range2 filler)",
						"parameters": [
							{
								"type": "Range1",
								"name": "range"
							},
							{
								"type": "Range2",
								"name": "filler"
							}
						],
						"name": "fill",
						"endline": 635
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "Range1"
					},
					{
						"kind": "type",
						"name": "Range2"
					}
				],
				"comment": "Fills $(D range) with a pattern copied from $(D filler). The length of\n$(D range) does not have to be a multiple of the length of $(D\nfiller). If $(D filler) is empty, an exception is thrown.\n\nParams:\n    range = An $(XREF2 range, isInputRange, input range) that exposes\n            references to its elements and has assignable elements.\n    filler = The $(XREF2 range, isForwardRange, forward range) representing the\n             _fill pattern.\nExample:\n\n---\nint[] a = [ 1, 2, 3, 4, 5 ];\nint[] b = [ 8, 9 ];\nfill(a, b);\nassert(a == [ 8, 9, 8, 9, 8 ]);\n\n---\n",
				"name": "fill"
			},
			{
				"kind": "template",
				"line": 698,
				"constraint": "isInputRange!Range && hasLvalueElements!Range && hasAssignableElements!Range",
				"members": [
					{
						"kind": "function",
						"line": 698,
						"endchar": 1,
						"char": 6,
						"type": "void(Range range)",
						"parameters": [
							{
								"type": "Range",
								"name": "range"
							}
						],
						"name": "initializeAll",
						"endline": 725
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "Range"
					}
				],
				"comment": "Initializes all elements of $(D range) with their $(D .init) value.\nAssumes that the elements of the range are uninitialized.\n\nParams:\n        range = An $(XREF2 range, isInputRange, input range) that exposes references to its elements\n                and has assignable elements\n\nSee_Also:\n        $(LREF fill)\n        $(LREF uninitializeFill)\n\nExample:\n----\nstruct S { ... }\nS[] s = (cast(S*) malloc(5 * S.sizeof))[0 .. 5];\ninitializeAll(s);\nassert(s == [ 0, 0, 0, 0, 0 ]);\n----\n",
				"name": "initializeAll"
			},
			{
				"kind": "template",
				"line": 834,
				"members": [
					{
						"kind": "function",
						"line": 834,
						"endchar": 1,
						"char": 6,
						"type": "void(ref T source, ref T target)",
						"parameters": [
							{
								"storageClass": [
									"ref"
								],
								"type": "T",
								"name": "source"
							},
							{
								"storageClass": [
									"ref"
								],
								"type": "T",
								"name": "target"
							}
						],
						"name": "move",
						"endline": 884
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": "Moves $(D source) into $(D target) via a destructive copy.\n\nParams:\n    source = Data to copy. If a destructor or postblit is defined, it is reset\n        to its $(D .init) value after it is moved into target.  Note that data\n        with internal pointers that point to itself cannot be moved, and will\n        trigger an assertion failure.\n    target = Where to copy into. The destructor, if any, is invoked before the\n        copy is performed.\nExample:\n\n---\nObject obj1 = new Object;\nObject obj2 = obj1;\nObject obj3;\n\nmove(obj2, obj3);\nassert(obj3 is obj1);\n\n---\nExample:\n\n---\n// Structs without destructors are simply copied\nstruct S1\n{\n    int a = 1;\n    int b = 2;\n}\nS1 s11 = { 10, 11 };\nS1 s12;\n\nmove(s11, s12);\n\nassert(s11.a == 10 && s11.b == 11 &&\n       s12.a == 10 && s12.b == 11);\n\n// But structs with destructors or postblits are reset to their .init value\n// after copying to the target.\nstruct S2\n{\n    int a = 1;\n    int b = 2;\n\n    ~this() { }\n}\nS2 s21 = { 3, 4 };\nS2 s22;\n\nmove(s21, s22);\n\nassert(s21.a == 1 && s21.b == 2 &&\n       s22.a == 3 && s22.b == 4);\n\n---\n",
				"name": "move"
			},
			{
				"kind": "template",
				"line": 993,
				"members": [
					{
						"kind": "function",
						"line": 993,
						"endchar": 1,
						"char": 3,
						"type": "T(ref T source)",
						"parameters": [
							{
								"storageClass": [
									"ref"
								],
								"type": "T",
								"name": "source"
							}
						],
						"name": "move",
						"endline": 1041
					}
				],
				"char": 3,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": "Ditto\n",
				"name": "move"
			},
			{
				"kind": "template",
				"line": 1182,
				"constraint": "isInputRange!Range1 && isInputRange!Range2 && is(typeof(move(src.front, tgt.front)))",
				"members": [
					{
						"kind": "function",
						"line": 1182,
						"endchar": 1,
						"char": 8,
						"type": "Range2(Range1 src, Range2 tgt)",
						"parameters": [
							{
								"type": "Range1",
								"name": "src"
							},
							{
								"type": "Range2",
								"name": "tgt"
							}
						],
						"name": "moveAll",
						"endline": 1206
					}
				],
				"char": 8,
				"parameters": [
					{
						"kind": "type",
						"name": "Range1"
					},
					{
						"kind": "type",
						"name": "Range2"
					}
				],
				"comment": "For each element $(D a) in $(D src) and each element $(D b) in $(D\ntgt) in lockstep in increasing order, calls $(D move(a, b)).\n\nPreconditions:\n$(D walkLength(src) <= walkLength(tgt)).\nAn exception will be thrown if this condition does not hold, i.e., there is not\nenough room in $(D tgt) to accommodate all of $(D src).\n\nParams:\n    src = An $(XREF2 range, isInputRange, input range) with movable elements.\n    tgt = An $(XREF2 range, isInputRange, input range) with elements that\n        elements from $(D src) can be moved into.\n\nReturns: The leftover portion of $(D tgt) after all elements from $(D src) have\nbeen moved.\nExample:\n\n---\nint[] a = [ 1, 2, 3 ];\nint[] b = new int[5];\nassert(moveAll(a, b) is b[3 .. $]);\nassert(a == b[0 .. 3]);\nassert(a == [ 1, 2, 3 ]);\n\n---\n",
				"name": "moveAll"
			},
			{
				"kind": "template",
				"line": 1232,
				"constraint": "isInputRange!Range1 && isInputRange!Range2 && is(typeof(move(src.front, tgt.front)))",
				"members": [
					{
						"kind": "function",
						"line": 1232,
						"endchar": 1,
						"char": 24,
						"type": "Tuple!(Range1, Range2)(Range1 src, Range2 tgt)",
						"parameters": [
							{
								"type": "Range1",
								"name": "src"
							},
							{
								"type": "Range2",
								"name": "tgt"
							}
						],
						"name": "moveSome",
						"endline": 1244
					}
				],
				"char": 24,
				"parameters": [
					{
						"kind": "type",
						"name": "Range1"
					},
					{
						"kind": "type",
						"name": "Range2"
					}
				],
				"comment": "For each element $(D a) in $(D src) and each element $(D b) in $(D\ntgt) in lockstep in increasing order, calls $(D move(a, b)). Stops\nwhen either $(D src) or $(D tgt) have been exhausted.\n\nParams:\n    src = An $(XREF2 range, isInputRange, input range) with movable elements.\n    tgt = An $(XREF2 range, isInputRange, input range) with elements that\n        elements from $(D src) can be moved into.\n\nReturns: The leftover portions of the two ranges after one or the other of the\nranges have been exhausted.\nExample:\n\n---\nint[] a = [ 1, 2, 3, 4, 5 ];\nint[] b = new int[3];\nassert(moveSome(a, b)[0] is a[3 .. $]);\nassert(a[0 .. 3] == b);\nassert(a == [ 1, 2, 3, 4, 5 ]);\n\n---\n",
				"name": "moveSome"
			},
			{
				"kind": "enum",
				"line": 1288,
				"members": [
					{
						"kind": "enum member",
						"line": 1294,
						"value": "0",
						"char": 5,
						"name": "unstable",
						"comment": "       Allows freely swapping of elements as long as the output\n       satisfies the algorithm's requirements.\n"
					},
					{
						"kind": "enum member",
						"line": 1299,
						"value": "1",
						"char": 5,
						"name": "semistable",
						"comment": "       In algorithms partitioning ranges in two, preserve relative\n       ordering of elements only to the left of the partition point.\n"
					},
					{
						"kind": "enum member",
						"line": 1304,
						"value": "2",
						"char": 5,
						"name": "stable",
						"comment": "       Preserve the relative ordering of elements to the largest\n       extent allowed by the algorithm's requirements.\n"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "SwapStrategy",
				"comment": "Defines the swapping strategy for algorithms that need to swap\nelements in a range (such as partition and sort). The strategy\nconcerns the swapping of elements that are not the core concern of the\nalgorithm. For example, consider an algorithm that sorts $(D [ \"abc\",\n\"b\", \"aBc\" ]) according to $(D toUpper(a) < toUpper(b)). That\nalgorithm might choose to swap the two equivalent strings $(D \"abc\")\nand $(D \"aBc\"). That does not affect the sorting since both $(D [\n\"abc\", \"aBc\", \"b\" ]) and $(D [ \"aBc\", \"abc\", \"b\" ]) are valid\noutcomes.\n\nSome situations require that the algorithm must NOT ever change the\nrelative ordering of equivalent elements (in the example above, only\n$(D [ \"abc\", \"aBc\", \"b\" ]) would be the correct result). Such\nalgorithms are called $(B stable). If the ordering algorithm may swap\nequivalent elements discretionarily, the ordering is called $(B\nunstable).\n\nYet another class of algorithms may choose an intermediate tradeoff by\nbeing stable only on a well-defined subrange of the range. There is no\nestablished terminology for such behavior; this library calls it $(B\nsemistable).\n\nGenerally, the $(D stable) ordering strategy may be more costly in\ntime and/or space than the other two because it imposes additional\nconstraints. Similarly, $(D semistable) may be costlier than $(D\nunstable). As (semi-)stability is not needed very often, the ordering\nalgorithms in this module parameterized by $(D SwapStrategy) all\nchoose $(D SwapStrategy.unstable) as the default.\n"
			},
			{
				"kind": "template",
				"line": 1381,
				"constraint": "s != SwapStrategy.stable && isBidirectionalRange!Range && hasLvalueElements!Range && hasLength!Range && Offset.length >= 1",
				"members": [
					{
						"kind": "function",
						"line": 1381,
						"endchar": 1,
						"char": 7,
						"type": "Range(Range range, Offset offset)",
						"parameters": [
							{
								"type": "Range",
								"name": "range"
							},
							{
								"type": "Offset",
								"name": "offset"
							}
						],
						"name": "remove",
						"endline": 1461
					}
				],
				"char": 7,
				"parameters": [
					{
						"kind": "value",
						"defaultValue": "SwapStrategy.stable",
						"deco": "E3std9algorithm8mutation12SwapStrategy",
						"name": "s"
					},
					{
						"kind": "type",
						"name": "Range"
					},
					{
						"kind": "tuple",
						"name": "Offset"
					}
				],
				"comment": "Eliminates elements at given offsets from $(D range) and returns the\nshortened range. In the simplest call, one element is removed.\n\n----\nint[] a = [ 3, 5, 7, 8 ];\nassert(remove(a, 1) == [ 3, 7, 8 ]);\nassert(a == [ 3, 7, 8, 8 ]);\n----\n\nIn the case above the element at offset $(D 1) is removed and $(D\nremove) returns the range smaller by one element. The original array\nhas remained of the same length because all functions in $(D\nstd.algorithm) only change $(I content), not $(I topology). The value\n$(D 8) is repeated because $(XREF algorithm, move) was invoked to move\nelements around and on integers $(D move) simply copies the source to\nthe destination. To replace $(D a) with the effect of the removal,\nsimply assign $(D a = remove(a, 1)). The slice will be rebound to the\nshorter array and the operation completes with maximal efficiency.\n\nMultiple indices can be passed into $(D remove). In that case,\nelements at the respective indices are all removed. The indices must\nbe passed in increasing order, otherwise an exception occurs.\n\n----\nint[] a = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ];\nassert(remove(a, 1, 3, 5) ==\n    [ 0, 2, 4, 6, 7, 8, 9, 10 ]);\n----\n\n(Note how all indices refer to slots in the $(I original) array, not\nin the array as it is being progressively shortened.) Finally, any\ncombination of integral offsets and tuples composed of two integral\noffsets can be passed in.\n\n----\nint[] a = [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ];\nassert(remove(a, 1, tuple(3, 5), 9) == [ 0, 2, 6, 7, 8, 10 ]);\n----\n\nIn this case, the slots at positions 1, 3, 4, and 9 are removed from\nthe array. The tuple passes in a range closed to the left and open to\nthe right (consistent with built-in slices), e.g. $(D tuple(3, 5))\nmeans indices $(D 3) and $(D 4) but not $(D 5).\n\nIf the need is to remove some elements in the range but the order of\nthe remaining elements does not have to be preserved, you may want to\npass $(D SwapStrategy.unstable) to $(D remove).\n\n----\nint[] a = [ 0, 1, 2, 3 ];\nassert(remove!(SwapStrategy.unstable)(a, 1) == [ 0, 3, 2 ]);\n----\n\nIn the case above, the element at slot $(D 1) is removed, but replaced\nwith the last element of the range. Taking advantage of the relaxation\nof the stability requirement, $(D remove) moved elements from the end\nof the array over the slots to be removed. This way there is less data\nmovement to be done which improves the execution time of the function.\n\nThe function $(D remove) works on any forward range. The moving\nstrategy is (listed from fastest to slowest): $(UL $(LI If $(D s ==\nSwapStrategy.unstable && isRandomAccessRange!Range && hasLength!Range\n&& hasLvalueElements!Range), then elements are moved from the end\nof the range into the slots to be filled. In this case, the absolute\nminimum of moves is performed.)  $(LI Otherwise, if $(D s ==\nSwapStrategy.unstable && isBidirectionalRange!Range && hasLength!Range\n&& hasLvalueElements!Range), then elements are still moved from the\nend of the range, but time is spent on advancing between slots by repeated\ncalls to $(D range.popFront).)  $(LI Otherwise, elements are moved\nincrementally towards the front of $(D range); a given element is never\nmoved several times, but more elements are moved than in the previous\ncases.))\n",
				"name": "remove"
			},
			{
				"kind": "template",
				"line": 1602,
				"constraint": "isBidirectionalRange!Range && hasLvalueElements!Range",
				"members": [
					{
						"kind": "function",
						"line": 1602,
						"endchar": 1,
						"char": 7,
						"type": "Range(Range range)",
						"parameters": [
							{
								"type": "Range",
								"name": "range"
							}
						],
						"name": "remove",
						"endline": 1640
					}
				],
				"char": 7,
				"parameters": [
					{
						"kind": "alias",
						"name": "pred"
					},
					{
						"kind": "value",
						"defaultValue": "SwapStrategy.stable",
						"deco": "E3std9algorithm8mutation12SwapStrategy",
						"name": "s"
					},
					{
						"kind": "type",
						"name": "Range"
					}
				],
				"comment": "Reduces the length of the bidirectional range $(D range) by removing\nelements that satisfy $(D pred). If $(D s = SwapStrategy.unstable),\nelements are moved from the right end of the range over the elements\nto eliminate. If $(D s = SwapStrategy.stable) (the default),\nelements are moved progressively to front such that their relative\norder is preserved. Returns the filtered range.\nExample:\n\n---\nstatic immutable base = [1, 2, 3, 2, 4, 2, 5, 2];\n\nint[] arr = base[].dup;\n\n// using a string-based predicate\nassert(remove!(\"a == 2\")(arr) == [ 1, 3, 4, 5 ]);\n\n// The original array contents have been modified,\n// so we need to reset it to its original state.\n// The length is unmodified however.\narr[] = base[];\n\n// using a lambda predicate\nassert(remove!(a => a == 2)(arr) == [ 1, 3, 4, 5 ]);\n\n---\n",
				"name": "remove"
			},
			{
				"kind": "template",
				"line": 1682,
				"constraint": "isBidirectionalRange!Range && !isRandomAccessRange!Range && hasSwappableElements!Range",
				"members": [
					{
						"kind": "function",
						"line": 1682,
						"endchar": 1,
						"char": 6,
						"type": "void(Range r)",
						"parameters": [
							{
								"type": "Range",
								"name": "r"
							}
						],
						"name": "reverse",
						"endline": 1693
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "Range"
					}
				],
				"comment": "Reverses $(D r) in-place.  Performs $(D r.length / 2) evaluations of $(D\nswap).\n\nSee_Also:\n    $(WEB sgi.com/tech/stl/_reverse.html, STL's _reverse)\nExample:\n\n---\nint[] arr = [ 1, 2, 3 ];\nreverse(arr);\nassert(arr == [ 3, 2, 1 ]);\n\n---\n",
				"name": "reverse"
			},
			{
				"kind": "template",
				"line": 1704,
				"constraint": "isRandomAccessRange!Range && hasLength!Range",
				"members": [
					{
						"kind": "function",
						"line": 1704,
						"endchar": 1,
						"char": 6,
						"type": "void(Range r)",
						"parameters": [
							{
								"type": "Range",
								"name": "r"
							}
						],
						"name": "reverse",
						"endline": 1714
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "Range"
					}
				],
				"comment": "ditto\n",
				"name": "reverse"
			},
			{
				"kind": "template",
				"line": 1738,
				"constraint": "isNarrowString!(Char[]) && !is(Char == const) && !is(Char == immutable)",
				"members": [
					{
						"kind": "function",
						"line": 1738,
						"endchar": 1,
						"char": 6,
						"type": "void(Char[] s)",
						"parameters": [
							{
								"type": "Char[]",
								"name": "s"
							}
						],
						"name": "reverse",
						"endline": 1759
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "Char"
					}
				],
				"comment": "Reverses $(D r) in-place, where $(D r) is a narrow string (having\nelements of type $(D char) or $(D wchar)). UTF sequences consisting of\nmultiple code units are preserved properly.\nExample:\n\n---\nchar[] arr = \"hello\\U00010143\\u0100\\U00010143\".dup;\nreverse(arr);\nassert(arr == \"\\U00010143\\u0100\\U00010143olleh\");\n\n---\n",
				"name": "reverse"
			},
			{
				"kind": "template",
				"line": 1822,
				"constraint": "isBidirectionalRange!Range && is(typeof(range.front == element) : bool)",
				"members": [
					{
						"kind": "function",
						"line": 1822,
						"endchar": 1,
						"char": 7,
						"type": "Range(Range range, E element)",
						"parameters": [
							{
								"type": "Range",
								"name": "range"
							},
							{
								"type": "E",
								"name": "element"
							}
						],
						"name": "strip",
						"endline": 1826
					}
				],
				"char": 7,
				"parameters": [
					{
						"kind": "type",
						"name": "Range"
					},
					{
						"kind": "type",
						"name": "E"
					}
				],
				"comment": "    The strip group of functions allow stripping of either leading, trailing,\n    or both leading and trailing elements.\n\n    The $(D stripLeft) function will strip the $(D front) of the range,\n    the $(D stripRight) function will strip the $(D back) of the range,\n    while the $(D strip) function will strip both the $(D front) and $(D back)\n    of the range.\n\n    Note that the $(D strip) and $(D stripRight) functions require the range to\n    be a $(LREF BidirectionalRange) range.\n\n    All of these functions come in two varieties: one takes a target element,\n    where the range will be stripped as long as this element can be found.\n    The other takes a lambda predicate, where the range will be stripped as\n    long as the predicate returns true.\nExample:\nStrip leading and trailing elements equal to the target element.\n---\nassert(\"  foobar  \".strip(' ') == \"foobar\");\nassert(\"00223.444500\".strip('0') == \"223.4445\");\nassert(\"ëëêéüŗōpéêëë\".strip('ë') == \"êéüŗōpéê\");\nassert([1, 1, 0, 1, 1].strip(1) == [0]);\nassert([0.0, 0.01, 0.01, 0.0].strip(0).length == 2);\n\n---\nExample:\nStrip leading and trailing elements while the predicate returns true.\n---\nassert(\"  foobar  \".strip!(a => a == ' ')() == \"foobar\");\nassert(\"00223.444500\".strip!(a => a == '0')() == \"223.4445\");\nassert(\"ëëêéüŗōpéêëë\".strip!(a => a == 'ë')() == \"êéüŗōpéê\");\nassert([1, 1, 0, 1, 1].strip!(a => a == 1)() == [0]);\nassert([0.0, 0.01, 0.5, 0.6, 0.01, 0.0].strip!(a => a < 0.4)().length == 2);\n\n---\nExample:\nStrip leading elements equal to the target element.\n---\nassert(\"  foobar  \".stripLeft(' ') == \"foobar  \");\nassert(\"00223.444500\".stripLeft('0') == \"223.444500\");\nassert(\"ůůűniçodêéé\".stripLeft('ů') == \"űniçodêéé\");\nassert([1, 1, 0, 1, 1].stripLeft(1) == [0, 1, 1]);\nassert([0.0, 0.01, 0.01, 0.0].stripLeft(0).length == 3);\n\n---\nExample:\nStrip leading elements while the predicate returns true.\n---\nassert(\"  foobar  \".stripLeft!(a => a == ' ')() == \"foobar  \");\nassert(\"00223.444500\".stripLeft!(a => a == '0')() == \"223.444500\");\nassert(\"ůůűniçodêéé\".stripLeft!(a => a == 'ů')() == \"űniçodêéé\");\nassert([1, 1, 0, 1, 1].stripLeft!(a => a == 1)() == [0, 1, 1]);\nassert([0.0, 0.01, 0.10, 0.5, 0.6].stripLeft!(a => a < 0.4)().length == 2);\n\n---\nExample:\nStrip trailing elements equal to the target element.\n---\nassert(\"  foobar  \".stripRight(' ') == \"  foobar\");\nassert(\"00223.444500\".stripRight('0') == \"00223.4445\");\nassert(\"ùniçodêéé\".stripRight('é') == \"ùniçodê\");\nassert([1, 1, 0, 1, 1].stripRight(1) == [1, 1, 0]);\nassert([0.0, 0.01, 0.01, 0.0].stripRight(0).length == 3);\n\n---\nExample:\nStrip trailing elements while the predicate returns true.\n---\nassert(\"  foobar  \".stripRight!(a => a == ' ')() == \"  foobar\");\nassert(\"00223.444500\".stripRight!(a => a == '0')() == \"00223.4445\");\nassert(\"ùniçodêéé\".stripRight!(a => a == 'é')() == \"ùniçodê\");\nassert([1, 1, 0, 1, 1].stripRight!(a => a == 1)() == [1, 1, 0]);\nassert([0.0, 0.01, 0.10, 0.5, 0.6].stripRight!(a => a > 0.4)().length == 3);\n\n---\n",
				"name": "strip"
			},
			{
				"kind": "template",
				"line": 1829,
				"constraint": "isBidirectionalRange!Range && is(typeof(pred(range.back)) : bool)",
				"members": [
					{
						"kind": "function",
						"line": 1829,
						"endchar": 1,
						"char": 7,
						"type": "Range(Range range)",
						"parameters": [
							{
								"type": "Range",
								"name": "range"
							}
						],
						"name": "strip",
						"endline": 1833
					}
				],
				"char": 7,
				"parameters": [
					{
						"kind": "alias",
						"name": "pred"
					},
					{
						"kind": "type",
						"name": "Range"
					}
				],
				"comment": "ditto\n",
				"name": "strip"
			},
			{
				"kind": "template",
				"line": 1836,
				"constraint": "isInputRange!Range && is(typeof(range.front == element) : bool)",
				"members": [
					{
						"kind": "function",
						"line": 1836,
						"endchar": 1,
						"char": 7,
						"type": "Range(Range range, E element)",
						"parameters": [
							{
								"type": "Range",
								"name": "range"
							},
							{
								"type": "E",
								"name": "element"
							}
						],
						"name": "stripLeft",
						"endline": 1841
					}
				],
				"char": 7,
				"parameters": [
					{
						"kind": "type",
						"name": "Range"
					},
					{
						"kind": "type",
						"name": "E"
					}
				],
				"comment": "ditto\n",
				"name": "stripLeft"
			},
			{
				"kind": "template",
				"line": 1844,
				"constraint": "isInputRange!Range && is(typeof(pred(range.front)) : bool)",
				"members": [
					{
						"kind": "function",
						"line": 1844,
						"endchar": 1,
						"char": 7,
						"type": "Range(Range range)",
						"parameters": [
							{
								"type": "Range",
								"name": "range"
							}
						],
						"name": "stripLeft",
						"endline": 1851
					}
				],
				"char": 7,
				"parameters": [
					{
						"kind": "alias",
						"name": "pred"
					},
					{
						"kind": "type",
						"name": "Range"
					}
				],
				"comment": "ditto\n",
				"name": "stripLeft"
			},
			{
				"kind": "template",
				"line": 1854,
				"constraint": "isBidirectionalRange!Range && is(typeof(range.back == element) : bool)",
				"members": [
					{
						"kind": "function",
						"line": 1854,
						"endchar": 1,
						"char": 7,
						"type": "Range(Range range, E element)",
						"parameters": [
							{
								"type": "Range",
								"name": "range"
							},
							{
								"type": "E",
								"name": "element"
							}
						],
						"name": "stripRight",
						"endline": 1863
					}
				],
				"char": 7,
				"parameters": [
					{
						"kind": "type",
						"name": "Range"
					},
					{
						"kind": "type",
						"name": "E"
					}
				],
				"comment": "ditto\n",
				"name": "stripRight"
			},
			{
				"kind": "template",
				"line": 1866,
				"constraint": "isBidirectionalRange!Range && is(typeof(pred(range.back)) : bool)",
				"members": [
					{
						"kind": "function",
						"line": 1866,
						"endchar": 1,
						"char": 7,
						"type": "Range(Range range)",
						"parameters": [
							{
								"type": "Range",
								"name": "range"
							}
						],
						"name": "stripRight",
						"endline": 1875
					}
				],
				"char": 7,
				"parameters": [
					{
						"kind": "alias",
						"name": "pred"
					},
					{
						"kind": "type",
						"name": "Range"
					}
				],
				"comment": "ditto\n",
				"name": "stripRight"
			},
			{
				"kind": "template",
				"line": 1952,
				"constraint": "isBlitAssignable!T && !is(typeof(lhs.proxySwap(rhs)))",
				"members": [
					{
						"kind": "function",
						"line": 1952,
						"endchar": 1,
						"char": 6,
						"type": "pure nothrow @nogc @trusted void(ref T lhs, ref T rhs)",
						"parameters": [
							{
								"storageClass": [
									"ref"
								],
								"type": "T",
								"name": "lhs"
							},
							{
								"storageClass": [
									"ref"
								],
								"type": "T",
								"name": "rhs"
							}
						],
						"name": "swap",
						"endline": 1998
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": "Swaps $(D lhs) and $(D rhs). The instances $(D lhs) and $(D rhs) are moved in\nmemory, without ever calling $(D opAssign), nor any other function. $(D T)\nneed not be assignable at all to be swapped.\n\nIf $(D lhs) and $(D rhs) reference the same instance, then nothing is done.\n\n$(D lhs) and $(D rhs) must be mutable. If $(D T) is a struct or union, then\nits fields must also all be (recursively) mutable.\n\nParams:\n    lhs = Data to be swapped with $(D rhs).\n    rhs = Data to be swapped with $(D lhs).\nExample:\n\n---\n// Swapping POD (plain old data) types:\nint a = 42, b = 34;\nswap(a, b);\nassert(a == 34 && b == 42);\n\n// Swapping structs with indirection:\nstatic struct S { int x; char c; int[] y; }\nS s1 = { 0, 'z', [ 1, 2 ] };\nS s2 = { 42, 'a', [ 4, 6 ] };\nswap(s1, s2);\nassert(s1.x == 42);\nassert(s1.c == 'a');\nassert(s1.y == [ 4, 6 ]);\n\nassert(s2.x == 0);\nassert(s2.c == 'z');\nassert(s2.y == [ 1, 2 ]);\n\n// Immutables cannot be swapped:\nimmutable int imm1, imm2;\nstatic assert(!__traits(compiles, swap(imm1, imm2)));\n\n---\nExample:\n\n---\n// Non-copyable types can still be swapped.\nstatic struct NoCopy\n{\n    this(this) { assert(0); }\n    int n;\n    string s;\n}\nNoCopy nc1, nc2;\nnc1.n = 127; nc1.s = \"abc\";\nnc2.n = 513; nc2.s = \"uvwxyz\";\n\nswap(nc1, nc2);\nassert(nc1.n == 513 && nc1.s == \"uvwxyz\");\nassert(nc2.n == 127 && nc2.s == \"abc\");\n\nswap(nc1, nc1);\nswap(nc2, nc2);\nassert(nc1.n == 513 && nc1.s == \"uvwxyz\");\nassert(nc2.n == 127 && nc2.s == \"abc\");\n\n// Types containing non-copyable fields can also be swapped.\nstatic struct NoCopyHolder\n{\n    NoCopy noCopy;\n}\nNoCopyHolder h1, h2;\nh1.noCopy.n = 31; h1.noCopy.s = \"abc\";\nh2.noCopy.n = 65; h2.noCopy.s = null;\n\nswap(h1, h2);\nassert(h1.noCopy.n == 65 && h1.noCopy.s == null);\nassert(h2.noCopy.n == 31 && h2.noCopy.s == \"abc\");\n\nswap(h1, h1);\nswap(h2, h2);\nassert(h1.noCopy.n == 65 && h1.noCopy.s == null);\nassert(h2.noCopy.n == 31 && h2.noCopy.s == \"abc\");\n\n// Const types cannot be swapped.\nconst NoCopy const1, const2;\nstatic assert(!__traits(compiles, swap(const1, const2)));\n\n---\n",
				"name": "swap"
			},
			{
				"kind": "template",
				"line": 2193,
				"constraint": "isInputRange!Range1 && isInputRange!Range2 && hasSwappableElements!Range1 && hasSwappableElements!Range2 && is(ElementType!Range1 == ElementType!Range2)",
				"members": [
					{
						"kind": "function",
						"line": 2193,
						"endchar": 1,
						"char": 1,
						"type": "Tuple!(Range1, Range2)(Range1 r1, Range2 r2)",
						"parameters": [
							{
								"type": "Range1",
								"name": "r1"
							},
							{
								"type": "Range2",
								"name": "r2"
							}
						],
						"name": "swapRanges",
						"endline": 2203
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "Range1"
					},
					{
						"kind": "type",
						"name": "Range2"
					}
				],
				"comment": "Swaps all elements of $(D r1) with successive elements in $(D r2).\nReturns a tuple containing the remainder portions of $(D r1) and $(D\nr2) that were not swapped (one of them will be empty). The ranges may\nbe of different types but must have the same element type and support\nswapping.\nExample:\n\n---\nint[] a = [ 100, 101, 102, 103 ];\nint[] b = [ 0, 1, 2, 3 ];\nauto c = swapRanges(a[1 .. 3], b[2 .. 4]);\nassert(c[0].empty && c[1].empty);\nassert(a == [ 100, 2, 3, 103 ]);\nassert(b == [ 0, 1, 101, 102 ]);\n}\n\n/**\nInitializes each element of $(D range) with $(D value).\nAssumes that the elements of the range are uninitialized.\nThis is of interest for structs that\ndefine copy constructors (for all other types, $(LREF fill) and\nuninitializedFill are equivalent).\n\nParams:\n    range = An $(XREF2 range, isInputRange, input range) that exposes references to its elements\n            and has assignable elements\n    value = Assigned to each element of range\n\nSee_Also:\n    $(LREF fill)\n    $(LREF initializeAll)\n\nExample:\n----\nstruct S { ... \n\n---\n",
				"name": "swapRanges"
			},
			{
				"kind": "template",
				"line": 2240,
				"constraint": "isInputRange!Range && hasLvalueElements!Range && is(typeof(range.front = value))",
				"members": [
					{
						"kind": "function",
						"line": 2240,
						"endchar": 1,
						"char": 6,
						"type": "void(Range range, Value value)",
						"parameters": [
							{
								"type": "Range",
								"name": "range"
							},
							{
								"type": "Value",
								"name": "value"
							}
						],
						"name": "uninitializedFill",
						"endline": 2257
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "Range"
					},
					{
						"kind": "type",
						"name": "Value"
					}
				],
				"comment": "Initializes each element of $(D range) with $(D value).\nAssumes that the elements of the range are uninitialized.\nThis is of interest for structs that\ndefine copy constructors (for all other types, $(LREF fill) and\nuninitializedFill are equivalent).\n\nParams:\n        range = An $(XREF2 range, isInputRange, input range) that exposes references to its elements\n                and has assignable elements\n        value = Assigned to each element of range\n\nSee_Also:\n        $(LREF fill)\n        $(LREF initializeAll)\n\nExample:\n----\nstruct S { ... }\nS[] s = (cast(S*) malloc(5 * S.sizeof))[0 .. 5];\nuninitializedFill(s, 42);\nassert(s == [ 42, 42, 42, 42, 42 ]);\n----\n",
				"name": "uninitializedFill"
			}
		],
		"name": "std.algorithm.mutation",
		"comment": "This is a submodule of $(LINK2 std_algorithm.html, std.algorithm).\nIt contains generic _mutation algorithms.\n\n$(BOOKTABLE Cheat Sheet,\n\n$(TR $(TH Function Name) $(TH Description))\n\n$(T2 bringToFront,\n        If $(D a = [1, 2, 3]) and $(D b = [4, 5, 6, 7]),\n        $(D bringToFront(a, b)) leaves $(D a = [4, 5, 6]) and\n        $(D b = [7, 1, 2, 3]).)\n$(T2 copy,\n        Copies a range to another. If\n        $(D a = [1, 2, 3]) and $(D b = new int[5]), then $(D copy(a, b))\n        leaves $(D b = [1, 2, 3, 0, 0]) and returns $(D b[3 .. $]).)\n$(T2 fill,\n        Fills a range with a pattern,\n        e.g., if $(D a = new int[3]), then $(D fill(a, 4))\n        leaves $(D a = [4, 4, 4]) and $(D fill(a, [3, 4])) leaves\n        $(D a = [3, 4, 3]).)\n$(T2 initializeAll,\n        If $(D a = [1.2, 3.4]), then $(D initializeAll(a)) leaves\n        $(D a = [double.init, double.init]).)\n$(T2 move,\n        $(D move(a, b)) moves $(D a) into $(D b). $(D move(a)) reads $(D a)\n        destructively.)\n$(T2 moveAll,\n        Moves all elements from one range to another.)\n$(T2 moveSome,\n        Moves as many elements as possible from one range to another.)\n$(T2 remove,\n        Removes elements from a range in-place, and returns the shortened\n        range.)\n$(T2 reverse,\n        If $(D a = [1, 2, 3]), $(D reverse(a)) changes it to $(D [3, 2, 1]).)\n$(T2 strip,\n        Strips all leading and trailing elements equal to a value, or that\n        satisfy a predicate.\n        If $(D a = [1, 1, 0, 1, 1]), then $(D strip(a, 1)) and\n        $(D strip!(e => e == 1)(a)) returns $(D [0]).)\n$(T2 stripLeft,\n        Strips all leading elements equal to a value, or that satisfy a\n        predicate.  If $(D a = [1, 1, 0, 1, 1]), then $(D stripLeft(a, 1)) and\n        $(D stripLeft!(e => e == 1)(a)) returns $(D [0, 1, 1]).)\n$(T2 stripRight,\n        Strips all trailing elements equal to a value, or that satisfy a\n        predicate.\n        If $(D a = [1, 1, 0, 1, 1]), then $(D stripRight(a, 1)) and\n        $(D stripRight!(e => e == 1)(a)) returns $(D [1, 1, 0]).)\n$(T2 swap,\n        Swaps two values.)\n$(T2 swapRanges,\n        Swaps all elements of two ranges.)\n$(T2 uninitializedFill,\n        Fills a range (assumed uninitialized) with a value.)\n)\n\nCopyright: Andrei Alexandrescu 2008-.\n\nLicense: $(WEB boost.org/LICENSE_1_0.txt, Boost License 1.0).\n\nAuthors: $(WEB erdani.com, Andrei Alexandrescu)\n\nSource: $(PHOBOSSRC std/algorithm/_mutation.d)\n\nMacros:\nT2=$(TR $(TDNW $(LREF $1)) $(TD $+))\n"
	},
	{
		"kind": "module",
		"file": "../phobos/std/algorithm/package.d",
		"members": [],
		"name": "std.algorithm",
		"comment": "This package implements generic algorithms oriented towards the processing of\nsequences. Sequences processed by these functions define range-based\ninterfaces.  See also $(LINK2 std_range.html, Reference on ranges) and\n$(WEB ddili.org/ders/d.en/ranges.html, tutorial on ranges).\n\n$(SCRIPT inhibitQuickIndex = 1;)\n\nAlgorithms are categorized into the following submodules:\n\n$(DIVC quickindex,\n$(BOOKTABLE ,\n$(TR $(TH Category) $(TH Submodule) $(TH Functions)\n)\n$(TR $(TDNW Searching)\n     $(TDNW $(SUBMODULE searching))\n     $(TD\n        $(SUBREF searching, all)\n        $(SUBREF searching, any)\n        $(SUBREF searching, balancedParens)\n        $(SUBREF searching, boyerMooreFinder)\n        $(SUBREF searching, canFind)\n        $(SUBREF searching, commonPrefix)\n        $(SUBREF searching, count)\n        $(SUBREF searching, countUntil)\n        $(SUBREF searching, endsWith)\n        $(SUBREF searching, find)\n        $(SUBREF searching, findAdjacent)\n        $(SUBREF searching, findAmong)\n        $(SUBREF searching, findSkip)\n        $(SUBREF searching, findSplit)\n        $(SUBREF searching, findSplitAfter)\n        $(SUBREF searching, findSplitBefore)\n        $(SUBREF searching, minCount)\n        $(SUBREF searching, minPos)\n        $(SUBREF searching, skipOver)\n        $(SUBREF searching, startsWith)\n        $(SUBREF searching, until)\n    )\n)\n$(TR $(TDNW Comparison)\n    $(TDNW $(SUBMODULE comparison))\n    $(TD\n        $(SUBREF comparison, among)\n        $(SUBREF comparison, castSwitch)\n        $(SUBREF comparison, clamp)\n        $(SUBREF comparison, cmp)\n        $(SUBREF comparison, equal)\n        $(SUBREF comparison, levenshteinDistance)\n        $(SUBREF comparison, levenshteinDistanceAndPath)\n        $(SUBREF comparison, max)\n        $(SUBREF comparison, min)\n        $(SUBREF comparison, mismatch)\n        $(SUBREF comparison, predSwitch)\n    )\n)\n$(TR $(TDNW Iteration)\n    $(TDNW $(SUBMODULE iteration))\n    $(TD\n        $(SUBREF iteration, cache)\n        $(SUBREF iteration, cacheBidirectional)\n        $(SUBREF iteration, chunkBy)\n        $(SUBREF iteration, each)\n        $(SUBREF iteration, filter)\n        $(SUBREF iteration, filterBidirectional)\n        $(SUBREF iteration, group)\n        $(SUBREF iteration, joiner)\n        $(SUBREF iteration, map)\n        $(SUBREF iteration, reduce)\n        $(SUBREF iteration, splitter)\n        $(SUBREF iteration, sum)\n        $(SUBREF iteration, uniq)\n    )\n)\n$(TR $(TDNW Sorting)\n    $(TDNW $(SUBMODULE sorting))\n    $(TD\n        $(SUBREF sorting, completeSort)\n        $(SUBREF sorting, isPartitioned)\n        $(SUBREF sorting, isSorted)\n        $(SUBREF sorting, makeIndex)\n        $(SUBREF sorting, multiSort)\n        $(SUBREF sorting, nextEvenPermutation)\n        $(SUBREF sorting, nextPermutation)\n        $(SUBREF sorting, partialSort)\n        $(SUBREF sorting, partition)\n        $(SUBREF sorting, partition3)\n        $(SUBREF sorting, schwartzSort)\n        $(SUBREF sorting, sort)\n        $(SUBREF sorting, topN)\n        $(SUBREF sorting, topNCopy)\n        $(SUBREF sorting, topNIndex)\n    )\n)\n$(TR $(TDNW Set&nbsp;operations)\n    $(TDNW $(SUBMODULE setops))\n    $(TD\n        $(SUBREF setops, cartesianProduct)\n        $(SUBREF setops, largestPartialIntersection)\n        $(SUBREF setops, largestPartialIntersectionWeighted)\n        $(SUBREF setops, nWayUnion)\n        $(SUBREF setops, setDifference)\n        $(SUBREF setops, setIntersection)\n        $(SUBREF setops, setSymmetricDifference)\n        $(SUBREF setops, setUnion)\n    )\n)\n$(TR $(TDNW Mutation)\n    $(TDNW $(SUBMODULE mutation))\n    $(TD\n        $(SUBREF mutation, bringToFront)\n        $(SUBREF mutation, copy)\n        $(SUBREF mutation, fill)\n        $(SUBREF mutation, initializeAll)\n        $(SUBREF mutation, move)\n        $(SUBREF mutation, moveAll)\n        $(SUBREF mutation, moveSome)\n        $(SUBREF mutation, remove)\n        $(SUBREF mutation, reverse)\n        $(SUBREF mutation, strip)\n        $(SUBREF mutation, stripLeft)\n        $(SUBREF mutation, stripRight)\n        $(SUBREF mutation, swap)\n        $(SUBREF mutation, swapRanges)\n        $(SUBREF mutation, uninitializedFill)\n    )\n)\n))\n\nMany functions in this package are parameterized with a function or a\n$(GLOSSARY predicate). The predicate may be passed either as a\nfunction name, a delegate name, a $(GLOSSARY functor) name, or a\ncompile-time string. The string may consist of $(B any) legal D\nexpression that uses the symbol $(D a) (for unary functions) or the\nsymbols $(D a) and $(D b) (for binary functions). These names will NOT\ninterfere with other homonym symbols in user code because they are\nevaluated in a different context. The default for all binary\ncomparison predicates is $(D \"a == b\") for unordered operations and\n$(D \"a < b\") for ordered operations.\n\nExample:\n\n----\nint[] a = ...;\nstatic bool greater(int a, int b)\n{\n    return a > b;\n}\nsort!(greater)(a);  // predicate as alias\nsort!(\"a > b\")(a);  // predicate as string\n                    // (no ambiguity with array name)\nsort(a);            // no predicate, \"a < b\" is implicit\n----\n\nMacros:\nWIKI = Phobos/StdAlgorithm\nSUBMODULE = $(LINK2 std_algorithm_$1.html, std.algorithm.$1)\nSUBREF = $(LINK2 std_algorithm_$1.html#.$2, $(TT $2))$(NBSP)\n\nCopyright: Andrei Alexandrescu 2008-.\n\nLicense: $(WEB boost.org/LICENSE_1_0.txt, Boost License 1.0).\n\nAuthors: $(WEB erdani.com, Andrei Alexandrescu)\n\nSource: $(PHOBOSSRC std/_algorithm/package.d)\n"
	},
	{
		"kind": "module",
		"file": "../phobos/std/algorithm/comparison.d",
		"members": [
			{
				"kind": "template",
				"line": 79,
				"constraint": "Values.length != 0",
				"members": [
					{
						"kind": "function",
						"line": 79,
						"endchar": 1,
						"char": 6,
						"type": "uint(Value value, Values values)",
						"parameters": [
							{
								"type": "Value",
								"name": "value"
							},
							{
								"type": "Values",
								"name": "values"
							}
						],
						"name": "among",
						"endline": 89
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "alias",
						"name": "pred",
						"defaultAlias": ""
					},
					{
						"kind": "type",
						"name": "Value"
					},
					{
						"kind": "tuple",
						"name": "Values"
					}
				],
				"comment": "Find $(D value) _among $(D values), returning the 1-based index\nof the first matching value in $(D values), or $(D 0) if $(D value)\nis not _among $(D values). The predicate $(D pred) is used to\ncompare values, and uses equality by default.\n\nParams:\n    pred = The predicate used to compare the values.\n    value = The value to search for.\n    values = The values to compare the value to.\n\nReturns:\n    0 if value was not found among the values, otherwise the index of the\n    found value plus one is returned.\n\nSee_Also:\n$(LREF find) and $(LREF canFind) for finding a value in a\nrange.\nExample:\n\n---\nassert(3.among(1, 42, 24, 3, 2));\n\nif (auto pos = \"bar\".among(\"foo\", \"bar\", \"baz\"))\n    assert(pos == 2);\nelse\n    assert(false);\n\n// 42 is larger than 24\nassert(42.among!((lhs, rhs) => lhs > rhs)(43, 24, 100) == 2);\n\n---\nExample:\nAlternatively, $(D values) can be passed at compile-time, allowing for a more\nefficient search, but one that only supports matching on equality:\n---\nassert(3.among!(2, 3, 4));\nassert(\"bar\".among!(\"foo\", \"bar\", \"baz\") == 2);\n\n---\n",
				"name": "among"
			},
			{
				"kind": "template",
				"line": 92,
				"constraint": "isExpressionTuple!values",
				"members": [
					{
						"kind": "template",
						"line": 95,
						"constraint": "!is(CommonType!(Value, values) == void)",
						"members": [
							{
								"kind": "function",
								"line": 95,
								"endchar": 5,
								"char": 10,
								"type": "uint(Value value)",
								"parameters": [
									{
										"type": "Value",
										"name": "value"
									}
								],
								"name": "among",
								"endline": 106
							}
						],
						"char": 10,
						"parameters": [
							{
								"kind": "type",
								"name": "Value"
							}
						],
						"name": "among"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "tuple",
						"name": "values"
					}
				],
				"comment": "Ditto\n",
				"name": "among"
			},
			{
				"kind": "template",
				"line": 230,
				"members": [
					{
						"kind": "function",
						"line": 230,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "(Object switchObject)",
						"parameters": [
							{
								"type": "Object",
								"name": "switchObject"
							}
						],
						"name": "castSwitch",
						"endline": 364
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "tuple",
						"name": "choices"
					}
				],
				"comment": "Executes and returns one of a collection of handlers based on the type of the\nswitch object.\n\nThe first choice that $(D switchObject) can be casted to the type\nof argument it accepts will be called with $(D switchObject) casted to that\ntype, and the value it'll return will be returned by $(D castSwitch).\n\nIf a choice's return type is void, the choice must throw an exception, unless\nall the choices are void. In that case, castSwitch itself will return void.\n\nThrows: If none of the choice matches, a $(D SwitchError) will be thrown.  $(D\nSwitchError) will also be thrown if not all the choices are void and a void\nchoice was executed without throwing anything.\n\nParams:\n    choices = The $(D choices) needs to be composed of function or delegate\n        handlers that accept one argument. There can also be a choice that\n        accepts zero arguments. That choice will be invoked if the $(D\n        switchObject) is null.\n\nReturns:\n    The value of the selected choice.\n\nNote: $(D castSwitch) can only be used with object types.\nExample:\n\n---\nimport std.algorithm.iteration : map;\nimport std.format : format;\n\nclass A\n{\n    int a;\n    this(int a) {this.a = a;}\n    @property int i() { return a; }\n}\ninterface I { }\nclass B : I { }\n\nObject[] arr = [new A(1), new B(), null];\n\nauto results = arr.map!(castSwitch!(\n                            (A a) => \"A with a value of %d\".format(a.a),\n                            (I i) => \"derived from I\",\n                            ()    => \"null reference\",\n                        ))();\n\n// A is handled directly:\nassert(results[0] == \"A with a value of 1\");\n// B has no handler - it is handled by the handler of I:\nassert(results[1] == \"derived from I\");\n// null is handled by the null handler:\nassert(results[2] == \"null reference\");\n\n---\nExample:\nUsing with void handlers:\n---\nimport std.exception : assertThrown;\n\nclass A { }\nclass B { }\n// Void handlers are allowed if they throw:\nassertThrown!Exception(\n    new B().castSwitch!(\n        (A a) => 1,\n        (B d)    { throw new Exception(\"B is not allowed!\"); }\n    )()\n);\n\n// Void handlers are also allowed if all the handlers are void:\nnew A().castSwitch!(\n    (A a) { assert(true); },\n    (B b) { assert(false); },\n)();\n\n---\n",
				"name": "castSwitch"
			},
			{
				"kind": "template",
				"line": 506,
				"members": [
					{
						"kind": "function",
						"line": 506,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "(T1 val, T2 lower, T3 upper)",
						"parameters": [
							{
								"type": "T1",
								"name": "val"
							},
							{
								"type": "T2",
								"name": "lower"
							},
							{
								"type": "T3",
								"name": "upper"
							}
						],
						"name": "clamp",
						"endline": 515
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "T1"
					},
					{
						"kind": "type",
						"name": "T2"
					},
					{
						"kind": "type",
						"name": "T3"
					}
				],
				"comment": " Clamps a value into the given bounds.\n\nThis functions is equivalent to $(D max(lower, min(upper,val))).\n\nParams:\n    val = The value to _clamp.\n    lower = The _lower bound of the _clamp.\n    upper = The _upper bound of the _clamp.\n\nReturns:\n    Returns $(D val), if it is between $(D lower) and $(D upper).\n    Otherwise returns the nearest of the two.\n\nExample:\n\n---\nassert(clamp(2, 1, 3) == 2);\nassert(clamp(0, 1, 3) == 1);\nassert(clamp(4, 1, 3) == 3);\n\nassert(clamp(1, 1, 1) == 1);\n\nassert(clamp(5, -1, 2u) == 2);\n\n---\n",
				"name": "clamp"
			},
			{
				"kind": "template",
				"line": 583,
				"constraint": "isInputRange!R1 && isInputRange!R2 && !(isSomeString!R1 && isSomeString!R2)",
				"members": [
					{
						"kind": "function",
						"line": 583,
						"endchar": 1,
						"char": 5,
						"type": "int(R1 r1, R2 r2)",
						"parameters": [
							{
								"type": "R1",
								"name": "r1"
							},
							{
								"type": "R2",
								"name": "r2"
							}
						],
						"name": "cmp",
						"endline": 594
					}
				],
				"char": 5,
				"parameters": [
					{
						"kind": "alias",
						"name": "pred",
						"defaultAlias": "\"a < b\""
					},
					{
						"kind": "type",
						"name": "R1"
					},
					{
						"kind": "type",
						"name": "R2"
					}
				],
				"comment": "Performs three-way lexicographical comparison on two input ranges\naccording to predicate $(D pred). Iterating $(D r1) and $(D r2) in\nlockstep, $(D cmp) compares each element $(D e1) of $(D r1) with the\ncorresponding element $(D e2) in $(D r2). If one of the ranges has been\nfinished, $(D cmp) returns a negative value if $(D r1) has fewer\nelements than $(D r2), a positive value if $(D r1) has more elements\nthan $(D r2), and $(D 0) if the ranges have the same number of\nelements.\n\nIf the ranges are strings, $(D cmp) performs UTF decoding\nappropriately and compares the ranges one code point at a time.\n\nParams:\n    pred = The predicate used for comparison.\n    r1 = The first range.\n    r2 = The second range.\n\nReturns:\n    0 if both ranges compare equal. -1 if the first differing element of $(D\n    r1) is less than the corresponding element of $(D r2) according to $(D\n    pred). 1 if the first differing element of $(D r2) is less than the\n    corresponding element of $(D r1) according to $(D pred).\n\nExample:\n\n---\nint result;\n\nresult = cmp(\"abc\", \"abc\");\nassert(result == 0);\nresult = cmp(\"\", \"\");\nassert(result == 0);\nresult = cmp(\"abc\", \"abcd\");\nassert(result < 0);\nresult = cmp(\"abcd\", \"abc\");\nassert(result > 0);\nresult = cmp(\"abc\"d, \"abd\");\nassert(result < 0);\nresult = cmp(\"bbc\", \"abc\"w);\nassert(result > 0);\nresult = cmp(\"aaa\", \"aaaa\"d);\nassert(result < 0);\nresult = cmp(\"aaaa\", \"aaa\"d);\nassert(result > 0);\nresult = cmp(\"aaa\", \"aaa\"d);\nassert(result == 0);\nresult = cmp(cast(int[])[], cast(int[])[]);\nassert(result == 0);\nresult = cmp([1, 2, 3], [1, 2, 3]);\nassert(result == 0);\nresult = cmp([1, 3, 2], [1, 2, 3]);\nassert(result > 0);\nresult = cmp([1, 2, 3], [1L, 2, 3, 4]);\nassert(result < 0);\nresult = cmp([1L, 2, 3], [1, 2]);\nassert(result > 0);\n\n---\n",
				"name": "cmp"
			},
			{
				"kind": "template",
				"line": 597,
				"constraint": "isSomeString!R1 && isSomeString!R2",
				"members": [
					{
						"kind": "function",
						"line": 597,
						"endchar": 1,
						"char": 5,
						"type": "int(R1 r1, R2 r2)",
						"parameters": [
							{
								"type": "R1",
								"name": "r1"
							},
							{
								"type": "R2",
								"name": "r2"
							}
						],
						"name": "cmp",
						"endline": 664
					}
				],
				"char": 5,
				"parameters": [
					{
						"kind": "alias",
						"name": "pred",
						"defaultAlias": "\"a < b\""
					},
					{
						"kind": "type",
						"name": "R1"
					},
					{
						"kind": "type",
						"name": "R2"
					}
				],
				"comment": "ditto\n",
				"name": "cmp"
			},
			{
				"kind": "template",
				"line": 706,
				"members": [
					{
						"kind": "template",
						"line": 725,
						"constraint": "isInputRange!Range1 && isInputRange!Range2 && is(typeof(binaryFun!pred(r1.front, r2.front)))",
						"members": [
							{
								"kind": "function",
								"line": 725,
								"endchar": 5,
								"char": 10,
								"type": "bool(Range1 r1, Range2 r2)",
								"parameters": [
									{
										"type": "Range1",
										"name": "r1"
									},
									{
										"type": "Range2",
										"name": "r2"
									}
								],
								"name": "equal",
								"endline": 759
							}
						],
						"char": 10,
						"parameters": [
							{
								"kind": "type",
								"name": "Range1"
							},
							{
								"kind": "type",
								"name": "Range2"
							}
						],
						"comment": "    This function compares to ranges for equality. The ranges may have\n    different element types, as long as $(D pred(a, b)) evaluates to $(D bool)\n    for $(D a) in $(D r1) and $(D b) in $(D r2).\n    Performs $(BIGOH min(r1.length, r2.length)) evaluations of $(D pred).\n\n    Params:\n        r1 = The first range to be compared.\n        r2 = The second range to be compared.\n\n    Returns:\n        $(D true) if and only if the two ranges compare equal element\n        for element, according to binary predicate $(D pred).\n\n    See_Also:\n        $(WEB sgi.com/tech/stl/_equal.html, STL's _equal)\n",
						"name": "equal"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "alias",
						"name": "pred",
						"defaultAlias": "\"a == b\""
					}
				],
				"comment": "Compares two ranges for equality, as defined by predicate $(D pred)\n(which is $(D ==) by default).\nExample:\n\n---\nimport std.math : approxEqual;\nimport std.algorithm : equal;\n\nint[] a = [ 1, 2, 4, 3 ];\nassert(!equal(a, a[1..$]));\nassert(equal(a, a));\n\n// different types\ndouble[] b = [ 1.0, 2, 4, 3];\nassert(!equal(a, b[1..$]));\nassert(equal(a, b));\n\n// predicated: ensure that two vectors are approximately equal\ndouble[] c = [ 1.005, 2, 4, 3];\nassert(equal!approxEqual(b, c));\n\n---\nExample:\nTip: $(D equal) can itself be used as a predicate to other functions.\nThis can be very useful when the element type of a range is itself a\nrange. In particular, $(D equal) can be its own predicate, allowing\nrange of range (of range...) comparisons.\n---\nimport std.range : iota, chunks;\nimport std.algorithm : equal;\nassert(equal!(equal!equal)(\n    [[[0, 1], [2, 3]], [[4, 5], [6, 7]]],\n    iota(0, 8).chunks(2).chunks(2)\n));\n\n---\n",
				"name": "equal"
			},
			{
				"kind": "enum",
				"line": 900,
				"members": [
					{
						"kind": "enum member",
						"line": 903,
						"value": "'n'",
						"char": 5,
						"name": "none",
						"comment": " Current items are equal; no editing is necessary.\n"
					},
					{
						"kind": "enum member",
						"line": 905,
						"value": "'s'",
						"char": 5,
						"name": "substitute",
						"comment": " Substitute current item in target with current item in source.\n"
					},
					{
						"kind": "enum member",
						"line": 907,
						"value": "'i'",
						"char": 5,
						"name": "insert",
						"comment": " Insert current item from the source into the target.\n"
					},
					{
						"kind": "enum member",
						"line": 909,
						"value": "'r'",
						"char": 5,
						"name": "remove",
						"comment": " Remove current item from the target.\n"
					}
				],
				"char": 1,
				"baseDeco": "a",
				"name": "EditOp",
				"comment": "Encodes $(WEB realityinteractive.com/rgrzywinski/archives/000249.html,\nedit operations) necessary to transform one sequence into\nanother. Given sequences $(D s) (source) and $(D t) (target), a\nsequence of $(D EditOp) encodes the steps that need to be taken to\nconvert $(D s) into $(D t). For example, if $(D s = \"cat\") and $(D\n\"cars\"), the minimal sequence that transforms $(D s) into $(D t) is:\nskip two characters, replace 't' with 'r', and insert an 's'. Working\nwith edit operations is useful in applications such as spell-checkers\n(to find the closest word to a given misspelled word), approximate\nsearches, diff-style programs that compute the difference between\nfiles, efficient encoding of patches, DNA sequence analysis, and\nplagiarism detection.\n"
			},
			{
				"kind": "template",
				"line": 1094,
				"constraint": "isForwardRange!Range1 && isForwardRange!Range2",
				"members": [
					{
						"kind": "function",
						"line": 1094,
						"endchar": 1,
						"char": 8,
						"type": "size_t(Range1 s, Range2 t)",
						"parameters": [
							{
								"type": "Range1",
								"name": "s"
							},
							{
								"type": "Range2",
								"name": "t"
							}
						],
						"name": "levenshteinDistance",
						"endline": 1140
					}
				],
				"char": 8,
				"parameters": [
					{
						"kind": "alias",
						"name": "equals",
						"defaultAlias": ""
					},
					{
						"kind": "type",
						"name": "Range1"
					},
					{
						"kind": "type",
						"name": "Range2"
					}
				],
				"comment": "Returns the $(WEB wikipedia.org/wiki/Levenshtein_distance, Levenshtein\ndistance) between $(D s) and $(D t). The Levenshtein distance computes\nthe minimal amount of edit operations necessary to transform $(D s)\ninto $(D t).  Performs $(BIGOH s.length * t.length) evaluations of $(D\nequals) and occupies $(BIGOH s.length * t.length) storage.\n\nParams:\n    equals = The binary predicate to compare the elements of the two ranges.\n    s = The original range.\n    t = The transformation target\n\nReturns:\n    The minimal number of edits to transform s into t.\n\nDoes not allocate GC memory.\nExample:\n\n---\nimport std.algorithm.iteration : filter;\nimport std.uni : toUpper;\n\nassert(levenshteinDistance(\"cat\", \"rat\") == 1);\nassert(levenshteinDistance(\"parks\", \"spark\") == 2);\nassert(levenshteinDistance(\"abcde\", \"abcde\") == 0);\nassert(levenshteinDistance(\"abcde\", \"abCde\") == 1);\nassert(levenshteinDistance(\"kitten\", \"sitting\") == 3);\nassert(levenshteinDistance!((a, b) => std.uni.toUpper(a) == std.uni.toUpper(b))\n    (\"parks\", \"SPARK\") == 2);\nassert(levenshteinDistance(\"parks\".filter!\"true\", \"spark\".filter!\"true\") == 2);\nassert(levenshteinDistance(\"ID\", \"I♥D\") == 1);\n\n---\n",
				"name": "levenshteinDistance"
			},
			{
				"kind": "template",
				"line": 1180,
				"constraint": "isForwardRange!Range1 && isForwardRange!Range2",
				"members": [
					{
						"kind": "function",
						"line": 1180,
						"endchar": 1,
						"char": 1,
						"type": "Tuple!(size_t, EditOp[])(Range1 s, Range2 t)",
						"parameters": [
							{
								"type": "Range1",
								"name": "s"
							},
							{
								"type": "Range2",
								"name": "t"
							}
						],
						"name": "levenshteinDistanceAndPath",
						"endline": 1187
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "alias",
						"name": "equals",
						"defaultAlias": "\"a == b\""
					},
					{
						"kind": "type",
						"name": "Range1"
					},
					{
						"kind": "type",
						"name": "Range2"
					}
				],
				"comment": "Returns the Levenshtein distance and the edit path between $(D s) and\n$(D t).\n\nParams:\n    equals = The binary predicate to compare the elements of the two ranges.\n    s = The original range.\n    t = The transformation target\n\nReturns:\n    Tuple with the first element being the minimal amount of edits to transform s into t and\n    the second element being the sequence of edits to effect this transformation.\n\nAllocates GC memory for the returned EditOp[] array.\nExample:\n\n---\nstring a = \"Saturday\", b = \"Sundays\";\nauto p = levenshteinDistanceAndPath(a, b);\nassert(p[0] == 4);\nassert(equal(p[1], \"nrrnsnnni\"));\n\n---\n",
				"name": "levenshteinDistanceAndPath"
			},
			{
				"kind": "template",
				"line": 1222,
				"constraint": "T.length >= 2",
				"members": [
					{
						"kind": "function",
						"line": 1222,
						"endchar": 1,
						"char": 11,
						"type": "MaxType!T(T args)",
						"parameters": [
							{
								"type": "T",
								"name": "args"
							}
						],
						"name": "max",
						"endline": 1247
					}
				],
				"char": 11,
				"parameters": [
					{
						"kind": "tuple",
						"name": "T"
					}
				],
				"comment": "Iterates the passed arguments and return the maximum value.\n\nParams:\n    args = The values to select the maximum from. At least two arguments must\n    be passed.\n\nReturns:\n    The maximum of the passed-in args. The type of the returned value is\n    the type among the passed arguments that is able to store the largest value.\nExample:\n\n---\nint a = 5;\nshort b = 6;\ndouble c = 2;\nauto d = max(a, b);\nassert(is(typeof(d) == int));\nassert(d == 6);\nauto e = min(a, b, c);\nassert(is(typeof(e) == double));\nassert(e == 2);\n\n---\n",
				"name": "max"
			},
			{
				"kind": "template",
				"line": 1330,
				"constraint": "T.length >= 2",
				"members": [
					{
						"kind": "function",
						"line": 1330,
						"endchar": 1,
						"char": 11,
						"type": "MinType!T(T args)",
						"parameters": [
							{
								"type": "T",
								"name": "args"
							}
						],
						"name": "min",
						"endline": 1355
					}
				],
				"char": 11,
				"parameters": [
					{
						"kind": "tuple",
						"name": "T"
					}
				],
				"comment": "Returns the minimum of the passed-in values.\n",
				"name": "min"
			},
			{
				"kind": "template",
				"line": 1400,
				"constraint": "isInputRange!Range1 && isInputRange!Range2",
				"members": [
					{
						"kind": "function",
						"line": 1400,
						"endchar": 1,
						"char": 1,
						"type": "Tuple!(Range1, Range2)(Range1 r1, Range2 r2)",
						"parameters": [
							{
								"type": "Range1",
								"name": "r1"
							},
							{
								"type": "Range2",
								"name": "r2"
							}
						],
						"name": "mismatch",
						"endline": 1408
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "alias",
						"name": "pred",
						"defaultAlias": "\"a == b\""
					},
					{
						"kind": "type",
						"name": "Range1"
					},
					{
						"kind": "type",
						"name": "Range2"
					}
				],
				"comment": "Sequentially compares elements in $(D r1) and $(D r2) in lockstep, and\nstops at the first mismatch (according to $(D pred), by default\nequality). Returns a tuple with the reduced ranges that start with the\ntwo mismatched values. Performs $(BIGOH min(r1.length, r2.length))\nevaluations of $(D pred).\n\nSee_Also:\n    $(WEB sgi.com/tech/stl/_mismatch.html, STL's _mismatch)\nExample:\n\n---\nint[]    x = [ 1,  5, 2, 7,   4, 3 ];\ndouble[] y = [ 1.0, 5, 2, 7.3, 4, 8 ];\nauto m = mismatch(x, y);\nassert(m[0] == x[3 .. $]);\nassert(m[1] == y[3 .. $]);\n\n---\n",
				"name": "mismatch"
			},
			{
				"kind": "template",
				"line": 1464,
				"members": [
					{
						"kind": "function",
						"line": 1464,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "(T switchExpression, lazy R choices)",
						"parameters": [
							{
								"type": "T",
								"name": "switchExpression"
							},
							{
								"storageClass": [
									"lazy"
								],
								"type": "R",
								"name": "choices"
							}
						],
						"name": "predSwitch",
						"endline": 1506
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "alias",
						"name": "pred",
						"defaultAlias": "\"a == b\""
					},
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "tuple",
						"name": "R"
					}
				],
				"comment": "Returns one of a collection of expressions based on the value of the switch\nexpression.\n\n$(D choices) needs to be composed of pairs of test expressions and return\nexpressions. Each test-expression is compared with $(D switchExpression) using\n$(D pred)($(D switchExpression) is the first argument) and if that yields true\n- the return expression is returned.\n\nBoth the test and the return expressions are lazily evaluated.\n\nParams:\n\nswitchExpression = The first argument for the predicate.\n\nchoices = Pairs of test expressions and return expressions. The test\nexpressions will be the second argument for the predicate, and the return\nexpression will be returned if the predicate yields true with $(D\nswitchExpression) and the test expression as arguments.  May also have a\ndefault return expression, that needs to be the last expression without a test\nexpression before it. A return expression may be of void type only if it\nalways throws.\n\nReturns: The return expression associated with the first test expression that\nmade the predicate yield true, or the default return expression if no test\nexpression matched.\n\nThrows: If there is no default return expression and the predicate does not\nyield true with any test expression - $(D SwitchError) is thrown. $(D\nSwitchError) is also thrown if a void return expression was executed without\nthrowing anything.\nExample:\n\n---\nstring res = 2.predSwitch!\"a < b\"(\n    1, \"less than 1\",\n    5, \"less than 5\",\n    10, \"less than 10\",\n    \"greater or equal to 10\");\n\nassert(res == \"less than 5\");\n\n//The arguments are lazy, which allows us to use predSwitch to create\n//recursive functions:\nint factorial(int n)\n{\n    return n.predSwitch!\"a <= b\"(\n        -1, {throw new Exception(\"Can not calculate n! for n < 0\");}(),\n        0, 1, // 0! = 1\n        n * factorial(n - 1) // n! = n * (n - 1)! for n >= 0\n        );\n}\nassert(factorial(3) == 6);\n\n//Void return expressions are allowed if they always throw:\nimport std.exception : assertThrown;\nassertThrown!Exception(factorial(-9));\n\n---\n",
				"name": "predSwitch"
			}
		],
		"name": "std.algorithm.comparison",
		"comment": "This is a submodule of $(LINK2 std_algorithm.html, std.algorithm).\nIt contains generic _comparison algorithms.\n\n$(BOOKTABLE Cheat Sheet,\n\n$(TR $(TH Function Name) $(TH Description))\n\n$(T2 among,\n        Checks if a value is among a set of values, e.g.\n        $(D if (v.among(1, 2, 3)) // `v` is 1, 2 or 3))\n$(T2 castSwitch,\n        $(D (new A()).castSwitch((A a)=>1,(B b)=>2)) returns $(D 1).)\n$(T2 clamp,\n        $(D clamp(1, 3, 6)) returns $(D 3). $(D clamp(4, 3, 6)) returns $(D 4).)\n$(T2 cmp,\n        $(D cmp(\"abc\", \"abcd\")) is $(D -1), $(D cmp(\"abc\", \"aba\")) is $(D 1),\n        and $(D cmp(\"abc\", \"abc\")) is $(D 0).)\n$(T2 equal,\n        Compares ranges for element-by-element equality, e.g.\n        $(D equal([1, 2, 3], [1.0, 2.0, 3.0])) returns $(D true).)\n$(T2 levenshteinDistance,\n        $(D levenshteinDistance(\"kitten\", \"sitting\")) returns $(D 3) by using\n        the $(LUCKY Levenshtein distance _algorithm).)\n$(T2 levenshteinDistanceAndPath,\n        $(D levenshteinDistanceAndPath(\"kitten\", \"sitting\")) returns\n        $(D tuple(3, \"snnnsni\")) by using the $(LUCKY Levenshtein distance\n        _algorithm).)\n$(T2 max,\n        $(D max(3, 4, 2)) returns $(D 4).)\n$(T2 min,\n        $(D min(3, 4, 2)) returns $(D 2).)\n$(T2 mismatch,\n        $(D mismatch(\"oh hi\", \"ohayo\")) returns $(D tuple(\" hi\", \"ayo\")).)\n$(T2 predSwitch,\n        $(D 2.predSwitch(1, \"one\", 2, \"two\", 3, \"three\")) returns $(D \"two\").)\n)\n\nCopyright: Andrei Alexandrescu 2008-.\n\nLicense: $(WEB boost.org/LICENSE_1_0.txt, Boost License 1.0).\n\nAuthors: $(WEB erdani.com, Andrei Alexandrescu)\n\nSource: $(PHOBOSSRC std/algorithm/_comparison.d)\n\nMacros:\nT2=$(TR $(TDNW $(LREF $1)) $(TD $+))\n"
	},
	{
		"kind": "module",
		"file": "../phobos/std/algorithm/setops.d",
		"members": [
			{
				"kind": "template",
				"line": 70,
				"constraint": "!allSatisfy!(isForwardRange, R1, R2) || anySatisfy!(isInfinite, R1, R2)",
				"members": [
					{
						"kind": "function",
						"line": 70,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "(R1 range1, R2 range2)",
						"parameters": [
							{
								"type": "R1",
								"name": "range1"
							},
							{
								"type": "R2",
								"name": "range2"
							}
						],
						"name": "cartesianProduct",
						"endline": 111
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "R1"
					},
					{
						"kind": "type",
						"name": "R2"
					}
				],
				"comment": "Lazily computes the Cartesian product of two or more ranges. The product is a\n_range of tuples of elements from each respective range.\n\nThe conditions for the two-range case are as follows:\n\nIf both ranges are finite, then one must be (at least) a forward range and the\nother an input range.\n\nIf one _range is infinite and the other finite, then the finite _range must\nbe a forward _range, and the infinite range can be an input _range.\n\nIf both ranges are infinite, then both must be forward ranges.\n\nWhen there are more than two ranges, the above conditions apply to each\nadjacent pair of ranges.\nExample:\n\n---\nimport std.algorithm.searching : canFind;\nimport std.range;\nimport std.typecons : tuple;\n\nauto N = sequence!\"n\"(0);         // the range of natural numbers\nauto N2 = cartesianProduct(N, N); // the range of all pairs of natural numbers\n\n// Various arbitrary number pairs can be found in the range in finite time.\nassert(canFind(N2, tuple(0, 0)));\nassert(canFind(N2, tuple(123, 321)));\nassert(canFind(N2, tuple(11, 35)));\nassert(canFind(N2, tuple(279, 172)));\n\n---\nExample:\n\n---\nimport std.algorithm.searching : canFind;\nimport std.typecons : tuple;\n\nauto B = [ 1, 2, 3 ];\nauto C = [ 4, 5, 6 ];\nauto BC = cartesianProduct(B, C);\n\nforeach (n; [[1, 4], [2, 4], [3, 4], [1, 5], [2, 5], [3, 5], [1, 6],\n             [2, 6], [3, 6]])\n{\n    assert(canFind(BC, tuple(n[0], n[1])));\n}\n\n---\nExample:\n\n---\nimport std.algorithm.comparison : equal;\nimport std.typecons : tuple;\n\nauto A = [ 1, 2, 3 ];\nauto B = [ 'a', 'b', 'c' ];\nauto C = [ \"x\", \"y\", \"z\" ];\nauto ABC = cartesianProduct(A, B, C);\n\nassert(ABC.equal([\n    tuple(1, 'a', \"x\"), tuple(1, 'a', \"y\"), tuple(1, 'a', \"z\"),\n    tuple(1, 'b', \"x\"), tuple(1, 'b', \"y\"), tuple(1, 'b', \"z\"),\n    tuple(1, 'c', \"x\"), tuple(1, 'c', \"y\"), tuple(1, 'c', \"z\"),\n    tuple(2, 'a', \"x\"), tuple(2, 'a', \"y\"), tuple(2, 'a', \"z\"),\n    tuple(2, 'b', \"x\"), tuple(2, 'b', \"y\"), tuple(2, 'b', \"z\"),\n    tuple(2, 'c', \"x\"), tuple(2, 'c', \"y\"), tuple(2, 'c', \"z\"),\n    tuple(3, 'a', \"x\"), tuple(3, 'a', \"y\"), tuple(3, 'a', \"z\"),\n    tuple(3, 'b', \"x\"), tuple(3, 'b', \"y\"), tuple(3, 'b', \"z\"),\n    tuple(3, 'c', \"x\"), tuple(3, 'c', \"y\"), tuple(3, 'c', \"z\")\n]));\n\n---\n",
				"name": "cartesianProduct"
			},
			{
				"kind": "template",
				"line": 340,
				"constraint": "ranges.length >= 2 && allSatisfy!(isForwardRange, RR) && !anySatisfy!(isInfinite, RR)",
				"members": [
					{
						"kind": "function",
						"line": 340,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "(RR ranges)",
						"parameters": [
							{
								"type": "RR",
								"name": "ranges"
							}
						],
						"name": "cartesianProduct",
						"endline": 404
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "tuple",
						"name": "RR"
					}
				],
				"comment": "ditto\n",
				"name": "cartesianProduct"
			},
			{
				"kind": "template",
				"line": 437,
				"constraint": "!allSatisfy!(isForwardRange, R1, R2, RR) || anySatisfy!(isInfinite, R1, R2, RR)",
				"members": [
					{
						"kind": "function",
						"line": 437,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "(R1 range1, R2 range2, RR otherRanges)",
						"parameters": [
							{
								"type": "R1",
								"name": "range1"
							},
							{
								"type": "R2",
								"name": "range2"
							},
							{
								"type": "RR",
								"name": "otherRanges"
							}
						],
						"name": "cartesianProduct",
						"endline": 455
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "R1"
					},
					{
						"kind": "type",
						"name": "R2"
					},
					{
						"kind": "tuple",
						"name": "RR"
					}
				],
				"comment": "ditto\n",
				"name": "cartesianProduct"
			},
			{
				"kind": "template",
				"line": 586,
				"members": [
					{
						"kind": "function",
						"line": 586,
						"endchar": 1,
						"char": 6,
						"type": "void(RangeOfRanges ror, Range tgt, SortOutput sorted = SortOutput.no)",
						"parameters": [
							{
								"type": "RangeOfRanges",
								"name": "ror"
							},
							{
								"type": "Range",
								"name": "tgt"
							},
							{
								"default": "SortOutput.no",
								"type": "SortOutput",
								"name": "sorted"
							}
						],
						"name": "largestPartialIntersection",
						"endline": 596
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "alias",
						"name": "less",
						"defaultAlias": "\"a < b\""
					},
					{
						"kind": "type",
						"name": "RangeOfRanges"
					},
					{
						"kind": "type",
						"name": "Range"
					}
				],
				"comment": "Given a range of sorted forward ranges $(D ror), copies to $(D tgt)\nthe elements that are common to most ranges, along with their number\nof occurrences. All ranges in $(D ror) are assumed to be sorted by $(D\nless). Only the most frequent $(D tgt.length) elements are returned.\n\nExample:\n----\n// Figure which number can be found in most arrays of the set of\n// arrays below.\ndouble[][] a =\n[\n    [ 1, 4, 7, 8 ],\n    [ 1, 7 ],\n    [ 1, 7, 8],\n    [ 4 ],\n    [ 7 ],\n];\nauto b = new Tuple!(double, uint)[1];\nlargestPartialIntersection(a, b);\n// First member is the item, second is the occurrence count\nassert(b[0] == tuple(7.0, 4u));\n----\n\n$(D 7.0) is the correct answer because it occurs in $(D 4) out of the\n$(D 5) inputs, more than any other number. The second member of the\nresulting tuple is indeed $(D 4) (recording the number of occurrences\nof $(D 7.0)). If more of the top-frequent numbers are needed, just\ncreate a larger $(D tgt) range. In the example above, creating $(D b)\nwith length $(D 2) yields $(D tuple(1.0, 3u)) in the second position.\n\nThe function $(D largestPartialIntersection) is useful for\ne.g. searching an $(LUCKY inverted index) for the documents most\nlikely to contain some terms of interest. The complexity of the search\nis $(BIGOH n * log(tgt.length)), where $(D n) is the sum of lengths of\nall input ranges. This approach is faster than keeping an associative\narray of the occurrences and then selecting its top items, and also\nrequires less memory ($(D largestPartialIntersection) builds its\nresult directly in $(D tgt) and requires no extra memory).\n\nWarning: Because $(D largestPartialIntersection) does not allocate\nextra memory, it will leave $(D ror) modified. Namely, $(D\nlargestPartialIntersection) assumes ownership of $(D ror) and\ndiscretionarily swaps and advances elements of it. If you want $(D\nror) to preserve its contents after the call, you may want to pass a\nduplicate to $(D largestPartialIntersection) (and perhaps cache the\nduplicate in between calls).\n",
				"name": "largestPartialIntersection"
			},
			{
				"kind": "template",
				"line": 629,
				"members": [
					{
						"kind": "function",
						"line": 629,
						"endchar": 1,
						"char": 6,
						"type": "void(RangeOfRanges ror, Range tgt, WeightsAA weights, SortOutput sorted = SortOutput.no)",
						"parameters": [
							{
								"type": "RangeOfRanges",
								"name": "ror"
							},
							{
								"type": "Range",
								"name": "tgt"
							},
							{
								"type": "WeightsAA",
								"name": "weights"
							},
							{
								"default": "SortOutput.no",
								"type": "SortOutput",
								"name": "sorted"
							}
						],
						"name": "largestPartialIntersectionWeighted",
						"endline": 643
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "alias",
						"name": "less",
						"defaultAlias": "\"a < b\""
					},
					{
						"kind": "type",
						"name": "RangeOfRanges"
					},
					{
						"kind": "type",
						"name": "Range"
					},
					{
						"kind": "type",
						"name": "WeightsAA"
					}
				],
				"comment": "Similar to $(D largestPartialIntersection), but associates a weight\nwith each distinct element in the intersection.\n\nExample:\n----\n// Figure which number can be found in most arrays of the set of\n// arrays below, with specific per-element weights\ndouble[][] a =\n[\n    [ 1, 4, 7, 8 ],\n    [ 1, 7 ],\n    [ 1, 7, 8],\n    [ 4 ],\n    [ 7 ],\n];\nauto b = new Tuple!(double, uint)[1];\ndouble[double] weights = [ 1:1.2, 4:2.3, 7:1.1, 8:1.1 ];\nlargestPartialIntersectionWeighted(a, b, weights);\n// First member is the item, second is the occurrence count\nassert(b[0] == tuple(4.0, 2u));\n----\n\nThe correct answer in this case is $(D 4.0), which, although only\nappears two times, has a total weight $(D 4.6) (three times its weight\n$(D 2.3)). The value $(D 7) is weighted with $(D 1.1) and occurs four\ntimes for a total weight $(D 4.4).\n",
				"name": "largestPartialIntersectionWeighted"
			},
			{
				"kind": "template",
				"line": 748,
				"members": [
					{
						"kind": "struct",
						"line": 748,
						"members": [],
						"char": 1,
						"name": "NWayUnion"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "alias",
						"name": "less"
					},
					{
						"kind": "type",
						"name": "RangeOfRanges"
					}
				],
				"comment": "Computes the union of multiple sets. The input sets are passed as a\nrange of ranges and each is assumed to be sorted by $(D\nless). Computation is done lazily, one union element at a time. The\ncomplexity of one $(D popFront) operation is $(BIGOH\nlog(ror.length)). However, the length of $(D ror) decreases as ranges\nin it are exhausted, so the complexity of a full pass through $(D\nNWayUnion) is dependent on the distribution of the lengths of ranges\ncontained within $(D ror). If all ranges have the same length $(D n)\n(worst case scenario), the complexity of a full pass through $(D\nNWayUnion) is $(BIGOH n * ror.length * log(ror.length)), i.e., $(D\nlog(ror.length)) times worse than just spanning all ranges in\nturn. The output comes sorted (unstably) by $(D less).\n\nWarning: Because $(D NWayUnion) does not allocate extra memory, it\nwill leave $(D ror) modified. Namely, $(D NWayUnion) assumes ownership\nof $(D ror) and discretionarily swaps and advances elements of it. If\nyou want $(D ror) to preserve its contents after the call, you may\nwant to pass a duplicate to $(D NWayUnion) (and perhaps cache the\nduplicate in between calls).\nExample:\n\n---\nimport std.algorithm.comparison : equal;\n\ndouble[][] a =\n[\n    [ 1, 4, 7, 8 ],\n    [ 1, 7 ],\n    [ 1, 7, 8],\n    [ 4 ],\n    [ 7 ],\n];\nauto witness = [\n    1, 1, 1, 4, 4, 7, 7, 7, 7, 8, 8\n];\nassert(equal(nWayUnion(a), witness));\n\n---\n",
				"name": "NWayUnion"
			},
			{
				"kind": "template",
				"line": 799,
				"members": [
					{
						"kind": "function",
						"line": 799,
						"endchar": 1,
						"char": 33,
						"type": "NWayUnion!(less, RangeOfRanges)(RangeOfRanges ror)",
						"parameters": [
							{
								"type": "RangeOfRanges",
								"name": "ror"
							}
						],
						"name": "nWayUnion",
						"endline": 804
					}
				],
				"char": 33,
				"parameters": [
					{
						"kind": "alias",
						"name": "less",
						"defaultAlias": "\"a < b\""
					},
					{
						"kind": "type",
						"name": "RangeOfRanges"
					}
				],
				"comment": "Ditto\n",
				"name": "nWayUnion"
			},
			{
				"kind": "template",
				"line": 830,
				"constraint": "isInputRange!R1 && isInputRange!R2",
				"members": [
					{
						"kind": "struct",
						"line": 830,
						"members": [],
						"char": 1,
						"name": "SetDifference"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "alias",
						"name": "less",
						"defaultAlias": "\"a < b\""
					},
					{
						"kind": "type",
						"name": "R1"
					},
					{
						"kind": "type",
						"name": "R2"
					}
				],
				"comment": "Lazily computes the difference of $(D r1) and $(D r2). The two ranges\nare assumed to be sorted by $(D less). The element types of the two\nranges must have a common type.\nExample:\n\n---\nimport std.algorithm.comparison : equal;\n\nint[] a = [ 1, 2, 4, 5, 7, 9 ];\nint[] b = [ 0, 1, 2, 4, 7, 8 ];\nassert(equal(setDifference(a, b), [5, 9][]));\nstatic assert(isForwardRange!(typeof(setDifference(a, b))));\n\n---\n",
				"name": "SetDifference"
			},
			{
				"kind": "template",
				"line": 892,
				"members": [
					{
						"kind": "function",
						"line": 892,
						"endchar": 1,
						"char": 30,
						"type": "SetDifference!(less, R1, R2)(R1 r1, R2 r2)",
						"parameters": [
							{
								"type": "R1",
								"name": "r1"
							},
							{
								"type": "R2",
								"name": "r2"
							}
						],
						"name": "setDifference",
						"endline": 896
					}
				],
				"char": 30,
				"parameters": [
					{
						"kind": "alias",
						"name": "less",
						"defaultAlias": "\"a < b\""
					},
					{
						"kind": "type",
						"name": "R1"
					},
					{
						"kind": "type",
						"name": "R2"
					}
				],
				"comment": "Ditto\n",
				"name": "setDifference"
			},
			{
				"kind": "template",
				"line": 925,
				"constraint": "Rs.length >= 2 && allSatisfy!(isInputRange, Rs) && !is(CommonType!(staticMap!(ElementType, Rs)) == void)",
				"members": [
					{
						"kind": "struct",
						"line": 925,
						"members": [],
						"char": 1,
						"name": "SetIntersection"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "alias",
						"name": "less",
						"defaultAlias": "\"a < b\""
					},
					{
						"kind": "tuple",
						"name": "Rs"
					}
				],
				"comment": "Lazily computes the intersection of two or more input ranges $(D\nranges). The ranges are assumed to be sorted by $(D less). The element\ntypes of the ranges must have a common type.\nExample:\n\n---\nimport std.algorithm.comparison : equal;\n\nint[] a = [ 1, 2, 4, 5, 7, 9 ];\nint[] b = [ 0, 1, 2, 4, 7, 8 ];\nint[] c = [ 0, 1, 4, 5, 7, 8 ];\nassert(equal(setIntersection(a, a), a));\nassert(equal(setIntersection(a, b), [1, 2, 4, 7]));\nassert(equal(setIntersection(a, b, c), [1, 4, 7]));\n\n---\n",
				"name": "SetIntersection"
			},
			{
				"kind": "template",
				"line": 1013,
				"constraint": "Rs.length >= 2 && allSatisfy!(isInputRange, Rs) && !is(CommonType!(staticMap!(ElementType, Rs)) == void)",
				"members": [
					{
						"kind": "function",
						"line": 1013,
						"endchar": 1,
						"char": 28,
						"type": "SetIntersection!(less, Rs)(Rs ranges)",
						"parameters": [
							{
								"type": "Rs",
								"name": "ranges"
							}
						],
						"name": "setIntersection",
						"endline": 1018
					}
				],
				"char": 28,
				"parameters": [
					{
						"kind": "alias",
						"name": "less",
						"defaultAlias": "\"a < b\""
					},
					{
						"kind": "tuple",
						"name": "Rs"
					}
				],
				"comment": "Ditto\n",
				"name": "setIntersection"
			},
			{
				"kind": "template",
				"line": 1074,
				"constraint": "isInputRange!R1 && isInputRange!R2",
				"members": [
					{
						"kind": "struct",
						"line": 1074,
						"members": [],
						"char": 1,
						"name": "SetSymmetricDifference"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "alias",
						"name": "less",
						"defaultAlias": "\"a < b\""
					},
					{
						"kind": "type",
						"name": "R1"
					},
					{
						"kind": "type",
						"name": "R2"
					}
				],
				"comment": "Lazily computes the symmetric difference of $(D r1) and $(D r2),\ni.e. the elements that are present in exactly one of $(D r1) and $(D\nr2). The two ranges are assumed to be sorted by $(D less), and the\noutput is also sorted by $(D less). The element types of the two\nranges must have a common type.\n\nIf both arguments are ranges of L-values of the same type then\n$(D SetSymmetricDifference) will also be a range of L-values of\nthat type.\nExample:\n\n---\nimport std.algorithm.comparison : equal;\n\nint[] a = [ 1, 2, 4, 5, 7, 9 ];\nint[] b = [ 0, 1, 2, 4, 7, 8 ];\nassert(equal(setSymmetricDifference(a, b), [0, 5, 8, 9][]));\nstatic assert(isForwardRange!(typeof(setSymmetricDifference(a, b))));\n\n---\n",
				"name": "SetSymmetricDifference"
			},
			{
				"kind": "template",
				"line": 1153,
				"members": [
					{
						"kind": "function",
						"line": 1153,
						"endchar": 1,
						"char": 1,
						"type": "SetSymmetricDifference!(less, R1, R2)(R1 r1, R2 r2)",
						"parameters": [
							{
								"type": "R1",
								"name": "r1"
							},
							{
								"type": "R2",
								"name": "r2"
							}
						],
						"name": "setSymmetricDifference",
						"endline": 1157
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "alias",
						"name": "less",
						"defaultAlias": "\"a < b\""
					},
					{
						"kind": "type",
						"name": "R1"
					},
					{
						"kind": "type",
						"name": "R2"
					}
				],
				"comment": "Ditto\n",
				"name": "setSymmetricDifference"
			},
			{
				"kind": "template",
				"line": 1192,
				"constraint": "allSatisfy!(isInputRange, Rs)",
				"members": [
					{
						"kind": "struct",
						"line": 1192,
						"members": [],
						"char": 1,
						"name": "SetUnion"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "alias",
						"name": "less",
						"defaultAlias": "\"a < b\""
					},
					{
						"kind": "tuple",
						"name": "Rs"
					}
				],
				"comment": "Lazily computes the union of two or more ranges $(D rs). The ranges\nare assumed to be sorted by $(D less). Elements in the output are not\nunique; the length of the output is the sum of the lengths of the\ninputs. (The $(D length) member is offered if all ranges also have\nlength.) The element types of all ranges must have a common type.\nExample:\n\n---\nimport std.algorithm.comparison : equal;\n\nint[] a = [ 1, 2, 4, 5, 7, 9 ];\nint[] b = [ 0, 1, 2, 4, 7, 8 ];\ndouble[] c = [ 10.5 ];\n\nstatic assert(isForwardRange!(typeof(setUnion(a, b))));\nassert(setUnion(a, b).length == a.length + b.length);\nassert(equal(setUnion(a, b), [0, 1, 1, 2, 2, 4, 4, 5, 7, 7, 8, 9][]));\nassert(equal(setUnion(a, c, b),\n                [0, 1, 1, 2, 2, 4, 4, 5, 7, 7, 8, 9, 10.5][]));\nauto u = setUnion(a, b);\nu.front--;\nassert(equal(u, [-1, 1, 1, 2, 2, 4, 4, 5, 7, 7, 8, 9][]));\n\n---\n",
				"name": "SetUnion"
			},
			{
				"kind": "template",
				"line": 1303,
				"members": [
					{
						"kind": "function",
						"line": 1303,
						"endchar": 1,
						"char": 21,
						"type": "SetUnion!(less, Rs)(Rs rs)",
						"parameters": [
							{
								"type": "Rs",
								"name": "rs"
							}
						],
						"name": "setUnion",
						"endline": 1307
					}
				],
				"char": 21,
				"parameters": [
					{
						"kind": "alias",
						"name": "less",
						"defaultAlias": "\"a < b\""
					},
					{
						"kind": "tuple",
						"name": "Rs"
					}
				],
				"comment": "Ditto\n",
				"name": "setUnion"
			}
		],
		"name": "std.algorithm.setops",
		"comment": "This is a submodule of $(LINK2 std_algorithm.html, std.algorithm).\nIt contains generic algorithms that implement set operations.\n\n$(BOOKTABLE Cheat Sheet,\n\n$(TR $(TH Function Name) $(TH Description))\n\n$(T2 cartesianProduct,\n        Computes Cartesian product of two ranges.)\n$(T2 largestPartialIntersection,\n        Copies out the values that occur most frequently in a range of ranges.)\n$(T2 largestPartialIntersectionWeighted,\n        Copies out the values that occur most frequently (multiplied by\n        per-value weights) in a range of ranges.)\n$(T2 nWayUnion,\n        Computes the union of a set of sets implemented as a range of sorted\n        ranges.)\n$(T2 setDifference,\n        Lazily computes the set difference of two or more sorted ranges.)\n$(T2 setIntersection,\n        Lazily computes the intersection of two or more sorted ranges.)\n$(T2 setSymmetricDifference,\n        Lazily computes the symmetric set difference of two or more sorted\n        ranges.)\n$(T2 setUnion,\n        Lazily computes the set union of two or more sorted ranges.)\n)\n\nCopyright: Andrei Alexandrescu 2008-.\n\nLicense: $(WEB boost.org/LICENSE_1_0.txt, Boost License 1.0).\n\nAuthors: $(WEB erdani.com, Andrei Alexandrescu)\n\nSource: $(PHOBOSSRC std/algorithm/_setops.d)\n\nMacros:\nT2=$(TR $(TDNW $(LREF $1)) $(TD $+))\n"
	},
	{
		"kind": "module",
		"file": "../phobos/std/algorithm/searching.d",
		"members": [
			{
				"kind": "template",
				"line": 100,
				"members": [
					{
						"kind": "template",
						"line": 107,
						"constraint": "isInputRange!Range && is(typeof(unaryFun!pred(range.front)))",
						"members": [
							{
								"kind": "function",
								"line": 107,
								"endchar": 5,
								"char": 10,
								"type": "bool(Range range)",
								"parameters": [
									{
										"type": "Range",
										"name": "range"
									}
								],
								"name": "all",
								"endline": 113
							}
						],
						"char": 10,
						"parameters": [
							{
								"kind": "type",
								"name": "Range"
							}
						],
						"comment": "    Returns $(D true) if and only if $(I _all) values $(D v) found in the\n    input range $(D range) satisfy the predicate $(D pred).\n    Performs (at most) $(BIGOH range.length) evaluations of $(D pred).\n",
						"name": "all"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "alias",
						"name": "pred",
						"defaultAlias": "\"a\""
					}
				],
				"comment": "Checks if $(I _all) of the elements verify $(D pred).\nExample:\n\n---\nassert( all!\"a & 1\"([1, 3, 5, 7, 9]));\nassert(!all!\"a & 1\"([1, 2, 3, 5, 7, 9]));\n\n---\nExample:\n$(D all) can also be used without a predicate, if its items can be\nevaluated to true or false in a conditional statement. This can be a\nconvenient way to quickly evaluate that $(I _all) of the elements of a range\nare true.\n---\nint[3] vals = [5, 3, 18];\nassert( all(vals[]));\n\n---\n",
				"name": "all"
			},
			{
				"kind": "template",
				"line": 146,
				"members": [
					{
						"kind": "template",
						"line": 153,
						"constraint": "isInputRange!Range && is(typeof(unaryFun!pred(range.front)))",
						"members": [
							{
								"kind": "function",
								"line": 153,
								"endchar": 5,
								"char": 10,
								"type": "bool(Range range)",
								"parameters": [
									{
										"type": "Range",
										"name": "range"
									}
								],
								"name": "any",
								"endline": 157
							}
						],
						"char": 10,
						"parameters": [
							{
								"kind": "type",
								"name": "Range"
							}
						],
						"comment": "    Returns $(D true) if and only if $(I _any) value $(D v) found in the\n    input range $(D range) satisfies the predicate $(D pred).\n    Performs (at most) $(BIGOH range.length) evaluations of $(D pred).\n",
						"name": "any"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "alias",
						"name": "pred",
						"defaultAlias": "\"a\""
					}
				],
				"comment": "Checks if $(I _any) of the elements verifies $(D pred).\n$(D !any) can be used to verify that $(I none) of the elements verify\n$(D pred).\nExample:\n\n---\nimport std.ascii : isWhite;\nassert( all!(any!isWhite)([\"a a\", \"b b\"]));\nassert(!any!(all!isWhite)([\"a a\", \"b b\"]));\n\n---\nExample:\n$(D any) can also be used without a predicate, if its items can be\nevaluated to true or false in a conditional statement. $(D !any) can be a\nconvenient way to quickly test that $(I none) of the elements of a range\nevaluate to true.\n---\nint[3] vals1 = [0, 0, 0];\nassert(!any(vals1[])); //none of vals1 evaluate to true\n\nint[3] vals2 = [2, 0, 2];\nassert( any(vals2[]));\nassert(!all(vals2[]));\n\nint[3] vals3 = [3, 3, 3];\nassert( any(vals3[]));\nassert( all(vals3[]));\n\n---\n",
				"name": "any"
			},
			{
				"kind": "template",
				"line": 204,
				"constraint": "isInputRange!Range && is(typeof(r.front == lPar))",
				"members": [
					{
						"kind": "function",
						"line": 204,
						"endchar": 1,
						"char": 6,
						"type": "bool(Range r, E lPar, E rPar, size_t maxNestingLevel = size_t.max)",
						"parameters": [
							{
								"type": "Range",
								"name": "r"
							},
							{
								"type": "E",
								"name": "lPar"
							},
							{
								"type": "E",
								"name": "rPar"
							},
							{
								"default": "size_t.max",
								"type": "size_t",
								"name": "maxNestingLevel"
							}
						],
						"name": "balancedParens",
						"endline": 223
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "Range"
					},
					{
						"kind": "type",
						"name": "E"
					}
				],
				"comment": "Checks whether $(D r) has \"balanced parentheses\", i.e. all instances\nof $(D lPar) are closed by corresponding instances of $(D rPar). The\nparameter $(D maxNestingLevel) controls the nesting level allowed. The\nmost common uses are the default or $(D 0). In the latter case, no\nnesting is allowed.\nExample:\n\n---\nauto s = \"1 + (2 * (3 + 1 / 2)\";\nassert(!balancedParens(s, '(', ')'));\ns = \"1 + (2 * (3 + 1) / 2)\";\nassert(balancedParens(s, '(', ')'));\ns = \"1 + (2 * (3 + 1) / 2)\";\nassert(!balancedParens(s, '(', ')', 0));\ns = \"1 + (2 * 3 + 1) / (2 - 5)\";\nassert(balancedParens(s, '(', ')', 0));\n\n---\n",
				"name": "balancedParens"
			},
			{
				"kind": "template",
				"line": 253,
				"constraint": "isRandomAccessRange!Range || isSomeString!Range",
				"members": [
					{
						"kind": "function",
						"line": 253,
						"endchar": 1,
						"char": 44,
						"type": "BoyerMooreFinder!(binaryFun!pred, Range)(Range needle)",
						"parameters": [
							{
								"type": "Range",
								"name": "needle"
							}
						],
						"name": "boyerMooreFinder",
						"endline": 258
					}
				],
				"char": 44,
				"parameters": [
					{
						"kind": "alias",
						"name": "pred",
						"defaultAlias": "\"a == b\""
					},
					{
						"kind": "type",
						"name": "Range"
					}
				],
				"comment": " Sets up Boyer-Moore matching for use with $(D find) below.\n By default, elements are compared for equality.\n\n $(D BoyerMooreFinder) allocates GC memory.\n\n Params:\n pred = Predicate used to compare elements.\n needle = A random-access range with length and slicing.\n\n Returns:\n An instance of $(D BoyerMooreFinder) that can be used with $(D find()) to\n invoke the Boyer-Moore matching algorithm for finding of $(D needle) in a\n given haystack.\n",
				"name": "boyerMooreFinder"
			},
			{
				"kind": "template",
				"line": 261,
				"members": [
					{
						"kind": "struct",
						"line": 261,
						"members": [],
						"char": 1,
						"name": "BoyerMooreFinder"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "alias",
						"name": "pred"
					},
					{
						"kind": "type",
						"name": "Range"
					}
				],
				"comment": "Ditto\n",
				"name": "BoyerMooreFinder"
			},
			{
				"kind": "template",
				"line": 377,
				"constraint": "isForwardRange!R1 && isInputRange!R2 && !isNarrowString!R1 && is(typeof(binaryFun!pred(r1.front, r2.front)))",
				"members": [
					{
						"kind": "function",
						"line": 377,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "(R1 r1, R2 r2)",
						"parameters": [
							{
								"type": "R1",
								"name": "r1"
							},
							{
								"type": "R2",
								"name": "r2"
							}
						],
						"name": "commonPrefix",
						"endline": 408
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "alias",
						"name": "pred",
						"defaultAlias": "\"a == b\""
					},
					{
						"kind": "type",
						"name": "R1"
					},
					{
						"kind": "type",
						"name": "R2"
					}
				],
				"comment": "Returns the common prefix of two ranges.\n\nParams:\n    pred = The predicate to use in comparing elements for commonality. Defaults\n        to equality $(D \"a == b\").\n\n    r1 = A $(XREF2 range, isForwardRange, forward range) of elements.\n\n    r2 = An $(XREF2 range, isInputRange, input range) of elements.\n\nReturns:\nA slice of $(D r1) which contains the characters that both ranges start with,\nif the first argument is a string; otherwise, the same as the result of\n$(D takeExactly(r1, n)), where $(D n) is the number of elements in the common\nprefix of both ranges.\n\nSee_Also:\n    $(XREF range, takeExactly)\nExample:\n\n---\nassert(commonPrefix(\"hello, world\", \"hello, there\") == \"hello, \");\n\n---\n",
				"name": "commonPrefix"
			},
			{
				"kind": "template",
				"line": 417,
				"constraint": "isNarrowString!R1 && isInputRange!R2 && is(typeof(binaryFun!pred(r1.front, r2.front)))",
				"members": [
					{
						"kind": "function",
						"line": 417,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "(R1 r1, R2 r2)",
						"parameters": [
							{
								"type": "R1",
								"name": "r1"
							},
							{
								"type": "R2",
								"name": "r2"
							}
						],
						"name": "commonPrefix",
						"endline": 435
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "alias",
						"name": "pred"
					},
					{
						"kind": "type",
						"name": "R1"
					},
					{
						"kind": "type",
						"name": "R2"
					}
				],
				"comment": "ditto\n",
				"name": "commonPrefix"
			},
			{
				"kind": "template",
				"line": 438,
				"constraint": "isNarrowString!R1 && isInputRange!R2 && !isNarrowString!R2 && is(typeof(r1.front == r2.front))",
				"members": [
					{
						"kind": "function",
						"line": 438,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "(R1 r1, R2 r2)",
						"parameters": [
							{
								"type": "R1",
								"name": "r1"
							},
							{
								"type": "R2",
								"name": "r2"
							}
						],
						"name": "commonPrefix",
						"endline": 443
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "R1"
					},
					{
						"kind": "type",
						"name": "R2"
					}
				],
				"comment": "ditto\n",
				"name": "commonPrefix"
			},
			{
				"kind": "template",
				"line": 446,
				"constraint": "isNarrowString!R1 && isNarrowString!R2",
				"members": [
					{
						"kind": "function",
						"line": 446,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "(R1 r1, R2 r2)",
						"parameters": [
							{
								"type": "R1",
								"name": "r1"
							},
							{
								"type": "R2",
								"name": "r2"
							}
						],
						"name": "commonPrefix",
						"endline": 474
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "R1"
					},
					{
						"kind": "type",
						"name": "R2"
					}
				],
				"comment": "ditto\n",
				"name": "commonPrefix"
			},
			{
				"kind": "template",
				"line": 560,
				"constraint": "isInputRange!Range && !isInfinite!Range && is(typeof(binaryFun!pred(haystack.front, needle)) : bool)",
				"members": [
					{
						"kind": "function",
						"line": 560,
						"endchar": 1,
						"char": 8,
						"type": "size_t(Range haystack, E needle)",
						"parameters": [
							{
								"type": "Range",
								"name": "haystack"
							},
							{
								"type": "E",
								"name": "needle"
							}
						],
						"name": "count",
						"endline": 566
					}
				],
				"char": 8,
				"parameters": [
					{
						"kind": "alias",
						"name": "pred",
						"defaultAlias": "\"a == b\""
					},
					{
						"kind": "type",
						"name": "Range"
					},
					{
						"kind": "type",
						"name": "E"
					}
				],
				"comment": "The first version counts the number of elements $(D x) in $(D r) for\nwhich $(D pred(x, value)) is $(D true). $(D pred) defaults to\nequality. Performs $(BIGOH haystack.length) evaluations of $(D pred).\n\nThe second version returns the number of times $(D needle) occurs in\n$(D haystack). Throws an exception if $(D needle.empty), as the _count\nof the empty range in any range would be infinite. Overlapped counts\nare not considered, for example $(D count(\"aaa\", \"aa\")) is $(D 1), not\n$(D 2).\n\nThe third version counts the elements for which $(D pred(x)) is $(D\ntrue). Performs $(BIGOH haystack.length) evaluations of $(D pred).\n\nNote: Regardless of the overload, $(D count) will not accept\ninfinite ranges for $(D haystack).\nExample:\n\n---\nimport std.uni : toLower;\n\n// count elements in range\nint[] a = [ 1, 2, 4, 3, 2, 5, 3, 2, 4 ];\nassert(count(a, 2) == 3);\nassert(count!(\"a > b\")(a, 2) == 5);\n// count range in range\nassert(count(\"abcadfabf\", \"ab\") == 2);\nassert(count(\"ababab\", \"abab\") == 1);\nassert(count(\"ababab\", \"abx\") == 0);\n// fuzzy count range in range\nassert(count!((a, b) => std.uni.toLower(a) == std.uni.toLower(b))(\"AbcAdFaBf\", \"ab\") == 2);\n// count predicate in range\nassert(count!(\"a > 1\")(a) == 8);\n\n---\n",
				"name": "count"
			},
			{
				"kind": "template",
				"line": 617,
				"constraint": "isForwardRange!R1 && !isInfinite!R1 && isForwardRange!R2 && is(typeof(binaryFun!pred(haystack.front, needle.front)) : bool)",
				"members": [
					{
						"kind": "function",
						"line": 617,
						"endchar": 1,
						"char": 8,
						"type": "size_t(R1 haystack, R2 needle)",
						"parameters": [
							{
								"type": "R1",
								"name": "haystack"
							},
							{
								"type": "R2",
								"name": "needle"
							}
						],
						"name": "count",
						"endline": 638
					}
				],
				"char": 8,
				"parameters": [
					{
						"kind": "alias",
						"name": "pred",
						"defaultAlias": "\"a == b\""
					},
					{
						"kind": "type",
						"name": "R1"
					},
					{
						"kind": "type",
						"name": "R2"
					}
				],
				"comment": "Ditto\n",
				"name": "count"
			},
			{
				"kind": "template",
				"line": 641,
				"constraint": "isInputRange!R && !isInfinite!R && is(typeof(unaryFun!pred(haystack.front)) : bool)",
				"members": [
					{
						"kind": "function",
						"line": 641,
						"endchar": 1,
						"char": 8,
						"type": "size_t(R haystack)",
						"parameters": [
							{
								"type": "R",
								"name": "haystack"
							}
						],
						"name": "count",
						"endline": 650
					}
				],
				"char": 8,
				"parameters": [
					{
						"kind": "alias",
						"name": "pred",
						"defaultAlias": "\"true\""
					},
					{
						"kind": "type",
						"name": "R"
					}
				],
				"comment": "Ditto\n",
				"name": "count"
			},
			{
				"kind": "template",
				"line": 684,
				"constraint": "isForwardRange!R && Rs.length > 0 && isForwardRange!(Rs[0]) == isInputRange!(Rs[0]) && is(typeof(startsWith!pred(haystack, needles[0]))) && (Rs.length == 1 || is(typeof(countUntil!pred(haystack, needles[1..__dollar]))))",
				"members": [
					{
						"kind": "function",
						"line": 684,
						"endchar": 1,
						"char": 11,
						"type": "ptrdiff_t(R haystack, Rs needles)",
						"parameters": [
							{
								"type": "R",
								"name": "haystack"
							},
							{
								"type": "Rs",
								"name": "needles"
							}
						],
						"name": "countUntil",
						"endline": 769
					}
				],
				"char": 11,
				"parameters": [
					{
						"kind": "alias",
						"name": "pred",
						"defaultAlias": "\"a == b\""
					},
					{
						"kind": "type",
						"name": "R"
					},
					{
						"kind": "tuple",
						"name": "Rs"
					}
				],
				"comment": "    Counts elements in the given $(XREF2 range, isForwardRange, forward range)\n    until the given predicate is true for one of the given $(D needles).\n\n    Params:\n        pred = The predicate for determining when to stop counting.\n        haystack = The $(XREF2 range, isInputRange, input range) to be counted.\n        needles = Either a single element, or a $(XREF2 range, isForwardRange,\n            forward range) of elements, to be evaluated in turn against each\n            element in $(D haystack) under the given predicate.\n\n    Returns: The number of elements which must be popped from the front of\n    $(D haystack) before reaching an element for which\n    $(D startsWith!pred(haystack, needles)) is $(D true). If\n    $(D startsWith!pred(haystack, needles)) is not $(D true) for any element in\n    $(D haystack), then $(D -1) is returned.\nExample:\n\n---\nassert(countUntil(\"hello world\", \"world\") == 6);\nassert(countUntil(\"hello world\", 'r') == 8);\nassert(countUntil(\"hello world\", \"programming\") == -1);\nassert(countUntil(\"日本語\", \"本語\") == 1);\nassert(countUntil(\"日本語\", '語')   == 2);\nassert(countUntil(\"日本語\", \"五\") == -1);\nassert(countUntil(\"日本語\", '五') == -1);\nassert(countUntil([0, 7, 12, 22, 9], [12, 22]) == 2);\nassert(countUntil([0, 7, 12, 22, 9], 9) == 4);\nassert(countUntil!\"a > b\"([0, 7, 12, 22, 9], 20) == 3);\n\n---\n",
				"name": "countUntil"
			},
			{
				"kind": "template",
				"line": 772,
				"constraint": "isInputRange!R && is(typeof(binaryFun!pred(haystack.front, needle)) : bool)",
				"members": [
					{
						"kind": "function",
						"line": 772,
						"endchar": 1,
						"char": 11,
						"type": "ptrdiff_t(R haystack, N needle)",
						"parameters": [
							{
								"type": "R",
								"name": "haystack"
							},
							{
								"type": "N",
								"name": "needle"
							}
						],
						"name": "countUntil",
						"endline": 778
					}
				],
				"char": 11,
				"parameters": [
					{
						"kind": "alias",
						"name": "pred",
						"defaultAlias": "\"a == b\""
					},
					{
						"kind": "type",
						"name": "R"
					},
					{
						"kind": "type",
						"name": "N"
					}
				],
				"comment": "ditto\n",
				"name": "countUntil"
			},
			{
				"kind": "template",
				"line": 841,
				"constraint": "isInputRange!R && is(typeof(unaryFun!pred(haystack.front)) : bool)",
				"members": [
					{
						"kind": "function",
						"line": 841,
						"endchar": 1,
						"char": 11,
						"type": "ptrdiff_t(R haystack)",
						"parameters": [
							{
								"type": "R",
								"name": "haystack"
							}
						],
						"name": "countUntil",
						"endline": 882
					}
				],
				"char": 11,
				"parameters": [
					{
						"kind": "alias",
						"name": "pred"
					},
					{
						"kind": "type",
						"name": "R"
					}
				],
				"comment": "    Similar to the previous overload of $(D countUntil), except that this one\n    evaluates only the predicate $(D pred).\n\n    Params:\n        pred = Predicate to when to stop counting.\n        haystack = An $(XREF2 range, isInputRange, input range) of elements\n          to be counted.\n    Returns: The number of elements which must be popped from $(D haystack)\n    before $(D pred(haystack.front)) is $(D true).\nExample:\n\n---\nimport std.ascii : isDigit;\nimport std.uni : isWhite;\n\nassert(countUntil!(std.uni.isWhite)(\"hello world\") == 5);\nassert(countUntil!(std.ascii.isDigit)(\"hello world\") == -1);\nassert(countUntil!\"a > 20\"([0, 7, 12, 22, 9]) == 3);\n\n---\n",
				"name": "countUntil"
			},
			{
				"kind": "template",
				"line": 946,
				"constraint": "isBidirectionalRange!Range && Needles.length > 1 && is(typeof(.endsWith!pred(doesThisEnd, withOneOfThese[0])) : bool) && is(typeof(.endsWith!pred(doesThisEnd, withOneOfThese[1..__dollar])) : uint)",
				"members": [
					{
						"kind": "function",
						"line": 946,
						"endchar": 1,
						"char": 6,
						"type": "uint(Range doesThisEnd, Needles withOneOfThese)",
						"parameters": [
							{
								"type": "Range",
								"name": "doesThisEnd"
							},
							{
								"type": "Needles",
								"name": "withOneOfThese"
							}
						],
						"name": "endsWith",
						"endline": 1010
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "alias",
						"name": "pred",
						"defaultAlias": "\"a == b\""
					},
					{
						"kind": "type",
						"name": "Range"
					},
					{
						"kind": "tuple",
						"name": "Needles"
					}
				],
				"comment": "Checks if the given range ends with (one of) the given needle(s).\nThe reciprocal of $(D startsWith).\n\nParams:\n    pred = The predicate to use for comparing elements between the range and\n        the needle(s).\n\n    doesThisEnd = The $(XREF2 range, isBidirectionalRange, bidirectional range)\n        to check.\n\n    withOneOfThese = The needles to check against, which may be single\n        elements, or bidirectional ranges of elements.\n\n    withThis = The single element to check.\n\nReturns:\n0 if the needle(s) do not occur at the end of the given range;\notherwise the position of the matching needle, that is, 1 if the range ends\nwith $(D withOneOfThese[0]), 2 if it ends with $(D withOneOfThese[1]), and so\non.\nExample:\n\n---\nassert(endsWith(\"abc\", \"\"));\nassert(!endsWith(\"abc\", \"b\"));\nassert(endsWith(\"abc\", \"a\", 'c') == 2);\nassert(endsWith(\"abc\", \"c\", \"a\") == 1);\nassert(endsWith(\"abc\", \"c\", \"c\") == 1);\nassert(endsWith(\"abc\", \"bc\", \"c\") == 2);\nassert(endsWith(\"abc\", \"x\", \"c\", \"b\") == 2);\nassert(endsWith(\"abc\", \"x\", \"aa\", \"bc\") == 3);\nassert(endsWith(\"abc\", \"x\", \"aaa\", \"sab\") == 0);\nassert(endsWith(\"abc\", \"x\", \"aaa\", 'c', \"sab\") == 3);\n\n---\n",
				"name": "endsWith"
			},
			{
				"kind": "template",
				"line": 1013,
				"constraint": "isBidirectionalRange!R1 && isBidirectionalRange!R2 && is(typeof(binaryFun!pred(doesThisEnd.back, withThis.back)) : bool)",
				"members": [
					{
						"kind": "function",
						"line": 1013,
						"endchar": 1,
						"char": 6,
						"type": "bool(R1 doesThisEnd, R2 withThis)",
						"parameters": [
							{
								"type": "R1",
								"name": "doesThisEnd"
							},
							{
								"type": "R2",
								"name": "withThis"
							}
						],
						"name": "endsWith",
						"endline": 1038
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "alias",
						"name": "pred",
						"defaultAlias": "\"a == b\""
					},
					{
						"kind": "type",
						"name": "R1"
					},
					{
						"kind": "type",
						"name": "R2"
					}
				],
				"comment": "Ditto\n",
				"name": "endsWith"
			},
			{
				"kind": "template",
				"line": 1041,
				"constraint": "isBidirectionalRange!R && is(typeof(binaryFun!pred(doesThisEnd.back, withThis)) : bool)",
				"members": [
					{
						"kind": "function",
						"line": 1041,
						"endchar": 1,
						"char": 6,
						"type": "bool(R doesThisEnd, E withThis)",
						"parameters": [
							{
								"type": "R",
								"name": "doesThisEnd"
							},
							{
								"type": "E",
								"name": "withThis"
							}
						],
						"name": "endsWith",
						"endline": 1048
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "alias",
						"name": "pred",
						"defaultAlias": "\"a == b\""
					},
					{
						"kind": "type",
						"name": "R"
					},
					{
						"kind": "type",
						"name": "E"
					}
				],
				"comment": "Ditto\n",
				"name": "endsWith"
			},
			{
				"kind": "template",
				"line": 1186,
				"constraint": "isInputRange!InputRange && is(typeof(binaryFun!pred(haystack.front, needle)) : bool)",
				"members": [
					{
						"kind": "function",
						"line": 1186,
						"endchar": 1,
						"char": 12,
						"type": "InputRange(InputRange haystack, Element needle)",
						"parameters": [
							{
								"type": "InputRange",
								"name": "haystack"
							},
							{
								"type": "Element",
								"name": "needle"
							}
						],
						"name": "find",
						"endline": 1320
					}
				],
				"char": 12,
				"parameters": [
					{
						"kind": "alias",
						"name": "pred",
						"defaultAlias": "\"a == b\""
					},
					{
						"kind": "type",
						"name": "InputRange"
					},
					{
						"kind": "type",
						"name": "Element"
					}
				],
				"comment": "Finds an individual element in an input range. Elements of $(D\nhaystack) are compared with $(D needle) by using predicate $(D\npred). Performs $(BIGOH walkLength(haystack)) evaluations of $(D\npred).\n\nTo _find the last occurrence of $(D needle) in $(D haystack), call $(D\nfind(retro(haystack), needle)). See $(XREF range, retro).\n\nParams:\n\npred = The predicate for comparing each element with the needle, defaulting to\n$(D \"a == b\").\nThe negated predicate $(D \"a != b\") can be used to search instead for the first\nelement $(I not) matching the needle.\n\nhaystack = The $(XREF2 range, isInputRange, input range) searched in.\n\nneedle = The element searched for.\n\nConstraints:\n\n$(D isInputRange!InputRange && is(typeof(binaryFun!pred(haystack.front, needle)\n: bool)))\n\nReturns:\n\n$(D haystack) advanced such that the front element is the one searched for;\nthat is, until $(D binaryFun!pred(haystack.front, needle)) is $(D true). If no\nsuch position exists, returns an empty $(D haystack).\n\nSee_Also:\n     $(WEB sgi.com/tech/stl/_find.html, STL's _find)\nExample:\n\n---\nimport std.algorithm.comparison : equal;\nimport std.container : SList;\n\nassert(find(\"hello, world\", ',') == \", world\");\nassert(find([1, 2, 3, 5], 4) == []);\nassert(equal(find(SList!int(1, 2, 3, 4, 5)[], 4), SList!int(4, 5)[]));\nassert(find!\"a > b\"([1, 2, 3, 5], 2) == [3, 5]);\n\nauto a = [ 1, 2, 3 ];\nassert(find(a, 5).empty);       // not found\nassert(!find(a, 2).empty);      // found\n\n// Case-insensitive find of a string\nstring[] s = [ \"Hello\", \"world\", \"!\" ];\nassert(!find!(\"toLower(a) == b\")(s, \"hello\").empty);\n\n---\n",
				"name": "find"
			},
			{
				"kind": "template",
				"line": 1470,
				"constraint": "isInputRange!InputRange",
				"members": [
					{
						"kind": "function",
						"line": 1470,
						"endchar": 1,
						"char": 12,
						"type": "InputRange(InputRange haystack)",
						"parameters": [
							{
								"type": "InputRange",
								"name": "haystack"
							}
						],
						"name": "find",
						"endline": 1510
					}
				],
				"char": 12,
				"parameters": [
					{
						"kind": "alias",
						"name": "pred"
					},
					{
						"kind": "type",
						"name": "InputRange"
					}
				],
				"comment": "Advances the input range $(D haystack) by calling $(D haystack.popFront)\nuntil either $(D pred(haystack.front)), or $(D\nhaystack.empty). Performs $(BIGOH haystack.length) evaluations of $(D\npred).\n\nTo _find the last element of a bidirectional $(D haystack) satisfying\n$(D pred), call $(D find!(pred)(retro(haystack))). See $(XREF\nrange, retro).\n\nParams:\n\npred = The predicate for determining if a given element is the one being\nsearched for.\n\nhaystack = The $(XREF2 range, isInputRange, input range) to search in.\n\nReturns:\n\n$(D haystack) advanced such that the front element is the one searched for;\nthat is, until $(D binaryFun!pred(haystack.front, needle)) is $(D true). If no\nsuch position exists, returns an empty $(D haystack).\n\nSee_Also:\n     $(WEB sgi.com/tech/stl/find_if.html, STL's find_if)\nExample:\n\n---\nauto arr = [ 1, 2, 3, 4, 1 ];\nassert(find!(\"a > 2\")(arr) == [ 3, 4, 1 ]);\n\n// with predicate alias\nbool pred(int x) { return x + 1 > 1.5; }\nassert(find!(pred)(arr) == arr);\n\n---\n",
				"name": "find"
			},
			{
				"kind": "template",
				"line": 1557,
				"constraint": "isForwardRange!R1 && isForwardRange!R2 && is(typeof(binaryFun!pred(haystack.front, needle.front)) : bool) && !isRandomAccessRange!R1",
				"members": [
					{
						"kind": "function",
						"line": 1557,
						"endchar": 1,
						"char": 4,
						"type": "R1(R1 haystack, R2 needle)",
						"parameters": [
							{
								"type": "R1",
								"name": "haystack"
							},
							{
								"type": "R2",
								"name": "needle"
							}
						],
						"name": "find",
						"endline": 1579
					}
				],
				"char": 4,
				"parameters": [
					{
						"kind": "alias",
						"name": "pred",
						"defaultAlias": "\"a == b\""
					},
					{
						"kind": "type",
						"name": "R1"
					},
					{
						"kind": "type",
						"name": "R2"
					}
				],
				"comment": "Finds the first occurrence of a forward range in another forward range.\n\nPerforms $(BIGOH walkLength(haystack) * walkLength(needle)) comparisons in the\nworst case.  There are specializations that improve performance by taking\nadvantage of bidirectional or random access in the given ranges (where\npossible), depending on the statistics of the two ranges' content.\n\nParams:\n\npred = The predicate to use for comparing respective elements from the haystack\nand the needle. Defaults to simple equality $(D \"a == b\").\n\nhaystack = The $(XREF2 range, isForwardRange, forward range) searched in.\n\nneedle = The $(XREF2 range, isForwardRange, forward range) searched for.\n\nReturns:\n\n$(D haystack) advanced such that $(D needle) is a prefix of it (if no\nsuch position exists, returns $(D haystack) advanced to termination).\nExample:\n\n---\nimport std.container : SList;\n\nassert(find(\"hello, world\", \"World\").empty);\nassert(find(\"hello, world\", \"wo\") == \"world\");\nassert([1, 2, 3, 4].find(SList!int(2, 3)[]) == [2, 3, 4]);\nalias C = Tuple!(int, \"x\", int, \"y\");\nauto a = [C(1,0), C(2,0), C(3,1), C(4,0)];\nassert(a.find!\"a.x == b\"([2, 3]) == [C(2,0), C(3,1), C(4,0)]);\nassert(a[1 .. $].find!\"a.x == b\"([2, 3]) == [C(2,0), C(3,1), C(4,0)]);\n\n---\n",
				"name": "find"
			},
			{
				"kind": "template",
				"line": 1922,
				"constraint": "Ranges.length > 1 && is(typeof(startsWith!pred(haystack, needles)))",
				"members": [
					{
						"kind": "function",
						"line": 1922,
						"endchar": 1,
						"char": 23,
						"type": "Tuple!(Range, size_t)(Range haystack, Ranges needles)",
						"parameters": [
							{
								"type": "Range",
								"name": "haystack"
							},
							{
								"type": "Ranges",
								"name": "needles"
							}
						],
						"name": "find",
						"endline": 1934
					}
				],
				"char": 23,
				"parameters": [
					{
						"kind": "alias",
						"name": "pred",
						"defaultAlias": "\"a == b\""
					},
					{
						"kind": "type",
						"name": "Range"
					},
					{
						"kind": "tuple",
						"name": "Ranges"
					}
				],
				"comment": "Finds two or more $(D needles) into a $(D haystack). The predicate $(D\npred) is used throughout to compare elements. By default, elements are\ncompared for equality.\n\nParams:\n\npred = The predicate to use for comparing elements.\n\nhaystack = The target of the search. Must be an input range.\nIf any of $(D needles) is a range with elements comparable to\nelements in $(D haystack), then $(D haystack) must be a forward range\nsuch that the search can backtrack.\n\nneedles = One or more items to search for. Each of $(D needles) must\nbe either comparable to one element in $(D haystack), or be itself a\nforward range with elements comparable with elements in\n$(D haystack).\n\nReturns:\n\nA tuple containing $(D haystack) positioned to match one of the\nneedles and also the 1-based index of the matching element in $(D\nneedles) (0 if none of $(D needles) matched, 1 if $(D needles[0])\nmatched, 2 if $(D needles[1]) matched...). The first needle to be found\nwill be the one that matches. If multiple needles are found at the\nsame spot in the range, then the shortest one is the one which matches\n(if multiple needles of the same length are found at the same spot (e.g\n$(D \"a\") and $(D 'a')), then the left-most of them in the argument list\nmatches).\n\nThe relationship between $(D haystack) and $(D needles) simply means\nthat one can e.g. search for individual $(D int)s or arrays of $(D\nint)s in an array of $(D int)s. In addition, if elements are\nindividually comparable, searches of heterogeneous types are allowed\nas well: a $(D double[]) can be searched for an $(D int) or a $(D\nshort[]), and conversely a $(D long) can be searched for a $(D float)\nor a $(D double[]). This makes for efficient searches without the need\nto coerce one side of the comparison into the other's side type.\n\nThe complexity of the search is $(BIGOH haystack.length *\nmax(needles.length)). (For needles that are individual items, length\nis considered to be 1.) The strategy used in searching several\nsubranges at once maximizes cache usage by moving in $(D haystack) as\nfew times as possible.\nExample:\n\n---\nint[] a = [ 1, 4, 2, 3 ];\nassert(find(a, 4) == [ 4, 2, 3 ]);\nassert(find(a, [ 1, 4 ]) == [ 1, 4, 2, 3 ]);\nassert(find(a, [ 1, 3 ], 4) == tuple([ 4, 2, 3 ], 2));\n// Mixed types allowed if comparable\nassert(find(a, 5, [ 1.2, 3.5 ], 2.0) == tuple([ 2, 3 ], 3));\n\n---\n",
				"name": "find"
			},
			{
				"kind": "template",
				"line": 2046,
				"members": [
					{
						"kind": "function",
						"line": 2046,
						"endchar": 1,
						"char": 8,
						"type": "Range1(Range1 haystack, BoyerMooreFinder!(pred, Range2) needle)",
						"parameters": [
							{
								"type": "Range1",
								"name": "haystack"
							},
							{
								"type": "BoyerMooreFinder!(pred, Range2)",
								"name": "needle"
							}
						],
						"name": "find",
						"endline": 2050
					}
				],
				"char": 8,
				"parameters": [
					{
						"kind": "type",
						"name": "Range1"
					},
					{
						"kind": "alias",
						"name": "pred"
					},
					{
						"kind": "type",
						"name": "Range2"
					}
				],
				"comment": " Finds $(D needle) in $(D haystack) efficiently using the\n $(LUCKY Boyer-Moore) method.\n\n Params:\n haystack = A random-access range with length and slicing.\n needle = A $(LREF BoyerMooreFinder).\n\n Returns:\n $(D haystack) advanced such that $(D needle) is a prefix of it (if no\n such position exists, returns $(D haystack) advanced to termination).\nExample:\n\n---\nint[] a = [ -1, 0, 1, 2, 3, 4, 5 ];\nint[] b = [ 1, 2, 3 ];\n\nassert(find(a, boyerMooreFinder(b)) == [ 1, 2, 3, 4, 5 ]);\nassert(find(b, boyerMooreFinder(a)).empty);\n\n---\n",
				"name": "find"
			},
			{
				"kind": "template",
				"line": 2091,
				"members": [
					{
						"kind": "template",
						"line": 2100,
						"constraint": "is(typeof(find!pred(haystack)))",
						"members": [
							{
								"kind": "function",
								"line": 2100,
								"endchar": 5,
								"char": 10,
								"type": "bool(Range haystack)",
								"parameters": [
									{
										"type": "Range",
										"name": "haystack"
									}
								],
								"name": "canFind",
								"endline": 2104
							}
						],
						"char": 10,
						"parameters": [
							{
								"kind": "type",
								"name": "Range"
							}
						],
						"comment": "    Returns $(D true) if and only if any value $(D v) found in the\n    input range $(D range) satisfies the predicate $(D pred).\n    Performs (at most) $(BIGOH haystack.length) evaluations of $(D pred).\n",
						"name": "canFind"
					},
					{
						"kind": "template",
						"line": 2110,
						"constraint": "is(typeof(find!pred(haystack, needle)))",
						"members": [
							{
								"kind": "function",
								"line": 2110,
								"endchar": 5,
								"char": 10,
								"type": "bool(Range haystack, Element needle)",
								"parameters": [
									{
										"type": "Range",
										"name": "haystack"
									},
									{
										"type": "Element",
										"name": "needle"
									}
								],
								"name": "canFind",
								"endline": 2114
							}
						],
						"char": 10,
						"parameters": [
							{
								"kind": "type",
								"name": "Range"
							},
							{
								"kind": "type",
								"name": "Element"
							}
						],
						"comment": "    Returns $(D true) if and only if $(D needle) can be found in $(D\n    range). Performs $(BIGOH haystack.length) evaluations of $(D pred).\n",
						"name": "canFind"
					},
					{
						"kind": "template",
						"line": 2127,
						"constraint": "Ranges.length > 1 && allSatisfy!(isForwardRange, Ranges) && is(typeof(find!pred(haystack, needles)))",
						"members": [
							{
								"kind": "function",
								"line": 2127,
								"endchar": 5,
								"char": 12,
								"type": "size_t(Range haystack, Ranges needles)",
								"parameters": [
									{
										"type": "Range",
										"name": "haystack"
									},
									{
										"type": "Ranges",
										"name": "needles"
									}
								],
								"name": "canFind",
								"endline": 2133
							}
						],
						"char": 12,
						"parameters": [
							{
								"kind": "type",
								"name": "Range"
							},
							{
								"kind": "tuple",
								"name": "Ranges"
							}
						],
						"comment": "    Returns the 1-based index of the first needle found in $(D haystack). If no\n    needle is found, then $(D 0) is returned.\n\n    So, if used directly in the condition of an if statement or loop, the result\n    will be $(D true) if one of the needles is found and $(D false) if none are\n    found, whereas if the result is used elsewhere, it can either be cast to\n    $(D bool) for the same effect or used to get which needle was found first\n    without having to deal with the tuple that $(D LREF find) returns for the\n    same operation.\n",
						"name": "canFind"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "alias",
						"name": "pred",
						"defaultAlias": "\"a == b\""
					}
				],
				"comment": "Convenience function. Like find, but only returns whether or not the search\nwas successful.\n\nSee_Also:\n$(LREF among) for checking a value against multiple possibilities.\nExample:\n\n---\nassert(canFind([0, 1, 2, 3], 2) == true);\nassert(canFind([0, 1, 2, 3], [1, 2], [2, 3]));\nassert(canFind([0, 1, 2, 3], [1, 2], [2, 3]) == 1);\nassert(canFind([0, 1, 2, 3], [1, 7], [2, 3]));\nassert(canFind([0, 1, 2, 3], [1, 7], [2, 3]) == 2);\n\nassert(canFind([0, 1, 2, 3], 4) == false);\nassert(!canFind([0, 1, 2, 3], [1, 3], [2, 4]));\nassert(canFind([0, 1, 2, 3], [1, 3], [2, 4]) == 0);\n\n---\n",
				"name": "canFind"
			},
			{
				"kind": "template",
				"line": 2187,
				"constraint": "isForwardRange!Range",
				"members": [
					{
						"kind": "function",
						"line": 2187,
						"endchar": 1,
						"char": 7,
						"type": "Range(Range r)",
						"parameters": [
							{
								"type": "Range",
								"name": "r"
							}
						],
						"name": "findAdjacent",
						"endline": 2200
					}
				],
				"char": 7,
				"parameters": [
					{
						"kind": "alias",
						"name": "pred",
						"defaultAlias": "\"a == b\""
					},
					{
						"kind": "type",
						"name": "Range"
					}
				],
				"comment": "Advances $(D r) until it finds the first two adjacent elements $(D a),\n$(D b) that satisfy $(D pred(a, b)). Performs $(BIGOH r.length)\nevaluations of $(D pred).\n\nParams:\n    pred = The predicate to satisfy.\n    r = A $(XREF2 range, isForwardRange, forward range) to search in.\n\nReturns:\n$(D r) advanced to the first occurrence of two adjacent elements that satisfy\nthe given predicate. If there are no such two elements, returns $(D r) advanced\nuntil empty.\n\nSee_Also:\n     $(WEB sgi.com/tech/stl/adjacent_find.html, STL's adjacent_find)\nExample:\n\n---\nint[] a = [ 11, 10, 10, 9, 8, 8, 7, 8, 9 ];\nauto r = findAdjacent(a);\nassert(r == [ 10, 10, 9, 8, 8, 7, 8, 9 ]);\nauto p = findAdjacent!(\"a < b\")(a);\nassert(p == [ 7, 8, 9 ]);\n\n\n---\n",
				"name": "findAdjacent"
			},
			{
				"kind": "template",
				"line": 2263,
				"constraint": "isInputRange!Range1 && isForwardRange!Range2",
				"members": [
					{
						"kind": "function",
						"line": 2263,
						"endchar": 1,
						"char": 8,
						"type": "Range1(Range1 seq, Range2 choices)",
						"parameters": [
							{
								"type": "Range1",
								"name": "seq"
							},
							{
								"type": "Range2",
								"name": "choices"
							}
						],
						"name": "findAmong",
						"endline": 2271
					}
				],
				"char": 8,
				"parameters": [
					{
						"kind": "alias",
						"name": "pred",
						"defaultAlias": "\"a == b\""
					},
					{
						"kind": "type",
						"name": "Range1"
					},
					{
						"kind": "type",
						"name": "Range2"
					}
				],
				"comment": "Searches the given range for an element that matches one of the given choices.\n\nAdvances $(D seq) by calling $(D seq.popFront) until either\n$(D find!(pred)(choices, seq.front)) is $(D true), or $(D seq) becomes empty.\nPerforms $(BIGOH seq.length * choices.length) evaluations of $(D pred).\n\nParams:\n    pred = The predicate to use for determining a match.\n    seq = The $(XREF2 range, isInputRange, input range) to search.\n    choices = A $(XREF2 range, isForwardRange, forward range) of possible\n        choices.\n\nReturns:\n$(D seq) advanced to the first matching element, or until empty if there are no\nmatching elements.\n\nSee_Also:\n    $(WEB sgi.com/tech/stl/find_first_of.html, STL's find_first_of)\nExample:\n\n---\nint[] a = [ -1, 0, 1, 2, 3, 4, 5 ];\nint[] b = [ 3, 1, 2 ];\nassert(findAmong(a, b) == a[2 .. $]);\n\n---\n",
				"name": "findAmong"
			},
			{
				"kind": "template",
				"line": 2305,
				"constraint": "isForwardRange!R1 && isForwardRange!R2 && is(typeof(binaryFun!pred(haystack.front, needle.front)))",
				"members": [
					{
						"kind": "function",
						"line": 2305,
						"endchar": 1,
						"char": 6,
						"type": "bool(ref R1 haystack, R2 needle)",
						"parameters": [
							{
								"storageClass": [
									"ref"
								],
								"type": "R1",
								"name": "haystack"
							},
							{
								"type": "R2",
								"name": "needle"
							}
						],
						"name": "findSkip",
						"endline": 2314
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "alias",
						"name": "pred",
						"defaultAlias": "\"a == b\""
					},
					{
						"kind": "type",
						"name": "R1"
					},
					{
						"kind": "type",
						"name": "R2"
					}
				],
				"comment": " Finds $(D needle) in $(D haystack) and positions $(D haystack)\n right after the first occurrence of $(D needle).\n\n Params:\n  haystack = The $(XREF2 range, isForwardRange, forward range) to search in.\n  needle = The $(XREF2 range, isForwardRange, forward range) to search for.\n\n Returns: $(D true) if the needle was found, in which case $(D haystack) is\n positioned after the end of the first occurrence of $(D needle); otherwise\n $(D false), leaving $(D haystack) untouched.\nExample:\n\n---\n// Needle is found; s is replaced by the substring following the first\n// occurrence of the needle.\nstring s = \"abcdef\";\nassert(findSkip(s, \"cd\") && s == \"ef\");\n\n// Needle is not found; s is left untouched.\ns = \"abcdef\";\nassert(!findSkip(s, \"cxd\") && s == \"abcdef\");\n\n// If the needle occurs at the end of the range, the range is left empty.\ns = \"abcdef\";\nassert(findSkip(s, \"def\") && s.empty);\n\n---\n",
				"name": "findSkip"
			},
			{
				"kind": "template",
				"line": 2365,
				"constraint": "isForwardRange!R1 && isForwardRange!R2",
				"members": [
					{
						"kind": "function",
						"line": 2365,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "(R1 haystack, R2 needle)",
						"parameters": [
							{
								"type": "R1",
								"name": "haystack"
							},
							{
								"type": "R2",
								"name": "needle"
							}
						],
						"name": "findSplit",
						"endline": 2405
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "alias",
						"name": "pred",
						"defaultAlias": "\"a == b\""
					},
					{
						"kind": "type",
						"name": "R1"
					},
					{
						"kind": "type",
						"name": "R2"
					}
				],
				"comment": "These functions find the first occurrence of $(D needle) in $(D\nhaystack) and then split $(D haystack) as follows.\n\n$(D findSplit) returns a tuple $(D result) containing $(I three)\nranges. $(D result[0]) is the portion of $(D haystack) before $(D\nneedle), $(D result[1]) is the portion of $(D haystack) that matches\n$(D needle), and $(D result[2]) is the portion of $(D haystack) after\nthe match. If $(D needle) was not found, $(D result[0])\ncomprehends $(D haystack) entirely and $(D result[1]) and $(D result[2])\nare empty.\n\n$(D findSplitBefore) returns a tuple $(D result) containing two\nranges. $(D result[0]) is the portion of $(D haystack) before $(D\nneedle), and $(D result[1]) is the balance of $(D haystack) starting\nwith the match. If $(D needle) was not found, $(D result[0])\ncomprehends $(D haystack) entirely and $(D result[1]) is empty.\n\n$(D findSplitAfter) returns a tuple $(D result) containing two ranges.\n$(D result[0]) is the portion of $(D haystack) up to and including the\nmatch, and $(D result[1]) is the balance of $(D haystack) starting\nafter the match. If $(D needle) was not found, $(D result[0]) is empty\nand $(D result[1]) is $(D haystack).\n\nIn all cases, the concatenation of the returned ranges spans the\nentire $(D haystack).\n\nIf $(D haystack) is a random-access range, all three components of the\ntuple have the same type as $(D haystack). Otherwise, $(D haystack)\nmust be a forward range and the type of $(D result[0]) and $(D\nresult[1]) is the same as $(XREF range,takeExactly).\nExample:\n\n---\nauto a = \"Carl Sagan Memorial Station\";\nauto r = findSplit(a, \"Velikovsky\");\nassert(r[0] == a);\nassert(r[1].empty);\nassert(r[2].empty);\nr = findSplit(a, \" \");\nassert(r[0] == \"Carl\");\nassert(r[1] == \" \");\nassert(r[2] == \"Sagan Memorial Station\");\nauto r1 = findSplitBefore(a, \"Sagan\");\nassert(r1[0] == \"Carl \", r1[0]);\nassert(r1[1] == \"Sagan Memorial Station\");\nauto r2 = findSplitAfter(a, \"Sagan\");\nassert(r2[0] == \"Carl Sagan\");\nassert(r2[1] == \" Memorial Station\");\n\n---\n",
				"name": "findSplit"
			},
			{
				"kind": "template",
				"line": 2408,
				"constraint": "isForwardRange!R1 && isForwardRange!R2",
				"members": [
					{
						"kind": "function",
						"line": 2408,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "(R1 haystack, R2 needle)",
						"parameters": [
							{
								"type": "R1",
								"name": "haystack"
							},
							{
								"type": "R2",
								"name": "needle"
							}
						],
						"name": "findSplitBefore",
						"endline": 2442
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "alias",
						"name": "pred",
						"defaultAlias": "\"a == b\""
					},
					{
						"kind": "type",
						"name": "R1"
					},
					{
						"kind": "type",
						"name": "R2"
					}
				],
				"comment": "Ditto\n",
				"name": "findSplitBefore"
			},
			{
				"kind": "template",
				"line": 2445,
				"constraint": "isForwardRange!R1 && isForwardRange!R2",
				"members": [
					{
						"kind": "function",
						"line": 2445,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "(R1 haystack, R2 needle)",
						"parameters": [
							{
								"type": "R1",
								"name": "haystack"
							},
							{
								"type": "R2",
								"name": "needle"
							}
						],
						"name": "findSplitAfter",
						"endline": 2485
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "alias",
						"name": "pred",
						"defaultAlias": "\"a == b\""
					},
					{
						"kind": "type",
						"name": "R1"
					},
					{
						"kind": "type",
						"name": "R2"
					}
				],
				"comment": "Ditto\n",
				"name": "findSplitAfter"
			},
			{
				"kind": "template",
				"line": 2572,
				"constraint": "isInputRange!Range && !isInfinite!Range && is(typeof(binaryFun!pred(range.front, range.front)))",
				"members": [
					{
						"kind": "function",
						"line": 2572,
						"endchar": 1,
						"char": 1,
						"type": "Tuple!(ElementType!Range, size_t)(Range range)",
						"parameters": [
							{
								"type": "Range",
								"name": "range"
							}
						],
						"name": "minCount",
						"endline": 2650
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "alias",
						"name": "pred",
						"defaultAlias": "\"a < b\""
					},
					{
						"kind": "type",
						"name": "Range"
					}
				],
				"comment": "Returns the minimum element of a range together with the number of\noccurrences. The function can actually be used for counting the\nmaximum or any other ordering predicate (that's why $(D maxCount) is\nnot provided).\nExample:\n\n---\nimport std.conv : text;\n\ndebug(std_algorithm) scope(success)\n    writeln(\"unittest @\", __FILE__, \":\", __LINE__, \" done.\");\n\nint[] a = [ 2, 3, 4, 1, 2, 4, 1, 1, 2 ];\n// Minimum is 1 and occurs 3 times\nassert(minCount(a) == tuple(1, 3));\n// Maximum is 4 and occurs 2 times\nassert(minCount!(\"a > b\")(a) == tuple(4, 2));\n\n---\n",
				"name": "minCount"
			},
			{
				"kind": "template",
				"line": 2762,
				"constraint": "isForwardRange!Range && !isInfinite!Range && is(typeof(binaryFun!pred(range.front, range.front)))",
				"members": [
					{
						"kind": "function",
						"line": 2762,
						"endchar": 1,
						"char": 7,
						"type": "Range(Range range)",
						"parameters": [
							{
								"type": "Range",
								"name": "range"
							}
						],
						"name": "minPos",
						"endline": 2779
					}
				],
				"char": 7,
				"parameters": [
					{
						"kind": "alias",
						"name": "pred",
						"defaultAlias": "\"a < b\""
					},
					{
						"kind": "type",
						"name": "Range"
					}
				],
				"comment": "Returns the position of the minimum element of forward range $(D\nrange), i.e. a subrange of $(D range) starting at the position of its\nsmallest element and with the same ending as $(D range). The function\ncan actually be used for finding the maximum or any other ordering\npredicate (that's why $(D maxPos) is not provided).\nExample:\n\n---\nint[] a = [ 2, 3, 4, 1, 2, 4, 1, 1, 2 ];\n// Minimum is 1 and first occurs in position 3\nassert(minPos(a) == [ 1, 2, 4, 1, 1, 2 ]);\n// Maximum is 4 and first occurs in position 2\nassert(minPos!(\"a > b\")(a) == [ 4, 1, 2, 4, 1, 1, 2 ]);\n\n---\n",
				"name": "minPos"
			},
			{
				"kind": "template",
				"line": 2853,
				"constraint": "isForwardRange!R1 && isInputRange!R2 && is(typeof(r1.front == r2.front))",
				"members": [
					{
						"kind": "function",
						"line": 2853,
						"endchar": 1,
						"char": 6,
						"type": "bool(ref R1 r1, R2 r2)",
						"parameters": [
							{
								"storageClass": [
									"ref"
								],
								"type": "R1",
								"name": "r1"
							},
							{
								"type": "R2",
								"name": "r2"
							}
						],
						"name": "skipOver",
						"endline": 2872
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "R1"
					},
					{
						"kind": "type",
						"name": "R2"
					}
				],
				"comment": "Skip over the initial portion of the first given range that matches the second\nrange, or do nothing if there is no match.\n\nParams:\n    pred = The predicate that determines whether elements from each respective\n        range match. Defaults to equality $(D \"a == b\").\n    r1 = The $(XREF2 range, isForwardRange, forward range) to move forward.\n    r2 = The $(XREF2 range, isInputRange, input range) representing the initial\n         segment of $(D r1) to skip over.\n\nReturns:\ntrue if the initial segment of $(D r1) matches $(D r2), and $(D r1) has been\nadvanced to the point past this segment; otherwise false, and $(D r1) is left\nin its original position.\nExample:\n\n---\nimport std.algorithm.comparison : equal;\n\nauto s1 = \"Hello world\";\nassert(!skipOver(s1, \"Ha\"));\nassert(s1 == \"Hello world\");\nassert(skipOver(s1, \"Hell\") && s1 == \"o world\");\n\nstring[]  r1 = [\"abc\", \"def\", \"hij\"];\ndstring[] r2 = [\"abc\"d];\nassert(!skipOver!((a, b) => a.equal(b))(r1, [\"def\"d]));\nassert(r1 == [\"abc\", \"def\", \"hij\"]);\nassert(skipOver!((a, b) => a.equal(b))(r1, r2));\nassert(r1 == [\"def\", \"hij\"]);\n\n---\n",
				"name": "skipOver"
			},
			{
				"kind": "template",
				"line": 2875,
				"constraint": "is(typeof(binaryFun!pred(r1.front, r2.front))) && isForwardRange!R1 && isInputRange!R2",
				"members": [
					{
						"kind": "function",
						"line": 2875,
						"endchar": 1,
						"char": 6,
						"type": "bool(ref R1 r1, R2 r2)",
						"parameters": [
							{
								"storageClass": [
									"ref"
								],
								"type": "R1",
								"name": "r1"
							},
							{
								"type": "R2",
								"name": "r2"
							}
						],
						"name": "skipOver",
						"endline": 2895
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "alias",
						"name": "pred"
					},
					{
						"kind": "type",
						"name": "R1"
					},
					{
						"kind": "type",
						"name": "R2"
					}
				],
				"comment": "Ditto\n",
				"name": "skipOver"
			},
			{
				"kind": "template",
				"line": 2932,
				"constraint": "isInputRange!R && is(typeof(r.front == e) : bool)",
				"members": [
					{
						"kind": "function",
						"line": 2932,
						"endchar": 1,
						"char": 6,
						"type": "bool(ref R r, E e)",
						"parameters": [
							{
								"storageClass": [
									"ref"
								],
								"type": "R",
								"name": "r"
							},
							{
								"type": "E",
								"name": "e"
							}
						],
						"name": "skipOver",
						"endline": 2936
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					},
					{
						"kind": "type",
						"name": "E"
					}
				],
				"comment": "Skip over the first element of the given range if it matches the given element,\notherwise do nothing.\n\nParams:\n    pred = The predicate that determines whether an element from the range\n        matches the given element.\n\n    r = The $(XREF range, isInputRange, input range) to skip over.\n\n    e = The element to match.\n\nReturns:\ntrue if the first element matches the given element according to the given\npredicate, and the range has been advanced by one element; otherwise false, and\nthe range is left untouched.\nExample:\n\n---\nimport std.algorithm.comparison : equal;\n\nauto s1 = \"Hello world\";\nassert(!skipOver(s1, 'a'));\nassert(s1 == \"Hello world\");\nassert(skipOver(s1, 'H') && s1 == \"ello world\");\n\nstring[] r = [\"abc\", \"def\", \"hij\"];\ndstring e = \"abc\"d;\nassert(!skipOver!((a, b) => a.equal(b))(r, \"def\"d));\nassert(r == [\"abc\", \"def\", \"hij\"]);\nassert(skipOver!((a, b) => a.equal(b))(r, e));\nassert(r == [\"def\", \"hij\"]);\n\nauto s2 = \"\";\nassert(!s2.skipOver('a'));\n\n---\n",
				"name": "skipOver"
			},
			{
				"kind": "template",
				"line": 2939,
				"constraint": "is(typeof(binaryFun!pred(r.front, e))) && isInputRange!R",
				"members": [
					{
						"kind": "function",
						"line": 2939,
						"endchar": 1,
						"char": 6,
						"type": "bool(ref R r, E e)",
						"parameters": [
							{
								"storageClass": [
									"ref"
								],
								"type": "R",
								"name": "r"
							},
							{
								"type": "E",
								"name": "e"
							}
						],
						"name": "skipOver",
						"endline": 2946
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "alias",
						"name": "pred"
					},
					{
						"kind": "type",
						"name": "R"
					},
					{
						"kind": "type",
						"name": "E"
					}
				],
				"comment": "Ditto\n",
				"name": "skipOver"
			},
			{
				"kind": "template",
				"line": 2999,
				"constraint": "isInputRange!Range && Needles.length > 1 && is(typeof(.startsWith!pred(doesThisStart, withOneOfThese[0])) : bool) && is(typeof(.startsWith!pred(doesThisStart, withOneOfThese[1..__dollar])) : uint)",
				"members": [
					{
						"kind": "function",
						"line": 2999,
						"endchar": 1,
						"char": 6,
						"type": "uint(Range doesThisStart, Needles withOneOfThese)",
						"parameters": [
							{
								"type": "Range",
								"name": "doesThisStart"
							},
							{
								"type": "Needles",
								"name": "withOneOfThese"
							}
						],
						"name": "startsWith",
						"endline": 3069
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "alias",
						"name": "pred",
						"defaultAlias": "\"a == b\""
					},
					{
						"kind": "type",
						"name": "Range"
					},
					{
						"kind": "tuple",
						"name": "Needles"
					}
				],
				"comment": "Checks whether the given $(XREF2 range, isInputRange, input range) starts with\n(one of) the given needle(s).\n\nParams:\n\n    pred = Predicate to use in comparing the elements of the haystack and the\n        needle(s).\n\n    doesThisStart = The input range to check.\n\n    withOneOfThese = The needles against which the range is to be checked,\n        which may be individual elements or input ranges of elements.\n\n    withThis = The single needle to check, which may be either a single element\n        or an input range of elements.\n\nReturns:\n\n0 if the needle(s) do not occur at the beginning of the given range;\notherwise the position of the matching needle, that is, 1 if the range starts\nwith $(D withOneOfThese[0]), 2 if it starts with $(D withOneOfThese[1]), and so\non.\n\nIn the case where $(D doesThisStart) starts with multiple of the ranges or\nelements in $(D withOneOfThese), then the shortest one matches (if there are\ntwo which match which are of the same length (e.g. $(D \"a\") and $(D 'a')), then\nthe left-most of them in the argument\nlist matches).\nExample:\n\n---\nassert(startsWith(\"abc\", \"\"));\nassert(startsWith(\"abc\", \"a\"));\nassert(!startsWith(\"abc\", \"b\"));\nassert(startsWith(\"abc\", 'a', \"b\") == 1);\nassert(startsWith(\"abc\", \"b\", \"a\") == 2);\nassert(startsWith(\"abc\", \"a\", \"a\") == 1);\nassert(startsWith(\"abc\", \"ab\", \"a\") == 2);\nassert(startsWith(\"abc\", \"x\", \"a\", \"b\") == 2);\nassert(startsWith(\"abc\", \"x\", \"aa\", \"ab\") == 3);\nassert(startsWith(\"abc\", \"x\", \"aaa\", \"sab\") == 0);\nassert(startsWith(\"abc\", \"x\", \"aaa\", \"a\", \"sab\") == 3);\nalias C = Tuple!(int, \"x\", int, \"y\");\nassert(startsWith!\"a.x == b\"([ C(1,1), C(1,2), C(2,2) ], [1, 1]));\nassert(startsWith!\"a.x == b\"([ C(1,1), C(2,1), C(2,2) ], [1, 1], [1, 2], [1, 3]) == 2);\n\n---\n",
				"name": "startsWith"
			},
			{
				"kind": "template",
				"line": 3072,
				"constraint": "isInputRange!R1 && isInputRange!R2 && is(typeof(binaryFun!pred(doesThisStart.front, withThis.front)) : bool)",
				"members": [
					{
						"kind": "function",
						"line": 3072,
						"endchar": 1,
						"char": 6,
						"type": "bool(R1 doesThisStart, R2 withThis)",
						"parameters": [
							{
								"type": "R1",
								"name": "doesThisStart"
							},
							{
								"type": "R2",
								"name": "withThis"
							}
						],
						"name": "startsWith",
						"endline": 3138
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "alias",
						"name": "pred",
						"defaultAlias": "\"a == b\""
					},
					{
						"kind": "type",
						"name": "R1"
					},
					{
						"kind": "type",
						"name": "R2"
					}
				],
				"comment": "Ditto\n",
				"name": "startsWith"
			},
			{
				"kind": "template",
				"line": 3141,
				"constraint": "isInputRange!R && is(typeof(binaryFun!pred(doesThisStart.front, withThis)) : bool)",
				"members": [
					{
						"kind": "function",
						"line": 3141,
						"endchar": 1,
						"char": 6,
						"type": "bool(R doesThisStart, E withThis)",
						"parameters": [
							{
								"type": "R",
								"name": "doesThisStart"
							},
							{
								"type": "E",
								"name": "withThis"
							}
						],
						"name": "startsWith",
						"endline": 3148
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "alias",
						"name": "pred",
						"defaultAlias": "\"a == b\""
					},
					{
						"kind": "type",
						"name": "R"
					},
					{
						"kind": "type",
						"name": "E"
					}
				],
				"comment": "Ditto\n",
				"name": "startsWith"
			},
			{
				"kind": "enum",
				"line": 3296,
				"members": [
					{
						"kind": "enum member",
						"line": 3298,
						"value": "0",
						"char": 5,
						"name": "no",
						"comment": "Interval is closed to the right (last element included)\n"
					},
					{
						"kind": "enum member",
						"line": 3299,
						"value": "1",
						"char": 5,
						"name": "yes",
						"comment": "Interval is open to the right (last element is not included)\n"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "OpenRight",
				"comment": "Interval option specifier for $(D until) (below) and others.\n"
			},
			{
				"kind": "template",
				"line": 3411,
				"constraint": "!is(Sentinel == OpenRight)",
				"members": [
					{
						"kind": "function",
						"line": 3411,
						"endchar": 1,
						"char": 1,
						"type": "Until!(pred, Range, Sentinel)(Range range, Sentinel sentinel, OpenRight openRight = OpenRight.yes)",
						"parameters": [
							{
								"type": "Range",
								"name": "range"
							},
							{
								"type": "Sentinel",
								"name": "sentinel"
							},
							{
								"default": "OpenRight.yes",
								"type": "OpenRight",
								"name": "openRight"
							}
						],
						"name": "until",
						"endline": 3416
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "alias",
						"name": "pred",
						"defaultAlias": "\"a == b\""
					},
					{
						"kind": "type",
						"name": "Range"
					},
					{
						"kind": "type",
						"name": "Sentinel"
					}
				],
				"comment": "Lazily iterates $(D range) _until the element $(D e) for which\n$(D pred(e, sentinel)) is true.\n\nParams:\n    pred = Predicate to determine when to stop.\n    range = The $(XREF2 range, isInputRange, input range) to iterate over.\n    sentinel = The element to stop at.\n    openRight = Determines whether the element for which the given predicate is\n        true should be included in the resulting range ($(D OpenRight.no)), or\n        not ($(D OpenRight.yes)).\n\nReturns:\n    An $(XREF2 range, isInputRange, input range) that iterates over the\n    original range's elements, but ends when the specified predicate becomes\n    true. If the original range is a $(XREF2 range, isForwardRange, forward\n    range) or higher, this range will be a forward range.\nExample:\n\n---\nimport std.algorithm.comparison : equal;\nint[] a = [ 1, 2, 4, 7, 7, 2, 4, 7, 3, 5];\nassert(equal(a.until(7), [1, 2, 4][]));\nassert(equal(a.until(7, OpenRight.no), [1, 2, 4, 7][]));\n\n---\n",
				"name": "until"
			},
			{
				"kind": "template",
				"line": 3420,
				"members": [
					{
						"kind": "function",
						"line": 3420,
						"endchar": 1,
						"char": 1,
						"type": "Until!(pred, Range, void)(Range range, OpenRight openRight = OpenRight.yes)",
						"parameters": [
							{
								"type": "Range",
								"name": "range"
							},
							{
								"default": "OpenRight.yes",
								"type": "OpenRight",
								"name": "openRight"
							}
						],
						"name": "until",
						"endline": 3424
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "alias",
						"name": "pred"
					},
					{
						"kind": "type",
						"name": "Range"
					}
				],
				"comment": "Ditto\n",
				"name": "until"
			}
		],
		"name": "std.algorithm.searching",
		"comment": "This is a submodule of $(LINK2 std_algorithm.html, std.algorithm).\nIt contains generic _searching algorithms.\n\n$(BOOKTABLE Cheat Sheet,\n\n$(TR $(TH Function Name) $(TH Description))\n\n$(T2 all,\n        $(D all!\"a > 0\"([1, 2, 3, 4])) returns $(D true) because all elements\n        are positive)\n$(T2 any,\n        $(D any!\"a > 0\"([1, 2, -3, -4])) returns $(D true) because at least one\n        element is positive)\n$(T2 balancedParens,\n        $(D balancedParens(\"((1 + 1) / 2)\")) returns $(D true) because the\n        string has balanced parentheses.)\n$(T2 boyerMooreFinder,\n        $(D find(\"hello world\", boyerMooreFinder(\"or\"))) returns $(D \"orld\")\n        using the $(LUCKY Boyer-Moore _algorithm).)\n$(T2 canFind,\n        $(D canFind(\"hello world\", \"or\")) returns $(D true).)\n$(T2 count,\n        Counts elements that are equal to a specified value or satisfy a\n        predicate.  $(D count([1, 2, 1], 1)) returns $(D 2) and\n        $(D count!\"a < 0\"([1, -3, 0])) returns $(D 1).)\n$(T2 countUntil,\n        $(D countUntil(a, b)) returns the number of steps taken in $(D a) to\n        reach $(D b); for example, $(D countUntil(\"hello!\", \"o\")) returns\n        $(D 4).)\n$(T2 commonPrefix,\n        $(D commonPrefix(\"parakeet\", \"parachute\")) returns $(D \"para\").)\n$(T2 endsWith,\n        $(D endsWith(\"rocks\", \"ks\")) returns $(D true).)\n$(T2 find,\n        $(D find(\"hello world\", \"or\")) returns $(D \"orld\") using linear search.\n        (For binary search refer to $(XREF range,sortedRange).))\n$(T2 findAdjacent,\n        $(D findAdjacent([1, 2, 3, 3, 4])) returns the subrange starting with\n        two equal adjacent elements, i.e. $(D [3, 3, 4]).)\n$(T2 findAmong,\n        $(D findAmong(\"abcd\", \"qcx\")) returns $(D \"cd\") because $(D 'c') is\n        among $(D \"qcx\").)\n$(T2 findSkip,\n        If $(D a = \"abcde\"), then $(D findSkip(a, \"x\")) returns $(D false) and\n        leaves $(D a) unchanged, whereas $(D findSkip(a, 'c')) advances $(D a)\n        to $(D \"cde\") and returns $(D true).)\n$(T2 findSplit,\n        $(D findSplit(\"abcdefg\", \"de\")) returns the three ranges $(D \"abc\"),\n        $(D \"de\"), and $(D \"fg\").)\n$(T2 findSplitAfter,\n        $(D findSplitAfter(\"abcdefg\", \"de\")) returns the two ranges\n        $(D \"abcde\") and $(D \"fg\").)\n$(T2 findSplitBefore,\n        $(D findSplitBefore(\"abcdefg\", \"de\")) returns the two ranges $(D \"abc\")\n        and $(D \"defg\").)\n$(T2 minCount,\n        $(D minCount([2, 1, 1, 4, 1])) returns $(D tuple(1, 3)).)\n$(T2 minPos,\n        $(D minPos([2, 3, 1, 3, 4, 1])) returns the subrange $(D [1, 3, 4, 1]),\n        i.e., positions the range at the first occurrence of its minimal\n        element.)\n$(T2 mismatch,\n        $(D mismatch(\"parakeet\", \"parachute\")) returns the two ranges\n        $(D \"keet\") and $(D \"chute\").)\n$(T2 skipOver,\n        Assume $(D a = \"blah\"). Then $(D skipOver(a, \"bi\")) leaves $(D a)\n        unchanged and returns $(D false), whereas $(D skipOver(a, \"bl\"))\n        advances $(D a) to refer to $(D \"ah\") and returns $(D true).)\n$(T2 startsWith,\n        $(D startsWith(\"hello, world\", \"hello\")) returns $(D true).)\n$(T2 until,\n        Lazily iterates a range until a specific value is found.)\n)\n\nCopyright: Andrei Alexandrescu 2008-.\n\nLicense: $(WEB boost.org/LICENSE_1_0.txt, Boost License 1.0).\n\nAuthors: $(WEB erdani.com, Andrei Alexandrescu)\n\nSource: $(PHOBOSSRC std/algorithm/_searching.d)\n\nMacros:\nT2=$(TR $(TDNW $(LREF $1)) $(TD $+))\n"
	},
	{
		"kind": "module",
		"file": "../phobos/std/algorithm/iteration.d",
		"members": [
			{
				"kind": "template",
				"line": 135,
				"constraint": "isInputRange!Range",
				"members": [
					{
						"kind": "function",
						"line": 135,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "(Range range)",
						"parameters": [
							{
								"type": "Range",
								"name": "range"
							}
						],
						"name": "cache",
						"endline": 139
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "Range"
					}
				],
				"comment": "$(D cache) eagerly evaluates $(D front) of $(D range)\non each construction or call to $(D popFront),\nto store the result in a cache.\nThe result is then directly returned when $(D front) is called,\nrather than re-evaluated.\n\nThis can be a useful function to place in a chain, after functions\nthat have expensive evaluation, as a lazy alternative to $(XREF array,array).\nIn particular, it can be placed after a call to $(D map), or before a call\nto $(D filter).\n\n$(D cache) may provide bidirectional iteration if needed, but since\nthis comes at an increased cost, it must be explicitly requested via the\ncall to $(D cacheBidirectional). Furthermore, a bidirectional cache will\nevaluate the \"center\" element twice, when there is only one element left in\nthe range.\n\n$(D cache) does not provide random access primitives,\nas $(D cache) would be unable to cache the random accesses.\nIf $(D Range) provides slicing primitives,\nthen $(D cache) will provide the same slicing primitives,\nbut $(D hasSlicing!Cache) will not yield true (as the $(XREF range,hasSlicing)\ntrait also checks for random access).\nExample:\n\n---\nimport std.algorithm.comparison : equal;\nimport std.stdio, std.range;\nimport std.typecons : tuple;\n\nulong counter = 0;\ndouble fun(int x)\n{\n    ++counter;\n    // http://en.wikipedia.org/wiki/Quartic_function\n    return ( (x + 4.0) * (x + 1.0) * (x - 1.0) * (x - 3.0) ) / 14.0 + 0.5;\n}\n// Without cache, with array (greedy)\nauto result1 = iota(-4, 5).map!(a =>tuple(a, fun(a)))()\n                         .filter!\"a[1]<0\"()\n                         .map!\"a[0]\"()\n                         .array();\n\n// the values of x that have a negative y are:\nassert(equal(result1, [-3, -2, 2]));\n\n// Check how many times fun was evaluated.\n// As many times as the number of items in both source and result.\nassert(counter == iota(-4, 5).length + result1.length);\n\ncounter = 0;\n// Without array, with cache (lazy)\nauto result2 = iota(-4, 5).map!(a =>tuple(a, fun(a)))()\n                         .cache()\n                         .filter!\"a[1]<0\"()\n                         .map!\"a[0]\"();\n\n// the values of x that have a negative y are:\nassert(equal(result2, [-3, -2, 2]));\n\n// Check how many times fun was evaluated.\n// Only as many times as the number of items in source.\nassert(counter == iota(-4, 5).length);\n\n---\nExample:\nTip: $(D cache) is eager when evaluating elements. If calling front on the\nunderlying range has a side effect, it will be observeable before calling\nfront on the actual cached range.\n\nFurtermore, care should be taken composing $(D cache) with $(XREF range,take).\nBy placing $(D take) before $(D cache), then $(D cache) will be \"aware\"\nof when the range ends, and correctly stop caching elements when needed.\nIf calling front has no side effect though, placing $(D take) after $(D cache)\nmay yield a faster range.\n\nEither way, the resulting ranges will be equivalent, but maybe not at the\nsame cost or side effects.\n---\nimport std.algorithm.comparison : equal;\nimport std.range;\nint i = 0;\n\nauto r = iota(0, 4).tee!((a){i = a;}, No.pipeOnPop);\nauto r1 = r.take(3).cache();\nauto r2 = r.cache().take(3);\n\nassert(equal(r1, [0, 1, 2]));\nassert(i == 2); //The last \"seen\" element was 2. The data in cache has been cleared.\n\nassert(equal(r2, [0, 1, 2]));\nassert(i == 3); //cache has accessed 3. It is still stored internally by cache.\n\n---\n",
				"name": "cache"
			},
			{
				"kind": "template",
				"line": 142,
				"constraint": "isBidirectionalRange!Range",
				"members": [
					{
						"kind": "function",
						"line": 142,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "(Range range)",
						"parameters": [
							{
								"type": "Range",
								"name": "range"
							}
						],
						"name": "cacheBidirectional",
						"endline": 146
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "Range"
					}
				],
				"comment": "ditto\n",
				"name": "cacheBidirectional"
			},
			{
				"kind": "template",
				"line": 429,
				"constraint": "fun.length >= 1",
				"members": [
					{
						"kind": "template",
						"line": 431,
						"constraint": "isInputRange!(Unqual!Range)",
						"members": [
							{
								"kind": "function",
								"line": 431,
								"storageClass": [
									"auto"
								],
								"endchar": 5,
								"char": 10,
								"type": "(Range r)",
								"parameters": [
									{
										"type": "Range",
										"name": "r"
									}
								],
								"name": "map",
								"endline": 458
							}
						],
						"char": 10,
						"parameters": [
							{
								"kind": "type",
								"name": "Range"
							}
						],
						"name": "map"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "tuple",
						"name": "fun"
					}
				],
				"comment": "$(D auto map(Range)(Range r) if (isInputRange!(Unqual!Range));)\n\nImplements the homonym function (also known as $(D transform)) present\nin many languages of functional flavor. The call $(D map!(fun)(range))\nreturns a range of which elements are obtained by applying $(D fun(a))\nleft to right for all elements $(D a) in $(D range). The original ranges are\nnot changed. Evaluation is done lazily.\n\nSee_Also:\n    $(WEB en.wikipedia.org/wiki/Map_(higher-order_function), Map (higher-order function))\nExample:\n\n---\nimport std.algorithm.comparison : equal;\nimport std.range : chain;\nint[] arr1 = [ 1, 2, 3, 4 ];\nint[] arr2 = [ 5, 6 ];\nauto squares = map!(a => a * a)(chain(arr1, arr2));\nassert(equal(squares, [ 1, 4, 9, 16, 25, 36 ]));\n\n---\nExample:\nMultiple functions can be passed to $(D map). In that case, the\nelement type of $(D map) is a tuple containing one element for each\nfunction.\n---\nauto sums = [2, 4, 6, 8];\nauto products = [1, 4, 9, 16];\n\nsize_t i = 0;\nforeach (result; [ 1, 2, 3, 4 ].map!(\"a + a\", \"a * a\"))\n{\n    assert(result[0] == sums[i]);\n    assert(result[1] == products[i]);\n    ++i;\n}\n\n---\nExample:\nYou may alias $(D map) with some function(s) to a symbol and use\nit separately:\n---\nimport std.algorithm.comparison : equal;\nimport std.conv : to;\n\nalias stringize = map!(to!string);\nassert(equal(stringize([ 1, 2, 3, 4 ]), [ \"1\", \"2\", \"3\", \"4\" ]));\n\n---\n",
				"name": "map"
			},
			{
				"kind": "template",
				"line": 818,
				"members": [
					{
						"kind": "template",
						"line": 849,
						"constraint": "isRangeIterable!Range && !isForeachIterable!Range",
						"members": [
							{
								"kind": "function",
								"line": 849,
								"endchar": 5,
								"char": 10,
								"type": "void(Range r)",
								"parameters": [
									{
										"type": "Range",
										"name": "r"
									}
								],
								"name": "each",
								"endline": 871
							}
						],
						"char": 10,
						"parameters": [
							{
								"kind": "type",
								"name": "Range"
							}
						],
						"name": "each"
					},
					{
						"kind": "template",
						"line": 873,
						"constraint": "isForeachIterable!Iterable",
						"members": [
							{
								"kind": "function",
								"line": 873,
								"endchar": 5,
								"char": 10,
								"type": "void(Iterable r)",
								"parameters": [
									{
										"type": "Iterable",
										"name": "r"
									}
								],
								"name": "each",
								"endline": 887
							}
						],
						"char": 10,
						"parameters": [
							{
								"kind": "type",
								"name": "Iterable"
							}
						],
						"name": "each"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "alias",
						"name": "pred",
						"defaultAlias": "\"a\""
					}
				],
				"comment": "Eagerly iterates over $(D r) and calls $(D pred) over _each element.\n\nParams:\n    pred = predicate to apply to each element of the range\n    r = range or iterable over which each iterates\n\nExample:\n---\nvoid deleteOldBackups()\n{\n    import std.algorithm, std.datetime, std.file;\n    auto cutoff = Clock.currTime() - 7.days;\n    dirEntries(\"\", \"*~\", SpanMode.depth)\n        .filter!(de => de.timeLastModified < cutoff)\n        .each!remove();\n}\n---\n\nIf the range supports it, the value can be mutated in place. Examples:\n---\narr.each!((ref a) => a++);\narr.each!\"a++\";\n---\n\nIf no predicate is specified, $(D each) will default to doing nothing\nbut consuming the entire range. $(D .front) will be evaluated, but this\ncan be avoided by explicitly specifying a predicate lambda with a\n$(D lazy) parameter.\n\n$(D each) also supports $(D opApply)-based iterators, so it will work\nwith e.g. $(XREF parallelism, parallel).\n\nSee_Also: $(XREF range,tee)\n\n",
				"name": "each"
			},
			{
				"kind": "template",
				"line": 941,
				"constraint": "is(typeof(unaryFun!predicate))",
				"members": [
					{
						"kind": "template",
						"line": 943,
						"constraint": "isInputRange!(Unqual!Range)",
						"members": [
							{
								"kind": "function",
								"line": 943,
								"storageClass": [
									"auto"
								],
								"endchar": 5,
								"char": 10,
								"type": "(Range range)",
								"parameters": [
									{
										"type": "Range",
										"name": "range"
									}
								],
								"name": "filter",
								"endline": 946
							}
						],
						"char": 10,
						"parameters": [
							{
								"kind": "type",
								"name": "Range"
							}
						],
						"name": "filter"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "alias",
						"name": "predicate"
					}
				],
				"comment": "$(D auto filter(Range)(Range rs) if (isInputRange!(Unqual!Range));)\n\nImplements the higher order _filter function.\n\nParams:\n    predicate = Function to apply to each element of range\n    range = Input range of elements\n\nReturns:\n    $(D filter!(predicate)(range)) returns a new range containing only elements $(D x) in $(D range) for\n    which $(D predicate(x)) returns $(D true).\n\nSee_Also:\n    $(WEB en.wikipedia.org/wiki/Filter_(higher-order_function), Filter (higher-order function))\nExample:\n\n---\nimport std.algorithm.comparison : equal;\nimport std.math : approxEqual;\nimport std.range;\n\nint[] arr = [ 1, 2, 3, 4, 5 ];\n\n// Sum all elements\nauto small = filter!(a => a < 3)(arr);\nassert(equal(small, [ 1, 2 ]));\n\n// Sum again, but with Uniform Function Call Syntax (UFCS)\nauto sum = arr.filter!(a => a < 3);\nassert(equal(sum, [ 1, 2 ]));\n\n// In combination with chain() to span multiple ranges\nint[] a = [ 3, -2, 400 ];\nint[] b = [ 100, -101, 102 ];\nauto r = chain(a, b).filter!(a => a > 0);\nassert(equal(r, [ 3, 400, 100, 102 ]));\n\n// Mixing convertible types is fair game, too\ndouble[] c = [ 2.5, 3.0 ];\nauto r1 = chain(c, a, b).filter!(a => cast(int) a != a);\nassert(approxEqual(r1, [ 2.5 ]));\n\n---\n",
				"name": "filter"
			},
			{
				"kind": "template",
				"line": 1136,
				"members": [
					{
						"kind": "template",
						"line": 1138,
						"constraint": "isBidirectionalRange!(Unqual!Range)",
						"members": [
							{
								"kind": "function",
								"line": 1138,
								"storageClass": [
									"auto"
								],
								"endchar": 5,
								"char": 10,
								"type": "(Range r)",
								"parameters": [
									{
										"type": "Range",
										"name": "r"
									}
								],
								"name": "filterBidirectional",
								"endline": 1141
							}
						],
						"char": 10,
						"parameters": [
							{
								"kind": "type",
								"name": "Range"
							}
						],
						"name": "filterBidirectional"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "alias",
						"name": "pred"
					}
				],
				"comment": " $(D auto filterBidirectional(Range)(Range r) if (isBidirectionalRange!(Unqual!Range));)\n\n Similar to $(D filter), except it defines a bidirectional\n range. There is a speed disadvantage - the constructor spends time\n finding the last element in the range that satisfies the filtering\n condition (in addition to finding the first one). The advantage is\n that the filtered range can be spanned from both directions. Also,\n $(XREF range, retro) can be applied against the filtered range.\n\n Params:\n     pred = Function to apply to each element of range\n     r = Bidirectional range of elements\nExample:\n\n---\nimport std.algorithm.comparison : equal;\nimport std.range;\n\nint[] arr = [ 1, 2, 3, 4, 5 ];\nauto small = filterBidirectional!(\"a < 3\")(arr);\nstatic assert(isBidirectionalRange!(typeof(small)));\nassert(small.back == 2);\nassert(equal(small, [ 1, 2 ]));\nassert(equal(retro(small), [ 2, 1 ]));\n// In combination with chain() to span multiple ranges\nint[] a = [ 3, -2, 400 ];\nint[] b = [ 100, -101, 102 ];\nauto r = filterBidirectional!(\"a > 0\")(chain(a, b));\nassert(r.back == 102);\n\n---\n",
				"name": "filterBidirectional"
			},
			{
				"kind": "template",
				"line": 1305,
				"members": [
					{
						"kind": "function",
						"line": 1305,
						"endchar": 1,
						"char": 21,
						"type": "Group!(pred, Range)(Range r)",
						"parameters": [
							{
								"type": "Range",
								"name": "r"
							}
						],
						"name": "group",
						"endline": 1308
					}
				],
				"char": 21,
				"parameters": [
					{
						"kind": "alias",
						"name": "pred",
						"defaultAlias": "\"a == b\""
					},
					{
						"kind": "type",
						"name": "Range"
					}
				],
				"comment": "Groups consecutively equivalent elements into a single tuple of the element and\nthe number of its repetitions.\n\nSimilarly to $(D uniq), $(D group) produces a range that iterates over unique\nconsecutive elements of the given range. Each element of this range is a tuple\nof the element and the number of times it is repeated in the original range.\nEquivalence of elements is assessed by using the predicate $(D pred), which\ndefaults to $(D \"a == b\").\n\nParams:\n    pred = Binary predicate for determining equivalence of two elements.\n    r = The $(XREF2 range, isInputRange, input range) to iterate over.\n\nReturns: A range of elements of type $(D Tuple!(ElementType!R, uint)),\nrepresenting each consecutively unique element and its respective number of\noccurrences in that run.  This will be an input range if $(D R) is an input\nrange, and a forward range in all other cases.\nExample:\n\n---\nimport std.algorithm.comparison : equal;\nimport std.typecons : tuple, Tuple;\n\nint[] arr = [ 1, 2, 2, 2, 2, 3, 4, 4, 4, 5 ];\nassert(equal(group(arr), [ tuple(1, 1u), tuple(2, 4u), tuple(3, 1u),\n    tuple(4, 3u), tuple(5, 1u) ][]));\n\n---\n",
				"name": "group"
			},
			{
				"kind": "template",
				"line": 1686,
				"constraint": "isInputRange!Range",
				"members": [
					{
						"kind": "function",
						"line": 1686,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "(Range r)",
						"parameters": [
							{
								"type": "Range",
								"name": "r"
							}
						],
						"name": "chunkBy",
						"endline": 1690
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "alias",
						"name": "pred"
					},
					{
						"kind": "type",
						"name": "Range"
					}
				],
				"comment": " Chunks an input range into subranges of equivalent adjacent elements.\n\n Equivalence is defined by the predicate $(D pred), which can be either\n binary or unary. In the binary form, two _range elements $(D a) and $(D b)\n are considered equivalent if $(D pred(a,b)) is true. In unary form, two\n elements are considered equivalent if $(D pred(a) == pred(b)) is true.\n\n This predicate must be an equivalence relation, that is, it must be\n reflexive ($(D pred(x,x)) is always true), symmetric\n ($(D pred(x,y) == pred(y,x))), and transitive ($(D pred(x,y) && pred(y,z))\n implies $(D pred(x,z))). If this is not the case, the range returned by\n chunkBy may assert at runtime or behave erratically.\n\n Params:\n  pred = Predicate for determining equivalence.\n  r = The range to be chunked.\n\n Returns: With a binary predicate, a range of ranges is returned in which\n all elements in a given subrange are equivalent under the given predicate.\n With a unary predicate, a range of tuples is returned, with the tuple\n consisting of the result of the unary predicate for each subrange, and the\n subrange itself.\n\n Notes:\n\n Equivalent elements separated by an intervening non-equivalent element will\n appear in separate subranges; this function only considers adjacent\n equivalence. Elements in the subranges will always appear in the same order\n they appear in the original range.\n\n See_also:\n $(XREF algorithm,group), which collapses adjacent equivalent elements into a\n single element.\nExample:\nShowing usage with binary predicate:\n---\nimport std.algorithm.comparison : equal;\n\n// Grouping by particular attribute of each element:\nauto data = [\n    [1, 1],\n    [1, 2],\n    [2, 2],\n    [2, 3]\n];\n\nauto r1 = data.chunkBy!((a,b) => a[0] == b[0]);\nassert(r1.equal!equal([\n    [[1, 1], [1, 2]],\n    [[2, 2], [2, 3]]\n]));\n\nauto r2 = data.chunkBy!((a,b) => a[1] == b[1]);\nassert(r2.equal!equal([\n    [[1, 1]],\n    [[1, 2], [2, 2]],\n    [[2, 3]]\n]));\n\n---\nExample:\nShowing usage with unary predicate:\n---\nimport std.algorithm.comparison : equal;\nimport std.typecons : tuple;\n\n// Grouping by particular attribute of each element:\nauto range =\n[\n    [1, 1],\n    [1, 1],\n    [1, 2],\n    [2, 2],\n    [2, 3],\n    [2, 3],\n    [3, 3]\n];\n\nauto byX = chunkBy!(a => a[0])(range);\nauto expected1 =\n[\n    tuple(1, [[1, 1], [1, 1], [1, 2]]),\n    tuple(2, [[2, 2], [2, 3], [2, 3]]),\n    tuple(3, [[3, 3]])\n];\nforeach (e; byX)\n{\n    assert(!expected1.empty);\n    assert(e[0] == expected1.front[0]);\n    assert(e[1].equal(expected1.front[1]));\n    expected1.popFront();\n}\n\nauto byY = chunkBy!(a => a[1])(range);\nauto expected2 =\n[\n    tuple(1, [[1, 1], [1, 1]]),\n    tuple(2, [[1, 2], [2, 2]]),\n    tuple(3, [[2, 3], [2, 3], [3, 3]])\n];\nforeach (e; byY)\n{\n    assert(!expected2.empty);\n    assert(e[0] == expected2.front[0]);\n    assert(e[1].equal(expected2.front[1]));\n    expected2.popFront();\n}\n\n---\n",
				"name": "chunkBy"
			},
			{
				"kind": "template",
				"line": 1908,
				"constraint": "isInputRange!RoR && isInputRange!(ElementType!RoR) && isForwardRange!Separator && is(ElementType!Separator : ElementType!(ElementType!RoR))",
				"members": [
					{
						"kind": "function",
						"line": 1908,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "(RoR r, Separator sep)",
						"parameters": [
							{
								"type": "RoR",
								"name": "r"
							},
							{
								"type": "Separator",
								"name": "sep"
							}
						],
						"name": "joiner",
						"endline": 2061
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "RoR"
					},
					{
						"kind": "type",
						"name": "Separator"
					}
				],
				"comment": "Lazily joins a range of ranges with a separator. The separator itself\nis a range. If you do not provide a separator, then the ranges are\njoined directly without anything in between them.\n\nParams:\n    r = An $(XREF2 range, isInputRange, input range) of input ranges to be\n        joined.\n    sep = A $(XREF2 range, isForwardRange, forward range) of element(s) to\n        serve as separators in the joined range.\n\nReturns:\nAn input range of elements in the joined range. This will be a forward range if\nboth outer and inner ranges of $(D RoR) are forward ranges; otherwise it will\nbe only an input range.\n\nSee_also:\n$(XREF range,chain), which chains a sequence of ranges with compatible elements\ninto a single range.\nExample:\n\n---\nimport std.algorithm.comparison : equal;\nimport std.conv : text;\n\ndebug(std_algorithm) scope(success)\n    writeln(\"unittest @\", __FILE__, \":\", __LINE__, \" done.\");\n\nstatic assert(isInputRange!(typeof(joiner([\"\"], \"\"))));\nstatic assert(isForwardRange!(typeof(joiner([\"\"], \"\"))));\nassert(equal(joiner([\"\"], \"xyz\"), \"\"), text(joiner([\"\"], \"xyz\")));\nassert(equal(joiner([\"\", \"\"], \"xyz\"), \"xyz\"), text(joiner([\"\", \"\"], \"xyz\")));\nassert(equal(joiner([\"\", \"abc\"], \"xyz\"), \"xyzabc\"));\nassert(equal(joiner([\"abc\", \"\"], \"xyz\"), \"abcxyz\"));\nassert(equal(joiner([\"abc\", \"def\"], \"xyz\"), \"abcxyzdef\"));\nassert(equal(joiner([\"Mary\", \"has\", \"a\", \"little\", \"lamb\"], \"...\"),\n                \"Mary...has...a...little...lamb\"));\nassert(equal(joiner([\"abc\", \"def\"]), \"abcdef\"));\n\n---\n",
				"name": "joiner"
			},
			{
				"kind": "template",
				"line": 2191,
				"constraint": "isInputRange!RoR && isInputRange!(ElementType!RoR)",
				"members": [
					{
						"kind": "function",
						"line": 2191,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "(RoR r)",
						"parameters": [
							{
								"type": "RoR",
								"name": "r"
							}
						],
						"name": "joiner",
						"endline": 2278
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "RoR"
					}
				],
				"comment": "Ditto\n",
				"name": "joiner"
			},
			{
				"kind": "template",
				"line": 2446,
				"constraint": "fun.length >= 1",
				"members": [
					{
						"kind": "template",
						"line": 2467,
						"constraint": "isIterable!R",
						"members": [
							{
								"kind": "function",
								"line": 2467,
								"storageClass": [
									"auto"
								],
								"endchar": 5,
								"char": 10,
								"type": "(R r)",
								"parameters": [
									{
										"type": "R",
										"name": "r"
									}
								],
								"name": "reduce",
								"endline": 2486
							}
						],
						"char": 10,
						"parameters": [
							{
								"kind": "type",
								"name": "R"
							}
						],
						"comment": "    No-seed version. The first element of $(D r) is used as the seed's value.\n\n    For each function $(D f) in $(D fun), the corresponding\n    seed type $(D S) is $(D Unqual!(typeof(f(e, e)))), where $(D e) is an\n    element of $(D r): $(D ElementType!R) for ranges,\n    and $(D ForeachType!R) otherwise.\n\n    Once S has been determined, then $(D S s = e;) and $(D s = f(s, e);)\n    must both be legal.\n\n    If $(D r) is empty, an $(D Exception) is thrown.\n",
						"name": "reduce"
					},
					{
						"kind": "template",
						"line": 2497,
						"constraint": "isIterable!R",
						"members": [
							{
								"kind": "function",
								"line": 2497,
								"storageClass": [
									"auto"
								],
								"endchar": 5,
								"char": 10,
								"type": "(S seed, R r)",
								"parameters": [
									{
										"type": "S",
										"name": "seed"
									},
									{
										"type": "R",
										"name": "r"
									}
								],
								"name": "reduce",
								"endline": 2508
							}
						],
						"char": 10,
						"parameters": [
							{
								"kind": "type",
								"name": "S"
							},
							{
								"kind": "type",
								"name": "R"
							}
						],
						"comment": "    Seed version. The seed should be a single value if $(D fun) is a\n    single function. If $(D fun) is multiple functions, then $(D seed)\n    should be a $(XREF typecons,Tuple), with one field per function in $(D f).\n\n    For convenience, if the seed is const, or has qualified fields, then\n    $(D reduce) will operate on an unqualified copy. If this happens\n    then the returned type will not perfectly match $(D S).\n",
						"name": "reduce"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "tuple",
						"name": "fun"
					}
				],
				"comment": "Implements the homonym function (also known as $(D accumulate), $(D\ncompress), $(D inject), or $(D foldl)) present in various programming\nlanguages of functional flavor. The call $(D reduce!(fun)(seed,\nrange)) first assigns $(D seed) to an internal variable $(D result),\nalso called the accumulator. Then, for each element $(D x) in $(D\nrange), $(D result = fun(result, x)) gets evaluated. Finally, $(D\nresult) is returned. The one-argument version $(D reduce!(fun)(range))\nworks similarly, but it uses the first element of the range as the\nseed (the range must be non-empty).\n\nReturns:\n    the accumulated $(D result)\n\nSee_Also:\n    $(WEB en.wikipedia.org/wiki/Fold_(higher-order_function), Fold (higher-order function))\n\n    $(LREF sum) is similar to $(D reduce!((a, b) => a + b)) that offers\n    precise summing of floating point numbers.\nExample:\nMany aggregate range operations turn out to be solved with $(D reduce)\nquickly and easily. The example below illustrates $(D reduce)'s\nremarkable power and flexibility.\n---\nimport std.algorithm.comparison : max, min;\nimport std.math : approxEqual;\nimport std.range;\n\nint[] arr = [ 1, 2, 3, 4, 5 ];\n// Sum all elements\nauto sum = reduce!((a,b) => a + b)(0, arr);\nassert(sum == 15);\n\n// Sum again, using a string predicate with \"a\" and \"b\"\nsum = reduce!\"a + b\"(0, arr);\nassert(sum == 15);\n\n// Compute the maximum of all elements\nauto largest = reduce!(max)(arr);\nassert(largest == 5);\n\n// Max again, but with Uniform Function Call Syntax (UFCS)\nlargest = arr.reduce!(max);\nassert(largest == 5);\n\n// Compute the number of odd elements\nauto odds = reduce!((a,b) => a + (b & 1))(0, arr);\nassert(odds == 3);\n\n// Compute the sum of squares\nauto ssquares = reduce!((a,b) => a + b * b)(0, arr);\nassert(ssquares == 55);\n\n// Chain multiple ranges into seed\nint[] a = [ 3, 4 ];\nint[] b = [ 100 ];\nauto r = reduce!(\"a + b\")(chain(a, b));\nassert(r == 107);\n\n// Mixing convertible types is fair game, too\ndouble[] c = [ 2.5, 3.0 ];\nauto r1 = reduce!(\"a + b\")(chain(a, b, c));\nassert(approxEqual(r1, 112.5));\n\n// To minimize nesting of parentheses, Uniform Function Call Syntax can be used\nauto r2 = chain(a, b, c).reduce!(\"a + b\");\nassert(approxEqual(r2, 112.5));\n\n---\nExample:\nSometimes it is very useful to compute multiple aggregates in one pass.\nOne advantage is that the computation is faster because the looping overhead\nis shared. That's why $(D reduce) accepts multiple functions.\nIf two or more functions are passed, $(D reduce) returns a\n$(XREF typecons, Tuple) object with one member per passed-in function.\nThe number of seeds must be correspondingly increased.\n---\nimport std.algorithm.comparison : max, min;\nimport std.math : approxEqual, sqrt;\nimport std.typecons : tuple, Tuple;\n\ndouble[] a = [ 3.0, 4, 7, 11, 3, 2, 5 ];\n// Compute minimum and maximum in one pass\nauto r = reduce!(min, max)(a);\n// The type of r is Tuple!(int, int)\nassert(approxEqual(r[0], 2));  // minimum\nassert(approxEqual(r[1], 11)); // maximum\n\n// Compute sum and sum of squares in one pass\nr = reduce!(\"a + b\", \"a + b * b\")(tuple(0.0, 0.0), a);\nassert(approxEqual(r[0], 35));  // sum\nassert(approxEqual(r[1], 233)); // sum of squares\n// Compute average and standard deviation from the above\nauto avg = r[0] / a.length;\nauto stdev = sqrt(r[1] / a.length - avg * avg);\n\n---\n",
				"name": "reduce"
			},
			{
				"kind": "template",
				"line": 2874,
				"constraint": "is(typeof(binaryFun!pred(r.front, s)) : bool) && (hasSlicing!Range && hasLength!Range || isNarrowString!Range)",
				"members": [
					{
						"kind": "function",
						"line": 2874,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "(Range r, Separator s)",
						"parameters": [
							{
								"type": "Range",
								"name": "r"
							},
							{
								"type": "Separator",
								"name": "s"
							}
						],
						"name": "splitter",
						"endline": 3028
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "alias",
						"name": "pred",
						"defaultAlias": "\"a == b\""
					},
					{
						"kind": "type",
						"name": "Range"
					},
					{
						"kind": "type",
						"name": "Separator"
					}
				],
				"comment": "Lazily splits a range using an element as a separator. This can be used with\nany narrow string type or sliceable range type, but is most popular with string\ntypes.\n\nTwo adjacent separators are considered to surround an empty element in\nthe split range. Use $(D filter!(a => !a.empty)) on the result to compress\nempty elements.\n\nIf the empty range is given, the result is a range with one empty\nelement. If a range with one separator is given, the result is a range\nwith two empty elements.\n\nIf splitting a string on whitespace and token compression is desired,\nconsider using $(D splitter) without specifying a separator (see fourth overload\nbelow).\n\nParams:\n    pred = The predicate for comparing each element with the separator,\n        defaulting to $(D \"a == b\").\n    r = The $(XREF2 range, isInputRange, input range) to be split. Must support\n        slicing and $(D .length).\n    s = The element to be treated as the separator between range segments to be\n        split.\n\nConstraints:\n    The predicate $(D pred) needs to accept an element of $(D r) and the\n    separator $(D s).\n\nReturns:\n    An input range of the subranges of elements between separators. If $(D r)\n    is a forward range or bidirectional range, the returned range will be\n    likewise.\n\nSee_Also:\n $(XREF regex, _splitter) for a version that splits using a regular\nexpression defined separator.\nExample:\n\n---\nimport std.algorithm.comparison : equal;\n\nassert(equal(splitter(\"hello  world\", ' '), [ \"hello\", \"\", \"world\" ]));\nint[] a = [ 1, 2, 0, 0, 3, 0, 4, 5, 0 ];\nint[][] w = [ [1, 2], [], [3], [4, 5], [] ];\nassert(equal(splitter(a, 0), w));\na = [ 0 ];\nassert(equal(splitter(a, 0), [ (int[]).init, (int[]).init ]));\na = [ 0, 1 ];\nassert(equal(splitter(a, 0), [ [], [1] ]));\nw = [ [0], [1], [2] ];\nassert(equal(splitter!\"a.front == b\"(w, 1), [ [[0]], [[2]] ]));\n\n---\n",
				"name": "splitter"
			},
			{
				"kind": "template",
				"line": 3153,
				"constraint": "is(typeof(binaryFun!pred(r.front, s.front)) : bool) && (hasSlicing!Range || isNarrowString!Range) && isForwardRange!Separator && (hasLength!Separator || isNarrowString!Separator)",
				"members": [
					{
						"kind": "function",
						"line": 3153,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "(Range r, Separator s)",
						"parameters": [
							{
								"type": "Range",
								"name": "r"
							},
							{
								"type": "Separator",
								"name": "s"
							}
						],
						"name": "splitter",
						"endline": 3307
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "alias",
						"name": "pred",
						"defaultAlias": "\"a == b\""
					},
					{
						"kind": "type",
						"name": "Range"
					},
					{
						"kind": "type",
						"name": "Separator"
					}
				],
				"comment": "Similar to the previous overload of $(D splitter), except this one uses another\nrange as a separator. This can be used with any narrow string type or sliceable\nrange type, but is most popular with string types.\n\nTwo adjacent separators are considered to surround an empty element in\nthe split range. Use $(D filter!(a => !a.empty)) on the result to compress\nempty elements.\n\nParams:\n    pred = The predicate for comparing each element with the separator,\n        defaulting to $(D \"a == b\").\n    r = The $(XREF2 range, isInputRange, input range) to be split.\n    s = The $(XREF2 range, isForwardRange, forward range) to be treated as the\n        separator between segments of $(D r) to be split.\n\nConstraints:\n    The predicate $(D pred) needs to accept an element of $(D r) and an\n    element of $(D s).\n\nReturns:\n    An input range of the subranges of elements between separators. If $(D r)\n    is a forward range or bidirectional range, the returned range will be\n    likewise.\n\nSee_Also: $(XREF regex, _splitter) for a version that splits using a regular\nexpression defined separator.\nExample:\n\n---\nimport std.algorithm.comparison : equal;\n\nassert(equal(splitter(\"hello  world\", \"  \"), [ \"hello\", \"world\" ]));\nint[] a = [ 1, 2, 0, 0, 3, 0, 4, 5, 0 ];\nint[][] w = [ [1, 2], [3, 0, 4, 5, 0] ];\nassert(equal(splitter(a, [0, 0]), w));\na = [ 0, 0 ];\nassert(equal(splitter(a, [0, 0]), [ (int[]).init, (int[]).init ]));\na = [ 0, 0, 1 ];\nassert(equal(splitter(a, [0, 0]), [ [], [1] ]));\n\n---\n",
				"name": "splitter"
			},
			{
				"kind": "template",
				"line": 3458,
				"constraint": "isForwardRange!Range && is(typeof(unaryFun!isTerminator(input.front)))",
				"members": [
					{
						"kind": "function",
						"line": 3458,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "(Range input)",
						"parameters": [
							{
								"type": "Range",
								"name": "input"
							}
						],
						"name": "splitter",
						"endline": 3462
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "alias",
						"name": "isTerminator"
					},
					{
						"kind": "type",
						"name": "Range"
					}
				],
				"comment": "\nSimilar to the previous overload of $(D splitter), except this one does not use a separator.\nInstead, the predicate is an unary function on the input range's element type.\n\nTwo adjacent separators are considered to surround an empty element in\nthe split range. Use $(D filter!(a => !a.empty)) on the result to compress\nempty elements.\n\nParams:\n    isTerminator = The predicate for deciding where to split the range.\n    input = The $(XREF2 range, isInputRange, input range) to be split.\n\nConstraints:\n    The predicate $(D isTerminator) needs to accept an element of $(D input).\n\nReturns:\n    An input range of the subranges of elements between separators. If $(D input)\n    is a forward range or bidirectional range, the returned range will be\n    likewise.\n\nSee_Also: $(XREF regex, _splitter) for a version that splits using a regular\nexpression defined separator.\nExample:\n\n---\nimport std.algorithm.comparison : equal;\n\nassert(equal(splitter!\"a == ' '\"(\"hello  world\"), [ \"hello\", \"\", \"world\" ]));\nint[] a = [ 1, 2, 0, 0, 3, 0, 4, 5, 0 ];\nint[][] w = [ [1, 2], [], [3], [4, 5], [] ];\nassert(equal(splitter!\"a == 0\"(a), w));\na = [ 0 ];\nassert(equal(splitter!\"a == 0\"(a), [ (int[]).init, (int[]).init ]));\na = [ 0, 1 ];\nassert(equal(splitter!\"a == 0\"(a), [ [], [1] ]));\nw = [ [0], [1], [2] ];\nassert(equal(splitter!\"a.front == 1\"(w), [ [[0]], [[2]] ]));\n\n---\n",
				"name": "splitter"
			},
			{
				"kind": "template",
				"line": 3694,
				"constraint": "isSomeChar!C",
				"members": [
					{
						"kind": "function",
						"line": 3694,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "(C[] s)",
						"parameters": [
							{
								"type": "C[]",
								"name": "s"
							}
						],
						"name": "splitter",
						"endline": 3746
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "C"
					}
				],
				"comment": "Lazily splits the string $(D s) into words, using whitespace as the delimiter.\n\nThis function is string specific and, contrary to\n$(D splitter!(std.uni.isWhite)), runs of whitespace will be merged together\n(no empty tokens will be produced).\n\nParams:\n    s = The string to be split.\n\nReturns:\n    An $(XREF2 range, isInputRange, input range) of slices of the original\n    string split by whitespace.\nExample:\n\n---\nimport std.algorithm.comparison : equal;\nauto a = \" a     bcd   ef gh \";\nassert(equal(splitter(a), [\"a\", \"bcd\", \"ef\", \"gh\"][]));\n\n---\n",
				"name": "splitter"
			},
			{
				"kind": "template",
				"line": 3910,
				"constraint": "isInputRange!R && !isInfinite!R && is(typeof(r.front + r.front))",
				"members": [
					{
						"kind": "function",
						"line": 3910,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "(R r)",
						"parameters": [
							{
								"type": "R",
								"name": "r"
							}
						],
						"name": "sum",
						"endline": 3919
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"comment": "Sums elements of $(D r), which must be a finite $(XREF2 range, isInputRange, input range). Although\nconceptually $(D sum(r)) is equivalent to $(LREF reduce)!((a, b) => a +\nb)(0, r), $(D sum) uses specialized algorithms to maximize accuracy,\nas follows.\n\n$(UL\n$(LI If $(D $(XREF range, ElementType)!R) is a floating-point type and $(D R) is a\n$(XREF2 range, isRandomAccessRange, random-access range) with length and slicing, then $(D sum) uses the\n$(WEB en.wikipedia.org/wiki/Pairwise_summation, pairwise summation)\nalgorithm.)\n$(LI If $(D ElementType!R) is a floating-point type and $(D R) is a\nfinite input range (but not a random-access range with slicing), then\n$(D sum) uses the $(WEB en.wikipedia.org/wiki/Kahan_summation,\nKahan summation) algorithm.)\n$(LI In all other cases, a simple element by element addition is done.)\n)\n\nFor floating point inputs, calculations are made in $(LINK2 ../type.html, $(D real))\nprecision for $(D real) inputs and in $(D double) precision otherwise\n(Note this is a special case that deviates from $(D reduce)'s behavior,\nwhich would have kept $(D float) precision for a $(D float) range).\nFor all other types, the calculations are done in the same type obtained\nfrom from adding two elements of the range, which may be a different\ntype from the elements themselves (for example, in case of $(LINK2 ../type.html#integer-promotions, integral promotion)).\n\nA seed may be passed to $(D sum). Not only will this seed be used as an initial\nvalue, but its type will override all the above, and determine the algorithm\nand precision used for sumation.\n\nNote that these specialized summing algorithms execute more primitive operations\nthan vanilla summation. Therefore, if in certain cases maximum speed is required\nat expense of precision, one can use $(D reduce!((a, b) => a + b)(0, r)), which\nis not specialized for summation.\n\nReturns:\n    The sum of all the elements in the range r.\nExample:\nDitto\n---\nimport std.range;\n\n//simple integral sumation\nassert(sum([ 1, 2, 3, 4]) == 10);\n\n//with integral promotion\nassert(sum([false, true, true, false, true]) == 3);\nassert(sum(ubyte.max.repeat(100)) == 25500);\n\n//The result may overflow\nassert(uint.max.repeat(3).sum()           ==  4294967293U );\n//But a seed can be used to change the sumation primitive\nassert(uint.max.repeat(3).sum(ulong.init) == 12884901885UL);\n\n//Floating point sumation\nassert(sum([1.0, 2.0, 3.0, 4.0]) == 10);\n\n//Floating point operations have double precision minimum\nstatic assert(is(typeof(sum([1F, 2F, 3F, 4F])) == double));\nassert(sum([1F, 2, 3, 4]) == 10);\n\n//Force pair-wise floating point sumation on large integers\nimport std.math : approxEqual;\nassert(iota(ulong.max / 2, ulong.max / 2 + 4096).sum(0.0)\n           .approxEqual((ulong.max / 2) * 4096.0 + 4096^^2 / 2));\n\n---\n",
				"name": "sum"
			},
			{
				"kind": "template",
				"line": 3921,
				"constraint": "isInputRange!R && !isInfinite!R && is(typeof(seed = seed + r.front))",
				"members": [
					{
						"kind": "function",
						"line": 3921,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "(R r, E seed)",
						"parameters": [
							{
								"type": "R",
								"name": "r"
							},
							{
								"type": "E",
								"name": "seed"
							}
						],
						"name": "sum",
						"endline": 3935
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					},
					{
						"kind": "type",
						"name": "E"
					}
				],
				"comment": "ditto\n",
				"name": "sum"
			},
			{
				"kind": "template",
				"line": 4080,
				"constraint": "isInputRange!Range && is(typeof(binaryFun!pred(r.front, r.front)) == bool)",
				"members": [
					{
						"kind": "function",
						"line": 4080,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "(Range r)",
						"parameters": [
							{
								"type": "Range",
								"name": "r"
							}
						],
						"name": "uniq",
						"endline": 4084
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "alias",
						"name": "pred",
						"defaultAlias": "\"a == b\""
					},
					{
						"kind": "type",
						"name": "Range"
					}
				],
				"comment": "Lazily iterates unique consecutive elements of the given range (functionality\nakin to the $(WEB wikipedia.org/wiki/_Uniq, _uniq) system\nutility). Equivalence of elements is assessed by using the predicate\n$(D pred), by default $(D \"a == b\"). If the given range is\nbidirectional, $(D uniq) also yields a bidirectional range.\n\nParams:\n    pred = Predicate for determining equivalence between range elements.\n    r = An $(XREF2 range, isInputRange, input range) of elements to filter.\n\nReturns:\n    An $(XREF2 range, isInputRange, input range) of consecutively unique\n    elements in the original range. If $(D r) is also a forward range or\n    bidirectional range, the returned range will be likewise.\nExample:\n\n---\nimport std.algorithm.mutation : copy;\nimport std.algorithm.comparison : equal;\n\nint[] arr = [ 1, 2, 2, 2, 2, 3, 4, 4, 4, 5 ];\nassert(equal(uniq(arr), [ 1, 2, 3, 4, 5 ][]));\n\n// Filter duplicates in-place using copy\narr.length -= arr.uniq().copy(arr).length;\nassert(arr == [ 1, 2, 3, 4, 5 ]);\n\n// Note that uniqueness is only determined consecutively; duplicated\n// elements separated by an intervening different element will not be\n// eliminated:\nassert(equal(uniq([ 1, 1, 2, 1, 1, 3, 1]), [1, 2, 1, 3, 1]));\n\n---\n",
				"name": "uniq"
			}
		],
		"name": "std.algorithm.iteration",
		"comment": "This is a submodule of $(LINK2 std_algorithm.html, std.algorithm).\nIt contains generic _iteration algorithms.\n\n$(BOOKTABLE Cheat Sheet,\n\n$(TR $(TH Function Name) $(TH Description))\n\n$(T2 cache,\n        Eagerly evaluates and caches another range's $(D front).)\n$(T2 cacheBidirectional,\n        As above, but also provides $(D back) and $(D popBack).)\n$(T2 chunkyBy,\n        $(D chunkyBy!((a,b) => a[1] == b[1])([[1, 1], [1, 2], [2, 2], [2, 1]]))\n        returns a range containing 3 subranges: the first with just\n        $(D [1, 1]); the second with the elements $(D [1, 2]) and $(D [2, 2]);\n        and the third with just $(D [2, 1]).)\n$(T2 each,\n        $(D each!writeln([1, 2, 3])) eagerly prints the numbers $(D 1), $(D 2)\n        and $(D 3) on their own lines.)\n$(T2 filter,\n        $(D filter!\"a > 0\"([1, -1, 2, 0, -3])) iterates over elements $(D 1)\n        and $(D 2).)\n$(T2 filterBidirectional,\n        Similar to $(D filter), but also provides $(D back) and $(D popBack) at\n        a small increase in cost.)\n$(T2 group,\n        $(D group([5, 2, 2, 3, 3])) returns a range containing the tuples\n        $(D tuple(5, 1)), $(D tuple(2, 2)), and $(D tuple(3, 2)).)\n$(T2 joiner,\n        $(D joiner([\"hello\", \"world!\"], \"; \")) returns a range that iterates\n        over the characters $(D \"hello; world!\"). No new string is created -\n        the existing inputs are iterated.)\n$(T2 map,\n        $(D map!\"2 * a\"([1, 2, 3])) lazily returns a range with the numbers\n        $(D 2), $(D 4), $(D 6).)\n$(T2 reduce,\n        $(D reduce!\"a + b\"([1, 2, 3, 4])) returns $(D 10).)\n$(T2 splitter,\n        Lazily splits a range by a separator.)\n$(T2 sum,\n        Same as $(D reduce), but specialized for accurate summation.)\n$(T2 uniq,\n        Iterates over the unique elements in a range, which is assumed sorted.)\n)\n\nCopyright: Andrei Alexandrescu 2008-.\n\nLicense: $(WEB boost.org/LICENSE_1_0.txt, Boost License 1.0).\n\nAuthors: $(WEB erdani.com, Andrei Alexandrescu)\n\nSource: $(PHOBOSSRC std/algorithm/_iteration.d)\n\nMacros:\nT2=$(TR $(TDNW $(LREF $1)) $(TD $+))\n"
	},
	{
		"kind": "module",
		"file": "../phobos/std/algorithm/sorting.d",
		"members": [
			{
				"kind": "enum",
				"line": 75,
				"members": [
					{
						"kind": "enum member",
						"line": 77,
						"value": "0",
						"char": 5,
						"name": "no",
						"comment": "Don't sort output\n"
					},
					{
						"kind": "enum member",
						"line": 78,
						"value": "1",
						"char": 5,
						"name": "yes",
						"comment": "Sort output\n"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "SortOutput",
				"comment": "Specifies whether the output of certain algorithm is desired in sorted\nformat.\n"
			},
			{
				"kind": "template",
				"line": 91,
				"constraint": "hasLength!Range2 && hasSlicing!Range2",
				"members": [
					{
						"kind": "function",
						"line": 91,
						"endchar": 1,
						"char": 6,
						"type": "void(SortedRange!(Range1, less) lhs, Range2 rhs)",
						"parameters": [
							{
								"type": "SortedRange!(Range1, less)",
								"name": "lhs"
							},
							{
								"type": "Range2",
								"name": "rhs"
							}
						],
						"name": "completeSort",
						"endline": 107
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "alias",
						"name": "less",
						"defaultAlias": "\"a < b\""
					},
					{
						"kind": "value",
						"defaultValue": "SwapStrategy.unstable",
						"deco": "E3std9algorithm8mutation12SwapStrategy",
						"name": "ss"
					},
					{
						"kind": "type",
						"name": "Range1"
					},
					{
						"kind": "type",
						"name": "Range2"
					}
				],
				"comment": "Sorts the random-access range $(D chain(lhs, rhs)) according to\npredicate $(D less). The left-hand side of the range $(D lhs) is\nassumed to be already sorted; $(D rhs) is assumed to be unsorted. The\nexact strategy chosen depends on the relative sizes of $(D lhs) and\n$(D rhs).  Performs $(BIGOH lhs.length + rhs.length * log(rhs.length))\n(best case) to $(BIGOH (lhs.length + rhs.length) * log(lhs.length +\nrhs.length)) (worst-case) evaluations of $(D swap).\nExample:\n\n---\nimport std.range : assumeSorted;\nint[] a = [ 1, 2, 3 ];\nint[] b = [ 4, 0, 6, 5 ];\ncompleteSort(assumeSorted(a), b);\nassert(a == [ 0, 1, 2 ]);\nassert(b == [ 3, 4, 5, 6 ]);\n\n---\n",
				"name": "completeSort"
			},
			{
				"kind": "template",
				"line": 126,
				"constraint": "isForwardRange!Range",
				"members": [
					{
						"kind": "function",
						"line": 126,
						"endchar": 1,
						"char": 6,
						"type": "bool(Range r)",
						"parameters": [
							{
								"type": "Range",
								"name": "r"
							}
						],
						"name": "isSorted",
						"endline": 161
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "alias",
						"name": "less",
						"defaultAlias": "\"a < b\""
					},
					{
						"kind": "type",
						"name": "Range"
					}
				],
				"comment": "Checks whether a forward range is sorted according to the comparison\noperation $(D less). Performs $(BIGOH r.length) evaluations of $(D\nless).\nExample:\n\n---\nint[] arr = [4, 3, 2, 1];\nassert(!isSorted(arr));\nsort(arr);\nassert(isSorted(arr));\nsort!(\"a > b\")(arr);\nassert(isSorted!(\"a > b\")(arr));\n\n---\n",
				"name": "isSorted"
			},
			{
				"kind": "template",
				"line": 224,
				"constraint": "ss == SwapStrategy.stable && isRandomAccessRange!Range || ss != SwapStrategy.stable && isForwardRange!Range",
				"members": [
					{
						"kind": "function",
						"line": 224,
						"endchar": 1,
						"char": 7,
						"type": "Range(Range r)",
						"parameters": [
							{
								"type": "Range",
								"name": "r"
							}
						],
						"name": "partition",
						"endline": 302
					}
				],
				"char": 7,
				"parameters": [
					{
						"kind": "alias",
						"name": "predicate"
					},
					{
						"kind": "value",
						"defaultValue": "SwapStrategy.unstable",
						"deco": "E3std9algorithm8mutation12SwapStrategy",
						"name": "ss"
					},
					{
						"kind": "type",
						"name": "Range"
					}
				],
				"comment": "Partitions a range in two using $(D pred) as a\npredicate. Specifically, reorders the range $(D r = [left,\nright$(RPAREN)) using $(D swap) such that all elements $(D i) for\nwhich $(D pred(i)) is $(D true) come before all elements $(D j) for\nwhich $(D pred(j)) returns $(D false).\n\nPerforms $(BIGOH r.length) (if unstable or semistable) or $(BIGOH\nr.length * log(r.length)) (if stable) evaluations of $(D less) and $(D\nswap). The unstable version computes the minimum possible evaluations\nof $(D swap) (roughly half of those performed by the semistable\nversion).\n\nReturns:\n\nThe right part of $(D r) after partitioning.\n\nIf $(D ss == SwapStrategy.stable), $(D partition) preserves the\nrelative ordering of all elements $(D a), $(D b) in $(D r) for which\n$(D pred(a) == pred(b)). If $(D ss == SwapStrategy.semistable), $(D\npartition) preserves the relative ordering of all elements $(D a), $(D\nb) in the left part of $(D r) for which $(D pred(a) == pred(b)).\n\nSee_Also:\n    STL's $(WEB sgi.com/tech/stl/_partition.html, _partition)$(BR)\n    STL's $(WEB sgi.com/tech/stl/stable_partition.html, stable_partition)\nExample:\n\n---\nimport std.algorithm : count, find; // FIXME\nimport std.conv : text;\n\nauto Arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nauto arr = Arr.dup;\nstatic bool even(int a) { return (a & 1) == 0; }\n// Partition arr such that even numbers come first\nauto r = partition!(even)(arr);\n// Now arr is separated in evens and odds.\n// Numbers may have become shuffled due to instability\nassert(r == arr[5 .. $]);\nassert(count!(even)(arr[0 .. 5]) == 5);\nassert(find!(even)(r).empty);\n\n// Can also specify the predicate as a string.\n// Use 'a' as the predicate argument name\narr[] = Arr[];\nr = partition!(q{(a & 1) == 0})(arr);\nassert(r == arr[5 .. $]);\n\n// Now for a stable partition:\narr[] = Arr[];\nr = partition!(q{(a & 1) == 0}, SwapStrategy.stable)(arr);\n// Now arr is [2 4 6 8 10 1 3 5 7 9], and r points to 1\nassert(arr == [2, 4, 6, 8, 10, 1, 3, 5, 7, 9] && r == arr[5 .. $]);\n\n// In case the predicate needs to hold its own state, use a delegate:\narr[] = Arr[];\nint x = 3;\n// Put stuff greater than 3 on the left\nbool fun(int a) { return a > x; }\nr = partition!(fun, SwapStrategy.semistable)(arr);\n// Now arr is [4 5 6 7 8 9 10 2 3 1] and r points to 2\nassert(arr == [4, 5, 6, 7, 8, 9, 10, 2, 3, 1] && r == arr[7 .. $]);\n\n---\n",
				"name": "partition"
			},
			{
				"kind": "template",
				"line": 361,
				"constraint": "isForwardRange!Range",
				"members": [
					{
						"kind": "function",
						"line": 361,
						"endchar": 1,
						"char": 6,
						"type": "bool(Range r)",
						"parameters": [
							{
								"type": "Range",
								"name": "r"
							}
						],
						"name": "isPartitioned",
						"endline": 374
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "alias",
						"name": "pred"
					},
					{
						"kind": "type",
						"name": "Range"
					}
				],
				"comment": "Returns $(D true) if $(D r) is partitioned according to predicate $(D\npred).\nExample:\n\n---\nint[] r = [ 1, 3, 5, 7, 8, 2, 4, ];\nassert(isPartitioned!\"a & 1\"(r));\n\n---\n",
				"name": "isPartitioned"
			},
			{
				"kind": "template",
				"line": 395,
				"constraint": "ss == SwapStrategy.unstable && isRandomAccessRange!Range && hasSwappableElements!Range && hasLength!Range && is(typeof(binaryFun!less(r.front, pivot)) == bool) && is(typeof(binaryFun!less(pivot, r.front)) == bool) && is(typeof(binaryFun!less(r.front, r.front)) == bool)",
				"members": [
					{
						"kind": "function",
						"line": 395,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 6,
						"type": "(Range r, E pivot)",
						"parameters": [
							{
								"type": "Range",
								"name": "r"
							},
							{
								"type": "E",
								"name": "pivot"
							}
						],
						"name": "partition3",
						"endline": 448
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "alias",
						"name": "less",
						"defaultAlias": "\"a < b\""
					},
					{
						"kind": "value",
						"defaultValue": "SwapStrategy.unstable",
						"deco": "E3std9algorithm8mutation12SwapStrategy",
						"name": "ss"
					},
					{
						"kind": "type",
						"name": "Range"
					},
					{
						"kind": "type",
						"name": "E"
					}
				],
				"comment": "Rearranges elements in $(D r) in three adjacent ranges and returns\nthem. The first and leftmost range only contains elements in $(D r)\nless than $(D pivot). The second and middle range only contains\nelements in $(D r) that are equal to $(D pivot). Finally, the third\nand rightmost range only contains elements in $(D r) that are greater\nthan $(D pivot). The less-than test is defined by the binary function\n$(D less).\n\nBUGS: stable $(D partition3) has not been implemented yet.\nExample:\n\n---\nauto a = [ 8, 3, 4, 1, 4, 7, 4 ];\nauto pieces = partition3(a, 4);\nassert(pieces[0] == [ 1, 3 ]);\nassert(pieces[1] == [ 4, 4, 4 ]);\nassert(pieces[2] == [ 8, 7 ]);\n\n---\n",
				"name": "partition3"
			},
			{
				"kind": "template",
				"line": 517,
				"constraint": "isForwardRange!Range && isRandomAccessRange!RangeIndex && is(ElementType!RangeIndex : ElementType!Range*)",
				"members": [
					{
						"kind": "function",
						"line": 517,
						"endchar": 1,
						"char": 1,
						"type": "SortedRange!(RangeIndex, (a, b) => binaryFun!less(*a, *b))(Range r, RangeIndex index)",
						"parameters": [
							{
								"type": "Range",
								"name": "r"
							},
							{
								"type": "RangeIndex",
								"name": "index"
							}
						],
						"name": "makeIndex",
						"endline": 537
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "alias",
						"name": "less",
						"defaultAlias": "\"a < b\""
					},
					{
						"kind": "value",
						"defaultValue": "SwapStrategy.unstable",
						"deco": "E3std9algorithm8mutation12SwapStrategy",
						"name": "ss"
					},
					{
						"kind": "type",
						"name": "Range"
					},
					{
						"kind": "type",
						"name": "RangeIndex"
					}
				],
				"comment": "Computes an index for $(D r) based on the comparison $(D less). The\nindex is a sorted array of pointers or indices into the original\nrange. This technique is similar to sorting, but it is more flexible\nbecause (1) it allows \"sorting\" of immutable collections, (2) allows\nbinary search even if the original collection does not offer random\naccess, (3) allows multiple indexes, each on a different predicate,\nand (4) may be faster when dealing with large objects. However, using\nan index may also be slower under certain circumstances due to the\nextra indirection, and is always larger than a sorting-based solution\nbecause it needs space for the index in addition to the original\ncollection. The complexity is the same as $(D sort)'s.\n\nThe first overload of $(D makeIndex) writes to a range containing\npointers, and the second writes to a range containing offsets. The\nfirst overload requires $(D Range) to be a forward range, and the\nlatter requires it to be a random-access range.\n\n$(D makeIndex) overwrites its second argument with the result, but\nnever reallocates it.\n\nReturns: The pointer-based version returns a $(D SortedRange) wrapper\nover index, of type $(D SortedRange!(RangeIndex, (a, b) =>\nbinaryFun!less(*a, *b))) thus reflecting the ordering of the\nindex. The index-based version returns $(D void) because the ordering\nrelation involves not only $(D index) but also $(D r).\n\nThrows: If the second argument's length is less than that of the range\nindexed, an exception is thrown.\nExample:\n\n---\nimmutable(int[]) arr = [ 2, 3, 1, 5, 0 ];\n// index using pointers\nauto index1 = new immutable(int)*[arr.length];\nmakeIndex!(\"a < b\")(arr, index1);\nassert(isSorted!(\"*a < *b\")(index1));\n// index using offsets\nauto index2 = new size_t[arr.length];\nmakeIndex!(\"a < b\")(arr, index2);\nassert(isSorted!\n    ((size_t a, size_t b){ return arr[a] < arr[b];})\n    (index2));\n\n---\n",
				"name": "makeIndex"
			},
			{
				"kind": "template",
				"line": 540,
				"constraint": "isRandomAccessRange!Range && !isInfinite!Range && isRandomAccessRange!RangeIndex && !isInfinite!RangeIndex && isIntegral!(ElementType!RangeIndex)",
				"members": [
					{
						"kind": "function",
						"line": 540,
						"endchar": 1,
						"char": 6,
						"type": "void(Range r, RangeIndex index)",
						"parameters": [
							{
								"type": "Range",
								"name": "r"
							},
							{
								"type": "RangeIndex",
								"name": "index"
							}
						],
						"name": "makeIndex",
						"endline": 571
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "alias",
						"name": "less",
						"defaultAlias": "\"a < b\""
					},
					{
						"kind": "value",
						"defaultValue": "SwapStrategy.unstable",
						"deco": "E3std9algorithm8mutation12SwapStrategy",
						"name": "ss"
					},
					{
						"kind": "type",
						"name": "Range"
					},
					{
						"kind": "type",
						"name": "RangeIndex"
					}
				],
				"comment": "Ditto\n",
				"name": "makeIndex"
			},
			{
				"kind": "template",
				"line": 645,
				"members": [
					{
						"kind": "template",
						"line": 647,
						"constraint": "validPredicates!(ElementType!Range, less)",
						"members": [
							{
								"kind": "function",
								"line": 647,
								"endchar": 5,
								"char": 10,
								"type": "void(Range r)",
								"parameters": [
									{
										"type": "Range",
										"name": "r"
									}
								],
								"name": "multiSort",
								"endline": 686
							}
						],
						"char": 10,
						"parameters": [
							{
								"kind": "type",
								"name": "Range"
							}
						],
						"name": "multiSort"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "tuple",
						"name": "less"
					}
				],
				"comment": "$(D void multiSort(Range)(Range r)\n    if (validPredicates!(ElementType!Range, less));)\n\nSorts a range by multiple keys. The call $(D multiSort!(\"a.id < b.id\",\n\"a.date > b.date\")(r)) sorts the range $(D r) by $(D id) ascending,\nand sorts elements that have the same $(D id) by $(D date)\ndescending. Such a call is equivalent to $(D sort!\"a.id != b.id ? a.id\n< b.id : a.date > b.date\"(r)), but $(D multiSort) is faster because it\ndoes fewer comparisons (in addition to being more convenient).\nExample:\n\n---\nstatic struct Point { int x, y; }\nauto pts1 = [ Point(0, 0), Point(5, 5), Point(0, 1), Point(0, 2) ];\nauto pts2 = [ Point(0, 0), Point(0, 1), Point(0, 2), Point(5, 5) ];\nmultiSort!(\"a.x < b.x\", \"a.y < b.y\", SwapStrategy.unstable)(pts1);\nassert(pts1 == pts2);\n\n---\n",
				"name": "multiSort"
			},
			{
				"kind": "template",
				"line": 875,
				"constraint": "(ss == SwapStrategy.unstable && (hasSwappableElements!Range || hasAssignableElements!Range) || ss != SwapStrategy.unstable && hasAssignableElements!Range) && isRandomAccessRange!Range && hasSlicing!Range && hasLength!Range",
				"members": [
					{
						"kind": "function",
						"line": 875,
						"endchar": 1,
						"char": 1,
						"type": "SortedRange!(Range, less)(Range r)",
						"parameters": [
							{
								"type": "Range",
								"name": "r"
							}
						],
						"name": "sort",
						"endline": 907
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "alias",
						"name": "less",
						"defaultAlias": "\"a < b\""
					},
					{
						"kind": "value",
						"defaultValue": "SwapStrategy.unstable",
						"deco": "E3std9algorithm8mutation12SwapStrategy",
						"name": "ss"
					},
					{
						"kind": "type",
						"name": "Range"
					}
				],
				"comment": "Sorts a random-access range according to the predicate $(D less). Performs\n$(BIGOH r.length * log(r.length)) evaluations of $(D less). Stable sorting\nrequires $(D hasAssignableElements!Range) to be true.\n\n$(D sort) returns a $(XREF range, SortedRange) over the original range, which\nfunctions that can take advantage of sorted data can then use to know that the\nrange is sorted and adjust accordingly. The $(XREF range, SortedRange) is a\nwrapper around the original range, so both it and the original range are sorted,\nbut other functions won't know that the original range has been sorted, whereas\nthey $(I can) know that $(XREF range, SortedRange) has been sorted.\n\nThe predicate is expected to satisfy certain rules in order for $(D sort) to\nbehave as expected - otherwise, the program may fail on certain inputs (but not\nothers) when not compiled in release mode, due to the cursory $(D assumeSorted)\ncheck. Specifically, $(D sort) expects $(D less(a,b) && less(b,c)) to imply\n$(D less(a,c)) (transitivity), and, conversely, $(D !less(a,b) && !less(b,c)) to\nimply $(D !less(a,c)). Note that the default predicate ($(D \"a < b\")) does not\nalways satisfy these conditions for floating point types, because the expression\nwill always be $(D false) when either $(D a) or $(D b) is NaN.\n\nReturns: The initial range wrapped as a $(D SortedRange) with the predicate\n$(D binaryFun!less).\n\nAlgorithms: $(WEB en.wikipedia.org/wiki/Introsort) is used for unstable sorting and\n$(WEB en.wikipedia.org/wiki/Timsort, Timsort) is used for stable sorting.\nEach algorithm has benefits beyond stability. Introsort is generally faster but\nTimsort may achieve greater speeds on data with low entropy or if predicate calls\nare expensive. Introsort performs no allocations whereas Timsort will perform one\nor more allocations per call. Both algorithms have $(BIGOH n log n) worst-case\ntime complexity.\n\nSee_Also:\n    $(XREF range, assumeSorted)$(BR)\n    $(XREF range, SortedRange)$(BR)\n    $(XREF algorithm, SwapStrategy)$(BR)\n    $(XREF functional, binaryFun)\nExample:\n\n---\nint[] array = [ 1, 2, 3, 4 ];\n// sort in descending order\nsort!(\"a > b\")(array);\nassert(array == [ 4, 3, 2, 1 ]);\n// sort in ascending order\nsort(array);\nassert(array == [ 1, 2, 3, 4 ]);\n// sort with a delegate\nbool myComp(int x, int y) @safe pure nothrow { return x > y; }\nsort!(myComp)(array);\nassert(array == [ 4, 3, 2, 1 ]);\n\n---\nExample:\n\n---\n// Showcase stable sorting\nstring[] words = [ \"aBc\", \"a\", \"abc\", \"b\", \"ABC\", \"c\" ];\nsort!(\"toUpper(a) < toUpper(b)\", SwapStrategy.stable)(words);\nassert(words == [ \"a\", \"aBc\", \"abc\", \"ABC\", \"b\", \"c\" ]);\n\n---\n",
				"name": "sort"
			},
			{
				"kind": "template",
				"line": 1828,
				"constraint": "isRandomAccessRange!R && hasLength!R",
				"members": [
					{
						"kind": "function",
						"line": 1828,
						"endchar": 1,
						"char": 1,
						"type": "SortedRange!(R, (a, b) => binaryFun!less(unaryFun!transform(a), unaryFun!transform(b)))(R r)",
						"parameters": [
							{
								"type": "R",
								"name": "r"
							}
						],
						"name": "schwartzSort",
						"endline": 1864
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "alias",
						"name": "transform"
					},
					{
						"kind": "alias",
						"name": "less",
						"defaultAlias": "\"a < b\""
					},
					{
						"kind": "value",
						"defaultValue": "SwapStrategy.unstable",
						"deco": "E3std9algorithm8mutation12SwapStrategy",
						"name": "ss"
					},
					{
						"kind": "type",
						"name": "R"
					}
				],
				"comment": "Sorts a range using an algorithm akin to the $(WEB\nwikipedia.org/wiki/Schwartzian_transform, Schwartzian transform), also\nknown as the decorate-sort-undecorate pattern in Python and Lisp. (Not\nto be confused with $(WEB youtube.com/watch?v=UHw6KXbvazs, the other\nSchwartz).) This function is helpful when the sort comparison includes\nan expensive computation. The complexity is the same as that of the\ncorresponding $(D sort), but $(D schwartzSort) evaluates $(D\ntransform) only $(D r.length) times (less than half when compared to\nregular sorting). The usage can be best illustrated with an example.\n\nExamples:\n----\nuint hashFun(string) { ... expensive computation ... }\nstring[] array = ...;\n// Sort strings by hash, slow\nsort!((a, b) => hashFun(a) < hashFun(b))(array);\n// Sort strings by hash, fast (only computes arr.length hashes):\nschwartzSort!(hashFun, \"a < b\")(array);\n----\n\nThe $(D schwartzSort) function might require less temporary data and\nbe faster than the Perl idiom or the decorate-sort-undecorate idiom\npresent in Python and Lisp. This is because sorting is done in-place\nand only minimal extra data (one array of transformed elements) is\ncreated.\n\nTo check whether an array was sorted and benefit of the speedup of\nSchwartz sorting, a function $(D schwartzIsSorted) is not provided\nbecause the effect can be achieved by calling $(D\nisSorted!less(map!transform(r))).\n\nReturns: The initial range wrapped as a $(D SortedRange) with the\npredicate $(D (a, b) => binaryFun!less(transform(a),\ntransform(b))).\n",
				"name": "schwartzSort"
			},
			{
				"kind": "template",
				"line": 1957,
				"constraint": "isRandomAccessRange!Range && hasLength!Range && hasSlicing!Range",
				"members": [
					{
						"kind": "function",
						"line": 1957,
						"endchar": 1,
						"char": 6,
						"type": "void(Range r, size_t n)",
						"parameters": [
							{
								"type": "Range",
								"name": "r"
							},
							{
								"type": "size_t",
								"name": "n"
							}
						],
						"name": "partialSort",
						"endline": 1963
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "alias",
						"name": "less",
						"defaultAlias": "\"a < b\""
					},
					{
						"kind": "value",
						"defaultValue": "SwapStrategy.unstable",
						"deco": "E3std9algorithm8mutation12SwapStrategy",
						"name": "ss"
					},
					{
						"kind": "type",
						"name": "Range"
					}
				],
				"comment": "Reorders the random-access range $(D r) such that the range $(D r[0\n.. mid]) is the same as if the entire $(D r) were sorted, and leaves\nthe range $(D r[mid .. r.length]) in no particular order. Performs\n$(BIGOH r.length * log(mid)) evaluations of $(D pred). The\nimplementation simply calls $(D topN!(less, ss)(r, n)) and then $(D\nsort!(less, ss)(r[0 .. n])).\nExample:\n\n---\nint[] a = [ 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 ];\npartialSort(a, 5);\nassert(a[0 .. 5] == [ 0, 1, 2, 3, 4 ]);\n\n---\n",
				"name": "partialSort"
			},
			{
				"kind": "template",
				"line": 1995,
				"constraint": "isRandomAccessRange!Range && hasLength!Range",
				"members": [
					{
						"kind": "function",
						"line": 1995,
						"endchar": 1,
						"char": 6,
						"type": "void(Range r, size_t nth)",
						"parameters": [
							{
								"type": "Range",
								"name": "r"
							},
							{
								"type": "size_t",
								"name": "nth"
							}
						],
						"name": "topN",
						"endline": 2030
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "alias",
						"name": "less",
						"defaultAlias": "\"a < b\""
					},
					{
						"kind": "value",
						"defaultValue": "SwapStrategy.unstable",
						"deco": "E3std9algorithm8mutation12SwapStrategy",
						"name": "ss"
					},
					{
						"kind": "type",
						"name": "Range"
					}
				],
				"comment": "Reorders the range $(D r) using $(D swap) such that $(D r[nth]) refers\nto the element that would fall there if the range were fully\nsorted. In addition, it also partitions $(D r) such that all elements\n$(D e1) from $(D r[0]) to $(D r[nth]) satisfy $(D !less(r[nth], e1)),\nand all elements $(D e2) from $(D r[nth]) to $(D r[r.length]) satisfy\n$(D !less(e2, r[nth])). Effectively, it finds the nth smallest\n(according to $(D less)) elements in $(D r). Performs an expected\n$(BIGOH r.length) (if unstable) or $(BIGOH r.length * log(r.length))\n(if stable) evaluations of $(D less) and $(D swap).\n\nIf $(D n >= r.length), the algorithm has no effect.\n\nSee_Also:\n    $(LREF topNIndex),\n    $(WEB sgi.com/tech/stl/nth_element.html, STL's nth_element)\n\nBUGS:\n\nStable topN has not been implemented yet.\nExample:\n\n---\nint[] v = [ 25, 7, 9, 2, 0, 5, 21 ];\nauto n = 4;\ntopN!\"a < b\"(v, n);\nassert(v[n] == 9);\n\n---\n",
				"name": "topN"
			},
			{
				"kind": "template",
				"line": 2120,
				"constraint": "isRandomAccessRange!Range1 && hasLength!Range1 && isInputRange!Range2 && is(ElementType!Range1 == ElementType!Range2)",
				"members": [
					{
						"kind": "function",
						"line": 2120,
						"endchar": 1,
						"char": 6,
						"type": "void(Range1 r1, Range2 r2)",
						"parameters": [
							{
								"type": "Range1",
								"name": "r1"
							},
							{
								"type": "Range2",
								"name": "r2"
							}
						],
						"name": "topN",
						"endline": 2135
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "alias",
						"name": "less",
						"defaultAlias": "\"a < b\""
					},
					{
						"kind": "value",
						"defaultValue": "SwapStrategy.unstable",
						"deco": "E3std9algorithm8mutation12SwapStrategy",
						"name": "ss"
					},
					{
						"kind": "type",
						"name": "Range1"
					},
					{
						"kind": "type",
						"name": "Range2"
					}
				],
				"comment": "Stores the smallest elements of the two ranges in the left-hand range.\nExample:\n\n---\nint[] a = [ 5, 7, 2, 6, 7 ];\nint[] b = [ 2, 1, 5, 6, 7, 3, 0 ];\ntopN(a, b);\nsort(a);\nassert(a == [0, 1, 2, 2, 3]);\n\n---\n",
				"name": "topN"
			},
			{
				"kind": "template",
				"line": 2154,
				"constraint": "isInputRange!SRange && isRandomAccessRange!TRange && hasLength!TRange && hasSlicing!TRange",
				"members": [
					{
						"kind": "function",
						"line": 2154,
						"endchar": 1,
						"char": 8,
						"type": "TRange(SRange source, TRange target, SortOutput sorted = SortOutput.no)",
						"parameters": [
							{
								"type": "SRange",
								"name": "source"
							},
							{
								"type": "TRange",
								"name": "target"
							},
							{
								"default": "SortOutput.no",
								"type": "SortOutput",
								"name": "sorted"
							}
						],
						"name": "topNCopy",
						"endline": 2170
					}
				],
				"char": 8,
				"parameters": [
					{
						"kind": "alias",
						"name": "less",
						"defaultAlias": "\"a < b\""
					},
					{
						"kind": "type",
						"name": "SRange"
					},
					{
						"kind": "type",
						"name": "TRange"
					}
				],
				"comment": "Copies the top $(D n) elements of the input range $(D source) into the\nrandom-access range $(D target), where $(D n =\ntarget.length). Elements of $(D source) are not touched. If $(D\nsorted) is $(D true), the target is sorted. Otherwise, the target\nrespects the $(WEB en.wikipedia.org/wiki/Binary_heap, heap property).\nExample:\n\n---\nint[] a = [ 10, 16, 2, 3, 1, 5, 0 ];\nint[] b = new int[3];\ntopNCopy(a, b, SortOutput.yes);\nassert(b == [ 0, 1, 2 ]);\n\n---\n",
				"name": "topNCopy"
			},
			{
				"kind": "template",
				"line": 2228,
				"constraint": "isRandomAccessRange!Range && isRandomAccessRange!RangeIndex && hasAssignableElements!RangeIndex && isIntegral!(ElementType!RangeIndex)",
				"members": [
					{
						"kind": "function",
						"line": 2228,
						"endchar": 1,
						"char": 6,
						"type": "void(Range r, RangeIndex index, SortOutput sorted = SortOutput.no)",
						"parameters": [
							{
								"type": "Range",
								"name": "r"
							},
							{
								"type": "RangeIndex",
								"name": "index"
							},
							{
								"default": "SortOutput.no",
								"type": "SortOutput",
								"name": "sorted"
							}
						],
						"name": "topNIndex",
						"endline": 2258
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "alias",
						"name": "less",
						"defaultAlias": "\"a < b\""
					},
					{
						"kind": "value",
						"defaultValue": "SwapStrategy.unstable",
						"deco": "E3std9algorithm8mutation12SwapStrategy",
						"name": "ss"
					},
					{
						"kind": "type",
						"name": "Range"
					},
					{
						"kind": "type",
						"name": "RangeIndex"
					}
				],
				"comment": "Given a range of elements, constructs an index of its top $(I n) elements\n(i.e., the first $(I n) elements if the range were sorted).\n\nSimilar to $(LREF topN), except that the range is not modified.\n\nParams:\n    less = A binary predicate that defines the ordering of range elements.\n        Defaults to $(D a < b).\n    ss = $(RED (Not implemented yet.)) Specify the swapping strategy.\n    r = A $(XREF2 range, isRandomAccessRange, random-access range) of elements\n        to make an index for.\n    index = A $(XREF2 range, isRandomAccessRange, random-access range) with\n        assignable elements to build the index in. The length of this range\n        determines how many top elements to index in $(D r).\n\n        This index range can either have integral elements, in which case the\n        constructed index will consist of zero-based numerical indices into\n        $(D r); or it can have pointers to the element type of $(D r), in which\n        case the constructed index will be pointers to the top elements in\n        $(D r).\n    sorted = Determines whether to sort the index by the elements they refer\n        to.\n\nSee_also: $(LREF topN), $(LREF topNCopy).\n\nBUGS:\nThe swapping strategy parameter is not implemented yet; currently it is\nignored.\nExample:\n\n---\n// Construct index to top 3 elements using numerical indices:\nint[] a = [ 10, 2, 7, 5, 8, 1 ];\nint[] index = new int[3];\ntopNIndex(a, index, SortOutput.yes);\nassert(index == [5, 1, 3]); // because a[5]==1, a[1]==2, a[3]==5\n\n// Construct index to top 3 elements using pointer indices:\nint*[] ptrIndex = new int*[3];\ntopNIndex(a, ptrIndex, SortOutput.yes);\nassert(ptrIndex == [ &a[5], &a[1], &a[3] ]);\n\n---\n",
				"name": "topNIndex"
			},
			{
				"kind": "template",
				"line": 2261,
				"constraint": "isRandomAccessRange!Range && isRandomAccessRange!RangeIndex && hasAssignableElements!RangeIndex && is(ElementType!RangeIndex == ElementType!Range*)",
				"members": [
					{
						"kind": "function",
						"line": 2261,
						"endchar": 1,
						"char": 6,
						"type": "void(Range r, RangeIndex index, SortOutput sorted = SortOutput.no)",
						"parameters": [
							{
								"type": "Range",
								"name": "r"
							},
							{
								"type": "RangeIndex",
								"name": "index"
							},
							{
								"default": "SortOutput.no",
								"type": "SortOutput",
								"name": "sorted"
							}
						],
						"name": "topNIndex",
						"endline": 2289
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "alias",
						"name": "less",
						"defaultAlias": "\"a < b\""
					},
					{
						"kind": "value",
						"defaultValue": "SwapStrategy.unstable",
						"deco": "E3std9algorithm8mutation12SwapStrategy",
						"name": "ss"
					},
					{
						"kind": "type",
						"name": "Range"
					},
					{
						"kind": "type",
						"name": "RangeIndex"
					}
				],
				"comment": "ditto\n",
				"name": "topNIndex"
			},
			{
				"kind": "template",
				"line": 2359,
				"constraint": "isBidirectionalRange!BidirectionalRange && hasSwappableElements!BidirectionalRange",
				"members": [
					{
						"kind": "function",
						"line": 2359,
						"endchar": 1,
						"char": 6,
						"type": "bool(BidirectionalRange range)",
						"parameters": [
							{
								"type": "BidirectionalRange",
								"name": "range"
							}
						],
						"name": "nextPermutation",
						"endline": 2396
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "alias",
						"name": "less",
						"defaultAlias": "\"a < b\""
					},
					{
						"kind": "type",
						"name": "BidirectionalRange"
					}
				],
				"comment": " Permutes $(D range) in-place to the next lexicographically greater\n permutation.\n\n The predicate $(D less) defines the lexicographical ordering to be used on\n the range.\n\n If the range is currently the lexicographically greatest permutation, it is\n permuted back to the least permutation and false is returned.  Otherwise,\n true is returned. One can thus generate all permutations of a range by\n sorting it according to $(D less), which produces the lexicographically\n least permutation, and then calling nextPermutation until it returns false.\n This is guaranteed to generate all distinct permutations of the range\n exactly once.  If there are $(I N) elements in the range and all of them are\n unique, then $(I N)! permutations will be generated. Otherwise, if there are\n some duplicated elements, fewer permutations will be produced.\n----\n// Enumerate all permutations\nint[] a = [1,2,3,4,5];\ndo\n{\n    // use the current permutation and\n    // proceed to the next permutation of the array.\n} while (nextPermutation(a));\n----\n Returns: false if the range was lexicographically the greatest, in which\n case the range is reversed back to the lexicographically smallest\n permutation; otherwise returns true.\nExample:\n\n---\n// Step through all permutations of a sorted array in lexicographic order\nint[] a = [1,2,3];\nassert(nextPermutation(a) == true);\nassert(a == [1,3,2]);\nassert(nextPermutation(a) == true);\nassert(a == [2,1,3]);\nassert(nextPermutation(a) == true);\nassert(a == [2,3,1]);\nassert(nextPermutation(a) == true);\nassert(a == [3,1,2]);\nassert(nextPermutation(a) == true);\nassert(a == [3,2,1]);\nassert(nextPermutation(a) == false);\nassert(a == [1,2,3]);\n\n---\nExample:\n\n---\n// Step through permutations of an array containing duplicate elements:\nint[] a = [1,1,2];\nassert(nextPermutation(a) == true);\nassert(a == [1,2,1]);\nassert(nextPermutation(a) == true);\nassert(a == [2,1,1]);\nassert(nextPermutation(a) == false);\nassert(a == [1,1,2]);\n\n---\n",
				"name": "nextPermutation"
			},
			{
				"kind": "template",
				"line": 2609,
				"constraint": "isBidirectionalRange!BidirectionalRange && hasSwappableElements!BidirectionalRange",
				"members": [
					{
						"kind": "function",
						"line": 2609,
						"endchar": 1,
						"char": 6,
						"type": "bool(BidirectionalRange range)",
						"parameters": [
							{
								"type": "BidirectionalRange",
								"name": "range"
							}
						],
						"name": "nextEvenPermutation",
						"endline": 2660
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "alias",
						"name": "less",
						"defaultAlias": "\"a < b\""
					},
					{
						"kind": "type",
						"name": "BidirectionalRange"
					}
				],
				"comment": " Permutes $(D range) in-place to the next lexicographically greater $(I even)\n permutation.\n\n The predicate $(D less) defines the lexicographical ordering to be used on\n the range.\n\n An even permutation is one which is produced by swapping an even number of\n pairs of elements in the original range. The set of $(I even) permutations\n is distinct from the set of $(I all) permutations only when there are no\n duplicate elements in the range. If the range has $(I N) unique elements,\n then there are exactly $(I N)!/2 even permutations.\n\n If the range is already the lexicographically greatest even permutation, it\n is permuted back to the least even permutation and false is returned.\n Otherwise, true is returned, and the range is modified in-place to be the\n lexicographically next even permutation.\n\n One can thus generate the even permutations of a range with unique elements\n by starting with the lexicographically smallest permutation, and repeatedly\n calling nextEvenPermutation until it returns false.\n----\n// Enumerate even permutations\nint[] a = [1,2,3,4,5];\ndo\n{\n    // use the current permutation and\n    // proceed to the next even permutation of the array.\n} while (nextEvenPermutation(a));\n----\n One can also generate the $(I odd) permutations of a range by noting that\n permutations obey the rule that even + even = even, and odd + even = odd.\n Thus, by swapping the last two elements of a lexicographically least range,\n it is turned into the first odd permutation. Then calling\n nextEvenPermutation on this first odd permutation will generate the next\n even permutation relative to this odd permutation, which is actually the\n next odd permutation of the original range. Thus, by repeatedly calling\n nextEvenPermutation until it returns false, one enumerates the odd\n permutations of the original range.\n----\n// Enumerate odd permutations\nint[] a = [1,2,3,4,5];\nswap(a[$-2], a[$-1]);    // a is now the first odd permutation of [1,2,3,4,5]\ndo\n{\n    // use the current permutation and\n    // proceed to the next odd permutation of the original array\n    // (which is an even permutation of the first odd permutation).\n} while (nextEvenPermutation(a));\n----\n\n Warning: Since even permutations are only distinct from all permutations\n when the range elements are unique, this function assumes that there are no\n duplicate elements under the specified ordering. If this is not _true, some\n permutations may fail to be generated. When the range has non-unique\n elements, you should use $(MYREF nextPermutation) instead.\n\n Returns: false if the range was lexicographically the greatest, in which\n case the range is reversed back to the lexicographically smallest\n permutation; otherwise returns true.\nExample:\n\n---\n// Step through even permutations of a sorted array in lexicographic order\nint[] a = [1,2,3];\nassert(nextEvenPermutation(a) == true);\nassert(a == [2,3,1]);\nassert(nextEvenPermutation(a) == true);\nassert(a == [3,1,2]);\nassert(nextEvenPermutation(a) == false);\nassert(a == [1,2,3]);\n\n---\nExample:\nEven permutations are useful for generating coordinates of certain geometric\nshapes. Here's a non-trivial example:\n---\nimport std.math : sqrt;\n\n// Print the 60 vertices of a uniform truncated icosahedron (soccer ball)\nenum real Phi = (1.0 + sqrt(5.0)) / 2.0;    // Golden ratio\nreal[][] seeds = [\n    [0.0, 1.0, 3.0*Phi],\n    [1.0, 2.0+Phi, 2.0*Phi],\n    [Phi, 2.0, Phi^^3]\n];\nsize_t n;\nforeach (seed; seeds)\n{\n    // Loop over even permutations of each seed\n    do\n    {\n        // Loop over all sign changes of each permutation\n        size_t i;\n        do\n        {\n            // Generate all possible sign changes\n            for (i=0; i < seed.length; i++)\n            {\n                if (seed[i] != 0.0)\n                {\n                    seed[i] = -seed[i];\n                    if (seed[i] < 0.0)\n                        break;\n                }\n            }\n            n++;\n        } while (i < seed.length);\n    } while (nextEvenPermutation(seed));\n}\nassert(n == 60);\n\n---\n",
				"name": "nextEvenPermutation"
			}
		],
		"name": "std.algorithm.sorting",
		"comment": "This is a submodule of $(LINK2 std_algorithm.html, std.algorithm).\nIt contains generic _sorting algorithms.\n\n$(BOOKTABLE Cheat Sheet,\n\n$(TR $(TH Function Name) $(TH Description))\n\n$(T2 completeSort,\n        If $(D a = [10, 20, 30]) and $(D b = [40, 6, 15]), then\n        $(D completeSort(a, b)) leaves $(D a = [6, 10, 15]) and $(D b = [20,\n        30, 40]).\n        The range $(D a) must be sorted prior to the call, and as a result the\n        combination $(D $(XREF range,chain)(a, b)) is sorted.)\n$(T2 isPartitioned,\n        $(D isPartitioned!\"a < 0\"([-1, -2, 1, 0, 2])) returns $(D true) because\n        the predicate is $(D true) for a portion of the range and $(D false)\n        afterwards.)\n$(T2 isSorted,\n        $(D isSorted([1, 1, 2, 3])) returns $(D true).)\n$(T2 makeIndex,\n        Creates a separate index for a range.)\n$(T2 nextEvenPermutation,\n        Computes the next lexicographically greater even permutation of a range\n        in-place.)\n$(T2 nextPermutation,\n        Computes the next lexicographically greater permutation of a range\n        in-place.)\n$(T2 partialSort,\n        If $(D a = [5, 4, 3, 2, 1]), then $(D partialSort(a, 3)) leaves\n        $(D a[0 .. 3] = [1, 2, 3]).\n        The other elements of $(D a) are left in an unspecified order.)\n$(T2 partition,\n        Partitions a range according to a predicate.)\n$(T2 partition3,\n        Partitions a range in three parts (less than, equal, greater than the\n        given pivot).)\n$(T2 schwartzSort,\n        Sorts with the help of the $(LUCKY Schwartzian transform).)\n$(T2 sort,\n        Sorts.)\n$(T2 topN,\n        Separates the top elements in a range.)\n$(T2 topNCopy,\n        Copies out the top elements of a range.)\n$(T2 topNIndex,\n        Builds an index of the top elements of a range.)\n)\n\nCopyright: Andrei Alexandrescu 2008-.\n\nLicense: $(WEB boost.org/LICENSE_1_0.txt, Boost License 1.0).\n\nAuthors: $(WEB erdani.com, Andrei Alexandrescu)\n\nSource: $(PHOBOSSRC std/algorithm/_sorting.d)\n\nMacros:\nT2=$(TR $(TDNW $(LREF $1)) $(TD $+))\n"
	},
	{
		"kind": "module",
		"file": "../phobos/std/mathspecial.d",
		"members": [
			{
				"kind": "function",
				"line": 90,
				"deco": "FNaNbNiNfeZe",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "e",
						"name": "x"
					}
				],
				"name": "gamma",
				"comment": " The Gamma function, $(GAMMA)(x)\n\n  $(GAMMA)(x) is a generalisation of the factorial function\n  to real and complex numbers.\n  Like x!, $(GAMMA)(x+1) = x * $(GAMMA)(x).\n\n  Mathematically, if z.re > 0 then\n   $(GAMMA)(z) = $(INTEGRATE 0, $(INFIN)) $(POWER t, z-1)$(POWER e, -t) dt\n\n  $(TABLE_SV\n    $(SVH  x,           $(GAMMA)(x) )\n    $(SV  $(NAN),       $(NAN)      )\n    $(SV  $(PLUSMN)0.0, $(PLUSMNINF))\n    $(SV integer > 0,   (x-1)!      )\n    $(SV integer < 0,   $(NAN)      )\n    $(SV +$(INFIN),      +$(INFIN)   )\n    $(SV -$(INFIN),      $(NAN)      )\n  )\n",
				"endline": 93
			},
			{
				"kind": "function",
				"line": 109,
				"deco": "FNaNbNiNfeZe",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "e",
						"name": "x"
					}
				],
				"name": "logGamma",
				"comment": " Natural logarithm of the gamma function, $(GAMMA)(x)\n\n Returns the base e (2.718...) logarithm of the absolute\n value of the gamma function of the argument.\n\n For reals, logGamma is equivalent to log(fabs(gamma(x))).\n\n  $(TABLE_SV\n    $(SVH  x,             logGamma(x)   )\n    $(SV  $(NAN),         $(NAN)      )\n    $(SV integer <= 0,    +$(INFIN)    )\n    $(SV $(PLUSMNINF),    +$(INFIN)    )\n  )\n",
				"endline": 112
			},
			{
				"kind": "function",
				"line": 122,
				"deco": "FNaNbNiNfeZe",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "e",
						"name": "x"
					}
				],
				"name": "sgnGamma",
				"comment": " The sign of $(GAMMA)(x).\n\n Returns -1 if $(GAMMA)(x) < 0,  +1 if $(GAMMA)(x) > 0,\n $(NAN) if sign is indeterminate.\n\n Note that this function can be used in conjunction with logGamma(x) to\n evaluate gamma for very large values of x.\n",
				"endline": 137
			},
			{
				"kind": "function",
				"line": 154,
				"deco": "FNaNbNiNfeeZe",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "e",
						"name": "x"
					},
					{
						"deco": "e",
						"name": "y"
					}
				],
				"name": "beta",
				"comment": " Beta function\n\n The beta function is defined as\n\n beta(x, y) = ($(GAMMA)(x) * $(GAMMA)(y)) / $(GAMMA)(x + y)\n",
				"endline": 159
			},
			{
				"kind": "function",
				"line": 174,
				"deco": "FNaNbNiNfeZe",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "e",
						"name": "x"
					}
				],
				"name": "digamma",
				"comment": " Digamma function\n\n  The digamma function is the logarithmic derivative of the gamma function.\n\n  digamma(x) = d/dx logGamma(x)\n\n  See_Also: $(LREF logmdigamma), $(LREF logmdigammaInverse).\n",
				"endline": 177
			},
			{
				"kind": "function",
				"line": 185,
				"deco": "FNaNbNiNfeZe",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "e",
						"name": "x"
					}
				],
				"name": "logmdigamma",
				"comment": " Log Minus Digamma function\n\n  logmdigamma(x) = log(x) - digamma(x)\n\n  See_Also: $(LREF digamma), $(LREF logmdigammaInverse).\n",
				"endline": 188
			},
			{
				"kind": "function",
				"line": 196,
				"deco": "FNaNbNiNfeZe",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "e",
						"name": "x"
					}
				],
				"name": "logmdigammaInverse",
				"comment": " Inverse of the Log Minus Digamma function\n\n  Given y, the function finds x such log(x) - digamma(x) = y.\n\n  See_Also: $(LREF logmdigamma), $(LREF digamma).\n",
				"endline": 199
			},
			{
				"kind": "function",
				"line": 221,
				"deco": "FNaNbNiNfeeeZe",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "e",
						"name": "a"
					},
					{
						"deco": "e",
						"name": "b"
					},
					{
						"deco": "e",
						"name": "x"
					}
				],
				"name": "betaIncomplete",
				"comment": " Incomplete beta integral\n\n Returns incomplete beta integral of the arguments, evaluated\n from zero to x. The regularized incomplete beta function is defined as\n\n betaIncomplete(a, b, x) = $(GAMMA)(a + b) / ( $(GAMMA)(a) $(GAMMA)(b) ) *\n $(INTEGRATE 0, x) $(POWER t, a-1)$(POWER (1-t), b-1) dt\n\n and is the same as the the cumulative distribution function.\n\n The domain of definition is 0 <= x <= 1.  In this\n implementation a and b are restricted to positive values.\n The integral from x to 1 may be obtained by the symmetry\n relation\n\n    betaIncompleteCompl(a, b, x )  =  betaIncomplete( b, a, 1-x )\n\n The integral is evaluated by a continued fraction expansion\n or, when b * x is small, by a power series.\n",
				"endline": 224
			},
			{
				"kind": "function",
				"line": 234,
				"deco": "FNaNbNiNfeeeZe",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "e",
						"name": "a"
					},
					{
						"deco": "e",
						"name": "b"
					},
					{
						"deco": "e",
						"name": "y"
					}
				],
				"name": "betaIncompleteInverse",
				"comment": " Inverse of incomplete beta integral\n\n Given y, the function finds x such that\n\n  betaIncomplete(a, b, x) == y\n\n  Newton iterations or interval halving is used.\n",
				"endline": 237
			},
			{
				"kind": "function",
				"line": 253,
				"deco": "FNaNbNiNfeeZe",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "e",
						"name": "a"
					},
					{
						"deco": "e",
						"name": "x"
					}
				],
				"name": "gammaIncomplete",
				"comment": " Incomplete gamma integral and its complement\n\n These functions are defined by\n\n   gammaIncomplete = ( $(INTEGRATE 0, x) $(POWER e, -t) $(POWER t, a-1) dt )/ $(GAMMA)(a)\n\n  gammaIncompleteCompl(a,x)   =   1 - gammaIncomplete(a,x)\n = ($(INTEGRATE x, $(INFIN)) $(POWER e, -t) $(POWER t, a-1) dt )/ $(GAMMA)(a)\n\n In this implementation both arguments must be positive.\n The integral is evaluated by either a power series or\n continued fraction expansion, depending on the relative\n values of a and x.\n",
				"endline": 260
			},
			{
				"kind": "function",
				"line": 263,
				"deco": "FNaNbNiNfeeZe",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "e",
						"name": "a"
					},
					{
						"deco": "e",
						"name": "x"
					}
				],
				"name": "gammaIncompleteCompl",
				"comment": " ditto\n",
				"endline": 270
			},
			{
				"kind": "function",
				"line": 278,
				"deco": "FNaNbNiNfeeZe",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "e",
						"name": "a"
					},
					{
						"deco": "e",
						"name": "p"
					}
				],
				"name": "gammaIncompleteComplInverse",
				"comment": " Inverse of complemented incomplete gamma integral\n\n Given a and p, the function finds x such that\n\n  gammaIncompleteCompl( a, x ) = p.\n",
				"endline": 285
			},
			{
				"kind": "function",
				"line": 302,
				"deco": "FNaNbNiNfeZe",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "e",
						"name": "x"
					}
				],
				"name": "erf",
				"comment": " Error function\n\n The integral is\n\n  erf(x) =  2/ $(SQRT)($(PI))\n     $(INTEGRATE 0, x) exp( - $(POWER t, 2)) dt\n\n The magnitude of x is limited to about 106.56 for IEEE 80-bit\n arithmetic; 1 or -1 is returned outside this range.\n",
				"endline": 305
			},
			{
				"kind": "function",
				"line": 316,
				"deco": "FNaNbNiNfeZe",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "e",
						"name": "x"
					}
				],
				"name": "erfc",
				"comment": " Complementary error function\n\n erfc(x) = 1 - erf(x)\n         = 2/ $(SQRT)($(PI))\n     $(INTEGRATE x, $(INFIN)) exp( - $(POWER t, 2)) dt\n\n This function has high relative accuracy for\n values of x far from zero. (For values near zero, use erf(x)).\n",
				"endline": 319
			},
			{
				"kind": "function",
				"line": 339,
				"deco": "FNaNbNiNfeZe",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "e",
						"name": "x"
					}
				],
				"name": "normalDistribution",
				"comment": " Normal distribution function.\n\n The normal (or Gaussian, or bell-shaped) distribution is\n defined as:\n\n normalDist(x) = 1/$(SQRT)(2$(PI)) $(INTEGRATE -$(INFIN), x) exp( - $(POWER t, 2)/2) dt\n   = 0.5 + 0.5 * erf(x/sqrt(2))\n   = 0.5 * erfc(- x/sqrt(2))\n\n To maintain accuracy at values of x near 1.0, use\n      normalDistribution(x) = 1.0 - normalDistribution(-x).\n\n References:\n $(LINK http://www.netlib.org/cephes/ldoubdoc.html),\n G. Marsaglia, \"Evaluating the Normal Distribution\",\n Journal of Statistical Software <b>11</b>, (July 2004).\n",
				"endline": 342
			},
			{
				"kind": "function",
				"line": 350,
				"deco": "FNaNbNiNfeZe",
				"endchar": 1,
				"char": 6,
				"parameters": [
					{
						"deco": "e",
						"name": "p"
					}
				],
				"name": "normalDistributionInverse",
				"comment": " Inverse of Normal distribution function\n\n Returns the argument, x, for which the area under the\n Normal probability density function (integrated from\n minus infinity to x) is equal to p.\n",
				"endline": 357
			}
		],
		"name": "std.mathspecial",
		"comment": " Mathematical Special Functions\n\n The technical term 'Special Functions' includes several families of\n transcendental functions, which have important applications in particular\n branches of mathematics and physics.\n\n The gamma and related functions, and the error function are crucial for\n mathematical statistics.\n The Bessel and related functions arise in problems involving wave propagation\n (especially in optics).\n Other major categories of special functions include the elliptic integrals\n (related to the arc length of an ellipse), and the hypergeometric functions.\n\n Status:\n  Many more functions will be added to this module.\n  The naming convention for the distribution functions (gammaIncomplete, etc)\n  is not yet finalized and will probably change.\n\n Macros:\n      WIKI = Phobos/StdMathSpecial\n\n      TABLE_SV = <table border=1 cellpadding=4 cellspacing=0>\n              <caption>Special Values</caption>\n              $0</table>\n      SVH = $(TR $(TH $1) $(TH $2))\n      SV  = $(TR $(TD $1) $(TD $2))\n\n      NAN = $(RED NAN)\n      SUP = <span style=\"vertical-align:super;font-size:smaller\">$0</span>\n      GAMMA = &#915;\n      THETA = &theta;\n      INTEGRAL = &#8747;\n      INTEGRATE = $(BIG &#8747;<sub>$(SMALL $1)</sub><sup>$2</sup>)\n      POWER = $1<sup>$2</sup>\n      SUB = $1<sub>$2</sub>\n      BIGSUM = $(BIG &Sigma; <sup>$2</sup><sub>$(SMALL $1)</sub>)\n      CHOOSE = $(BIG &#40;) <sup>$(SMALL $1)</sup><sub>$(SMALL $2)</sub> $(BIG &#41;)\n      PLUSMN = &plusmn;\n      INFIN = &infin;\n      PLUSMNINF = &plusmn;&infin;\n      PI = &pi;\n      LT = &lt;\n      GT = &gt;\n      SQRT = &radic;\n      HALF = &frac12;\n\n\n Copyright: Based on the CEPHES math library, which is\n            Copyright (C) 1994 Stephen L. Moshier (moshier@world.std.com).\n License:   $(WEB www.boost.org/LICENSE_1_0.txt, Boost License 1.0).\n Authors:   Stephen L. Moshier (original C code). Conversion to D by Don Clugston\n Source:    $(PHOBOSSRC std/_mathspecial.d)\n"
	},
	{
		"kind": "module",
		"file": "../phobos/std/stdiobase.d",
		"members": [],
		"name": "std.stdiobase",
		"comment": " The only purpose of this module is to do the static construction for\n std.stdio, to eliminate cyclic construction errors.\n\n Copyright: Copyright Andrei Alexandrescu 2008 - 2009.\n License:   $(WEB www.boost.org/LICENSE_1_0.txt, Boost License 1.0).\n Authors:   $(WEB erdani.org, Andrei Alexandrescu)\n Source:    $(PHOBOSSRC std/_stdiobase.d)\n"
	},
	{
		"kind": "module",
		"file": "../phobos/std/numeric.d",
		"members": [
			{
				"kind": "enum",
				"line": 38,
				"members": [
					{
						"kind": "enum member",
						"line": 41,
						"value": "1",
						"char": 5,
						"name": "signed",
						"comment": "Adds a sign bit to allow for signed numbers.\n"
					},
					{
						"kind": "enum member",
						"line": 49,
						"value": "2",
						"char": 5,
						"name": "storeNormalized",
						"comment": " Store values in normalized form by default. The actual precision of the\n significand is extended by 1 bit by assuming an implicit leading bit of 1\n instead of 0. i.e. $(D 1.nnnn) instead of $(D 0.nnnn).\n True for all $(LUCKY IEE754) types\n"
					},
					{
						"kind": "enum member",
						"line": 55,
						"value": "4",
						"char": 5,
						"name": "allowDenorm",
						"comment": " Stores the significand in $(LUCKY IEEE754 denormalized) form when the\n exponent is 0. Required to express the value 0.\n"
					},
					{
						"kind": "enum member",
						"line": 58,
						"value": "8",
						"char": 5,
						"name": "infinity",
						"comment": "Allows the storage of $(LUCKY IEEE754 _infinity) values.\n"
					},
					{
						"kind": "enum member",
						"line": 61,
						"value": "16",
						"char": 5,
						"name": "nan",
						"comment": "Allows the storage of $(LUCKY IEEE754 Not a Number) values.\n"
					},
					{
						"kind": "enum member",
						"line": 68,
						"value": "32",
						"char": 5,
						"name": "probability",
						"comment": " If set, select an exponent bias such that max_exp = 1.\n i.e. so that the maximum value is >= 1.0 and < 2.0.\n Ignored if the exponent bias is manually specified.\n"
					},
					{
						"kind": "enum member",
						"line": 71,
						"value": "64",
						"char": 5,
						"name": "negativeUnsigned",
						"comment": "If set, unsigned custom floats are assumed to be negative.\n"
					},
					{
						"kind": "enum member",
						"line": 76,
						"value": "134",
						"char": 5,
						"name": "allowDenormZeroOnly",
						"comment": "If set, 0 is the only allowed $(LUCKY IEEE754 denormalized) number.\n Requires allowDenorm and storeNormalized.\n"
					},
					{
						"kind": "enum member",
						"line": 79,
						"value": "31",
						"char": 5,
						"name": "ieee",
						"comment": "Include _all of the $(LUCKY IEEE754) options.\n"
					},
					{
						"kind": "enum member",
						"line": 82,
						"value": "0",
						"char": 5,
						"name": "none",
						"comment": "Include none of the above options.\n"
					}
				],
				"char": 8,
				"baseDeco": "i",
				"name": "CustomFloatFlags",
				"comment": "Format flags for CustomFloat.\n"
			},
			{
				"kind": "template",
				"line": 134,
				"constraint": "bits == 8 || bits == 16 || bits == 32 || bits == 64 || bits == 80",
				"members": [
					{
						"kind": "alias",
						"line": 137,
						"char": 5,
						"type": "CustomFloat!(CustomFloatParams!bits)",
						"name": "CustomFloat"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "value",
						"deco": "k",
						"name": "bits"
					}
				],
				"comment": " Allows user code to define custom floating-point formats. These formats are\n for storage only; all operations on them are performed by first implicitly\n extracting them to $(D real) first. After the operation is completed the\n result can be stored in a custom floating-point value via assignment.\nExample:\n\n---\n// Define a 16-bit floating point values\nCustomFloat!16                                x;     // Using the number of bits\nCustomFloat!(10, 5)                           y;     // Using the precision and exponent width\nCustomFloat!(10, 5,CustomFloatFlags.ieee)     z;     // Using the precision, exponent width and format flags\nCustomFloat!(10, 5,CustomFloatFlags.ieee, 15) w;     // Using the precision, exponent width, format flags and exponent offset bias\n\n// Use the 16-bit floats mostly like normal numbers\nw = x*y - 1;\n\n// Functions calls require conversion\nz = sin(+x)           + cos(+y);                     // Use unary plus to concisely convert to a real\nz = sin(x.get!float)  + cos(y.get!float);            // Or use get!T\nz = sin(cast(float)x) + cos(cast(float)y);           // Or use cast(T) to explicitly convert\n\n// Define a 8-bit custom float for storing probabilities\nalias Probability = CustomFloat!(4, 4, CustomFloatFlags.ieee^CustomFloatFlags.probability^CustomFloatFlags.signed );\nauto p = Probability(0.5);\n\n---\n",
				"name": "CustomFloat"
			},
			{
				"kind": "template",
				"line": 141,
				"constraint": "((flags & flags.signed) + precision + exponentWidth) % 8 == 0 && precision + exponentWidth > 0",
				"members": [
					{
						"kind": "alias",
						"line": 144,
						"char": 5,
						"type": "CustomFloat!(CustomFloatParams!(precision, exponentWidth, flags))",
						"name": "CustomFloat"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "value",
						"deco": "k",
						"name": "precision"
					},
					{
						"kind": "value",
						"deco": "k",
						"name": "exponentWidth"
					},
					{
						"kind": "value",
						"defaultValue": "CustomFloatFlags.ieee",
						"deco": "E3std7numeric16CustomFloatFlags",
						"name": "flags"
					}
				],
				"comment": "ditto\n",
				"name": "CustomFloat"
			},
			{
				"kind": "template",
				"line": 170,
				"constraint": "((flags & flags.signed) + precision + exponentWidth) % 8 == 0 && precision + exponentWidth > 0",
				"members": [
					{
						"kind": "struct",
						"line": 170,
						"members": [
							{
								"kind": "function",
								"line": 424,
								"storageClass": [
									"static"
								],
								"endchar": 5,
								"char": 29,
								"type": "@property size_t()",
								"name": "dig",
								"comment": "Returns: number of decimal digits of precision\n",
								"endline": 429
							},
							{
								"kind": "function",
								"line": 432,
								"storageClass": [
									"static"
								],
								"endchar": 5,
								"char": 34,
								"type": "@property CustomFloat()",
								"name": "epsilon",
								"comment": "Returns: smallest increment to the value 1\n",
								"endline": 452
							},
							{
								"kind": "variable",
								"line": 455,
								"init": "precision + ((flags & Flags.storeNormalized) != 0)",
								"storageClass": [
									"enum"
								],
								"char": 10,
								"name": "mant_dig",
								"comment": "the number of bits in mantissa\n"
							},
							{
								"kind": "function",
								"line": 458,
								"storageClass": [
									"static"
								],
								"endchar": 72,
								"char": 26,
								"type": "@property int()",
								"name": "max_10_exp",
								"comment": "Returns: maximum int value such that 10<sup>max_10_exp</sup> is representable\n",
								"endline": 458
							},
							{
								"kind": "variable",
								"line": 461,
								"init": "exponent_max - bias + ((~flags & (Flags.infinity | flags.nan)) != 0)",
								"storageClass": [
									"enum"
								],
								"char": 10,
								"name": "max_exp",
								"comment": "maximum int value such that 2<sup>max_exp-1</sup> is representable\n"
							},
							{
								"kind": "function",
								"line": 464,
								"storageClass": [
									"static"
								],
								"endchar": 79,
								"char": 26,
								"type": "@property int()",
								"name": "min_10_exp",
								"comment": "Returns: minimum int value such that 10<sup>min_10_exp</sup> is representable\n",
								"endline": 464
							},
							{
								"kind": "variable",
								"line": 467,
								"init": "cast(T_signed_exp)-bias + 1 + ((flags & Flags.allowDenorm) != 0)",
								"storageClass": [
									"enum"
								],
								"char": 10,
								"name": "min_exp",
								"comment": "minimum int value such that 2<sup>min_exp-1</sup> is representable as a normalized value\n"
							},
							{
								"kind": "function",
								"line": 470,
								"storageClass": [
									"static"
								],
								"endchar": 5,
								"char": 34,
								"type": "@property CustomFloat()",
								"name": "max",
								"comment": "Returns: largest representable value that's not infinity\n",
								"endline": 478
							},
							{
								"kind": "function",
								"line": 481,
								"storageClass": [
									"static"
								],
								"endchar": 5,
								"char": 34,
								"type": "@property CustomFloat()",
								"name": "min_normal",
								"comment": "Returns: smallest representable normalized value that's not 0\n",
								"endline": 491
							},
							{
								"kind": "function",
								"line": 494,
								"endchar": 47,
								"char": 27,
								"type": "@property CustomFloat()",
								"name": "re",
								"comment": "Returns: real part\n",
								"endline": 494
							},
							{
								"kind": "function",
								"line": 497,
								"storageClass": [
									"static"
								],
								"endchar": 67,
								"char": 34,
								"type": "@property CustomFloat()",
								"name": "im",
								"comment": "Returns: imaginary part\n",
								"endline": 497
							},
							{
								"kind": "template",
								"line": 500,
								"constraint": "__traits(compiles, cast(real)input)",
								"members": [
									{
										"kind": "constructor",
										"line": 500,
										"endchar": 5,
										"char": 5,
										"type": "(F input)",
										"parameters": [
											{
												"type": "F",
												"name": "input"
											}
										],
										"name": "this",
										"endline": 503
									}
								],
								"char": 5,
								"parameters": [
									{
										"kind": "type",
										"name": "F"
									}
								],
								"comment": "Initialize from any $(D real) compatible type.\n",
								"name": "this"
							},
							{
								"kind": "template",
								"line": 506,
								"members": [
									{
										"kind": "function",
										"line": 506,
										"endchar": 5,
										"char": 10,
										"type": "void(F input)",
										"parameters": [
											{
												"type": "F",
												"name": "input"
											}
										],
										"name": "opAssign",
										"endline": 512
									}
								],
								"char": 10,
								"parameters": [
									{
										"kind": "type",
										"type": "CustomFloat",
										"name": "F"
									}
								],
								"comment": "Self assignment\n",
								"name": "opAssign"
							},
							{
								"kind": "template",
								"line": 515,
								"constraint": "__traits(compiles, cast(real)input)",
								"members": [
									{
										"kind": "function",
										"line": 515,
										"endchar": 5,
										"char": 10,
										"type": "void(F input)",
										"parameters": [
											{
												"type": "F",
												"name": "input"
											}
										],
										"name": "opAssign",
										"endline": 545
									}
								],
								"char": 10,
								"parameters": [
									{
										"kind": "type",
										"name": "F"
									}
								],
								"comment": "Assigns from any $(D real) compatible type.\n",
								"name": "opAssign"
							},
							{
								"kind": "template",
								"line": 548,
								"constraint": "staticIndexOf!(Unqual!F, float, double, real) >= 0",
								"members": [
									{
										"kind": "function",
										"line": 548,
										"endchar": 5,
										"char": 17,
										"type": "@property F()",
										"name": "get",
										"endline": 570
									}
								],
								"char": 17,
								"parameters": [
									{
										"kind": "type",
										"name": "F"
									}
								],
								"comment": "Fetches the stored value either as a $(D float), $(D double) or $(D real).\n",
								"name": "get"
							},
							{
								"kind": "template",
								"line": 573,
								"constraint": "__traits(compiles, get!T)",
								"members": [
									{
										"kind": "function",
										"line": 573,
										"endchar": 67,
										"char": 7,
										"type": "T()",
										"name": "opCast",
										"endline": 573
									}
								],
								"char": 7,
								"parameters": [
									{
										"kind": "type",
										"name": "T"
									}
								],
								"comment": "ditto\n",
								"name": "opCast"
							},
							{
								"kind": "template",
								"line": 576,
								"constraint": "__traits(compiles, mixin(op ~ \"(get!real)\")) || op == \"++\" || op == \"--\"",
								"members": [
									{
										"kind": "function",
										"line": 576,
										"endchar": 5,
										"char": 10,
										"type": "real()",
										"name": "opUnary",
										"endline": 587
									}
								],
								"char": 10,
								"parameters": [
									{
										"kind": "value",
										"type": "string",
										"name": "op"
									}
								],
								"comment": "Convert the CustomFloat to a real and perform the relavent operator on the result\n",
								"name": "opUnary"
							},
							{
								"kind": "template",
								"line": 590,
								"constraint": "__traits(compiles, mixin(\"get!real\" ~ op ~ \"b\"))",
								"members": [
									{
										"kind": "function",
										"line": 590,
										"endchar": 5,
										"char": 10,
										"type": "real(T b)",
										"parameters": [
											{
												"type": "T",
												"name": "b"
											}
										],
										"name": "opBinary",
										"endline": 594
									}
								],
								"char": 10,
								"parameters": [
									{
										"kind": "value",
										"type": "string",
										"name": "op"
									},
									{
										"kind": "type",
										"name": "T"
									}
								],
								"comment": "ditto\n",
								"name": "opBinary"
							},
							{
								"kind": "template",
								"line": 597,
								"constraint": "__traits(compiles, mixin(\"a\" ~ op ~ \"get!real\")) && !__traits(compiles, mixin(\"get!real\" ~ op ~ \"b\"))",
								"members": [
									{
										"kind": "function",
										"line": 597,
										"endchar": 5,
										"char": 10,
										"type": "real(T a)",
										"parameters": [
											{
												"type": "T",
												"name": "a"
											}
										],
										"name": "opBinaryRight",
										"endline": 602
									}
								],
								"char": 10,
								"parameters": [
									{
										"kind": "value",
										"type": "string",
										"name": "op"
									},
									{
										"kind": "type",
										"name": "T"
									}
								],
								"comment": "ditto\n",
								"name": "opBinaryRight"
							},
							{
								"kind": "template",
								"line": 605,
								"constraint": "__traits(compiles, cast(real)b)",
								"members": [
									{
										"kind": "function",
										"line": 605,
										"endchar": 5,
										"char": 9,
										"type": "int(auto ref T b)",
										"parameters": [
											{
												"storageClass": [
													"auto",
													"ref"
												],
												"type": "T",
												"name": "b"
											}
										],
										"name": "opCmp",
										"endline": 611
									}
								],
								"char": 9,
								"parameters": [
									{
										"kind": "type",
										"name": "T"
									}
								],
								"comment": "ditto\n",
								"name": "opCmp"
							},
							{
								"kind": "template",
								"line": 614,
								"constraint": "__traits(compiles, mixin(\"get!real\" ~ op ~ \"cast(real)b\"))",
								"members": [
									{
										"kind": "function",
										"line": 614,
										"endchar": 5,
										"char": 10,
										"type": "void(auto ref T b)",
										"parameters": [
											{
												"storageClass": [
													"auto",
													"ref"
												],
												"type": "T",
												"name": "b"
											}
										],
										"name": "opOpAssign",
										"endline": 618
									}
								],
								"char": 10,
								"parameters": [
									{
										"kind": "value",
										"type": "string",
										"name": "op"
									},
									{
										"kind": "type",
										"name": "T"
									}
								],
								"comment": "ditto\n",
								"name": "opOpAssign"
							},
							{
								"kind": "template",
								"line": 621,
								"members": [
									{
										"kind": "template",
										"line": 625,
										"members": [
											{
												"kind": "function",
												"line": 625,
												"endchar": 9,
												"char": 14,
												"type": "void(scope void delegate(const(char)[]) sink, FormatSpec!char fmt)",
												"parameters": [
													{
														"storageClass": [
															"scope"
														],
														"type": "void delegate(const(char)[])",
														"name": "sink"
													},
													{
														"type": "FormatSpec!char",
														"name": "fmt"
													}
												],
												"name": "toString",
												"endline": 628
											}
										],
										"char": 14,
										"parameters": [],
										"name": "toString"
									}
								],
								"char": 5,
								"parameters": [],
								"comment": "ditto\n",
								"name": "toString"
							}
						],
						"char": 1,
						"name": "CustomFloat"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "value",
						"deco": "k",
						"name": "precision"
					},
					{
						"kind": "value",
						"deco": "k",
						"name": "exponentWidth"
					},
					{
						"kind": "value",
						"deco": "E3std7numeric16CustomFloatFlags",
						"name": "flags"
					},
					{
						"kind": "value",
						"deco": "k",
						"name": "bias"
					}
				],
				"comment": "ditto\n",
				"name": "CustomFloat"
			},
			{
				"kind": "template",
				"line": 698,
				"constraint": "isFloatingPoint!F",
				"members": [
					{
						"kind": "alias",
						"line": 701,
						"deco": "e",
						"char": 5,
						"name": "FPTemporary"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "F"
					}
				],
				"comment": "Defines the fastest type to use when storing temporaries of a\ncalculation intended to ultimately yield a result of type $(D F)\n(where $(D F) must be one of $(D float), $(D double), or $(D\nreal)). When doing a multi-step computation, you may want to store\nintermediate results as $(D FPTemporary!F).\n\nThe necessity of $(D FPTemporary) stems from the optimized\nfloating-point operations and registers present in virtually all\nprocessors. When adding numbers in the example above, the addition may\nin fact be done in $(D real) precision internally. In that case,\nstoring the intermediate $(D result) in $(D double format) is not only\nless precise, it is also (surprisingly) slower, because a conversion\nfrom $(D real) to $(D double) is performed every pass through the\nloop. This being a lose-lose situation, $(D FPTemporary!F) has been\ndefined as the $(I fastest) type to use for calculations at precision\n$(D F). There is no need to define a type for the $(I most accurate)\ncalculations, as that is always $(D real).\n\nFinally, there is no guarantee that using $(D FPTemporary!F) will\nalways be fastest, as the speed of floating-point calculations depends\non very many factors.\nExample:\n\n---\n// Average numbers in an array\ndouble avg(in double[] a)\n{\n    if (a.length == 0) return 0;\n    FPTemporary!double result = 0;\n    foreach (e; a) result += e;\n    return result / a.length;\n}\n\nauto a = [1.0, 2.0, 3.0];\nassert(approxEqual(avg(a), 2));\n\n---\n",
				"name": "FPTemporary"
			},
			{
				"kind": "template",
				"line": 726,
				"members": [
					{
						"kind": "template",
						"line": 729,
						"members": [
							{
								"kind": "function",
								"line": 729,
								"endchar": 5,
								"char": 9,
								"type": "Num(Num xn_1, Num xn)",
								"parameters": [
									{
										"type": "Num",
										"name": "xn_1"
									},
									{
										"type": "Num",
										"name": "xn"
									}
								],
								"name": "secantMethod",
								"endline": 744
							}
						],
						"char": 9,
						"parameters": [
							{
								"kind": "type",
								"name": "Num"
							}
						],
						"name": "secantMethod"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "alias",
						"name": "fun"
					}
				],
				"comment": "Implements the $(WEB tinyurl.com/2zb9yr, secant method) for finding a\nroot of the function $(D fun) starting from points $(D [xn_1, x_n])\n(ideally close to the root). $(D Num) may be $(D float), $(D double),\nor $(D real).\nExample:\n\n---\nfloat f(float x)\n{\n    return cos(x) - x*x*x;\n}\nauto x = secantMethod!(f)(0f, 1f);\nassert(approxEqual(x, 0.865474));\n\n---\n",
				"name": "secantMethod"
			},
			{
				"kind": "template",
				"line": 808,
				"constraint": "isFloatingPoint!T && is(typeof(tolerance(T.init, T.init)) : bool) && is(typeof(f(T.init)) == R, R) && isFloatingPoint!R",
				"members": [
					{
						"kind": "function",
						"line": 808,
						"endchar": 1,
						"char": 3,
						"type": "T(scope DF f, in T a, in T b, scope DT tolerance)",
						"parameters": [
							{
								"storageClass": [
									"scope"
								],
								"type": "DF",
								"name": "f"
							},
							{
								"storageClass": [
									"in"
								],
								"type": "T",
								"name": "a"
							},
							{
								"storageClass": [
									"in"
								],
								"type": "T",
								"name": "b"
							},
							{
								"storageClass": [
									"scope"
								],
								"type": "DT",
								"name": "tolerance"
							}
						],
						"name": "findRoot",
						"endline": 825
					}
				],
				"char": 3,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "type",
						"name": "DF"
					},
					{
						"kind": "type",
						"name": "DT"
					}
				],
				"comment": "  Find a real root of a real function f(x) via bracketing.\n\n Given a function $(D f) and a range $(D [a..b]) such that $(D f(a))\n and $(D f(b)) have opposite signs or at least one of them equals ±0,\n returns the value of $(D x) in\n the range which is closest to a root of $(D f(x)).  If $(D f(x))\n has more than one root in the range, one will be chosen\n arbitrarily.  If $(D f(x)) returns NaN, NaN will be returned;\n otherwise, this algorithm is guaranteed to succeed.\n\n Uses an algorithm based on TOMS748, which uses inverse cubic\n interpolation whenever possible, otherwise reverting to parabolic\n or secant interpolation. Compared to TOMS748, this implementation\n improves worst-case performance by a factor of more than 100, and\n typical performance by a factor of 2. For 80-bit reals, most\n problems require 8 to 15 calls to $(D f(x)) to achieve full machine\n precision. The worst-case performance (pathological cases) is\n approximately twice the number of bits.\n\n References: \"On Enclosing Simple Roots of Nonlinear Equations\",\n G. Alefeld, F.A. Potra, Yixun Shi, Mathematics of Computation 61,\n pp733-744 (1993).  Fortran code available from $(WEB\n www.netlib.org,www.netlib.org) as algorithm TOMS478.\n\n",
				"name": "findRoot"
			},
			{
				"kind": "template",
				"line": 828,
				"members": [
					{
						"kind": "function",
						"line": 828,
						"endchar": 1,
						"char": 3,
						"type": "T(scope DF f, in T a, in T b)",
						"parameters": [
							{
								"storageClass": [
									"scope"
								],
								"type": "DF",
								"name": "f"
							},
							{
								"storageClass": [
									"in"
								],
								"type": "T",
								"name": "a"
							},
							{
								"storageClass": [
									"in"
								],
								"type": "T",
								"name": "b"
							}
						],
						"name": "findRoot",
						"endline": 831
					}
				],
				"char": 3,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "type",
						"name": "DF"
					}
				],
				"comment": "ditto\n",
				"name": "findRoot"
			},
			{
				"kind": "template",
				"line": 866,
				"constraint": "isFloatingPoint!T && is(typeof(tolerance(T.init, T.init)) : bool) && is(typeof(f(T.init)) == R) && isFloatingPoint!R",
				"members": [
					{
						"kind": "function",
						"line": 866,
						"endchar": 1,
						"char": 20,
						"type": "Tuple!(T, T, R, R)(scope DF f, in T ax, in T bx, in R fax, in R fbx, scope DT tolerance)",
						"parameters": [
							{
								"storageClass": [
									"scope"
								],
								"type": "DF",
								"name": "f"
							},
							{
								"storageClass": [
									"in"
								],
								"type": "T",
								"name": "ax"
							},
							{
								"storageClass": [
									"in"
								],
								"type": "T",
								"name": "bx"
							},
							{
								"storageClass": [
									"in"
								],
								"type": "R",
								"name": "fax"
							},
							{
								"storageClass": [
									"in"
								],
								"type": "R",
								"name": "fbx"
							},
							{
								"storageClass": [
									"scope"
								],
								"type": "DT",
								"name": "tolerance"
							}
						],
						"name": "findRoot",
						"endline": 1170
					}
				],
				"char": 20,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "type",
						"name": "R"
					},
					{
						"kind": "type",
						"name": "DF"
					},
					{
						"kind": "type",
						"name": "DT"
					}
				],
				"comment": " Find root of a real function f(x) by bracketing, allowing the\n termination condition to be specified.\n\n Params:\n\n f = Function to be analyzed\n\n ax = Left bound of initial range of $(D f) known to contain the\n root.\n\n bx = Right bound of initial range of $(D f) known to contain the\n root.\n\n fax = Value of $(D f(ax)).\n\n fbx = Value of $(D f(bx)). $(D fax) and $(D fbx) should have opposite signs.\n ($(D f(ax)) and $(D f(bx)) are commonly known in advance.)\n\n\n tolerance = Defines an early termination condition. Receives the\n             current upper and lower bounds on the root. The\n             delegate must return $(D true) when these bounds are\n             acceptable. If this function always returns $(D false),\n             full machine precision will be achieved.\n\n Returns:\n\n A tuple consisting of two ranges. The first two elements are the\n range (in $(D x)) of the root, while the second pair of elements\n are the corresponding function values at those points. If an exact\n root was found, both of the first two elements will contain the\n root, and the second pair of elements will be 0.\n",
				"name": "findRoot"
			},
			{
				"kind": "template",
				"line": 1173,
				"members": [
					{
						"kind": "function",
						"line": 1173,
						"endchar": 1,
						"char": 20,
						"type": "Tuple!(T, T, R, R)(scope DF f, in T ax, in T bx, in R fax, in R fbx)",
						"parameters": [
							{
								"storageClass": [
									"scope"
								],
								"type": "DF",
								"name": "f"
							},
							{
								"storageClass": [
									"in"
								],
								"type": "T",
								"name": "ax"
							},
							{
								"storageClass": [
									"in"
								],
								"type": "T",
								"name": "bx"
							},
							{
								"storageClass": [
									"in"
								],
								"type": "R",
								"name": "fax"
							},
							{
								"storageClass": [
									"in"
								],
								"type": "R",
								"name": "fbx"
							}
						],
						"name": "findRoot",
						"endline": 1176
					}
				],
				"char": 20,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "type",
						"name": "R"
					},
					{
						"kind": "type",
						"name": "DF"
					}
				],
				"comment": "ditto\n",
				"name": "findRoot"
			},
			{
				"kind": "template",
				"line": 1179,
				"members": [
					{
						"kind": "function",
						"line": 1179,
						"endchar": 1,
						"char": 3,
						"type": "T(scope R delegate(T) f, in T a, in T b, scope bool delegate(T lo, T hi) tolerance = (T a, T b) => false)",
						"parameters": [
							{
								"storageClass": [
									"scope"
								],
								"type": "R delegate(T)",
								"name": "f"
							},
							{
								"storageClass": [
									"in"
								],
								"type": "T",
								"name": "a"
							},
							{
								"storageClass": [
									"in"
								],
								"type": "T",
								"name": "b"
							},
							{
								"storageClass": [
									"scope"
								],
								"default": "",
								"type": "bool delegate(T lo, T hi)",
								"name": "tolerance"
							}
						],
						"name": "findRoot",
						"endline": 1183
					}
				],
				"char": 3,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "type",
						"name": "R"
					}
				],
				"comment": "ditto\n",
				"name": "findRoot"
			},
			{
				"kind": "template",
				"line": 1411,
				"constraint": "isInputRange!Range1 && isInputRange!Range2",
				"members": [
					{
						"kind": "function",
						"line": 1411,
						"endchar": 1,
						"char": 1,
						"type": "CommonType!(ElementType!Range1, ElementType!Range2)(Range1 a, Range2 b)",
						"parameters": [
							{
								"type": "Range1",
								"name": "a"
							},
							{
								"type": "Range2",
								"name": "b"
							}
						],
						"name": "euclideanDistance",
						"endline": 1424
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "Range1"
					},
					{
						"kind": "type",
						"name": "Range2"
					}
				],
				"comment": "Computes $(LUCKY Euclidean distance) between input ranges $(D a) and\n$(D b). The two ranges must have the same length. The three-parameter\nversion stops computation as soon as the distance is greater than or\nequal to $(D limit) (this is useful to save computation if a small\ndistance is sought).\n",
				"name": "euclideanDistance"
			},
			{
				"kind": "template",
				"line": 1428,
				"constraint": "isInputRange!Range1 && isInputRange!Range2",
				"members": [
					{
						"kind": "function",
						"line": 1428,
						"endchar": 1,
						"char": 1,
						"type": "CommonType!(ElementType!Range1, ElementType!Range2)(Range1 a, Range2 b, F limit)",
						"parameters": [
							{
								"type": "Range1",
								"name": "a"
							},
							{
								"type": "Range2",
								"name": "b"
							},
							{
								"type": "F",
								"name": "limit"
							}
						],
						"name": "euclideanDistance",
						"endline": 1447
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "Range1"
					},
					{
						"kind": "type",
						"name": "Range2"
					},
					{
						"kind": "type",
						"name": "F"
					}
				],
				"comment": "Ditto\n",
				"name": "euclideanDistance"
			},
			{
				"kind": "template",
				"line": 1470,
				"constraint": "isInputRange!Range1 && isInputRange!Range2 && !(isArray!Range1 && isArray!Range2)",
				"members": [
					{
						"kind": "function",
						"line": 1470,
						"endchar": 1,
						"char": 1,
						"type": "CommonType!(ElementType!Range1, ElementType!Range2)(Range1 a, Range2 b)",
						"parameters": [
							{
								"type": "Range1",
								"name": "a"
							},
							{
								"type": "Range2",
								"name": "b"
							}
						],
						"name": "dotProduct",
						"endline": 1483
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "Range1"
					},
					{
						"kind": "type",
						"name": "Range2"
					}
				],
				"comment": "Computes the $(LUCKY dot product) of input ranges $(D a) and $(D\nb). The two ranges must have the same length. If both ranges define\nlength, the check is done once; otherwise, it is done at each\niteration.\n",
				"name": "dotProduct"
			},
			{
				"kind": "template",
				"line": 1487,
				"members": [
					{
						"kind": "function",
						"line": 1487,
						"endchar": 1,
						"char": 1,
						"type": "CommonType!(F1, F2)(in F1[] avector, in F2[] bvector)",
						"parameters": [
							{
								"storageClass": [
									"in"
								],
								"type": "F1[]",
								"name": "avector"
							},
							{
								"storageClass": [
									"in"
								],
								"type": "F2[]",
								"name": "bvector"
							}
						],
						"name": "dotProduct",
						"endline": 1537
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "F1"
					},
					{
						"kind": "type",
						"name": "F2"
					}
				],
				"comment": "Ditto\n",
				"name": "dotProduct"
			},
			{
				"kind": "template",
				"line": 1565,
				"constraint": "isInputRange!Range1 && isInputRange!Range2",
				"members": [
					{
						"kind": "function",
						"line": 1565,
						"endchar": 1,
						"char": 1,
						"type": "CommonType!(ElementType!Range1, ElementType!Range2)(Range1 a, Range2 b)",
						"parameters": [
							{
								"type": "Range1",
								"name": "a"
							},
							{
								"type": "Range2",
								"name": "b"
							}
						],
						"name": "cosineSimilarity",
						"endline": 1581
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "Range1"
					},
					{
						"kind": "type",
						"name": "Range2"
					}
				],
				"comment": "Computes the $(LUCKY cosine similarity) of input ranges $(D a) and $(D\nb). The two ranges must have the same length. If both ranges define\nlength, the check is done once; otherwise, it is done at each\niteration. If either range has all-zero elements, return 0.\n",
				"name": "cosineSimilarity"
			},
			{
				"kind": "template",
				"line": 1606,
				"constraint": "isForwardRange!R",
				"members": [
					{
						"kind": "function",
						"line": 1606,
						"endchar": 1,
						"char": 6,
						"type": "bool(R range, ElementType!R sum = 1)",
						"parameters": [
							{
								"type": "R",
								"name": "range"
							},
							{
								"default": "1",
								"type": "ElementType!R",
								"name": "sum"
							}
						],
						"name": "normalize",
						"endline": 1644
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					}
				],
				"comment": "Normalizes values in $(D range) by multiplying each element with a\nnumber chosen such that values sum up to $(D sum). If elements in $(D\nrange) sum to zero, assigns $(D sum / range.length) to\nall. Normalization makes sense only if all elements in $(D range) are\npositive. $(D normalize) assumes that is the case without checking it.\n\nReturns: $(D true) if normalization completed normally, $(D false) if\nall elements in $(D range) were zero or if $(D range) is empty.\nExample:\n\n---\ndouble[] a = [];\nassert(!normalize(a));\na = [ 1.0, 3.0 ];\nassert(normalize(a));\nassert(a == [ 0.25, 0.75 ]);\na = [ 0.0, 0.0 ];\nassert(!normalize(a));\nassert(a == [ 0.5, 0.5 ]);\n\n---\n",
				"name": "normalize"
			},
			{
				"kind": "template",
				"line": 1663,
				"constraint": "isInputRange!Range && isFloatingPoint!(ElementType!Range)",
				"members": [
					{
						"kind": "function",
						"line": 1663,
						"endchar": 1,
						"char": 19,
						"type": "ElementType!Range(Range r)",
						"parameters": [
							{
								"type": "Range",
								"name": "r"
							}
						],
						"name": "sumOfLog2s",
						"endline": 1682
					}
				],
				"char": 19,
				"parameters": [
					{
						"kind": "type",
						"name": "Range"
					}
				],
				"comment": "Compute the sum of binary logarithms of the input range $(D r).\nThe error of this method is much smaller than with a naive sum of log2.\nExample:\n\n---\nassert(sumOfLog2s(new double[0]) == 0);\nassert(sumOfLog2s([0.0L]) == -real.infinity);\nassert(sumOfLog2s([-0.0L]) == -real.infinity);\nassert(sumOfLog2s([2.0L]) == 1);\nassert(sumOfLog2s([-2.0L]).isNaN());\nassert(sumOfLog2s([real.nan]).isNaN());\nassert(sumOfLog2s([-real.nan]).isNaN());\nassert(sumOfLog2s([real.infinity]) == real.infinity);\nassert(sumOfLog2s([-real.infinity]).isNaN());\nassert(sumOfLog2s([ 0.25, 0.25, 0.25, 0.125 ]) == -9);\n\n---\n",
				"name": "sumOfLog2s"
			},
			{
				"kind": "template",
				"line": 1707,
				"constraint": "isInputRange!Range",
				"members": [
					{
						"kind": "function",
						"line": 1707,
						"endchar": 1,
						"char": 19,
						"type": "ElementType!Range(Range r)",
						"parameters": [
							{
								"type": "Range",
								"name": "r"
							}
						],
						"name": "entropy",
						"endline": 1716
					}
				],
				"char": 19,
				"parameters": [
					{
						"kind": "type",
						"name": "Range"
					}
				],
				"comment": "Computes $(LUCKY _entropy) of input range $(D r) in bits. This\nfunction assumes (without checking) that the values in $(D r) are all\nin $(D [0, 1]). For the entropy to be meaningful, often $(D r) should\nbe normalized too (i.e., its values should sum to 1). The\ntwo-parameter version stops evaluating as soon as the intermediate\nresult is greater than or equal to $(D max).\n",
				"name": "entropy"
			},
			{
				"kind": "template",
				"line": 1719,
				"constraint": "isInputRange!Range && !is(CommonType!(ElementType!Range, F) == void)",
				"members": [
					{
						"kind": "function",
						"line": 1719,
						"endchar": 1,
						"char": 19,
						"type": "ElementType!Range(Range r, F max)",
						"parameters": [
							{
								"type": "Range",
								"name": "r"
							},
							{
								"type": "F",
								"name": "max"
							}
						],
						"name": "entropy",
						"endline": 1731
					}
				],
				"char": 19,
				"parameters": [
					{
						"kind": "type",
						"name": "Range"
					},
					{
						"kind": "type",
						"name": "F"
					}
				],
				"comment": "Ditto\n",
				"name": "entropy"
			},
			{
				"kind": "template",
				"line": 1759,
				"constraint": "isInputRange!Range1 && isInputRange!Range2",
				"members": [
					{
						"kind": "function",
						"line": 1759,
						"endchar": 1,
						"char": 1,
						"type": "CommonType!(ElementType!Range1, ElementType!Range2)(Range1 a, Range2 b)",
						"parameters": [
							{
								"type": "Range1",
								"name": "a"
							},
							{
								"type": "Range2",
								"name": "b"
							}
						],
						"name": "kullbackLeiblerDivergence",
						"endline": 1776
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "Range1"
					},
					{
						"kind": "type",
						"name": "Range2"
					}
				],
				"comment": "Computes the $(LUCKY Kullback-Leibler divergence) between input ranges\n$(D a) and $(D b), which is the sum $(D ai * log(ai / bi)). The base\nof logarithm is 2. The ranges are assumed to contain elements in $(D\n[0, 1]). Usually the ranges are normalized probability distributions,\nbut this is not required or checked by $(D\nkullbackLeiblerDivergence). If any element $(D bi) is zero and the\ncorresponding element $(D ai) nonzero, returns infinity. (Otherwise,\nif $(D ai == 0 && bi == 0), the term $(D ai * log(ai / bi)) is\nconsidered zero.) If the inputs are normalized, the result is\npositive.\nExample:\n\n---\ndouble[] p = [ 0.0, 0, 0, 1 ];\nassert(kullbackLeiblerDivergence(p, p) == 0);\ndouble[] p1 = [ 0.25, 0.25, 0.25, 0.25 ];\nassert(kullbackLeiblerDivergence(p1, p1) == 0);\nassert(kullbackLeiblerDivergence(p, p1) == 2);\nassert(kullbackLeiblerDivergence(p1, p) == double.infinity);\ndouble[] p2 = [ 0.2, 0.2, 0.2, 0.4 ];\nassert(approxEqual(kullbackLeiblerDivergence(p1, p2), 0.0719281));\nassert(approxEqual(kullbackLeiblerDivergence(p2, p1), 0.0780719));\n\n---\n",
				"name": "kullbackLeiblerDivergence"
			},
			{
				"kind": "template",
				"line": 1804,
				"constraint": "isInputRange!Range1 && isInputRange!Range2 && is(CommonType!(ElementType!Range1, ElementType!Range2))",
				"members": [
					{
						"kind": "function",
						"line": 1804,
						"endchar": 1,
						"char": 1,
						"type": "CommonType!(ElementType!Range1, ElementType!Range2)(Range1 a, Range2 b)",
						"parameters": [
							{
								"type": "Range1",
								"name": "a"
							},
							{
								"type": "Range2",
								"name": "b"
							}
						],
						"name": "jensenShannonDivergence",
						"endline": 1827
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "Range1"
					},
					{
						"kind": "type",
						"name": "Range2"
					}
				],
				"comment": "Computes the $(LUCKY Jensen-Shannon divergence) between $(D a) and $(D\nb), which is the sum $(D (ai * log(2 * ai / (ai + bi)) + bi * log(2 *\nbi / (ai + bi))) / 2). The base of logarithm is 2. The ranges are\nassumed to contain elements in $(D [0, 1]). Usually the ranges are\nnormalized probability distributions, but this is not required or\nchecked by $(D jensenShannonDivergence). If the inputs are normalized,\nthe result is bounded within $(D [0, 1]). The three-parameter version\nstops evaluations as soon as the intermediate result is greater than\nor equal to $(D limit).\nExample:\n\n---\ndouble[] p = [ 0.0, 0, 0, 1 ];\nassert(jensenShannonDivergence(p, p) == 0);\ndouble[] p1 = [ 0.25, 0.25, 0.25, 0.25 ];\nassert(jensenShannonDivergence(p1, p1) == 0);\nassert(approxEqual(jensenShannonDivergence(p1, p), 0.548795));\ndouble[] p2 = [ 0.2, 0.2, 0.2, 0.4 ];\nassert(approxEqual(jensenShannonDivergence(p1, p2), 0.0186218));\nassert(approxEqual(jensenShannonDivergence(p2, p1), 0.0186218));\nassert(approxEqual(jensenShannonDivergence(p2, p1, 0.005), 0.00602366));\n\n---\n",
				"name": "jensenShannonDivergence"
			},
			{
				"kind": "template",
				"line": 1831,
				"constraint": "isInputRange!Range1 && isInputRange!Range2 && is(typeof(CommonType!(ElementType!Range1, ElementType!Range2).init >= F.init) : bool)",
				"members": [
					{
						"kind": "function",
						"line": 1831,
						"endchar": 1,
						"char": 1,
						"type": "CommonType!(ElementType!Range1, ElementType!Range2)(Range1 a, Range2 b, F limit)",
						"parameters": [
							{
								"type": "Range1",
								"name": "a"
							},
							{
								"type": "Range2",
								"name": "b"
							},
							{
								"type": "F",
								"name": "limit"
							}
						],
						"name": "jensenShannonDivergence",
						"endline": 1857
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "Range1"
					},
					{
						"kind": "type",
						"name": "Range2"
					},
					{
						"kind": "type",
						"name": "F"
					}
				],
				"comment": "Ditto\n",
				"name": "jensenShannonDivergence"
			},
			{
				"kind": "template",
				"line": 1944,
				"constraint": "isRandomAccessRange!R1 && hasLength!R1 && isRandomAccessRange!R2 && hasLength!R2",
				"members": [
					{
						"kind": "function",
						"line": 1944,
						"endchar": 1,
						"char": 3,
						"type": "F(R1 s, R2 t, F lambda)",
						"parameters": [
							{
								"type": "R1",
								"name": "s"
							},
							{
								"type": "R2",
								"name": "t"
							},
							{
								"type": "F",
								"name": "lambda"
							}
						],
						"name": "gapWeightedSimilarity",
						"endline": 1988
					}
				],
				"char": 3,
				"parameters": [
					{
						"kind": "alias",
						"name": "comp",
						"defaultAlias": "\"a == b\""
					},
					{
						"kind": "type",
						"name": "R1"
					},
					{
						"kind": "type",
						"name": "R2"
					},
					{
						"kind": "type",
						"name": "F"
					}
				],
				"comment": "The so-called \"all-lengths gap-weighted string kernel\" computes a\nsimilarity measure between $(D s) and $(D t) based on all of their\ncommon subsequences of all lengths. Gapped subsequences are also\nincluded.\n\nTo understand what $(D gapWeightedSimilarity(s, t, lambda)) computes,\nconsider first the case $(D lambda = 1) and the strings $(D s =\n[\"Hello\", \"brave\", \"new\", \"world\"]) and $(D t = [\"Hello\", \"new\",\n\"world\"]). In that case, $(D gapWeightedSimilarity) counts the\nfollowing matches:\n\n$(OL $(LI three matches of length 1, namely $(D \"Hello\"), $(D \"new\"),\nand $(D \"world\");) $(LI three matches of length 2, namely ($(D\n\"Hello\", \"new\")), ($(D \"Hello\", \"world\")), and ($(D \"new\", \"world\"));)\n$(LI one match of length 3, namely ($(D \"Hello\", \"new\", \"world\")).))\n\nThe call $(D gapWeightedSimilarity(s, t, 1)) simply counts all of\nthese matches and adds them up, returning 7.\n\n----\nstring[] s = [\"Hello\", \"brave\", \"new\", \"world\"];\nstring[] t = [\"Hello\", \"new\", \"world\"];\nassert(gapWeightedSimilarity(s, t, 1) == 7);\n----\n\nNote how the gaps in matching are simply ignored, for example ($(D\n\"Hello\", \"new\")) is deemed as good a match as ($(D \"new\",\n\"world\")). This may be too permissive for some applications. To\neliminate gapped matches entirely, use $(D lambda = 0):\n\n----\nstring[] s = [\"Hello\", \"brave\", \"new\", \"world\"];\nstring[] t = [\"Hello\", \"new\", \"world\"];\nassert(gapWeightedSimilarity(s, t, 0) == 4);\n----\n\nThe call above eliminated the gapped matches ($(D \"Hello\", \"new\")),\n($(D \"Hello\", \"world\")), and ($(D \"Hello\", \"new\", \"world\")) from the\ntally. That leaves only 4 matches.\n\nThe most interesting case is when gapped matches still participate in\nthe result, but not as strongly as ungapped matches. The result will\nbe a smooth, fine-grained similarity measure between the input\nstrings. This is where values of $(D lambda) between 0 and 1 enter\ninto play: gapped matches are $(I exponentially penalized with the\nnumber of gaps) with base $(D lambda). This means that an ungapped\nmatch adds 1 to the return value; a match with one gap in either\nstring adds $(D lambda) to the return value; ...; a match with a total\nof $(D n) gaps in both strings adds $(D pow(lambda, n)) to the return\nvalue. In the example above, we have 4 matches without gaps, 2 matches\nwith one gap, and 1 match with three gaps. The latter match is ($(D\n\"Hello\", \"world\")), which has two gaps in the first string and one gap\nin the second string, totaling to three gaps. Summing these up we get\n$(D 4 + 2 * lambda + pow(lambda, 3)).\n\n----\nstring[] s = [\"Hello\", \"brave\", \"new\", \"world\"];\nstring[] t = [\"Hello\", \"new\", \"world\"];\nassert(gapWeightedSimilarity(s, t, 0.5) == 4 + 0.5 * 2 + 0.125);\n----\n\n$(D gapWeightedSimilarity) is useful wherever a smooth similarity\nmeasure between sequences allowing for approximate matches is\nneeded. The examples above are given with words, but any sequences\nwith elements comparable for equality are allowed, e.g. characters or\nnumbers. $(D gapWeightedSimilarity) uses a highly optimized dynamic\nprogramming implementation that needs $(D 16 * min(s.length,\nt.length)) extra bytes of memory and $(BIGOH s.length * t.length) time\nto complete.\n",
				"name": "gapWeightedSimilarity"
			},
			{
				"kind": "template",
				"line": 2021,
				"constraint": "isRandomAccessRange!R1 && hasLength!R1 && isRandomAccessRange!R2 && hasLength!R2",
				"members": [
					{
						"kind": "function",
						"line": 2021,
						"endchar": 1,
						"char": 1,
						"type": "Select!(isFloatingPoint!F, F, double)(R1 s, R2 t, F lambda, F sSelfSim = F.init, F tSelfSim = F.init)",
						"parameters": [
							{
								"type": "R1",
								"name": "s"
							},
							{
								"type": "R2",
								"name": "t"
							},
							{
								"type": "F",
								"name": "lambda"
							},
							{
								"default": "F.init",
								"type": "F",
								"name": "sSelfSim"
							},
							{
								"default": "F.init",
								"type": "F",
								"name": "tSelfSim"
							}
						],
						"name": "gapWeightedSimilarityNormalized",
						"endline": 2042
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "alias",
						"name": "comp",
						"defaultAlias": "\"a == b\""
					},
					{
						"kind": "type",
						"name": "R1"
					},
					{
						"kind": "type",
						"name": "R2"
					},
					{
						"kind": "type",
						"name": "F"
					}
				],
				"comment": "The similarity per $(D gapWeightedSimilarity) has an issue in that it\ngrows with the lengths of the two strings, even though the strings are\nnot actually very similar. For example, the range $(D [\"Hello\",\n\"world\"]) is increasingly similar with the range $(D [\"Hello\",\n\"world\", \"world\", \"world\",...]) as more instances of $(D \"world\") are\nappended. To prevent that, $(D gapWeightedSimilarityNormalized)\ncomputes a normalized version of the similarity that is computed as\n$(D gapWeightedSimilarity(s, t, lambda) /\nsqrt(gapWeightedSimilarity(s, t, lambda) * gapWeightedSimilarity(s, t,\nlambda))). The function $(D gapWeightedSimilarityNormalized) (a\nso-called normalized kernel) is bounded in $(D [0, 1]), reaches $(D 0)\nonly for ranges that don't match in any position, and $(D 1) only for\nidentical ranges.\n\nThe optional parameters $(D sSelfSim) and $(D tSelfSim) are meant for\navoiding duplicate computation. Many applications may have already\ncomputed $(D gapWeightedSimilarity(s, s, lambda)) and/or $(D\ngapWeightedSimilarity(t, t, lambda)). In that case, they can be passed\nas $(D sSelfSim) and $(D tSelfSim), respectively.\nExample:\n\n---\nstring[] s = [\"Hello\", \"brave\", \"new\", \"world\"];\nstring[] t = [\"Hello\", \"new\", \"world\"];\nassert(gapWeightedSimilarity(s, s, 1) == 15);\nassert(gapWeightedSimilarity(t, t, 1) == 7);\nassert(gapWeightedSimilarity(s, t, 1) == 7);\nassert(approxEqual(gapWeightedSimilarityNormalized(s, t, 1),\n                7.0 / sqrt(15.0 * 7), 0.01));\n\n---\n",
				"name": "gapWeightedSimilarityNormalized"
			},
			{
				"kind": "template",
				"line": 2069,
				"constraint": "isRandomAccessRange!Range && hasLength!Range",
				"members": [
					{
						"kind": "struct",
						"line": 2069,
						"members": [
							{
								"kind": "constructor",
								"line": 2087,
								"endchar": 5,
								"char": 5,
								"type": "(Range s, Range t, F lambda)",
								"parameters": [
									{
										"type": "Range",
										"name": "s"
									},
									{
										"type": "Range",
										"name": "t"
									},
									{
										"type": "F",
										"name": "lambda"
									}
								],
								"name": "this",
								"comment": "Constructs an object given two ranges $(D s) and $(D t) and a penalty\n$(D lambda). Constructor completes in $(BIGOH s.length * t.length)\ntime and computes all matches of length 1.\n",
								"endline": 2141
							},
							{
								"kind": "function",
								"line": 2146,
								"endchar": 5,
								"char": 42,
								"type": "ref GapWeightedSimilarityIncremental()",
								"name": "opSlice",
								"comment": "    Returns: $(D this).\n",
								"endline": 2149
							},
							{
								"kind": "function",
								"line": 2155,
								"endchar": 5,
								"char": 10,
								"type": "void()",
								"name": "popFront",
								"comment": "    Computes the match of the popFront length. Completes in $(BIGOH s.length *\n    t.length) time.\n",
								"endline": 2233
							},
							{
								"kind": "function",
								"line": 2239,
								"endchar": 48,
								"char": 17,
								"type": "@property F()",
								"name": "front",
								"comment": "    Returns: The gapped similarity at the current match length (initially\n    1, grows with each call to $(D popFront)).\n",
								"endline": 2239
							},
							{
								"kind": "function",
								"line": 2244,
								"endchar": 5,
								"char": 20,
								"type": "@property bool()",
								"name": "empty",
								"comment": "    Returns: Whether there are more matches.\n",
								"endline": 2253
							}
						],
						"char": 1,
						"name": "GapWeightedSimilarityIncremental"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "Range"
					},
					{
						"kind": "type",
						"defaultDeco": "d",
						"name": "F"
					}
				],
				"comment": "Similar to $(D gapWeightedSimilarity), just works in an incremental\nmanner by first revealing the matches of length 1, then gapped matches\nof length 2, and so on. The memory requirement is $(BIGOH s.length *\nt.length). The time complexity is $(BIGOH s.length * t.length) time\nfor computing each step. Continuing on the previous example:\n\nThe implementation is based on the pseudocode in Fig. 4 of the paper\n$(WEB jmlr.csail.mit.edu/papers/volume6/rousu05a/rousu05a.pdf,\n\"Efﬁcient Computation of Gapped Substring Kernels on Large Alphabets\")\nby Rousu et al., with additional algorithmic and systems-level\noptimizations.\nExample:\n\n---\nstring[] s = [\"Hello\", \"brave\", \"new\", \"world\"];\nstring[] t = [\"Hello\", \"new\", \"world\"];\nauto simIter = gapWeightedSimilarityIncremental(s, t, 1.0);\nassert(simIter.front == 3); // three 1-length matches\nsimIter.popFront();\nassert(simIter.front == 3); // three 2-length matches\nsimIter.popFront();\nassert(simIter.front == 1); // one 3-length match\nsimIter.popFront();\nassert(simIter.empty);     // no more match\n\n---\n",
				"name": "GapWeightedSimilarityIncremental"
			},
			{
				"kind": "template",
				"line": 2259,
				"members": [
					{
						"kind": "function",
						"line": 2259,
						"endchar": 1,
						"char": 41,
						"type": "GapWeightedSimilarityIncremental!(R, F)(R r1, R r2, F penalty)",
						"parameters": [
							{
								"type": "R",
								"name": "r1"
							},
							{
								"type": "R",
								"name": "r2"
							},
							{
								"type": "F",
								"name": "penalty"
							}
						],
						"name": "gapWeightedSimilarityIncremental",
						"endline": 2263
					}
				],
				"char": 41,
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					},
					{
						"kind": "type",
						"name": "F"
					}
				],
				"comment": "Ditto\n",
				"name": "gapWeightedSimilarityIncremental"
			},
			{
				"kind": "template",
				"line": 2354,
				"members": [
					{
						"kind": "function",
						"line": 2354,
						"endchar": 1,
						"char": 3,
						"type": "T(T a, T b)",
						"parameters": [
							{
								"type": "T",
								"name": "a"
							},
							{
								"type": "T",
								"name": "b"
							}
						],
						"name": "gcd",
						"endline": 2374
					}
				],
				"char": 3,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					}
				],
				"comment": "Computes the greatest common divisor of $(D a) and $(D b) by using\nEuclid's algorithm.\nExample:\n\n---\nassert(gcd(2 * 5 * 7 * 7, 5 * 7 * 11) == 5 * 7);\nconst int a = 5 * 13 * 23 * 23, b = 13 * 59;\nassert(gcd(a, b) == 13);\n\n---\n",
				"name": "gcd"
			},
			{
				"kind": "class",
				"line": 2401,
				"members": [
					{
						"kind": "constructor",
						"line": 2697,
						"deco": "FmZC3std7numeric3Fft",
						"endchar": 5,
						"char": 5,
						"parameters": [
							{
								"deco": "m",
								"name": "size"
							}
						],
						"name": "this",
						"comment": "Create an $(D Fft) object for computing fast Fourier transforms of\n power of two sizes of $(D size) or smaller.  $(D size) must be a\n power of two.\n",
						"originalType": "(size_t size)",
						"endline": 2703
					},
					{
						"kind": "template",
						"line": 2726,
						"constraint": "isFloatingPoint!F && isRandomAccessRange!R",
						"members": [
							{
								"kind": "function",
								"line": 2726,
								"endchar": 5,
								"char": 17,
								"type": "const Complex!F[](R range)",
								"parameters": [
									{
										"type": "R",
										"name": "range"
									}
								],
								"name": "fft",
								"endline": 2741
							}
						],
						"char": 17,
						"parameters": [
							{
								"kind": "type",
								"defaultDeco": "d",
								"name": "F"
							},
							{
								"kind": "type",
								"name": "R"
							}
						],
						"comment": "Compute the Fourier transform of range using the $(BIGOH N log N)\n Cooley-Tukey Algorithm.  $(D range) must be a random-access range with\n slicing and a length equal to $(D size) as provided at the construction of\n this object.  The contents of range can be either  numeric types,\n which will be interpreted as pure real values, or complex types with\n properties or members $(D .re) and $(D .im) that can be read.\n\n Note:  Pure real FFTs are automatically detected and the relevant\n        optimizations are performed.\n\n Returns:  An array of complex numbers representing the transformed data in\n           the frequency domain.\n\n Conventions: The exponent is negative and the factor is one,\n              i.e., output[j] := sum[ exp(-2 PI i j k / N) input[k] ].\n",
						"name": "fft"
					},
					{
						"kind": "template",
						"line": 2749,
						"constraint": "isRandomAccessRange!Ret && isComplexLike!(ElementType!Ret) && hasSlicing!Ret",
						"members": [
							{
								"kind": "function",
								"line": 2749,
								"endchar": 5,
								"char": 10,
								"type": "const void(R range, Ret buf)",
								"parameters": [
									{
										"type": "R",
										"name": "range"
									},
									{
										"type": "Ret",
										"name": "buf"
									}
								],
								"name": "fft",
								"endline": 2784
							}
						],
						"char": 10,
						"parameters": [
							{
								"kind": "type",
								"name": "Ret"
							},
							{
								"kind": "type",
								"name": "R"
							}
						],
						"comment": "Same as the overload, but allows for the results to be stored in a user-\n provided buffer.  The buffer must be of the same length as range, must be\n a random-access range, must have slicing, and must contain elements that are\n complex-like.  This means that they must have a .re and a .im member or\n property that can be both read and written and are floating point numbers.\n",
						"name": "fft"
					},
					{
						"kind": "template",
						"line": 2798,
						"constraint": "isRandomAccessRange!R && isComplexLike!(ElementType!R) && isFloatingPoint!F",
						"members": [
							{
								"kind": "function",
								"line": 2798,
								"endchar": 5,
								"char": 17,
								"type": "const Complex!F[](R range)",
								"parameters": [
									{
										"type": "R",
										"name": "range"
									}
								],
								"name": "inverseFft",
								"endline": 2813
							}
						],
						"char": 17,
						"parameters": [
							{
								"kind": "type",
								"defaultDeco": "d",
								"name": "F"
							},
							{
								"kind": "type",
								"name": "R"
							}
						],
						"comment": " Computes the inverse Fourier transform of a range.  The range must be a\n random access range with slicing, have a length equal to the size\n provided at construction of this object, and contain elements that are\n either of type std.complex.Complex or have essentially\n the same compile-time interface.\n\n Returns:  The time-domain signal.\n\n Conventions: The exponent is positive and the factor is 1/N, i.e.,\n              output[j] := (1 / N) sum[ exp(+2 PI i j k / N) input[k] ].\n",
						"name": "inverseFft"
					},
					{
						"kind": "template",
						"line": 2820,
						"constraint": "isRandomAccessRange!Ret && isComplexLike!(ElementType!Ret) && hasSlicing!Ret",
						"members": [
							{
								"kind": "function",
								"line": 2820,
								"endchar": 5,
								"char": 10,
								"type": "const void(R range, Ret buf)",
								"parameters": [
									{
										"type": "R",
										"name": "range"
									},
									{
										"type": "Ret",
										"name": "buf"
									}
								],
								"name": "inverseFft",
								"endline": 2835
							}
						],
						"char": 10,
						"parameters": [
							{
								"kind": "type",
								"name": "Ret"
							},
							{
								"kind": "type",
								"name": "R"
							}
						],
						"comment": " Inverse FFT that allows a user-supplied buffer to be provided.  The buffer\n must be a random access range with slicing, and its elements\n must be some complex-like type.\n",
						"name": "inverseFft"
					}
				],
				"char": 7,
				"name": "Fft",
				"comment": "A class for performing fast Fourier transforms of power of two sizes.\n This class encapsulates a large amount of state that is reusable when\n performing multiple FFTs of sizes smaller than or equal to that specified\n in the constructor.  This results in substantial speedups when performing\n multiple FFTs with a known maximum size.  However,\n a free function API is provided for convenience if you need to perform a\n one-off FFT.\n\n References:\n $(WEB en.wikipedia.org/wiki/Cooley%E2%80%93Tukey_FFT_algorithm)\n"
			},
			{
				"kind": "template",
				"line": 2862,
				"members": [
					{
						"kind": "function",
						"line": 2862,
						"endchar": 1,
						"char": 13,
						"type": "Complex!F[](R range)",
						"parameters": [
							{
								"type": "R",
								"name": "range"
							}
						],
						"name": "fft",
						"endline": 2866
					}
				],
				"char": 13,
				"parameters": [
					{
						"kind": "type",
						"defaultDeco": "d",
						"name": "F"
					},
					{
						"kind": "type",
						"name": "R"
					}
				],
				"comment": "Convenience functions that create an $(D Fft) object, run the FFT or inverse\n FFT and return the result.  Useful for one-off FFTs.\n\n Note:  In addition to convenience, these functions are slightly more\n        efficient than manually creating an Fft object for a single use,\n        as the Fft object is deterministically destroyed before these\n        functions return.\n",
				"name": "fft"
			},
			{
				"kind": "template",
				"line": 2869,
				"members": [
					{
						"kind": "function",
						"line": 2869,
						"endchar": 1,
						"char": 6,
						"type": "void(R range, Ret buf)",
						"parameters": [
							{
								"type": "R",
								"name": "range"
							},
							{
								"type": "Ret",
								"name": "buf"
							}
						],
						"name": "fft",
						"endline": 2873
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "Ret"
					},
					{
						"kind": "type",
						"name": "R"
					}
				],
				"comment": "ditto\n",
				"name": "fft"
			},
			{
				"kind": "template",
				"line": 2876,
				"members": [
					{
						"kind": "function",
						"line": 2876,
						"endchar": 1,
						"char": 13,
						"type": "Complex!F[](R range)",
						"parameters": [
							{
								"type": "R",
								"name": "range"
							}
						],
						"name": "inverseFft",
						"endline": 2880
					}
				],
				"char": 13,
				"parameters": [
					{
						"kind": "type",
						"defaultDeco": "d",
						"name": "F"
					},
					{
						"kind": "type",
						"name": "R"
					}
				],
				"comment": "ditto\n",
				"name": "inverseFft"
			},
			{
				"kind": "template",
				"line": 2883,
				"members": [
					{
						"kind": "function",
						"line": 2883,
						"endchar": 1,
						"char": 6,
						"type": "void(R range, Ret buf)",
						"parameters": [
							{
								"type": "R",
								"name": "range"
							},
							{
								"type": "Ret",
								"name": "buf"
							}
						],
						"name": "inverseFft",
						"endline": 2887
					}
				],
				"char": 6,
				"parameters": [
					{
						"kind": "type",
						"name": "Ret"
					},
					{
						"kind": "type",
						"name": "R"
					}
				],
				"comment": "ditto\n",
				"name": "inverseFft"
			}
		],
		"name": "std.numeric",
		"comment": "This module is a port of a growing fragment of the $(D_PARAM numeric)\nheader in Alexander Stepanov's $(LINK2 http://sgi.com/tech/stl,\nStandard Template Library), with a few additions.\n\nMacros:\n\nWIKI = Phobos/StdNumeric\n\nCopyright: Copyright Andrei Alexandrescu 2008 - 2009.\nLicense:   $(WEB www.boost.org/LICENSE_1_0.txt, Boost License 1.0).\nAuthors:   $(WEB erdani.org, Andrei Alexandrescu),\n                   Don Clugston, Robert Jacques\nSource:    $(PHOBOSSRC std/_numeric.d)\n"
	},
	{
		"kind": "module",
		"file": "../phobos/std/regex/package.d",
		"members": [
			{
				"kind": "template",
				"line": 288,
				"members": [
					{
						"kind": "alias",
						"line": 288,
						"char": 8,
						"type": "std.regex.internal.ir.Regex!Char",
						"name": "Regex"
					}
				],
				"char": 8,
				"parameters": [
					{
						"kind": "type",
						"name": "Char"
					}
				],
				"comment": "    $(D Regex) object holds regular expression pattern in compiled form.\n\n    Instances of this object are constructed via calls to $(D regex).\n    This is an intended form for caching and storage of frequently\n    used regular expressions.\n\n    Examples:\n\n    Test if this object doesn't contain any compiled pattern.\n    ---\n    Regex!char r;\n    assert(r.empty);\n    r = regex(\"\"); // Note: \"\" is a valid regex pattern.\n    assert(!r.empty);\n    ---\n\n    Getting a range of all the named captures in the regex.\n    ----\n    import std.range;\n    import std.algorithm;\n\n    auto re = regex(`(?P<name>\\w+) = (?P<var>\\d+)`);\n    auto nc = re.namedCaptures;\n    static assert(isRandomAccessRange!(typeof(nc)));\n    assert(!nc.empty);\n    assert(nc.length == 2);\n    assert(nc.equal([\"name\", \"var\"]));\n    assert(nc[0] == \"name\");\n    assert(nc[1..$].equal([\"var\"]));\n    ----\n",
				"name": "Regex"
			},
			{
				"kind": "template",
				"line": 297,
				"members": [
					{
						"kind": "alias",
						"line": 297,
						"char": 8,
						"type": "std.regex.internal.ir.StaticRegex!Char",
						"name": "StaticRegex"
					}
				],
				"char": 8,
				"parameters": [
					{
						"kind": "type",
						"name": "Char"
					}
				],
				"comment": "    A $(D StaticRegex) is $(D Regex) object that contains D code specially\n    generated at compile-time to speed up matching.\n\n    Implicitly convertible to normal $(D Regex),\n    however doing so will result in losing this additional capability.\n",
				"name": "StaticRegex"
			},
			{
				"kind": "template",
				"line": 310,
				"constraint": "isSomeString!S",
				"members": [
					{
						"kind": "function",
						"line": 310,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 22,
						"type": "@trusted (S pattern, const(char)[] flags = \"\")",
						"parameters": [
							{
								"type": "S",
								"name": "pattern"
							},
							{
								"default": "\"\"",
								"type": "const(char)[]",
								"name": "flags"
							}
						],
						"name": "regex",
						"endline": 318
					}
				],
				"char": 22,
				"parameters": [
					{
						"kind": "type",
						"name": "S"
					}
				],
				"comment": "    Compile regular expression pattern for the later execution.\n    Returns: $(D Regex) object that works on inputs having\n    the same character width as $(D pattern).\n\n    Params:\n    pattern = Regular expression\n    flags = The _attributes (g, i, m and x accepted)\n\n    Throws: $(D RegexException) if there were any errors during compilation.\n",
				"name": "regex"
			},
			{
				"kind": "template",
				"line": 355,
				"members": [
					{
						"kind": "variable",
						"line": 355,
						"init": "ctRegexImpl!(pattern, flags).nr",
						"storageClass": [
							"enum"
						],
						"char": 13,
						"name": "ctRegex"
					}
				],
				"char": 13,
				"parameters": [
					{
						"kind": "alias",
						"name": "pattern"
					},
					{
						"kind": "alias",
						"name": "flags",
						"defaultAlias": "[]"
					}
				],
				"comment": "    Compile regular expression using CTFE\n    and generate optimized native machine code for matching it.\n\n    Returns: StaticRegex object for faster matching.\n\n    Params:\n    pattern = Regular expression\n    flags = The _attributes (g, i, m and x accepted)\n",
				"name": "ctRegex"
			},
			{
				"kind": "template",
				"line": 367,
				"constraint": "isSomeString!R",
				"members": [
					{
						"kind": "struct",
						"line": 367,
						"members": [
							{
								"kind": "function",
								"line": 419,
								"endchar": 5,
								"char": 17,
								"type": "@property R()",
								"name": "pre",
								"comment": "Slice of input prior to the match.\n",
								"endline": 422
							},
							{
								"kind": "function",
								"line": 425,
								"endchar": 5,
								"char": 17,
								"type": "@property R()",
								"name": "post",
								"comment": "Slice of input immediately after the match.\n",
								"endline": 428
							},
							{
								"kind": "function",
								"line": 431,
								"endchar": 5,
								"char": 17,
								"type": "@property R()",
								"name": "hit",
								"comment": "Slice of matched portion of input.\n",
								"endline": 435
							},
							{
								"kind": "function",
								"line": 438,
								"endchar": 5,
								"char": 17,
								"type": "@property R()",
								"name": "front",
								"comment": "Range interface.\n",
								"endline": 442
							},
							{
								"kind": "function",
								"line": 445,
								"endchar": 5,
								"char": 17,
								"type": "@property R()",
								"name": "back",
								"comment": "ditto\n",
								"endline": 449
							},
							{
								"kind": "function",
								"line": 452,
								"endchar": 5,
								"char": 10,
								"type": "void()",
								"name": "popFront",
								"comment": "ditto\n",
								"endline": 456
							},
							{
								"kind": "function",
								"line": 459,
								"endchar": 5,
								"char": 10,
								"type": "void()",
								"name": "popBack",
								"comment": "ditto\n",
								"endline": 463
							},
							{
								"kind": "function",
								"line": 466,
								"endchar": 63,
								"char": 20,
								"type": "const @property bool()",
								"name": "empty",
								"comment": "ditto\n",
								"endline": 466
							},
							{
								"kind": "template",
								"line": 469,
								"members": [
									{
										"kind": "function",
										"line": 469,
										"endchar": 5,
										"char": 7,
										"type": "R(size_t i)",
										"parameters": [
											{
												"type": "size_t",
												"name": "i"
											}
										],
										"name": "opIndex",
										"endline": 475
									}
								],
								"char": 7,
								"parameters": [],
								"comment": "ditto\n",
								"name": "opIndex"
							},
							{
								"kind": "template",
								"line": 488,
								"members": [
									{
										"kind": "function",
										"line": 488,
										"endchar": 64,
										"char": 16,
										"type": "const nothrow @safe bool()",
										"name": "opCast",
										"endline": 488
									}
								],
								"char": 16,
								"parameters": [
									{
										"kind": "type",
										"deco": "b",
										"name": "T"
									}
								],
								"comment": "        Explicit cast to bool.\n        Useful as a shorthand for !(x.empty) in if and assert statements.\n\n        ---\n        import std.regex;\n\n        assert(!matchFirst(\"nothing\", \"something\"));\n        ---\n",
								"name": "opCast"
							},
							{
								"kind": "template",
								"line": 506,
								"constraint": "isSomeString!String",
								"members": [
									{
										"kind": "function",
										"line": 506,
										"endchar": 5,
										"char": 7,
										"type": "R(String i)",
										"parameters": [
											{
												"type": "String",
												"name": "i"
											}
										],
										"name": "opIndex",
										"endline": 511
									}
								],
								"char": 7,
								"parameters": [
									{
										"kind": "type",
										"name": "String"
									}
								],
								"comment": "        Lookup named submatch.\n\n        ---\n        import std.regex;\n        import std.range;\n\n        auto c = matchFirst(\"a = 42;\", regex(`(?P<var>\\w+)\\s*=\\s*(?P<value>\\d+);`));\n        assert(c[\"var\"] == \"a\");\n        assert(c[\"value\"] == \"42\");\n        popFrontN(c, 2);\n        //named groups are unaffected by range primitives\n        assert(c[\"var\"] ==\"a\");\n        assert(c.front == \"42\");\n        ----\n",
								"name": "opIndex"
							},
							{
								"kind": "function",
								"line": 514,
								"endchar": 69,
								"char": 22,
								"type": "const @property size_t()",
								"name": "length",
								"comment": "Number of matches in this object.\n",
								"endline": 514
							},
							{
								"kind": "function",
								"line": 517,
								"endchar": 44,
								"char": 19,
								"type": "@property ref ()",
								"name": "captures",
								"comment": "A hook for compatibility with original std.regex.\n",
								"endline": 517
							}
						],
						"char": 17,
						"name": "Captures"
					}
				],
				"char": 17,
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					},
					{
						"kind": "type",
						"default": "size_t",
						"name": "DIndex"
					}
				],
				"comment": "    $(D Captures) object contains submatches captured during a call\n    to $(D match) or iteration over $(D RegexMatch) range.\n\n    First element of range is the whole match.\nExample:\n\n---\nauto c = matchFirst(\"@abc#\", regex(`(\\w)(\\w)(\\w)`));\nassert(c.pre == \"@\"); // Part of input preceding match\nassert(c.post == \"#\"); // Immediately after match\nassert(c.hit == c[0] && c.hit == \"abc\"); // The whole match\nassert(c[2] == \"b\");\nassert(c.front == \"abc\");\nc.popFront();\nassert(c.front == \"a\");\nassert(c.back == \"c\");\nc.popBack();\nassert(c.back == \"b\");\npopFrontN(c, 2);\nassert(c.empty);\n\nassert(!matchFirst(\"nothing\", \"something\"));\n\n---\n",
				"name": "Captures"
			},
			{
				"kind": "template",
				"line": 549,
				"constraint": "isSomeString!R",
				"members": [
					{
						"kind": "struct",
						"line": 549,
						"members": [
							{
								"kind": "function",
								"line": 599,
								"endchar": 5,
								"char": 17,
								"type": "@property R()",
								"name": "pre",
								"comment": "Shorthands for front.pre, front.post, front.hit.\n",
								"endline": 602
							},
							{
								"kind": "function",
								"line": 605,
								"endchar": 5,
								"char": 17,
								"type": "@property R()",
								"name": "post",
								"comment": "ditto\n",
								"endline": 608
							},
							{
								"kind": "function",
								"line": 611,
								"endchar": 5,
								"char": 17,
								"type": "@property R()",
								"name": "hit",
								"comment": "ditto\n",
								"endline": 614
							},
							{
								"kind": "function",
								"line": 628,
								"storageClass": [
									"auto"
								],
								"endchar": 5,
								"char": 20,
								"type": "@property ()",
								"name": "front",
								"comment": "        Functionality for processing subsequent matches of global regexes via range interface:\n        ---\n        import std.regex;\n        auto m = matchAll(\"Hello, world!\", regex(`\\w+`));\n        assert(m.front.hit == \"Hello\");\n        m.popFront();\n        assert(m.front.hit == \"world\");\n        m.popFront();\n        assert(m.empty);\n        ---\n",
								"endline": 631
							},
							{
								"kind": "function",
								"line": 634,
								"endchar": 5,
								"char": 10,
								"type": "void()",
								"name": "popFront",
								"comment": "ditto\n",
								"endline": 648
							},
							{
								"kind": "function",
								"line": 651,
								"storageClass": [
									"auto"
								],
								"endchar": 31,
								"char": 10,
								"type": "()",
								"name": "save",
								"comment": "ditto\n",
								"endline": 651
							},
							{
								"kind": "function",
								"line": 654,
								"endchar": 54,
								"char": 20,
								"type": "@property bool()",
								"name": "empty",
								"comment": "Test if this match object is empty.\n",
								"endline": 654
							},
							{
								"kind": "template",
								"line": 657,
								"members": [
									{
										"kind": "function",
										"line": 657,
										"endchar": 40,
										"char": 7,
										"type": "T()",
										"name": "opCast",
										"endline": 657
									}
								],
								"char": 7,
								"parameters": [
									{
										"kind": "type",
										"deco": "b",
										"name": "T"
									}
								],
								"comment": "Same as !(x.empty), provided for its convenience  in conditional statements.\n",
								"name": "opCast"
							},
							{
								"kind": "function",
								"line": 660,
								"storageClass": [
									"auto"
								],
								"endchar": 50,
								"char": 20,
								"type": "@property ()",
								"name": "captures",
								"comment": "Same as .front, provided for compatibility with original std.regex.\n",
								"endline": 660
							}
						],
						"char": 17,
						"name": "RegexMatch"
					}
				],
				"char": 17,
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					},
					{
						"kind": "alias",
						"name": "Engine",
						"defaultAlias": "ThompsonMatcher"
					}
				],
				"comment": "    A regex engine state, as returned by $(D match) family of functions.\n\n    Effectively it's a forward range of Captures!R, produced\n    by lazily searching for matches in a given input.\n\n    $(D alias Engine) specifies an engine type to use during matching,\n    and is automatically deduced in a call to $(D match)/$(D bmatch).\n",
				"name": "RegexMatch"
			},
			{
				"kind": "template",
				"line": 776,
				"constraint": "isSomeString!R && is(RegEx == Regex!(BasicElementOf!R))",
				"members": [
					{
						"kind": "function",
						"line": 776,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 13,
						"type": "(R input, RegEx re)",
						"parameters": [
							{
								"type": "R",
								"name": "input"
							},
							{
								"type": "RegEx",
								"name": "re"
							}
						],
						"name": "match",
						"endline": 781
					}
				],
				"char": 13,
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					},
					{
						"kind": "type",
						"name": "RegEx"
					}
				],
				"comment": "    Start matching $(D input) to regex pattern $(D re),\n    using Thompson NFA matching scheme.\n\n    The use of this function is $(RED discouraged) - use either of\n    $(LREF matchAll) or $(LREF matchFirst).\n\n    Delegating  the kind of operation\n    to \"g\" flag is soon to be phased out along with the\n    ability to choose the exact matching scheme. The choice of\n    matching scheme to use depends highly on the pattern kind and\n    can done automatically on case by case basis.\n\n    Returns: a $(D RegexMatch) object holding engine state after first match.\n",
				"name": "match"
			},
			{
				"kind": "template",
				"line": 784,
				"constraint": "isSomeString!R && isSomeString!String",
				"members": [
					{
						"kind": "function",
						"line": 784,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 13,
						"type": "(R input, String re)",
						"parameters": [
							{
								"type": "R",
								"name": "input"
							},
							{
								"type": "String",
								"name": "re"
							}
						],
						"name": "match",
						"endline": 789
					}
				],
				"char": 13,
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					},
					{
						"kind": "type",
						"name": "String"
					}
				],
				"comment": "ditto\n",
				"name": "match"
			},
			{
				"kind": "template",
				"line": 816,
				"constraint": "isSomeString!R && is(RegEx == Regex!(BasicElementOf!R))",
				"members": [
					{
						"kind": "function",
						"line": 816,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 13,
						"type": "(R input, RegEx re)",
						"parameters": [
							{
								"type": "R",
								"name": "input"
							},
							{
								"type": "RegEx",
								"name": "re"
							}
						],
						"name": "matchFirst",
						"endline": 821
					}
				],
				"char": 13,
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					},
					{
						"kind": "type",
						"name": "RegEx"
					}
				],
				"comment": "    Find the first (leftmost) slice of the $(D input) that\n    matches the pattern $(D re). This function picks the most suitable\n    regular expression engine depending on the pattern properties.\n\n    $(D re) parameter can be one of three types:\n    $(UL\n      $(LI Plain string, in which case it's compiled to bytecode before matching. )\n      $(LI Regex!char (wchar/dchar) that contains a pattern in the form of\n        compiled  bytecode. )\n      $(LI StaticRegex!char (wchar/dchar) that contains a pattern in the form of\n        compiled native machine code. )\n    )\n\n    Returns:\n    $(LREF Captures) containing the extent of a match together with all submatches\n    if there was a match, otherwise an empty $(LREF Captures) object.\n",
				"name": "matchFirst"
			},
			{
				"kind": "template",
				"line": 824,
				"constraint": "isSomeString!R && isSomeString!String",
				"members": [
					{
						"kind": "function",
						"line": 824,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 13,
						"type": "(R input, String re)",
						"parameters": [
							{
								"type": "R",
								"name": "input"
							},
							{
								"type": "String",
								"name": "re"
							}
						],
						"name": "matchFirst",
						"endline": 829
					}
				],
				"char": 13,
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					},
					{
						"kind": "type",
						"name": "String"
					}
				],
				"comment": "ditto\n",
				"name": "matchFirst"
			},
			{
				"kind": "template",
				"line": 859,
				"constraint": "isSomeString!R && is(RegEx == Regex!(BasicElementOf!R))",
				"members": [
					{
						"kind": "function",
						"line": 859,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 13,
						"type": "(R input, RegEx re)",
						"parameters": [
							{
								"type": "R",
								"name": "input"
							},
							{
								"type": "RegEx",
								"name": "re"
							}
						],
						"name": "matchAll",
						"endline": 864
					}
				],
				"char": 13,
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					},
					{
						"kind": "type",
						"name": "RegEx"
					}
				],
				"comment": "    Initiate a search for all non-overlapping matches to the pattern $(D re)\n    in the given $(D input). The result is a lazy range of matches generated\n    as they are encountered in the input going left to right.\n\n    This function picks the most suitable regular expression engine\n    depending on the pattern properties.\n\n    $(D re) parameter can be one of three types:\n    $(UL\n      $(LI Plain string, in which case it's compiled to bytecode before matching. )\n      $(LI Regex!char (wchar/dchar) that contains a pattern in the form of\n        compiled  bytecode. )\n      $(LI StaticRegex!char (wchar/dchar) that contains a pattern in the form of\n        compiled native machine code. )\n    )\n\n    Returns:\n    $(LREF RegexMatch) object that represents matcher state\n    after the first match was found or an empty one if not present.\n",
				"name": "matchAll"
			},
			{
				"kind": "template",
				"line": 867,
				"constraint": "isSomeString!R && isSomeString!String",
				"members": [
					{
						"kind": "function",
						"line": 867,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 13,
						"type": "(R input, String re)",
						"parameters": [
							{
								"type": "R",
								"name": "input"
							},
							{
								"type": "String",
								"name": "re"
							}
						],
						"name": "matchAll",
						"endline": 872
					}
				],
				"char": 13,
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					},
					{
						"kind": "type",
						"name": "String"
					}
				],
				"comment": "ditto\n",
				"name": "matchAll"
			},
			{
				"kind": "template",
				"line": 939,
				"constraint": "isSomeString!R && is(RegEx == Regex!(BasicElementOf!R))",
				"members": [
					{
						"kind": "function",
						"line": 939,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 13,
						"type": "(R input, RegEx re)",
						"parameters": [
							{
								"type": "R",
								"name": "input"
							},
							{
								"type": "RegEx",
								"name": "re"
							}
						],
						"name": "bmatch",
						"endline": 944
					}
				],
				"char": 13,
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					},
					{
						"kind": "type",
						"name": "RegEx"
					}
				],
				"comment": "    Start matching of $(D input) to regex pattern $(D re),\n    using traditional $(LUCKY backtracking) matching scheme.\n\n    The use of this function is $(RED discouraged) - use either of\n    $(LREF matchAll) or $(LREF matchFirst).\n\n    Delegating  the kind of operation\n    to \"g\" flag is soon to be phased out along with the\n    ability to choose the exact matching scheme. The choice of\n    matching scheme to use depends highly on the pattern kind and\n    can done automatically on case by case basis.\n\n    Returns: a $(D RegexMatch) object holding engine\n    state after first match.\n\n",
				"name": "bmatch"
			},
			{
				"kind": "template",
				"line": 947,
				"constraint": "isSomeString!R && isSomeString!String",
				"members": [
					{
						"kind": "function",
						"line": 947,
						"storageClass": [
							"auto"
						],
						"endchar": 1,
						"char": 13,
						"type": "(R input, String re)",
						"parameters": [
							{
								"type": "R",
								"name": "input"
							},
							{
								"type": "String",
								"name": "re"
							}
						],
						"name": "bmatch",
						"endline": 952
					}
				],
				"char": 13,
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					},
					{
						"kind": "type",
						"name": "String"
					}
				],
				"comment": "ditto\n",
				"name": "bmatch"
			},
			{
				"kind": "template",
				"line": 1053,
				"constraint": "isSomeString!R && is(C : dchar) && isRegexFor!(RegEx, R)",
				"members": [
					{
						"kind": "function",
						"line": 1053,
						"endchar": 1,
						"char": 10,
						"type": "R(R input, RegEx re, const(C)[] format)",
						"parameters": [
							{
								"type": "R",
								"name": "input"
							},
							{
								"type": "RegEx",
								"name": "re"
							},
							{
								"type": "const(C)[]",
								"name": "format"
							}
						],
						"name": "replaceFirst",
						"endline": 1057
					}
				],
				"char": 10,
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					},
					{
						"kind": "type",
						"name": "C"
					},
					{
						"kind": "type",
						"name": "RegEx"
					}
				],
				"comment": "    Construct a new string from $(D input) by replacing the first match with\n    a string generated from it according to the $(D format) specifier.\n\n    To replace all matches use $(LREF replaceAll).\n\n    Params:\n    input = string to search\n    re = compiled regular expression to use\n    format = format string to generate replacements from,\n    see $(S_LINK Replace format string, the format string).\n\n    Returns:\n    A string of the same type with the first match (if any) replaced.\n    If no match is found returns the input string itself.\n\n    Example:\n    ---\n    assert(replaceFirst(\"noon\", regex(\"n\"), \"[$&]\") == \"[n]oon\");\n    ---\n",
				"name": "replaceFirst"
			},
			{
				"kind": "template",
				"line": 1082,
				"constraint": "isSomeString!R && isRegexFor!(RegEx, R)",
				"members": [
					{
						"kind": "function",
						"line": 1082,
						"endchar": 1,
						"char": 10,
						"type": "R(R input, RegEx re)",
						"parameters": [
							{
								"type": "R",
								"name": "input"
							},
							{
								"type": "RegEx",
								"name": "re"
							}
						],
						"name": "replaceFirst",
						"endline": 1086
					}
				],
				"char": 10,
				"parameters": [
					{
						"kind": "alias",
						"name": "fun"
					},
					{
						"kind": "type",
						"name": "R"
					},
					{
						"kind": "type",
						"name": "RegEx"
					}
				],
				"comment": "    This is a general replacement tool that construct a new string by replacing\n    matches of pattern $(D re) in the $(D input). Unlike the other overload\n    there is no format string instead captures are passed to\n    to a user-defined functor $(D fun) that returns a new string\n    to use as replacement.\n\n    This version replaces the first match in $(D input),\n    see $(LREF replaceAll) to replace the all of the matches.\n\n    Returns:\n    A new string of the same type as $(D input) with all matches\n    replaced by return values of $(D fun). If no matches found\n    returns the $(D input) itself.\n\n    Example:\n    ---\n    string list = \"#21 out of 46\";\n    string newList = replaceFirst!(cap => to!string(to!int(cap.hit)+1))\n        (list, regex(`[0-9]+`));\n    assert(newList == \"#22 out of 46\");\n    ---\n",
				"name": "replaceFirst"
			},
			{
				"kind": "template",
				"line": 1109,
				"constraint": "isOutputRange!(Sink, dchar) && isSomeString!R && is(C : dchar) && isRegexFor!(RegEx, R)",
				"members": [
					{
						"kind": "function",
						"line": 1109,
						"endchar": 5,
						"char": 22,
						"type": "@trusted void(ref Sink sink, R input, RegEx re, const(C)[] format)",
						"parameters": [
							{
								"storageClass": [
									"ref"
								],
								"type": "Sink",
								"name": "sink"
							},
							{
								"type": "R",
								"name": "input"
							},
							{
								"type": "RegEx",
								"name": "re"
							},
							{
								"type": "const(C)[]",
								"name": "format"
							}
						],
						"name": "replaceFirstInto",
						"endline": 1116
					}
				],
				"char": 22,
				"parameters": [
					{
						"kind": "type",
						"name": "Sink"
					},
					{
						"kind": "type",
						"name": "R"
					},
					{
						"kind": "type",
						"name": "C"
					},
					{
						"kind": "type",
						"name": "RegEx"
					}
				],
				"comment": "    A variation on $(LREF replaceFirst) that instead of allocating a new string\n    on each call outputs the result piece-wise to the $(D sink). In particular\n    this enables efficient construction of a final output incrementally.\n\n    Like in $(LREF replaceFirst) family of functions there is an overload\n    for the substitution guided by the $(D format) string\n    and the one with the user defined callback.\n\n    Example:\n    ---\n    import std.array;\n    string m1 = \"first message\\n\";\n    string m2 = \"second message\\n\";\n    auto result = appender!string();\n    replaceFirstInto(result, m1, regex(`([a-z]+) message`), \"$1\");\n    //equivalent of the above with user-defined callback\n    replaceFirstInto!(cap=>cap[1])(result, m2, regex(`([a-z]+) message`));\n    assert(result.data == \"first\\nsecond\\n\");\n    ---\n",
				"name": "replaceFirstInto"
			},
			{
				"kind": "template",
				"line": 1119,
				"constraint": "isOutputRange!(Sink, dchar) && isSomeString!R && isRegexFor!(RegEx, R)",
				"members": [
					{
						"kind": "function",
						"line": 1119,
						"endchar": 1,
						"char": 22,
						"type": "@trusted void(Sink sink, R input, RegEx re)",
						"parameters": [
							{
								"type": "Sink",
								"name": "sink"
							},
							{
								"type": "R",
								"name": "input"
							},
							{
								"type": "RegEx",
								"name": "re"
							}
						],
						"name": "replaceFirstInto",
						"endline": 1124
					}
				],
				"char": 22,
				"parameters": [
					{
						"kind": "alias",
						"name": "fun"
					},
					{
						"kind": "type",
						"name": "Sink"
					},
					{
						"kind": "type",
						"name": "R"
					},
					{
						"kind": "type",
						"name": "RegEx"
					}
				],
				"comment": "ditto\n",
				"name": "replaceFirstInto"
			},
			{
				"kind": "template",
				"line": 1169,
				"constraint": "isSomeString!R && is(C : dchar) && isRegexFor!(RegEx, R)",
				"members": [
					{
						"kind": "function",
						"line": 1169,
						"endchar": 1,
						"char": 19,
						"type": "@trusted R(R input, RegEx re, const(C)[] format)",
						"parameters": [
							{
								"type": "R",
								"name": "input"
							},
							{
								"type": "RegEx",
								"name": "re"
							},
							{
								"type": "const(C)[]",
								"name": "format"
							}
						],
						"name": "replaceAll",
						"endline": 1173
					}
				],
				"char": 19,
				"parameters": [
					{
						"kind": "type",
						"name": "R"
					},
					{
						"kind": "type",
						"name": "C"
					},
					{
						"kind": "type",
						"name": "RegEx"
					}
				],
				"comment": "    Construct a new string from $(D input) by replacing all of the\n    fragments that match a pattern $(D re) with a string generated\n    from the match according to the $(D format) specifier.\n\n    To replace only the first match use $(LREF replaceFirst).\n\n    Params:\n    input = string to search\n    re = compiled regular expression to use\n    format = format string to generate replacements from,\n    see $(S_LINK Replace format string, the format string).\n\n    Returns:\n    A string of the same type as $(D input) with the all\n    of the matches (if any) replaced.\n    If no match is found returns the input string itself.\n\n    Example:\n    ---\n    // Comify a number\n    auto com = regex(r\"(?<=\\d)(?=(\\d\\d\\d)+\\b)\",\"g\");\n    assert(replaceAll(\"12000 + 42100 = 54100\", com, \",\") == \"12,000 + 42,100 = 54,100\");\n    ---\n",
				"name": "replaceAll"
			},
			{
				"kind": "template",
				"line": 1207,
				"constraint": "isSomeString!R && isRegexFor!(RegEx, R)",
				"members": [
					{
						"kind": "function",
						"line": 1207,
						"endchar": 1,
						"char": 19,
						"type": "@trusted R(R input, RegEx re)",
						"parameters": [
							{
								"type": "R",
								"name": "input"
							},
							{
								"type": "RegEx",
								"name": "re"
							}
						],
						"name": "replaceAll",
						"endline": 1211
					}
				],
				"char": 19,
				"parameters": [
					{
						"kind": "alias",
						"name": "fun"
					},
					{
						"kind": "type",
						"name": "R"
					},
					{
						"kind": "type",
						"name": "RegEx"
					}
				],
				"comment": "    This is a general replacement tool that construct a new string by replacing\n    matches of pattern $(D re) in the $(D input). Unlike the other overload\n    there is no format string instead captures are passed to\n    to a user-defined functor $(D fun) that returns a new string\n    to use as replacement.\n\n    This version replaces all of the matches found in $(D input),\n    see $(LREF replaceFirst) to replace the first match only.\n\n    Returns:\n    A new string of the same type as $(D input) with all matches\n    replaced by return values of $(D fun). If no matches found\n    returns the $(D input) itself.\n\n    Params:\n    input = string to search\n    re = compiled regular expression\n    fun = delegate to use\n\n    Example:\n    Capitalize the letters 'a' and 'r':\n    ---\n    string baz(Captures!(string) m)\n    {\n        return std.string.toUpper(m.hit);\n    }\n    auto s = replaceAll!(baz)(\"Strap a rocket engine on a chicken.\",\n            regex(\"[ar]\"));\n    assert(s == \"StRAp A Rocket engine on A chicken.\");\n    ---\n",
				"name": "replaceAll"
			},
			{
				"kind": "template",
				"line": 1234,
				"constraint": "isOutputRange!(Sink, dchar) && isSomeString!R && is(C : dchar) && isRegexFor!(RegEx, R)",
				"members": [
					{
						"kind": "function",
						"line": 1234,
						"endchar": 5,
						"char": 22,
						"type": "@trusted void(Sink sink, R input, RegEx re, const(C)[] format)",
						"parameters": [
							{
								"type": "Sink",
								"name": "sink"
							},
							{
								"type": "R",
								"name": "input"
							},
							{
								"type": "RegEx",
								"name": "re"
							},
							{
								"type": "const(C)[]",
								"name": "format"
							}
						],
						"name": "replaceAllInto",
						"endline": 1241
					}
				],
				"char": 22,
				"parameters": [
					{
						"kind": "type",
						"name": "Sink"
					},
					{
						"kind": "type",
						"name": "R"
					},
					{
						"kind": "type",
						"name": "C"
					},
					{
						"kind": "type",
						"name": "RegEx"
					}
				],
				"comment": "    A variation on $(LREF replaceAll) that instead of allocating a new string\n    on each call outputs the result piece-wise to the $(D sink). In particular\n    this enables efficient construction of a final output incrementally.\n\n    As with $(LREF replaceAll) there are 2 overloads - one with a format string,\n    the other one with a user defined functor.\n\n    Example:\n    ---\n    //swap all 3 letter words and bring it back\n    string text = \"How are you doing?\";\n    auto sink = appender!(char[])();\n    replaceAllInto!(cap => retro(cap[0]))(sink, text, regex(`\\b\\w{3}\\b`));\n    auto swapped = sink.data.dup; // make a copy explicitly\n    assert(swapped == \"woH era uoy doing?\");\n    sink.clear();\n    replaceAllInto!(cap => retro(cap[0]))(sink, swapped, regex(`\\b\\w{3}\\b`));\n    assert(sink.data == text);\n    ---\n",
				"name": "replaceAllInto"
			},
			{
				"kind": "template",
				"line": 1244,
				"constraint": "isOutputRange!(Sink, dchar) && isSomeString!R && isRegexFor!(RegEx, R)",
				"members": [
					{
						"kind": "function",
						"line": 1244,
						"endchar": 1,
						"char": 22,
						"type": "@trusted void(Sink sink, R input, RegEx re)",
						"parameters": [
							{
								"type": "Sink",
								"name": "sink"
							},
							{
								"type": "R",
								"name": "input"
							},
							{
								"type": "RegEx",
								"name": "re"
							}
						],
						"name": "replaceAllInto",
						"endline": 1249
					}
				],
				"char": 22,
				"parameters": [
					{
						"kind": "alias",
						"name": "fun"
					},
					{
						"kind": "type",
						"name": "Sink"
					},
					{
						"kind": "type",
						"name": "R"
					},
					{
						"kind": "type",
						"name": "RegEx"
					}
				],
				"comment": "ditto\n",
				"name": "replaceAllInto"
			},
			{
				"kind": "template",
				"line": 1313,
				"constraint": "isSomeString!R && isRegexFor!(RegEx, R)",
				"members": [
					{
						"kind": "function",
						"line": 1313,
						"endchar": 1,
						"char": 10,
						"type": "R(R input, RegEx re, const(C)[] format)",
						"parameters": [
							{
								"type": "R",
								"name": "input"
							},
							{
								"type": "RegEx",
								"name": "re"
							},
							{
								"type": "const(C)[]",
								"name": "format"
							}
						],
						"name": "replace",
						"endline": 1317
					}
				],
				"char": 10,
				"parameters": [
					{
						"kind": "alias",
						"name": "scheme",
						"defaultAlias": "match"
					},
					{
						"kind": "type",
						"name": "R"
					},
					{
						"kind": "type",
						"name": "C"
					},
					{
						"kind": "type",
						"name": "RegEx"
					}
				],
				"comment": "    Old API for replacement, operation depends on flags of pattern $(D re).\n    With \"g\" flag it performs the equivalent of $(LREF replaceAll) otherwise it\n    works the same as $(LREF replaceFirst).\n\n    The use of this function is $(RED discouraged), please use $(LREF replaceAll)\n    or $(LREF replaceFirst) explicitly.\n",
				"name": "replace"
			},
			{
				"kind": "template",
				"line": 1320,
				"constraint": "isSomeString!R && isRegexFor!(RegEx, R)",
				"members": [
					{
						"kind": "function",
						"line": 1320,
						"endchar": 1,
						"char": 10,
						"type": "R(R input, RegEx re)",
						"parameters": [
							{
								"type": "R",
								"name": "input"
							},
							{
								"type": "RegEx",
								"name": "re"
							}
						],
						"name": "replace",
						"endline": 1324
					}
				],
				"char": 10,
				"parameters": [
					{
						"kind": "alias",
						"name": "fun"
					},
					{
						"kind": "type",
						"name": "R"
					},
					{
						"kind": "type",
						"name": "RegEx"
					}
				],
				"comment": "ditto\n",
				"name": "replace"
			},
			{
				"kind": "template",
				"line": 1337,
				"constraint": "isSomeString!Range && isRegexFor!(RegEx, Range)",
				"members": [
					{
						"kind": "struct",
						"line": 1337,
						"members": [
							{
								"kind": "function",
								"line": 1368,
								"endchar": 5,
								"char": 21,
								"type": "@property Range()",
								"name": "front",
								"comment": "Forward range primitives.\n",
								"endline": 1375
							},
							{
								"kind": "function",
								"line": 1378,
								"endchar": 5,
								"char": 20,
								"type": "@property bool()",
								"name": "empty",
								"comment": "ditto\n",
								"endline": 1381
							},
							{
								"kind": "function",
								"line": 1384,
								"endchar": 5,
								"char": 10,
								"type": "void()",
								"name": "popFront",
								"comment": "ditto\n",
								"endline": 1398
							},
							{
								"kind": "function",
								"line": 1401,
								"storageClass": [
									"auto"
								],
								"endchar": 5,
								"char": 20,
								"type": "@property ()",
								"name": "save",
								"comment": "ditto\n",
								"endline": 1404
							}
						],
						"char": 8,
						"name": "Splitter"
					}
				],
				"char": 8,
				"parameters": [
					{
						"kind": "type",
						"name": "Range"
					},
					{
						"kind": "alias",
						"name": "RegEx",
						"defaultAlias": "Regex"
					}
				],
				"comment": "Range that splits a string using a regular expression as a\nseparator.\n\nExample:\n----\nauto s1 = \", abc, de,  fg, hi, \";\nassert(equal(splitter(s1, regex(\", *\")),\n    [\"\", \"abc\", \"de\", \"fg\", \"hi\", \"\"]));\n----\n",
				"name": "Splitter"
			},
			{
				"kind": "template",
				"line": 1411,
				"constraint": "is(BasicElementOf!Range : dchar) && isRegexFor!(RegEx, Range)",
				"members": [
					{
						"kind": "function",
						"line": 1411,
						"endchar": 1,
						"char": 32,
						"type": "Splitter!(Range, RegEx)(Range r, RegEx pat)",
						"parameters": [
							{
								"type": "Range",
								"name": "r"
							},
							{
								"type": "RegEx",
								"name": "pat"
							}
						],
						"name": "splitter",
						"endline": 1415
					}
				],
				"char": 32,
				"parameters": [
					{
						"kind": "type",
						"name": "Range"
					},
					{
						"kind": "type",
						"name": "RegEx"
					}
				],
				"comment": "    A helper function, creates a $(D Splitter) on range $(D r) separated by regex $(D pat).\n    Captured subexpressions have no effect on the resulting range.\n",
				"name": "splitter"
			},
			{
				"kind": "template",
				"line": 1418,
				"constraint": "isSomeString!String && isRegexFor!(RegEx, String)",
				"members": [
					{
						"kind": "function",
						"line": 1418,
						"endchar": 1,
						"char": 26,
						"type": "@trusted String[](String input, RegEx rx)",
						"parameters": [
							{
								"type": "String",
								"name": "input"
							},
							{
								"type": "RegEx",
								"name": "rx"
							}
						],
						"name": "split",
						"endline": 1425
					}
				],
				"char": 26,
				"parameters": [
					{
						"kind": "type",
						"name": "String"
					},
					{
						"kind": "type",
						"name": "RegEx"
					}
				],
				"comment": "An eager version of $(D splitter) that creates an array with splitted slices of $(D input).\n",
				"name": "split"
			},
			{
				"kind": "alias",
				"line": 1428,
				"deco": "C3std5regex8internal2ir14RegexException",
				"char": 8,
				"name": "RegexException",
				"comment": "Exception object thrown in case of errors during regex compilation.\n"
			}
		],
		"name": "std.regex",
		"comment": "  $(LUCKY Regular expressions) are a commonly used method of pattern matching\n  on strings, with $(I regex) being a catchy word for a pattern in this domain\n  specific language. Typical problems usually solved by regular expressions\n  include validation of user input and the ubiquitous find & replace\n  in text processing utilities.\n\n  $(SECTION Synopsis)\n  ---\n  import std.regex;\n  import std.stdio;\n  void main()\n  {\n      // Print out all possible dd/mm/yy(yy) dates found in user input.\n      auto r = regex(r\"\\b[0-9][0-9]?/[0-9][0-9]?/[0-9][0-9](?:[0-9][0-9])?\\b\");\n      foreach(line; stdin.byLine)\n      {\n        // matchAll() returns a range that can be iterated\n        // to get all subsequent matches.\n        foreach(c; matchAll(line, r))\n            writeln(c.hit);\n      }\n  }\n  ...\n\n  // Create a static regex at compile-time, which contains fast native code.\n  auto ctr = ctRegex!(`^.*/([^/]+)/?$`);\n\n  // It works just like a normal regex:\n  auto c2 = matchFirst(\"foo/bar\", ctr);   // First match found here, if any\n  assert(!c2.empty);   // Be sure to check if there is a match before examining contents!\n  assert(c2[1] == \"bar\");   // Captures is a range of submatches: 0 = full match.\n\n  ...\n\n  // The result of the $(D matchAll) is directly testable with if/assert/while.\n  // e.g. test if a string consists of letters:\n  assert(matchFirst(\"Letter\", `^\\p{L}+$`));\n\n\n  ---\n  $(SECTION Syntax and general information)\n  The general usage guideline is to keep regex complexity on the side of simplicity,\n  as its capabilities reside in purely character-level manipulation.\n  As such it's ill-suited for tasks involving higher level invariants\n  like matching an integer number $(U bounded) in an [a,b] interval.\n  Checks of this sort of are better addressed by additional post-processing.\n\n  The basic syntax shouldn't surprise experienced users of regular expressions.\n  For an introduction to $(D std.regex) see a\n  $(WEB dlang.org/regular-expression.html, short tour) of the module API\n  and its abilities.\n\n  There are other web resources on regular expressions to help newcomers,\n  and a good $(WEB www.regular-expressions.info, reference with tutorial)\n  can easily be found.\n\n  This library uses a remarkably common ECMAScript syntax flavor\n  with the following extensions:\n  $(UL\n    $(LI Named subexpressions, with Python syntax. )\n    $(LI Unicode properties such as Scripts, Blocks and common binary properties e.g Alphabetic, White_Space, Hex_Digit etc.)\n    $(LI Arbitrary length and complexity lookbehind, including lookahead in lookbehind and vise-versa.)\n  )\n\n  $(REG_START Pattern syntax )\n  $(I std.regex operates on codepoint level,\n    'character' in this table denotes a single Unicode codepoint.)\n  $(REG_TABLE\n    $(REG_TITLE Pattern element, Semantics )\n    $(REG_TITLE Atoms, Match single characters )\n    $(REG_ROW any character except [{|*+?()^$, Matches the character itself. )\n    $(REG_ROW ., In single line mode matches any character.\n      Otherwise it matches any character except '\\n' and '\\r'. )\n    $(REG_ROW [class], Matches a single character\n      that belongs to this character class. )\n    $(REG_ROW [^class], Matches a single character that\n      does $(U not) belong to this character class.)\n    $(REG_ROW \\cC, Matches the control character corresponding to letter C)\n    $(REG_ROW \\xXX, Matches a character with hexadecimal value of XX. )\n    $(REG_ROW \\uXXXX, Matches a character  with hexadecimal value of XXXX. )\n    $(REG_ROW \\U00YYYYYY, Matches a character with hexadecimal value of YYYYYY. )\n    $(REG_ROW \\f, Matches a formfeed character. )\n    $(REG_ROW \\n, Matches a linefeed character. )\n    $(REG_ROW \\r, Matches a carriage return character. )\n    $(REG_ROW \\t, Matches a tab character. )\n    $(REG_ROW \\v, Matches a vertical tab character. )\n    $(REG_ROW \\d, Matches any Unicode digit. )\n    $(REG_ROW \\D, Matches any character except Unicode digits. )\n    $(REG_ROW \\w, Matches any word character (note: this includes numbers).)\n    $(REG_ROW \\W, Matches any non-word character.)\n    $(REG_ROW \\s, Matches whitespace, same as \\p{White_Space}.)\n    $(REG_ROW \\S, Matches any character except those recognized as $(I \\s ). )\n    $(REG_ROW \\\\, Matches \\ character. )\n    $(REG_ROW \\c where c is one of [|*+?(), Matches the character c itself. )\n    $(REG_ROW \\p{PropertyName}, Matches a character that belongs\n        to the Unicode PropertyName set.\n      Single letter abbreviations can be used without surrounding {,}. )\n    $(REG_ROW  \\P{PropertyName}, Matches a character that does not belong\n        to the Unicode PropertyName set.\n      Single letter abbreviations can be used without surrounding {,}. )\n    $(REG_ROW \\p{InBasicLatin}, Matches any character that is part of\n          the BasicLatin Unicode $(U block).)\n    $(REG_ROW \\P{InBasicLatin}, Matches any character except ones in\n          the BasicLatin Unicode $(U block).)\n    $(REG_ROW \\p{Cyrillic}, Matches any character that is part of\n        Cyrillic $(U script).)\n    $(REG_ROW \\P{Cyrillic}, Matches any character except ones in\n        Cyrillic $(U script).)\n    $(REG_TITLE Quantifiers, Specify repetition of other elements)\n    $(REG_ROW *, Matches previous character/subexpression 0 or more times.\n      Greedy version - tries as many times as possible.)\n    $(REG_ROW *?, Matches previous character/subexpression 0 or more times.\n      Lazy version  - stops as early as possible.)\n    $(REG_ROW +, Matches previous character/subexpression 1 or more times.\n      Greedy version - tries as many times as possible.)\n    $(REG_ROW +?, Matches previous character/subexpression 1 or more times.\n      Lazy version  - stops as early as possible.)\n    $(REG_ROW {n}, Matches previous character/subexpression exactly n times. )\n    $(REG_ROW {n&#44}, Matches previous character/subexpression n times or more.\n      Greedy version - tries as many times as possible. )\n    $(REG_ROW {n&#44}?, Matches previous character/subexpression n times or more.\n      Lazy version - stops as early as possible.)\n    $(REG_ROW {n&#44m}, Matches previous character/subexpression n to m times.\n      Greedy version - tries as many times as possible, but no more than m times. )\n    $(REG_ROW {n&#44m}?, Matches previous character/subexpression n to m times.\n      Lazy version - stops as early as possible, but no less then n times.)\n    $(REG_TITLE Other, Subexpressions & alternations )\n    $(REG_ROW (regex),  Matches subexpression regex,\n      saving matched portion of text for later retrieval. )\n    $(REG_ROW (?:regex), Matches subexpression regex,\n      $(U not) saving matched portion of text. Useful to speed up matching. )\n    $(REG_ROW A|B, Matches subexpression A, or failing that, matches B. )\n    $(REG_ROW (?P&lt;name&gt;regex), Matches named subexpression\n        regex labeling it with name 'name'.\n        When referring to a matched portion of text,\n        names work like aliases in addition to direct numbers.\n     )\n    $(REG_TITLE Assertions, Match position rather than character )\n    $(REG_ROW ^, Matches at the begining of input or line (in multiline mode).)\n    $(REG_ROW $, Matches at the end of input or line (in multiline mode). )\n    $(REG_ROW \\b, Matches at word boundary. )\n    $(REG_ROW \\B, Matches when $(U not) at word boundary. )\n    $(REG_ROW (?=regex), Zero-width lookahead assertion.\n        Matches at a point where the subexpression\n        regex could be matched starting from the current position.\n      )\n    $(REG_ROW (?!regex), Zero-width negative lookahead assertion.\n        Matches at a point where the subexpression\n        regex could $(U not) be matched starting from the current position.\n      )\n    $(REG_ROW (?<=regex), Zero-width lookbehind assertion. Matches at a point\n        where the subexpression regex could be matched ending\n        at the current position (matching goes backwards).\n      )\n    $(REG_ROW  (?<!regex), Zero-width negative lookbehind assertion.\n      Matches at a point where the subexpression regex could $(U not)\n      be matched ending at the current position (matching goes backwards).\n     )\n  )\n\n  $(REG_START Character classes )\n  $(REG_TABLE\n    $(REG_TITLE Pattern element, Semantics )\n    $(REG_ROW Any atom, Has the same meaning as outside of a character class.)\n    $(REG_ROW a-z, Includes characters a, b, c, ..., z. )\n    $(REG_ROW [a||b]&#44 [a--b]&#44 [a~~b]&#44 [a&&b], Where a, b are arbitrary classes,\n     means union, set difference, symmetric set difference, and intersection respectively.\n     $(I Any sequence of character class elements implicitly forms a union.) )\n  )\n\n  $(REG_START Regex flags )\n  $(REG_TABLE\n    $(REG_TITLE Flag, Semantics )\n    $(REG_ROW g, Global regex, repeat over the whole input. )\n    $(REG_ROW i, Case insensitive matching. )\n    $(REG_ROW m, Multi-line mode, match ^, $ on start and end line separators\n       as well as start and end of input.)\n    $(REG_ROW s, Single-line mode, makes . match '\\n' and '\\r' as well. )\n    $(REG_ROW x, Free-form syntax, ignores whitespace in pattern,\n      useful for formatting complex regular expressions. )\n  )\n\n  $(SECTION Unicode support)\n\n  This library provides full Level 1 support* according to\n    $(WEB unicode.org/reports/tr18/, UTS 18). Specifically:\n  $(UL\n    $(LI 1.1 Hex notation via any of \\uxxxx, \\U00YYYYYY, \\xZZ.)\n    $(LI 1.2 Unicode properties.)\n    $(LI 1.3 Character classes with set operations.)\n    $(LI 1.4 Word boundaries use the full set of \"word\" characters.)\n    $(LI 1.5 Using simple casefolding to match case\n        insensitively across the full range of codepoints.)\n    $(LI 1.6 Respecting line breaks as any of\n        \\u000A | \\u000B | \\u000C | \\u000D | \\u0085 | \\u2028 | \\u2029 | \\u000D\\u000A.)\n    $(LI 1.7 Operating on codepoint level.)\n  )\n  *With exception of point 1.1.1, as of yet, normalization of input\n    is expected to be enforced by user.\n\n    $(SECTION Replace format string)\n\n    A set of functions in this module that do the substitution rely\n    on a simple format to guide the process. In particular the table below\n    applies to the $(D format) argument of\n    $(LREF replaceFirst) and $(LREF replaceAll).\n\n    The format string can reference parts of match using the following notation.\n    $(REG_TABLE\n        $(REG_TITLE Format specifier, Replaced by )\n        $(REG_ROW $&amp;, the whole match. )\n        $(REG_ROW $(DOLLAR)$(BACKTICK), part of input $(I preceding) the match. )\n        $(REG_ROW $', part of input $(I following) the match. )\n        $(REG_ROW $$, '$' character. )\n        $(REG_ROW \\c &#44 where c is any character, the character c itself. )\n        $(REG_ROW \\\\, '\\' character. )\n        $(REG_ROW &#36;1 .. &#36;99, submatch number 1 to 99 respectively. )\n    )\n\n  $(SECTION Slicing and zero memory allocations orientation)\n\n  All matches returned by pattern matching functionality in this library\n    are slices of the original input. The notable exception is the $(D replace)\n    family of functions  that generate a new string from the input.\n\n    In cases where producing the replacement is the ultimate goal\n    $(LREF replaceFirstInto) and $(LREF replaceAllInto) could come in handy\n    as functions that  avoid allocations even for replacement.\n\n    Copyright: Copyright Dmitry Olshansky, 2011-\n\n  License: $(WEB boost.org/LICENSE_1_0.txt, Boost License 1.0).\n\n  Authors: Dmitry Olshansky,\n\n    API and utility constructs are modeled after the original $(D std.regex)\n  by Walter Bright and Andrei Alexandrescu.\n\n  Source: $(PHOBOSSRC std/_regex.d)\n\nMacros:\n    REG_ROW = $(TR $(TD $(I $1 )) $(TD $+) )\n    REG_TITLE = $(TR $(TD $(B $1)) $(TD $(B $2)) )\n    REG_TABLE = <table border=\"1\" cellspacing=\"0\" cellpadding=\"5\" > $0 </table>\n    REG_START = <h3><div align=\"center\"> $0 </div></h3>\n    SECTION = <h3><a id=\"$1\">$0</a></h3>\n    S_LINK = <a href=\"#$1\">$+</a>\n"
	},
	{
		"kind": "module",
		"file": "../phobos/std/typetuple.d",
		"members": [
			{
				"kind": "template",
				"line": 40,
				"members": [
					{
						"kind": "alias",
						"line": 42,
						"char": 5,
						"type": "TList",
						"name": "TypeTuple"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "tuple",
						"name": "TList"
					}
				],
				"comment": " Creates a typetuple out of a sequence of zero or more types.\nExample:\n\n---\nimport std.typetuple;\nalias TL = TypeTuple!(int, double);\n\nint foo(TL td)  // same as int foo(int, double);\n{\n    return td[0] + cast(int)td[1];\n}\n\n---\nExample:\n\n---\nalias TL = TypeTuple!(int, double);\n\nalias Types = TypeTuple!(TL, char);\nstatic assert(is(Types == TypeTuple!(int, double, char)));\n\n---\n",
				"name": "TypeTuple"
			},
			{
				"kind": "template",
				"line": 71,
				"members": [
					{
						"kind": "variable",
						"line": 73,
						"init": "genericIndexOf!(T, TList).index",
						"storageClass": [
							"enum"
						],
						"char": 10,
						"name": "staticIndexOf"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "tuple",
						"name": "TList"
					}
				],
				"comment": " Returns the index of the first occurrence of type T in the\n sequence of zero or more types TList.\n If not found, -1 is returned.\nExample:\n\n---\nimport std.typetuple;\nimport std.stdio;\n\nvoid foo()\n{\n    writefln(\"The index of long is %s\",\n             staticIndexOf!(long, TypeTuple!(int, long, double)));\n    // prints: The index of long is 1\n}\n\n---\n",
				"name": "staticIndexOf"
			},
			{
				"kind": "template",
				"line": 77,
				"members": [
					{
						"kind": "variable",
						"line": 79,
						"init": "genericIndexOf!(T, TList).index",
						"storageClass": [
							"enum"
						],
						"char": 10,
						"name": "staticIndexOf"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "alias",
						"name": "T"
					},
					{
						"kind": "tuple",
						"name": "TList"
					}
				],
				"comment": "Ditto\n",
				"name": "staticIndexOf"
			},
			{
				"kind": "alias",
				"line": 147,
				"char": 1,
				"name": "IndexOf",
				"comment": "Kept for backwards compatibility\n"
			},
			{
				"kind": "template",
				"line": 153,
				"members": [
					{
						"kind": "alias",
						"line": 155,
						"char": 5,
						"type": "GenericErase!(T, TList).result",
						"name": "Erase"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "tuple",
						"name": "TList"
					}
				],
				"comment": " Returns a typetuple created from TList with the first occurrence,\n if any, of T removed.\nExample:\n\n---\nalias Types = TypeTuple!(int, long, double, char);\nalias TL = Erase!(long, Types);\nstatic assert(is(TL == TypeTuple!(int, double, char)));\n\n---\n",
				"name": "Erase"
			},
			{
				"kind": "template",
				"line": 159,
				"members": [
					{
						"kind": "alias",
						"line": 161,
						"char": 5,
						"type": "GenericErase!(T, TList).result",
						"name": "Erase"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "alias",
						"name": "T"
					},
					{
						"kind": "tuple",
						"name": "TList"
					}
				],
				"comment": "Ditto\n",
				"name": "Erase"
			},
			{
				"kind": "template",
				"line": 211,
				"members": [
					{
						"kind": "alias",
						"line": 213,
						"char": 5,
						"type": "GenericEraseAll!(T, TList).result",
						"name": "EraseAll"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "tuple",
						"name": "TList"
					}
				],
				"comment": " Returns a typetuple created from TList with the all occurrences,\n if any, of T removed.\nExample:\n\n---\nalias Types = TypeTuple!(int, long, long, int);\n\nalias TL = EraseAll!(long, Types);\nstatic assert(is(TL == TypeTuple!(int, int)));\n\n---\n",
				"name": "EraseAll"
			},
			{
				"kind": "template",
				"line": 217,
				"members": [
					{
						"kind": "alias",
						"line": 219,
						"char": 5,
						"type": "GenericEraseAll!(T, TList).result",
						"name": "EraseAll"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "alias",
						"name": "T"
					},
					{
						"kind": "tuple",
						"name": "TList"
					}
				],
				"comment": "Ditto\n",
				"name": "EraseAll"
			},
			{
				"kind": "template",
				"line": 271,
				"members": [],
				"char": 1,
				"parameters": [
					{
						"kind": "tuple",
						"name": "TList"
					}
				],
				"comment": " Returns a typetuple created from TList with the all duplicate\n types removed.\nExample:\n\n---\nalias Types = TypeTuple!(int, long, long, int, float);\n\nalias TL = NoDuplicates!(Types);\nstatic assert(is(TL == TypeTuple!(int, long, float)));\n\n---\n",
				"name": "NoDuplicates"
			},
			{
				"kind": "template",
				"line": 302,
				"members": [
					{
						"kind": "alias",
						"line": 304,
						"char": 5,
						"type": "GenericReplace!(T, U, TList).result",
						"name": "Replace"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "type",
						"name": "U"
					},
					{
						"kind": "tuple",
						"name": "TList"
					}
				],
				"comment": " Returns a typetuple created from TList with the first occurrence\n of type T, if found, replaced with type U.\nExample:\n\n---\nalias Types = TypeTuple!(int, long, long, int, float);\n\nalias TL = Replace!(long, char, Types);\nstatic assert(is(TL == TypeTuple!(int, char, long, int, float)));\n\n---\n",
				"name": "Replace"
			},
			{
				"kind": "template",
				"line": 308,
				"members": [
					{
						"kind": "alias",
						"line": 310,
						"char": 5,
						"type": "GenericReplace!(T, U, TList).result",
						"name": "Replace"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "alias",
						"name": "T"
					},
					{
						"kind": "type",
						"name": "U"
					},
					{
						"kind": "tuple",
						"name": "TList"
					}
				],
				"comment": "Ditto\n",
				"name": "Replace"
			},
			{
				"kind": "template",
				"line": 314,
				"members": [
					{
						"kind": "alias",
						"line": 316,
						"char": 5,
						"type": "GenericReplace!(T, U, TList).result",
						"name": "Replace"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "alias",
						"name": "U"
					},
					{
						"kind": "tuple",
						"name": "TList"
					}
				],
				"comment": "Ditto\n",
				"name": "Replace"
			},
			{
				"kind": "template",
				"line": 320,
				"members": [
					{
						"kind": "alias",
						"line": 322,
						"char": 5,
						"type": "GenericReplace!(T, U, TList).result",
						"name": "Replace"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "alias",
						"name": "T"
					},
					{
						"kind": "alias",
						"name": "U"
					},
					{
						"kind": "tuple",
						"name": "TList"
					}
				],
				"comment": "Ditto\n",
				"name": "Replace"
			},
			{
				"kind": "template",
				"line": 382,
				"members": [
					{
						"kind": "alias",
						"line": 384,
						"char": 5,
						"type": "GenericReplaceAll!(T, U, TList).result",
						"name": "ReplaceAll"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "type",
						"name": "U"
					},
					{
						"kind": "tuple",
						"name": "TList"
					}
				],
				"comment": " Returns a typetuple created from TList with all occurrences\n of type T, if found, replaced with type U.\nExample:\n\n---\nalias Types = TypeTuple!(int, long, long, int, float);\n\nalias TL = ReplaceAll!(long, char, Types);\nstatic assert(is(TL == TypeTuple!(int, char, char, int, float)));\n\n---\n",
				"name": "ReplaceAll"
			},
			{
				"kind": "template",
				"line": 388,
				"members": [
					{
						"kind": "alias",
						"line": 390,
						"char": 5,
						"type": "GenericReplaceAll!(T, U, TList).result",
						"name": "ReplaceAll"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "alias",
						"name": "T"
					},
					{
						"kind": "type",
						"name": "U"
					},
					{
						"kind": "tuple",
						"name": "TList"
					}
				],
				"comment": "Ditto\n",
				"name": "ReplaceAll"
			},
			{
				"kind": "template",
				"line": 394,
				"members": [
					{
						"kind": "alias",
						"line": 396,
						"char": 5,
						"type": "GenericReplaceAll!(T, U, TList).result",
						"name": "ReplaceAll"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "alias",
						"name": "U"
					},
					{
						"kind": "tuple",
						"name": "TList"
					}
				],
				"comment": "Ditto\n",
				"name": "ReplaceAll"
			},
			{
				"kind": "template",
				"line": 400,
				"members": [
					{
						"kind": "alias",
						"line": 402,
						"char": 5,
						"type": "GenericReplaceAll!(T, U, TList).result",
						"name": "ReplaceAll"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "alias",
						"name": "T"
					},
					{
						"kind": "alias",
						"name": "U"
					},
					{
						"kind": "tuple",
						"name": "TList"
					}
				],
				"comment": "Ditto\n",
				"name": "ReplaceAll"
			},
			{
				"kind": "template",
				"line": 461,
				"members": [],
				"char": 1,
				"parameters": [
					{
						"kind": "tuple",
						"name": "TList"
					}
				],
				"comment": " Returns a typetuple created from TList with the order reversed.\nExample:\n\n---\nalias Types = TypeTuple!(int, long, long, int, float);\n\nalias TL = Reverse!(Types);\nstatic assert(is(TL == TypeTuple!(float, int, long, long, int)));\n\n---\n",
				"name": "Reverse"
			},
			{
				"kind": "template",
				"line": 489,
				"members": [],
				"char": 1,
				"parameters": [
					{
						"kind": "type",
						"name": "T"
					},
					{
						"kind": "tuple",
						"name": "TList"
					}
				],
				"comment": " Returns the type from TList that is the most derived from type T.\n If none are found, T is returned.\nExample:\n\n---\nclass A { }\nclass B : A { }\nclass C : B { }\nalias Types = TypeTuple!(A, C, B);\n\nMostDerived!(Object, Types) x;  // x is declared as type C\nstatic assert(is(typeof(x) == C));\n\n---\n",
				"name": "MostDerived"
			},
			{
				"kind": "template",
				"line": 515,
				"members": [],
				"char": 1,
				"parameters": [
					{
						"kind": "tuple",
						"name": "TList"
					}
				],
				"comment": " Returns the typetuple TList with the types sorted so that the most\n derived types come first.\nExample:\n\n---\nclass A { }\nclass B : A { }\nclass C : B { }\nalias Types = TypeTuple!(A, C, B);\n\nalias TL = DerivedToFront!(Types);\nstatic assert(is(TL == TypeTuple!(C, B, A)));\n\n---\n",
				"name": "DerivedToFront"
			},
			{
				"kind": "template",
				"line": 542,
				"members": [],
				"char": 1,
				"parameters": [
					{
						"kind": "alias",
						"name": "F"
					},
					{
						"kind": "tuple",
						"name": "T"
					}
				],
				"comment": "Evaluates to $(D TypeTuple!(F!(T[0]), F!(T[1]), ..., F!(T[$ - 1]))).\nExample:\n\n---\nimport std.traits : Unqual;\nalias TL = staticMap!(Unqual, int, const int, immutable int);\nstatic assert(is(TL == TypeTuple!(int, int, int)));\n\n---\n",
				"name": "staticMap"
			},
			{
				"kind": "template",
				"line": 592,
				"members": [],
				"char": 1,
				"parameters": [
					{
						"kind": "alias",
						"name": "F"
					},
					{
						"kind": "tuple",
						"name": "T"
					}
				],
				"comment": "Tests whether all given items satisfy a template predicate, i.e. evaluates to\n$(D F!(T[0]) && F!(T[1]) && ... && F!(T[$ - 1])).\n\nEvaluation is $(I not) short-circuited if a false result is encountered; the\ntemplate predicate must be instantiable with all the given items.\nExample:\n\n---\nimport std.traits : isIntegral;\n\nstatic assert(!allSatisfy!(isIntegral, int, double));\nstatic assert( allSatisfy!(isIntegral, int, long));\n\n---\n",
				"name": "allSatisfy"
			},
			{
				"kind": "template",
				"line": 626,
				"members": [],
				"char": 1,
				"parameters": [
					{
						"kind": "alias",
						"name": "F"
					},
					{
						"kind": "tuple",
						"name": "T"
					}
				],
				"comment": "Tests whether any given items satisfy a template predicate, i.e. evaluates to\n$(D F!(T[0]) || F!(T[1]) || ... || F!(T[$ - 1])).\n\nEvaluation is $(I not) short-circuited if a true result is encountered; the\ntemplate predicate must be instantiable with all the given items.\nExample:\n\n---\nimport std.traits : isIntegral;\n\nstatic assert(!anySatisfy!(isIntegral, string, double));\nstatic assert( anySatisfy!(isIntegral, int, double));\n\n---\n",
				"name": "anySatisfy"
			},
			{
				"kind": "template",
				"line": 658,
				"members": [],
				"char": 1,
				"parameters": [
					{
						"kind": "alias",
						"name": "pred"
					},
					{
						"kind": "tuple",
						"name": "TList"
					}
				],
				"comment": " Filters a $(D TypeTuple) using a template predicate. Returns a\n $(D TypeTuple) of the elements which satisfy the predicate.\nExample:\n\n---\nimport std.traits : isNarrowString, isUnsigned;\n\nalias Types1 = TypeTuple!(string, wstring, dchar[], char[], dstring, int);\nalias TL1 = Filter!(isNarrowString, Types1);\nstatic assert(is(TL1 == TypeTuple!(string, wstring, char[])));\n\nalias Types2 = TypeTuple!(int, byte, ubyte, dstring, dchar, uint, ulong);\nalias TL2 = Filter!(isUnsigned, Types2);\nstatic assert(is(TL2 == TypeTuple!(ubyte, uint, ulong)));\n\n---\n",
				"name": "Filter"
			},
			{
				"kind": "template",
				"line": 726,
				"members": [
					{
						"kind": "template",
						"line": 728,
						"members": [
							{
								"kind": "variable",
								"line": 728,
								"init": "!pred!T",
								"storageClass": [
									"enum"
								],
								"char": 10,
								"name": "templateNot"
							}
						],
						"char": 10,
						"parameters": [
							{
								"kind": "tuple",
								"name": "T"
							}
						],
						"name": "templateNot"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "alias",
						"name": "pred"
					}
				],
				"comment": " Negates the passed template predicate.\nExample:\n\n---\nimport std.traits : isPointer;\n\nalias isNoPointer = templateNot!isPointer;\nstatic assert(!isNoPointer!(int*));\nstatic assert(allSatisfy!(isNoPointer, string, char, float));\n\n---\n",
				"name": "templateNot"
			},
			{
				"kind": "template",
				"line": 760,
				"members": [
					{
						"kind": "template",
						"line": 762,
						"members": [],
						"char": 5,
						"parameters": [
							{
								"kind": "tuple",
								"name": "T"
							}
						],
						"name": "templateAnd"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "tuple",
						"name": "Preds"
					}
				],
				"comment": " Combines several template predicates using logical AND, i.e. constructs a new\n predicate which evaluates to true for a given input T if and only if all of\n the passed predicates are true for T.\n\n The predicates are evaluated from left to right, aborting evaluation in a\n short-cut manner if a false result is encountered, in which case the latter\n instantiations do not need to compile.\nExample:\n\n---\nimport std.traits : isNumeric, isUnsigned;\n\nalias storesNegativeNumbers = templateAnd!(isNumeric, templateNot!isUnsigned);\nstatic assert(storesNegativeNumbers!int);\nstatic assert(!storesNegativeNumbers!string && !storesNegativeNumbers!uint);\n\n// An empty list of predicates always yields true.\nalias alwaysTrue = templateAnd!();\nstatic assert(alwaysTrue!int);\n\n---\n",
				"name": "templateAnd"
			},
			{
				"kind": "template",
				"line": 818,
				"members": [
					{
						"kind": "template",
						"line": 820,
						"members": [],
						"char": 5,
						"parameters": [
							{
								"kind": "tuple",
								"name": "T"
							}
						],
						"name": "templateOr"
					}
				],
				"char": 1,
				"parameters": [
					{
						"kind": "tuple",
						"name": "Preds"
					}
				],
				"comment": " Combines several template predicates using logical OR, i.e. constructs a new\n predicate which evaluates to true for a given input T if and only at least\n one of the passed predicates is true for T.\n\n The predicates are evaluated from left to right, aborting evaluation in a\n short-cut manner if a true result is encountered, in which case the latter\n instantiations do not need to compile.\nExample:\n\n---\nimport std.traits : isPointer, isUnsigned;\n\nalias isPtrOrUnsigned = templateOr!(isPointer, isUnsigned);\nstatic assert( isPtrOrUnsigned!uint &&  isPtrOrUnsigned!(short*));\nstatic assert(!isPtrOrUnsigned!int  && !isPtrOrUnsigned!(string));\n\n// An empty list of predicates never yields true.\nalias alwaysFalse = templateOr!();\nstatic assert(!alwaysFalse!int);\n\n---\n",
				"name": "templateOr"
			}
		],
		"name": "std.typetuple",
		"comment": " Templates with which to manipulate type tuples (also known as type lists).\n\n Some operations on type tuples are built in to the language,\n such as TL[$(I n)] which gets the $(I n)th type from the\n type tuple. TL[$(I lwr) .. $(I upr)] returns a new type\n list that is a slice of the old one.\n\n Several templates in this module use or operate on eponymous templates that\n take a single argument and evaluate to a boolean constant. Such templates\n are referred to as $(I template predicates).\n\n References:\n  Based on ideas in Table 3.1 from\n  $(LINK2 http://amazon.com/exec/obidos/ASIN/0201704315/ref=ase_classicempire/102-2957199-2585768,\n      Modern C++ Design),\n   Andrei Alexandrescu (Addison-Wesley Professional, 2001)\n Macros:\n  WIKI = Phobos/StdTypeTuple\n\n Copyright: Copyright Digital Mars 2005 - 2009.\n License:   $(WEB www.boost.org/LICENSE_1_0.txt, Boost License 1.0).\n Authors:\n     $(WEB digitalmars.com, Walter Bright),\n     $(WEB klickverbot.at, David Nadlinger)\n Source:    $(PHOBOSSRC std/_typetuple.d)\n"
	},
	{
		"kind": "module",
		"file": "../phobos/etc/c/curl.d",
		"members": [
			{
				"kind": "variable",
				"line": 52,
				"init": "\"1996 - 2010 Daniel Stenberg, <daniel@haxx.se>.\"",
				"storageClass": [
					"enum"
				],
				"deco": "Aya",
				"char": 6,
				"name": "LIBCURL_COPYRIGHT",
				"comment": " This is the global package copyright\n"
			},
			{
				"kind": "variable",
				"line": 56,
				"init": "\"7.21.4\"",
				"storageClass": [
					"enum"
				],
				"deco": "Aya",
				"char": 6,
				"name": "LIBCURL_VERSION",
				"comment": " This is the version number of the libcurl package from which this header\n   file origins:\n"
			},
			{
				"kind": "variable",
				"line": 60,
				"init": "7",
				"storageClass": [
					"enum"
				],
				"deco": "i",
				"char": 6,
				"name": "LIBCURL_VERSION_MAJOR",
				"comment": " The numeric version number is also available \"in parts\" by using these\n   constants\n"
			},
			{
				"kind": "variable",
				"line": 62,
				"init": "21",
				"storageClass": [
					"enum"
				],
				"deco": "i",
				"char": 6,
				"name": "LIBCURL_VERSION_MINOR",
				"comment": "ditto\n"
			},
			{
				"kind": "variable",
				"line": 64,
				"init": "4",
				"storageClass": [
					"enum"
				],
				"deco": "i",
				"char": 6,
				"name": "LIBCURL_VERSION_PATCH",
				"comment": "ditto\n"
			},
			{
				"kind": "variable",
				"line": 82,
				"init": "464132",
				"storageClass": [
					"enum"
				],
				"deco": "i",
				"char": 6,
				"name": "LIBCURL_VERSION_NUM",
				"comment": " This is the numeric version of the libcurl version number, meant for easier\n   parsing and comparions by programs. The LIBCURL_VERSION_NUM define will\n   always follow this syntax:\n\n         0xXXYYZZ\n\n   Where XX, YY and ZZ are the main version, release and patch numbers in\n   hexadecimal (using 8 bits each). All three numbers are always represented\n   using two digits.  1.2 would appear as \"0x010200\" while version 9.11.7\n   appears as \"0x090b07\".\n\n   This 6-digit (24 bits) hexadecimal number does not show pre-release number,\n   and it is always a greater number in a more recent release. It makes\n   comparisons with greater than and less than work.\n"
			},
			{
				"kind": "variable",
				"line": 93,
				"init": "\"Thu Feb 17 12:19:40 UTC 2011\"",
				"storageClass": [
					"enum"
				],
				"deco": "Aya",
				"char": 6,
				"name": "LIBCURL_TIMESTAMP",
				"comment": " This is the date and time when the full source package was created. The\n timestamp is not stored in git, as the timestamp is properly set in the\n tarballs by the maketgz script.\n\n The format of the date should follow this template:\n\n \"Mon Feb 12 11:35:33 UTC 2007\"\n"
			},
			{
				"kind": "alias",
				"line": 109,
				"deco": "l",
				"char": 12,
				"name": "curl_off_t",
				"comment": " Data type definition of curl_off_t.\n\njdrewsen - Always 64bit signed and that is what long is in D.\n\nComment below is from curlbuild.h:\n\n NOTE 2:\n\n For any given platform/compiler curl_off_t must be typedef'ed to a\n 64-bit wide signed integral data type. The width of this data type\n must remain constant and independent of any possible large file\n support settings.\n\n As an exception to the above, curl_off_t shall be typedef'ed to a\n 32-bit wide signed integral data type if there is no 64-bit type.\n"
			},
			{
				"kind": "alias",
				"line": 112,
				"deco": "v",
				"char": 12,
				"name": "CURL",
				"comment": "\n"
			},
			{
				"kind": "alias",
				"line": 115,
				"deco": "E3std6socket8socket_t",
				"char": 16,
				"name": "curl_socket_t",
				"comment": "jdrewsen - Get socket alias from std.socket\n"
			},
			{
				"kind": "struct",
				"line": 125,
				"members": [
					{
						"kind": "variable",
						"line": 127,
						"deco": "PS3etc1c4curl13curl_httppost",
						"char": 20,
						"name": "next",
						"comment": " next entry in the list\n",
						"offset": 0
					},
					{
						"kind": "variable",
						"line": 128,
						"deco": "Pa",
						"char": 11,
						"name": "name",
						"comment": " pointer to allocated name\n",
						"offset": 8
					},
					{
						"kind": "variable",
						"line": 129,
						"deco": "l",
						"char": 12,
						"name": "namelength",
						"comment": " length of name length\n",
						"originalType": "c_long",
						"offset": 16
					},
					{
						"kind": "variable",
						"line": 130,
						"deco": "Pa",
						"char": 11,
						"name": "contents",
						"comment": " pointer to allocated data contents\n",
						"offset": 24
					},
					{
						"kind": "variable",
						"line": 131,
						"deco": "l",
						"char": 12,
						"name": "contentslength",
						"comment": " length of contents field\n",
						"originalType": "c_long",
						"offset": 32
					},
					{
						"kind": "variable",
						"line": 132,
						"deco": "Pa",
						"char": 11,
						"name": "buffer",
						"comment": " pointer to allocated buffer contents\n",
						"offset": 40
					},
					{
						"kind": "variable",
						"line": 133,
						"deco": "l",
						"char": 12,
						"name": "bufferlength",
						"comment": " length of buffer field\n",
						"originalType": "c_long",
						"offset": 48
					},
					{
						"kind": "variable",
						"line": 134,
						"deco": "Pa",
						"char": 11,
						"name": "contenttype",
						"comment": " Content-Type\n",
						"offset": 56
					},
					{
						"kind": "variable",
						"line": 135,
						"deco": "PS3etc1c4curl10curl_slist",
						"char": 17,
						"name": "contentheader",
						"comment": " list of extra headers for this form\n",
						"offset": 64
					},
					{
						"kind": "variable",
						"line": 136,
						"deco": "PS3etc1c4curl13curl_httppost",
						"char": 20,
						"name": "more",
						"comment": " if one field name has more than one\n                                    file, this link should link to following\n                                    files\n",
						"offset": 72
					},
					{
						"kind": "variable",
						"line": 139,
						"deco": "l",
						"char": 12,
						"name": "flags",
						"comment": " as defined below\n",
						"originalType": "c_long",
						"offset": 80
					},
					{
						"kind": "variable",
						"line": 140,
						"deco": "Pa",
						"char": 11,
						"name": "showfilename",
						"comment": " The file name to show. If not set, the\n                                    actual file name will be used (if this\n                                    is a file part)\n",
						"offset": 88
					},
					{
						"kind": "variable",
						"line": 143,
						"deco": "Pv",
						"char": 11,
						"name": "userp",
						"comment": " custom pointer used for\n                                    HTTPPOST_CALLBACK posts\n",
						"offset": 96
					}
				],
				"char": 12,
				"name": "curl_httppost",
				"comment": "\n"
			},
			{
				"kind": "variable",
				"line": 147,
				"init": "1",
				"storageClass": [
					"enum"
				],
				"deco": "i",
				"char": 6,
				"name": "HTTPPOST_FILENAME",
				"comment": " specified content is a file name\n"
			},
			{
				"kind": "variable",
				"line": 148,
				"init": "2",
				"storageClass": [
					"enum"
				],
				"deco": "i",
				"char": 6,
				"name": "HTTPPOST_READFILE",
				"comment": " specified content is a file name\n"
			},
			{
				"kind": "variable",
				"line": 149,
				"init": "4",
				"storageClass": [
					"enum"
				],
				"deco": "i",
				"char": 6,
				"name": "HTTPPOST_PTRNAME",
				"comment": " name is only stored pointer\n                                    do not free in formfree\n"
			},
			{
				"kind": "variable",
				"line": 151,
				"init": "8",
				"storageClass": [
					"enum"
				],
				"deco": "i",
				"char": 6,
				"name": "HTTPPOST_PTRCONTENTS",
				"comment": " contents is only stored pointer\n                                    do not free in formfree\n"
			},
			{
				"kind": "variable",
				"line": 153,
				"init": "16",
				"storageClass": [
					"enum"
				],
				"deco": "i",
				"char": 6,
				"name": "HTTPPOST_BUFFER",
				"comment": " upload file from buffer\n"
			},
			{
				"kind": "variable",
				"line": 154,
				"init": "32",
				"storageClass": [
					"enum"
				],
				"deco": "i",
				"char": 6,
				"name": "HTTPPOST_PTRBUFFER",
				"comment": " upload file from pointer contents\n"
			},
			{
				"kind": "variable",
				"line": 155,
				"init": "64",
				"storageClass": [
					"enum"
				],
				"deco": "i",
				"char": 6,
				"name": "HTTPPOST_CALLBACK",
				"comment": " upload file contents by using the\n                                    regular read callback to get the data\n                                    and pass the given pointer as custom\n                                    pointer\n"
			},
			{
				"kind": "alias",
				"line": 161,
				"deco": "PFPvddddZi",
				"char": 95,
				"name": "curl_progress_callback",
				"comment": "\n"
			},
			{
				"kind": "variable",
				"line": 169,
				"init": "16384",
				"storageClass": [
					"enum"
				],
				"deco": "i",
				"char": 6,
				"name": "CURL_MAX_WRITE_SIZE",
				"comment": " Tests have proven that 20K is a very bad buffer size for uploads on\n   Windows, while 16K for some odd reason performed a lot better.\n   We do the ifndef check to allow this value to easier be changed at build\n   time for those who feel adventurous. The practical minimum is about\n   400 bytes since libcurl uses a buffer of this size as a scratch area\n   (unrelated to network send operations).\n"
			},
			{
				"kind": "variable",
				"line": 174,
				"init": "102400",
				"storageClass": [
					"enum"
				],
				"deco": "i",
				"char": 6,
				"name": "CURL_MAX_HTTP_HEADER",
				"comment": " The only reason to have a max limit for this is to avoid the risk of a bad\n   server feeding libcurl with a never-ending header that will cause reallocs\n   infinitely\n"
			},
			{
				"kind": "variable",
				"line": 179,
				"init": "268435457",
				"storageClass": [
					"enum"
				],
				"deco": "i",
				"char": 6,
				"name": "CURL_WRITEFUNC_PAUSE",
				"comment": " This is a magic return code for the write callback that, when returned,\n   will signal libcurl to pause receiving on the current transfer.\n"
			},
			{
				"kind": "alias",
				"line": 182,
				"deco": "PFPammPvZm",
				"char": 82,
				"name": "curl_write_callback",
				"comment": "\n"
			},
			{
				"kind": "enum",
				"line": 185,
				"members": [
					{
						"kind": "enum member",
						"line": 186,
						"value": "0",
						"char": 5,
						"name": "file",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 187,
						"value": "1",
						"char": 5,
						"name": "directory",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 188,
						"value": "2",
						"char": 5,
						"name": "symlink",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 189,
						"value": "3",
						"char": 5,
						"name": "device_block",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 190,
						"value": "4",
						"char": 5,
						"name": "device_char",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 191,
						"value": "5",
						"char": 5,
						"name": "namedpipe",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 192,
						"value": "6",
						"char": 5,
						"name": "socket",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 193,
						"value": "7",
						"char": 5,
						"name": "door",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 194,
						"value": "8",
						"char": 5,
						"name": "unknown",
						"comment": " is possible only on Sun Solaris now\n"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "CurlFileType",
				"comment": " enumeration of file types\n"
			},
			{
				"kind": "alias",
				"line": 198,
				"deco": "i",
				"char": 11,
				"name": "curlfiletype",
				"comment": "\n"
			},
			{
				"kind": "enum",
				"line": 201,
				"members": [
					{
						"kind": "enum member",
						"line": 202,
						"value": "1",
						"char": 3,
						"name": "filename",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 203,
						"value": "2",
						"char": 3,
						"name": "filetype",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 204,
						"value": "4",
						"char": 3,
						"name": "time",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 205,
						"value": "8",
						"char": 3,
						"name": "perm",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 206,
						"value": "16",
						"char": 3,
						"name": "uid",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 207,
						"value": "32",
						"char": 3,
						"name": "gid",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 208,
						"value": "64",
						"char": 3,
						"name": "size",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 209,
						"value": "128",
						"char": 3,
						"name": "hlinkcount",
						"comment": "\n"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "CurlFInfoFlagKnown",
				"comment": "\n"
			},
			{
				"kind": "struct",
				"line": 219,
				"members": [
					{
						"kind": "variable",
						"line": 221,
						"deco": "Pa",
						"char": 11,
						"name": "time",
						"comment": "\n",
						"offset": 0
					},
					{
						"kind": "variable",
						"line": 222,
						"deco": "Pa",
						"char": 11,
						"name": "perm",
						"comment": "\n",
						"offset": 8
					},
					{
						"kind": "variable",
						"line": 223,
						"deco": "Pa",
						"char": 11,
						"name": "user",
						"comment": "\n",
						"offset": 16
					},
					{
						"kind": "variable",
						"line": 224,
						"deco": "Pa",
						"char": 11,
						"name": "group",
						"comment": "\n",
						"offset": 24
					},
					{
						"kind": "variable",
						"line": 225,
						"deco": "Pa",
						"char": 11,
						"name": "target",
						"comment": " pointer to the target filename of a symlink\n",
						"offset": 32
					}
				],
				"char": 12,
				"name": "_N2",
				"comment": " Content of this structure depends on information which is known and is\n   achievable (e.g. by FTP LIST parsing). Please see the url_easy_setopt(3) man\n   page for callbacks returning this structure -- some fields are mandatory,\n   some others are optional. The FLAG field has special meaning.\n\n If some of these fields is not NULL, it is a pointer to b_data.\n"
			},
			{
				"kind": "struct",
				"line": 232,
				"members": [
					{
						"kind": "variable",
						"line": 234,
						"deco": "Pa",
						"char": 11,
						"name": "filename",
						"comment": "\n",
						"offset": 0
					},
					{
						"kind": "variable",
						"line": 235,
						"deco": "i",
						"char": 18,
						"name": "filetype",
						"comment": "\n",
						"originalType": "curlfiletype",
						"offset": 8
					},
					{
						"kind": "variable",
						"line": 236,
						"deco": "l",
						"char": 12,
						"name": "time",
						"comment": "\n",
						"originalType": "time_t",
						"offset": 16
					},
					{
						"kind": "variable",
						"line": 237,
						"deco": "k",
						"char": 10,
						"name": "perm",
						"comment": "\n",
						"offset": 24
					},
					{
						"kind": "variable",
						"line": 238,
						"deco": "i",
						"char": 9,
						"name": "uid",
						"comment": "\n",
						"offset": 28
					},
					{
						"kind": "variable",
						"line": 239,
						"deco": "i",
						"char": 9,
						"name": "gid",
						"comment": "\n",
						"offset": 32
					},
					{
						"kind": "variable",
						"line": 240,
						"deco": "l",
						"char": 16,
						"name": "size",
						"comment": "\n",
						"originalType": "curl_off_t",
						"offset": 40
					},
					{
						"kind": "variable",
						"line": 241,
						"deco": "l",
						"char": 12,
						"name": "hardlinks",
						"comment": "\n",
						"originalType": "c_long",
						"offset": 48
					},
					{
						"kind": "variable",
						"line": 242,
						"deco": "S3etc1c4curl3_N2",
						"char": 9,
						"name": "strings",
						"comment": "\n",
						"offset": 56
					},
					{
						"kind": "variable",
						"line": 243,
						"deco": "k",
						"char": 10,
						"name": "flags",
						"comment": "\n",
						"offset": 96
					},
					{
						"kind": "variable",
						"line": 244,
						"deco": "Pa",
						"char": 11,
						"name": "b_data",
						"comment": "\n",
						"offset": 104
					},
					{
						"kind": "variable",
						"line": 245,
						"deco": "m",
						"char": 12,
						"name": "b_size",
						"comment": "\n",
						"originalType": "size_t",
						"offset": 112
					},
					{
						"kind": "variable",
						"line": 246,
						"deco": "m",
						"char": 12,
						"name": "b_used",
						"comment": "\n",
						"originalType": "size_t",
						"offset": 120
					}
				],
				"char": 12,
				"name": "curl_fileinfo",
				"comment": " Content of this structure depends on information which is known and is\n   achievable (e.g. by FTP LIST parsing). Please see the url_easy_setopt(3) man\n   page for callbacks returning this structure -- some fields are mandatory,\n   some others are optional. The FLAG field has special meaning.\n"
			},
			{
				"kind": "enum",
				"line": 250,
				"members": [
					{
						"kind": "enum member",
						"line": 251,
						"value": "0",
						"char": 3,
						"name": "ok",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 252,
						"value": "1",
						"char": 3,
						"name": "fail",
						"comment": " tell the lib to end the task\n"
					},
					{
						"kind": "enum member",
						"line": 253,
						"value": "2",
						"char": 3,
						"name": "skip",
						"comment": " skip this chunk over\n"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "CurlChunkBgnFunc",
				"comment": " return codes for CURLOPT_CHUNK_BGN_FUNCTION\n"
			},
			{
				"kind": "alias",
				"line": 259,
				"deco": "PFPvPviZl",
				"char": 67,
				"name": "curl_chunk_bgn_callback",
				"comment": " if splitting of data transfer is enabled, this callback is called before\n   download of an individual chunk started. Note that parameter \"remains\" works\n   only for FTP wildcard downloading (for now), otherwise is not used\n"
			},
			{
				"kind": "enum",
				"line": 262,
				"members": [
					{
						"kind": "enum member",
						"line": 263,
						"value": "0",
						"char": 3,
						"name": "ok",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 264,
						"value": "1",
						"char": 3,
						"name": "fail",
						"comment": "\n"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "CurlChunkEndFunc",
				"comment": " return codes for CURLOPT_CHUNK_END_FUNCTION\n"
			},
			{
				"kind": "alias",
				"line": 272,
				"deco": "PFPvZl",
				"char": 33,
				"name": "curl_chunk_end_callback",
				"comment": " If splitting of data transfer is enabled this callback is called after\n   download of an individual chunk finished.\n   Note! After this callback was set then it have to be called FOR ALL chunks.\n   Even if downloading of this chunk was skipped in CHUNK_BGN_FUNC.\n   This is the reason why we don't need \"transfer_info\" parameter in this\n   callback and we are not interested in \"remains\" parameter too.\n"
			},
			{
				"kind": "enum",
				"line": 275,
				"members": [
					{
						"kind": "enum member",
						"line": 276,
						"value": "0",
						"char": 3,
						"name": "match",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 277,
						"value": "1",
						"char": 3,
						"name": "nomatch",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 278,
						"value": "2",
						"char": 3,
						"name": "fail",
						"comment": "\n"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "CurlFnMAtchFunc",
				"comment": " return codes for FNMATCHFUNCTION\n"
			},
			{
				"kind": "alias",
				"line": 283,
				"deco": "PFPvPaPaZi",
				"char": 60,
				"name": "curl_fnmatch_callback",
				"comment": " callback type for wildcard downloading pattern matching. If the\n   string matches the pattern, return CURL_FNMATCHFUNC_MATCH value, etc.\n"
			},
			{
				"kind": "enum",
				"line": 286,
				"members": [
					{
						"kind": "enum member",
						"line": 287,
						"value": "0",
						"char": 3,
						"name": "set",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 288,
						"value": "1",
						"char": 3,
						"name": "current",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 289,
						"value": "2",
						"char": 3,
						"name": "end",
						"comment": "\n"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "CurlSeekPos",
				"comment": "seek whence...\n"
			},
			{
				"kind": "enum",
				"line": 293,
				"members": [
					{
						"kind": "enum member",
						"line": 294,
						"value": "0",
						"char": 3,
						"name": "ok",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 295,
						"value": "1",
						"char": 3,
						"name": "fail",
						"comment": " fail the entire transfer\n"
					},
					{
						"kind": "enum member",
						"line": 296,
						"value": "2",
						"char": 3,
						"name": "cantseek",
						"comment": " tell libcurl seeking can't be done, so\n               libcurl might try other means instead\n"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "CurlSeek",
				"comment": " These are the return codes for the seek callbacks\n"
			},
			{
				"kind": "alias",
				"line": 301,
				"deco": "PFPvliZi",
				"char": 67,
				"name": "curl_seek_callback",
				"comment": "\n"
			},
			{
				"kind": "enum",
				"line": 304,
				"members": [
					{
						"kind": "enum member",
						"line": 307,
						"value": "268435456",
						"char": 3,
						"name": "abort",
						"comment": " This is a return code for the read callback that, when returned, will\n     signal libcurl to immediately abort the current transfer.\n"
					},
					{
						"kind": "enum member",
						"line": 312,
						"value": "268435457",
						"char": 3,
						"name": "pause",
						"comment": " This is a return code for the read callback that, when returned,\n     will const signal libcurl to pause sending data on the current\n     transfer.\n"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "CurlReadFunc",
				"comment": "\n"
			},
			{
				"kind": "alias",
				"line": 316,
				"deco": "PFPammPvZm",
				"char": 81,
				"name": "curl_read_callback",
				"comment": "\n"
			},
			{
				"kind": "enum",
				"line": 319,
				"members": [
					{
						"kind": "enum member",
						"line": 320,
						"value": "0",
						"char": 5,
						"name": "ipcxn",
						"comment": " socket created for a specific IP connection\n"
					},
					{
						"kind": "enum member",
						"line": 321,
						"value": "1",
						"char": 5,
						"name": "last",
						"comment": " never use\n"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "CurlSockType",
				"comment": "\n"
			},
			{
				"kind": "alias",
				"line": 324,
				"deco": "i",
				"char": 11,
				"name": "curlsocktype",
				"comment": "\n"
			},
			{
				"kind": "alias",
				"line": 327,
				"deco": "PFPvE3std6socket8socket_tiZi",
				"char": 79,
				"name": "curl_sockopt_callback",
				"comment": "\n"
			},
			{
				"kind": "struct",
				"line": 331,
				"members": [
					{
						"kind": "variable",
						"line": 333,
						"deco": "i",
						"char": 9,
						"name": "family",
						"comment": "\n",
						"offset": 0
					},
					{
						"kind": "variable",
						"line": 334,
						"deco": "i",
						"char": 9,
						"name": "socktype",
						"comment": "\n",
						"offset": 4
					},
					{
						"kind": "variable",
						"line": 335,
						"deco": "i",
						"char": 9,
						"name": "protocol",
						"comment": "\n",
						"offset": 8
					},
					{
						"kind": "variable",
						"line": 336,
						"deco": "k",
						"char": 10,
						"name": "addrlen",
						"comment": " addrlen was a socklen_t type before 7.18.0 but it\n                     turned really ugly and painful on the systems that\n                     lack this type\n",
						"offset": 12
					},
					{
						"kind": "variable",
						"line": 339,
						"deco": "S4core3sys5posix3sys6socket8sockaddr",
						"char": 14,
						"name": "addr",
						"comment": "\n",
						"offset": 16
					}
				],
				"char": 12,
				"name": "curl_sockaddr",
				"comment": " addrlen was a socklen_t type before 7.18.0 but it turned really\n   ugly and painful on the systems that lack this type\n"
			},
			{
				"kind": "alias",
				"line": 343,
				"deco": "PFPviPS3etc1c4curl13curl_sockaddrZE3std6socket8socket_t",
				"char": 91,
				"name": "curl_opensocket_callback",
				"comment": "\n"
			},
			{
				"kind": "enum",
				"line": 346,
				"members": [
					{
						"kind": "enum member",
						"line": 348,
						"value": "0",
						"char": 5,
						"name": "ok",
						"comment": " I/O operation successful\n"
					},
					{
						"kind": "enum member",
						"line": 349,
						"value": "1",
						"char": 5,
						"name": "unknowncmd",
						"comment": " command was unknown to callback\n"
					},
					{
						"kind": "enum member",
						"line": 350,
						"value": "2",
						"char": 5,
						"name": "failrestart",
						"comment": " failed to restart the read\n"
					},
					{
						"kind": "enum member",
						"line": 351,
						"value": "3",
						"char": 5,
						"name": "last",
						"comment": " never use\n"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "CurlIoError",
				"comment": "\n"
			},
			{
				"kind": "alias",
				"line": 354,
				"deco": "i",
				"char": 11,
				"name": "curlioerr",
				"comment": "\n"
			},
			{
				"kind": "enum",
				"line": 357,
				"members": [
					{
						"kind": "enum member",
						"line": 358,
						"value": "0",
						"char": 5,
						"name": "nop",
						"comment": " command was unknown to callback\n"
					},
					{
						"kind": "enum member",
						"line": 359,
						"value": "1",
						"char": 5,
						"name": "restartread",
						"comment": " failed to restart the read\n"
					},
					{
						"kind": "enum member",
						"line": 360,
						"value": "2",
						"char": 5,
						"name": "last",
						"comment": " never use\n"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "CurlIoCmd",
				"comment": "\n"
			},
			{
				"kind": "alias",
				"line": 363,
				"deco": "i",
				"char": 11,
				"name": "curliocmd",
				"comment": "\n"
			},
			{
				"kind": "alias",
				"line": 366,
				"deco": "PFPviPvZi",
				"char": 64,
				"name": "curl_ioctl_callback",
				"comment": "\n"
			},
			{
				"kind": "alias",
				"line": 374,
				"deco": "PFmZPv",
				"char": 35,
				"name": "curl_malloc_callback",
				"comment": " The following typedef's are signatures of malloc, free, realloc, strdup and\n calloc respectively.  Function pointers of these types can be passed to the\n curl_global_init_mem() function to set user defined memory management\n callback routines.\n"
			},
			{
				"kind": "alias",
				"line": 376,
				"deco": "PFPvZv",
				"char": 32,
				"name": "curl_free_callback",
				"comment": "ditto\n"
			},
			{
				"kind": "alias",
				"line": 378,
				"deco": "PFPvmZPv",
				"char": 46,
				"name": "curl_realloc_callback",
				"comment": "ditto\n"
			},
			{
				"kind": "alias",
				"line": 380,
				"deco": "PFPaZPa",
				"char": 33,
				"name": "curl_strdup_callback",
				"comment": "ditto\n"
			},
			{
				"kind": "alias",
				"line": 382,
				"deco": "PFmmZPv",
				"char": 49,
				"name": "curl_calloc_callback",
				"comment": "ditto\n"
			},
			{
				"kind": "enum",
				"line": 385,
				"members": [
					{
						"kind": "enum member",
						"line": 386,
						"value": "0",
						"char": 5,
						"name": "text",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 387,
						"value": "1",
						"char": 5,
						"name": "header_in",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 388,
						"value": "2",
						"char": 5,
						"name": "header_out",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 389,
						"value": "3",
						"char": 5,
						"name": "data_in",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 390,
						"value": "4",
						"char": 5,
						"name": "data_out",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 391,
						"value": "5",
						"char": 5,
						"name": "ssl_data_in",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 392,
						"value": "6",
						"char": 5,
						"name": "ssl_data_out",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 393,
						"value": "7",
						"char": 5,
						"name": "end",
						"comment": "\n"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "CurlCallbackInfo",
				"comment": " the kind of data that is passed to information_callback\n"
			},
			{
				"kind": "alias",
				"line": 396,
				"deco": "i",
				"char": 11,
				"name": "curl_infotype",
				"comment": "\n"
			},
			{
				"kind": "alias",
				"line": 404,
				"deco": "PFPviPamPvZi",
				"char": 22,
				"name": "curl_debug_callback",
				"comment": "\n"
			},
			{
				"kind": "enum",
				"line": 412,
				"members": [
					{
						"kind": "enum member",
						"line": 414,
						"value": "0",
						"char": 5,
						"name": "ok",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 415,
						"value": "1",
						"char": 5,
						"name": "unsupported_protocol",
						"comment": " 1\n"
					},
					{
						"kind": "enum member",
						"line": 416,
						"value": "2",
						"char": 5,
						"name": "failed_init",
						"comment": " 2\n"
					},
					{
						"kind": "enum member",
						"line": 417,
						"value": "3",
						"char": 5,
						"name": "url_malformat",
						"comment": " 3\n"
					},
					{
						"kind": "enum member",
						"line": 418,
						"value": "4",
						"char": 5,
						"name": "obsolete4",
						"comment": " 4 - NOT USED\n"
					},
					{
						"kind": "enum member",
						"line": 419,
						"value": "5",
						"char": 5,
						"name": "couldnt_resolve_proxy",
						"comment": " 5\n"
					},
					{
						"kind": "enum member",
						"line": 420,
						"value": "6",
						"char": 5,
						"name": "couldnt_resolve_host",
						"comment": " 6\n"
					},
					{
						"kind": "enum member",
						"line": 421,
						"value": "7",
						"char": 5,
						"name": "couldnt_connect",
						"comment": " 7\n"
					},
					{
						"kind": "enum member",
						"line": 422,
						"value": "8",
						"char": 5,
						"name": "ftp_weird_server_reply",
						"comment": " 8\n"
					},
					{
						"kind": "enum member",
						"line": 423,
						"value": "9",
						"char": 5,
						"name": "remote_access_denied",
						"comment": " 9 a service was denied by the server\n                                    due to lack of access - when login fails\n                                    this is not returned.\n"
					},
					{
						"kind": "enum member",
						"line": 426,
						"value": "10",
						"char": 5,
						"name": "obsolete10",
						"comment": " 10 - NOT USED\n"
					},
					{
						"kind": "enum member",
						"line": 427,
						"value": "11",
						"char": 5,
						"name": "ftp_weird_pass_reply",
						"comment": " 11\n"
					},
					{
						"kind": "enum member",
						"line": 428,
						"value": "12",
						"char": 5,
						"name": "obsolete12",
						"comment": " 12 - NOT USED\n"
					},
					{
						"kind": "enum member",
						"line": 429,
						"value": "13",
						"char": 5,
						"name": "ftp_weird_pasv_reply",
						"comment": " 13\n"
					},
					{
						"kind": "enum member",
						"line": 430,
						"value": "14",
						"char": 5,
						"name": "ftp_weird_227_format",
						"comment": " 14\n"
					},
					{
						"kind": "enum member",
						"line": 431,
						"value": "15",
						"char": 5,
						"name": "ftp_cant_get_host",
						"comment": " 15\n"
					},
					{
						"kind": "enum member",
						"line": 432,
						"value": "16",
						"char": 5,
						"name": "obsolete16",
						"comment": " 16 - NOT USED\n"
					},
					{
						"kind": "enum member",
						"line": 433,
						"value": "17",
						"char": 5,
						"name": "ftp_couldnt_set_type",
						"comment": " 17\n"
					},
					{
						"kind": "enum member",
						"line": 434,
						"value": "18",
						"char": 5,
						"name": "partial_file",
						"comment": " 18\n"
					},
					{
						"kind": "enum member",
						"line": 435,
						"value": "19",
						"char": 5,
						"name": "ftp_couldnt_retr_file",
						"comment": " 19\n"
					},
					{
						"kind": "enum member",
						"line": 436,
						"value": "20",
						"char": 5,
						"name": "obsolete20",
						"comment": " 20 - NOT USED\n"
					},
					{
						"kind": "enum member",
						"line": 437,
						"value": "21",
						"char": 5,
						"name": "quote_error",
						"comment": " 21 - quote command failure\n"
					},
					{
						"kind": "enum member",
						"line": 438,
						"value": "22",
						"char": 5,
						"name": "http_returned_error",
						"comment": " 22\n"
					},
					{
						"kind": "enum member",
						"line": 439,
						"value": "23",
						"char": 5,
						"name": "write_error",
						"comment": " 23\n"
					},
					{
						"kind": "enum member",
						"line": 440,
						"value": "24",
						"char": 5,
						"name": "obsolete24",
						"comment": " 24 - NOT USED\n"
					},
					{
						"kind": "enum member",
						"line": 441,
						"value": "25",
						"char": 5,
						"name": "upload_failed",
						"comment": " 25 - failed upload \"command\"\n"
					},
					{
						"kind": "enum member",
						"line": 442,
						"value": "26",
						"char": 5,
						"name": "read_error",
						"comment": " 26 - couldn't open/read from file\n"
					},
					{
						"kind": "enum member",
						"line": 443,
						"value": "27",
						"char": 5,
						"name": "out_of_memory",
						"comment": " 27\n"
					},
					{
						"kind": "enum member",
						"line": 448,
						"value": "28",
						"char": 5,
						"name": "operation_timedout",
						"comment": " Note: CURLE_OUT_OF_MEMORY may sometimes indicate a conversion error\n             instead of a memory allocation error if CURL_DOES_CONVERSIONS\n             is defined\n\n 28 - the timeout time was reached\n"
					},
					{
						"kind": "enum member",
						"line": 449,
						"value": "29",
						"char": 5,
						"name": "obsolete29",
						"comment": " 29 - NOT USED\n"
					},
					{
						"kind": "enum member",
						"line": 450,
						"value": "30",
						"char": 5,
						"name": "ftp_port_failed",
						"comment": " 30 - FTP PORT operation failed\n"
					},
					{
						"kind": "enum member",
						"line": 451,
						"value": "31",
						"char": 5,
						"name": "ftp_couldnt_use_rest",
						"comment": " 31 - the REST command failed\n"
					},
					{
						"kind": "enum member",
						"line": 452,
						"value": "32",
						"char": 5,
						"name": "obsolete32",
						"comment": " 32 - NOT USED\n"
					},
					{
						"kind": "enum member",
						"line": 453,
						"value": "33",
						"char": 5,
						"name": "range_error",
						"comment": " 33 - RANGE \"command\" didn't work\n"
					},
					{
						"kind": "enum member",
						"line": 454,
						"value": "34",
						"char": 5,
						"name": "http_post_error",
						"comment": " 34\n"
					},
					{
						"kind": "enum member",
						"line": 455,
						"value": "35",
						"char": 5,
						"name": "ssl_connect_error",
						"comment": " 35 - wrong when connecting with SSL\n"
					},
					{
						"kind": "enum member",
						"line": 456,
						"value": "36",
						"char": 5,
						"name": "bad_download_resume",
						"comment": " 36 - couldn't resume download\n"
					},
					{
						"kind": "enum member",
						"line": 457,
						"value": "37",
						"char": 5,
						"name": "file_couldnt_read_file",
						"comment": " 37\n"
					},
					{
						"kind": "enum member",
						"line": 458,
						"value": "38",
						"char": 5,
						"name": "ldap_cannot_bind",
						"comment": " 38\n"
					},
					{
						"kind": "enum member",
						"line": 459,
						"value": "39",
						"char": 5,
						"name": "ldap_search_failed",
						"comment": " 39\n"
					},
					{
						"kind": "enum member",
						"line": 460,
						"value": "40",
						"char": 5,
						"name": "obsolete40",
						"comment": " 40 - NOT USED\n"
					},
					{
						"kind": "enum member",
						"line": 461,
						"value": "41",
						"char": 5,
						"name": "function_not_found",
						"comment": " 41\n"
					},
					{
						"kind": "enum member",
						"line": 462,
						"value": "42",
						"char": 5,
						"name": "aborted_by_callback",
						"comment": " 42\n"
					},
					{
						"kind": "enum member",
						"line": 463,
						"value": "43",
						"char": 5,
						"name": "bad_function_argument",
						"comment": " 43\n"
					},
					{
						"kind": "enum member",
						"line": 464,
						"value": "44",
						"char": 5,
						"name": "obsolete44",
						"comment": " 44 - NOT USED\n"
					},
					{
						"kind": "enum member",
						"line": 465,
						"value": "45",
						"char": 5,
						"name": "interface_failed",
						"comment": " 45 - CURLOPT_INTERFACE failed\n"
					},
					{
						"kind": "enum member",
						"line": 466,
						"value": "46",
						"char": 5,
						"name": "obsolete46",
						"comment": " 46 - NOT USED\n"
					},
					{
						"kind": "enum member",
						"line": 467,
						"value": "47",
						"char": 5,
						"name": "too_many_redirects",
						"comment": " 47 - catch endless re-direct loops\n"
					},
					{
						"kind": "enum member",
						"line": 468,
						"value": "48",
						"char": 5,
						"name": "unknown_telnet_option",
						"comment": " 48 - User specified an unknown option\n"
					},
					{
						"kind": "enum member",
						"line": 469,
						"value": "49",
						"char": 5,
						"name": "telnet_option_syntax",
						"comment": " 49 - Malformed telnet option\n"
					},
					{
						"kind": "enum member",
						"line": 470,
						"value": "50",
						"char": 5,
						"name": "obsolete50",
						"comment": " 50 - NOT USED\n"
					},
					{
						"kind": "enum member",
						"line": 471,
						"value": "51",
						"char": 5,
						"name": "peer_failed_verification",
						"comment": " 51 - peer's certificate or fingerprint\n                                         wasn't verified fine\n"
					},
					{
						"kind": "enum member",
						"line": 473,
						"value": "52",
						"char": 5,
						"name": "got_nothing",
						"comment": " 52 - when this is a specific error\n"
					},
					{
						"kind": "enum member",
						"line": 474,
						"value": "53",
						"char": 5,
						"name": "ssl_engine_notfound",
						"comment": " 53 - SSL crypto engine not found\n"
					},
					{
						"kind": "enum member",
						"line": 475,
						"value": "54",
						"char": 5,
						"name": "ssl_engine_setfailed",
						"comment": " 54 - can not set SSL crypto engine as default\n"
					},
					{
						"kind": "enum member",
						"line": 476,
						"value": "55",
						"char": 5,
						"name": "send_error",
						"comment": " 55 - failed sending network data\n"
					},
					{
						"kind": "enum member",
						"line": 477,
						"value": "56",
						"char": 5,
						"name": "recv_error",
						"comment": " 56 - failure in receiving network data\n"
					},
					{
						"kind": "enum member",
						"line": 478,
						"value": "57",
						"char": 5,
						"name": "obsolete57",
						"comment": " 57 - NOT IN USE\n"
					},
					{
						"kind": "enum member",
						"line": 479,
						"value": "58",
						"char": 5,
						"name": "ssl_certproblem",
						"comment": " 58 - problem with the local certificate\n"
					},
					{
						"kind": "enum member",
						"line": 480,
						"value": "59",
						"char": 5,
						"name": "ssl_cipher",
						"comment": " 59 - couldn't use specified cipher\n"
					},
					{
						"kind": "enum member",
						"line": 481,
						"value": "60",
						"char": 5,
						"name": "ssl_cacert",
						"comment": " 60 - problem with the CA cert (path?)\n"
					},
					{
						"kind": "enum member",
						"line": 482,
						"value": "61",
						"char": 5,
						"name": "bad_content_encoding",
						"comment": " 61 - Unrecognized transfer encoding\n"
					},
					{
						"kind": "enum member",
						"line": 483,
						"value": "62",
						"char": 5,
						"name": "ldap_invalid_url",
						"comment": " 62 - Invalid LDAP URL\n"
					},
					{
						"kind": "enum member",
						"line": 484,
						"value": "63",
						"char": 5,
						"name": "filesize_exceeded",
						"comment": " 63 - Maximum file size exceeded\n"
					},
					{
						"kind": "enum member",
						"line": 485,
						"value": "64",
						"char": 5,
						"name": "use_ssl_failed",
						"comment": " 64 - Requested FTP SSL level failed\n"
					},
					{
						"kind": "enum member",
						"line": 486,
						"value": "65",
						"char": 5,
						"name": "send_fail_rewind",
						"comment": " 65 - Sending the data requires a rewind that failed\n"
					},
					{
						"kind": "enum member",
						"line": 487,
						"value": "66",
						"char": 5,
						"name": "ssl_engine_initfailed",
						"comment": " 66 - failed to initialise ENGINE\n"
					},
					{
						"kind": "enum member",
						"line": 488,
						"value": "67",
						"char": 5,
						"name": "login_denied",
						"comment": " 67 - user, password or similar was not accepted and we failed to login\n"
					},
					{
						"kind": "enum member",
						"line": 489,
						"value": "68",
						"char": 5,
						"name": "tftp_notfound",
						"comment": " 68 - file not found on server\n"
					},
					{
						"kind": "enum member",
						"line": 490,
						"value": "69",
						"char": 5,
						"name": "tftp_perm",
						"comment": " 69 - permission problem on server\n"
					},
					{
						"kind": "enum member",
						"line": 491,
						"value": "70",
						"char": 5,
						"name": "remote_disk_full",
						"comment": " 70 - out of disk space on server\n"
					},
					{
						"kind": "enum member",
						"line": 492,
						"value": "71",
						"char": 5,
						"name": "tftp_illegal",
						"comment": " 71 - Illegal TFTP operation\n"
					},
					{
						"kind": "enum member",
						"line": 493,
						"value": "72",
						"char": 5,
						"name": "tftp_unknownid",
						"comment": " 72 - Unknown transfer ID\n"
					},
					{
						"kind": "enum member",
						"line": 494,
						"value": "73",
						"char": 5,
						"name": "remote_file_exists",
						"comment": " 73 - File already exists\n"
					},
					{
						"kind": "enum member",
						"line": 495,
						"value": "74",
						"char": 5,
						"name": "tftp_nosuchuser",
						"comment": " 74 - No such user\n"
					},
					{
						"kind": "enum member",
						"line": 496,
						"value": "75",
						"char": 5,
						"name": "conv_failed",
						"comment": " 75 - conversion failed\n"
					},
					{
						"kind": "enum member",
						"line": 497,
						"value": "76",
						"char": 5,
						"name": "conv_reqd",
						"comment": " 76 - caller must register conversion\n                                    callbacks using curl_easy_setopt options\n                                    CURLOPT_CONV_FROM_NETWORK_FUNCTION,\n                                    CURLOPT_CONV_TO_NETWORK_FUNCTION, and\n                                    CURLOPT_CONV_FROM_UTF8_FUNCTION\n"
					},
					{
						"kind": "enum member",
						"line": 502,
						"value": "77",
						"char": 5,
						"name": "ssl_cacert_badfile",
						"comment": " 77 - could not load CACERT file, missing  or wrong format\n"
					},
					{
						"kind": "enum member",
						"line": 503,
						"value": "78",
						"char": 5,
						"name": "remote_file_not_found",
						"comment": " 78 - remote file not found\n"
					},
					{
						"kind": "enum member",
						"line": 504,
						"value": "79",
						"char": 5,
						"name": "ssh",
						"comment": " 79 - error from the SSH layer, somewhat\n                                    generic so the error message will be of\n                                    interest when this has happened\n"
					},
					{
						"kind": "enum member",
						"line": 507,
						"value": "80",
						"char": 5,
						"name": "ssl_shutdown_failed",
						"comment": " 80 - Failed to shut down the SSL connection\n"
					},
					{
						"kind": "enum member",
						"line": 508,
						"value": "81",
						"char": 5,
						"name": "again",
						"comment": " 81 - socket is not ready for send/recv,\n                                    wait till it's ready and try again (Added\n                                    in 7.18.2)\n"
					},
					{
						"kind": "enum member",
						"line": 511,
						"value": "82",
						"char": 5,
						"name": "ssl_crl_badfile",
						"comment": " 82 - could not load CRL file, missing or wrong format (Added in 7.19.0)\n"
					},
					{
						"kind": "enum member",
						"line": 512,
						"value": "83",
						"char": 5,
						"name": "ssl_issuer_error",
						"comment": " 83 - Issuer check failed.  (Added in 7.19.0)\n"
					},
					{
						"kind": "enum member",
						"line": 513,
						"value": "84",
						"char": 5,
						"name": "ftp_pret_failed",
						"comment": " 84 - a PRET command failed\n"
					},
					{
						"kind": "enum member",
						"line": 514,
						"value": "85",
						"char": 5,
						"name": "rtsp_cseq_error",
						"comment": " 85 - mismatch of RTSP CSeq numbers\n"
					},
					{
						"kind": "enum member",
						"line": 515,
						"value": "86",
						"char": 5,
						"name": "rtsp_session_error",
						"comment": " 86 - mismatch of RTSP Session Identifiers\n"
					},
					{
						"kind": "enum member",
						"line": 516,
						"value": "87",
						"char": 5,
						"name": "ftp_bad_file_list",
						"comment": " 87 - unable to parse FTP file list\n"
					},
					{
						"kind": "enum member",
						"line": 517,
						"value": "88",
						"char": 5,
						"name": "chunk_failed",
						"comment": " 88 - chunk callback reported error\n"
					},
					{
						"kind": "enum member",
						"line": 518,
						"value": "89",
						"char": 5,
						"name": "curl_last",
						"comment": " never use!\n"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "CurlError",
				"comment": " All possible error codes from all sorts of curl functions. Future versions\n   may return other values, stay prepared.\n\n   Always add new return codes last. Never *EVER* remove any. The return\n   codes must remain the same!\n"
			},
			{
				"kind": "alias",
				"line": 521,
				"deco": "i",
				"char": 11,
				"name": "CURLcode",
				"comment": "\n"
			},
			{
				"kind": "alias",
				"line": 524,
				"deco": "PFPamZi",
				"char": 54,
				"name": "curl_conv_callback",
				"comment": " This prototype applies to all conversion callbacks\n"
			},
			{
				"kind": "alias",
				"line": 531,
				"deco": "PFPvPvPvZi",
				"char": 27,
				"name": "curl_ssl_ctx_callback",
				"comment": " actually an OpenSSL SSL_CTX\n"
			},
			{
				"kind": "enum",
				"line": 534,
				"members": [
					{
						"kind": "enum member",
						"line": 535,
						"value": "0",
						"char": 5,
						"name": "http",
						"comment": " added in 7.10, new in 7.19.4 default is to use CONNECT HTTP/1.1\n"
					},
					{
						"kind": "enum member",
						"line": 536,
						"value": "1",
						"char": 5,
						"name": "http_1_0",
						"comment": " added in 7.19.4, force to use CONNECT HTTP/1.0\n"
					},
					{
						"kind": "enum member",
						"line": 537,
						"value": "4",
						"char": 5,
						"name": "socks4",
						"comment": " support added in 7.15.2, enum existed already in 7.10\n"
					},
					{
						"kind": "enum member",
						"line": 538,
						"value": "5",
						"char": 5,
						"name": "socks5",
						"comment": " added in 7.10\n"
					},
					{
						"kind": "enum member",
						"line": 539,
						"value": "6",
						"char": 5,
						"name": "socks4a",
						"comment": " added in 7.18.0\n"
					},
					{
						"kind": "enum member",
						"line": 540,
						"value": "7",
						"char": 5,
						"name": "socks5_hostname",
						"comment": " Use the SOCKS5 protocol but pass along the\n                         host name rather than the IP address. added\n                         in 7.18.0\n"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "CurlProxy",
				"comment": "\n"
			},
			{
				"kind": "alias",
				"line": 545,
				"deco": "i",
				"char": 11,
				"name": "curl_proxytype",
				"comment": "\n"
			},
			{
				"kind": "enum",
				"line": 548,
				"members": [
					{
						"kind": "enum member",
						"line": 550,
						"value": "1L",
						"char": 3,
						"name": "basic",
						"comment": " Basic (default)\n"
					},
					{
						"kind": "enum member",
						"line": 551,
						"value": "2L",
						"char": 3,
						"name": "digest",
						"comment": " Digest\n"
					},
					{
						"kind": "enum member",
						"line": 552,
						"value": "4L",
						"char": 3,
						"name": "gssnegotiate",
						"comment": " GSS-Negotiate\n"
					},
					{
						"kind": "enum member",
						"line": 553,
						"value": "8L",
						"char": 3,
						"name": "ntlm",
						"comment": " NTLM\n"
					},
					{
						"kind": "enum member",
						"line": 554,
						"value": "16L",
						"char": 3,
						"name": "digest_ie",
						"comment": " Digest with IE flavour\n"
					},
					{
						"kind": "enum member",
						"line": 555,
						"value": "2147483648L",
						"char": 3,
						"name": "only",
						"comment": " used together with a single other\n                                type to force no auth or just that\n                                single type\n"
					},
					{
						"kind": "enum member",
						"line": 558,
						"value": "-17L",
						"char": 3,
						"name": "any",
						"comment": " all fine types set\n"
					},
					{
						"kind": "enum member",
						"line": 559,
						"value": "-18L",
						"char": 3,
						"name": "anysafe",
						"comment": "\n"
					}
				],
				"char": 1,
				"baseDeco": "l",
				"name": "CurlAuth",
				"comment": "\n"
			},
			{
				"kind": "enum",
				"line": 563,
				"members": [
					{
						"kind": "enum member",
						"line": 564,
						"value": "-1",
						"char": 3,
						"name": "any",
						"comment": " all types supported by the server\n"
					},
					{
						"kind": "enum member",
						"line": 565,
						"value": "0",
						"char": 3,
						"name": "none",
						"comment": " none allowed, silly but complete\n"
					},
					{
						"kind": "enum member",
						"line": 566,
						"value": "1",
						"char": 3,
						"name": "publickey",
						"comment": " public/private key files\n"
					},
					{
						"kind": "enum member",
						"line": 567,
						"value": "2",
						"char": 3,
						"name": "password",
						"comment": " password\n"
					},
					{
						"kind": "enum member",
						"line": 568,
						"value": "4",
						"char": 3,
						"name": "host",
						"comment": " host key files\n"
					},
					{
						"kind": "enum member",
						"line": 569,
						"value": "8",
						"char": 3,
						"name": "keyboard",
						"comment": " keyboard interactive\n"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "CurlSshAuth",
				"comment": "\n"
			},
			{
				"kind": "variable",
				"line": 573,
				"init": "256",
				"storageClass": [
					"enum"
				],
				"deco": "i",
				"char": 6,
				"name": "CURL_ERROR_SIZE",
				"comment": "\n"
			},
			{
				"kind": "enum",
				"line": 576,
				"members": [
					{
						"kind": "enum member",
						"line": 578,
						"value": "0",
						"char": 5,
						"name": "unknown",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 579,
						"value": "1",
						"char": 5,
						"name": "rsa1",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 580,
						"value": "2",
						"char": 5,
						"name": "rsa",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 581,
						"value": "3",
						"char": 5,
						"name": "dss",
						"comment": "\n"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "CurlKHType",
				"comment": " points to a zero-terminated string encoded with base64\n   if len is zero, otherwise to the \"raw\" data\n"
			},
			{
				"kind": "struct",
				"line": 584,
				"members": [
					{
						"kind": "variable",
						"line": 586,
						"deco": "Pa",
						"char": 11,
						"name": "key",
						"comment": " points to a zero-terminated string encoded with base64\n                  if len is zero, otherwise to the \"raw\" data\n",
						"offset": 0
					},
					{
						"kind": "variable",
						"line": 588,
						"deco": "m",
						"char": 12,
						"name": "len",
						"comment": "\n",
						"originalType": "size_t",
						"offset": 8
					},
					{
						"kind": "variable",
						"line": 589,
						"deco": "E3etc1c4curl10CurlKHType",
						"char": 16,
						"name": "keytype",
						"comment": "\n",
						"offset": 16
					}
				],
				"char": 12,
				"name": "curl_khkey",
				"comment": "\n"
			},
			{
				"kind": "enum",
				"line": 594,
				"members": [
					{
						"kind": "enum member",
						"line": 595,
						"value": "0",
						"char": 5,
						"name": "fine_add_to_file",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 596,
						"value": "1",
						"char": 5,
						"name": "fine",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 597,
						"value": "2",
						"char": 5,
						"name": "reject",
						"comment": " reject the connection, return an error\n"
					},
					{
						"kind": "enum member",
						"line": 598,
						"value": "3",
						"char": 5,
						"name": "defer",
						"comment": " do not accept it, but we can't answer right now so\n                this causes a CURLE_DEFER error but otherwise the\n                connection will be left intact etc\n"
					},
					{
						"kind": "enum member",
						"line": 601,
						"value": "4",
						"char": 5,
						"name": "last",
						"comment": " not for use, only a marker for last-in-list\n"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "CurlKHStat",
				"comment": " this is the set of return values expected from the curl_sshkeycallback\n   callback\n"
			},
			{
				"kind": "enum",
				"line": 605,
				"members": [
					{
						"kind": "enum member",
						"line": 606,
						"value": "0",
						"char": 5,
						"name": "ok",
						"comment": " match\n"
					},
					{
						"kind": "enum member",
						"line": 607,
						"value": "1",
						"char": 5,
						"name": "mismatch",
						"comment": " host found, key mismatch!\n"
					},
					{
						"kind": "enum member",
						"line": 608,
						"value": "2",
						"char": 5,
						"name": "missing",
						"comment": " no matching host/key found\n"
					},
					{
						"kind": "enum member",
						"line": 609,
						"value": "3",
						"char": 5,
						"name": "last",
						"comment": " not for use, only a marker for last-in-list\n"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "CurlKHMatch",
				"comment": " this is the set of status codes pass in to the callback\n"
			},
			{
				"kind": "alias",
				"line": 618,
				"deco": "PFPvPS3etc1c4curl10curl_khkeyPS3etc1c4curl10curl_khkeyE3etc1c4curl11CurlKHMatchPvZi",
				"char": 22,
				"name": "curl_sshkeycallback",
				"comment": "\n"
			},
			{
				"kind": "enum",
				"line": 621,
				"members": [
					{
						"kind": "enum member",
						"line": 622,
						"value": "0",
						"char": 5,
						"name": "none",
						"comment": " do not attempt to use SSL\n"
					},
					{
						"kind": "enum member",
						"line": 623,
						"value": "1",
						"char": 5,
						"name": "tryssl",
						"comment": " try using SSL, proceed anyway otherwise\n"
					},
					{
						"kind": "enum member",
						"line": 624,
						"value": "2",
						"char": 5,
						"name": "control",
						"comment": " SSL for the control connection or fail\n"
					},
					{
						"kind": "enum member",
						"line": 625,
						"value": "3",
						"char": 5,
						"name": "all",
						"comment": " SSL for all communication or fail\n"
					},
					{
						"kind": "enum member",
						"line": 626,
						"value": "4",
						"char": 5,
						"name": "last",
						"comment": " not an option, never use\n"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "CurlUseSSL",
				"comment": " parameter for the CURLOPT_USE_SSL option\n"
			},
			{
				"kind": "alias",
				"line": 629,
				"deco": "i",
				"char": 11,
				"name": "curl_usessl",
				"comment": "\n"
			},
			{
				"kind": "enum",
				"line": 632,
				"members": [
					{
						"kind": "enum member",
						"line": 633,
						"value": "0",
						"char": 5,
						"name": "ccc_none",
						"comment": " do not send CCC\n"
					},
					{
						"kind": "enum member",
						"line": 634,
						"value": "1",
						"char": 5,
						"name": "ccc_passive",
						"comment": " Let the server initiate the shutdown\n"
					},
					{
						"kind": "enum member",
						"line": 635,
						"value": "2",
						"char": 5,
						"name": "ccc_active",
						"comment": " Initiate the shutdown\n"
					},
					{
						"kind": "enum member",
						"line": 636,
						"value": "3",
						"char": 5,
						"name": "ccc_last",
						"comment": " not an option, never use\n"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "CurlFtpSSL",
				"comment": " parameter for the CURLOPT_FTP_SSL_CCC option\n"
			},
			{
				"kind": "alias",
				"line": 639,
				"deco": "i",
				"char": 11,
				"name": "curl_ftpccc",
				"comment": "\n"
			},
			{
				"kind": "enum",
				"line": 642,
				"members": [
					{
						"kind": "enum member",
						"line": 643,
						"value": "0",
						"char": 5,
						"name": "defaultauth",
						"comment": " let libcurl decide\n"
					},
					{
						"kind": "enum member",
						"line": 644,
						"value": "1",
						"char": 5,
						"name": "ssl",
						"comment": " use \"AUTH SSL\"\n"
					},
					{
						"kind": "enum member",
						"line": 645,
						"value": "2",
						"char": 5,
						"name": "tls",
						"comment": " use \"AUTH TLS\"\n"
					},
					{
						"kind": "enum member",
						"line": 646,
						"value": "3",
						"char": 5,
						"name": "last",
						"comment": " not an option, never use\n"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "CurlFtpAuth",
				"comment": " parameter for the CURLOPT_FTPSSLAUTH option\n"
			},
			{
				"kind": "alias",
				"line": 649,
				"deco": "i",
				"char": 11,
				"name": "curl_ftpauth",
				"comment": "\n"
			},
			{
				"kind": "enum",
				"line": 652,
				"members": [
					{
						"kind": "enum member",
						"line": 653,
						"value": "0",
						"char": 5,
						"name": "create_dir_none",
						"comment": " do NOT create missing dirs!\n"
					},
					{
						"kind": "enum member",
						"line": 654,
						"value": "1",
						"char": 5,
						"name": "create_dir",
						"comment": " (FTP/SFTP) if CWD fails, try MKD and then CWD again if MKD\n                          succeeded, for SFTP this does similar magic\n"
					},
					{
						"kind": "enum member",
						"line": 656,
						"value": "2",
						"char": 5,
						"name": "create_dir_retry",
						"comment": " (FTP only) if CWD fails, try MKD and then CWD again even if MKD\n                          failed!\n"
					},
					{
						"kind": "enum member",
						"line": 658,
						"value": "3",
						"char": 5,
						"name": "create_dir_last",
						"comment": " not an option, never use\n"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "CurlFtp",
				"comment": " parameter for the CURLOPT_FTP_CREATE_MISSING_DIRS option\n"
			},
			{
				"kind": "alias",
				"line": 661,
				"deco": "i",
				"char": 11,
				"name": "curl_ftpcreatedir",
				"comment": "\n"
			},
			{
				"kind": "enum",
				"line": 664,
				"members": [
					{
						"kind": "enum member",
						"line": 665,
						"value": "0",
						"char": 5,
						"name": "defaultmethod",
						"comment": " let libcurl pick\n"
					},
					{
						"kind": "enum member",
						"line": 666,
						"value": "1",
						"char": 5,
						"name": "multicwd",
						"comment": " single CWD operation for each path part\n"
					},
					{
						"kind": "enum member",
						"line": 667,
						"value": "2",
						"char": 5,
						"name": "nocwd",
						"comment": " no CWD at all\n"
					},
					{
						"kind": "enum member",
						"line": 668,
						"value": "3",
						"char": 5,
						"name": "singlecwd",
						"comment": " one CWD to full dir, then work on file\n"
					},
					{
						"kind": "enum member",
						"line": 669,
						"value": "4",
						"char": 5,
						"name": "last",
						"comment": " not an option, never use\n"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "CurlFtpMethod",
				"comment": " parameter for the CURLOPT_FTP_FILEMETHOD option\n"
			},
			{
				"kind": "alias",
				"line": 672,
				"deco": "i",
				"char": 11,
				"name": "curl_ftpmethod",
				"comment": "\n"
			},
			{
				"kind": "enum",
				"line": 675,
				"members": [
					{
						"kind": "enum member",
						"line": 676,
						"value": "1",
						"char": 3,
						"name": "http",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 677,
						"value": "2",
						"char": 3,
						"name": "https",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 678,
						"value": "4",
						"char": 3,
						"name": "ftp",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 679,
						"value": "8",
						"char": 3,
						"name": "ftps",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 680,
						"value": "16",
						"char": 3,
						"name": "scp",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 681,
						"value": "32",
						"char": 3,
						"name": "sftp",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 682,
						"value": "64",
						"char": 3,
						"name": "telnet",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 683,
						"value": "128",
						"char": 3,
						"name": "ldap",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 684,
						"value": "256",
						"char": 3,
						"name": "ldaps",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 685,
						"value": "512",
						"char": 3,
						"name": "dict",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 686,
						"value": "1024",
						"char": 3,
						"name": "file",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 687,
						"value": "2048",
						"char": 3,
						"name": "tftp",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 688,
						"value": "4096",
						"char": 3,
						"name": "imap",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 689,
						"value": "8192",
						"char": 3,
						"name": "imaps",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 690,
						"value": "16384",
						"char": 3,
						"name": "pop3",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 691,
						"value": "32768",
						"char": 3,
						"name": "pop3s",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 692,
						"value": "65536",
						"char": 3,
						"name": "smtp",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 693,
						"value": "131072",
						"char": 3,
						"name": "smtps",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 694,
						"value": "262144",
						"char": 3,
						"name": "rtsp",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 695,
						"value": "524288",
						"char": 3,
						"name": "rtmp",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 696,
						"value": "1048576",
						"char": 3,
						"name": "rtmpt",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 697,
						"value": "2097152",
						"char": 3,
						"name": "rtmpe",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 698,
						"value": "4194304",
						"char": 3,
						"name": "rtmpte",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 699,
						"value": "8388608",
						"char": 3,
						"name": "rtmps",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 700,
						"value": "16777216",
						"char": 3,
						"name": "rtmpts",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 701,
						"value": "33554432",
						"char": 3,
						"name": "gopher",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 702,
						"value": "-1",
						"char": 3,
						"name": "all",
						"comment": " enable everything\n"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "CurlProto",
				"comment": " CURLPROTO_ defines are for the CURLOPT_*PROTOCOLS options\n"
			},
			{
				"kind": "variable",
				"line": 707,
				"init": "0",
				"storageClass": [
					"enum"
				],
				"deco": "i",
				"char": 6,
				"name": "CURLOPTTYPE_LONG",
				"comment": " long may be 32 or 64 bits, but we should never depend on anything else\n   but 32\n"
			},
			{
				"kind": "variable",
				"line": 709,
				"init": "10000",
				"storageClass": [
					"enum"
				],
				"deco": "i",
				"char": 6,
				"name": "CURLOPTTYPE_OBJECTPOINT",
				"comment": "ditto\n"
			},
			{
				"kind": "variable",
				"line": 711,
				"init": "20000",
				"storageClass": [
					"enum"
				],
				"deco": "i",
				"char": 6,
				"name": "CURLOPTTYPE_FUNCTIONPOINT",
				"comment": "ditto\n"
			},
			{
				"kind": "variable",
				"line": 714,
				"init": "30000",
				"storageClass": [
					"enum"
				],
				"deco": "i",
				"char": 6,
				"name": "CURLOPTTYPE_OFF_T",
				"comment": "ditto\n"
			},
			{
				"kind": "alias",
				"line": 720,
				"char": 24,
				"name": "LONG",
				"comment": " name is uppercase CURLOPT_<name>,\n   type is one of the defined CURLOPTTYPE_<type>\n   number is unique identifier\n\n The macro \"##\" is ISO C, we assume pre-ISO C doesn't support it.\n"
			},
			{
				"kind": "alias",
				"line": 722,
				"char": 31,
				"name": "OBJECTPOINT",
				"comment": "ditto\n"
			},
			{
				"kind": "alias",
				"line": 724,
				"char": 33,
				"name": "FUNCTIONPOINT",
				"comment": "ditto\n"
			},
			{
				"kind": "alias",
				"line": 727,
				"char": 25,
				"name": "OFF_T",
				"comment": "ditto\n"
			},
			{
				"kind": "enum",
				"line": 730,
				"members": [
					{
						"kind": "enum member",
						"line": 732,
						"value": "10001",
						"char": 3,
						"name": "file",
						"comment": " This is the FILE * or void * the regular output should be written to.\n"
					},
					{
						"kind": "enum member",
						"line": 734,
						"value": "10002",
						"char": 3,
						"name": "url",
						"comment": " The full URL to get/put\n"
					},
					{
						"kind": "enum member",
						"line": 736,
						"value": "3",
						"char": 3,
						"name": "port",
						"comment": " Port number to connect to, if other than default.\n"
					},
					{
						"kind": "enum member",
						"line": 738,
						"value": "10004",
						"char": 3,
						"name": "proxy",
						"comment": " Name of proxy to use.\n"
					},
					{
						"kind": "enum member",
						"line": 740,
						"value": "10005",
						"char": 3,
						"name": "userpwd",
						"comment": " \"name:password\" to use when fetching.\n"
					},
					{
						"kind": "enum member",
						"line": 742,
						"value": "10006",
						"char": 3,
						"name": "proxyuserpwd",
						"comment": " \"name:password\" to use with proxy.\n"
					},
					{
						"kind": "enum member",
						"line": 744,
						"value": "10007",
						"char": 3,
						"name": "range",
						"comment": " Range to get, specified as an ASCII string.\n"
					},
					{
						"kind": "enum member",
						"line": 748,
						"value": "10009",
						"char": 3,
						"name": "infile",
						"comment": " not used\n\n Specified file stream to upload from (use as input):\n"
					},
					{
						"kind": "enum member",
						"line": 751,
						"value": "10010",
						"char": 3,
						"name": "errorbuffer",
						"comment": " Buffer to receive error messages in, must be at least CURL_ERROR_SIZE\n bytes big. If this is not used, error messages go to stderr instead:\n"
					},
					{
						"kind": "enum member",
						"line": 754,
						"value": "20011",
						"char": 3,
						"name": "writefunction",
						"comment": " Function that will be called to store the output (instead of fwrite). The\n parameters will use fwrite() syntax, make sure to follow them.\n"
					},
					{
						"kind": "enum member",
						"line": 757,
						"value": "20012",
						"char": 3,
						"name": "readfunction",
						"comment": " Function that will be called to read the input (instead of fread). The\n parameters will use fread() syntax, make sure to follow them.\n"
					},
					{
						"kind": "enum member",
						"line": 759,
						"value": "13",
						"char": 3,
						"name": "timeout",
						"comment": " Time-out the read operation after this amount of seconds\n"
					},
					{
						"kind": "enum member",
						"line": 769,
						"value": "14",
						"char": 3,
						"name": "infilesize",
						"comment": " If the CURLOPT_INFILE is used, this can be used to inform libcurl about\n how large the file being sent really is. That allows better error\n checking and better verifies that the upload was successful. -1 means\n unknown size.\n\n For large file support, there is also a _LARGE version of the key\n which takes an off_t type, allowing platforms with larger off_t\n sizes to handle larger files.  See below for INFILESIZE_LARGE.\n"
					},
					{
						"kind": "enum member",
						"line": 771,
						"value": "10015",
						"char": 3,
						"name": "postfields",
						"comment": " POST static input fields.\n"
					},
					{
						"kind": "enum member",
						"line": 773,
						"value": "10016",
						"char": 3,
						"name": "referer",
						"comment": " Set the referrer page (needed by some CGIs)\n"
					},
					{
						"kind": "enum member",
						"line": 776,
						"value": "10017",
						"char": 3,
						"name": "ftpport",
						"comment": " Set the FTP PORT string (interface name, named or numerical IP address)\n     Use i.e '-' to use default address.\n"
					},
					{
						"kind": "enum member",
						"line": 778,
						"value": "10018",
						"char": 3,
						"name": "useragent",
						"comment": " Set the User-Agent string (examined by some CGIs)\n"
					},
					{
						"kind": "enum member",
						"line": 786,
						"value": "19",
						"char": 3,
						"name": "low_speed_limit",
						"comment": " If the download receives less than \"low speed limit\" bytes/second\n during \"low speed time\" seconds, the operations is aborted.\n You could i.e if you have a pretty high speed connection, abort if\n it is less than 2000 bytes/sec during 20 seconds.\n\n Set the \"low speed limit\"\n"
					},
					{
						"kind": "enum member",
						"line": 788,
						"value": "20",
						"char": 3,
						"name": "low_speed_time",
						"comment": " Set the \"low speed time\"\n"
					},
					{
						"kind": "enum member",
						"line": 795,
						"value": "21",
						"char": 3,
						"name": "resume_from",
						"comment": " Set the continuation offset.\n\n Note there is also a _LARGE version of this key which uses\n off_t types, allowing for large file offsets on platforms which\n use larger-than-32-bit off_t's.  Look below for RESUME_FROM_LARGE.\n"
					},
					{
						"kind": "enum member",
						"line": 797,
						"value": "10022",
						"char": 3,
						"name": "cookie",
						"comment": " Set cookie in request:\n"
					},
					{
						"kind": "enum member",
						"line": 799,
						"value": "10023",
						"char": 3,
						"name": "httpheader",
						"comment": " This points to a linked list of headers, struct curl_slist kind\n"
					},
					{
						"kind": "enum member",
						"line": 801,
						"value": "10024",
						"char": 3,
						"name": "httppost",
						"comment": " This points to a linked list of post entries, struct curl_httppost\n"
					},
					{
						"kind": "enum member",
						"line": 803,
						"value": "10025",
						"char": 3,
						"name": "sslcert",
						"comment": " name of the file keeping your private SSL-certificate\n"
					},
					{
						"kind": "enum member",
						"line": 805,
						"value": "10026",
						"char": 3,
						"name": "keypasswd",
						"comment": " password for the SSL or SSH private key\n"
					},
					{
						"kind": "enum member",
						"line": 807,
						"value": "27",
						"char": 3,
						"name": "crlf",
						"comment": " send TYPE parameter?\n"
					},
					{
						"kind": "enum member",
						"line": 809,
						"value": "10028",
						"char": 3,
						"name": "quote",
						"comment": " send linked-list of QUOTE commands\n"
					},
					{
						"kind": "enum member",
						"line": 812,
						"value": "10029",
						"char": 3,
						"name": "writeheader",
						"comment": " send FILE * or void * to store headers to, if you use a callback it\n     is simply passed to the callback unmodified\n"
					},
					{
						"kind": "enum member",
						"line": 815,
						"value": "10031",
						"char": 3,
						"name": "cookiefile",
						"comment": " point to a file to read the initial cookies from, also enables\n     \"cookie awareness\"\n"
					},
					{
						"kind": "enum member",
						"line": 818,
						"value": "32",
						"char": 3,
						"name": "sslversion",
						"comment": " What version to specifically try to use.\n     See CURL_SSLVERSION defines below.\n"
					},
					{
						"kind": "enum member",
						"line": 820,
						"value": "33",
						"char": 3,
						"name": "timecondition",
						"comment": " What kind of HTTP time condition to use, see defines\n"
					},
					{
						"kind": "enum member",
						"line": 823,
						"value": "34",
						"char": 3,
						"name": "timevalue",
						"comment": " Time to use with the above condition. Specified in number of seconds\n     since 1 Jan 1970\n"
					},
					{
						"kind": "enum member",
						"line": 830,
						"value": "10036",
						"char": 3,
						"name": "customrequest",
						"comment": " 35 = OBSOLETE\n\n Custom request, for customizing the get command like\n     HTTP: DELETE, TRACE and others\n     FTP: to use a different list command\n"
					},
					{
						"kind": "enum member",
						"line": 832,
						"value": "10037",
						"char": 3,
						"name": "stderr",
						"comment": " HTTP request, for odd commands like DELETE, TRACE and others\n"
					},
					{
						"kind": "enum member",
						"line": 836,
						"value": "10039",
						"char": 3,
						"name": "postquote",
						"comment": " 38 is not used\n\n send linked-list of post-transfer QUOTE commands\n"
					},
					{
						"kind": "enum member",
						"line": 839,
						"value": "10040",
						"char": 3,
						"name": "writeinfo",
						"comment": " Pass a pointer to string of the output using full variable-replacement\n     as described elsewhere.\n"
					},
					{
						"kind": "enum member",
						"line": 840,
						"value": "41",
						"char": 3,
						"name": "verbose",
						"comment": " talk a lot\n"
					},
					{
						"kind": "enum member",
						"line": 841,
						"value": "42",
						"char": 3,
						"name": "header",
						"comment": " throw the header out too\n"
					},
					{
						"kind": "enum member",
						"line": 842,
						"value": "43",
						"char": 3,
						"name": "noprogress",
						"comment": " shut off the progress meter\n"
					},
					{
						"kind": "enum member",
						"line": 843,
						"value": "44",
						"char": 3,
						"name": "nobody",
						"comment": " use HEAD to get http document\n"
					},
					{
						"kind": "enum member",
						"line": 844,
						"value": "45",
						"char": 3,
						"name": "failonerror",
						"comment": " no output on http error codes >= 300\n"
					},
					{
						"kind": "enum member",
						"line": 845,
						"value": "46",
						"char": 3,
						"name": "upload",
						"comment": " this is an upload\n"
					},
					{
						"kind": "enum member",
						"line": 846,
						"value": "47",
						"char": 3,
						"name": "post",
						"comment": " HTTP POST method\n"
					},
					{
						"kind": "enum member",
						"line": 847,
						"value": "48",
						"char": 3,
						"name": "dirlistonly",
						"comment": " return bare names when listing directories\n"
					},
					{
						"kind": "enum member",
						"line": 848,
						"value": "50",
						"char": 3,
						"name": "append",
						"comment": " Append instead of overwrite on upload!\n"
					},
					{
						"kind": "enum member",
						"line": 851,
						"value": "51",
						"char": 3,
						"name": "netrc",
						"comment": " Specify whether to read the user+password from the .netrc or the URL.\n This must be one of the CURL_NETRC_* enums below.\n"
					},
					{
						"kind": "enum member",
						"line": 852,
						"value": "52",
						"char": 3,
						"name": "followlocation",
						"comment": " use Location: Luke!\n"
					},
					{
						"kind": "enum member",
						"line": 853,
						"value": "53",
						"char": 3,
						"name": "transfertext",
						"comment": " transfer data in text/ASCII format\n"
					},
					{
						"kind": "enum member",
						"line": 854,
						"value": "54",
						"char": 3,
						"name": "put",
						"comment": " HTTP PUT\n"
					},
					{
						"kind": "enum member",
						"line": 860,
						"value": "20056",
						"char": 3,
						"name": "progressfunction",
						"comment": " 55 = OBSOLETE\n\n Function that will be called instead of the internal progress display\n function. This function should be defined as the curl_progress_callback\n prototype defines.\n"
					},
					{
						"kind": "enum member",
						"line": 862,
						"value": "10057",
						"char": 3,
						"name": "progressdata",
						"comment": " Data passed to the progress callback\n"
					},
					{
						"kind": "enum member",
						"line": 864,
						"value": "58",
						"char": 3,
						"name": "autoreferer",
						"comment": " We want the referrer field set automatically when following locations\n"
					},
					{
						"kind": "enum member",
						"line": 867,
						"value": "59",
						"char": 3,
						"name": "proxyport",
						"comment": " Port of the proxy, can be set in the proxy string as well with:\n     \"[host]:[port]\"\n"
					},
					{
						"kind": "enum member",
						"line": 869,
						"value": "60",
						"char": 3,
						"name": "postfieldsize",
						"comment": " size of the POST input data, if strlen() is not good to use\n"
					},
					{
						"kind": "enum member",
						"line": 871,
						"value": "61",
						"char": 3,
						"name": "httpproxytunnel",
						"comment": " tunnel non-http operations through a HTTP proxy\n"
					},
					{
						"kind": "enum member",
						"line": 873,
						"value": "10062",
						"char": 3,
						"name": "intrface",
						"comment": " Set the interface string to use as outgoing network interface\n"
					},
					{
						"kind": "enum member",
						"line": 877,
						"value": "10063",
						"char": 3,
						"name": "krblevel",
						"comment": " Set the krb4/5 security level, this also enables krb4/5 awareness.  This\n is a string, 'clear', 'safe', 'confidential' or 'private'.  If the string\n is set but doesn't match one of these, 'private' will be used.\n"
					},
					{
						"kind": "enum member",
						"line": 879,
						"value": "64",
						"char": 3,
						"name": "ssl_verifypeer",
						"comment": " Set if we should verify the peer in ssl handshake, set 1 to verify.\n"
					},
					{
						"kind": "enum member",
						"line": 882,
						"value": "10065",
						"char": 3,
						"name": "cainfo",
						"comment": " The CApath or CAfile used to validate the peer certificate\n     this option is used only if SSL_VERIFYPEER is true\n"
					},
					{
						"kind": "enum member",
						"line": 887,
						"value": "68",
						"char": 3,
						"name": "maxredirs",
						"comment": " 66 = OBSOLETE\n\n 67 = OBSOLETE\n\n Maximum number of http redirects to follow\n"
					},
					{
						"kind": "enum member",
						"line": 890,
						"value": "69",
						"char": 3,
						"name": "filetime",
						"comment": " Pass a long set to 1 to get the date of the requested document (if\n     possible)! Pass a zero to shut it off.\n"
					},
					{
						"kind": "enum member",
						"line": 892,
						"value": "10070",
						"char": 3,
						"name": "telnetoptions",
						"comment": " This points to a linked list of telnet options\n"
					},
					{
						"kind": "enum member",
						"line": 894,
						"value": "71",
						"char": 3,
						"name": "maxconnects",
						"comment": " Max amount of cached alive connections\n"
					},
					{
						"kind": "enum member",
						"line": 897,
						"value": "72",
						"char": 3,
						"name": "closepolicy",
						"comment": " What policy to use when closing connections when the cache is filled\n     up\n"
					},
					{
						"kind": "enum member",
						"line": 903,
						"value": "74",
						"char": 3,
						"name": "fresh_connect",
						"comment": " 73 = OBSOLETE\n\n Set to explicitly use a new connection for the upcoming transfer.\n     Do not use this unless you're absolutely sure of this, as it makes the\n     operation slower and is less friendly for the network.\n"
					},
					{
						"kind": "enum member",
						"line": 907,
						"value": "75",
						"char": 3,
						"name": "forbid_reuse",
						"comment": " Set to explicitly forbid the upcoming transfer's connection to be re-used\n     when done. Do not use this unless you're absolutely sure of this, as it\n     makes the operation slower and is less friendly for the network.\n"
					},
					{
						"kind": "enum member",
						"line": 910,
						"value": "10076",
						"char": 3,
						"name": "random_file",
						"comment": " Set to a file name that contains random data for libcurl to use to\n     seed the random engine when doing SSL connects.\n"
					},
					{
						"kind": "enum member",
						"line": 912,
						"value": "10077",
						"char": 3,
						"name": "egdsocket",
						"comment": " Set to the Entropy Gathering Daemon socket pathname\n"
					},
					{
						"kind": "enum member",
						"line": 916,
						"value": "78",
						"char": 3,
						"name": "connecttimeout",
						"comment": " Time-out connect operations after this amount of seconds, if connects\n     are OK within this time, then fine... This only aborts the connect\n     phase. [Only works on unix-style/SIGALRM operating systems]\n"
					},
					{
						"kind": "enum member",
						"line": 919,
						"value": "20079",
						"char": 3,
						"name": "headerfunction",
						"comment": " Function that will be called to store headers (instead of fwrite). The\n parameters will use fwrite() syntax, make sure to follow them.\n"
					},
					{
						"kind": "enum member",
						"line": 923,
						"value": "80",
						"char": 3,
						"name": "httpget",
						"comment": " Set this to force the HTTP request to get back to GET. Only really usable\n     if POST, PUT or a custom request have been used first.\n"
					},
					{
						"kind": "enum member",
						"line": 927,
						"value": "81",
						"char": 3,
						"name": "ssl_verifyhost",
						"comment": " Set if we should verify the Common name from the peer certificate in ssl\n handshake, set 1 to check existence, 2 to ensure that it matches the\n provided hostname.\n"
					},
					{
						"kind": "enum member",
						"line": 930,
						"value": "10082",
						"char": 3,
						"name": "cookiejar",
						"comment": " Specify which file name to write all known cookies in after completed\n     operation. Set file name to \"-\" (dash) to make it go to stdout.\n"
					},
					{
						"kind": "enum member",
						"line": 932,
						"value": "10083",
						"char": 3,
						"name": "ssl_cipher_list",
						"comment": " Specify which SSL ciphers to use\n"
					},
					{
						"kind": "enum member",
						"line": 935,
						"value": "84",
						"char": 3,
						"name": "http_version",
						"comment": " Specify which HTTP version to use! This must be set to one of the\n     CURL_HTTP_VERSION* enums set below.\n"
					},
					{
						"kind": "enum member",
						"line": 939,
						"value": "85",
						"char": 3,
						"name": "ftp_use_epsv",
						"comment": " Specifically switch on or off the FTP engine's use of the EPSV command. By\n     default, that one will always be attempted before the more traditional\n     PASV command.\n"
					},
					{
						"kind": "enum member",
						"line": 941,
						"value": "10086",
						"char": 3,
						"name": "sslcerttype",
						"comment": " type of the file keeping your SSL-certificate (\"DER\", \"PEM\", \"ENG\")\n"
					},
					{
						"kind": "enum member",
						"line": 943,
						"value": "10087",
						"char": 3,
						"name": "sslkey",
						"comment": " name of the file keeping your private SSL-key\n"
					},
					{
						"kind": "enum member",
						"line": 945,
						"value": "10088",
						"char": 3,
						"name": "sslkeytype",
						"comment": " type of the file keeping your private SSL-key (\"DER\", \"PEM\", \"ENG\")\n"
					},
					{
						"kind": "enum member",
						"line": 947,
						"value": "10089",
						"char": 3,
						"name": "sslengine",
						"comment": " crypto engine for the SSL-sub system\n"
					},
					{
						"kind": "enum member",
						"line": 951,
						"value": "90",
						"char": 3,
						"name": "sslengine_default",
						"comment": " set the crypto engine for the SSL-sub system as default\n     the param has no meaning...\n"
					},
					{
						"kind": "enum member",
						"line": 953,
						"value": "91",
						"char": 3,
						"name": "dns_use_global_cache",
						"comment": " Non-zero value means to use the global dns cache\n"
					},
					{
						"kind": "enum member",
						"line": 955,
						"value": "92",
						"char": 3,
						"name": "dns_cache_timeout",
						"comment": " DNS cache timeout\n"
					},
					{
						"kind": "enum member",
						"line": 957,
						"value": "10093",
						"char": 3,
						"name": "prequote",
						"comment": " send linked-list of pre-transfer QUOTE commands\n"
					},
					{
						"kind": "enum member",
						"line": 959,
						"value": "20094",
						"char": 3,
						"name": "debugfunction",
						"comment": " set the debug function\n"
					},
					{
						"kind": "enum member",
						"line": 961,
						"value": "10095",
						"char": 3,
						"name": "debugdata",
						"comment": " set the data for the debug function\n"
					},
					{
						"kind": "enum member",
						"line": 963,
						"value": "96",
						"char": 3,
						"name": "cookiesession",
						"comment": " mark this as start of a cookie session\n"
					},
					{
						"kind": "enum member",
						"line": 966,
						"value": "10097",
						"char": 3,
						"name": "capath",
						"comment": " The CApath directory used to validate the peer certificate\n     this option is used only if SSL_VERIFYPEER is true\n"
					},
					{
						"kind": "enum member",
						"line": 968,
						"value": "98",
						"char": 3,
						"name": "buffersize",
						"comment": " Instruct libcurl to use a smaller receive buffer\n"
					},
					{
						"kind": "enum member",
						"line": 972,
						"value": "99",
						"char": 3,
						"name": "nosignal",
						"comment": " Instruct libcurl to not use any signal/alarm handlers, even when using\n     timeouts. This option is useful for multi-threaded applications.\n     See libcurl-the-guide for more background information.\n"
					},
					{
						"kind": "enum member",
						"line": 974,
						"value": "10100",
						"char": 3,
						"name": "share",
						"comment": " Provide a CURLShare for mutexing non-ts data\n"
					},
					{
						"kind": "enum member",
						"line": 977,
						"value": "101",
						"char": 3,
						"name": "proxytype",
						"comment": " indicates type of proxy. accepted values are CURLPROXY_HTTP (default),\n     CURLPROXY_SOCKS4, CURLPROXY_SOCKS4A and CURLPROXY_SOCKS5.\n"
					},
					{
						"kind": "enum member",
						"line": 980,
						"value": "10102",
						"char": 3,
						"name": "encoding",
						"comment": " Set the Accept-Encoding string. Use this to tell a server you would like\n     the response to be compressed.\n"
					},
					{
						"kind": "enum member",
						"line": 982,
						"value": "10103",
						"char": 3,
						"name": "private_opt",
						"comment": " Set pointer to private data\n"
					},
					{
						"kind": "enum member",
						"line": 984,
						"value": "10104",
						"char": 3,
						"name": "http200aliases",
						"comment": " Set aliases for HTTP 200 in the HTTP Response header\n"
					},
					{
						"kind": "enum member",
						"line": 988,
						"value": "105",
						"char": 3,
						"name": "unrestricted_auth",
						"comment": " Continue to send authentication (user+password) when following locations,\n     even when hostname changed. This can potentially send off the name\n     and password to whatever host the server decides.\n"
					},
					{
						"kind": "enum member",
						"line": 992,
						"value": "106",
						"char": 3,
						"name": "ftp_use_eprt",
						"comment": " Specifically switch on or off the FTP engine's use of the EPRT command ( it\n     also disables the LPRT attempt). By default, those ones will always be\n     attempted before the good old traditional PORT command.\n"
					},
					{
						"kind": "enum member",
						"line": 996,
						"value": "107",
						"char": 3,
						"name": "httpauth",
						"comment": " Set this to a bitmask value to enable the particular authentications\n     methods you like. Use this in combination with CURLOPT_USERPWD.\n     Note that setting multiple bits may cause extra network round-trips.\n"
					},
					{
						"kind": "enum member",
						"line": 1000,
						"value": "20108",
						"char": 3,
						"name": "ssl_ctx_function",
						"comment": " Set the ssl context callback function, currently only for OpenSSL ssl_ctx\n     in second argument. The function must be matching the\n     curl_ssl_ctx_callback proto.\n"
					},
					{
						"kind": "enum member",
						"line": 1003,
						"value": "10109",
						"char": 3,
						"name": "ssl_ctx_data",
						"comment": " Set the userdata for the ssl context callback function's third\n     argument\n"
					},
					{
						"kind": "enum member",
						"line": 1008,
						"value": "110",
						"char": 3,
						"name": "ftp_create_missing_dirs",
						"comment": " FTP Option that causes missing dirs to be created on the remote server.\n     In 7.19.4 we introduced the convenience enums for this option using the\n     CURLFTP_CREATE_DIR prefix.\n"
					},
					{
						"kind": "enum member",
						"line": 1012,
						"value": "111",
						"char": 3,
						"name": "proxyauth",
						"comment": " Set this to a bitmask value to enable the particular authentications\n     methods you like. Use this in combination with CURLOPT_PROXYUSERPWD.\n     Note that setting multiple bits may cause extra network round-trips.\n"
					},
					{
						"kind": "enum member",
						"line": 1017,
						"value": "112",
						"char": 3,
						"name": "ftp_response_timeout",
						"comment": " FTP option that changes the timeout, in seconds, associated with\n     getting a response.  This is different from transfer timeout time and\n     essentially places a demand on the FTP server to acknowledge commands\n     in a timely manner.\n"
					},
					{
						"kind": "enum member",
						"line": 1021,
						"value": "113",
						"char": 3,
						"name": "ipresolve",
						"comment": " Set this option to one of the CURL_IPRESOLVE_* defines (see below) to\n     tell libcurl to resolve names to those IP versions only. This only has\n     affect on systems with support for more than one, i.e IPv4 _and_ IPv6.\n"
					},
					{
						"kind": "enum member",
						"line": 1027,
						"value": "114",
						"char": 3,
						"name": "maxfilesize",
						"comment": " Set this option to limit the size of a file that will be downloaded from\n     an HTTP or FTP server.\n\n     Note there is also _LARGE version which adds large file support for\n     platforms which have larger off_t sizes.  See MAXFILESIZE_LARGE below.\n"
					},
					{
						"kind": "enum member",
						"line": 1031,
						"value": "30115",
						"char": 3,
						"name": "infilesize_large",
						"comment": " See the comment for INFILESIZE above, but in short, specifies\n the size of the file being uploaded.  -1 means unknown.\n"
					},
					{
						"kind": "enum member",
						"line": 1035,
						"value": "30116",
						"char": 3,
						"name": "resume_from_large",
						"comment": " Sets the continuation offset.  There is also a LONG version of this;\n look above for RESUME_FROM.\n"
					},
					{
						"kind": "enum member",
						"line": 1039,
						"value": "30117",
						"char": 3,
						"name": "maxfilesize_large",
						"comment": " Sets the maximum size of data that will be downloaded from\n an HTTP or FTP server.  See MAXFILESIZE above for the LONG version.\n"
					},
					{
						"kind": "enum member",
						"line": 1044,
						"value": "10118",
						"char": 3,
						"name": "netrc_file",
						"comment": " Set this option to the file name of your .netrc file you want libcurl\n     to parse (using the CURLOPT_NETRC option). If not set, libcurl will do\n     a poor attempt to find the user's home directory and check for a .netrc\n     file in there.\n"
					},
					{
						"kind": "enum member",
						"line": 1050,
						"value": "119",
						"char": 3,
						"name": "use_ssl",
						"comment": " Enable SSL/TLS for FTP, pick one of:\n     CURLFTPSSL_TRY     - try using SSL, proceed anyway otherwise\n     CURLFTPSSL_CONTROL - SSL for the control connection or fail\n     CURLFTPSSL_ALL     - SSL for all communication or fail\n"
					},
					{
						"kind": "enum member",
						"line": 1052,
						"value": "30120",
						"char": 3,
						"name": "postfieldsize_large",
						"comment": " The _LARGE version of the standard POSTFIELDSIZE option\n"
					},
					{
						"kind": "enum member",
						"line": 1054,
						"value": "121",
						"char": 3,
						"name": "tcp_nodelay",
						"comment": " Enable/disable the TCP Nagle algorithm\n"
					},
					{
						"kind": "enum member",
						"line": 1073,
						"value": "129",
						"char": 3,
						"name": "ftpsslauth",
						"comment": " 122 OBSOLETE, used in 7.12.3. Gone in 7.13.0\n\n 123 OBSOLETE. Gone in 7.16.0\n\n 124 OBSOLETE, used in 7.12.3. Gone in 7.13.0\n\n 125 OBSOLETE, used in 7.12.3. Gone in 7.13.0\n\n 126 OBSOLETE, used in 7.12.3. Gone in 7.13.0\n\n 127 OBSOLETE. Gone in 7.16.0\n\n 128 OBSOLETE. Gone in 7.16.0\n\n When FTP over SSL/TLS is selected (with CURLOPT_USE_SSL), this option\n     can be used to change libcurl's default action which is to first try\n     \"AUTH SSL\" and then \"AUTH TLS\" in this order, and proceed when a OK\n     response has been received.\n\n     Available parameters are:\n     CURLFTPAUTH_DEFAULT - let libcurl decide\n     CURLFTPAUTH_SSL     - try \"AUTH SSL\" first, then TLS\n     CURLFTPAUTH_TLS     - try \"AUTH TLS\" first, then SSL\n"
					},
					{
						"kind": "enum member",
						"line": 1074,
						"value": "20130",
						"char": 3,
						"name": "ioctlfunction",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 1075,
						"value": "10131",
						"char": 3,
						"name": "ioctldata",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 1081,
						"value": "10134",
						"char": 3,
						"name": "ftp_account",
						"comment": " 132 OBSOLETE. Gone in 7.16.0\n\n 133 OBSOLETE. Gone in 7.16.0\n\n zero terminated string for pass on to the FTP server when asked for\n     \"account\" info\n"
					},
					{
						"kind": "enum member",
						"line": 1083,
						"value": "10135",
						"char": 3,
						"name": "cookielist",
						"comment": " feed cookies into cookie engine\n"
					},
					{
						"kind": "enum member",
						"line": 1085,
						"value": "136",
						"char": 3,
						"name": "ignore_content_length",
						"comment": " ignore Content-Length\n"
					},
					{
						"kind": "enum member",
						"line": 1090,
						"value": "137",
						"char": 3,
						"name": "ftp_skip_pasv_ip",
						"comment": " Set to non-zero to skip the IP address received in a 227 PASV FTP server\n     response. Typically used for FTP-SSL purposes but is not restricted to\n     that. libcurl will then instead use the same IP address it used for the\n     control connection.\n"
					},
					{
						"kind": "enum member",
						"line": 1093,
						"value": "138",
						"char": 3,
						"name": "ftp_filemethod",
						"comment": " Select \"file method\" to use when doing FTP, see the curl_ftpmethod\n     above.\n"
					},
					{
						"kind": "enum member",
						"line": 1095,
						"value": "139",
						"char": 3,
						"name": "localport",
						"comment": " Local port number to bind the socket to\n"
					},
					{
						"kind": "enum member",
						"line": 1099,
						"value": "140",
						"char": 3,
						"name": "localportrange",
						"comment": " Number of ports to try, including the first one set with LOCALPORT.\n     Thus, setting it to 1 will make no additional attempts but the first.\n"
					},
					{
						"kind": "enum member",
						"line": 1102,
						"value": "141",
						"char": 3,
						"name": "connect_only",
						"comment": " no transfer, set up connection and let application use the socket by\n     extracting it with CURLINFO_LASTSOCKET\n"
					},
					{
						"kind": "enum member",
						"line": 1105,
						"value": "20142",
						"char": 3,
						"name": "conv_from_network_function",
						"comment": " Function that will be called to convert from the\n     network encoding (instead of using the iconv calls in libcurl)\n"
					},
					{
						"kind": "enum member",
						"line": 1108,
						"value": "20143",
						"char": 3,
						"name": "conv_to_network_function",
						"comment": " Function that will be called to convert to the\n     network encoding (instead of using the iconv calls in libcurl)\n"
					},
					{
						"kind": "enum member",
						"line": 1112,
						"value": "20144",
						"char": 3,
						"name": "conv_from_utf8_function",
						"comment": " Function that will be called to convert from UTF8\n     (instead of using the iconv calls in libcurl)\n     Note that this is used only for SSL certificate processing\n"
					},
					{
						"kind": "enum member",
						"line": 1115,
						"value": "30145",
						"char": 3,
						"name": "max_send_speed_large",
						"comment": " if the connection proceeds too quickly then need to slow it down\n\n limit-rate: maximum number of bytes per second to send or receive\n"
					},
					{
						"kind": "enum member",
						"line": 1116,
						"value": "30146",
						"char": 3,
						"name": "max_recv_speed_large",
						"comment": "ditto\n"
					},
					{
						"kind": "enum member",
						"line": 1118,
						"value": "10147",
						"char": 3,
						"name": "ftp_alternative_to_user",
						"comment": " Pointer to command string to send if USER/PASS fails.\n"
					},
					{
						"kind": "enum member",
						"line": 1120,
						"value": "20148",
						"char": 3,
						"name": "sockoptfunction",
						"comment": " callback function for setting socket options\n"
					},
					{
						"kind": "enum member",
						"line": 1124,
						"value": "150",
						"char": 3,
						"name": "ssl_sessionid_cache",
						"comment": " set to 0 to disable session ID re-use for this transfer, default is\n     enabled (== 1)\n"
					},
					{
						"kind": "enum member",
						"line": 1126,
						"value": "151",
						"char": 3,
						"name": "ssh_auth_types",
						"comment": " allowed SSH authentication methods\n"
					},
					{
						"kind": "enum member",
						"line": 1128,
						"value": "10152",
						"char": 3,
						"name": "ssh_public_keyfile",
						"comment": " Used by scp/sftp to do public/private key authentication\n"
					},
					{
						"kind": "enum member",
						"line": 1131,
						"value": "154",
						"char": 3,
						"name": "ftp_ssl_ccc",
						"comment": " Send CCC (Clear Command Channel) after authentication\n"
					},
					{
						"kind": "enum member",
						"line": 1133,
						"value": "155",
						"char": 3,
						"name": "timeout_ms",
						"comment": " Same as TIMEOUT and CONNECTTIMEOUT, but with ms resolution\n"
					},
					{
						"kind": "enum member",
						"line": 1137,
						"value": "157",
						"char": 3,
						"name": "http_transfer_decoding",
						"comment": " set to zero to disable the libcurl's decoding and thus pass the raw body\n     data to the application even when it is encoded/compressed\n"
					},
					{
						"kind": "enum member",
						"line": 1138,
						"value": "158",
						"char": 3,
						"name": "http_content_decoding",
						"comment": "ditto\n"
					},
					{
						"kind": "enum member",
						"line": 1141,
						"value": "159",
						"char": 3,
						"name": "new_file_perms",
						"comment": " Permission used when creating new files and directories on the remote\n     server for protocols that support it, SFTP/SCP/FILE\n"
					},
					{
						"kind": "enum member",
						"line": 1142,
						"value": "160",
						"char": 3,
						"name": "new_directory_perms",
						"comment": "ditto\n"
					},
					{
						"kind": "enum member",
						"line": 1145,
						"value": "161",
						"char": 3,
						"name": "postredir",
						"comment": " Set the behaviour of POST when redirecting. Values must be set to one\n     of CURL_REDIR* defines below. This used to be called CURLOPT_POST301\n"
					},
					{
						"kind": "enum member",
						"line": 1147,
						"value": "10162",
						"char": 3,
						"name": "ssh_host_public_key_md5",
						"comment": " used by scp/sftp to verify the host's public key\n"
					},
					{
						"kind": "enum member",
						"line": 1152,
						"value": "20163",
						"char": 3,
						"name": "opensocketfunction",
						"comment": " Callback function for opening socket (instead of socket(2)). Optionally,\n     callback is able change the address or refuse to connect returning\n     CURL_SOCKET_BAD.  The callback should have type\n     curl_opensocket_callback\n"
					},
					{
						"kind": "enum member",
						"line": 1153,
						"value": "10164",
						"char": 3,
						"name": "opensocketdata",
						"comment": "ditto\n"
					},
					{
						"kind": "enum member",
						"line": 1155,
						"value": "10165",
						"char": 3,
						"name": "copypostfields",
						"comment": " POST volatile input fields.\n"
					},
					{
						"kind": "enum member",
						"line": 1157,
						"value": "166",
						"char": 3,
						"name": "proxy_transfer_mode",
						"comment": " set transfer mode (;type=<a|i>) when doing FTP via an HTTP proxy\n"
					},
					{
						"kind": "enum member",
						"line": 1159,
						"value": "20167",
						"char": 3,
						"name": "seekfunction",
						"comment": " Callback function for seeking in the input stream\n"
					},
					{
						"kind": "enum member",
						"line": 1160,
						"value": "10168",
						"char": 3,
						"name": "seekdata",
						"comment": "ditto\n"
					},
					{
						"kind": "enum member",
						"line": 1162,
						"value": "10169",
						"char": 3,
						"name": "crlfile",
						"comment": " CRL file\n"
					},
					{
						"kind": "enum member",
						"line": 1164,
						"value": "10170",
						"char": 3,
						"name": "issuercert",
						"comment": " Issuer certificate\n"
					},
					{
						"kind": "enum member",
						"line": 1166,
						"value": "171",
						"char": 3,
						"name": "address_scope",
						"comment": " (IPv6) Address scope\n"
					},
					{
						"kind": "enum member",
						"line": 1170,
						"value": "172",
						"char": 3,
						"name": "certinfo",
						"comment": " Collect certificate chain info and allow it to get retrievable with\n     CURLINFO_CERTINFO after the transfer is complete. (Unfortunately) only\n     working with OpenSSL-powered builds.\n"
					},
					{
						"kind": "enum member",
						"line": 1172,
						"value": "10173",
						"char": 3,
						"name": "username",
						"comment": " \"name\" and \"pwd\" to use when fetching.\n"
					},
					{
						"kind": "enum member",
						"line": 1173,
						"value": "10174",
						"char": 3,
						"name": "password",
						"comment": "ditto\n"
					},
					{
						"kind": "enum member",
						"line": 1175,
						"value": "10175",
						"char": 3,
						"name": "proxyusername",
						"comment": " \"name\" and \"pwd\" to use with Proxy when fetching.\n"
					},
					{
						"kind": "enum member",
						"line": 1176,
						"value": "10176",
						"char": 3,
						"name": "proxypassword",
						"comment": "ditto\n"
					},
					{
						"kind": "enum member",
						"line": 1184,
						"value": "10177",
						"char": 3,
						"name": "noproxy",
						"comment": " Comma separated list of hostnames defining no-proxy zones. These should\n     match both hostnames directly, and hostnames within a domain. For\n     example, local.com will match local.com and www.local.com, but NOT\n     notlocal.com or www.notlocal.com. For compatibility with other\n     implementations of this, .local.com will be considered to be the same as\n     local.com. A single * is the only valid wildcard, and effectively\n     disables the use of proxy.\n"
					},
					{
						"kind": "enum member",
						"line": 1186,
						"value": "178",
						"char": 3,
						"name": "tftp_blksize",
						"comment": " block size for TFTP transfers\n"
					},
					{
						"kind": "enum member",
						"line": 1188,
						"value": "10179",
						"char": 3,
						"name": "socks5_gssapi_service",
						"comment": " Socks Service\n"
					},
					{
						"kind": "enum member",
						"line": 1190,
						"value": "180",
						"char": 3,
						"name": "socks5_gssapi_nec",
						"comment": " Socks Service\n"
					},
					{
						"kind": "enum member",
						"line": 1195,
						"value": "181",
						"char": 3,
						"name": "protocols",
						"comment": " set the bitmask for the protocols that are allowed to be used for the\n     transfer, which thus helps the app which takes URLs from users or other\n     external inputs and want to restrict what protocol(s) to deal\n     with. Defaults to CURLPROTO_ALL.\n"
					},
					{
						"kind": "enum member",
						"line": 1200,
						"value": "182",
						"char": 3,
						"name": "redir_protocols",
						"comment": " set the bitmask for the protocols that libcurl is allowed to follow to,\n     as a subset of the CURLOPT_PROTOCOLS ones. That means the protocol needs\n     to be set in both bitmasks to be allowed to get redirected to. Defaults\n     to all protocols except FILE and SCP.\n"
					},
					{
						"kind": "enum member",
						"line": 1202,
						"value": "10183",
						"char": 3,
						"name": "ssh_knownhosts",
						"comment": " set the SSH knownhost file name to use\n"
					},
					{
						"kind": "enum member",
						"line": 1205,
						"value": "20184",
						"char": 3,
						"name": "ssh_keyfunction",
						"comment": " set the SSH host key callback, must point to a curl_sshkeycallback\n     function\n"
					},
					{
						"kind": "enum member",
						"line": 1207,
						"value": "10185",
						"char": 3,
						"name": "ssh_keydata",
						"comment": " set the SSH host key callback custom pointer\n"
					},
					{
						"kind": "enum member",
						"line": 1209,
						"value": "10186",
						"char": 3,
						"name": "mail_from",
						"comment": " set the SMTP mail originator\n"
					},
					{
						"kind": "enum member",
						"line": 1211,
						"value": "10187",
						"char": 3,
						"name": "mail_rcpt",
						"comment": " set the SMTP mail receiver(s)\n"
					},
					{
						"kind": "enum member",
						"line": 1213,
						"value": "188",
						"char": 3,
						"name": "ftp_use_pret",
						"comment": " FTP: send PRET before PASV\n"
					},
					{
						"kind": "enum member",
						"line": 1215,
						"value": "189",
						"char": 3,
						"name": "rtsp_request",
						"comment": " RTSP request method (OPTIONS, SETUP, PLAY, etc...)\n"
					},
					{
						"kind": "enum member",
						"line": 1217,
						"value": "10190",
						"char": 3,
						"name": "rtsp_session_id",
						"comment": " The RTSP session identifier\n"
					},
					{
						"kind": "enum member",
						"line": 1219,
						"value": "10191",
						"char": 3,
						"name": "rtsp_stream_uri",
						"comment": " The RTSP stream URI\n"
					},
					{
						"kind": "enum member",
						"line": 1221,
						"value": "10192",
						"char": 3,
						"name": "rtsp_transport",
						"comment": " The Transport: header to use in RTSP requests\n"
					},
					{
						"kind": "enum member",
						"line": 1223,
						"value": "193",
						"char": 3,
						"name": "rtsp_client_cseq",
						"comment": " Manually initialize the client RTSP CSeq for this handle\n"
					},
					{
						"kind": "enum member",
						"line": 1225,
						"value": "194",
						"char": 3,
						"name": "rtsp_server_cseq",
						"comment": " Manually initialize the server RTSP CSeq for this handle\n"
					},
					{
						"kind": "enum member",
						"line": 1227,
						"value": "10195",
						"char": 3,
						"name": "interleavedata",
						"comment": " The stream to pass to INTERLEAVEFUNCTION.\n"
					},
					{
						"kind": "enum member",
						"line": 1229,
						"value": "20196",
						"char": 3,
						"name": "interleavefunction",
						"comment": " Let the application define a custom write method for RTP data\n"
					},
					{
						"kind": "enum member",
						"line": 1231,
						"value": "197",
						"char": 3,
						"name": "wildcardmatch",
						"comment": " Turn on wildcard matching\n"
					},
					{
						"kind": "enum member",
						"line": 1234,
						"value": "20198",
						"char": 3,
						"name": "chunk_bgn_function",
						"comment": " Directory matching callback called before downloading of an\n     individual file (chunk) started\n"
					},
					{
						"kind": "enum member",
						"line": 1237,
						"value": "20199",
						"char": 3,
						"name": "chunk_end_function",
						"comment": " Directory matching callback called after the file (chunk)\n     was downloaded, or skipped\n"
					},
					{
						"kind": "enum member",
						"line": 1239,
						"value": "20200",
						"char": 3,
						"name": "fnmatch_function",
						"comment": " Change match (fnmatch-like) callback for wildcard matching\n"
					},
					{
						"kind": "enum member",
						"line": 1241,
						"value": "10201",
						"char": 3,
						"name": "chunk_data",
						"comment": " Let the application define custom chunk data pointer\n"
					},
					{
						"kind": "enum member",
						"line": 1243,
						"value": "10202",
						"char": 3,
						"name": "fnmatch_data",
						"comment": " FNMATCH_FUNCTION user pointer\n"
					},
					{
						"kind": "enum member",
						"line": 1245,
						"value": "10203",
						"char": 3,
						"name": "resolve",
						"comment": " send linked-list of name:port:address sets\n"
					},
					{
						"kind": "enum member",
						"line": 1247,
						"value": "10204",
						"char": 3,
						"name": "tlsauth_username",
						"comment": " Set a username for authenticated TLS\n"
					},
					{
						"kind": "enum member",
						"line": 1249,
						"value": "10205",
						"char": 3,
						"name": "tlsauth_password",
						"comment": " Set a password for authenticated TLS\n"
					},
					{
						"kind": "enum member",
						"line": 1251,
						"value": "10206",
						"char": 3,
						"name": "tlsauth_type",
						"comment": " Set authentication type for authenticated TLS\n"
					},
					{
						"kind": "enum member",
						"line": 1253,
						"value": "10207",
						"char": 3,
						"name": "lastentry",
						"comment": " the last unused\n"
					},
					{
						"kind": "enum member",
						"line": 1255,
						"value": "10001",
						"char": 3,
						"name": "writedata",
						"comment": "convenient alias\n"
					},
					{
						"kind": "enum member",
						"line": 1256,
						"value": "10009",
						"char": 3,
						"name": "readdata",
						"comment": "ditto\n"
					},
					{
						"kind": "enum member",
						"line": 1257,
						"value": "10029",
						"char": 3,
						"name": "headerdata",
						"comment": "ditto\n"
					},
					{
						"kind": "enum member",
						"line": 1258,
						"value": "10023",
						"char": 3,
						"name": "rtspheader",
						"comment": "ditto\n"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "CurlOption",
				"comment": "\n"
			},
			{
				"kind": "alias",
				"line": 1261,
				"deco": "i",
				"char": 11,
				"name": "CURLoption",
				"comment": "\n"
			},
			{
				"kind": "variable",
				"line": 1263,
				"init": "cast(CurlOption)112",
				"storageClass": [
					"enum"
				],
				"deco": "E3etc1c4curl10CurlOption",
				"char": 6,
				"name": "CURLOPT_SERVER_RESPONSE_TIMEOUT",
				"comment": "\n"
			},
			{
				"kind": "enum",
				"line": 1268,
				"members": [
					{
						"kind": "enum member",
						"line": 1269,
						"value": "0",
						"char": 3,
						"name": "whatever",
						"comment": " default, resolves addresses to all IP versions that your system allows\n"
					},
					{
						"kind": "enum member",
						"line": 1270,
						"value": "1",
						"char": 3,
						"name": "v4",
						"comment": " resolve to ipv4 addresses\n"
					},
					{
						"kind": "enum member",
						"line": 1271,
						"value": "2",
						"char": 3,
						"name": "v6",
						"comment": " resolve to ipv6 addresses\n"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "CurlIpResolve",
				"comment": " Below here follows defines for the CURLOPT_IPRESOLVE option. If a host\n   name resolves addresses using more than one IP protocol version, this\n   option might be handy to force libcurl to use a specific IP version.\n"
			},
			{
				"kind": "variable",
				"line": 1275,
				"init": "cast(CurlOption)10001",
				"storageClass": [
					"enum"
				],
				"deco": "E3etc1c4curl10CurlOption",
				"char": 6,
				"name": "CURLOPT_WRITEDATA",
				"comment": " three convenient \"aliases\" that follow the name scheme better\n"
			},
			{
				"kind": "variable",
				"line": 1277,
				"init": "cast(CurlOption)10009",
				"storageClass": [
					"enum"
				],
				"deco": "E3etc1c4curl10CurlOption",
				"char": 6,
				"name": "CURLOPT_READDATA",
				"comment": "ditto\n"
			},
			{
				"kind": "variable",
				"line": 1279,
				"init": "cast(CurlOption)10029",
				"storageClass": [
					"enum"
				],
				"deco": "E3etc1c4curl10CurlOption",
				"char": 6,
				"name": "CURLOPT_HEADERDATA",
				"comment": "ditto\n"
			},
			{
				"kind": "variable",
				"line": 1281,
				"init": "cast(CurlOption)10023",
				"storageClass": [
					"enum"
				],
				"deco": "E3etc1c4curl10CurlOption",
				"char": 6,
				"name": "CURLOPT_RTSPHEADER",
				"comment": "ditto\n"
			},
			{
				"kind": "enum",
				"line": 1284,
				"members": [
					{
						"kind": "enum member",
						"line": 1285,
						"value": "0",
						"char": 5,
						"name": "none",
						"comment": " setting this means we don't care, and that we'd\n             like the library to choose the best possible\n             for us!\n"
					},
					{
						"kind": "enum member",
						"line": 1288,
						"value": "1",
						"char": 5,
						"name": "v1_0",
						"comment": " please use HTTP 1.0 in the request\n"
					},
					{
						"kind": "enum member",
						"line": 1289,
						"value": "2",
						"char": 5,
						"name": "v1_1",
						"comment": " please use HTTP 1.1 in the request\n"
					},
					{
						"kind": "enum member",
						"line": 1290,
						"value": "3",
						"char": 5,
						"name": "last",
						"comment": " *ILLEGAL* http version\n"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "CurlHttpVersion",
				"comment": " These enums are for use with the CURLOPT_HTTP_VERSION option.\n"
			},
			{
				"kind": "enum",
				"line": 1296,
				"members": [
					{
						"kind": "enum member",
						"line": 1297,
						"value": "0",
						"char": 5,
						"name": "none",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 1298,
						"value": "1",
						"char": 5,
						"name": "options",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 1299,
						"value": "2",
						"char": 5,
						"name": "describe",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 1300,
						"value": "3",
						"char": 5,
						"name": "announce",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 1301,
						"value": "4",
						"char": 5,
						"name": "setup",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 1302,
						"value": "5",
						"char": 5,
						"name": "play",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 1303,
						"value": "6",
						"char": 5,
						"name": "pause",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 1304,
						"value": "7",
						"char": 5,
						"name": "teardown",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 1305,
						"value": "8",
						"char": 5,
						"name": "get_parameter",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 1306,
						"value": "9",
						"char": 5,
						"name": "set_parameter",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 1307,
						"value": "10",
						"char": 5,
						"name": "record",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 1308,
						"value": "11",
						"char": 5,
						"name": "receive",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 1309,
						"value": "12",
						"char": 5,
						"name": "last",
						"comment": "\n"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "CurlRtspReq",
				"comment": " Public API enums for RTSP requests\n"
			},
			{
				"kind": "enum",
				"line": 1313,
				"members": [
					{
						"kind": "enum member",
						"line": 1314,
						"value": "0",
						"char": 5,
						"name": "ignored",
						"comment": " The .netrc will never be read. This is the default.\n"
					},
					{
						"kind": "enum member",
						"line": 1315,
						"value": "1",
						"char": 5,
						"name": "optional",
						"comment": " A user:password in the URL will be preferred to one in the .netrc.\n"
					},
					{
						"kind": "enum member",
						"line": 1316,
						"value": "2",
						"char": 5,
						"name": "required",
						"comment": " A user:password in the URL will be ignored.\n Unless one is set programmatically, the .netrc\n will be queried.\n"
					},
					{
						"kind": "enum member",
						"line": 1319,
						"value": "3",
						"char": 5,
						"name": "last",
						"comment": "\n"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "CurlNetRcOption",
				"comment": " These enums are for use with the CURLOPT_NETRC option.\n"
			},
			{
				"kind": "enum",
				"line": 1323,
				"members": [
					{
						"kind": "enum member",
						"line": 1324,
						"value": "0",
						"char": 5,
						"name": "default_version",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 1325,
						"value": "1",
						"char": 5,
						"name": "tlsv1",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 1326,
						"value": "2",
						"char": 5,
						"name": "sslv2",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 1327,
						"value": "3",
						"char": 5,
						"name": "sslv3",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 1328,
						"value": "4",
						"char": 5,
						"name": "last",
						"comment": " never use\n"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "CurlSslVersion",
				"comment": "\n"
			},
			{
				"kind": "enum",
				"line": 1332,
				"members": [
					{
						"kind": "enum member",
						"line": 1333,
						"value": "0",
						"char": 5,
						"name": "none",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 1334,
						"value": "1",
						"char": 5,
						"name": "srp",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 1335,
						"value": "2",
						"char": 5,
						"name": "last",
						"comment": " never use\n"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "CurlTlsAuth",
				"comment": "\n"
			},
			{
				"kind": "enum",
				"line": 1341,
				"members": [
					{
						"kind": "enum member",
						"line": 1342,
						"value": "0",
						"char": 3,
						"name": "get_all",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 1343,
						"value": "1",
						"char": 3,
						"name": "post_301",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 1344,
						"value": "2",
						"char": 3,
						"name": "post_302",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 1346,
						"value": "3",
						"char": 3,
						"name": "post_all",
						"comment": "\n"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "CurlRedir",
				"comment": " symbols to use with CURLOPT_POSTREDIR.\n   CURL_REDIR_POST_301 and CURL_REDIR_POST_302 can be bitwise ORed so that\n   CURL_REDIR_POST_301 | CURL_REDIR_POST_302 == CURL_REDIR_POST_ALL\n"
			},
			{
				"kind": "enum",
				"line": 1349,
				"members": [
					{
						"kind": "enum member",
						"line": 1350,
						"value": "0",
						"char": 5,
						"name": "none",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 1351,
						"value": "1",
						"char": 5,
						"name": "ifmodsince",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 1352,
						"value": "2",
						"char": 5,
						"name": "ifunmodsince",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 1353,
						"value": "3",
						"char": 5,
						"name": "lastmod",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 1354,
						"value": "4",
						"char": 5,
						"name": "last",
						"comment": "\n"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "CurlTimeCond",
				"comment": "\n"
			},
			{
				"kind": "alias",
				"line": 1357,
				"deco": "i",
				"char": 11,
				"name": "curl_TimeCond",
				"comment": "\n"
			},
			{
				"kind": "function",
				"line": 1363,
				"deco": "UPaPaZi",
				"char": 6,
				"parameters": [
					{
						"deco": "Pa",
						"name": "s1"
					},
					{
						"deco": "Pa",
						"name": "s2"
					}
				],
				"name": "curl_strequal",
				"comment": " curl_strequal() and curl_strnequal() are subject for removal in a future\n   libcurl, see lib/README.curlx for details\n"
			},
			{
				"kind": "function",
				"line": 1365,
				"deco": "UPaPamZi",
				"char": 6,
				"parameters": [
					{
						"deco": "Pa",
						"name": "s1"
					},
					{
						"deco": "Pa",
						"name": "s2"
					},
					{
						"deco": "m",
						"name": "n"
					}
				],
				"name": "curl_strnequal",
				"comment": "ditto\n\n curl_strequal() and curl_strnequal() are subject for removal in a future\n   libcurl, see lib/README.curlx for details\n",
				"originalType": "extern (C) int(char* s1, char* s2, size_t n)"
			},
			{
				"kind": "struct",
				"line": 1394,
				"members": [
					{
						"kind": "variable",
						"line": 1396,
						"deco": "i",
						"char": 20,
						"name": "option",
						"comment": "\n",
						"originalType": "CURLformoption",
						"offset": 0
					},
					{
						"kind": "variable",
						"line": 1397,
						"deco": "Pa",
						"char": 11,
						"name": "value",
						"comment": "\n",
						"offset": 8
					}
				],
				"char": 12,
				"name": "curl_forms",
				"comment": " structure to be used as parameter for CURLFORM_ARRAY\n"
			},
			{
				"kind": "enum",
				"line": 1416,
				"members": [
					{
						"kind": "enum member",
						"line": 1417,
						"value": "0",
						"char": 5,
						"name": "ok",
						"comment": " first, no error\n"
					},
					{
						"kind": "enum member",
						"line": 1418,
						"value": "1",
						"char": 5,
						"name": "memory",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 1419,
						"value": "2",
						"char": 5,
						"name": "option_twice",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 1420,
						"value": "3",
						"char": 5,
						"name": "null_ptr",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 1421,
						"value": "4",
						"char": 5,
						"name": "unknown_option",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 1422,
						"value": "5",
						"char": 5,
						"name": "incomplete",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 1423,
						"value": "6",
						"char": 5,
						"name": "illegal_array",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 1424,
						"value": "7",
						"char": 5,
						"name": "disabled",
						"comment": " libcurl was built with this disabled\n"
					},
					{
						"kind": "enum member",
						"line": 1425,
						"value": "8",
						"char": 5,
						"name": "last",
						"comment": "\n"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "CurlFormAdd",
				"comment": " use this for multipart formpost building\n\n Returns code for curl_formadd()\n\n Returns:\n CURL_FORMADD_OK             on success\n CURL_FORMADD_MEMORY         if the FormInfo allocation fails\n CURL_FORMADD_OPTION_TWICE   if one option is given twice for one Form\n CURL_FORMADD_NULL           if a null pointer was given for a char\n CURL_FORMADD_MEMORY         if the allocation of a FormInfo struct failed\n CURL_FORMADD_UNKNOWN_OPTION if an unknown option was used\n CURL_FORMADD_INCOMPLETE     if the some FormInfo is not complete (or error)\n CURL_FORMADD_MEMORY         if a curl_httppost struct cannot be allocated\n CURL_FORMADD_MEMORY         if some allocation for string copying failed.\n CURL_FORMADD_ILLEGAL_ARRAY  if an illegal option is used in an array\n\n"
			},
			{
				"kind": "alias",
				"line": 1428,
				"deco": "i",
				"char": 11,
				"name": "CURLFORMcode",
				"comment": "\n"
			},
			{
				"kind": "function",
				"line": 1441,
				"deco": "UPPS3etc1c4curl13curl_httppostPPS3etc1c4curl13curl_httppostYi",
				"char": 15,
				"parameters": [
					{
						"deco": "PPS3etc1c4curl13curl_httppost",
						"name": "httppost"
					},
					{
						"deco": "PPS3etc1c4curl13curl_httppost",
						"name": "last_post"
					}
				],
				"name": "curl_formadd",
				"comment": " Name: curl_formadd()\n\n Description:\n\n Pretty advanced function for building multi-part formposts. Each invoke\n adds one part that together construct a full post. Then use\n CURLOPT_HTTPPOST to send it off to libcurl.\n",
				"originalType": "extern (C) CURLFORMcode(curl_httppost** httppost, curl_httppost** last_post, ...)"
			},
			{
				"kind": "alias",
				"line": 1451,
				"deco": "PUPvPamZm",
				"char": 57,
				"name": "curl_formget_callback",
				"comment": " callback function for curl_formget()\n The void *arg pointer will be the one passed as second argument to\n   curl_formget().\n The character buffer passed to it must not be freed.\n Should return the buffer length passed to it as the argument \"len\" on\n   success.\n"
			},
			{
				"kind": "function",
				"line": 1463,
				"deco": "UPS3etc1c4curl13curl_httppostPvPUPvPamZmZi",
				"char": 6,
				"parameters": [
					{
						"deco": "PS3etc1c4curl13curl_httppost",
						"name": "form"
					},
					{
						"deco": "Pv",
						"name": "arg"
					},
					{
						"deco": "PUPvPamZm",
						"name": "append"
					}
				],
				"name": "curl_formget",
				"comment": " Name: curl_formget()\n\n Description:\n\n Serialize a curl_httppost struct built with curl_formadd().\n Accepts a void pointer as second argument which will be passed to\n the curl_formget_callback function.\n Returns 0 on success.\n",
				"originalType": "extern (C) int(curl_httppost* form, void* arg, curl_formget_callback append)"
			},
			{
				"kind": "function",
				"line": 1471,
				"deco": "UPS3etc1c4curl13curl_httppostZv",
				"char": 7,
				"parameters": [
					{
						"deco": "PS3etc1c4curl13curl_httppost",
						"name": "form"
					}
				],
				"name": "curl_formfree",
				"comment": " Name: curl_formfree()\n\n Description:\n\n Free a multipart formpost previously built with curl_formadd().\n"
			},
			{
				"kind": "function",
				"line": 1481,
				"deco": "UxPaZPa",
				"char": 8,
				"parameters": [
					{
						"deco": "xPa",
						"name": "variable"
					}
				],
				"name": "curl_getenv",
				"comment": " Name: curl_getenv()\n\n Description:\n\n Returns a malloc()'ed string that MUST be curl_free()ed after usage is\n complete. DEPRECATED - see lib/README.curlx\n",
				"originalType": "extern (C) char*(in char* variable)"
			},
			{
				"kind": "function",
				"line": 1490,
				"deco": "UZPa",
				"char": 8,
				"name": "curl_version",
				"comment": " Name: curl_version()\n\n Description:\n\n Returns a static ascii string of the libcurl version.\n"
			},
			{
				"kind": "function",
				"line": 1501,
				"deco": "UPvPaiZPa",
				"char": 8,
				"parameters": [
					{
						"deco": "Pv",
						"name": "handle"
					},
					{
						"deco": "Pa",
						"name": "string"
					},
					{
						"deco": "i",
						"name": "length"
					}
				],
				"name": "curl_easy_escape",
				"comment": " Name: curl_easy_escape()\n\n Description:\n\n Escapes URL strings (converts all letters consider illegal in URLs to their\n %XX versions). This function returns a new allocated string or NULL if an\n error occurred.\n",
				"originalType": "extern (C) char*(CURL* handle, char* string, int length)"
			},
			{
				"kind": "function",
				"line": 1504,
				"deco": "UPaiZPa",
				"char": 8,
				"parameters": [
					{
						"deco": "Pa",
						"name": "string"
					},
					{
						"deco": "i",
						"name": "length"
					}
				],
				"name": "curl_escape",
				"comment": " the previous version:\n"
			},
			{
				"kind": "function",
				"line": 1518,
				"deco": "UPvPaiPiZPa",
				"char": 8,
				"parameters": [
					{
						"deco": "Pv",
						"name": "handle"
					},
					{
						"deco": "Pa",
						"name": "string"
					},
					{
						"deco": "i",
						"name": "length"
					},
					{
						"deco": "Pi",
						"name": "outlength"
					}
				],
				"name": "curl_easy_unescape",
				"comment": " Name: curl_easy_unescape()\n\n Description:\n\n Unescapes URL encoding in strings (converts all %XX codes to their 8bit\n versions). This function returns a new allocated string or NULL if an error\n occurred.\n Conversion Note: On non-ASCII platforms the ASCII %XX codes are\n converted into the host encoding.\n",
				"originalType": "extern (C) char*(CURL* handle, char* string, int length, int* outlength)"
			},
			{
				"kind": "function",
				"line": 1521,
				"deco": "UPaiZPa",
				"char": 8,
				"parameters": [
					{
						"deco": "Pa",
						"name": "string"
					},
					{
						"deco": "i",
						"name": "length"
					}
				],
				"name": "curl_unescape",
				"comment": " the previous version\n"
			},
			{
				"kind": "function",
				"line": 1531,
				"deco": "UPvZv",
				"char": 7,
				"parameters": [
					{
						"deco": "Pv",
						"name": "p"
					}
				],
				"name": "curl_free",
				"comment": " Name: curl_free()\n\n Description:\n\n Provided for de-allocation in the same translation unit that did the\n allocation. Added in libcurl 7.10\n"
			},
			{
				"kind": "function",
				"line": 1543,
				"deco": "UlZi",
				"char": 11,
				"parameters": [
					{
						"deco": "l",
						"name": "flags"
					}
				],
				"name": "curl_global_init",
				"comment": " Name: curl_global_init()\n\n Description:\n\n curl_global_init() should be invoked exactly once for each application that\n uses libcurl and before any call of other libcurl functions.\n\n This function is not thread-safe!\n",
				"originalType": "extern (C) CURLcode(c_long flags)"
			},
			{
				"kind": "function",
				"line": 1558,
				"deco": "UlPFmZPvPFPvZvPFPvmZPvPFPaZPaPFmmZPvZi",
				"char": 11,
				"parameters": [
					{
						"deco": "l",
						"name": "flags"
					},
					{
						"deco": "PFmZPv",
						"name": "m"
					},
					{
						"deco": "PFPvZv",
						"name": "f"
					},
					{
						"deco": "PFPvmZPv",
						"name": "r"
					},
					{
						"deco": "PFPaZPa",
						"name": "s"
					},
					{
						"deco": "PFmmZPv",
						"name": "c"
					}
				],
				"name": "curl_global_init_mem",
				"comment": " Name: curl_global_init_mem()\n\n Description:\n\n curl_global_init() or curl_global_init_mem() should be invoked exactly once\n for each application that uses libcurl.  This function can be used to\n initialize libcurl and set user defined memory management callback\n functions.  Users can implement memory management routines to check for\n memory leaks, check for mis-use of the curl library etc.  User registered\n callback routines with be invoked by this library instead of the system\n memory management routines like malloc, free etc.\n",
				"originalType": "extern (C) CURLcode(c_long flags, curl_malloc_callback m, curl_free_callback f, curl_realloc_callback r, curl_strdup_callback s, curl_calloc_callback c)"
			},
			{
				"kind": "function",
				"line": 1568,
				"deco": "UZv",
				"char": 7,
				"name": "curl_global_cleanup",
				"comment": " Name: curl_global_cleanup()\n\n Description:\n\n curl_global_cleanup() should be invoked exactly once for each application\n that uses libcurl\n"
			},
			{
				"kind": "struct",
				"line": 1574,
				"members": [],
				"char": 1,
				"name": "curl_slist",
				"comment": " linked-list structure for the CURLOPT_QUOTE option (and other)\n"
			},
			{
				"kind": "function",
				"line": 1588,
				"deco": "UPS3etc1c4curl10curl_slistxPaZPS3etc1c4curl10curl_slist",
				"char": 14,
				"parameters": [
					{
						"deco": "PS3etc1c4curl10curl_slist"
					},
					{
						"deco": "xPa"
					}
				],
				"name": "curl_slist_append",
				"comment": " Name: curl_slist_append()\n\n Description:\n\n Appends a string to a linked list. If no list exists, it will be created\n first. Returns the new list, after appending.\n\n linked-list structure for the CURLOPT_QUOTE option (and other)\n",
				"originalType": "extern (C) curl_slist*(curl_slist*, in char*)"
			},
			{
				"kind": "function",
				"line": 1597,
				"deco": "UPS3etc1c4curl10curl_slistZv",
				"char": 7,
				"parameters": [
					{
						"deco": "PS3etc1c4curl10curl_slist"
					}
				],
				"name": "curl_slist_free_all",
				"comment": " Name: curl_slist_free_all()\n\n Description:\n\n free a previously built curl_slist.\n\n linked-list structure for the CURLOPT_QUOTE option (and other)\n"
			},
			{
				"kind": "function",
				"line": 1608,
				"deco": "UPaPlZl",
				"char": 9,
				"parameters": [
					{
						"deco": "Pa",
						"name": "p"
					},
					{
						"deco": "Pl",
						"name": "unused"
					}
				],
				"name": "curl_getdate",
				"comment": " Name: curl_getdate()\n\n Description:\n\n Returns the time, in seconds since 1 Jan 1970 of the time string given in\n the first argument. The time argument in the second parameter is unused\n and should be set to NULL.\n\n linked-list structure for the CURLOPT_QUOTE option (and other)\n",
				"originalType": "extern (C) time_t(char* p, time_t* unused)"
			},
			{
				"kind": "struct",
				"line": 1612,
				"members": [
					{
						"kind": "variable",
						"line": 1614,
						"deco": "i",
						"char": 9,
						"name": "num_of_certs",
						"comment": " number of certificates with information\n",
						"offset": 0
					},
					{
						"kind": "variable",
						"line": 1615,
						"deco": "PPS3etc1c4curl10curl_slist",
						"char": 18,
						"name": "certinfo",
						"comment": " for each index in this array, there's a\n                              linked list with textual information in the\n                              format \"name: value\"\n",
						"offset": 8
					}
				],
				"char": 1,
				"name": "curl_certinfo",
				"comment": " info about the certificate chain, only for OpenSSL builds. Asked\n   for with CURLOPT_CERTINFO / CURLINFO_CERTINFO\n\n linked-list structure for the CURLOPT_QUOTE option (and other)\n"
			},
			{
				"kind": "variable",
				"line": 1623,
				"init": "1048576",
				"storageClass": [
					"enum"
				],
				"deco": "i",
				"char": 6,
				"name": "CURLINFO_STRING",
				"comment": "\n"
			},
			{
				"kind": "variable",
				"line": 1625,
				"init": "2097152",
				"storageClass": [
					"enum"
				],
				"deco": "i",
				"char": 6,
				"name": "CURLINFO_LONG",
				"comment": "\n"
			},
			{
				"kind": "variable",
				"line": 1627,
				"init": "3145728",
				"storageClass": [
					"enum"
				],
				"deco": "i",
				"char": 6,
				"name": "CURLINFO_DOUBLE",
				"comment": "\n"
			},
			{
				"kind": "variable",
				"line": 1629,
				"init": "4194304",
				"storageClass": [
					"enum"
				],
				"deco": "i",
				"char": 6,
				"name": "CURLINFO_SLIST",
				"comment": "\n"
			},
			{
				"kind": "variable",
				"line": 1631,
				"init": "1048575",
				"storageClass": [
					"enum"
				],
				"deco": "i",
				"char": 6,
				"name": "CURLINFO_MASK",
				"comment": "\n"
			},
			{
				"kind": "variable",
				"line": 1634,
				"init": "15728640",
				"storageClass": [
					"enum"
				],
				"deco": "i",
				"char": 6,
				"name": "CURLINFO_TYPEMASK",
				"comment": "\n"
			},
			{
				"kind": "enum",
				"line": 1637,
				"members": [
					{
						"kind": "enum member",
						"line": 1638,
						"value": "0",
						"char": 5,
						"name": "none",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 1639,
						"value": "1048577",
						"char": 5,
						"name": "effective_url",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 1640,
						"value": "2097154",
						"char": 5,
						"name": "response_code",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 1641,
						"value": "3145731",
						"char": 5,
						"name": "total_time",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 1642,
						"value": "3145732",
						"char": 5,
						"name": "namelookup_time",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 1643,
						"value": "3145733",
						"char": 5,
						"name": "connect_time",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 1644,
						"value": "3145734",
						"char": 5,
						"name": "pretransfer_time",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 1645,
						"value": "3145735",
						"char": 5,
						"name": "size_upload",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 1646,
						"value": "3145736",
						"char": 5,
						"name": "size_download",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 1647,
						"value": "3145737",
						"char": 5,
						"name": "speed_download",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 1648,
						"value": "3145738",
						"char": 5,
						"name": "speed_upload",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 1649,
						"value": "2097163",
						"char": 5,
						"name": "header_size",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 1650,
						"value": "2097164",
						"char": 5,
						"name": "request_size",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 1651,
						"value": "2097165",
						"char": 5,
						"name": "ssl_verifyresult",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 1652,
						"value": "2097166",
						"char": 5,
						"name": "filetime",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 1653,
						"value": "3145743",
						"char": 5,
						"name": "content_length_download",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 1654,
						"value": "3145744",
						"char": 5,
						"name": "content_length_upload",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 1655,
						"value": "3145745",
						"char": 5,
						"name": "starttransfer_time",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 1656,
						"value": "1048594",
						"char": 5,
						"name": "content_type",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 1657,
						"value": "3145747",
						"char": 5,
						"name": "redirect_time",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 1658,
						"value": "2097172",
						"char": 5,
						"name": "redirect_count",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 1659,
						"value": "1048597",
						"char": 5,
						"name": "private_info",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 1660,
						"value": "2097174",
						"char": 5,
						"name": "http_connectcode",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 1661,
						"value": "2097175",
						"char": 5,
						"name": "httpauth_avail",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 1662,
						"value": "2097176",
						"char": 5,
						"name": "proxyauth_avail",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 1663,
						"value": "2097177",
						"char": 5,
						"name": "os_errno",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 1664,
						"value": "2097178",
						"char": 5,
						"name": "num_connects",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 1665,
						"value": "4194331",
						"char": 5,
						"name": "ssl_engines",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 1666,
						"value": "4194332",
						"char": 5,
						"name": "cookielist",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 1667,
						"value": "2097181",
						"char": 5,
						"name": "lastsocket",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 1668,
						"value": "1048606",
						"char": 5,
						"name": "ftp_entry_path",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 1669,
						"value": "1048607",
						"char": 5,
						"name": "redirect_url",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 1670,
						"value": "1048608",
						"char": 5,
						"name": "primary_ip",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 1671,
						"value": "3145761",
						"char": 5,
						"name": "appconnect_time",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 1672,
						"value": "4194338",
						"char": 5,
						"name": "certinfo",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 1673,
						"value": "2097187",
						"char": 5,
						"name": "condition_unmet",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 1674,
						"value": "1048612",
						"char": 5,
						"name": "rtsp_session_id",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 1675,
						"value": "2097189",
						"char": 5,
						"name": "rtsp_client_cseq",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 1676,
						"value": "2097190",
						"char": 5,
						"name": "rtsp_server_cseq",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 1677,
						"value": "2097191",
						"char": 5,
						"name": "rtsp_cseq_recv",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 1678,
						"value": "2097192",
						"char": 5,
						"name": "primary_port",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 1679,
						"value": "1048617",
						"char": 5,
						"name": "local_ip",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 1680,
						"value": "2097194",
						"char": 5,
						"name": "local_port",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 1682,
						"value": "42",
						"char": 5,
						"name": "lastone",
						"comment": " Fill in new entries below here!\n"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "CurlInfo",
				"comment": "\n"
			},
			{
				"kind": "alias",
				"line": 1685,
				"deco": "i",
				"char": 11,
				"name": "CURLINFO",
				"comment": "\n"
			},
			{
				"kind": "variable",
				"line": 1689,
				"init": "cast(CurlInfo)2097154",
				"storageClass": [
					"enum"
				],
				"deco": "E3etc1c4curl8CurlInfo",
				"char": 6,
				"name": "CURLINFO_HTTP_CODE",
				"comment": " CURLINFO_RESPONSE_CODE is the new name for the option previously known as\n   CURLINFO_HTTP_CODE\n"
			},
			{
				"kind": "enum",
				"line": 1692,
				"members": [
					{
						"kind": "enum member",
						"line": 1693,
						"value": "0",
						"char": 5,
						"name": "none",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 1694,
						"value": "1",
						"char": 5,
						"name": "oldest",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 1695,
						"value": "2",
						"char": 5,
						"name": "least_recently_used",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 1696,
						"value": "3",
						"char": 5,
						"name": "least_traffic",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 1697,
						"value": "4",
						"char": 5,
						"name": "slowest",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 1698,
						"value": "5",
						"char": 5,
						"name": "callback",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 1699,
						"value": "6",
						"char": 5,
						"name": "last",
						"comment": "\n"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "CurlClosePolicy",
				"comment": "\n"
			},
			{
				"kind": "alias",
				"line": 1702,
				"deco": "i",
				"char": 11,
				"name": "curl_closepolicy",
				"comment": "\n"
			},
			{
				"kind": "enum",
				"line": 1705,
				"members": [
					{
						"kind": "enum member",
						"line": 1706,
						"value": "1",
						"char": 3,
						"name": "ssl",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 1707,
						"value": "2",
						"char": 3,
						"name": "win32",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 1709,
						"value": "3",
						"char": 3,
						"name": "all",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 1710,
						"value": "0",
						"char": 3,
						"name": "nothing",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 1711,
						"value": "3",
						"char": 3,
						"name": "default_",
						"comment": "all\n"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "CurlGlobal",
				"comment": "\n"
			},
			{
				"kind": "enum",
				"line": 1719,
				"members": [
					{
						"kind": "enum member",
						"line": 1720,
						"value": "0",
						"char": 5,
						"name": "none",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 1725,
						"value": "1",
						"char": 5,
						"name": "share",
						"comment": "  CURL_LOCK_DATA_SHARE is used internally to say that\n  the locking is just made to change the internal state of the share\n  itself.\n"
					},
					{
						"kind": "enum member",
						"line": 1726,
						"value": "2",
						"char": 5,
						"name": "cookie",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 1727,
						"value": "3",
						"char": 5,
						"name": "dns",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 1728,
						"value": "4",
						"char": 5,
						"name": "ssl_session",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 1729,
						"value": "5",
						"char": 5,
						"name": "connect",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 1730,
						"value": "6",
						"char": 5,
						"name": "last",
						"comment": "\n"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "CurlLockData",
				"comment": " Setup defines, protos etc for the sharing stuff.\n\n Different data locks for a single share\n"
			},
			{
				"kind": "alias",
				"line": 1733,
				"deco": "i",
				"char": 11,
				"name": "curl_lock_data",
				"comment": "\n"
			},
			{
				"kind": "enum",
				"line": 1736,
				"members": [
					{
						"kind": "enum member",
						"line": 1737,
						"value": "0",
						"char": 5,
						"name": "none",
						"comment": " unspecified action\n"
					},
					{
						"kind": "enum member",
						"line": 1738,
						"value": "1",
						"char": 5,
						"name": "shared_access",
						"comment": " for read perhaps\n"
					},
					{
						"kind": "enum member",
						"line": 1739,
						"value": "2",
						"char": 5,
						"name": "single",
						"comment": " for write perhaps\n"
					},
					{
						"kind": "enum member",
						"line": 1740,
						"value": "3",
						"char": 5,
						"name": "last",
						"comment": " never use\n"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "CurlLockAccess",
				"comment": " Different lock access types\n"
			},
			{
				"kind": "alias",
				"line": 1743,
				"deco": "i",
				"char": 11,
				"name": "curl_lock_access",
				"comment": "\n"
			},
			{
				"kind": "alias",
				"line": 1746,
				"deco": "PFPviiPvZv",
				"char": 98,
				"name": "curl_lock_function",
				"comment": "\n"
			},
			{
				"kind": "alias",
				"line": 1748,
				"deco": "PFPviPvZv",
				"char": 71,
				"name": "curl_unlock_function",
				"comment": "\n"
			},
			{
				"kind": "alias",
				"line": 1751,
				"deco": "v",
				"char": 12,
				"name": "CURLSH",
				"comment": "\n"
			},
			{
				"kind": "enum",
				"line": 1754,
				"members": [
					{
						"kind": "enum member",
						"line": 1755,
						"value": "0",
						"char": 5,
						"name": "ok",
						"comment": " all is fine\n"
					},
					{
						"kind": "enum member",
						"line": 1756,
						"value": "1",
						"char": 5,
						"name": "bad_option",
						"comment": " 1\n"
					},
					{
						"kind": "enum member",
						"line": 1757,
						"value": "2",
						"char": 5,
						"name": "in_use",
						"comment": " 2\n"
					},
					{
						"kind": "enum member",
						"line": 1758,
						"value": "3",
						"char": 5,
						"name": "invalid",
						"comment": " 3\n"
					},
					{
						"kind": "enum member",
						"line": 1759,
						"value": "4",
						"char": 5,
						"name": "nomem",
						"comment": " out of memory\n"
					},
					{
						"kind": "enum member",
						"line": 1760,
						"value": "5",
						"char": 5,
						"name": "last",
						"comment": " never use\n"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "CurlShError",
				"comment": "\n"
			},
			{
				"kind": "alias",
				"line": 1763,
				"deco": "i",
				"char": 11,
				"name": "CURLSHcode",
				"comment": "\n"
			},
			{
				"kind": "enum",
				"line": 1767,
				"members": [
					{
						"kind": "enum member",
						"line": 1768,
						"value": "0",
						"char": 5,
						"name": "none",
						"comment": " don't use\n"
					},
					{
						"kind": "enum member",
						"line": 1769,
						"value": "1",
						"char": 5,
						"name": "share",
						"comment": " specify a data type to share\n"
					},
					{
						"kind": "enum member",
						"line": 1770,
						"value": "2",
						"char": 5,
						"name": "unshare",
						"comment": " specify which data type to stop sharing\n"
					},
					{
						"kind": "enum member",
						"line": 1771,
						"value": "3",
						"char": 5,
						"name": "lockfunc",
						"comment": " pass in a 'curl_lock_function' pointer\n"
					},
					{
						"kind": "enum member",
						"line": 1772,
						"value": "4",
						"char": 5,
						"name": "unlockfunc",
						"comment": " pass in a 'curl_unlock_function' pointer\n"
					},
					{
						"kind": "enum member",
						"line": 1773,
						"value": "5",
						"char": 5,
						"name": "userdata",
						"comment": " pass in a user data pointer used in the lock/unlock\n                     callback functions\n"
					},
					{
						"kind": "enum member",
						"line": 1775,
						"value": "6",
						"char": 5,
						"name": "last",
						"comment": " never use\n"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "CurlShOption",
				"comment": " pass in a user data pointer used in the lock/unlock callback\n   functions\n"
			},
			{
				"kind": "alias",
				"line": 1778,
				"deco": "i",
				"char": 11,
				"name": "CURLSHoption",
				"comment": "\n"
			},
			{
				"kind": "function",
				"line": 1782,
				"deco": "UZPv",
				"char": 10,
				"name": "curl_share_init",
				"comment": "\n",
				"originalType": "extern (C) CURLSH*()"
			},
			{
				"kind": "function",
				"line": 1784,
				"deco": "UPviYi",
				"char": 13,
				"parameters": [
					{
						"deco": "Pv"
					},
					{
						"deco": "i",
						"name": "option"
					}
				],
				"name": "curl_share_setopt",
				"comment": "\n",
				"originalType": "extern (C) CURLSHcode(CURLSH*, CURLSHoption option, ...)"
			},
			{
				"kind": "function",
				"line": 1786,
				"deco": "UPvZi",
				"char": 13,
				"parameters": [
					{
						"deco": "Pv"
					}
				],
				"name": "curl_share_cleanup",
				"comment": "\n",
				"originalType": "extern (C) CURLSHcode(CURLSH*)"
			},
			{
				"kind": "enum",
				"line": 1794,
				"members": [
					{
						"kind": "enum member",
						"line": 1795,
						"value": "0",
						"char": 5,
						"name": "first",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 1796,
						"value": "1",
						"char": 5,
						"name": "second",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 1797,
						"value": "2",
						"char": 5,
						"name": "third",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 1798,
						"value": "3",
						"char": 5,
						"name": "fourth",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 1799,
						"value": "4",
						"char": 5,
						"name": "last",
						"comment": "\n"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "CurlVer",
				"comment": " Structures for querying information about the curl library at runtime.\n"
			},
			{
				"kind": "alias",
				"line": 1802,
				"deco": "i",
				"char": 11,
				"name": "CURLversion",
				"comment": "\n"
			},
			{
				"kind": "variable",
				"line": 1809,
				"init": "cast(CurlVer)3",
				"storageClass": [
					"enum"
				],
				"deco": "E3etc1c4curl7CurlVer",
				"char": 6,
				"name": "CURLVERSION_NOW",
				"comment": " The 'CURLVERSION_NOW' is the symbolic name meant to be used by\n   basically all programs ever that want to get version information. It is\n   meant to be a built-in version number for what kind of struct the caller\n   expects. If the struct ever changes, we redefine the NOW to another enum\n   from above.\n"
			},
			{
				"kind": "struct",
				"line": 1812,
				"members": [
					{
						"kind": "variable",
						"line": 1814,
						"deco": "i",
						"char": 15,
						"name": "age",
						"comment": " age of the returned struct\n",
						"originalType": "CURLversion",
						"offset": 0
					},
					{
						"kind": "variable",
						"line": 1815,
						"deco": "Pa",
						"char": 9,
						"name": "version_",
						"comment": " LIBCURL_VERSION\n",
						"offset": 8
					},
					{
						"kind": "variable",
						"line": 1816,
						"deco": "k",
						"char": 8,
						"name": "version_num",
						"comment": " LIBCURL_VERSION_NUM\n",
						"offset": 16
					},
					{
						"kind": "variable",
						"line": 1817,
						"deco": "Pa",
						"char": 9,
						"name": "host",
						"comment": " OS/host/cpu/machine when configured\n",
						"offset": 24
					},
					{
						"kind": "variable",
						"line": 1818,
						"deco": "i",
						"char": 7,
						"name": "features",
						"comment": " bitmask, see defines below\n",
						"offset": 32
					},
					{
						"kind": "variable",
						"line": 1819,
						"deco": "Pa",
						"char": 9,
						"name": "ssl_version",
						"comment": " human readable string\n",
						"offset": 40
					},
					{
						"kind": "variable",
						"line": 1820,
						"deco": "l",
						"char": 10,
						"name": "ssl_version_num",
						"comment": " not used anymore, always 0\n",
						"originalType": "c_long",
						"offset": 48
					},
					{
						"kind": "variable",
						"line": 1821,
						"deco": "Pa",
						"char": 9,
						"name": "libz_version",
						"comment": " human readable string\n",
						"offset": 56
					},
					{
						"kind": "variable",
						"line": 1823,
						"deco": "PPa",
						"char": 10,
						"name": "protocols",
						"comment": " protocols is terminated by an entry with a NULL protoname\n",
						"offset": 64
					},
					{
						"kind": "variable",
						"line": 1825,
						"deco": "Pa",
						"char": 9,
						"name": "ares",
						"comment": " The fields below this were added in CURLVERSION_SECOND\n",
						"offset": 72
					},
					{
						"kind": "variable",
						"line": 1828,
						"deco": "Pa",
						"char": 9,
						"name": "libidn",
						"comment": " This field was added in CURLVERSION_THIRD\n",
						"offset": 88
					},
					{
						"kind": "variable",
						"line": 1831,
						"deco": "i",
						"char": 7,
						"name": "iconv_ver_num",
						"comment": " These field were added in CURLVERSION_FOURTH\n\n Same as '_libiconv_version' if built with HAVE_ICONV\n",
						"offset": 96
					},
					{
						"kind": "variable",
						"line": 1832,
						"deco": "Pa",
						"char": 9,
						"name": "libssh_version",
						"comment": " human readable string\n",
						"offset": 104
					}
				],
				"char": 12,
				"name": "_N28",
				"comment": "\n"
			},
			{
				"kind": "alias",
				"line": 1835,
				"deco": "S3etc1c4curl4_N28",
				"char": 12,
				"name": "curl_version_info_data",
				"comment": "\n"
			},
			{
				"kind": "enum",
				"line": 1839,
				"members": [
					{
						"kind": "enum member",
						"line": 1840,
						"value": "1",
						"char": 3,
						"name": "ipv6",
						"comment": " IPv6-enabled\n"
					},
					{
						"kind": "enum member",
						"line": 1841,
						"value": "2",
						"char": 3,
						"name": "kerberos4",
						"comment": " kerberos auth is supported\n"
					},
					{
						"kind": "enum member",
						"line": 1842,
						"value": "4",
						"char": 3,
						"name": "ssl",
						"comment": " SSL options are present\n"
					},
					{
						"kind": "enum member",
						"line": 1843,
						"value": "8",
						"char": 3,
						"name": "libz",
						"comment": " libz features are present\n"
					},
					{
						"kind": "enum member",
						"line": 1844,
						"value": "16",
						"char": 3,
						"name": "ntlm",
						"comment": " NTLM auth is supported\n"
					},
					{
						"kind": "enum member",
						"line": 1845,
						"value": "32",
						"char": 3,
						"name": "gssnegotiate",
						"comment": " Negotiate auth support\n"
					},
					{
						"kind": "enum member",
						"line": 1846,
						"value": "64",
						"char": 3,
						"name": "dbg",
						"comment": " built with debug capabilities\n"
					},
					{
						"kind": "enum member",
						"line": 1847,
						"value": "128",
						"char": 3,
						"name": "asynchdns",
						"comment": " asynchronous dns resolves\n"
					},
					{
						"kind": "enum member",
						"line": 1848,
						"value": "256",
						"char": 3,
						"name": "spnego",
						"comment": " SPNEGO auth\n"
					},
					{
						"kind": "enum member",
						"line": 1849,
						"value": "512",
						"char": 3,
						"name": "largefile",
						"comment": " supports files bigger than 2GB\n"
					},
					{
						"kind": "enum member",
						"line": 1850,
						"value": "1024",
						"char": 3,
						"name": "idn",
						"comment": " International Domain Names support\n"
					},
					{
						"kind": "enum member",
						"line": 1851,
						"value": "2048",
						"char": 3,
						"name": "sspi",
						"comment": " SSPI is supported\n"
					},
					{
						"kind": "enum member",
						"line": 1852,
						"value": "4096",
						"char": 3,
						"name": "conv",
						"comment": " character conversions supported\n"
					},
					{
						"kind": "enum member",
						"line": 1853,
						"value": "8192",
						"char": 3,
						"name": "curldebug",
						"comment": " debug memory tracking supported\n"
					},
					{
						"kind": "enum member",
						"line": 1854,
						"value": "16384",
						"char": 3,
						"name": "tlsauth_srp",
						"comment": " TLS-SRP auth is supported\n"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "CurlVersion",
				"comment": "\n"
			},
			{
				"kind": "function",
				"line": 1866,
				"deco": "UiZPS3etc1c4curl4_N28",
				"char": 26,
				"parameters": [
					{
						"deco": "i"
					}
				],
				"name": "curl_version_info",
				"comment": " Name: curl_version_info()\n\n Description:\n\n This function returns a pointer to a static copy of the version info\n struct. See above.\n",
				"originalType": "extern (C) curl_version_info_data*(CURLversion)"
			},
			{
				"kind": "function",
				"line": 1877,
				"deco": "UiZPxa",
				"char": 14,
				"parameters": [
					{
						"deco": "i"
					}
				],
				"name": "curl_easy_strerror",
				"comment": " Name: curl_easy_strerror()\n\n Description:\n\n The curl_easy_strerror function may be used to turn a CURLcode value\n into the equivalent human readable error string.  This is useful\n for printing meaningful error messages.\n",
				"originalType": "extern (C) const(char)*(CURLcode)"
			},
			{
				"kind": "function",
				"line": 1888,
				"deco": "UiZPxa",
				"char": 14,
				"parameters": [
					{
						"deco": "i"
					}
				],
				"name": "curl_share_strerror",
				"comment": " Name: curl_share_strerror()\n\n Description:\n\n The curl_share_strerror function may be used to turn a CURLSHcode value\n into the equivalent human readable error string.  This is useful\n for printing meaningful error messages.\n",
				"originalType": "extern (C) const(char)*(CURLSHcode)"
			},
			{
				"kind": "function",
				"line": 1899,
				"deco": "UPviZi",
				"char": 11,
				"parameters": [
					{
						"deco": "Pv",
						"name": "handle"
					},
					{
						"deco": "i",
						"name": "bitmask"
					}
				],
				"name": "curl_easy_pause",
				"comment": " Name: curl_easy_pause()\n\n Description:\n\n The curl_easy_pause function pauses or unpauses transfers. Select the new\n state by setting the bitmask, use the convenience defines below.\n\n",
				"originalType": "extern (C) CURLcode(CURL* handle, int bitmask)"
			},
			{
				"kind": "enum",
				"line": 1904,
				"members": [
					{
						"kind": "enum member",
						"line": 1905,
						"value": "1",
						"char": 3,
						"name": "recv",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 1906,
						"value": "0",
						"char": 3,
						"name": "recv_cont",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 1907,
						"value": "4",
						"char": 3,
						"name": "send",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 1908,
						"value": "0",
						"char": 3,
						"name": "send_cont",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 1910,
						"value": "5",
						"char": 3,
						"name": "all",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 1912,
						"value": "0",
						"char": 3,
						"name": "cont",
						"comment": "\n"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "CurlPause",
				"comment": "\n"
			},
			{
				"kind": "function",
				"line": 1941,
				"deco": "UZPv",
				"char": 10,
				"name": "curl_easy_init",
				"comment": "\n",
				"originalType": "extern (C) CURL*()"
			},
			{
				"kind": "function",
				"line": 1943,
				"deco": "UPviYi",
				"char": 13,
				"parameters": [
					{
						"deco": "Pv",
						"name": "curl"
					},
					{
						"deco": "i",
						"name": "option"
					}
				],
				"name": "curl_easy_setopt",
				"comment": "\n",
				"originalType": "extern (C) CURLcode(CURL* curl, CURLoption option, ...)"
			},
			{
				"kind": "function",
				"line": 1945,
				"deco": "UPvZi",
				"char": 13,
				"parameters": [
					{
						"deco": "Pv",
						"name": "curl"
					}
				],
				"name": "curl_easy_perform",
				"comment": "\n",
				"originalType": "extern (C) CURLcode(CURL* curl)"
			},
			{
				"kind": "function",
				"line": 1947,
				"deco": "UPvZv",
				"char": 9,
				"parameters": [
					{
						"deco": "Pv",
						"name": "curl"
					}
				],
				"name": "curl_easy_cleanup",
				"comment": "\n",
				"originalType": "extern (C) void(CURL* curl)"
			},
			{
				"kind": "function",
				"line": 1963,
				"deco": "UPviYi",
				"char": 22,
				"parameters": [
					{
						"deco": "Pv",
						"name": "curl"
					},
					{
						"deco": "i",
						"name": "info"
					}
				],
				"name": "curl_easy_getinfo",
				"comment": " Name: curl_easy_getinfo()\n\n Description:\n\n Request internal information from the curl session with this function.  The\n third argument MUST be a pointer to a long, a pointer to a char * or a\n pointer to a double (as the documentation describes elsewhere).  The data\n pointed to will be filled in accordingly and can be relied upon only if the\n function returns CURLE_OK.  This function is intended to get used *AFTER* a\n performed transfer, all results from this function are undefined until the\n transfer is completed.\n",
				"originalType": "extern (C) CURLcode(CURL* curl, CURLINFO info, ...)"
			},
			{
				"kind": "function",
				"line": 1978,
				"deco": "UPvZPv",
				"char": 19,
				"parameters": [
					{
						"deco": "Pv",
						"name": "curl"
					}
				],
				"name": "curl_easy_duphandle",
				"comment": " Name: curl_easy_duphandle()\n\n Description:\n\n Creates a new curl session handle with the same options set for the handle\n passed in. Duplicating a handle could only be a matter of cloning data and\n options, internal state info and things like persistant connections cannot\n be transfered. It is useful in multithreaded applications when you can run\n curl_easy_duphandle() for each new thread to avoid a series of identical\n curl_easy_setopt() invokes in every thread.\n",
				"originalType": "extern (C) CURL*(CURL* curl)"
			},
			{
				"kind": "function",
				"line": 1991,
				"deco": "UPvZv",
				"char": 18,
				"parameters": [
					{
						"deco": "Pv",
						"name": "curl"
					}
				],
				"name": "curl_easy_reset",
				"comment": " Name: curl_easy_reset()\n\n Description:\n\n Re-initializes a CURL handle to the default values. This puts back the\n handle to the same state as it was in when it was just created.\n\n It does keep: live connections, the Session ID cache, the DNS cache and the\n cookies.\n",
				"originalType": "extern (C) void(CURL* curl)"
			},
			{
				"kind": "function",
				"line": 2001,
				"deco": "UPvPvmPmZi",
				"char": 22,
				"parameters": [
					{
						"deco": "Pv",
						"name": "curl"
					},
					{
						"deco": "Pv",
						"name": "buffer"
					},
					{
						"deco": "m",
						"name": "buflen"
					},
					{
						"deco": "Pm",
						"name": "n"
					}
				],
				"name": "curl_easy_recv",
				"comment": " Name: curl_easy_recv()\n\n Description:\n\n Receives data from the connected socket. Use after successful\n curl_easy_perform() with CURLOPT_CONNECT_ONLY option.\n",
				"originalType": "extern (C) CURLcode(CURL* curl, void* buffer, size_t buflen, size_t* n)"
			},
			{
				"kind": "function",
				"line": 2011,
				"deco": "UPvPvmPmZi",
				"char": 22,
				"parameters": [
					{
						"deco": "Pv",
						"name": "curl"
					},
					{
						"deco": "Pv",
						"name": "buffer"
					},
					{
						"deco": "m",
						"name": "buflen"
					},
					{
						"deco": "Pm",
						"name": "n"
					}
				],
				"name": "curl_easy_send",
				"comment": " Name: curl_easy_send()\n\n Description:\n\n Sends data over the connected socket. Use after successful\n curl_easy_perform() with CURLOPT_CONNECT_ONLY option.\n",
				"originalType": "extern (C) CURLcode(CURL* curl, void* buffer, size_t buflen, size_t* n)"
			},
			{
				"kind": "alias",
				"line": 2046,
				"deco": "v",
				"char": 12,
				"name": "CURLM",
				"comment": "\n"
			},
			{
				"kind": "enum",
				"line": 2049,
				"members": [
					{
						"kind": "enum member",
						"line": 2050,
						"value": "-1",
						"char": 5,
						"name": "call_multi_perform",
						"comment": " please call curl_multi_perform() or curl_multi_socket*() soon\n"
					},
					{
						"kind": "enum member",
						"line": 2051,
						"value": "0",
						"char": 5,
						"name": "ok",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 2052,
						"value": "1",
						"char": 5,
						"name": "bad_handle",
						"comment": " the passed-in handle is not a valid CURLM handle\n"
					},
					{
						"kind": "enum member",
						"line": 2053,
						"value": "2",
						"char": 5,
						"name": "bad_easy_handle",
						"comment": " an easy handle was not good/valid\n"
					},
					{
						"kind": "enum member",
						"line": 2054,
						"value": "3",
						"char": 5,
						"name": "out_of_memory",
						"comment": " if you ever get this, you're in deep sh*t\n"
					},
					{
						"kind": "enum member",
						"line": 2055,
						"value": "4",
						"char": 5,
						"name": "internal_error",
						"comment": " this is a libcurl bug\n"
					},
					{
						"kind": "enum member",
						"line": 2056,
						"value": "5",
						"char": 5,
						"name": "bad_socket",
						"comment": " the passed in socket argument did not match\n"
					},
					{
						"kind": "enum member",
						"line": 2057,
						"value": "6",
						"char": 5,
						"name": "unknown_option",
						"comment": " curl_multi_setopt() with unsupported option\n"
					},
					{
						"kind": "enum member",
						"line": 2058,
						"value": "7",
						"char": 5,
						"name": "last",
						"comment": "\n"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "CurlM",
				"comment": "\n"
			},
			{
				"kind": "alias",
				"line": 2061,
				"deco": "i",
				"char": 11,
				"name": "CURLMcode",
				"comment": "\n"
			},
			{
				"kind": "variable",
				"line": 2066,
				"init": "cast(CurlM)-1",
				"storageClass": [
					"enum"
				],
				"deco": "E3etc1c4curl5CurlM",
				"char": 6,
				"name": "CURLM_CALL_MULTI_SOCKET",
				"comment": " just to make code nicer when using curl_multi_socket() you can now check\n   for CURLM_CALL_MULTI_SOCKET too in the same style it works for\n   curl_multi_perform() and CURLM_CALL_MULTI_PERFORM\n"
			},
			{
				"kind": "enum",
				"line": 2069,
				"members": [
					{
						"kind": "enum member",
						"line": 2071,
						"value": "0",
						"char": 5,
						"name": "none",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 2072,
						"value": "1",
						"char": 5,
						"name": "done",
						"comment": " This easy handle has completed. 'result' contains\n             the CURLcode of the transfer\n"
					},
					{
						"kind": "enum member",
						"line": 2074,
						"value": "2",
						"char": 5,
						"name": "last",
						"comment": " no used\n"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "CurlMsg",
				"comment": "\n"
			},
			{
				"kind": "alias",
				"line": 2077,
				"deco": "i",
				"char": 11,
				"name": "CURLMSG",
				"comment": "\n"
			},
			{
				"kind": "union",
				"line": 2080,
				"members": [
					{
						"kind": "variable",
						"line": 2082,
						"deco": "Pv",
						"char": 11,
						"name": "whatever",
						"comment": " message-specific data\n",
						"offset": 0
					},
					{
						"kind": "variable",
						"line": 2083,
						"deco": "i",
						"char": 14,
						"name": "result",
						"comment": " return code for transfer\n",
						"originalType": "CURLcode",
						"offset": 0
					}
				],
				"char": 12,
				"name": "_N31",
				"comment": "\n"
			},
			{
				"kind": "struct",
				"line": 2087,
				"members": [
					{
						"kind": "variable",
						"line": 2089,
						"deco": "i",
						"char": 13,
						"name": "msg",
						"comment": " what this message means\n",
						"originalType": "CURLMSG",
						"offset": 0
					},
					{
						"kind": "variable",
						"line": 2090,
						"deco": "Pv",
						"char": 11,
						"name": "easy_handle",
						"comment": " the handle it concerns\n",
						"originalType": "CURL*",
						"offset": 8
					},
					{
						"kind": "variable",
						"line": 2091,
						"deco": "S3etc1c4curl4_N31",
						"char": 10,
						"name": "data",
						"comment": "\n",
						"offset": 16
					}
				],
				"char": 12,
				"name": "CURLMsg",
				"comment": "\n"
			},
			{
				"kind": "function",
				"line": 2101,
				"deco": "UZPv",
				"char": 20,
				"name": "curl_multi_init",
				"comment": " Name:    curl_multi_init()\n\n Desc:    inititalize multi-style curl usage\n\n Returns: a new CURLM handle to use in all 'curl_multi' functions.\n",
				"originalType": "extern (C) CURLM*()"
			},
			{
				"kind": "function",
				"line": 2110,
				"deco": "UPvPvZi",
				"char": 23,
				"parameters": [
					{
						"deco": "Pv",
						"name": "multi_handle"
					},
					{
						"deco": "Pv",
						"name": "curl_handle"
					}
				],
				"name": "curl_multi_add_handle",
				"comment": " Name:    curl_multi_add_handle()\n\n Desc:    add a standard curl handle to the multi stack\n\n Returns: CURLMcode type, general multi error code.\n",
				"originalType": "extern (C) CURLMcode(CURLM* multi_handle, CURL* curl_handle)"
			},
			{
				"kind": "function",
				"line": 2119,
				"deco": "UPvPvZi",
				"char": 23,
				"parameters": [
					{
						"deco": "Pv",
						"name": "multi_handle"
					},
					{
						"deco": "Pv",
						"name": "curl_handle"
					}
				],
				"name": "curl_multi_remove_handle",
				"comment": " Name:    curl_multi_remove_handle()\n\n Desc:    removes a curl handle from the multi stack again\n\n Returns: CURLMcode type, general multi error code.\n",
				"originalType": "extern (C) CURLMcode(CURLM* multi_handle, CURL* curl_handle)"
			},
			{
				"kind": "alias",
				"line": 2132,
				"deco": "i",
				"char": 11,
				"name": "fd_set",
				"comment": " Name:    curl_multi_fdset()\n\n Desc:    Ask curl for its fd_set sets. The app can use these to select() or\n          poll() on. We want curl_multi_perform() called as soon as one of\n          them are ready.\n\n Returns: CURLMcode type, general multi error code.\n\n tmp decl\n"
			},
			{
				"kind": "function",
				"line": 2134,
				"deco": "UPvPiPiPiPiZi",
				"char": 23,
				"parameters": [
					{
						"deco": "Pv",
						"name": "multi_handle"
					},
					{
						"deco": "Pi",
						"name": "read_fd_set"
					},
					{
						"deco": "Pi",
						"name": "write_fd_set"
					},
					{
						"deco": "Pi",
						"name": "exc_fd_set"
					},
					{
						"deco": "Pi",
						"name": "max_fd"
					}
				],
				"name": "curl_multi_fdset",
				"comment": "\n",
				"originalType": "extern (C) CURLMcode(CURLM* multi_handle, fd_set* read_fd_set, fd_set* write_fd_set, fd_set* exc_fd_set, int* max_fd)"
			},
			{
				"kind": "function",
				"line": 2152,
				"deco": "UPvPiZi",
				"char": 23,
				"parameters": [
					{
						"deco": "Pv",
						"name": "multi_handle"
					},
					{
						"deco": "Pi",
						"name": "running_handles"
					}
				],
				"name": "curl_multi_perform",
				"comment": " Name:    curl_multi_perform()\n\n Desc:    When the app thinks there's data available for curl it calls this\n          function to read/write whatever there is right now. This returns\n          as soon as the reads and writes are done. This function does not\n          require that there actually is data available for reading or that\n          data can be written, it can be called just in case. It returns\n          the number of handles that still transfer data in the second\n          argument's integer-pointer.\n\n Returns: CURLMcode type, general multi error code. *NOTE* that this only\n          returns errors etc regarding the whole multi stack. There might\n          still have occurred problems on invidual transfers even when this\n          returns OK.\n",
				"originalType": "extern (C) CURLMcode(CURLM* multi_handle, int* running_handles)"
			},
			{
				"kind": "function",
				"line": 2164,
				"deco": "UPvZi",
				"char": 23,
				"parameters": [
					{
						"deco": "Pv",
						"name": "multi_handle"
					}
				],
				"name": "curl_multi_cleanup",
				"comment": " Name:    curl_multi_cleanup()\n\n Desc:    Cleans up and removes a whole multi stack. It does not free or\n          touch any individual easy handles in any way. We need to define\n          in what state those handles will be if this function is called\n          in the middle of a transfer.\n\n Returns: CURLMcode type, general multi error code.\n",
				"originalType": "extern (C) CURLMcode(CURLM* multi_handle)"
			},
			{
				"kind": "function",
				"line": 2194,
				"deco": "UPvPiZPS3etc1c4curl7CURLMsg",
				"char": 22,
				"parameters": [
					{
						"deco": "Pv",
						"name": "multi_handle"
					},
					{
						"deco": "Pi",
						"name": "msgs_in_queue"
					}
				],
				"name": "curl_multi_info_read",
				"comment": " Name:    curl_multi_info_read()\n\n Desc:    Ask the multi handle if there's any messages/informationals from\n          the individual transfers. Messages include informationals such as\n          error code from the transfer or just the fact that a transfer is\n          completed. More details on these should be written down as well.\n\n          Repeated calls to this function will return a new struct each\n          time, until a special \"end of msgs\" struct is returned as a signal\n          that there is no more to get at this point.\n\n          The data the returned pointer points to will not survive calling\n          curl_multi_cleanup().\n\n          The 'CURLMsg' struct is meant to be very simple and only contain\n          very basic informations. If more involved information is wanted,\n          we will provide the particular \"transfer handle\" in that struct\n          and that should/could/would be used in subsequent\n          curl_easy_getinfo() calls (or similar). The point being that we\n          must never expose complex structs to applications, as then we'll\n          undoubtably get backwards compatibility problems in the future.\n\n Returns: A pointer to a filled-in struct, or NULL if it failed or ran out\n          of structs. It also writes the number of messages left in the\n          queue (after this read) in the integer the second argument points\n          to.\n",
				"originalType": "extern (C) CURLMsg*(CURLM* multi_handle, int* msgs_in_queue)"
			},
			{
				"kind": "function",
				"line": 2205,
				"deco": "UiZPxa",
				"char": 25,
				"parameters": [
					{
						"deco": "i"
					}
				],
				"name": "curl_multi_strerror",
				"comment": " Name:    curl_multi_strerror()\n\n Desc:    The curl_multi_strerror function may be used to turn a CURLMcode\n          value into the equivalent human readable error string.  This is\n          useful for printing meaningful error messages.\n\n Returns: A pointer to a zero-terminated error message.\n",
				"originalType": "extern (C) const(char)*(CURLMcode)"
			},
			{
				"kind": "enum",
				"line": 2216,
				"members": [
					{
						"kind": "enum member",
						"line": 2217,
						"value": "0",
						"char": 3,
						"name": "none_",
						"comment": " jdrewsen - underscored in order not to clash with reserved D symbols\n"
					},
					{
						"kind": "enum member",
						"line": 2218,
						"value": "1",
						"char": 3,
						"name": "in_",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 2219,
						"value": "2",
						"char": 3,
						"name": "out_",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 2220,
						"value": "3",
						"char": 3,
						"name": "inout_",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 2221,
						"value": "4",
						"char": 3,
						"name": "remove_",
						"comment": "\n"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "CurlPoll",
				"comment": " Name:    curl_multi_socket() and\n          curl_multi_socket_all()\n\n Desc:    An alternative version of curl_multi_perform() that allows the\n          application to pass in one of the file descriptors that have been\n          detected to have \"action\" on them and let libcurl perform.\n          See man page for details.\n"
			},
			{
				"kind": "alias",
				"line": 2225,
				"char": 23,
				"name": "CURL_SOCKET_TIMEOUT",
				"comment": "\n"
			},
			{
				"kind": "enum",
				"line": 2228,
				"members": [
					{
						"kind": "enum member",
						"line": 2229,
						"value": "1",
						"char": 3,
						"name": "in_",
						"comment": " jdrewsen - underscored in order not to clash with reserved D symbols\n"
					},
					{
						"kind": "enum member",
						"line": 2230,
						"value": "2",
						"char": 3,
						"name": "out_",
						"comment": "\n"
					},
					{
						"kind": "enum member",
						"line": 2231,
						"value": "4",
						"char": 3,
						"name": "err_",
						"comment": "\n"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "CurlCSelect",
				"comment": "\n"
			},
			{
				"kind": "alias",
				"line": 2240,
				"deco": "PUPvE3std6socket8socket_tiPvPvZi",
				"char": 36,
				"name": "curl_socket_callback",
				"comment": "\n\n private socket pointer\n"
			},
			{
				"kind": "alias",
				"line": 2258,
				"deco": "PUPvlPvZi",
				"char": 35,
				"name": "curl_multi_timer_callback",
				"comment": " private callback pointer\n\n Name:    curl_multi_timer_callback\n\n Desc:    Called by libcurl whenever the library detects a change in the\n          maximum number of milliseconds the app is allowed to wait before\n          curl_multi_socket() or curl_multi_perform() must be called\n          (to allow libcurl's timed events to take place).\n\n Returns: The callback should return zero.\n\n private callback pointer\n"
			},
			{
				"kind": "function",
				"line": 2260,
				"deco": "UPvE3std6socket8socket_tPiZi",
				"char": 14,
				"parameters": [
					{
						"deco": "Pv",
						"name": "multi_handle"
					},
					{
						"deco": "E3std6socket8socket_t",
						"name": "s"
					},
					{
						"deco": "Pi",
						"name": "running_handles"
					}
				],
				"name": "curl_multi_socket",
				"comment": "ditto\n\n Name:    curl_multi_timer_callback\n\n Desc:    Called by libcurl whenever the library detects a change in the\n          maximum number of milliseconds the app is allowed to wait before\n          curl_multi_socket() or curl_multi_perform() must be called\n          (to allow libcurl's timed events to take place).\n\n Returns: The callback should return zero.\n\n private callback pointer\n",
				"originalType": "extern (C) CURLMcode(CURLM* multi_handle, curl_socket_t s, int* running_handles)"
			},
			{
				"kind": "function",
				"line": 2262,
				"deco": "UPvE3std6socket8socket_tiPiZi",
				"char": 14,
				"parameters": [
					{
						"deco": "Pv",
						"name": "multi_handle"
					},
					{
						"deco": "E3std6socket8socket_t",
						"name": "s"
					},
					{
						"deco": "i",
						"name": "ev_bitmask"
					},
					{
						"deco": "Pi",
						"name": "running_handles"
					}
				],
				"name": "curl_multi_socket_action",
				"comment": "ditto\n\n Name:    curl_multi_timer_callback\n\n Desc:    Called by libcurl whenever the library detects a change in the\n          maximum number of milliseconds the app is allowed to wait before\n          curl_multi_socket() or curl_multi_perform() must be called\n          (to allow libcurl's timed events to take place).\n\n Returns: The callback should return zero.\n\n private callback pointer\n",
				"originalType": "extern (C) CURLMcode(CURLM* multi_handle, curl_socket_t s, int ev_bitmask, int* running_handles)"
			},
			{
				"kind": "function",
				"line": 2264,
				"deco": "UPvPiZi",
				"char": 14,
				"parameters": [
					{
						"deco": "Pv",
						"name": "multi_handle"
					},
					{
						"deco": "Pi",
						"name": "running_handles"
					}
				],
				"name": "curl_multi_socket_all",
				"comment": "ditto\n\n Name:    curl_multi_timer_callback\n\n Desc:    Called by libcurl whenever the library detects a change in the\n          maximum number of milliseconds the app is allowed to wait before\n          curl_multi_socket() or curl_multi_perform() must be called\n          (to allow libcurl's timed events to take place).\n\n Returns: The callback should return zero.\n\n private callback pointer\n",
				"originalType": "extern (C) CURLMcode(CURLM* multi_handle, int* running_handles)"
			},
			{
				"kind": "function",
				"line": 2280,
				"deco": "UPvPlZi",
				"char": 23,
				"parameters": [
					{
						"deco": "Pv",
						"name": "multi_handle"
					},
					{
						"deco": "Pl",
						"name": "milliseconds"
					}
				],
				"name": "curl_multi_timeout",
				"comment": " This macro below was added in 7.16.3 to push users who recompile to use\n   the new curl_multi_socket_action() instead of the old curl_multi_socket()\n\n Name:    curl_multi_timeout()\n\n Desc:    Returns the maximum number of milliseconds the app is allowed to\n          wait before curl_multi_socket() or curl_multi_perform() must be\n          called (to allow libcurl's timed events to take place).\n\n Returns: CURLM error code.\n",
				"originalType": "extern (C) CURLMcode(CURLM* multi_handle, c_long* milliseconds)"
			},
			{
				"kind": "enum",
				"line": 2283,
				"members": [
					{
						"kind": "enum member",
						"line": 2284,
						"value": "20001",
						"char": 5,
						"name": "socketfunction",
						"comment": " This is the socket callback function pointer\n"
					},
					{
						"kind": "enum member",
						"line": 2285,
						"value": "10002",
						"char": 5,
						"name": "socketdata",
						"comment": " This is the argument passed to the socket callback\n"
					},
					{
						"kind": "enum member",
						"line": 2286,
						"value": "3",
						"char": 5,
						"name": "pipelining",
						"comment": " set to 1 to enable pipelining for this multi handle\n"
					},
					{
						"kind": "enum member",
						"line": 2287,
						"value": "20004",
						"char": 5,
						"name": "timerfunction",
						"comment": " This is the timer callback function pointer\n"
					},
					{
						"kind": "enum member",
						"line": 2288,
						"value": "10005",
						"char": 5,
						"name": "timerdata",
						"comment": " This is the argument passed to the timer callback\n"
					},
					{
						"kind": "enum member",
						"line": 2289,
						"value": "6",
						"char": 5,
						"name": "maxconnects",
						"comment": " maximum number of entries in the connection cache\n"
					},
					{
						"kind": "enum member",
						"line": 2290,
						"value": "7",
						"char": 5,
						"name": "lastentry",
						"comment": "\n"
					}
				],
				"char": 1,
				"baseDeco": "i",
				"name": "CurlMOption",
				"comment": "\n"
			},
			{
				"kind": "alias",
				"line": 2293,
				"deco": "i",
				"char": 11,
				"name": "CURLMoption",
				"comment": "\n"
			},
			{
				"kind": "function",
				"line": 2303,
				"deco": "UPviYi",
				"char": 23,
				"parameters": [
					{
						"deco": "Pv",
						"name": "multi_handle"
					},
					{
						"deco": "i",
						"name": "option"
					}
				],
				"name": "curl_multi_setopt",
				"comment": " Name:    curl_multi_setopt()\n\n Desc:    Sets options for the multi handle.\n\n Returns: CURLM error code.\n",
				"originalType": "extern (C) CURLMcode(CURLM* multi_handle, CURLMoption option, ...)"
			},
			{
				"kind": "function",
				"line": 2315,
				"deco": "UPvE3std6socket8socket_tPvZi",
				"char": 23,
				"parameters": [
					{
						"deco": "Pv",
						"name": "multi_handle"
					},
					{
						"deco": "E3std6socket8socket_t",
						"name": "sockfd"
					},
					{
						"deco": "Pv",
						"name": "sockp"
					}
				],
				"name": "curl_multi_assign",
				"comment": " Name:    curl_multi_assign()\n\n Desc:    This function sets an association in the multi handle between the\n          given socket and a private pointer of the application. This is\n          (only) useful for curl_multi_socket uses.\n\n Returns: CURLM error code.\n",
				"originalType": "extern (C) CURLMcode(CURLM* multi_handle, curl_socket_t sockfd, void* sockp)"
			}
		],
		"name": "etc.c.curl",
		"comment": "   This is an interface to the libcurl library.\n\n   Converted to D from curl headers by $(LINK2 http://www.digitalmars.com/d/2.0/htod.html, htod) and\n   cleaned up by Jonas Drewsen (jdrewsen)\n\n   Windows x86 note:\n   A DMD compatible libcurl static library can be downloaded from the dlang.org\n   $(LINK2 http://dlang.org/download.html, download page).\n\n Copyright (C) 1998 - 2010, Daniel Stenberg, &lt;daniel@haxx.se&gt;, et al.\n\n This software is licensed as described in the file COPYING, which\n you should have received as part of this distribution. The terms\n are also available at $(LINK http://curl.haxx.se/docs/copyright.html).\n\n You may opt to use, copy, modify, merge, publish, distribute and/or sell\n copies of the Software, and permit persons to whom the Software is\n furnished to do so, under the terms of the COPYING file.\n\n This software is distributed on an \"AS IS\" basis, WITHOUT WARRANTY OF ANY\n KIND, either express or implied.\n\n"
	}
]